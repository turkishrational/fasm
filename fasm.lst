                                                                ; -----------------------------------------------------------
                                                                ; FASM.PRG - FLAT Assembler for TRDOS 386 (v2.0.9 and later)
                                                                ; Erdogan Tan - 2024
                                                                ; Beginning: 04/10/2024
                                                                ; Last Update: 06/10/2024
                                                                ; -----------------------------------------------------------
                                                                ; Modified from 'fasm.asm' file of
                                                                ; 'flat assembler 1.73.32 for Linux' source code
                                                                ; 2024
                                                                
                                                                
                                                                ; flat assembler interface for Linux
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                	;format	ELF executable 3
                                                                	;entry	start
                                                                
                                                                ;segment readable executable
                                                                
                                                                	; TRDOS 386
                                                                	use32
                                                                	org 0x0
                                                                start:
                                                                	;mov	[con_handle],1
00000000: BE 12 07 00 00                                        	mov	esi,_logo
00000005: E8 EF 03 00 00                                        	call	display_string
                                                                
                                                                	; LINUX & TRDOS 386
0000000A: 89 25 47 A6 01 00                                     	mov	[command_line],esp
                                                                	; TRDOS 386
                                                                	;mov	ecx,[esp]
                                                                	;lea	ebx,[esp+4+ecx*4+4]
                                                                	;mov	[environment],ebx
00000010: E8 D9 00 00 00                                        	call	get_params
00000015: 0F 82 C2 00 00 00                                     	jc	information
                                                                
0000001B: E8 99 02 00 00                                        	call	init_memory
                                                                
00000020: BE 5A 08 00 00                                        	mov	esi,_memory_prefix
00000025: E8 CF 03 00 00                                        	call	display_string
0000002A: A1 30 A1 01 00                                        	mov	eax,[memory_end]
0000002F: 2B 05 2C A1 01 00                                     	sub	eax,[memory_start]
00000035: 03 05 38 A1 01 00                                     	add	eax,[additional_memory_end]
0000003B: 2B 05 34 A1 01 00                                     	sub	eax,[additional_memory]
00000041: C1 E8 0A                                              	shr	eax,10
00000044: E8 D9 03 00 00                                        	call	display_number
00000049: BE 5E 08 00 00                                        	mov	esi,_memory_suffix
0000004E: E8 A6 03 00 00                                        	call	display_string
                                                                
                                                                	;mov	eax,78
                                                                	;mov	ebx,buffer
                                                                	;xor	ecx,ecx
                                                                	;int	0x80
                                                                	;mov	eax,dword [buffer]
                                                                	;mov	ecx,1000
                                                                	;mul	ecx
                                                                	;mov	ebx,eax
                                                                	;mov	eax,dword [buffer+4]
                                                                	;div	ecx
                                                                	;add	eax,ebx
                                                                	; TRDOS 386
00000053: B8 0D 00 00 00                                        	mov	eax,13  ; systime
00000058: 29 DB                                                 	sub	ebx,ebx ; 0 -> get unix/epoch time
0000005A: CD 40                                                 	int	0x40
0000005C: A3 5F A6 01 00                                        	mov	[start_time],eax
                                                                
00000061: 80 25 69 A6 01 00 00                                  	and	[preprocessing_done],0
00000068: E8 CB 0F 00 00                                        	call	preprocessor
0000006D: 80 0D 69 A6 01 00 FF                                  	or	[preprocessing_done],-1
00000074: E8 D2 2D 00 00                                        	call	parser
00000079: E8 10 49 00 00                                        	call	assembler
0000007E: E8 E0 7D 00 00                                        	call	formatter
                                                                
00000083: E8 D8 03 00 00                                        	call	display_user_messages
00000088: 0F B7 05 52 A1 01 00                                  	movzx	eax,[current_pass]
0000008F: 40                                                    	inc	eax
00000090: E8 8D 03 00 00                                        	call	display_number
00000095: BE 73 08 00 00                                        	mov	esi,_passes_suffix
0000009A: E8 5A 03 00 00                                        	call	display_string
                                                                	
                                                                	;mov	eax,78
                                                                	;mov	ebx,buffer
                                                                	;xor	ecx,ecx
                                                                	;int	0x80
                                                                	;mov	eax,dword [buffer]
                                                                	;mov	ecx,1000
                                                                	;mul	ecx
                                                                	;mov	ebx,eax
                                                                	;mov	eax,dword [buffer+4]
                                                                	;div	ecx
                                                                	;add	eax,ebx
                                                                	; TRDOS 386
0000009F: B8 0D 00 00 00                                        	mov	eax,13  ; systime
000000A4: 29 DB                                                 	sub	ebx,ebx ; 0 -> get unix/epoch time
000000A6: CD 40                                                 	int	0x40
                                                                		
000000A8: 2B 05 5F A6 01 00                                     	sub	eax,[start_time]
                                                                	;jnc	time_ok
                                                                	;;add	eax,3600000
                                                                	;add	eax,3600
                                                                	time_ok:
                                                                	;xor	edx,edx
                                                                	;mov	ebx,100
                                                                	;div	ebx
                                                                	;or	eax,eax
                                                                	;jz	display_bytes_count
                                                                	; TRDOS 386
000000AE: 83 F8 02                                              	cmp	eax,2
000000B1: 72 0F                                                 	jb	display_bytes_count
                                                                
                                                                	;xor	edx,edx
                                                                	;mov	ebx,10
                                                                	;div	ebx
                                                                	;push	edx
                                                                	;call	display_number
                                                                	;mov	dl,'.'
                                                                	;call	display_character
                                                                	;pop	eax
000000B3: E8 6A 03 00 00                                        	call	display_number
000000B8: BE 7D 08 00 00                                        	mov	esi,_seconds_suffix
000000BD: E8 37 03 00 00                                        	call	display_string
                                                                      display_bytes_count:
000000C2: A1 6C A1 01 00                                        	mov	eax,[written_size]
000000C7: E8 56 03 00 00                                        	call	display_number
000000CC: BE 88 08 00 00                                        	mov	esi,_bytes_suffix
000000D1: E8 23 03 00 00                                        	call	display_string
000000D6: 30 C0                                                 	xor	al,al
000000D8: E9 3A 02 00 00                                        	jmp	exit_program
                                                                
                                                                information:
000000DD: BE 32 07 00 00                                        	mov	esi,_usage
000000E2: E8 12 03 00 00                                        	call	display_string
000000E7: B0 01                                                 	mov	al,1
000000E9: E9 29 02 00 00                                        	jmp	exit_program
                                                                
                                                                get_params:
000000EE: 8B 1D 47 A6 01 00                                     	mov	ebx,[command_line] ; argc
000000F4: C7 05 44 A1 01 00 00 00 00 00                         	mov	[input_file],0
000000FE: C7 05 48 A1 01 00 00 00 00 00                         	mov	[output_file],0
00000108: C7 05 4C A1 01 00 00 00 00 00                         	mov	[symbols_file],0
00000112: C7 05 4B A6 01 00 00 00 00 00                         	mov	[memory_setting],0
0000011C: 66 C7 05 50 A1 01 00 64 00                            	mov	[passes_limit],100
00000125: 8B 0B                                                 	mov	ecx,[ebx] ; argc
00000127: 83 C3 08                                              	add	ebx,8	; argv[1] ; argv[0] is program file's name
0000012A: 49                                                    	dec	ecx
0000012B: 74 69                                                 	jz	bad_params
0000012D: C7 05 4F A6 01 00 6A A6 01 00                         	mov	[definitions_pointer],predefinitions
                                                                      get_param:
00000137: 8B 33                                                 	mov	esi,[ebx]
00000139: 8A 06                                                 	mov	al,[esi]
0000013B: 3C 2D                                                 	cmp	al,'-'
0000013D: 74 25                                                 	je	option_param
0000013F: 83 3D 44 A1 01 00 00                                  	cmp	[input_file],0
00000146: 75 0B                                                 	jne	get_output_file
00000148: 89 35 44 A1 01 00                                     	mov	[input_file],esi
0000014E: E9 90 00 00 00                                        	jmp	next_param
                                                                      get_output_file:
00000153: 83 3D 48 A1 01 00 00                                  	cmp	[output_file],0
0000015A: 75 3A                                                 	jne	bad_params
0000015C: 89 35 48 A1 01 00                                     	mov	[output_file],esi
00000162: EB 7F                                                 	jmp	next_param
                                                                      option_param:
00000164: 46                                                    	inc	esi
00000165: AC                                                    	lodsb
00000166: 3C 6D                                                 	cmp	al,'m'
00000168: 74 2E                                                 	je	memory_option
0000016A: 3C 4D                                                 	cmp	al,'M'
0000016C: 74 2A                                                 	je	memory_option
0000016E: 3C 70                                                 	cmp	al,'p'
00000170: 74 4C                                                 	je	passes_option
00000172: 3C 50                                                 	cmp	al,'P'
00000174: 74 48                                                 	je	passes_option
00000176: 3C 64                                                 	cmp	al,'d'
00000178: 0F 84 8C 00 00 00                                     	je	definition_option
0000017E: 3C 44                                                 	cmp	al,'D'
00000180: 0F 84 84 00 00 00                                     	je	definition_option
00000186: 3C 73                                                 	cmp	al,'s'
00000188: 0F 84 A4 00 00 00                                     	je	symbols_option
0000018E: 3C 53                                                 	cmp	al,'S'
00000190: 0F 84 9C 00 00 00                                     	je	symbols_option
                                                                      bad_params:
00000196: F9                                                    	stc
00000197: C3                                                    	ret
                                                                      memory_option:
00000198: 80 3E 00                                              	cmp	byte [esi],0
0000019B: 75 08                                                 	jne	get_memory_setting
0000019D: 49                                                    	dec	ecx
0000019E: 74 F6                                                 	jz	bad_params
000001A0: 83 C3 04                                              	add	ebx,4
000001A3: 8B 33                                                 	mov	esi,[ebx]
                                                                      get_memory_setting:
000001A5: E8 A1 00 00 00                                        	call	get_option_value
000001AA: 09 D2                                                 	or	edx,edx
000001AC: 74 E8                                                 	jz	bad_params
000001AE: 81 FA 00 00 40 00                                     	cmp	edx,1 shl (32-10)
000001B4: 73 E0                                                 	jae	bad_params
000001B6: 89 15 4B A6 01 00                                     	mov	[memory_setting],edx
000001BC: EB 25                                                 	jmp	next_param
                                                                      passes_option:
000001BE: 80 3E 00                                              	cmp	byte [esi],0
000001C1: 75 08                                                 	jne	get_passes_setting
000001C3: 49                                                    	dec	ecx
000001C4: 74 D0                                                 	jz	bad_params
000001C6: 83 C3 04                                              	add	ebx,4
000001C9: 8B 33                                                 	mov	esi,[ebx]
                                                                      get_passes_setting:
000001CB: E8 7B 00 00 00                                        	call	get_option_value
000001D0: 09 D2                                                 	or	edx,edx
000001D2: 74 C2                                                 	jz	bad_params
000001D4: 81 FA 00 00 01 00                                     	cmp	edx,10000h
000001DA: 77 BA                                                 	ja	bad_params
000001DC: 66 89 15 50 A1 01 00                                  	mov	[passes_limit],dx
                                                                      next_param:
000001E3: 83 C3 04                                              	add	ebx,4
000001E6: 49                                                    	dec	ecx
000001E7: 0F 85 4A FF FF FF                                     	jnz	get_param
000001ED: 83 3D 44 A1 01 00 00                                  	cmp	[input_file],0
000001F4: 74 A0                                                 	je	bad_params
000001F6: A1 4F A6 01 00                                        	mov	eax,[definitions_pointer]
000001FB: C6 00 00                                              	mov	byte [eax],0
000001FE: C7 05 40 A1 01 00 6A A6 01 00                         	mov	[initial_definitions],predefinitions
00000208: F8                                                    	clc
00000209: C3                                                    	ret
                                                                      definition_option:
0000020A: 80 3E 00                                              	cmp	byte [esi],0
0000020D: 75 08                                                 	jne	get_definition
0000020F: 49                                                    	dec	ecx
00000210: 74 84                                                 	jz	bad_params
00000212: 83 C3 04                                              	add	ebx,4
00000215: 8B 33                                                 	mov	esi,[ebx]
                                                                      get_definition:
00000217: 57                                                    	push	edi
00000218: 8B 3D 4F A6 01 00                                     	mov	edi,[definitions_pointer]
0000021E: E8 4C 00 00 00                                        	call	convert_definition_option
00000223: 89 3D 4F A6 01 00                                     	mov	[definitions_pointer],edi
00000229: 5F                                                    	pop	edi
0000022A: 0F 82 66 FF FF FF                                     	jc	bad_params
00000230: EB B1                                                 	jmp	next_param
                                                                      symbols_option:
00000232: 80 3E 00                                              	cmp	byte [esi],0
00000235: 75 0C                                                 	jne	get_symbols_setting
00000237: 49                                                    	dec	ecx
00000238: 0F 84 58 FF FF FF                                     	jz	bad_params
0000023E: 83 C3 04                                              	add	ebx,4
00000241: 8B 33                                                 	mov	esi,[ebx]
                                                                      get_symbols_setting:
00000243: 89 35 4C A1 01 00                                     	mov	[symbols_file],esi
00000249: EB 98                                                 	jmp	next_param
                                                                      get_option_value:
0000024B: 31 C0                                                 	xor	eax,eax
0000024D: 89 C2                                                 	mov	edx,eax
                                                                      get_option_digit:
0000024F: AC                                                    	lodsb
00000250: 3C 20                                                 	cmp	al,20h
00000252: 74 17                                                 	je	option_value_ok
00000254: 08 C0                                                 	or	al,al
00000256: 74 13                                                 	jz	option_value_ok
00000258: 2C 30                                                 	sub	al,30h
0000025A: 72 12                                                 	jc	invalid_option_value2
0000025C: 3C 09                                                 	cmp	al,9
0000025E: 77 0D                                                 	ja	invalid_option_value
00000260: 6B D2 0A                                              	imul	edx,10
00000263: 70 08                                                 	jo	invalid_option_value
00000265: 01 C2                                                 	add	edx,eax
00000267: 72 05                                                 	jc	invalid_option_value2
00000269: EB E4                                                 	jmp	get_option_digit
                                                                      option_value_ok:
0000026B: 4E                                                    	dec	esi
                                                                	;clc	; TRDOS 386
0000026C: C3                                                    	ret
                                                                      invalid_option_value:
0000026D: F9                                                    	stc
                                                                      invalid_option_value2: ; TRDOS 386
0000026E: C3                                                    	ret
                                                                      convert_definition_option:
0000026F: 89 FA                                                 	mov	edx,edi
00000271: 81 FF 6A B6 01 00                                     	cmp	edi,predefinitions+1000h
00000277: 73 1D                                                 	jae	bad_definition_option
00000279: 30 C0                                                 	xor	al,al
0000027B: AA                                                    	stosb
                                                                      copy_definition_name:
0000027C: AC                                                    	lodsb
0000027D: 3C 3D                                                 	cmp	al,'='
0000027F: 74 17                                                 	je	copy_definition_value
00000281: 3C 20                                                 	cmp	al,20h
00000283: 74 11                                                 	je	bad_definition_option
00000285: 08 C0                                                 	or	al,al
00000287: 74 0D                                                 	jz	bad_definition_option
00000289: 81 FF 6A B6 01 00                                     	cmp	edi,predefinitions+1000h
0000028F: 73 05                                                 	jae	bad_definition_option
00000291: AA                                                    	stosb
00000292: FE 02                                                 	inc	byte [edx]
00000294: 75 E6                                                 	jnz	copy_definition_name
                                                                      bad_definition_option:
00000296: F9                                                    	stc
00000297: C3                                                    	ret
                                                                      copy_definition_value:
00000298: AC                                                    	lodsb
00000299: 3C 20                                                 	cmp	al,20h
0000029B: 74 0F                                                 	je	definition_value_end
0000029D: 08 C0                                                 	or	al,al
0000029F: 74 0B                                                 	jz	definition_value_end
000002A1: 81 FF 6A B6 01 00                                     	cmp	edi,predefinitions+1000h
000002A7: 73 ED                                                 	jae	bad_definition_option
000002A9: AA                                                    	stosb
000002AA: EB EC                                                 	jmp	copy_definition_value
                                                                      definition_value_end:
000002AC: 4E                                                    	dec	esi
000002AD: 81 FF 6A B6 01 00                                     	cmp	edi,predefinitions+1000h
000002B3: 73 E1                                                 	jae	bad_definition_option
000002B5: 30 C0                                                 	xor	al,al
000002B7: AA                                                    	stosb
                                                                	;clc	 ; TRDOS 386
000002B8: C3                                                    	ret
                                                                
                                                                include 'system.inc'
                                                                ; -----------------------------------------------------------
                                                                ; FLAT Assembler for TRDOS 386 (v2.0.9 and later)
                                                                ; Erdogan Tan - 2024
                                                                ; Beginning: 04/10/2024
                                                                ; Last Update: 06/10/2024
                                                                ; -----------------------------------------------------------
                                                                ; Modified from 'system.inc' file of
                                                                ; 'flat assembler 1.73.32 for Linux' source code
                                                                ; 2024
                                                                
                                                                ; flat assembler interface for Linux
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                ;O_ACCMODE  = 0003o
                                                                ;O_RDONLY   = 0000o
                                                                ;O_WRONLY   = 0001o
                                                                ;O_RDWR	    = 0002o
                                                                ;O_CREAT    = 0100o
                                                                ;O_EXCL	    = 0200o
                                                                ;O_NOCTTY   = 0400o
                                                                ;O_TRUNC    = 1000o
                                                                ;O_APPEND   = 2000o
                                                                ;O_NONBLOCK = 4000o
                                                                ;
                                                                ;S_ISUID    = 4000o
                                                                ;S_ISGID    = 2000o
                                                                ;S_ISVTX    = 1000o
                                                                ;S_IRUSR    = 0400o
                                                                ;S_IWUSR    = 0200o
                                                                ;S_IXUSR    = 0100o
                                                                ;S_IRGRP    = 0040o
                                                                ;S_IWGRP    = 0020o
                                                                ;S_IXGRP    = 0010o
                                                                ;S_IROTH    = 0004o
                                                                ;S_IWOTH    = 0002o
                                                                ;S_IXOTH    = 0001o
                                                                
                                                                init_memory:
000002B9: 89 E0                                                 	mov	eax,esp
000002BB: 25 00 F0 FF FF                                        	and	eax,not 0FFFh
000002C0: 05 00 10 FF FF                                        	add	eax,1000h-10000h
000002C5: A3 3C A1 01 00                                        	mov	[stack_limit],eax
000002CA: 31 DB                                                 	xor	ebx,ebx
                                                                	;mov	eax,45
                                                                	;int	0x80
                                                                	; TRDOS 386
000002CC: 4B                                                    	dec	ebx
                                                                	; ebx = -1
000002CD: B8 11 00 00 00                                        	mov	eax,17 ; sysbreak
000002D2: CD 40                                                 	int	0x40
                                                                	; eax = current u.break (bss) address
000002D4: A3 34 A1 01 00                                        	mov	[additional_memory],eax
000002D9: 8B 0D 4B A6 01 00                                     	mov	ecx,[memory_setting]
000002DF: C1 E1 0A                                              	shl	ecx,10
000002E2: 75 05                                                 	jnz	allocate_memory
000002E4: B9 00 00 00 01                                        	mov	ecx,1000000h
                                                                      allocate_memory:
000002E9: 8B 1D 34 A1 01 00                                     	mov	ebx,[additional_memory]
000002EF: 01 CB                                                 	add	ebx,ecx
                                                                	;mov	eax,45
                                                                	;int	0x80
                                                                	; TRDOS 386
000002F1: B8 11 00 00 00                                        	mov	eax,17 ; sysbreak
000002F6: CD 40                                                 	int	0x40
000002F8: A3 30 A1 01 00                                        	mov	[memory_end],eax
000002FD: 2B 05 34 A1 01 00                                     	sub	eax,[additional_memory]
00000303: C1 E8 02                                              	shr	eax,2
00000306: 03 05 34 A1 01 00                                     	add	eax,[additional_memory]
0000030C: A3 38 A1 01 00                                        	mov	[additional_memory_end],eax
00000311: A3 2C A1 01 00                                        	mov	[memory_start],eax
00000316: C3                                                    	ret
                                                                
                                                                exit_program:
00000317: 0F B6 D8                                              	movzx	ebx,al
0000031A: B8 01 00 00 00                                        	mov	eax,1	; sysexit
                                                                	;int	0x80
                                                                	; TRDOS 386
0000031F: CD 40                                                 	int	0x40
                                                                
                                                                get_environment_variable:
                                                                
                                                                if 0
                                                                	mov	ecx,esi
                                                                	mov	ebx,[environment]
                                                                      next_variable:
                                                                	mov	esi,[ebx]
                                                                	test	esi,esi
                                                                	jz	no_environment_variable
                                                                	add	ebx,4
                                                                      compare_variable_names:
                                                                	mov	edx,ecx
                                                                      compare_character:
                                                                	lodsb
                                                                	mov	ah,[edx]
                                                                	inc	edx
                                                                	cmp	al,'='
                                                                	je	end_of_variable_name
                                                                	or	ah,ah
                                                                	jz	next_variable
                                                                	sub	ah,al
                                                                	jz	compare_character
                                                                	cmp	ah,20h
                                                                	jne	next_variable
                                                                	cmp	al,41h
                                                                	jb	next_variable
                                                                	cmp	al,5Ah
                                                                	jna	compare_character
                                                                	jmp	next_variable
                                                                      no_environment_variable:
                                                                	ret
                                                                      end_of_variable_name:
                                                                	or	ah,ah
                                                                	jnz	next_variable
                                                                	
                                                                      copy_variable_value:
                                                                	lodsb
                                                                	cmp	edi,[memory_end]
                                                                	jae	out_of_memory
                                                                	stosb
                                                                	or	al,al
                                                                	jnz	copy_variable_value
                                                                	dec	edi
                                                                	ret
                                                                else
                                                                	; TRDOS 386
                                                                	; esi = environment variable address
                                                                	; (edi = [memory_start])
00000321: B9 20 00 00 00                                        	mov	ecx,32 ; max. 32 chars
00000326: 89 FB                                                 	mov	ebx,edi
                                                                      copy_environment_variable:
00000328: AC                                                     	lodsb
                                                                	;cmp	edi,[memory_end]
                                                                	;jae	out_of_memory
00000329: AA                                                    	stosb
0000032A: 08 C0                                                 	or	al,al
0000032C: 74 06                                                 	jz	short end_of_variable_name
0000032E: E2 F8                                                 	loop	copy_environment_variable
00000330: C6 47 FF 00                                           	mov	byte [edi-1],0
                                                                      end_of_variable_name:
                                                                	;neg	ecx
                                                                	;add	ecx,32
00000334: F6 D9                                                 	neg	cl
00000336: 80 C1 20                                              	add	cl,32
00000339: B8 18 00 00 00                                        	mov	eax,24	; sysenv
0000033E: 31 D2                                                 	xor	edx,edx ; dl = 0 -> 256 byte
00000340: CD 40                                                 	int	0x40
                                                                	;jc	no_environment_variable
00000342: 09 C0                                                 	or	eax,eax
00000344: 74 13                                                 	jz	no_environment_variable
                                                                	; eax = string length with zero tail
00000346: 89 C1                                                 	mov	ecx,eax
00000348: 89 DF                                                 	mov	edi,ebx
0000034A: B0 3D                                                 	mov	al,'='
0000034C: F2 AE                                                 	repne	scasb
0000034E: 67 E3 08                                              	jcxz	no_environment_variable
00000351: 89 FE                                                 	mov	esi,edi
                                                                	; esi = value address of env variable
00000353: 89 DF                                                 	mov	edi,ebx
                                                                	; (edi = [memory_start])
00000355: F3 A4                                                 	rep	movsb ; the last char/byte is 00h
00000357: 4F                                                    	dec	edi ; except zero tail
00000358: C3                                                    	retn
                                                                      no_environment_variable:
00000359: 89 DF                                                 	mov	edi,ebx
0000035B: C3                                                    	ret
                                                                end if
                                                                
                                                                open:
                                                                	;push	esi edi ebp
0000035C: 56 57                                                 	push	esi edi
0000035E: E8 17 00 00 00                                        	call	adapt_path
00000363: B8 05 00 00 00                                        	mov	eax,5
00000368: BB 6A B6 01 00                                        	mov	ebx,buffer
                                                                	;mov	ecx,O_RDONLY
0000036D: 31 D2                                                 	xor	edx,edx
                                                                	;int	0x80
                                                                	; TRDOS 386
0000036F: 31 C9                                                 	xor	ecx,ecx ; open for read
00000371: CD 40                                                 	int	0x40
                                                                	;pop	ebp edi esi
00000373: 5F 5E                                                 	pop	edi esi
                                                                	;test	eax,eax
                                                                	;js	file_error
00000375: 72 58                                                 	jc	file_error ; TRDOS 386
00000377: 89 C3                                                 	mov	ebx,eax
                                                                	;clc	 ; TRDOS 386
00000379: C3                                                    	ret
                                                                    adapt_path:
0000037A: 89 D6                                                 	mov	esi,edx
0000037C: BF 6A B6 01 00                                        	mov	edi,buffer
                                                                      copy_path:
00000381: AC                                                    	lods	byte [esi]
00000382: 3C 5C                                                 	cmp	al,'\'
00000384: 75 02                                                 	jne	path_char_ok
00000386: B0 2F                                                 	mov	al,'/'
                                                                      path_char_ok:
00000388: AA                                                    	stos	byte [edi]
00000389: 08 C0                                                 	or	al,al
0000038B: 75 F4                                                 	jnz	copy_path
0000038D: 81 FF 6A C6 01 00                                     	cmp	edi,buffer+1000h
00000393: 0F 87 F9 04 00 00                                     	ja	out_of_memory
00000399: C3                                                    	ret
                                                                create:
                                                                if 0
                                                                	push	esi edi ebp edx
                                                                	call	adapt_path
                                                                	mov	ebx,buffer
                                                                	mov	ecx,O_CREAT+O_TRUNC+O_WRONLY
                                                                	mov	edx,S_IRUSR+S_IWUSR+S_IRGRP+S_IROTH
                                                                	pop	eax
                                                                	cmp	eax,[output_file]
                                                                	jne	do_create
                                                                	cmp	[output_format],5
                                                                	jne	do_create
                                                                	bt	[format_flags],0
                                                                	jnc	do_create
                                                                	or	edx,S_IXUSR+S_IXGRP+S_IXOTH
                                                                      do_create:
                                                                	mov	eax,5
                                                                	int	0x80
                                                                	pop	ebp edi esi
                                                                	test	eax,eax
                                                                	js	file_error
                                                                else
                                                                	; TRDOS 386
0000039A: 56 57                                                 	push	esi edi
0000039C: E8 D9 FF FF FF                                        	call	adapt_path
000003A1: 5F 5E                                                 	pop	edi esi
000003A3: BB 6A B6 01 00                                        	mov	ebx,buffer
000003A8: 31 C9                                                 	xor	ecx,ecx ; cl = 0 -> ordinary file
000003AA: B8 08 00 00 00                                        	mov	eax,8	; syscreat
000003AF: CD 40                                                 	int	0x40
000003B1: 72 1C                                                 	jc	file_error
                                                                end if
000003B3: 89 C3                                                 	mov	ebx,eax
                                                                	;clc	; TRDOS 386
000003B5: C3                                                    	ret
                                                                close:
                                                                	; ebx = file handle
000003B6: B8 06 00 00 00                                        	mov	eax,6
                                                                	;int	0x80
                                                                	; TRDOS 386
000003BB: CD 40                                                 	int	0x40
000003BD: C3                                                    	ret
                                                                read:
                                                                if 0
                                                                	push	ecx edx esi edi ebp
                                                                	mov	eax,3
                                                                	xchg	ecx,edx
                                                                	int	0x80
                                                                	pop	ebp edi esi edx ecx
                                                                	test	eax,eax
                                                                	js	file_error
                                                                else
                                                                	; TRDOS 386
                                                                	; ebx = file handle
000003BE: 51 52                                                 	push	ecx edx
000003C0: B8 03 00 00 00                                        	mov	eax,3	 ; sysread
000003C5: 87 CA                                                 	xchg	ecx,edx
000003C7: CD 40                                                 	int	0x40
000003C9: 5A 59                                                 	pop	edx ecx
000003CB: 72 02                                                 	jc	file_error
                                                                end if
                                                                	;cmp	eax,ecx
000003CD: 39 C1                                                 	cmp	ecx,eax
                                                                	;jne	file_error ; ecx < eax
                                                                	;clc
                                                                	;ret
                                                                    file_error:
                                                                	;stc
000003CF: C3                                                    	ret
                                                                write:
                                                                if 0
                                                                	push	edx esi edi ebp
                                                                	mov	eax,4
                                                                	xchg	ecx,edx
                                                                	int	0x80
                                                                	pop	ebp edi esi edx
                                                                	test	eax,eax
                                                                	js	file_error
                                                                	clc
                                                                	ret
                                                                else
                                                                	; TRDOS 386
                                                                	; ebx = file handle
000003D0: 51 52                                                 	push	ecx edx
000003D2: B8 04 00 00 00                                        	mov	eax, 4	; syswrite
000003D7: 87 CA                                                 	xchg	ecx,edx
000003D9: CD 40                                                 	int	0x40
000003DB: 5A 59                                                 	pop	edx ecx
000003DD: 72 F0                                                 	jc	file_error
000003DF: 39 C1                                                 	cmp	ecx,eax
                                                                	;jne	file_error ; ecx < eax
000003E1: C3                                                    	retn
                                                                end if
                                                                
                                                                lseek:
                                                                	; ebx = file handle
000003E2: 89 D1                                                 	mov	ecx,edx
000003E4: 31 D2                                                 	xor	edx,edx
000003E6: 88 C2                                                 	mov	dl,al
000003E8: B8 13 00 00 00                                        	mov	eax,19	; sysseek
                                                                	;int	0x80
                                                                	; TRDOS 386 
000003ED: CD 40                                                 	int	0x40
                                                                	;cmp	eax,-1
                                                                	;je	file_error
                                                                	;clc
                                                                	;ret
000003EF: 72 DE                                                 	jc	file_error
                                                                	; TRDOS 386
                                                                	; Needed for v2.0.9 and previous.
                                                                	; systell ; sys _tell,ebx
000003F1: B8 14 00 00 00                                        	mov	eax,20
000003F6: CD 40                                                 	int	0x40
                                                                	; eax = file offset pointer
000003F8: C3                                                    	retn
                                                                
                                                                display_string:
                                                                if 0
                                                                	push	ebx
                                                                	mov	edi,esi
                                                                	mov	edx,esi
                                                                	or	ecx,-1
                                                                	xor	al,al
                                                                	repne	scasb
                                                                	neg	ecx
                                                                	sub	ecx,2
                                                                	mov	eax,4
                                                                	mov	ebx,[con_handle]
                                                                	xchg	ecx,edx
                                                                	int	0x80
                                                                	pop	ebx
                                                                	ret
                                                                else
                                                                	; TRDOS 386
                                                                print_msg:
                                                                	;push	esi
000003F9: 53                                                    	push	ebx
                                                                print_msg_loop:
000003FA: AC                                                    	lodsb
000003FB: 08 C0                                                 	or	al,al
000003FD: 74 10                                                 	jz	print_msg_ok
                                                                	; TRDOS 386 v2
                                                                	;; write tty (ROMBIOS Int 10h simulation)
                                                                	;mov	ah,0Eh
                                                                	;mov	bx,07h
                                                                	;int	31h
                                                                	; TRDOS 386 v2.0.9 and later
000003FF: 88 C1                                                 	mov	cl,al
                                                                	;sys	_stdio,3 ; write char to STDERR
00000401: BB 03 00 00 00                                        	mov	ebx,3
00000406: B8 2E 00 00 00                                        	mov	eax,46 ; sysstdio
0000040B: CD 40                                                 	int	0x40
0000040D: EB EB                                                 	jmp	print_msg_loop
                                                                print_msg_ok:
0000040F: 5B                                                    	pop	ebx
                                                                	;pop	esi
00000410: C3                                                    	retn
                                                                end if
                                                                
                                                                display_character:
00000411: 53                                                    	push	ebx
                                                                if 0
                                                                	mov	[character],dl
                                                                	mov	eax,4
                                                                	mov	ebx,[con_handle]
                                                                	mov	ecx,character
                                                                	mov	edx,1
                                                                	int	0x80
                                                                else
                                                                	; TRDOS 386
                                                                	;mov	[character],dl
                                                                	; TRDOS 386 v2
                                                                	;; write tty (ROMBIOS Int 10h simulation)
                                                                	;mov	al,[character]
                                                                	;mov	al,dl 
                                                                	;mov	ah,0Eh
                                                                	;mov	bx,07h
                                                                	;int	31h
                                                                	; TRDOS 386 v2.0.9 and later
                                                                	;mov	cl,[character]
00000412: 88 D1                                                 	mov	cl,dl
                                                                	;sys	_stdio,3 ; write char to STDERR
00000414: BB 03 00 00 00                                        	mov	ebx,3
00000419: B8 2E 00 00 00                                        	mov	eax,46 ; sysstdio
0000041E: CD 40                                                 	int	0x40
                                                                end if
00000420: 5B                                                    	pop	ebx
00000421: C3                                                    	ret
                                                                display_number:
00000422: 53                                                    	push	ebx
00000423: B9 00 CA 9A 3B                                        	mov	ecx,1000000000
00000428: 31 D2                                                 	xor	edx,edx
0000042A: 30 DB                                                 	xor	bl,bl
                                                                      display_loop:
0000042C: F7 F1                                                 	div	ecx
0000042E: 52                                                    	push	edx
0000042F: 83 F9 01                                              	cmp	ecx,1
00000432: 74 0A                                                 	je	display_digit
00000434: 08 DB                                                 	or	bl,bl
00000436: 75 06                                                 	jnz	display_digit
00000438: 08 C0                                                 	or	al,al
0000043A: 74 10                                                 	jz	digit_ok
0000043C: F6 D3                                                 	not	bl
                                                                      display_digit:
0000043E: 88 C2                                                 	mov	dl,al
00000440: 80 C2 30                                              	add	dl,30h
00000443: 53 51                                                 	push	ebx ecx
00000445: E8 C7 FF FF FF                                        	call	display_character
0000044A: 59 5B                                                 	pop	ecx ebx
                                                                      digit_ok:
0000044C: 89 C8                                                 	mov	eax,ecx
0000044E: 31 D2                                                 	xor	edx,edx
00000450: B9 0A 00 00 00                                        	mov	ecx,10
00000455: F7 F1                                                 	div	ecx
00000457: 89 C1                                                 	mov	ecx,eax
00000459: 58                                                    	pop	eax
0000045A: 09 C9                                                 	or	ecx,ecx
0000045C: 75 CE                                                 	jnz	display_loop
0000045E: 5B                                                    	pop	ebx
0000045F: C3                                                    	ret
                                                                
                                                                display_user_messages:
                                                                
                                                                if 0
                                                                	; LINUX
                                                                	mov	[displayed_count],0
                                                                	call	show_display_buffer
                                                                	cmp	[displayed_count],0
                                                                	je	line_break_ok
                                                                	cmp	[last_displayed],0Ah
                                                                	je	line_break_ok
                                                                	mov	dl,0Ah
                                                                	call	display_character
                                                                      line_break_ok:
                                                                	ret
                                                                display_block:
                                                                	jecxz	block_displayed
                                                                	add	[displayed_count],ecx
                                                                	mov	al,[esi+ecx-1]
                                                                	mov	[last_displayed],al
                                                                	push	ebx
                                                                	mov	eax,4
                                                                	mov	ebx,[con_handle]
                                                                	mov	edx,ecx
                                                                	mov	ecx,esi
                                                                	int	0x80
                                                                	pop	ebx
                                                                      block_displayed:
                                                                	ret
                                                                else
                                                                	; WINDOWS
00000460: C7 05 63 A6 01 00 00 00 00 00                         	mov	[displayed_count],0
0000046A: E8 55 4F 00 00                                        	call	show_display_buffer
0000046F: 83 3D 63 A6 01 00 01                                  	cmp	[displayed_count],1
00000476: 72 2D                                                 	jb	line_break_ok
00000478: 74 12                                                 	je	make_line_break
0000047A: 66 A1 67 A6 01 00                                     	mov	ax,word [last_displayed]
00000480: 66 3D 0D 0A                                           	cmp	ax,0A0Dh
00000484: 74 1F                                                 	je	line_break_ok
00000486: 66 3D 0A 0D                                           	cmp	ax,0D0Ah
0000048A: 74 19                                                 	je	line_break_ok
                                                                      make_line_break:
                                                                	; TRDOS 386
                                                                	;mov	word [buffer],0A0Dh
0000048C: 53                                                    	push	ebx
                                                                	; TRDOS 386 v2
                                                                	; write TTY (ROMBIOS Int 10h simulation)
                                                                	;mov	al,0Dh
                                                                	;mov	ah,0Eh
                                                                	;mov	bx,07h
                                                                	;int	31h
                                                                	;mov	al,0Ah
                                                                	;int	31h
                                                                	; TRDOS 386 v2.0.9 and later
                                                                	; sys	_stdio,3, 0Dh
                                                                	; sys	_stdio,3, 0Ah
0000048D: B1 0D                                                 	mov	cl,0Dh
0000048F: BB 03 00 00 00                                        	mov	ebx,3 ; write to STDERR
00000494: B8 2E 00 00 00                                        	mov	eax,46 ; sysstdio
00000499: CD 40                                                 	int	0x40
0000049B: B1 0A                                                 	mov	cl,0Ah
                                                                	;mov	ebx,3 ; write to STDERR
0000049D: B8 2E 00 00 00                                        	mov	eax,46 ; sysstdio
                                                                	;mov	al,46
000004A2: CD 40                                                 	int	0x40
000004A4: 5B                                                    	pop	ebx
                                                                      line_break_ok:
000004A5: C3                                                    	ret
                                                                
                                                                display_block:
                                                                	; WINDOWS
000004A6: 01 0D 63 A6 01 00                                     	add	[displayed_count],ecx
000004AC: 83 F9 01                                              	cmp	ecx,1
000004AF: 77 11                                                 	ja	take_last_two_characters
000004B1: 72 2D                                                 	jb	block_displayed
000004B3: A0 68 A6 01 00                                        	mov	al,[last_displayed+1]
000004B8: 8A 26                                                 	mov	ah,[esi]
000004BA: 66 A3 67 A6 01 00                                     	mov	word [last_displayed],ax
000004C0: EB 0B                                                 	jmp	block_ok
                                                                      take_last_two_characters:
000004C2: 66 8B 44 0E FE                                        	mov	ax,[esi+ecx-2]
000004C7: 66 A3 67 A6 01 00                                     	mov	word [last_displayed],ax
                                                                      block_ok:
                                                                	; WINDOWS
                                                                	;push	ecx
                                                                	;push	[con_handle]
                                                                	;call	[GetStdHandle]
                                                                	;pop	ecx
                                                                	;push	0
                                                                	;push	bytes_count
                                                                	;push	ecx
                                                                	;push	esi
                                                                	;push	eax
                                                                	;call	[WriteFile]
                                                                	; LINUX
                                                                	;push	ebx
                                                                	;mov	eax,4
                                                                	;mov	ebx,[con_handle]
                                                                	;mov	edx,ecx
                                                                	;mov	ecx,esi
                                                                	;int	0x80
                                                                	;pop	ebx
                                                                	; DOS
                                                                        ;display_character:
                                                                	;lods	byte [esi]
                                                                	;mov	dl,al
                                                                	;mov	ah,2
                                                                	;int	21h
                                                                	;loopd	display_character
                                                                	;ret
                                                                	; TRDOS 386
                                                                	; sys _msg, esi, ecx, 07h
                                                                	; ecx = character/byte count
                                                                	;mov	ebx,esi ; buffer
                                                                	;mov	edx,07h ; color
                                                                	;mov	eax,35 ; sysmsg
                                                                	;int	0x40 ; TRDOS 386 system call	
                                                                
                                                                	; TRDOS 386 v2.0.9 and later
                                                                	; systdio - write a char to STDERR
000004CD: BB 03 00 00 00                                        	mov	ebx,3	; write to STDERR
                                                                      write_to_stderr_loop:
000004D2: 51                                                    	push	ecx
000004D3: AC                                                    	lods	byte [esi] ; lodsb	
000004D4: 88 C1                                                 	mov	cl,al
000004D6: B8 2E 00 00 00                                        	mov	eax,46	; sysstdio
                                                                	;mov	ebx,3	; write to STDERR
                                                                	;sys	_stdio,3	
000004DB: CD 40                                                 	int	0x40	; TRDOS 386 system call
000004DD: 59                                                    	pop	ecx
000004DE: E2 F2                                                 	loop	write_to_stderr_loop
                                                                
                                                                      block_displayed:
000004E0: C3                                                    	ret
                                                                
                                                                end if
                                                                
                                                                fatal_error:
                                                                	; [esp] = error message address
                                                                	; TRDOS 386
                                                                	;mov	[con_handle],2
000004E1: BE C9 06 00 00                                        	mov	esi,error_prefix
000004E6: E8 0E FF FF FF                                        	call	display_string
000004EB: 5E                                                    	pop	esi
000004EC: E8 08 FF FF FF                                        	call	display_string
000004F1: BE D1 06 00 00                                        	mov	esi,error_suffix
000004F6: E8 FE FE FF FF                                        	call	display_string
000004FB: B0 FF                                                 	mov	al,0FFh
000004FD: E9 15 FE FF FF                                        	jmp	exit_program
                                                                assembler_error:
                                                                	; TRDOS 386
                                                                	;mov	[con_handle],2
00000502: E8 59 FF FF FF                                        	call	display_user_messages
00000507: 8B 1D 74 A1 01 00                                     	mov	ebx,[current_line]
0000050D: 85 DB                                                 	test	ebx,ebx
0000050F: 0F 84 87 01 00 00                                     	jz	display_error_message
00000515: 6A 00                                                 	pushd	0
                                                                      get_error_lines:
00000517: 8B 03                                                 	mov	eax,[ebx]
00000519: 80 38 00                                              	cmp	byte [eax],0
0000051C: 74 13                                                 	je	get_next_error_line
0000051E: 53                                                    	push	ebx
0000051F: F6 43 07 80                                           	test	byte [ebx+7],80h
00000523: 74 11                                                 	jz	display_error_line
00000525: 89 DA                                                 	mov	edx,ebx
                                                                      find_definition_origin:
00000527: 8B 52 0C                                              	mov	edx,[edx+12]
0000052A: F6 42 07 80                                           	test	byte [edx+7],80h
0000052E: 75 F7                                                 	jnz	find_definition_origin
00000530: 52                                                    	push	edx
                                                                      get_next_error_line:
00000531: 8B 5B 08                                              	mov	ebx,[ebx+8]
00000534: EB E1                                                 	jmp	get_error_lines
                                                                      display_error_line:
00000536: 8B 33                                                 	mov	esi,[ebx]
00000538: E8 BC FE FF FF                                        	call	display_string
0000053D: BE D5 06 00 00                                        	mov	esi,line_number_start
00000542: E8 B2 FE FF FF                                        	call	display_string
00000547: 8B 43 04                                              	mov	eax,[ebx+4]
0000054A: 25 FF FF FF 7F                                        	and	eax,7FFFFFFFh
0000054F: E8 CE FE FF FF                                        	call	display_number
00000554: B2 5D                                                 	mov	dl,']'
00000556: E8 B6 FE FF FF                                        	call	display_character
0000055B: 5E                                                    	pop	esi
0000055C: 39 F3                                                 	cmp	ebx,esi
0000055E: 74 32                                                 	je	line_number_ok
00000560: B2 20                                                 	mov	dl,20h
00000562: E8 AA FE FF FF                                        	call	display_character
00000567: 56                                                    	push	esi
00000568: 8B 36                                                 	mov	esi,[esi]
0000056A: 0F B6 0E                                              	movzx	ecx,byte [esi]
0000056D: 46                                                    	inc	esi
0000056E: E8 33 FF FF FF                                        	call	display_block
00000573: BE D5 06 00 00                                        	mov	esi,line_number_start
00000578: E8 7C FE FF FF                                        	call	display_string
0000057D: 5E                                                    	pop	esi
0000057E: 8B 46 04                                              	mov	eax,[esi+4]
00000581: 25 FF FF FF 7F                                        	and	eax,7FFFFFFFh
00000586: E8 97 FE FF FF                                        	call	display_number
0000058B: B2 5D                                                 	mov	dl,']'
0000058D: E8 7F FE FF FF                                        	call	display_character
                                                                      line_number_ok:
00000592: BE D8 06 00 00                                        	mov	esi,line_data_start
00000597: E8 5D FE FF FF                                        	call	display_string
0000059C: 89 DE                                                 	mov	esi,ebx
0000059E: 8B 16                                                 	mov	edx,[esi]
000005A0: E8 B7 FD FF FF                                        	call	open
000005A5: B0 02                                                 	mov	al,2
000005A7: 31 D2                                                 	xor	edx,edx
000005A9: E8 34 FE FF FF                                        	call	lseek
000005AE: 8B 56 08                                              	mov	edx,[esi+8]
000005B1: 29 D0                                                 	sub	eax,edx
000005B3: 74 52                                                 	jz	line_data_displayed
000005B5: 50                                                    	push	eax
000005B6: 30 C0                                                 	xor	al,al
000005B8: E8 25 FE FF FF                                        	call	lseek
                                                                	;mov	ecx,[esp]
                                                                	; TRDOS 386
000005BD: 59                                                    	pop	ecx
000005BE: 8B 15 34 A1 01 00                                     	mov	edx,[additional_memory]
000005C4: 8D 04 0A                                              	lea	eax,[edx+ecx]
000005C7: 3B 05 38 A1 01 00                                     	cmp	eax,[additional_memory_end]
000005CD: 0F 87 BF 02 00 00                                     	ja	out_of_memory
                                                                	; TRDOS 386
                                                                	;push	ecx
000005D3: E8 E6 FD FF FF                                        	call	read
000005D8: E8 D9 FD FF FF                                        	call	close
                                                                	;pop	ecx
000005DD: 8B 35 34 A1 01 00                                     	mov	esi,[additional_memory]
                                                                      get_line_data:
000005E3: 8A 06                                                 	mov	al,[esi]
000005E5: 3C 0A                                                 	cmp	al,0Ah
000005E7: 74 0F                                                 	je	display_line_data
000005E9: 3C 0D                                                 	cmp	al,0Dh
000005EB: 74 0B                                                 	je	display_line_data
000005ED: 3C 1A                                                 	cmp	al,1Ah
000005EF: 74 07                                                 	je	display_line_data
000005F1: 08 C0                                                 	or	al,al
000005F3: 74 03                                                 	jz	display_line_data
000005F5: 46                                                    	inc	esi
000005F6: E2 EB                                                 	loop	get_line_data
                                                                      display_line_data:
000005F8: 89 F1                                                 	mov	ecx,esi
000005FA: 8B 35 34 A1 01 00                                     	mov	esi,[additional_memory]
00000600: 29 F1                                                 	sub	ecx,esi
00000602: E8 9F FE FF FF                                        	call	display_block
                                                                      line_data_displayed:
                                                                	; LINUX
                                                                	;mov	esi,lf
                                                                	; WINDOWS & TRDOS 386
00000607: BE D2 06 00 00                                        	mov	esi,cr_lf
0000060C: E8 E8 FD FF FF                                        	call	display_string
00000611: 5B                                                    	pop	ebx
00000612: 09 DB                                                 	or	ebx,ebx
00000614: 0F 85 1C FF FF FF                                     	jnz	display_error_line
0000061A: 80 3D 69 A6 01 00 00                                  	cmp	[preprocessing_done],0
00000621: 74 79                                                 	je	display_error_message
00000623: BE DC 06 00 00                                        	mov	esi,preprocessed_instruction_prefix
00000628: E8 CC FD FF FF                                        	call	display_string
0000062D: 8B 35 74 A1 01 00                                     	mov	esi,[current_line]
00000633: 83 C6 10                                              	add	esi,16
00000636: 8B 3D 34 A1 01 00                                     	mov	edi,[additional_memory]
0000063C: 30 D2                                                 	xor	dl,dl
                                                                      convert_instruction:
0000063E: AC                                                    	lodsb
0000063F: 3C 1A                                                 	cmp	al,1Ah
00000641: 74 11                                                 	je	copy_symbol
00000643: 3C 22                                                 	cmp	al,22h
00000645: 74 0D                                                 	je	copy_symbol
00000647: 3C 3B                                                 	cmp	al,3Bh
00000649: 74 39                                                 	je	instruction_converted
0000064B: AA                                                    	stosb
0000064C: 08 C0                                                 	or	al,al
0000064E: 74 34                                                 	jz	instruction_converted
00000650: 30 D2                                                 	xor	dl,dl
00000652: EB EA                                                 	jmp	convert_instruction
                                                                      copy_symbol:
00000654: 08 D2                                                 	or	dl,dl
00000656: 74 04                                                 	jz	space_ok
00000658: C6 07 20                                              	mov	byte [edi],20h
0000065B: 47                                                    	inc	edi
                                                                      space_ok:
0000065C: 3C 22                                                 	cmp	al,22h
0000065E: 74 0B                                                 	je	quoted
00000660: AC                                                    	lodsb
00000661: 0F B6 C8                                              	movzx	ecx,al
00000664: F3 A4                                                 	rep	movsb
00000666: 80 CA FF                                              	or	dl,-1
00000669: EB D3                                                 	jmp	convert_instruction
                                                                      quoted:
0000066B: B0 27                                                 	mov	al,27h
0000066D: AA                                                    	stosb
0000066E: AD                                                    	lodsd
0000066F: 89 C1                                                 	mov	ecx,eax
00000671: E3 09                                                 	jecxz	quoted_copied
                                                                      copy_quoted:
00000673: AC                                                    	lodsb
00000674: AA                                                    	stosb
00000675: 3C 27                                                 	cmp	al,27h
00000677: 75 01                                                 	jne	quote_ok
00000679: AA                                                    	stosb
                                                                      quote_ok:
0000067A: E2 F7                                                 	loop	copy_quoted
                                                                      quoted_copied:
0000067C: B0 27                                                 	mov	al,27h
0000067E: AA                                                    	stosb
0000067F: 80 CA FF                                              	or	dl,-1
00000682: EB BA                                                 	jmp	convert_instruction
                                                                      instruction_converted:
00000684: 30 C0                                                 	xor	al,al
00000686: AA                                                    	stosb
00000687: 8B 35 34 A1 01 00                                     	mov	esi,[additional_memory]
0000068D: E8 67 FD FF FF                                        	call	display_string
                                                                	;mov	esi,lf
                                                                	; TRDOS 386
00000692: BE D2 06 00 00                                        	mov	esi,cr_lf
00000697: E8 5D FD FF FF                                        	call	display_string
                                                                      display_error_message:
0000069C: BE C9 06 00 00                                        	mov	esi,error_prefix
000006A1: E8 53 FD FF FF                                        	call	display_string
000006A6: 5E                                                    	pop	esi
000006A7: E8 4D FD FF FF                                        	call	display_string
000006AC: BE D1 06 00 00                                        	mov	esi,error_suffix
000006B1: E8 43 FD FF FF                                        	call	display_string
000006B6: B0 02                                                 	mov	al,2
000006B8: E9 5A FC FF FF                                        	jmp	exit_program
                                                                
                                                                make_timestamp:
000006BD: B8 0D 00 00 00                                        	mov	eax,13
                                                                	; LINUX
                                                                	;mov	ebx,timestamp
                                                                	;int	0x80
                                                                	;mov	eax,dword [timestamp]
                                                                	;mov	edx,dword [timestamp+4]
                                                                	; TRDOS 386
                                                                	;mov	ebx,0
000006C2: 31 DB                                                 	xor 	ebx,ebx ; get UNIX/EPOCH timestamp
000006C4: CD 40                                                 	int	0x40	; eax = 13 -> systime
                                                                	; eax = timestamp
000006C6: 31 D2                                                 	xor	edx,edx
000006C8: C3                                                    	ret
                                                                
000006C9: 65 72 72 6F 72 3A 20 00                               error_prefix db 'error: ',0
000006D1: 2E                                                    error_suffix db '.'
                                                                ;lf db 0xA,0
                                                                ; TRDOS 386 (& WINDOWS)
000006D2: 0D 0A 00                                              cr_lf db 0Dh,0Ah,0
000006D5: 20 5B 00                                              line_number_start db ' [',0
                                                                ;line_data_start db ':',0xA,0
000006D8: 3A 0D 0A 00                                           line_data_start db ':',0Dh,0Ah,0
000006DC: 70 72 6F 63 65 73 73 65 64 3A 20 00                   preprocessed_instruction_prefix db 'processed: ',0
                                                                
                                                                
                                                                include '..\version.inc'
                                                                
                                                                ; flat assembler  version 1.73
                                                                ; Copyright (c) 1999-2023, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                ;
                                                                ; This programs is free for commercial and non-commercial use as long as
                                                                ; the following conditions are adhered to.
                                                                ;
                                                                ; Redistribution and use in source and binary forms, with or without
                                                                ; modification, are permitted provided that the following conditions are
                                                                ; met:
                                                                ;
                                                                ; 1. Redistributions of source code must retain the above copyright notice,
                                                                ;    this list of conditions and the following disclaimer.
                                                                ; 2. Redistributions in binary form must reproduce the above copyright
                                                                ;    notice, this list of conditions and the following disclaimer in the
                                                                ;    documentation and/or other materials provided with the distribution.
                                                                ;
                                                                ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
                                                                ; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
                                                                ; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
                                                                ; PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
                                                                ; CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
                                                                ; EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
                                                                ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                                ; PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
                                                                ; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
                                                                ; NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                                                ; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                                ;
                                                                ; The licence and distribution terms for any publically available
                                                                ; version or derivative of this code cannot be changed. i.e. this code
                                                                ; cannot simply be copied and put under another distribution licence
                                                                ; (including the GNU Public Licence).
                                                                
                                                                VERSION_STRING equ "1.73.32"
                                                                
                                                                VERSION_MAJOR = 1
                                                                VERSION_MINOR = 73
                                                                
                                                                
000006E8: 43 6F 70 79 72 69 67 68 74 20 28 63 29 20 31 39       _copyright db 'Copyright (c) 1999-2022, Tomasz Grysztar',0xA,0
          39 39 2D 32 30 32 32 2C 20 54 6F 6D 61 73 7A 20       
          47 72 79 73 7A 74 61 72 0A 00                         
                                                                
00000712: 66 6C 61 74 20 61 73 73 65 6D 62 6C 65 72 20 20       _logo db 'flat assembler  version ',VERSION_STRING,0
          76 65 72 73 69 6F 6E 20 31 2E 37 33 2E 33 32 00       
                                                                ; LINUX
                                                                ;_usage db 0xA
                                                                ;      db 'usage: fasm <source> [output]',0xA
                                                                ;      db 'optional settings:',0xA
                                                                ;      db ' -m <limit>         set the limit in kilobytes for the available memory',0xA
                                                                ;      db ' -p <limit>         set the maximum allowed number of passes',0xA
                                                                ;      db ' -d <name>=<value>  define symbolic variable',0xA
                                                                ;      db ' -s <file>          dump symbolic information for debugging',0xA
                                                                ;      db 0
                                                                ; WINDOWS & TRDOS 386
00000732: 0D 0A                                                 _usage db 0Dh,0Ah
00000734: 75 73 61 67 65 3A 20 66 61 73 6D 20 3C 73 6F 75              db 'usage: fasm <source> [output]',0Dh,0Ah
          72 63 65 3E 20 5B 6F 75 74 70 75 74 5D 0D 0A          
00000753: 6F 70 74 69 6F 6E 61 6C 20 73 65 74 74 69 6E 67              db 'optional settings:',0Dh,0Ah
          73 3A 0D 0A                                           
00000767: 20 2D 6D 20 3C 6C 69 6D 69 74 3E 20 20 20 20 20              db ' -m <limit>         set the limit in kilobytes for the available memory',0Dh,0Ah
          20 20 20 20 73 65 74 20 74 68 65 20 6C 69 6D 69       
          74 20 69 6E 20 6B 69 6C 6F 62 79 74 65 73 20 66       
          6F 72 20 74 68 65 20 61 76 61 69 6C 61 62 6C 65       
          20 6D 65 6D 6F 72 79 0D 0A                            
000007B0: 20 2D 70 20 3C 6C 69 6D 69 74 3E 20 20 20 20 20              db ' -p <limit>         set the maximum allowed number of passes',0Dh,0Ah
          20 20 20 20 73 65 74 20 74 68 65 20 6D 61 78 69       
          6D 75 6D 20 61 6C 6C 6F 77 65 64 20 6E 75 6D 62       
          65 72 20 6F 66 20 70 61 73 73 65 73 0D 0A             
000007EE: 20 2D 64 20 3C 6E 61 6D 65 3E 3D 3C 76 61 6C 75              db ' -d <name>=<value>  define symbolic variable',0Dh,0Ah
          65 3E 20 20 64 65 66 69 6E 65 20 73 79 6D 62 6F       
          6C 69 63 20 76 61 72 69 61 62 6C 65 0D 0A             
0000081C: 20 2D 73 20 3C 66 69 6C 65 3E 20 20 20 20 20 20              db ' -s <file>          dump symbolic information for debugging',0Dh,0Ah
          20 20 20 20 64 75 6D 70 20 73 79 6D 62 6F 6C 69       
          63 20 69 6E 66 6F 72 6D 61 74 69 6F 6E 20 66 6F       
          72 20 64 65 62 75 67 67 69 6E 67 0D 0A                
00000859: 00                                                           db 0
                                                                
0000085A: 20 20 28 00                                           _memory_prefix db '  (',0
                                                                ; LINUX
                                                                ;_memory_suffix db ' kilobytes memory)',0xA,0
                                                                ; TRDOS 386 (& WINDOWS)
0000085E: 20 6B 69 6C 6F 62 79 74 65 73 20 6D 65 6D 6F 72       _memory_suffix db ' kilobytes memory)',0Dh,0Ah,0
          79 29 0D 0A 00                                        
00000873: 20 70 61 73 73 65 73 2C 20 00                         _passes_suffix db ' passes, ',0
0000087D: 20 73 65 63 6F 6E 64 73 2C 20 00                      _seconds_suffix db ' seconds, ',0
                                                                ; LINUX
                                                                ;_bytes_suffix db ' bytes.',0xA,0
                                                                ; TRDOS 386 (& WINDOWS)
00000888: 20 62 79 74 65 73 2E 0D 0A 00                         _bytes_suffix db ' bytes.',0Dh,0Ah,0
                                                                
                                                                include '..\errors.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                out_of_memory:
00000892: 68 44 9D 01 00                                        	push	_out_of_memory
00000897: E9 45 FC FF FF                                        	jmp	fatal_error
                                                                stack_overflow:
0000089C: 68 52 9D 01 00                                        	push	_stack_overflow
000008A1: E9 3B FC FF FF                                        	jmp	fatal_error
                                                                main_file_not_found:
000008A6: 68 65 9D 01 00                                        	push	_main_file_not_found
000008AB: E9 31 FC FF FF                                        	jmp	fatal_error
                                                                write_failed:
000008B0: 68 CC 9D 01 00                                        	push	_write_failed
000008B5: E9 27 FC FF FF                                        	jmp	fatal_error
                                                                
                                                                code_cannot_be_generated:
000008BA: 68 7B 9D 01 00                                        	push	_code_cannot_be_generated
000008BF: EB 0C                                                 	jmp	general_error
                                                                format_limitations_exceeded:
000008C1: 68 94 9D 01 00                                        	push	_format_limitations_exceeded
000008C6: EB 05                                                 	jmp	general_error
                                                                invalid_definition:
000008C8: 68 B0 9D 01 00                                        	push	_invalid_definition
                                                                    general_error:
000008CD: 83 3D 4C A1 01 00 00                                  	cmp	[symbols_file],0
000008D4: 0F 84 07 FC FF FF                                     	je	fatal_error
000008DA: E8 D3 06 00 00                                        	call	dump_preprocessed_source
000008DF: E9 FD FB FF FF                                        	jmp	fatal_error
                                                                
                                                                file_not_found:
000008E4: 68 D9 9D 01 00                                        	push	_file_not_found
000008E9: E9 C9 01 00 00                                        	jmp	error_with_source
                                                                error_reading_file:
000008EE: 68 E8 9D 01 00                                        	push	_error_reading_file
000008F3: E9 BF 01 00 00                                        	jmp	error_with_source
                                                                invalid_file_format:
000008F8: 68 FB 9D 01 00                                        	push	_invalid_file_format
000008FD: E9 B5 01 00 00                                        	jmp	error_with_source
                                                                invalid_macro_arguments:
00000902: 68 0F 9E 01 00                                        	push	_invalid_macro_arguments
00000907: E9 AB 01 00 00                                        	jmp	error_with_source
                                                                incomplete_macro:
0000090C: 68 27 9E 01 00                                        	push	_incomplete_macro
00000911: E9 A1 01 00 00                                        	jmp	error_with_source
                                                                unexpected_characters:
00000916: 68 38 9E 01 00                                        	push	_unexpected_characters
0000091B: E9 97 01 00 00                                        	jmp	error_with_source
                                                                invalid_argument:
00000920: 68 4E 9E 01 00                                        	push	_invalid_argument
00000925: E9 8D 01 00 00                                        	jmp	error_with_source
                                                                illegal_instruction:
0000092A: 68 5F 9E 01 00                                        	push	_illegal_instruction
0000092F: E9 83 01 00 00                                        	jmp	error_with_source
                                                                invalid_operand:
00000934: 68 73 9E 01 00                                        	push	_invalid_operand
00000939: E9 79 01 00 00                                        	jmp	error_with_source
                                                                invalid_operand_size:
0000093E: 68 83 9E 01 00                                        	push	_invalid_operand_size
00000943: E9 6F 01 00 00                                        	jmp	error_with_source
                                                                operand_size_not_specified:
00000948: 68 9B 9E 01 00                                        	push	_operand_size_not_specified
0000094D: E9 65 01 00 00                                        	jmp	error_with_source
                                                                operand_sizes_do_not_match:
00000952: 68 B6 9E 01 00                                        	push	_operand_sizes_do_not_match
00000957: E9 5B 01 00 00                                        	jmp	error_with_source
                                                                invalid_address_size:
0000095C: 68 D1 9E 01 00                                        	push	_invalid_address_size
00000961: E9 51 01 00 00                                        	jmp	error_with_source
                                                                address_sizes_do_not_agree:
00000966: 68 EF 9E 01 00                                        	push	_address_sizes_do_not_agree
0000096B: E9 47 01 00 00                                        	jmp	error_with_source
                                                                disallowed_combination_of_registers:
00000970: 68 0A 9F 01 00                                        	push	_disallowed_combination_of_registers
00000975: E9 3D 01 00 00                                        	jmp	error_with_source
                                                                long_immediate_not_encodable:
0000097A: 68 2E 9F 01 00                                        	push	_long_immediate_not_encodable
0000097F: E9 33 01 00 00                                        	jmp	error_with_source
                                                                relative_jump_out_of_range:
00000984: 68 50 9F 01 00                                        	push	_relative_jump_out_of_range
00000989: E9 29 01 00 00                                        	jmp	error_with_source
                                                                invalid_expression:
0000098E: 68 6B 9F 01 00                                        	push	_invalid_expression
00000993: E9 1F 01 00 00                                        	jmp	error_with_source
                                                                invalid_address:
00000998: 68 7E 9F 01 00                                        	push	_invalid_address
0000099D: E9 15 01 00 00                                        	jmp	error_with_source
                                                                invalid_value:
000009A2: 68 8E 9F 01 00                                        	push	_invalid_value
000009A7: E9 0B 01 00 00                                        	jmp	error_with_source
                                                                value_out_of_range:
000009AC: 68 9C 9F 01 00                                        	push	_value_out_of_range
000009B1: E9 01 01 00 00                                        	jmp	error_with_source
                                                                undefined_symbol:
000009B6: BF C7 A4 01 00                                        	mov	edi,message
000009BB: BE AF 9F 01 00                                        	mov	esi,_undefined_symbol
000009C0: E8 31 00 00 00                                        	call	copy_asciiz
000009C5: 68 C7 A4 01 00                                        	push	message
000009CA: 83 3D D8 A1 01 00 00                                  	cmp	[error_info],0
000009D1: 0F 84 E0 00 00 00                                     	je	error_with_source
000009D7: 8B 35 D8 A1 01 00                                     	mov	esi,[error_info]
000009DD: 8B 76 18                                              	mov	esi,[esi+24]
000009E0: 09 F6                                                 	or	esi,esi
000009E2: 0F 84 CF 00 00 00                                     	jz	error_with_source
000009E8: C6 47 FF 20                                           	mov	byte [edi-1],20h
000009EC: E8 0C 00 00 00                                        	call	write_quoted_symbol_name
000009F1: E9 C1 00 00 00                                        	jmp	error_with_source
                                                                    copy_asciiz:
000009F6: AC                                                    	lods	byte [esi]
000009F7: AA                                                    	stos	byte [edi]
000009F8: 84 C0                                                 	test	al,al
000009FA: 75 FA                                                 	jnz	copy_asciiz
000009FC: C3                                                    	ret
                                                                    write_quoted_symbol_name:
000009FD: B0 27                                                 	mov	al,27h
000009FF: AA                                                    	stosb
00000A00: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00000A04: F3 A4                                                 	rep	movs byte [edi],[esi]
00000A06: 66 B8 27 00                                           	mov	ax,27h
00000A0A: 66 AB                                                 	stosw
00000A0C: C3                                                    	ret
                                                                symbol_out_of_scope:
00000A0D: BF C7 A4 01 00                                        	mov	edi,message
00000A12: BE C0 9F 01 00                                        	mov	esi,_symbol_out_of_scope_1
00000A17: E8 DA FF FF FF                                        	call	copy_asciiz
00000A1C: 83 3D D8 A1 01 00 00                                  	cmp	[error_info],0
00000A23: 74 16                                                 	je	finish_symbol_out_of_scope_message
00000A25: 8B 35 D8 A1 01 00                                     	mov	esi,[error_info]
00000A2B: 8B 76 18                                              	mov	esi,[esi+24]
00000A2E: 09 F6                                                 	or	esi,esi
00000A30: 74 09                                                 	jz	finish_symbol_out_of_scope_message
00000A32: C6 47 FF 20                                           	mov	byte [edi-1],20h
00000A36: E8 C2 FF FF FF                                        	call	write_quoted_symbol_name
                                                                    finish_symbol_out_of_scope_message:
00000A3B: C6 47 FF 20                                           	mov	byte [edi-1],20h
00000A3F: BE C7 9F 01 00                                        	mov	esi,_symbol_out_of_scope_2
00000A44: E8 AD FF FF FF                                        	call	copy_asciiz
00000A49: 68 C7 A4 01 00                                        	push	message
00000A4E: EB 67                                                 	jmp	error_with_source
                                                                invalid_use_of_symbol:
00000A50: 68 D4 9F 01 00                                        	push	_invalid_use_of_symbol
00000A55: EB 60                                                 	jmp	error_with_source
                                                                name_too_long:
00000A57: 68 EA 9F 01 00                                        	push	_name_too_long
00000A5C: EB 59                                                 	jmp	error_with_source
                                                                invalid_name:
00000A5E: 68 F8 9F 01 00                                        	push	_invalid_name
00000A63: EB 52                                                 	jmp	error_with_source
                                                                reserved_word_used_as_symbol:
00000A65: 68 05 A0 01 00                                        	push	_reserved_word_used_as_symbol
00000A6A: EB 4B                                                 	jmp	error_with_source
                                                                symbol_already_defined:
00000A6C: 68 22 A0 01 00                                        	push	_symbol_already_defined
00000A71: EB 44                                                 	jmp	error_with_source
                                                                missing_end_quote:
00000A73: 68 39 A0 01 00                                        	push	_missing_end_quote
00000A78: EB 3D                                                 	jmp	error_with_source
                                                                missing_end_directive:
00000A7A: 68 4B A0 01 00                                        	push	_missing_end_directive
00000A7F: EB 36                                                 	jmp	error_with_source
                                                                unexpected_instruction:
00000A81: 68 61 A0 01 00                                        	push	_unexpected_instruction
00000A86: EB 2F                                                 	jmp	error_with_source
                                                                extra_characters_on_line:
00000A88: 68 78 A0 01 00                                        	push	_extra_characters_on_line
00000A8D: EB 28                                                 	jmp	error_with_source
                                                                section_not_aligned_enough:
00000A8F: 68 91 A0 01 00                                        	push	_section_not_aligned_enough
00000A94: EB 21                                                 	jmp	error_with_source
                                                                setting_already_specified:
00000A96: 68 AF A0 01 00                                        	push	_setting_already_specified
00000A9B: EB 1A                                                 	jmp	error_with_source
                                                                data_already_defined:
00000A9D: 68 C9 A0 01 00                                        	push	_data_already_defined
00000AA2: EB 13                                                 	jmp	error_with_source
                                                                too_many_repeats:
00000AA4: 68 DE A0 01 00                                        	push	_too_many_repeats
00000AA9: EB 0C                                                 	jmp	error_with_source
                                                                assertion_failed:
00000AAB: 68 1A A1 01 00                                        	push	_assertion_failed
00000AB0: EB 05                                                 	jmp	error_with_source
                                                                invoked_error:
00000AB2: 68 EF A0 01 00                                        	push	_invoked_error
                                                                    error_with_source:
00000AB7: 83 3D 4C A1 01 00 00                                  	cmp	[symbols_file],0
00000ABE: 0F 84 3E FA FF FF                                     	je	assembler_error
00000AC4: E8 E9 04 00 00                                        	call	dump_preprocessed_source
00000AC9: E8 A2 04 00 00                                        	call	restore_preprocessed_source
00000ACE: E9 2F FA FF FF                                        	jmp	assembler_error
                                                                
                                                                include '..\symbdump.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                dump_symbols:
00000AD3: 8B 3D 60 A1 01 00                                     	mov	edi,[code_start]
00000AD9: E8 0D 04 00 00                                        	call	setup_dump_header
00000ADE: 8B 35 44 A1 01 00                                     	mov	esi,[input_file]
00000AE4: E8 0D FF FF FF                                        	call	copy_asciiz
00000AE9: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
00000AEF: 0F 83 9D FD FF FF                                     	jae	out_of_memory
00000AF5: 89 F8                                                 	mov	eax,edi
00000AF7: 29 D8                                                 	sub	eax,ebx
00000AF9: 89 43 CC                                              	mov	[ebx-40h+0Ch],eax
00000AFC: 8B 35 48 A1 01 00                                     	mov	esi,[output_file]
00000B02: E8 EF FE FF FF                                        	call	copy_asciiz
00000B07: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
00000B0D: 0F 83 7F FD FF FF                                     	jae	out_of_memory
00000B13: 8B 15 3C A2 01 00                                     	mov	edx,[symbols_stream]
00000B19: 8B 2D 58 A1 01 00                                     	mov	ebp,[free_additional_memory]
00000B1F: 83 25 44 A2 01 00 00                                  	and	[number_of_sections],0
00000B26: 80 3D BD A2 01 00 04                                  	cmp	[output_format],4
00000B2D: 74 1B                                                 	je	prepare_strings_table
00000B2F: 80 3D BD A2 01 00 05                                  	cmp	[output_format],5
00000B36: 0F 85 CC 00 00 00                                     	jne	strings_table_ready
00000B3C: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
00000B44: 0F 82 BE 00 00 00                                     	jc	strings_table_ready
                                                                      prepare_strings_table:
00000B4A: 39 EA                                                 	cmp	edx,ebp
00000B4C: 0F 84 B6 00 00 00                                     	je	strings_table_ready
00000B52: 8A 02                                                 	mov	al,[edx]
00000B54: 84 C0                                                 	test	al,al
00000B56: 74 10                                                 	jz	prepare_string
00000B58: 3C 80                                                 	cmp	al,80h
00000B5A: 74 0C                                                 	je	prepare_string
00000B5C: 83 C2 0C                                              	add	edx,0Ch
00000B5F: 3C C0                                                 	cmp	al,0C0h
00000B61: 72 E7                                                 	jb	prepare_strings_table
00000B63: 83 C2 04                                              	add	edx,4
00000B66: EB E2                                                 	jmp	prepare_strings_table
                                                                      prepare_string:
00000B68: 89 FE                                                 	mov	esi,edi
00000B6A: 29 DE                                                 	sub	esi,ebx
00000B6C: 87 72 04                                              	xchg	esi,[edx+4]
00000B6F: 84 C0                                                 	test	al,al
00000B71: 74 23                                                 	jz	prepare_section_string
00000B73: 81 4A 04 00 00 00 80                                  	or	dword [edx+4],1 shl 31
00000B7A: 83 C2 0C                                              	add	edx,0Ch
                                                                      prepare_external_string:
00000B7D: 8B 0E                                                 	mov	ecx,[esi]
00000B7F: 83 C6 04                                              	add	esi,4
00000B82: F3 A4                                                 	rep	movs byte [edi],[esi]
00000B84: C6 07 00                                              	mov	byte [edi],0
00000B87: 47                                                    	inc	edi
00000B88: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
00000B8E: 0F 83 FE FC FF FF                                     	jae	out_of_memory
00000B94: EB B4                                                 	jmp	prepare_strings_table
                                                                      prepare_section_string:
00000B96: 8B 0D 44 A2 01 00                                     	mov	ecx,[number_of_sections]
00000B9C: 89 C8                                                 	mov	eax,ecx
00000B9E: 40                                                    	inc	eax
00000B9F: A3 44 A2 01 00                                        	mov	[number_of_sections],eax
00000BA4: 87 42 04                                              	xchg	eax,[edx+4]
00000BA7: C1 E1 02                                              	shl	ecx,2
00000BAA: 03 0D 58 A1 01 00                                     	add	ecx,[free_additional_memory]
00000BB0: 89 01                                                 	mov	[ecx],eax
00000BB2: 83 C2 20                                              	add	edx,20h
00000BB5: 85 F6                                                 	test	esi,esi
00000BB7: 74 32                                                 	jz	prepare_default_section_string
00000BB9: 80 3D BD A2 01 00 05                                  	cmp	[output_format],5
00000BC0: 75 BB                                                 	jne	prepare_external_string
00000BC2: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
00000BCA: 72 B1                                                 	jc	prepare_external_string
00000BCC: 8B 36                                                 	mov	esi,[esi]
00000BCE: 03 35 68 A2 01 00                                     	add	esi,[resource_data]
                                                                      copy_elf_section_name:
00000BD4: AC                                                    	lods	byte [esi]
00000BD5: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
00000BDB: 0F 83 B1 FC FF FF                                     	jae	out_of_memory
00000BE1: AA                                                    	stos	byte [edi]
00000BE2: 84 C0                                                 	test	al,al
00000BE4: 75 EE                                                 	jnz	copy_elf_section_name
00000BE6: E9 5F FF FF FF                                        	jmp	prepare_strings_table
                                                                      prepare_default_section_string:
00000BEB: B8 2E 66 6C 61                                        	mov	eax,'.fla'
00000BF0: AB                                                    	stos	dword [edi]
00000BF1: 66 B8 74 00                                           	mov	ax,'t'
00000BF5: 66 AB                                                 	stos	word [edi]
00000BF7: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
00000BFD: 0F 83 8F FC FF FF                                     	jae	out_of_memory
00000C03: E9 42 FF FF FF                                        	jmp	prepare_strings_table
                                                                      strings_table_ready:
00000C08: 8B 15 E4 A1 01 00                                     	mov	edx,[tagged_blocks]
00000C0E: 8B 2D 30 A1 01 00                                     	mov	ebp,[memory_end]
00000C14: 2B 2D B4 A1 01 00                                     	sub	ebp,[labels_list]
00000C1A: 01 D5                                                 	add	ebp,edx
                                                                      prepare_labels_dump:
00000C1C: 39 EA                                                 	cmp	edx,ebp
00000C1E: 0F 84 A2 00 00 00                                     	je	labels_dump_ok
00000C24: 8B 42 18                                              	mov	eax,[edx+24]
00000C27: 85 C0                                                 	test	eax,eax
00000C29: 74 43                                                 	jz	label_dump_name_ok
00000C2B: 3B 05 2C A1 01 00                                     	cmp	eax,[memory_start]
00000C31: 72 14                                                 	jb	label_name_outside_source
00000C33: 3B 05 5C A1 01 00                                     	cmp	eax,[source_start]
00000C39: 77 0C                                                 	ja	label_name_outside_source
00000C3B: 2B 05 2C A1 01 00                                     	sub	eax,[memory_start]
00000C41: 48                                                    	dec	eax
00000C42: 89 42 18                                              	mov	[edx+24],eax
00000C45: EB 27                                                 	jmp	label_dump_name_ok
                                                                      label_name_outside_source:
00000C47: 89 C6                                                 	mov	esi,eax
00000C49: 89 F8                                                 	mov	eax,edi
00000C4B: 29 D8                                                 	sub	eax,ebx
00000C4D: 0D 00 00 00 80                                        	or	eax,1 shl 31
00000C52: 89 42 18                                              	mov	[edx+24],eax
00000C55: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00000C59: 8D 44 0F 01                                           	lea	eax,[edi+ecx+1]
00000C5D: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
00000C63: 0F 83 29 FC FF FF                                     	jae	out_of_memory
00000C69: F3 A4                                                 	rep	movsb
00000C6B: 30 C0                                                 	xor	al,al
00000C6D: AA                                                    	stosb
                                                                      label_dump_name_ok:
00000C6E: 8B 42 1C                                              	mov	eax,[edx+28]
00000C71: 85 C0                                                 	test	eax,eax
00000C73: 74 09                                                 	jz	label_dump_line_ok
00000C75: 2B 05 2C A1 01 00                                     	sub	eax,[memory_start]
00000C7B: 89 42 1C                                              	mov	[edx+28],eax
                                                                      label_dump_line_ok:
00000C7E: F6 42 09 04                                           	test	byte [edx+9],4
00000C82: 74 09                                                 	jz	convert_base_symbol_for_label
00000C84: 31 C0                                                 	xor	eax,eax
00000C86: 89 02                                                 	mov	[edx],eax
00000C88: 89 42 04                                              	mov	[edx+4],eax
00000C8B: EB 14                                                 	jmp	base_symbol_for_label_ok
                                                                      convert_base_symbol_for_label:
00000C8D: 8B 42 14                                              	mov	eax,[edx+20]
00000C90: 85 C0                                                 	test	eax,eax
00000C92: 74 0D                                                 	jz	base_symbol_for_label_ok
00000C94: 3B 05 3C A2 01 00                                     	cmp	eax,[symbols_stream]
00000C9A: 8B 40 04                                              	mov	eax,[eax+4]
00000C9D: 73 02                                                 	jae	base_symbol_for_label_ok
00000C9F: 31 C0                                                 	xor	eax,eax
                                                                      base_symbol_for_label_ok:
00000CA1: 89 42 14                                              	mov	[edx+20],eax
00000CA4: 66 A1 52 A1 01 00                                     	mov	ax,[current_pass]
00000CAA: 66 3B 42 10                                           	cmp	ax,[edx+16]
00000CAE: 74 04                                                 	je	label_defined_flag_ok
00000CB0: 80 62 08 FE                                           	and	byte [edx+8],not 1
                                                                      label_defined_flag_ok:
00000CB4: 66 3B 42 12                                           	cmp	ax,[edx+18]
00000CB8: 74 04                                                 	je	label_used_flag_ok
00000CBA: 80 62 08 F7                                           	and	byte [edx+8],not 8
                                                                      label_used_flag_ok:
00000CBE: 83 C2 20                                              	add	edx,LABEL_STRUCTURE_SIZE
00000CC1: E9 56 FF FF FF                                        	jmp	prepare_labels_dump
                                                                      labels_dump_ok:
00000CC6: 89 F8                                                 	mov	eax,edi
00000CC8: 29 D8                                                 	sub	eax,ebx
00000CCA: 89 43 D4                                              	mov	[ebx-40h+14h],eax
00000CCD: 83 C0 40                                              	add	eax,40h
00000CD0: 89 43 D8                                              	mov	[ebx-40h+18h],eax
00000CD3: 8B 0D 30 A1 01 00                                     	mov	ecx,[memory_end]
00000CD9: 2B 0D B4 A1 01 00                                     	sub	ecx,[labels_list]
00000CDF: 89 4B DC                                              	mov	[ebx-40h+1Ch],ecx
00000CE2: 01 C8                                                 	add	eax,ecx
00000CE4: 89 43 E0                                              	mov	[ebx-40h+20h],eax
00000CE7: 8B 0D 5C A1 01 00                                     	mov	ecx,[source_start]
00000CED: 2B 0D 2C A1 01 00                                     	sub	ecx,[memory_start]
00000CF3: 89 4B E4                                              	mov	[ebx-40h+24h],ecx
00000CF6: 01 C8                                                 	add	eax,ecx
00000CF8: 89 43 E8                                              	mov	[ebx-40h+28h],eax
00000CFB: A1 44 A2 01 00                                        	mov	eax,[number_of_sections]
00000D00: C1 E0 02                                              	shl	eax,2
00000D03: 89 43 F4                                              	mov	[ebx-40h+34h],eax
00000D06: E8 01 02 00 00                                        	call	prepare_preprocessed_source
00000D0B: 8B 35 B4 A1 01 00                                     	mov	esi,[labels_list]
00000D11: 89 FD                                                 	mov	ebp,edi
                                                                      make_lines_dump:
00000D13: 3B 35 E4 A1 01 00                                     	cmp	esi,[tagged_blocks]
00000D19: 0F 84 98 00 00 00                                     	je	lines_dump_ok
00000D1F: 8B 46 FC                                              	mov	eax,[esi-4]
00000D22: 8B 4E F8                                              	mov	ecx,[esi-8]
00000D25: 83 EE 08                                              	sub	esi,8
00000D28: 29 CE                                                 	sub	esi,ecx
00000D2A: 83 F8 01                                              	cmp	eax,1
00000D2D: 74 0B                                                 	je	process_line_dump
00000D2F: 83 F8 02                                              	cmp	eax,2
00000D32: 75 DF                                                 	jne	make_lines_dump
00000D34: 83 43 FC 08                                           	add	dword [ebx-40h+3Ch],8
00000D38: EB D9                                                 	jmp	make_lines_dump
                                                                      process_line_dump:
00000D3A: 53                                                    	push	ebx
00000D3B: 8B 5E 08                                              	mov	ebx,[esi+8]
00000D3E: 8B 46 04                                              	mov	eax,[esi+4]
00000D41: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
00000D47: 03 05 70 A1 01 00                                     	add	eax,[headers_size]
00000D4D: F6 43 0A 01                                           	test	byte [ebx+0Ah],1
00000D51: 74 02                                                 	jz	store_offset
00000D53: 31 C0                                                 	xor	eax,eax
                                                                      store_offset:
00000D55: AB                                                    	stos	dword [edi]
00000D56: 8B 06                                                 	mov	eax,[esi]
00000D58: 2B 05 2C A1 01 00                                     	sub	eax,[memory_start]
00000D5E: AB                                                    	stos	dword [edi]
00000D5F: 8B 46 04                                              	mov	eax,[esi+4]
00000D62: 31 D2                                                 	xor	edx,edx
00000D64: 30 C9                                                 	xor	cl,cl
00000D66: 2B 03                                                 	sub	eax,[ebx]
00000D68: 1B 53 04                                              	sbb	edx,[ebx+4]
00000D6B: 1A 4B 08                                              	sbb	cl,[ebx+8]
00000D6E: AB                                                    	stos	dword [edi]
00000D6F: 89 D0                                                 	mov	eax,edx
00000D71: AB                                                    	stos	dword [edi]
00000D72: 8B 43 10                                              	mov	eax,[ebx+10h]
00000D75: AB                                                    	stos	dword [edi]
00000D76: 8B 43 14                                              	mov	eax,[ebx+14h]
00000D79: 85 C0                                                 	test	eax,eax
00000D7B: 74 0D                                                 	jz	base_symbol_for_line_ok
00000D7D: 3B 05 3C A2 01 00                                     	cmp	eax,[symbols_stream]
00000D83: 8B 40 04                                              	mov	eax,[eax+4]
00000D86: 73 02                                                 	jae	base_symbol_for_line_ok
00000D88: 31 C0                                                 	xor	eax,eax
                                                                      base_symbol_for_line_ok:
00000D8A: AB                                                    	stos	dword [edi]
00000D8B: 8A 43 09                                              	mov	al,[ebx+9]
00000D8E: AA                                                    	stos	byte [edi]
00000D8F: 8A 46 10                                              	mov	al,[esi+10h]
00000D92: AA                                                    	stos	byte [edi]
00000D93: 8A 43 0A                                              	mov	al,[ebx+0Ah]
00000D96: 24 01                                                 	and	al,1
00000D98: AA                                                    	stos	byte [edi]
00000D99: 88 C8                                                 	mov	al,cl
00000D9B: AA                                                    	stos	byte [edi]
00000D9C: 5B                                                    	pop	ebx
00000D9D: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
00000DA3: 0F 83 E9 FA FF FF                                     	jae	out_of_memory
00000DA9: 89 F8                                                 	mov	eax,edi
00000DAB: 83 E8 1C                                              	sub	eax,1Ch
00000DAE: 29 E8                                                 	sub	eax,ebp
00000DB0: 89 06                                                 	mov	[esi],eax
00000DB2: E9 5C FF FF FF                                        	jmp	make_lines_dump
                                                                      lines_dump_ok:
00000DB7: 89 FA                                                 	mov	edx,edi
00000DB9: A1 F0 A1 01 00                                        	mov	eax,[current_offset]
00000DBE: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
00000DC4: 03 05 70 A1 01 00                                     	add	eax,[headers_size]
00000DCA: AB                                                    	stos	dword [edi]
00000DCB: 89 F9                                                 	mov	ecx,edi
00000DCD: 29 D9                                                 	sub	ecx,ebx
00000DCF: 2B 4B D4                                              	sub	ecx,[ebx-40h+14h]
00000DD2: 89 4B EC                                              	mov	[ebx-40h+2Ch],ecx
00000DD5: 03 4B E8                                              	add	ecx,[ebx-40h+28h]
00000DD8: 89 4B F0                                              	mov	[ebx-40h+30h],ecx
00000DDB: 03 4B F4                                              	add	ecx,[ebx-40h+34h]
00000DDE: 89 4B F8                                              	mov	[ebx-40h+38h],ecx
                                                                      find_inexisting_offsets:
00000DE1: 83 EA 1C                                              	sub	edx,1Ch
00000DE4: 39 EA                                                 	cmp	edx,ebp
00000DE6: 72 17                                                 	jb	write_symbols
00000DE8: F6 42 1A 01                                           	test	byte [edx+1Ah],1
00000DEC: 75 F3                                                 	jnz	find_inexisting_offsets
00000DEE: 3B 02                                                 	cmp	eax,[edx]
00000DF0: 72 04                                                 	jb	correct_inexisting_offset
00000DF2: 8B 02                                                 	mov	eax,[edx]
00000DF4: EB EB                                                 	jmp	find_inexisting_offsets
                                                                      correct_inexisting_offset:
00000DF6: 83 22 00                                              	and	dword [edx],0
00000DF9: 80 4A 1A 02                                           	or	byte [edx+1Ah],2
00000DFD: EB E2                                                 	jmp	find_inexisting_offsets
                                                                      write_symbols:
00000DFF: 8B 15 4C A1 01 00                                     	mov	edx,[symbols_file]
00000E05: E8 90 F5 FF FF                                        	call	create
00000E0A: 0F 82 A0 FA FF FF                                     	jc	write_failed
00000E10: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
00000E16: 8B 4A 14                                              	mov	ecx,[edx+14h]
00000E19: 83 C1 40                                              	add	ecx,40h
00000E1C: E8 AF F5 FF FF                                        	call	write
00000E21: 0F 82 89 FA FF FF                                     	jc	write_failed
00000E27: 8B 15 E4 A1 01 00                                     	mov	edx,[tagged_blocks]
00000E2D: 8B 0D 30 A1 01 00                                     	mov	ecx,[memory_end]
00000E33: 2B 0D B4 A1 01 00                                     	sub	ecx,[labels_list]
00000E39: E8 92 F5 FF FF                                        	call	write
00000E3E: 0F 82 6C FA FF FF                                     	jc	write_failed
00000E44: 8B 15 2C A1 01 00                                     	mov	edx,[memory_start]
00000E4A: 8B 0D 5C A1 01 00                                     	mov	ecx,[source_start]
00000E50: 29 D1                                                 	sub	ecx,edx
00000E52: E8 79 F5 FF FF                                        	call	write
00000E57: 0F 82 53 FA FF FF                                     	jc	write_failed
00000E5D: 89 EA                                                 	mov	edx,ebp
00000E5F: 89 F9                                                 	mov	ecx,edi
00000E61: 29 D1                                                 	sub	ecx,edx
00000E63: E8 68 F5 FF FF                                        	call	write
00000E68: 0F 82 42 FA FF FF                                     	jc	write_failed
00000E6E: 8B 15 58 A1 01 00                                     	mov	edx,[free_additional_memory]
00000E74: 8B 0D 44 A2 01 00                                     	mov	ecx,[number_of_sections]
00000E7A: C1 E1 02                                              	shl	ecx,2
00000E7D: E8 4E F5 FF FF                                        	call	write
00000E82: 0F 82 28 FA FF FF                                     	jc	write_failed
00000E88: 8B 35 B4 A1 01 00                                     	mov	esi,[labels_list]
00000E8E: 8B 3D 2C A1 01 00                                     	mov	edi,[memory_start]
                                                                      make_references_dump:
00000E94: 3B 35 E4 A1 01 00                                     	cmp	esi,[tagged_blocks]
00000E9A: 74 34                                                 	je	references_dump_ok
00000E9C: 8B 46 FC                                              	mov	eax,[esi-4]
00000E9F: 8B 4E F8                                              	mov	ecx,[esi-8]
00000EA2: 83 EE 08                                              	sub	esi,8
00000EA5: 29 CE                                                 	sub	esi,ecx
00000EA7: 83 F8 02                                              	cmp	eax,2
00000EAA: 74 09                                                 	je	dump_reference
00000EAC: 83 F8 01                                              	cmp	eax,1
00000EAF: 75 E3                                                 	jne	make_references_dump
00000EB1: 8B 16                                                 	mov	edx,[esi]
00000EB3: EB DF                                                 	jmp	make_references_dump
                                                                      dump_reference:
00000EB5: A1 30 A1 01 00                                        	mov	eax,[memory_end]
00000EBA: 2B 06                                                 	sub	eax,[esi]
00000EBC: 83 E8 20                                              	sub	eax,LABEL_STRUCTURE_SIZE
00000EBF: AB                                                    	stosd
00000EC0: 89 D0                                                 	mov	eax,edx
00000EC2: AB                                                    	stosd
00000EC3: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
00000EC9: 72 C9                                                 	jb	make_references_dump
00000ECB: E9 C2 F9 FF FF                                        	jmp	out_of_memory
                                                                      references_dump_ok:
00000ED0: 8B 15 2C A1 01 00                                     	mov	edx,[memory_start]
00000ED6: 89 F9                                                 	mov	ecx,edi
00000ED8: 29 D1                                                 	sub	ecx,edx
00000EDA: E8 F1 F4 FF FF                                        	call	write
00000EDF: 0F 82 CB F9 FF FF                                     	jc	write_failed
00000EE5: E8 CC F4 FF FF                                        	call	close
00000EEA: C3                                                    	ret
                                                                      setup_dump_header:
00000EEB: 31 C0                                                 	xor	eax,eax
00000EED: B9 10 00 00 00                                        	mov	ecx,40h shr 2
00000EF2: F3 AB                                                 	rep	stos dword [edi]
00000EF4: 89 FB                                                 	mov	ebx,edi
00000EF6: C7 43 C0 66 61 73 1A                                  	mov	dword [ebx-40h],'fas'+1Ah shl 24
00000EFD: C7 43 C4 01 49 40 00                                  	mov	dword [ebx-40h+4],VERSION_MAJOR + VERSION_MINOR shl 8 + 40h shl 16
00000F04: C7 43 D0 40 00 00 00                                  	mov	dword [ebx-40h+10h],40h
00000F0B: C3                                                    	ret
                                                                prepare_preprocessed_source:
00000F0C: 8B 35 2C A1 01 00                                     	mov	esi,[memory_start]
00000F12: 8B 2D 5C A1 01 00                                     	mov	ebp,[source_start]
00000F18: 85 ED                                                 	test	ebp,ebp
00000F1A: 75 07                                                 	jnz	prepare_preprocessed_line
00000F1C: 8B 2D 74 A1 01 00                                     	mov	ebp,[current_line]
00000F22: 45                                                    	inc	ebp
                                                                      prepare_preprocessed_line:
00000F23: 39 EE                                                 	cmp	esi,ebp
00000F25: 73 26                                                 	jae	preprocessed_source_ok
00000F27: A1 2C A1 01 00                                        	mov	eax,[memory_start]
00000F2C: 8B 15 44 A1 01 00                                     	mov	edx,[input_file]
00000F32: 39 16                                                 	cmp	[esi],edx
00000F34: 75 02                                                 	jne	line_not_from_main_input
00000F36: 89 06                                                 	mov	[esi],eax
                                                                      line_not_from_main_input:
00000F38: 29 06                                                 	sub	[esi],eax
00000F3A: F6 46 07 80                                           	test	byte [esi+7],1 shl 7
00000F3E: 74 06                                                 	jz	prepare_next_preprocessed_line
00000F40: 29 46 08                                              	sub	[esi+8],eax
00000F43: 29 46 0C                                              	sub	[esi+12],eax
                                                                      prepare_next_preprocessed_line:
00000F46: E8 03 00 00 00                                        	call	skip_preprocessed_line
00000F4B: EB D6                                                 	jmp	prepare_preprocessed_line
                                                                      preprocessed_source_ok:
00000F4D: C3                                                    	ret
                                                                      skip_preprocessed_line:
00000F4E: 83 C6 10                                              	add	esi,16
                                                                      skip_preprocessed_line_content:
00000F51: AC                                                    	lods	byte [esi]
00000F52: 3C 1A                                                 	cmp	al,1Ah
00000F54: 74 12                                                 	je	skip_preprocessed_symbol
00000F56: 3C 3B                                                 	cmp	al,3Bh
00000F58: 74 0E                                                 	je	skip_preprocessed_symbol
00000F5A: 3C 22                                                 	cmp	al,22h
00000F5C: 74 05                                                 	je	skip_preprocessed_string
00000F5E: 08 C0                                                 	or	al,al
00000F60: 75 EF                                                 	jnz	skip_preprocessed_line_content
00000F62: C3                                                    	ret
                                                                      skip_preprocessed_string:
00000F63: AD                                                    	lods	dword [esi]
00000F64: 01 C6                                                 	add	esi,eax
00000F66: EB E9                                                 	jmp	skip_preprocessed_line_content
                                                                      skip_preprocessed_symbol:
00000F68: AC                                                    	lods	byte [esi]
00000F69: 0F B6 C0                                              	movzx	eax,al
00000F6C: 01 C6                                                 	add	esi,eax
00000F6E: EB E1                                                 	jmp	skip_preprocessed_line_content
                                                                restore_preprocessed_source:
00000F70: 8B 35 2C A1 01 00                                     	mov	esi,[memory_start]
00000F76: 8B 2D 5C A1 01 00                                     	mov	ebp,[source_start]
00000F7C: 85 ED                                                 	test	ebp,ebp
00000F7E: 75 07                                                 	jnz	restore_preprocessed_line
00000F80: 8B 2D 74 A1 01 00                                     	mov	ebp,[current_line]
00000F86: 45                                                    	inc	ebp
                                                                      restore_preprocessed_line:
00000F87: 39 EE                                                 	cmp	esi,ebp
00000F89: 73 26                                                 	jae	preprocessed_source_restored
00000F8B: A1 2C A1 01 00                                        	mov	eax,[memory_start]
00000F90: 01 06                                                 	add	[esi],eax
00000F92: 39 06                                                 	cmp	[esi],eax
00000F94: 75 08                                                 	jne	preprocessed_line_source_restored
00000F96: 8B 15 44 A1 01 00                                     	mov	edx,[input_file]
00000F9C: 89 16                                                 	mov	[esi],edx
                                                                      preprocessed_line_source_restored:
00000F9E: F6 46 07 80                                           	test	byte [esi+7],1 shl 7
00000FA2: 74 06                                                 	jz	restore_next_preprocessed_line
00000FA4: 01 46 08                                              	add	[esi+8],eax
00000FA7: 01 46 0C                                              	add	[esi+12],eax
                                                                      restore_next_preprocessed_line:
00000FAA: E8 9F FF FF FF                                        	call	skip_preprocessed_line
00000FAF: EB D6                                                 	jmp	restore_preprocessed_line
                                                                      preprocessed_source_restored:
00000FB1: C3                                                    	ret
                                                                dump_preprocessed_source:
00000FB2: 8B 3D 58 A1 01 00                                     	mov	edi,[free_additional_memory]
00000FB8: E8 2E FF FF FF                                        	call	setup_dump_header
00000FBD: 8B 35 44 A1 01 00                                     	mov	esi,[input_file]
00000FC3: E8 2E FA FF FF                                        	call	copy_asciiz
00000FC8: 3B 3D 38 A1 01 00                                     	cmp	edi,[additional_memory_end]
00000FCE: 0F 83 BE F8 FF FF                                     	jae	out_of_memory
00000FD4: 89 F8                                                 	mov	eax,edi
00000FD6: 29 D8                                                 	sub	eax,ebx
00000FD8: 48                                                    	dec	eax
00000FD9: 89 43 CC                                              	mov	[ebx-40h+0Ch],eax
00000FDC: 89 F8                                                 	mov	eax,edi
00000FDE: 29 D8                                                 	sub	eax,ebx
00000FE0: 89 43 D4                                              	mov	[ebx-40h+14h],eax
00000FE3: 83 C0 40                                              	add	eax,40h
00000FE6: 89 43 E0                                              	mov	[ebx-40h+20h],eax
00000FE9: E8 1E FF FF FF                                        	call	prepare_preprocessed_source
00000FEE: 2B 35 2C A1 01 00                                     	sub	esi,[memory_start]
00000FF4: 89 73 E4                                              	mov	[ebx-40h+24h],esi
00000FF7: 8B 15 4C A1 01 00                                     	mov	edx,[symbols_file]
00000FFD: E8 98 F3 FF FF                                        	call	create
00001002: 0F 82 A8 F8 FF FF                                     	jc	write_failed
00001008: 8B 15 58 A1 01 00                                     	mov	edx,[free_additional_memory]
0000100E: 8B 4A 14                                              	mov	ecx,[edx+14h]
00001011: 83 C1 40                                              	add	ecx,40h
00001014: E8 B7 F3 FF FF                                        	call	write
00001019: 0F 82 91 F8 FF FF                                     	jc	write_failed
0000101F: 8B 15 2C A1 01 00                                     	mov	edx,[memory_start]
00001025: 89 F1                                                 	mov	ecx,esi
00001027: E8 A4 F3 FF FF                                        	call	write
0000102C: 0F 82 7E F8 FF FF                                     	jc	write_failed
00001032: E8 7F F3 FF FF                                        	call	close
00001037: C3                                                    	ret
                                                                
                                                                include '..\preproce.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                preprocessor:
00001038: BF C7 A2 01 00                                        	mov	edi,characters
0000103D: 30 C0                                                 	xor	al,al
                                                                      make_characters_table:
0000103F: AA                                                    	stosb
00001040: FE C0                                                 	inc	al
00001042: 75 FB                                                 	jnz	make_characters_table
00001044: BE 28 A3 01 00                                        	mov	esi,characters+'a'
00001049: BF 08 A3 01 00                                        	mov	edi,characters+'A'
0000104E: B9 1A 00 00 00                                        	mov	ecx,26
00001053: F3 A4                                                 	rep	movsb
00001055: BF C7 A2 01 00                                        	mov	edi,characters
0000105A: BE A1 44 01 00                                        	mov	esi,symbol_characters+1
0000105F: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00001063: 31 C0                                                 	xor	eax,eax
                                                                      mark_symbol_characters:
00001065: AC                                                    	lodsb
00001066: C6 04 07 00                                           	mov	byte [edi+eax],0
0000106A: E2 F9                                                 	loop	mark_symbol_characters
0000106C: BF A0 A1 01 00                                        	mov	edi,locals_counter
00001071: 66 B8 01 30                                           	mov	ax,1 + '0' shl 8
00001075: 66 AB                                                 	stos	word [edi]
00001077: 8B 3D 2C A1 01 00                                     	mov	edi,[memory_start]
0000107D: 89 3D 54 A1 01 00                                     	mov	[include_paths],edi
00001083: BE 98 44 01 00                                        	mov	esi,include_variable
00001088: E8 94 F2 FF FF                                        	call	get_environment_variable
0000108D: 30 C0                                                 	xor	al,al
0000108F: AA                                                    	stos	byte [edi]
00001090: 89 3D 2C A1 01 00                                     	mov	[memory_start],edi
00001096: A1 34 A1 01 00                                        	mov	eax,[additional_memory]
0000109B: A3 58 A1 01 00                                        	mov	[free_additional_memory],eax
000010A0: A1 38 A1 01 00                                        	mov	eax,[additional_memory_end]
000010A5: A3 B4 A1 01 00                                        	mov	[labels_list],eax
000010AA: 31 C0                                                 	xor	eax,eax
000010AC: A3 5C A1 01 00                                        	mov	[source_start],eax
000010B1: A3 E4 A1 01 00                                        	mov	[tagged_blocks],eax
000010B6: A3 C0 A1 01 00                                        	mov	[hash_tree],eax
000010BB: A3 E0 A1 01 00                                        	mov	[error],eax
000010C0: A2 C1 A2 01 00                                        	mov	[macro_status],al
000010C5: A3 74 A1 01 00                                        	mov	[current_line],eax
000010CA: 8B 35 40 A1 01 00                                     	mov	esi,[initial_definitions]
000010D0: 85 F6                                                 	test	esi,esi
000010D2: 0F 84 53 01 00 00                                     	jz	predefinitions_ok
                                                                      process_predefinitions:
000010D8: 0F B6 0E                                              	movzx	ecx,byte [esi]
000010DB: 85 C9                                                 	test	ecx,ecx
000010DD: 0F 84 48 01 00 00                                     	jz	predefinitions_ok
000010E3: 46                                                    	inc	esi
000010E4: 8D 04 0E                                              	lea	eax,[esi+ecx]
000010E7: 50                                                    	push	eax
000010E8: B5 02                                                 	mov	ch,10b
000010EA: E8 3A 08 00 00                                        	call	add_preprocessor_symbol
000010EF: 5E                                                    	pop	esi
000010F0: 8B 3D 2C A1 01 00                                     	mov	edi,[memory_start]
000010F6: 89 7A 08                                              	mov	[edx+8],edi
                                                                      convert_predefinition:
000010F9: 3B 3D 30 A1 01 00                                     	cmp	edi,[memory_end]
000010FF: 0F 83 8D F7 FF FF                                     	jae	out_of_memory
00001105: AC                                                    	lods	byte [esi]
00001106: 08 C0                                                 	or	al,al
00001108: 0F 84 0C 01 00 00                                     	jz	predefinition_converted
0000110E: 3C 20                                                 	cmp	al,20h
00001110: 74 E7                                                 	je	convert_predefinition
00001112: 88 C4                                                 	mov	ah,al
00001114: BB C7 A2 01 00                                        	mov	ebx,characters
00001119: D7                                                    	xlat	byte [ebx]
0000111A: 08 C0                                                 	or	al,al
0000111C: 74 39                                                 	jz	predefinition_separator
0000111E: 80 FC 27                                              	cmp	ah,27h
00001121: 74 51                                                 	je	predefinition_string
00001123: 80 FC 22                                              	cmp	ah,22h
00001126: 74 4C                                                 	je	predefinition_string
00001128: C6 07 1A                                              	mov	byte [edi],1Ah
0000112B: 66 AF                                                 	scas	word [edi]
0000112D: 86 C4                                                 	xchg	al,ah
0000112F: AA                                                    	stos	byte [edi]
00001130: BB C7 A2 01 00                                        	mov	ebx,characters
00001135: 31 C9                                                 	xor	ecx,ecx
                                                                      predefinition_symbol:
00001137: AC                                                    	lods	byte [esi]
00001138: AA                                                    	stos	byte [edi]
00001139: D7                                                    	xlat	byte [ebx]
0000113A: 08 C0                                                 	or	al,al
0000113C: E0 F9                                                 	loopnzd predefinition_symbol
0000113E: F7 D9                                                 	neg	ecx
00001140: 81 F9 FF 00 00 00                                     	cmp	ecx,255
00001146: 0F 87 7C F7 FF FF                                     	ja	invalid_definition
0000114C: 89 FB                                                 	mov	ebx,edi
0000114E: 29 CB                                                 	sub	ebx,ecx
00001150: 88 4B FE                                              	mov	byte [ebx-2],cl
                                                                      found_predefinition_separator:
00001153: 4F                                                    	dec	edi
00001154: 8A 66 FF                                              	mov	ah,[esi-1]
                                                                      predefinition_separator:
00001157: 86 C4                                                 	xchg	al,ah
00001159: 08 C0                                                 	or	al,al
0000115B: 0F 84 B9 00 00 00                                     	jz	predefinition_converted
00001161: 3C 20                                                 	cmp	al,20h
00001163: 74 94                                                 	je	convert_predefinition
00001165: 3C 3B                                                 	cmp	al,3Bh
00001167: 0F 84 5B F7 FF FF                                     	je	invalid_definition
0000116D: 3C 5C                                                 	cmp	al,5Ch
0000116F: 74 2A                                                 	je	predefinition_backslash
00001171: AA                                                    	stos	byte [edi]
00001172: EB 85                                                 	jmp	convert_predefinition
                                                                      predefinition_string:
00001174: B0 22                                                 	mov	al,22h
00001176: AA                                                    	stos	byte [edi]
00001177: AF                                                    	scas	dword [edi]
00001178: 89 FB                                                 	mov	ebx,edi
                                                                      copy_predefinition_string:
0000117A: AC                                                    	lods	byte [esi]
0000117B: AA                                                    	stos	byte [edi]
0000117C: 08 C0                                                 	or	al,al
0000117E: 0F 84 44 F7 FF FF                                     	jz	invalid_definition
00001184: 38 E0                                                 	cmp	al,ah
00001186: 75 F2                                                 	jne	copy_predefinition_string
00001188: AC                                                    	lods	byte [esi]
00001189: 38 E0                                                 	cmp	al,ah
0000118B: 74 ED                                                 	je	copy_predefinition_string
0000118D: 4E                                                    	dec	esi
0000118E: 4F                                                    	dec	edi
0000118F: 89 F8                                                 	mov	eax,edi
00001191: 29 D8                                                 	sub	eax,ebx
00001193: 89 43 FC                                              	mov	[ebx-4],eax
00001196: E9 5E FF FF FF                                        	jmp	convert_predefinition
                                                                      predefinition_backslash:
0000119B: C6 07 00                                              	mov	byte [edi],0
0000119E: AC                                                    	lods	byte [esi]
0000119F: 08 C0                                                 	or	al,al
000011A1: 0F 84 21 F7 FF FF                                     	jz	invalid_definition
000011A7: 3C 20                                                 	cmp	al,20h
000011A9: 0F 84 19 F7 FF FF                                     	je	invalid_definition
000011AF: 3C 3B                                                 	cmp	al,3Bh
000011B1: 0F 84 11 F7 FF FF                                     	je	invalid_definition
000011B7: B0 1A                                                 	mov	al,1Ah
000011B9: AA                                                    	stos	byte [edi]
000011BA: 89 F9                                                 	mov	ecx,edi
000011BC: 66 B8 01 5C                                           	mov	ax,5C01h
000011C0: 66 AB                                                 	stos	word [edi]
000011C2: 4E                                                    	dec	esi
                                                                      group_predefinition_backslashes:
000011C3: AC                                                    	lods	byte [esi]
000011C4: 3C 5C                                                 	cmp	al,5Ch
000011C6: 75 05                                                 	jne	predefinition_backslashed_symbol
000011C8: AA                                                    	stos	byte [edi]
000011C9: FE 01                                                 	inc	byte [ecx]
000011CB: EB F6                                                 	jmp	group_predefinition_backslashes
                                                                      predefinition_backslashed_symbol:
000011CD: 3C 20                                                 	cmp	al,20h
000011CF: 0F 84 F3 F6 FF FF                                     	je	invalid_definition
000011D5: 3C 22                                                 	cmp	al,22h
000011D7: 0F 84 EB F6 FF FF                                     	je	invalid_definition
000011DD: 3C 27                                                 	cmp	al,27h
000011DF: 0F 84 E3 F6 FF FF                                     	je	invalid_definition
000011E5: 3C 3B                                                 	cmp	al,3Bh
000011E7: 0F 84 DB F6 FF FF                                     	je	invalid_definition
000011ED: 88 C4                                                 	mov	ah,al
000011EF: BB C7 A2 01 00                                        	mov	ebx,characters
000011F4: D7                                                    	xlat	byte [ebx]
000011F5: 08 C0                                                 	or	al,al
000011F7: 74 17                                                 	jz	predefinition_backslashed_symbol_character
000011F9: 88 E0                                                 	mov	al,ah
                                                                      convert_predefinition_backslashed_symbol:
000011FB: AA                                                    	stos	byte [edi]
000011FC: D7                                                    	xlat	byte [ebx]
000011FD: 08 C0                                                 	or	al,al
000011FF: 0F 84 4E FF FF FF                                     	jz	found_predefinition_separator
00001205: FE 01                                                 	inc	byte [ecx]
00001207: 0F 84 BB F6 FF FF                                     	jz	invalid_definition
0000120D: AC                                                    	lods	byte [esi]
0000120E: EB EB                                                 	jmp	convert_predefinition_backslashed_symbol
                                                                      predefinition_backslashed_symbol_character:
00001210: 88 E0                                                 	mov	al,ah
00001212: AA                                                    	stos	byte [edi]
00001213: FE 01                                                 	inc	byte [ecx]
00001215: E9 DF FE FF FF                                        	jmp	convert_predefinition
                                                                      predefinition_converted:
0000121A: 89 3D 2C A1 01 00                                     	mov	[memory_start],edi
00001220: 2B 7A 08                                              	sub	edi,[edx+8]
00001223: 89 7A 0C                                              	mov	[edx+12],edi
00001226: E9 AD FE FF FF                                        	jmp	process_predefinitions
                                                                      predefinitions_ok:
0000122B: 8B 35 44 A1 01 00                                     	mov	esi,[input_file]
00001231: 89 F2                                                 	mov	edx,esi
00001233: E8 24 F1 FF FF                                        	call	open
00001238: 0F 82 68 F6 FF FF                                     	jc	main_file_not_found
0000123E: 8B 3D 2C A1 01 00                                     	mov	edi,[memory_start]
00001244: E8 7A 00 00 00                                        	call	preprocess_file
00001249: 80 3D C1 A2 01 00 00                                  	cmp	[macro_status],0
00001250: 74 0F                                                 	je	process_postponed
00001252: A1 DC A1 01 00                                        	mov	eax,[error_line]
00001257: A3 74 A1 01 00                                        	mov	[current_line],eax
0000125C: E9 AB F6 FF FF                                        	jmp	incomplete_macro
                                                                      process_postponed:
00001261: BA C0 A1 01 00                                        	mov	edx,hash_tree
00001266: B9 20 00 00 00                                        	mov	ecx,32
                                                                      find_postponed_list:
0000126B: 8B 12                                                 	mov	edx,[edx]
0000126D: 09 D2                                                 	or	edx,edx
0000126F: E0 FA                                                 	loopnz	find_postponed_list
00001271: 74 35                                                 	jz	preprocessing_finished
                                                                      process_postponed_list:
00001273: 8B 02                                                 	mov	eax,[edx]
00001275: 09 C0                                                 	or	eax,eax
00001277: 74 2F                                                 	jz	preprocessing_finished
00001279: 52                                                    	push	edx
0000127A: 89 D3                                                 	mov	ebx,edx
                                                                      find_earliest_postponed:
0000127C: 8B 02                                                 	mov	eax,[edx]
0000127E: 09 C0                                                 	or	eax,eax
00001280: 74 06                                                 	jz	earliest_postponed_found
00001282: 89 D3                                                 	mov	ebx,edx
00001284: 89 C2                                                 	mov	edx,eax
00001286: EB F4                                                 	jmp	find_earliest_postponed
                                                                      earliest_postponed_found:
00001288: 89 03                                                 	mov	[ebx],eax
0000128A: E8 20 00 00 00                                        	call	use_postponed_macro
0000128F: 5A                                                    	pop	edx
00001290: 80 3D C1 A2 01 00 00                                  	cmp	[macro_status],0
00001297: 74 DA                                                 	je	process_postponed_list
00001299: A1 DC A1 01 00                                        	mov	eax,[error_line]
0000129E: A3 74 A1 01 00                                        	mov	[current_line],eax
000012A3: E9 64 F6 FF FF                                        	jmp	incomplete_macro
                                                                      preprocessing_finished:
000012A8: 89 3D 5C A1 01 00                                     	mov	[source_start],edi
000012AE: C3                                                    	ret
                                                                      use_postponed_macro:
000012AF: 8D 77 FF                                              	lea	esi,[edi-1]
000012B2: 51 56                                                 	push	ecx esi
000012B4: C7 05 8C A1 01 00 00 00 00 00                         	mov	[struc_name],0
000012BE: E9 52 0E 00 00                                        	jmp	use_macro
                                                                
                                                                preprocess_file:
000012C3: FF 35 30 A1 01 00                                     	push	[memory_end]
000012C9: 56                                                    	push	esi
000012CA: B0 02                                                 	mov	al,2
000012CC: 31 D2                                                 	xor	edx,edx
000012CE: E8 0F F1 FF FF                                        	call	lseek
000012D3: 50                                                    	push	eax
000012D4: 30 C0                                                 	xor	al,al
000012D6: 31 D2                                                 	xor	edx,edx
000012D8: E8 05 F1 FF FF                                        	call	lseek
000012DD: 59                                                    	pop	ecx
000012DE: 8B 15 30 A1 01 00                                     	mov	edx,[memory_end]
000012E4: 4A                                                    	dec	edx
000012E5: C6 02 1A                                              	mov	byte [edx],1Ah
000012E8: 29 CA                                                 	sub	edx,ecx
000012EA: 0F 82 A2 F5 FF FF                                     	jc	out_of_memory
000012F0: 89 D6                                                 	mov	esi,edx
000012F2: 39 FA                                                 	cmp	edx,edi
000012F4: 0F 86 98 F5 FF FF                                     	jbe	out_of_memory
000012FA: 89 15 30 A1 01 00                                     	mov	[memory_end],edx
00001300: E8 B9 F0 FF FF                                        	call	read
00001305: E8 AC F0 FF FF                                        	call	close
0000130A: 5A                                                    	pop	edx
0000130B: 31 C9                                                 	xor	ecx,ecx
0000130D: 89 F3                                                 	mov	ebx,esi
                                                                      preprocess_source:
0000130F: 41                                                    	inc	ecx
00001310: 89 3D 74 A1 01 00                                     	mov	[current_line],edi
00001316: 89 D0                                                 	mov	eax,edx
00001318: AB                                                    	stos	dword [edi]
00001319: 89 C8                                                 	mov	eax,ecx
0000131B: AB                                                    	stos	dword [edi]
0000131C: 89 F0                                                 	mov	eax,esi
0000131E: 29 D8                                                 	sub	eax,ebx
00001320: AB                                                    	stos	dword [edi]
00001321: 31 C0                                                 	xor	eax,eax
00001323: AB                                                    	stos	dword [edi]
00001324: 53 52                                                 	push	ebx edx
00001326: E8 1B 00 00 00                                        	call	convert_line
0000132B: E8 AB 02 00 00                                        	call	preprocess_line
00001330: 5A 5B                                                 	pop	edx ebx
                                                                      next_line:
00001332: 80 7E FF 00                                           	cmp	byte [esi-1],0
00001336: 74 06                                                 	je	file_end
00001338: 80 7E FF 1A                                           	cmp	byte [esi-1],1Ah
0000133C: 75 D1                                                 	jne	preprocess_source
                                                                      file_end:
0000133E: 8F 05 30 A1 01 00                                     	pop	[memory_end]
00001344: F8                                                    	clc
00001345: C3                                                    	ret
                                                                
                                                                convert_line:
00001346: 51                                                    	push	ecx
00001347: F6 05 C1 A2 01 00 0F                                  	test	[macro_status],0Fh
0000134E: 74 06                                                 	jz	convert_line_data
00001350: 66 B8 3B 00                                           	mov	ax,3Bh
00001354: 66 AB                                                 	stos	word [edi]
                                                                      convert_line_data:
00001356: 3B 3D 30 A1 01 00                                     	cmp	edi,[memory_end]
0000135C: 0F 83 30 F5 FF FF                                     	jae	out_of_memory
00001362: AC                                                    	lods	byte [esi]
00001363: 3C 20                                                 	cmp	al,20h
00001365: 74 EF                                                 	je	convert_line_data
00001367: 3C 09                                                 	cmp	al,9
00001369: 74 EB                                                 	je	convert_line_data
0000136B: 88 C4                                                 	mov	ah,al
0000136D: BB C7 A2 01 00                                        	mov	ebx,characters
00001372: D7                                                    	xlat	byte [ebx]
00001373: 08 C0                                                 	or	al,al
00001375: 74 41                                                 	jz	convert_separator
00001377: 80 FC 27                                              	cmp	ah,27h
0000137A: 0F 84 8E 00 00 00                                     	je	convert_string
00001380: 80 FC 22                                              	cmp	ah,22h
00001383: 0F 84 85 00 00 00                                     	je	convert_string
00001389: C6 07 1A                                              	mov	byte [edi],1Ah
0000138C: 66 AF                                                 	scas	word [edi]
0000138E: 86 C4                                                 	xchg	al,ah
00001390: AA                                                    	stos	byte [edi]
00001391: BB C7 A2 01 00                                        	mov	ebx,characters
00001396: 31 C9                                                 	xor	ecx,ecx
                                                                      convert_symbol:
00001398: AC                                                    	lods	byte [esi]
00001399: AA                                                    	stos	byte [edi]
0000139A: D7                                                    	xlat	byte [ebx]
0000139B: 08 C0                                                 	or	al,al
0000139D: E0 F9                                                 	loopnzd convert_symbol
0000139F: F7 D9                                                 	neg	ecx
000013A1: 81 F9 FF 00 00 00                                     	cmp	ecx,255
000013A7: 0F 87 AA F6 FF FF                                     	ja	name_too_long
000013AD: 89 FB                                                 	mov	ebx,edi
000013AF: 29 CB                                                 	sub	ebx,ecx
000013B1: 88 4B FE                                              	mov	byte [ebx-2],cl
                                                                      found_separator:
000013B4: 4F                                                    	dec	edi
000013B5: 8A 66 FF                                              	mov	ah,[esi-1]
                                                                      convert_separator:
000013B8: 86 C4                                                 	xchg	al,ah
000013BA: 3C 20                                                 	cmp	al,20h
000013BC: 72 11                                                 	jb	control_character
000013BE: 74 96                                                 	je	convert_line_data
                                                                      symbol_character:
000013C0: 3C 3B                                                 	cmp	al,3Bh
000013C2: 0F 84 95 01 00 00                                     	je	ignore_comment
000013C8: 3C 5C                                                 	cmp	al,5Ch
000013CA: 74 71                                                 	je	backslash_character
000013CC: AA                                                    	stos	byte [edi]
000013CD: EB 87                                                 	jmp	convert_line_data
                                                                      control_character:
000013CF: 3C 1A                                                 	cmp	al,1Ah
000013D1: 0F 84 9F 01 00 00                                     	je	line_end
000013D7: 3C 0D                                                 	cmp	al,0Dh
000013D9: 74 24                                                 	je	cr_character
000013DB: 3C 0A                                                 	cmp	al,0Ah
000013DD: 74 11                                                 	je	lf_character
000013DF: 3C 09                                                 	cmp	al,9
000013E1: 0F 84 6F FF FF FF                                     	je	convert_line_data
000013E7: 08 C0                                                 	or	al,al
000013E9: 75 D5                                                 	jnz	symbol_character
000013EB: E9 86 01 00 00                                        	jmp	line_end
                                                                      lf_character:
000013F0: AC                                                    	lods	byte [esi]
000013F1: 3C 0D                                                 	cmp	al,0Dh
000013F3: 0F 84 7D 01 00 00                                     	je	line_end
000013F9: 4E                                                    	dec	esi
000013FA: E9 77 01 00 00                                        	jmp	line_end
                                                                      cr_character:
000013FF: AC                                                    	lods	byte [esi]
00001400: 3C 0A                                                 	cmp	al,0Ah
00001402: 0F 84 6E 01 00 00                                     	je	line_end
00001408: 4E                                                    	dec	esi
00001409: E9 68 01 00 00                                        	jmp	line_end
                                                                      convert_string:
0000140E: B0 22                                                 	mov	al,22h
00001410: AA                                                    	stos	byte [edi]
00001411: AF                                                    	scas	dword [edi]
00001412: 89 FB                                                 	mov	ebx,edi
                                                                      copy_string:
00001414: AC                                                    	lods	byte [esi]
00001415: AA                                                    	stos	byte [edi]
00001416: 3C 0A                                                 	cmp	al,0Ah
00001418: 74 7B                                                 	je	no_end_quote
0000141A: 3C 0D                                                 	cmp	al,0Dh
0000141C: 74 77                                                 	je	no_end_quote
0000141E: 08 C0                                                 	or	al,al
00001420: 74 73                                                 	jz	no_end_quote
00001422: 3C 1A                                                 	cmp	al,1Ah
00001424: 74 6F                                                 	je	no_end_quote
00001426: 38 E0                                                 	cmp	al,ah
00001428: 75 EA                                                 	jne	copy_string
0000142A: AC                                                    	lods	byte [esi]
0000142B: 38 E0                                                 	cmp	al,ah
0000142D: 74 E5                                                 	je	copy_string
0000142F: 4E                                                    	dec	esi
00001430: 4F                                                    	dec	edi
00001431: 89 F8                                                 	mov	eax,edi
00001433: 29 D8                                                 	sub	eax,ebx
00001435: 89 43 FC                                              	mov	[ebx-4],eax
00001438: E9 19 FF FF FF                                        	jmp	convert_line_data
                                                                      backslash_character:
0000143D: C6 07 00                                              	mov	byte [edi],0
00001440: AC                                                    	lods	byte [esi]
00001441: 3C 20                                                 	cmp	al,20h
00001443: 0F 84 CA 00 00 00                                     	je	concatenate_lines
00001449: 3C 09                                                 	cmp	al,9
0000144B: 0F 84 C2 00 00 00                                     	je	concatenate_lines
00001451: 3C 1A                                                 	cmp	al,1Ah
00001453: 0F 84 1D 01 00 00                                     	je	line_end
00001459: 08 C0                                                 	or	al,al
0000145B: 0F 84 15 01 00 00                                     	jz	line_end
00001461: 3C 0A                                                 	cmp	al,0Ah
00001463: 0F 84 DE 00 00 00                                     	je	concatenate_lf
00001469: 3C 0D                                                 	cmp	al,0Dh
0000146B: 0F 84 DE 00 00 00                                     	je	concatenate_cr
00001471: 3C 3B                                                 	cmp	al,3Bh
00001473: 0F 84 BB 00 00 00                                     	je	find_concatenated_line
00001479: B0 1A                                                 	mov	al,1Ah
0000147B: AA                                                    	stos	byte [edi]
0000147C: 89 F9                                                 	mov	ecx,edi
0000147E: 66 B8 01 5C                                           	mov	ax,5C01h
00001482: 66 AB                                                 	stos	word [edi]
00001484: 4E                                                    	dec	esi
                                                                      group_backslashes:
00001485: AC                                                    	lods	byte [esi]
00001486: 3C 5C                                                 	cmp	al,5Ch
00001488: 75 14                                                 	jne	backslashed_symbol
0000148A: AA                                                    	stos	byte [edi]
0000148B: FE 01                                                 	inc	byte [ecx]
0000148D: 0F 84 C4 F5 FF FF                                     	jz	name_too_long
00001493: EB F0                                                 	jmp	group_backslashes
                                                                      no_end_quote:
00001495: C6 43 FB 00                                           	mov	byte [ebx-5],0
00001499: E9 D5 F5 FF FF                                        	jmp	missing_end_quote
                                                                      backslashed_symbol:
0000149E: 3C 1A                                                 	cmp	al,1Ah
000014A0: 0F 84 E2 F5 FF FF                                     	je	extra_characters_on_line
000014A6: 08 C0                                                 	or	al,al
000014A8: 0F 84 DA F5 FF FF                                     	jz	extra_characters_on_line
000014AE: 3C 0A                                                 	cmp	al,0Ah
000014B0: 0F 84 D2 F5 FF FF                                     	je	extra_characters_on_line
000014B6: 3C 0D                                                 	cmp	al,0Dh
000014B8: 0F 84 CA F5 FF FF                                     	je	extra_characters_on_line
000014BE: 3C 20                                                 	cmp	al,20h
000014C0: 0F 84 C2 F5 FF FF                                     	je	extra_characters_on_line
000014C6: 3C 09                                                 	cmp	al,9
000014C8: 0F 84 BA F5 FF FF                                     	je	extra_characters_on_line
000014CE: 3C 22                                                 	cmp	al,22h
000014D0: 0F 84 B2 F5 FF FF                                     	je	extra_characters_on_line
000014D6: 3C 27                                                 	cmp	al,27h
000014D8: 0F 84 AA F5 FF FF                                     	je	extra_characters_on_line
000014DE: 3C 3B                                                 	cmp	al,3Bh
000014E0: 0F 84 A2 F5 FF FF                                     	je	extra_characters_on_line
000014E6: 88 C4                                                 	mov	ah,al
000014E8: BB C7 A2 01 00                                        	mov	ebx,characters
000014ED: D7                                                    	xlat	byte [ebx]
000014EE: 08 C0                                                 	or	al,al
000014F0: 74 17                                                 	jz	backslashed_symbol_character
000014F2: 88 E0                                                 	mov	al,ah
                                                                      convert_backslashed_symbol:
000014F4: AA                                                    	stos	byte [edi]
000014F5: D7                                                    	xlat	byte [ebx]
000014F6: 08 C0                                                 	or	al,al
000014F8: 0F 84 B6 FE FF FF                                     	jz	found_separator
000014FE: FE 01                                                 	inc	byte [ecx]
00001500: 0F 84 51 F5 FF FF                                     	jz	name_too_long
00001506: AC                                                    	lods	byte [esi]
00001507: EB EB                                                 	jmp	convert_backslashed_symbol
                                                                      backslashed_symbol_character:
00001509: 88 E0                                                 	mov	al,ah
0000150B: AA                                                    	stos	byte [edi]
0000150C: FE 01                                                 	inc	byte [ecx]
0000150E: E9 43 FE FF FF                                        	jmp	convert_line_data
                                                                      concatenate_lines:
00001513: AC                                                    	lods	byte [esi]
00001514: 3C 20                                                 	cmp	al,20h
00001516: 74 FB                                                 	je	concatenate_lines
00001518: 3C 09                                                 	cmp	al,9
0000151A: 74 F7                                                 	je	concatenate_lines
0000151C: 3C 1A                                                 	cmp	al,1Ah
0000151E: 74 56                                                 	je	line_end
00001520: 08 C0                                                 	or	al,al
00001522: 74 52                                                 	jz	line_end
00001524: 3C 0A                                                 	cmp	al,0Ah
00001526: 74 1F                                                 	je	concatenate_lf
00001528: 3C 0D                                                 	cmp	al,0Dh
0000152A: 74 23                                                 	je	concatenate_cr
0000152C: 3C 3B                                                 	cmp	al,3Bh
0000152E: 0F 85 54 F5 FF FF                                     	jne	extra_characters_on_line
                                                                      find_concatenated_line:
00001534: AC                                                    	lods	byte [esi]
00001535: 3C 0A                                                 	cmp	al,0Ah
00001537: 74 0E                                                 	je	concatenate_lf
00001539: 3C 0D                                                 	cmp	al,0Dh
0000153B: 74 12                                                 	je	concatenate_cr
0000153D: 08 C0                                                 	or	al,al
0000153F: 74 14                                                 	jz	concatenate_ok
00001541: 3C 1A                                                 	cmp	al,1Ah
00001543: 75 EF                                                 	jne	find_concatenated_line
00001545: EB 2F                                                 	jmp	line_end
                                                                      concatenate_lf:
00001547: AC                                                    	lods	byte [esi]
00001548: 3C 0D                                                 	cmp	al,0Dh
0000154A: 74 09                                                 	je	concatenate_ok
0000154C: 4E                                                    	dec	esi
0000154D: EB 06                                                 	jmp	concatenate_ok
                                                                      concatenate_cr:
0000154F: AC                                                    	lods	byte [esi]
00001550: 3C 0A                                                 	cmp	al,0Ah
00001552: 74 01                                                 	je	concatenate_ok
00001554: 4E                                                    	dec	esi
                                                                      concatenate_ok:
00001555: FF 04 24                                              	inc	dword [esp]
00001558: E9 F9 FD FF FF                                        	jmp	convert_line_data
                                                                      ignore_comment:
0000155D: AC                                                    	lods	byte [esi]
0000155E: 3C 0A                                                 	cmp	al,0Ah
00001560: 0F 84 8A FE FF FF                                     	je	lf_character
00001566: 3C 0D                                                 	cmp	al,0Dh
00001568: 0F 84 91 FE FF FF                                     	je	cr_character
0000156E: 08 C0                                                 	or	al,al
00001570: 74 04                                                 	jz	line_end
00001572: 3C 1A                                                 	cmp	al,1Ah
00001574: 75 E7                                                 	jne	ignore_comment
                                                                      line_end:
00001576: 30 C0                                                 	xor	al,al
00001578: AA                                                    	stos	byte [edi]
00001579: 59                                                    	pop	ecx
0000157A: C3                                                    	ret
                                                                
                                                                lower_case:
0000157B: BF C7 A3 01 00                                        	mov	edi,converted
00001580: BB C7 A2 01 00                                        	mov	ebx,characters
                                                                      convert_case:
00001585: AC                                                    	lods	byte [esi]
00001586: D7                                                    	xlat	byte [ebx]
00001587: AA                                                    	stos	byte [edi]
00001588: E2 FB                                                 	loop	convert_case
                                                                      case_ok:
0000158A: C3                                                    	ret
                                                                
                                                                get_directive:
0000158B: 57                                                    	push	edi
0000158C: 89 F2                                                 	mov	edx,esi
0000158E: 89 CD                                                 	mov	ebp,ecx
00001590: E8 E6 FF FF FF                                        	call	lower_case
00001595: 5F                                                    	pop	edi
                                                                      scan_directives:
00001596: BE C7 A3 01 00                                        	mov	esi,converted
0000159B: 0F B6 07                                              	movzx	eax,byte [edi]
0000159E: 08 C0                                                 	or	al,al
000015A0: 74 20                                                 	jz	no_directive
000015A2: 89 E9                                                 	mov	ecx,ebp
000015A4: 47                                                    	inc	edi
000015A5: 89 FB                                                 	mov	ebx,edi
000015A7: 01 C3                                                 	add	ebx,eax
000015A9: 8A 26                                                 	mov	ah,[esi]
000015AB: 3A 27                                                 	cmp	ah,[edi]
000015AD: 72 13                                                 	jb	no_directive
000015AF: 77 0A                                                 	ja	next_directive
000015B1: 38 C1                                                 	cmp	cl,al
000015B3: 75 06                                                 	jne	next_directive
000015B5: F3 A6                                                 	repe	cmps byte [esi],[edi]
000015B7: 72 09                                                 	jb	no_directive
000015B9: 74 0D                                                 	je	directive_found
                                                                      next_directive:
000015BB: 89 DF                                                 	mov	edi,ebx
000015BD: 83 C7 02                                              	add	edi,2
000015C0: EB D4                                                 	jmp	scan_directives
                                                                      no_directive:
000015C2: 89 D6                                                 	mov	esi,edx
000015C4: 89 E9                                                 	mov	ecx,ebp
000015C6: F9                                                    	stc
000015C7: C3                                                    	ret
                                                                      directive_found:
000015C8: E8 0A 00 00 00                                        	call	get_directive_handler_base
                                                                      directive_handler:
000015CD: 8D 34 2A                                              	lea	esi,[edx+ebp]
000015D0: 0F B7 0B                                              	movzx	ecx,word [ebx]
000015D3: 01 C8                                                 	add	eax,ecx
000015D5: F8                                                    	clc
000015D6: C3                                                    	ret
                                                                      get_directive_handler_base:
000015D7: 8B 04 24                                              	mov	eax,[esp]
000015DA: C3                                                    	ret
                                                                
                                                                preprocess_line:
000015DB: 89 E0                                                 	mov	eax,esp
000015DD: 2B 05 3C A1 01 00                                     	sub	eax,[stack_limit]
000015E3: 3D 00 01 00 00                                        	cmp	eax,100h
000015E8: 0F 82 AE F2 FF FF                                     	jb	stack_overflow
000015EE: 51 56                                                 	push	ecx esi
                                                                      preprocess_current_line:
000015F0: 8B 35 74 A1 01 00                                     	mov	esi,[current_line]
000015F6: 83 C6 10                                              	add	esi,16
000015F9: 66 83 3E 3B                                           	cmp	word [esi],3Bh
000015FD: 75 03                                                 	jne	line_start_ok
000015FF: 83 C6 02                                              	add	esi,2
                                                                      line_start_ok:
00001602: F6 05 C1 A2 01 00 F0                                  	test	[macro_status],0F0h
00001609: 75 41                                                 	jnz	macro_preprocessing
0000160B: 80 3E 1A                                              	cmp	byte [esi],1Ah
0000160E: 75 35                                                 	jne	not_fix_constant
00001610: 0F B6 56 01                                           	movzx	edx,byte [esi+1]
00001614: 8D 54 16 02                                           	lea	edx,[esi+2+edx]
00001618: 66 81 3A 1A 03                                        	cmp	word [edx],031Ah
0000161D: 75 26                                                 	jne	not_fix_constant
0000161F: BB C7 A2 01 00                                        	mov	ebx,characters
00001624: 0F B6 42 02                                           	movzx	eax,byte [edx+2]
00001628: D7                                                    	xlat	byte [ebx]
00001629: C1 C8 08                                              	ror	eax,8
0000162C: 8A 42 03                                              	mov	al,[edx+3]
0000162F: D7                                                    	xlat	byte [ebx]
00001630: C1 C8 08                                              	ror	eax,8
00001633: 8A 42 04                                              	mov	al,[edx+4]
00001636: D7                                                    	xlat	byte [ebx]
00001637: C1 C8 10                                              	ror	eax,16
0000163A: 3D 66 69 78 00                                        	cmp	eax,'fix'
0000163F: 0F 84 DD 03 00 00                                     	je	define_fix_constant
                                                                      not_fix_constant:
00001645: E8 7E 07 00 00                                        	call	process_fix_constants
0000164A: EB 05                                                 	jmp	initial_preprocessing_ok
                                                                      macro_preprocessing:
0000164C: E8 F5 08 00 00                                        	call	process_macro_operators
                                                                      initial_preprocessing_ok:
00001651: 8B 35 74 A1 01 00                                     	mov	esi,[current_line]
00001657: 83 C6 10                                              	add	esi,16
0000165A: A0 C1 A2 01 00                                        	mov	al,[macro_status]
0000165F: A8 02                                                 	test	al,2
00001661: 0F 85 98 05 00 00                                     	jnz	skip_macro_block
00001667: A8 01                                                 	test	al,1
00001669: 0F 85 75 05 00 00                                     	jnz	find_macro_block
                                                                      preprocess_instruction:
0000166F: 89 35 F0 A1 01 00                                     	mov	[current_offset],esi
00001675: AC                                                    	lods	byte [esi]
00001676: 0F B6 0E                                              	movzx	ecx,byte [esi]
00001679: 46                                                    	inc	esi
0000167A: 3C 1A                                                 	cmp	al,1Ah
0000167C: 0F 85 C4 01 00 00                                     	jne	not_preprocessor_symbol
00001682: 80 F9 03                                              	cmp	cl,3
00001685: 72 14                                                 	jb	not_preprocessor_directive
00001687: 57                                                    	push	edi
00001688: BF BC 44 01 00                                        	mov	edi,preprocessor_directives
0000168D: E8 F9 FE FF FF                                        	call	get_directive
00001692: 5F                                                    	pop	edi
00001693: 72 06                                                 	jc	not_preprocessor_directive
00001695: C6 42 FE 3B                                           	mov	byte [edx-2],3Bh
00001699: FF E0                                                 	jmp	near eax
                                                                      not_preprocessor_directive:
0000169B: 30 ED                                                 	xor	ch,ch
0000169D: E8 B2 01 00 00                                        	call	get_preprocessor_symbol
000016A2: 72 13                                                 	jc	not_macro
000016A4: C6 43 FE 3B                                           	mov	byte [ebx-2],3Bh
000016A8: C7 05 8C A1 01 00 00 00 00 00                         	mov	[struc_name],0
000016B2: E9 5E 0A 00 00                                        	jmp	use_macro
                                                                      not_macro:
000016B7: 89 35 8C A1 01 00                                     	mov	[struc_name],esi
000016BD: 01 CE                                                 	add	esi,ecx
000016BF: AC                                                    	lods	byte [esi]
000016C0: 3C 3A                                                 	cmp	al,':'
000016C2: 0F 84 E8 00 00 00                                     	je	preprocess_label
000016C8: 3C 1A                                                 	cmp	al,1Ah
000016CA: 0F 85 76 01 00 00                                     	jne	not_preprocessor_symbol
000016D0: AC                                                    	lods	byte [esi]
000016D1: 3C 03                                                 	cmp	al,3
000016D3: 75 27                                                 	jne	not_symbolic_constant
000016D5: BB C7 A2 01 00                                        	mov	ebx,characters
000016DA: 0F B6 06                                              	movzx	eax,byte [esi]
000016DD: D7                                                    	xlat	byte [ebx]
000016DE: C1 C8 08                                              	ror	eax,8
000016E1: 8A 46 01                                              	mov	al,[esi+1]
000016E4: D7                                                    	xlat	byte [ebx]
000016E5: C1 C8 08                                              	ror	eax,8
000016E8: 8A 46 02                                              	mov	al,[esi+2]
000016EB: D7                                                    	xlat	byte [ebx]
000016EC: C1 C8 10                                              	ror	eax,16
000016EF: 3D 65 71 75 00                                        	cmp	eax,'equ'
000016F4: 0F 84 33 03 00 00                                     	je	define_equ_constant
000016FA: B0 03                                                 	mov	al,3
                                                                      not_symbolic_constant:
000016FC: B5 01                                                 	mov	ch,1
000016FE: 88 C1                                                 	mov	cl,al
00001700: E8 4F 01 00 00                                        	call	get_preprocessor_symbol
00001705: 0F 82 3B 01 00 00                                     	jc	not_preprocessor_symbol
0000170B: 52 56                                                 	push	edx esi
0000170D: 8B 35 8C A1 01 00                                     	mov	esi,[struc_name]
00001713: 89 35 90 A1 01 00                                     	mov	[struc_label],esi
00001719: 83 2D 90 A1 01 00 02                                  	sub	[struc_label],2
00001720: 8A 4E FF                                              	mov	cl,[esi-1]
00001723: B5 02                                                 	mov	ch,10b
00001725: E8 2A 01 00 00                                        	call	get_preprocessor_symbol
0000172A: 72 59                                                 	jc	struc_name_ok
0000172C: 85 D2                                                 	test	edx,edx
0000172E: 0F 84 31 F3 FF FF                                     	jz	reserved_word_used_as_symbol
00001734: 8B 4A 0C                                              	mov	ecx,[edx+12]
00001737: 83 C1 03                                              	add	ecx,3
0000173A: 8D 1C 0F                                              	lea	ebx,[edi+ecx]
0000173D: 89 F9                                                 	mov	ecx,edi
0000173F: 2B 0D 90 A1 01 00                                     	sub	ecx,[struc_label]
00001745: 8D 77 FF                                              	lea	esi,[edi-1]
00001748: 8D 7B FF                                              	lea	edi,[ebx-1]
0000174B: FD                                                    	std
0000174C: F3 A4                                                 	rep	movs byte [edi],[esi]
0000174E: FC                                                    	cld
0000174F: 8B 3D 90 A1 01 00                                     	mov	edi,[struc_label]
00001755: 8B 72 08                                              	mov	esi,[edx+8]
00001758: 8B 4A 0C                                              	mov	ecx,[edx+12]
0000175B: 01 0D 8C A1 01 00                                     	add	[struc_name],ecx
00001761: 83 05 8C A1 01 00 03                                  	add	[struc_name],3
00001768: E8 E3 06 00 00                                        	call	move_data
0000176D: B0 3A                                                 	mov	al,3Ah
0000176F: AA                                                    	stos	byte [edi]
00001770: 66 B8 3B 00                                           	mov	ax,3Bh
00001774: 66 AB                                                 	stos	word [edi]
00001776: 89 DF                                                 	mov	edi,ebx
00001778: 5E                                                    	pop	esi
00001779: 03 72 0C                                              	add	esi,[edx+12]
0000177C: 83 C6 03                                              	add	esi,3
0000177F: 5A                                                    	pop	edx
00001780: E9 90 09 00 00                                        	jmp	use_macro
                                                                      struc_name_ok:
00001785: 8B 15 8C A1 01 00                                     	mov	edx,[struc_name]
0000178B: 0F B6 42 FF                                           	movzx	eax,byte [edx-1]
0000178F: 01 C2                                                 	add	edx,eax
00001791: 57                                                    	push	edi
00001792: 8D 77 FF                                              	lea	esi,[edi-1]
00001795: 89 F9                                                 	mov	ecx,edi
00001797: 29 D1                                                 	sub	ecx,edx
00001799: FD                                                    	std
0000179A: F3 A4                                                 	rep	movs byte [edi],[esi]
0000179C: FC                                                    	cld
0000179D: 5F                                                    	pop	edi
0000179E: 47                                                    	inc	edi
0000179F: B0 3A                                                 	mov	al,3Ah
000017A1: 88 02                                                 	mov	[edx],al
000017A3: FE C0                                                 	inc	al
000017A5: 88 42 01                                              	mov	[edx+1],al
000017A8: 5E 5A                                                 	pop	esi edx
000017AA: 46                                                    	inc	esi
000017AB: E9 65 09 00 00                                        	jmp	use_macro
                                                                      preprocess_label:
000017B0: 4E                                                    	dec	esi
000017B1: 29 CE                                                 	sub	esi,ecx
000017B3: 8D 6E FE                                              	lea	ebp,[esi-2]
000017B6: B5 02                                                 	mov	ch,10b
000017B8: E8 97 00 00 00                                        	call	get_preprocessor_symbol
000017BD: 73 13                                                 	jnc	symbolic_constant_in_label
000017BF: 8D 74 0E 01                                           	lea	esi,[esi+ecx+1]
000017C3: 80 3E 3A                                              	cmp	byte [esi],':'
000017C6: 0F 85 A3 FE FF FF                                     	jne	preprocess_instruction
000017CC: 46                                                    	inc	esi
000017CD: E9 9D FE FF FF                                        	jmp	preprocess_instruction
                                                                      symbolic_constant_in_label:
000017D2: 85 D2                                                 	test	edx,edx
000017D4: 0F 84 8B F2 FF FF                                     	jz	reserved_word_used_as_symbol
000017DA: 8B 5A 08                                              	mov	ebx,[edx+8]
000017DD: 8B 4A 0C                                              	mov	ecx,[edx+12]
000017E0: 01 D9                                                 	add	ecx,ebx
                                                                      check_for_broken_label:
000017E2: 39 CB                                                 	cmp	ebx,ecx
000017E4: 74 1F                                                 	je	label_broken
000017E6: 80 3B 1A                                              	cmp	byte [ebx],1Ah
000017E9: 75 1A                                                 	jne	label_broken
000017EB: 0F B6 43 01                                           	movzx	eax,byte [ebx+1]
000017EF: 8D 5C 03 02                                           	lea	ebx,[ebx+2+eax]
000017F3: 39 CB                                                 	cmp	ebx,ecx
000017F5: 74 15                                                 	je	label_constant_ok
000017F7: 80 3B 3A                                              	cmp	byte [ebx],':'
000017FA: 75 09                                                 	jne	label_broken
000017FC: 43                                                    	inc	ebx
000017FD: 80 3B 3A                                              	cmp	byte [ebx],':'
00001800: 75 E0                                                 	jne	check_for_broken_label
00001802: 43                                                    	inc	ebx
00001803: EB DD                                                 	jmp	check_for_broken_label
                                                                      label_broken:
00001805: E8 0F 06 00 00                                        	call	replace_symbolic_constant
0000180A: EB 45                                                 	jmp	line_preprocessed
                                                                      label_constant_ok:
0000180C: 89 F9                                                 	mov	ecx,edi
0000180E: 29 F1                                                 	sub	ecx,esi
00001810: 8B 7A 0C                                              	mov	edi,[edx+12]
00001813: 01 EF                                                 	add	edi,ebp
00001815: 57                                                    	push	edi
00001816: 8D 04 0F                                              	lea	eax,[edi+ecx]
00001819: 50                                                    	push	eax
0000181A: 39 FE                                                 	cmp	esi,edi
0000181C: 74 12                                                 	je	replace_label
0000181E: 72 04                                                 	jb	move_rest_of_line_up
00001820: F3 A4                                                 	rep	movs byte [edi],[esi]
00001822: EB 0C                                                 	jmp	replace_label
                                                                      move_rest_of_line_up:
00001824: 8D 74 0E FF                                           	lea	esi,[esi+ecx-1]
00001828: 8D 7C 0F FF                                           	lea	edi,[edi+ecx-1]
0000182C: FD                                                    	std
0000182D: F3 A4                                                 	rep	movs byte [edi],[esi]
0000182F: FC                                                    	cld
                                                                      replace_label:
00001830: 8B 4A 0C                                              	mov	ecx,[edx+12]
00001833: 8B 7C 24 04                                           	mov	edi,[esp+4]
00001837: 29 CF                                                 	sub	edi,ecx
00001839: 8B 72 08                                              	mov	esi,[edx+8]
0000183C: F3 A4                                                 	rep	movs byte [edi],[esi]
0000183E: 5F 5E                                                 	pop	edi esi
00001840: 46                                                    	inc	esi
00001841: E9 29 FE FF FF                                        	jmp	preprocess_instruction
                                                                      not_preprocessor_symbol:
00001846: 8B 35 F0 A1 01 00                                     	mov	esi,[current_offset]
0000184C: E8 80 05 00 00                                        	call	process_equ_constants
                                                                      line_preprocessed:
00001851: 5E 59                                                 	pop	esi ecx
00001853: C3                                                    	ret
                                                                
                                                                get_preprocessor_symbol:
00001854: 55 57 56                                              	push	ebp edi esi
00001857: 89 CD                                                 	mov	ebp,ecx
00001859: C1 E5 16                                              	shl	ebp,22
0000185C: 88 E8                                                 	mov	al,ch
0000185E: 24 03                                                 	and	al,11b
00001860: 0F B6 C9                                              	movzx	ecx,cl
00001863: 3C 02                                                 	cmp	al,10b
00001865: 75 36                                                 	jne	no_preprocessor_special_symbol
00001867: 80 F9 04                                              	cmp	cl,4
0000186A: 76 31                                                 	jbe	no_preprocessor_special_symbol
0000186C: 66 B8 5F 5F                                           	mov	ax,'__'
00001870: 66 3B 06                                              	cmp	ax,[esi]
00001873: 75 28                                                 	jne	no_preprocessor_special_symbol
00001875: 66 3B 44 0E FE                                        	cmp	ax,[esi+ecx-2]
0000187A: 75 21                                                 	jne	no_preprocessor_special_symbol
0000187C: 83 C6 02                                              	add	esi,2
0000187F: 83 E9 04                                              	sub	ecx,4
00001882: 55                                                    	push	ebp
00001883: BF 50 45 01 00                                        	mov	edi,preprocessor_special_symbols
00001888: E8 FE FC FF FF                                        	call	get_directive
0000188D: 5D                                                    	pop	ebp
0000188E: 72 07                                                 	jc	preprocessor_special_symbol_not_recognized
00001890: 83 C6 02                                              	add	esi,2
00001893: 31 D2                                                 	xor	edx,edx
00001895: EB 75                                                 	jmp	preprocessor_symbol_found
                                                                      preprocessor_special_symbol_not_recognized:
00001897: 83 C1 04                                              	add	ecx,4
0000189A: 83 EE 02                                              	sub	esi,2
                                                                      no_preprocessor_special_symbol:
0000189D: BB C0 A1 01 00                                        	mov	ebx,hash_tree
000018A2: BF 0A 00 00 00                                        	mov	edi,10
                                                                      follow_hashes_roots:
000018A7: 8B 13                                                 	mov	edx,[ebx]
000018A9: 09 D2                                                 	or	edx,edx
000018AB: 74 5A                                                 	jz	preprocessor_symbol_not_found
000018AD: 31 C0                                                 	xor	eax,eax
000018AF: D1 E5                                                 	shl	ebp,1
000018B1: 83 D0 00                                              	adc	eax,0
000018B4: 8D 1C 82                                              	lea	ebx,[edx+eax*4]
000018B7: 4F                                                    	dec	edi
000018B8: 75 ED                                                 	jnz	follow_hashes_roots
000018BA: 89 DF                                                 	mov	edi,ebx
000018BC: E8 50 00 00 00                                        	call	calculate_hash
000018C1: 89 C5                                                 	mov	ebp,eax
000018C3: 81 E5 FF 03 00 00                                     	and	ebp,3FFh
000018C9: C1 E5 0A                                              	shl	ebp,10
000018CC: 31 C5                                                 	xor	ebp,eax
000018CE: 89 FB                                                 	mov	ebx,edi
000018D0: BF 16 00 00 00                                        	mov	edi,22
                                                                      follow_hashes_tree:
000018D5: 8B 13                                                 	mov	edx,[ebx]
000018D7: 09 D2                                                 	or	edx,edx
000018D9: 74 2C                                                 	jz	preprocessor_symbol_not_found
000018DB: 31 C0                                                 	xor	eax,eax
000018DD: D1 E5                                                 	shl	ebp,1
000018DF: 83 D0 00                                              	adc	eax,0
000018E2: 8D 1C 82                                              	lea	ebx,[edx+eax*4]
000018E5: 4F                                                    	dec	edi
000018E6: 75 ED                                                 	jnz	follow_hashes_tree
000018E8: 88 C8                                                 	mov	al,cl
000018EA: 8B 13                                                 	mov	edx,[ebx]
000018EC: 09 D2                                                 	or	edx,edx
000018EE: 74 17                                                 	jz	preprocessor_symbol_not_found
                                                                      compare_with_preprocessor_symbol:
000018F0: 8B 7A 04                                              	mov	edi,[edx+4]
000018F3: 83 FF 01                                              	cmp	edi,1
000018F6: 76 09                                                 	jbe	next_equal_hash
000018F8: F3 A6                                                 	repe	cmps byte [esi],[edi]
000018FA: 74 10                                                 	je	preprocessor_symbol_found
000018FC: 88 C1                                                 	mov	cl,al
000018FE: 8B 34 24                                              	mov	esi,[esp]
                                                                      next_equal_hash:
00001901: 8B 12                                                 	mov	edx,[edx]
00001903: 09 D2                                                 	or	edx,edx
00001905: 75 E9                                                 	jnz	compare_with_preprocessor_symbol
                                                                      preprocessor_symbol_not_found:
00001907: 5E 5F 5D                                              	pop	esi edi ebp
0000190A: F9                                                    	stc
0000190B: C3                                                    	ret
                                                                      preprocessor_symbol_found:
0000190C: 5B 5F 5D                                              	pop	ebx edi ebp
0000190F: F8                                                    	clc
00001910: C3                                                    	ret
                                                                      calculate_hash:
00001911: 31 DB                                                 	xor	ebx,ebx
00001913: B8 C5 9D 1C 81                                        	mov	eax,2166136261
00001918: BD 93 01 00 01                                        	mov	ebp,16777619
                                                                      fnv1a_hash:
0000191D: 32 04 1E                                              	xor	al,[esi+ebx]
00001920: F7 E5                                                 	mul	ebp
00001922: FE C3                                                 	inc	bl
00001924: 38 CB                                                 	cmp	bl,cl
00001926: 72 F5                                                 	jb	fnv1a_hash
00001928: C3                                                    	ret
                                                                add_preprocessor_symbol:
00001929: 57 56                                                 	push	edi esi
0000192B: 31 C0                                                 	xor	eax,eax
0000192D: 08 C9                                                 	or	cl,cl
0000192F: 74 1F                                                 	jz	reshape_hash
00001931: 80 FD 03                                              	cmp	ch,11b
00001934: 74 15                                                 	je	preprocessor_symbol_name_ok
00001936: 51                                                    	push	ecx
00001937: 0F B6 C9                                              	movzx	ecx,cl
0000193A: BF BC 44 01 00                                        	mov	edi,preprocessor_directives
0000193F: E8 47 FC FF FF                                        	call	get_directive
00001944: 0F 83 1B F1 FF FF                                     	jnc	reserved_word_used_as_symbol
0000194A: 59                                                    	pop	ecx
                                                                      preprocessor_symbol_name_ok:
0000194B: E8 C1 FF FF FF                                        	call	calculate_hash
                                                                      reshape_hash:
00001950: 89 C5                                                 	mov	ebp,eax
00001952: 81 E5 FF 03 00 00                                     	and	ebp,3FFh
00001958: C1 E8 0A                                              	shr	eax,10
0000195B: 31 C5                                                 	xor	ebp,eax
0000195D: C1 E1 16                                              	shl	ecx,22
00001960: 09 CD                                                 	or	ebp,ecx
00001962: BB C0 A1 01 00                                        	mov	ebx,hash_tree
00001967: B9 20 00 00 00                                        	mov	ecx,32
                                                                      find_leave_for_symbol:
0000196C: 8B 13                                                 	mov	edx,[ebx]
0000196E: 09 D2                                                 	or	edx,edx
00001970: 74 58                                                 	jz	extend_hashes_tree
00001972: 31 C0                                                 	xor	eax,eax
00001974: D1 C5                                                 	rol	ebp,1
00001976: 83 D0 00                                              	adc	eax,0
00001979: 8D 1C 82                                              	lea	ebx,[edx+eax*4]
0000197C: 49                                                    	dec	ecx
0000197D: 75 ED                                                 	jnz	find_leave_for_symbol
0000197F: 8B 13                                                 	mov	edx,[ebx]
00001981: 09 D2                                                 	or	edx,edx
00001983: 74 1E                                                 	jz	add_symbol_entry
00001985: C1 ED 1E                                              	shr	ebp,30
00001988: 83 FD 03                                              	cmp	ebp,11b
0000198B: 74 37                                                 	je	reuse_symbol_entry
0000198D: 83 7A 04 00                                           	cmp	dword [edx+4],0
00001991: 75 10                                                 	jne	add_symbol_entry
                                                                      find_entry_to_reuse:
00001993: 8B 3A                                                 	mov	edi,[edx]
00001995: 09 FF                                                 	or	edi,edi
00001997: 74 2B                                                 	jz	reuse_symbol_entry
00001999: 83 7F 04 00                                           	cmp	dword [edi+4],0
0000199D: 75 25                                                 	jne	reuse_symbol_entry
0000199F: 89 FA                                                 	mov	edx,edi
000019A1: EB F0                                                 	jmp	find_entry_to_reuse
                                                                      add_symbol_entry:
000019A3: 89 D0                                                 	mov	eax,edx
000019A5: 8B 15 B4 A1 01 00                                     	mov	edx,[labels_list]
000019AB: 83 EA 10                                              	sub	edx,16
000019AE: 3B 15 58 A1 01 00                                     	cmp	edx,[free_additional_memory]
000019B4: 0F 82 D8 EE FF FF                                     	jb	out_of_memory
000019BA: 89 15 B4 A1 01 00                                     	mov	[labels_list],edx
000019C0: 89 02                                                 	mov	[edx],eax
000019C2: 89 13                                                 	mov	[ebx],edx
                                                                      reuse_symbol_entry:
000019C4: 5E 5F                                                 	pop	esi edi
000019C6: 89 72 04                                              	mov	[edx+4],esi
000019C9: C3                                                    	ret
                                                                      extend_hashes_tree:
000019CA: 8B 15 B4 A1 01 00                                     	mov	edx,[labels_list]
000019D0: 83 EA 08                                              	sub	edx,8
000019D3: 3B 15 58 A1 01 00                                     	cmp	edx,[free_additional_memory]
000019D9: 0F 82 B3 EE FF FF                                     	jb	out_of_memory
000019DF: 89 15 B4 A1 01 00                                     	mov	[labels_list],edx
000019E5: 31 C0                                                 	xor	eax,eax
000019E7: 89 02                                                 	mov	[edx],eax
000019E9: 89 42 04                                              	mov	[edx+4],eax
000019EC: D1 E5                                                 	shl	ebp,1
000019EE: 83 D0 00                                              	adc	eax,0
000019F1: 89 13                                                 	mov	[ebx],edx
000019F3: 8D 1C 82                                              	lea	ebx,[edx+eax*4]
000019F6: 49                                                    	dec	ecx
000019F7: 75 D1                                                 	jnz	extend_hashes_tree
000019F9: 8B 15 B4 A1 01 00                                     	mov	edx,[labels_list]
000019FF: 83 EA 10                                              	sub	edx,16
00001A02: 3B 15 58 A1 01 00                                     	cmp	edx,[free_additional_memory]
00001A08: 0F 82 84 EE FF FF                                     	jb	out_of_memory
00001A0E: 89 15 B4 A1 01 00                                     	mov	[labels_list],edx
00001A14: C7 02 00 00 00 00                                     	mov	dword [edx],0
00001A1A: 89 13                                                 	mov	[ebx],edx
00001A1C: 5E 5F                                                 	pop	esi edi
00001A1E: 89 72 04                                              	mov	[edx+4],esi
00001A21: C3                                                    	ret
                                                                
                                                                define_fix_constant:
00001A22: 83 C2 05                                              	add	edx,5
00001A25: 83 C6 02                                              	add	esi,2
00001A28: 52                                                    	push	edx
00001A29: B5 03                                                 	mov	ch,11b
00001A2B: EB 11                                                 	jmp	define_preprocessor_constant
                                                                define_equ_constant:
00001A2D: 83 C6 03                                              	add	esi,3
00001A30: 56                                                    	push	esi
00001A31: E8 9B 03 00 00                                        	call	process_equ_constants
00001A36: 8B 35 8C A1 01 00                                     	mov	esi,[struc_name]
00001A3C: B5 02                                                 	mov	ch,10b
                                                                      define_preprocessor_constant:
00001A3E: C6 46 FE 3B                                           	mov	byte [esi-2],3Bh
00001A42: 8A 4E FF                                              	mov	cl,[esi-1]
00001A45: E8 DF FE FF FF                                        	call	add_preprocessor_symbol
00001A4A: 5B                                                    	pop	ebx
00001A4B: 89 F9                                                 	mov	ecx,edi
00001A4D: 49                                                    	dec	ecx
00001A4E: 29 D9                                                 	sub	ecx,ebx
00001A50: 89 5A 08                                              	mov	[edx+8],ebx
00001A53: 89 4A 0C                                              	mov	[edx+12],ecx
00001A56: E9 F6 FD FF FF                                        	jmp	line_preprocessed
                                                                define_symbolic_constant:
00001A5B: AC                                                    	lods	byte [esi]
00001A5C: 3C 1A                                                 	cmp	al,1Ah
00001A5E: 0F 85 FA EF FF FF                                     	jne	invalid_name
00001A64: AC                                                    	lods	byte [esi]
00001A65: 88 C1                                                 	mov	cl,al
00001A67: B5 02                                                 	mov	ch,10b
00001A69: E8 BB FE FF FF                                        	call	add_preprocessor_symbol
00001A6E: 0F B6 46 FF                                           	movzx	eax,byte [esi-1]
00001A72: 01 C6                                                 	add	esi,eax
00001A74: 8D 4F FF                                              	lea	ecx,[edi-1]
00001A77: 29 F1                                                 	sub	ecx,esi
00001A79: 89 72 08                                              	mov	[edx+8],esi
00001A7C: 89 4A 0C                                              	mov	[edx+12],ecx
00001A7F: E9 CD FD FF FF                                        	jmp	line_preprocessed
                                                                
                                                                define_struc:
00001A84: B5 01                                                 	mov	ch,1
00001A86: EB 02                                                 	jmp	make_macro
                                                                define_macro:
00001A88: 30 ED                                                 	xor	ch,ch
                                                                      make_macro:
00001A8A: AC                                                    	lods	byte [esi]
00001A8B: 3C 1A                                                 	cmp	al,1Ah
00001A8D: 0F 85 CB EF FF FF                                     	jne	invalid_name
00001A93: AC                                                    	lods	byte [esi]
00001A94: 88 C1                                                 	mov	cl,al
00001A96: E8 8E FE FF FF                                        	call	add_preprocessor_symbol
00001A9B: A1 74 A1 01 00                                        	mov	eax,[current_line]
00001AA0: 89 42 0C                                              	mov	[edx+12],eax
00001AA3: 0F B6 46 FF                                           	movzx	eax,byte [esi-1]
00001AA7: 01 C6                                                 	add	esi,eax
00001AA9: 89 72 08                                              	mov	[edx+8],esi
00001AAC: A0 C1 A2 01 00                                        	mov	al,[macro_status]
00001AB1: 24 F0                                                 	and	al,0F0h
00001AB3: 0C 01                                                 	or	al,1
00001AB5: A2 C1 A2 01 00                                        	mov	[macro_status],al
00001ABA: A1 74 A1 01 00                                        	mov	eax,[current_line]
00001ABF: A3 DC A1 01 00                                        	mov	[error_line],eax
00001AC4: 31 ED                                                 	xor	ebp,ebp
00001AC6: AC                                                    	lods	byte [esi]
00001AC7: 08 C0                                                 	or	al,al
00001AC9: 0F 84 82 FD FF FF                                     	jz	line_preprocessed
00001ACF: 3C 7B                                                 	cmp	al,'{'
00001AD1: 0F 84 21 01 00 00                                     	je	found_macro_block
00001AD7: 4E                                                    	dec	esi
                                                                      skip_macro_arguments:
00001AD8: AC                                                    	lods	byte [esi]
00001AD9: 3C 1A                                                 	cmp	al,1Ah
00001ADB: 74 1A                                                 	je	skip_macro_argument
00001ADD: 3C 5B                                                 	cmp	al,'['
00001ADF: 0F 85 1D EE FF FF                                     	jne	invalid_macro_arguments
00001AE5: 83 CD FF                                              	or	ebp,-1
00001AE8: 0F 84 14 EE FF FF                                     	jz	invalid_macro_arguments
00001AEE: AC                                                    	lods	byte [esi]
00001AEF: 3C 1A                                                 	cmp	al,1Ah
00001AF1: 0F 85 0B EE FF FF                                     	jne	invalid_macro_arguments
                                                                      skip_macro_argument:
00001AF7: 0F B6 06                                              	movzx	eax,byte [esi]
00001AFA: 46                                                    	inc	esi
00001AFB: 01 C6                                                 	add	esi,eax
00001AFD: AC                                                    	lods	byte [esi]
00001AFE: 3C 3A                                                 	cmp	al,':'
00001B00: 74 35                                                 	je	macro_argument_with_default_value
00001B02: 3C 3D                                                 	cmp	al,'='
00001B04: 74 31                                                 	je	macro_argument_with_default_value
00001B06: 3C 2A                                                 	cmp	al,'*'
00001B08: 75 01                                                 	jne	macro_argument_end
00001B0A: AC                                                    	lods	byte [esi]
                                                                      macro_argument_end:
00001B0B: 3C 2C                                                 	cmp	al,','
00001B0D: 74 C9                                                 	je	skip_macro_arguments
00001B0F: 3C 26                                                 	cmp	al,'&'
00001B11: 74 06                                                 	je	macro_arguments_finisher
00001B13: 3C 5D                                                 	cmp	al,']'
00001B15: 75 03                                                 	jne	end_macro_arguments
00001B17: F7 D5                                                 	not	ebp
                                                                      macro_arguments_finisher:
00001B19: AC                                                    	lods	byte [esi]
                                                                      end_macro_arguments:
00001B1A: 09 ED                                                 	or	ebp,ebp
00001B1C: 0F 85 E0 ED FF FF                                     	jnz	invalid_macro_arguments
00001B22: 08 C0                                                 	or	al,al
00001B24: 0F 84 27 FD FF FF                                     	jz	line_preprocessed
00001B2A: 3C 7B                                                 	cmp	al,'{'
00001B2C: 0F 84 C6 00 00 00                                     	je	found_macro_block
00001B32: E9 CB ED FF FF                                        	jmp	invalid_macro_arguments
                                                                      macro_argument_with_default_value:
00001B37: 80 0D C2 A2 01 00 FF                                  	or	[skip_default_argument_value],-1
00001B3E: E8 03 00 00 00                                        	call	skip_macro_argument_value
00001B43: 46                                                    	inc	esi
00001B44: EB C5                                                 	jmp	macro_argument_end
                                                                      skip_macro_argument_value:
00001B46: 80 3E 3C                                              	cmp	byte [esi],'<'
00001B49: 75 60                                                 	jne	simple_argument
00001B4B: B9 01 00 00 00                                        	mov	ecx,1
00001B50: 46                                                    	inc	esi
                                                                      enclosed_argument:
00001B51: AC                                                    	lods	byte [esi]
00001B52: 08 C0                                                 	or	al,al
00001B54: 0F 84 A8 ED FF FF                                     	jz	invalid_macro_arguments
00001B5A: 3C 1A                                                 	cmp	al,1Ah
00001B5C: 74 0F                                                 	je	enclosed_symbol
00001B5E: 3C 22                                                 	cmp	al,22h
00001B60: 74 13                                                 	je	enclosed_string
00001B62: 3C 3E                                                 	cmp	al,'>'
00001B64: 74 14                                                 	je	enclosed_argument_end
00001B66: 3C 3C                                                 	cmp	al,'<'
00001B68: 75 E7                                                 	jne	enclosed_argument
00001B6A: 41                                                    	inc	ecx
00001B6B: EB E4                                                 	jmp	enclosed_argument
                                                                      enclosed_symbol:
00001B6D: 0F B6 06                                              	movzx	eax,byte [esi]
00001B70: 46                                                    	inc	esi
00001B71: 01 C6                                                 	add	esi,eax
00001B73: EB DC                                                 	jmp	enclosed_argument
                                                                      enclosed_string:
00001B75: AD                                                    	lods	dword [esi]
00001B76: 01 C6                                                 	add	esi,eax
00001B78: EB D7                                                 	jmp	enclosed_argument
                                                                      enclosed_argument_end:
00001B7A: E2 D5                                                 	loop	enclosed_argument
00001B7C: AC                                                    	lods	byte [esi]
00001B7D: 08 C0                                                 	or	al,al
00001B7F: 74 61                                                 	jz	argument_value_end
00001B81: 3C 2C                                                 	cmp	al,','
00001B83: 74 5D                                                 	je	argument_value_end
00001B85: 80 3D C2 A2 01 00 00                                  	cmp	[skip_default_argument_value],0
00001B8C: 0F 84 70 ED FF FF                                     	je	invalid_macro_arguments
00001B92: 3C 7B                                                 	cmp	al,'{'
00001B94: 74 4C                                                 	je	argument_value_end
00001B96: 3C 26                                                 	cmp	al,'&'
00001B98: 74 48                                                 	je	argument_value_end
00001B9A: 09 ED                                                 	or	ebp,ebp
00001B9C: 0F 84 60 ED FF FF                                     	jz	invalid_macro_arguments
00001BA2: 3C 5D                                                 	cmp	al,']'
00001BA4: 74 3C                                                 	je	argument_value_end
00001BA6: E9 57 ED FF FF                                        	jmp	invalid_macro_arguments
                                                                      simple_argument:
00001BAB: AC                                                    	lods	byte [esi]
00001BAC: 08 C0                                                 	or	al,al
00001BAE: 74 32                                                 	jz	argument_value_end
00001BB0: 3C 2C                                                 	cmp	al,','
00001BB2: 74 2E                                                 	je	argument_value_end
00001BB4: 3C 22                                                 	cmp	al,22h
00001BB6: 74 25                                                 	je	argument_string
00001BB8: 3C 1A                                                 	cmp	al,1Ah
00001BBA: 74 19                                                 	je	argument_symbol
00001BBC: 80 3D C2 A2 01 00 00                                  	cmp	[skip_default_argument_value],0
00001BC3: 74 E6                                                 	je	simple_argument
00001BC5: 3C 7B                                                 	cmp	al,'{'
00001BC7: 74 19                                                 	je	argument_value_end
00001BC9: 3C 26                                                 	cmp	al,'&'
00001BCB: 74 15                                                 	je	argument_value_end
00001BCD: 09 ED                                                 	or	ebp,ebp
00001BCF: 74 DA                                                 	jz	simple_argument
00001BD1: 3C 5D                                                 	cmp	al,']'
00001BD3: 74 0D                                                 	je	argument_value_end
                                                                      argument_symbol:
00001BD5: 0F B6 06                                              	movzx	eax,byte [esi]
00001BD8: 46                                                    	inc	esi
00001BD9: 01 C6                                                 	add	esi,eax
00001BDB: EB CE                                                 	jmp	simple_argument
                                                                      argument_string:
00001BDD: AD                                                    	lods	dword [esi]
00001BDE: 01 C6                                                 	add	esi,eax
00001BE0: EB C9                                                 	jmp	simple_argument
                                                                      argument_value_end:
00001BE2: 4E                                                    	dec	esi
00001BE3: C3                                                    	ret
                                                                      find_macro_block:
00001BE4: 83 C6 02                                              	add	esi,2
00001BE7: AC                                                    	lods	byte [esi]
00001BE8: 08 C0                                                 	or	al,al
00001BEA: 0F 84 61 FC FF FF                                     	jz	line_preprocessed
00001BF0: 3C 7B                                                 	cmp	al,'{'
00001BF2: 0F 85 1E ED FF FF                                     	jne	unexpected_characters
                                                                      found_macro_block:
00001BF8: 80 0D C1 A2 01 00 02                                  	or	[macro_status],2
                                                                      skip_macro_block:
00001BFF: AC                                                    	lods	byte [esi]
00001C00: 3C 1A                                                 	cmp	al,1Ah
00001C02: 74 64                                                 	je	skip_macro_symbol
00001C04: 3C 3B                                                 	cmp	al,3Bh
00001C06: 74 60                                                 	je	skip_macro_symbol
00001C08: 3C 22                                                 	cmp	al,22h
00001C0A: 74 64                                                 	je	skip_macro_string
00001C0C: 08 C0                                                 	or	al,al
00001C0E: 0F 84 3D FC FF FF                                     	jz	line_preprocessed
00001C14: 3C 7D                                                 	cmp	al,'}'
00001C16: 75 E7                                                 	jne	skip_macro_block
00001C18: A0 C1 A2 01 00                                        	mov	al,[macro_status]
00001C1D: 80 25 C1 A2 01 00 F0                                  	and	[macro_status],0F0h
00001C24: A8 08                                                 	test	al,8
00001C26: 0F 85 5E 06 00 00                                     	jnz	use_instant_macro
00001C2C: 80 3E 00                                              	cmp	byte [esi],0
00001C2F: 0F 84 1C FC FF FF                                     	je	line_preprocessed
00001C35: 89 F9                                                 	mov	ecx,edi
00001C37: 29 F1                                                 	sub	ecx,esi
00001C39: 89 F2                                                 	mov	edx,esi
00001C3B: 8D 74 0E FF                                           	lea	esi,[esi+ecx-1]
00001C3F: 8D 7F 11                                              	lea	edi,[edi+1+16]
00001C42: 89 FB                                                 	mov	ebx,edi
00001C44: 4F                                                    	dec	edi
00001C45: FD                                                    	std
00001C46: F3 A4                                                 	rep	movs byte [edi],[esi]
00001C48: FC                                                    	cld
00001C49: 89 D7                                                 	mov	edi,edx
00001C4B: 30 C0                                                 	xor	al,al
00001C4D: AA                                                    	stos	byte [edi]
00001C4E: 8B 35 74 A1 01 00                                     	mov	esi,[current_line]
00001C54: 89 3D 74 A1 01 00                                     	mov	[current_line],edi
00001C5A: B9 04 00 00 00                                        	mov	ecx,4
00001C5F: F3 A5                                                 	rep	movs dword [edi],[esi]
00001C61: 89 DF                                                 	mov	edi,ebx
00001C63: E9 E9 F9 FF FF                                        	jmp	initial_preprocessing_ok
                                                                      skip_macro_symbol:
00001C68: 0F B6 06                                              	movzx	eax,byte [esi]
00001C6B: 46                                                    	inc	esi
00001C6C: 01 C6                                                 	add	esi,eax
00001C6E: EB 8F                                                 	jmp	skip_macro_block
                                                                      skip_macro_string:
00001C70: AD                                                    	lods	dword [esi]
00001C71: 01 C6                                                 	add	esi,eax
00001C73: EB 8A                                                 	jmp	skip_macro_block
                                                                postpone_directive:
00001C75: 56                                                    	push	esi
00001C76: 89 D6                                                 	mov	esi,edx
00001C78: 31 C9                                                 	xor	ecx,ecx
00001C7A: E8 AA FC FF FF                                        	call	add_preprocessor_symbol
00001C7F: A1 74 A1 01 00                                        	mov	eax,[current_line]
00001C84: A3 DC A1 01 00                                        	mov	[error_line],eax
00001C89: 89 42 0C                                              	mov	[edx+12],eax
00001C8C: 5E                                                    	pop	esi
00001C8D: 89 72 08                                              	mov	[edx+8],esi
00001C90: A0 C1 A2 01 00                                        	mov	al,[macro_status]
00001C95: 24 F0                                                 	and	al,0F0h
00001C97: 0C 01                                                 	or	al,1
00001C99: A2 C1 A2 01 00                                        	mov	[macro_status],al
00001C9E: AC                                                    	lods	byte [esi]
00001C9F: 08 C0                                                 	or	al,al
00001CA1: 0F 84 AA FB FF FF                                     	jz	line_preprocessed
00001CA7: 3C 7B                                                 	cmp	al,'{'
00001CA9: 0F 85 67 EC FF FF                                     	jne	unexpected_characters
00001CAF: E9 44 FF FF FF                                        	jmp	found_macro_block
                                                                rept_directive:
00001CB4: C6 05 A3 A2 01 00 00                                  	mov	[base_code],0
00001CBB: EB 22                                                 	jmp	define_instant_macro
                                                                irp_directive:
00001CBD: C6 05 A3 A2 01 00 01                                  	mov	[base_code],1
00001CC4: EB 19                                                 	jmp	define_instant_macro
                                                                irps_directive:
00001CC6: C6 05 A3 A2 01 00 02                                  	mov	[base_code],2
00001CCD: EB 10                                                 	jmp	define_instant_macro
                                                                irpv_directive:
00001CCF: C6 05 A3 A2 01 00 03                                  	mov	[base_code],3
00001CD6: EB 07                                                 	jmp	define_instant_macro
                                                                match_directive:
00001CD8: C6 05 A3 A2 01 00 10                                  	mov	[base_code],10h
                                                                define_instant_macro:
00001CDF: A0 C1 A2 01 00                                        	mov	al,[macro_status]
00001CE4: 24 F0                                                 	and	al,0F0h
00001CE6: 0C 09                                                 	or	al,8+1
00001CE8: A2 C1 A2 01 00                                        	mov	[macro_status],al
00001CED: A1 74 A1 01 00                                        	mov	eax,[current_line]
00001CF2: A3 DC A1 01 00                                        	mov	[error_line],eax
00001CF7: 89 35 94 A1 01 00                                     	mov	[instant_macro_start],esi
00001CFD: 80 3D A3 A2 01 00 10                                  	cmp	[base_code],10h
00001D04: 74 3B                                                 	je	prepare_match
                                                                      skip_parameters:
00001D06: AC                                                    	lods	byte [esi]
00001D07: 08 C0                                                 	or	al,al
00001D09: 74 19                                                 	jz	parameters_skipped
00001D0B: 3C 7B                                                 	cmp	al,'{'
00001D0D: 74 15                                                 	je	parameters_skipped
00001D0F: 3C 22                                                 	cmp	al,22h
00001D11: 74 0C                                                 	je	skip_quoted_parameter
00001D13: 3C 1A                                                 	cmp	al,1Ah
00001D15: 75 EF                                                 	jne	skip_parameters
00001D17: AC                                                    	lods	byte [esi]
00001D18: 0F B6 C0                                              	movzx	eax,al
00001D1B: 01 C6                                                 	add	esi,eax
00001D1D: EB E7                                                 	jmp	skip_parameters
                                                                      skip_quoted_parameter:
00001D1F: AD                                                    	lods	dword [esi]
00001D20: 01 C6                                                 	add	esi,eax
00001D22: EB E2                                                 	jmp	skip_parameters
                                                                      parameters_skipped:
00001D24: 4E                                                    	dec	esi
00001D25: 89 35 98 A1 01 00                                     	mov	[parameters_end],esi
00001D2B: AC                                                    	lods	byte [esi]
00001D2C: 3C 7B                                                 	cmp	al,'{'
00001D2E: 0F 84 C4 FE FF FF                                     	je	found_macro_block
00001D34: 08 C0                                                 	or	al,al
00001D36: 0F 85 C6 EB FF FF                                     	jnz	invalid_macro_arguments
00001D3C: E9 10 FB FF FF                                        	jmp	line_preprocessed
                                                                prepare_match:
00001D41: E8 0E 00 00 00                                        	call	skip_pattern
00001D46: C6 05 B4 A2 01 00 82                                  	mov	[value_type],80h+10b
00001D4D: E8 86 00 00 00                                        	call	process_symbolic_constants
00001D52: EB D0                                                 	jmp	parameters_skipped
                                                                      skip_pattern:
00001D54: AC                                                    	lods	byte [esi]
00001D55: 08 C0                                                 	or	al,al
00001D57: 0F 84 A5 EB FF FF                                     	jz	invalid_macro_arguments
00001D5D: 3C 2C                                                 	cmp	al,','
00001D5F: 74 26                                                 	je	pattern_skipped
00001D61: 3C 22                                                 	cmp	al,22h
00001D63: 74 1D                                                 	je	skip_quoted_string_in_pattern
00001D65: 3C 1A                                                 	cmp	al,1Ah
00001D67: 74 11                                                 	je	skip_symbol_in_pattern
00001D69: 3C 3D                                                 	cmp	al,'='
00001D6B: 75 E7                                                 	jne	skip_pattern
00001D6D: 8A 06                                                 	mov	al,[esi]
00001D6F: 3C 1A                                                 	cmp	al,1Ah
00001D71: 74 E1                                                 	je	skip_pattern
00001D73: 3C 22                                                 	cmp	al,22h
00001D75: 74 DD                                                 	je	skip_pattern
00001D77: 46                                                    	inc	esi
00001D78: EB DA                                                 	jmp	skip_pattern
                                                                      skip_symbol_in_pattern:
00001D7A: AC                                                    	lods	byte [esi]
00001D7B: 0F B6 C0                                              	movzx	eax,al
00001D7E: 01 C6                                                 	add	esi,eax
00001D80: EB D2                                                 	jmp	skip_pattern
                                                                      skip_quoted_string_in_pattern:
00001D82: AD                                                    	lods	dword [esi]
00001D83: 01 C6                                                 	add	esi,eax
00001D85: EB CD                                                 	jmp	skip_pattern
                                                                      pattern_skipped:
00001D87: C3                                                    	ret
                                                                
                                                                purge_macro:
00001D88: 30 ED                                                 	xor	ch,ch
00001D8A: EB 06                                                 	jmp	restore_preprocessor_symbol
                                                                purge_struc:
00001D8C: B5 01                                                 	mov	ch,1
00001D8E: EB 02                                                 	jmp	restore_preprocessor_symbol
                                                                restore_equ_constant:
00001D90: B5 02                                                 	mov	ch,10b
                                                                      restore_preprocessor_symbol:
00001D92: 51                                                    	push	ecx
00001D93: AC                                                    	lods	byte [esi]
00001D94: 3C 1A                                                 	cmp	al,1Ah
00001D96: 0F 85 C2 EC FF FF                                     	jne	invalid_name
00001D9C: AC                                                    	lods	byte [esi]
00001D9D: 88 C1                                                 	mov	cl,al
00001D9F: E8 B0 FA FF FF                                        	call	get_preprocessor_symbol
00001DA4: 72 0D                                                 	jc	no_symbol_to_restore
00001DA6: 85 D2                                                 	test	edx,edx
00001DA8: 74 0B                                                 	jz	symbol_restored
00001DAA: C7 42 04 00 00 00 00                                  	mov	dword [edx+4],0
00001DB1: EB 02                                                 	jmp	symbol_restored
                                                                      no_symbol_to_restore:
00001DB3: 01 CE                                                 	add	esi,ecx
                                                                      symbol_restored:
00001DB5: 59                                                    	pop	ecx
00001DB6: AC                                                    	lods	byte [esi]
00001DB7: 3C 2C                                                 	cmp	al,','
00001DB9: 74 D7                                                 	je	restore_preprocessor_symbol
00001DBB: 08 C0                                                 	or	al,al
00001DBD: 0F 85 C5 EC FF FF                                     	jnz	extra_characters_on_line
00001DC3: E9 89 FA FF FF                                        	jmp	line_preprocessed
                                                                
                                                                process_fix_constants:
00001DC8: C6 05 B4 A2 01 00 03                                  	mov	[value_type],11b
00001DCF: EB 07                                                 	jmp	process_symbolic_constants
                                                                process_equ_constants:
00001DD1: C6 05 B4 A2 01 00 02                                  	mov	[value_type],10b
                                                                      process_symbolic_constants:
00001DD8: 89 F5                                                 	mov	ebp,esi
00001DDA: AC                                                    	lods	byte [esi]
00001DDB: 3C 1A                                                 	cmp	al,1Ah
00001DDD: 74 24                                                 	je	check_symbol
00001DDF: 3C 22                                                 	cmp	al,22h
00001DE1: 74 09                                                 	je	ignore_string
00001DE3: 3C 7B                                                 	cmp	al,'{'
00001DE5: 74 0A                                                 	je	check_brace
00001DE7: 08 C0                                                 	or	al,al
00001DE9: 75 ED                                                 	jnz	process_symbolic_constants
00001DEB: C3                                                    	ret
                                                                      ignore_string:
00001DEC: AD                                                    	lods	dword [esi]
00001DED: 01 C6                                                 	add	esi,eax
00001DEF: EB E7                                                 	jmp	process_symbolic_constants
                                                                      check_brace:
00001DF1: F6 05 B4 A2 01 00 80                                  	test	[value_type],80h
00001DF8: 74 DE                                                 	jz	process_symbolic_constants
00001DFA: C3                                                    	ret
                                                                      no_replacing:
00001DFB: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00001DFF: 01 CE                                                 	add	esi,ecx
00001E01: EB D5                                                 	jmp	process_symbolic_constants
                                                                      check_symbol:
00001E03: 8A 0E                                                 	mov	cl,[esi]
00001E05: 46                                                    	inc	esi
00001E06: 8A 2D B4 A2 01 00                                     	mov	ch,[value_type]
00001E0C: E8 43 FA FF FF                                        	call	get_preprocessor_symbol
00001E11: 72 E8                                                 	jc	no_replacing
00001E13: 89 3D 50 A2 01 00                                     	mov	[current_section],edi
                                                                      replace_symbolic_constant:
00001E19: 85 D2                                                 	test	edx,edx
00001E1B: 0F 84 A6 00 00 00                                     	jz	replace_special_symbolic_constant
00001E21: 8B 4A 0C                                              	mov	ecx,[edx+12]
00001E24: 8B 52 08                                              	mov	edx,[edx+8]
00001E27: 87 F2                                                 	xchg	esi,edx
00001E29: E8 22 00 00 00                                        	call	move_data
00001E2E: 89 D6                                                 	mov	esi,edx
                                                                      process_after_replaced:
00001E30: AC                                                    	lods	byte [esi]
00001E31: 3C 1A                                                 	cmp	al,1Ah
00001E33: 74 6A                                                 	je	symbol_after_replaced
00001E35: AA                                                    	stos	byte [edi]
00001E36: 3C 22                                                 	cmp	al,22h
00001E38: 74 33                                                 	je	string_after_replaced
00001E3A: 3C 7B                                                 	cmp	al,'{'
00001E3C: 74 3A                                                 	je	brace_after_replaced
00001E3E: 08 C0                                                 	or	al,al
00001E40: 75 EE                                                 	jnz	process_after_replaced
00001E42: 89 F9                                                 	mov	ecx,edi
00001E44: 29 F1                                                 	sub	ecx,esi
00001E46: 89 EF                                                 	mov	edi,ebp
00001E48: E8 03 00 00 00                                        	call	move_data
00001E4D: 89 FE                                                 	mov	esi,edi
00001E4F: C3                                                    	ret
                                                                      move_data:
00001E50: 8D 04 0F                                              	lea	eax,[edi+ecx]
00001E53: 3B 05 30 A1 01 00                                     	cmp	eax,[memory_end]
00001E59: 0F 83 33 EA FF FF                                     	jae	out_of_memory
00001E5F: D1 E9                                                 	shr	ecx,1
00001E61: 73 01                                                 	jnc	movsb_ok
00001E63: A4                                                    	movs	byte [edi],[esi]
                                                                      movsb_ok:
00001E64: D1 E9                                                 	shr	ecx,1
00001E66: 73 02                                                 	jnc	movsw_ok
00001E68: 66 A5                                                 	movs	word [edi],[esi]
                                                                      movsw_ok:
00001E6A: F3 A5                                                 	rep	movs dword [edi],[esi]
00001E6C: C3                                                    	ret
                                                                      string_after_replaced:
00001E6D: AD                                                    	lods	dword [esi]
00001E6E: AB                                                    	stos	dword [edi]
00001E6F: 89 C1                                                 	mov	ecx,eax
00001E71: E8 DA FF FF FF                                        	call	move_data
00001E76: EB B8                                                 	jmp	process_after_replaced
                                                                      brace_after_replaced:
00001E78: F6 05 B4 A2 01 00 80                                  	test	[value_type],80h
00001E7F: 74 AF                                                 	jz	process_after_replaced
00001E81: 89 FA                                                 	mov	edx,edi
00001E83: 8B 0D 50 A2 01 00                                     	mov	ecx,[current_section]
00001E89: 29 CA                                                 	sub	edx,ecx
00001E8B: 29 F1                                                 	sub	ecx,esi
00001E8D: F3 A4                                                 	rep	movs byte [edi],[esi]
00001E8F: 89 F9                                                 	mov	ecx,edi
00001E91: 29 F1                                                 	sub	ecx,esi
00001E93: 89 EF                                                 	mov	edi,ebp
00001E95: E8 B6 FF FF FF                                        	call	move_data
00001E9A: 8D 74 15 00                                           	lea	esi,[ebp+edx]
00001E9E: C3                                                    	ret
                                                                      symbol_after_replaced:
00001E9F: 8A 0E                                                 	mov	cl,[esi]
00001EA1: 46                                                    	inc	esi
00001EA2: 8A 2D B4 A2 01 00                                     	mov	ch,[value_type]
00001EA8: E8 A7 F9 FF FF                                        	call	get_preprocessor_symbol
00001EAD: 0F 83 66 FF FF FF                                     	jnc	replace_symbolic_constant
00001EB3: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00001EB7: B0 1A                                                 	mov	al,1Ah
00001EB9: 88 CC                                                 	mov	ah,cl
00001EBB: 66 AB                                                 	stos	word [edi]
00001EBD: E8 8E FF FF FF                                        	call	move_data
00001EC2: E9 69 FF FF FF                                        	jmp	process_after_replaced
                                                                      replace_special_symbolic_constant:
00001EC7: FF E0                                                 	jmp	near eax
                                                                    preprocessed_file_value:
00001EC9: E8 62 00 00 00                                        	call	get_current_line_from_file
00001ECE: 85 DB                                                 	test	ebx,ebx
00001ED0: 0F 84 5A FF FF FF                                     	jz	process_after_replaced
00001ED6: 56 57                                                 	push	esi edi
00001ED8: 8B 33                                                 	mov	esi,[ebx]
00001EDA: 89 F7                                                 	mov	edi,esi
00001EDC: 30 C0                                                 	xor	al,al
00001EDE: 83 C9 FF                                              	or	ecx,-1
00001EE1: F2 AE                                                 	repne	scas byte [edi]
00001EE3: 83 C1 02                                              	add	ecx,2
00001EE6: F7 D9                                                 	neg	ecx
00001EE8: 5F                                                    	pop	edi
00001EE9: 8D 44 0F 05                                           	lea	eax,[edi+1+4+ecx]
00001EED: 3B 05 30 A1 01 00                                     	cmp	eax,[memory_end]
00001EF3: 0F 87 99 E9 FF FF                                     	ja	out_of_memory
00001EF9: B0 22                                                 	mov	al,22h
00001EFB: AA                                                    	stos	byte [edi]
00001EFC: 89 C8                                                 	mov	eax,ecx
00001EFE: AB                                                    	stos	dword [edi]
00001EFF: F3 A4                                                 	rep	movs byte [edi],[esi]
00001F01: 5E                                                    	pop	esi
00001F02: E9 29 FF FF FF                                        	jmp	process_after_replaced
                                                                    preprocessed_line_value:
00001F07: E8 24 00 00 00                                        	call	get_current_line_from_file
00001F0C: 85 DB                                                 	test	ebx,ebx
00001F0E: 0F 84 1C FF FF FF                                     	jz	process_after_replaced
00001F14: 8D 47 19                                              	lea	eax,[edi+1+4+20]
00001F17: 3B 05 30 A1 01 00                                     	cmp	eax,[memory_end]
00001F1D: 0F 87 6F E9 FF FF                                     	ja	out_of_memory
00001F23: 8B 4B 04                                              	mov	ecx,[ebx+4]
00001F26: E8 A8 0A 00 00                                        	call	store_number_symbol
00001F2B: E9 00 FF FF FF                                        	jmp	process_after_replaced
                                                                    get_current_line_from_file:
00001F30: 8B 1D 74 A1 01 00                                     	mov	ebx,[current_line]
                                                                      find_line_from_file:
00001F36: 85 DB                                                 	test	ebx,ebx
00001F38: 74 0B                                                 	jz	line_from_file_found
00001F3A: F6 43 07 80                                           	test	byte [ebx+7],80h
00001F3E: 74 05                                                 	jz	line_from_file_found
00001F40: 8B 5B 08                                              	mov	ebx,[ebx+8]
00001F43: EB F1                                                 	jmp	find_line_from_file
                                                                      line_from_file_found:
00001F45: C3                                                    	ret
                                                                
                                                                process_macro_operators:
00001F46: 30 D2                                                 	xor	dl,dl
00001F48: 89 FD                                                 	mov	ebp,edi
                                                                      before_macro_operators:
00001F4A: 89 F7                                                 	mov	edi,esi
00001F4C: AC                                                    	lods	byte [esi]
00001F4D: 3C 60                                                 	cmp	al,'`'
00001F4F: 74 72                                                 	je	symbol_conversion
00001F51: 3C 23                                                 	cmp	al,'#'
00001F53: 0F 84 E7 00 00 00                                     	je	concatenation
00001F59: 3C 1A                                                 	cmp	al,1Ah
00001F5B: 74 14                                                 	je	symbol_before_macro_operators
00001F5D: 3C 3B                                                 	cmp	al,3Bh
00001F5F: 74 0D                                                 	je	no_more_macro_operators
00001F61: 3C 22                                                 	cmp	al,22h
00001F63: 74 21                                                 	je	string_before_macro_operators
00001F65: 30 D2                                                 	xor	dl,dl
00001F67: 08 C0                                                 	or	al,al
00001F69: 75 DF                                                 	jnz	before_macro_operators
00001F6B: 89 F7                                                 	mov	edi,esi
00001F6D: C3                                                    	ret
                                                                      no_more_macro_operators:
00001F6E: 89 EF                                                 	mov	edi,ebp
00001F70: C3                                                    	ret
                                                                      symbol_before_macro_operators:
00001F71: B2 1A                                                 	mov	dl,1Ah
00001F73: 89 F3                                                 	mov	ebx,esi
00001F75: AC                                                    	lods	byte [esi]
00001F76: 0F B6 C8                                              	movzx	ecx,al
00001F79: E3 07                                                 	jecxz	symbol_before_macro_operators_ok
00001F7B: 89 F7                                                 	mov	edi,esi
00001F7D: 80 3E 5C                                              	cmp	byte [esi],'\'
00001F80: 74 0D                                                 	je	escaped_symbol
                                                                      symbol_before_macro_operators_ok:
00001F82: 01 CE                                                 	add	esi,ecx
00001F84: EB C4                                                 	jmp	before_macro_operators
                                                                      string_before_macro_operators:
00001F86: B2 22                                                 	mov	dl,22h
00001F88: 89 F3                                                 	mov	ebx,esi
00001F8A: AD                                                    	lods	dword [esi]
00001F8B: 01 C6                                                 	add	esi,eax
00001F8D: EB BB                                                 	jmp	before_macro_operators
                                                                      escaped_symbol:
00001F8F: FE 4F FF                                              	dec	byte [edi-1]
00001F92: 49                                                    	dec	ecx
00001F93: 46                                                    	inc	esi
00001F94: 83 F9 01                                              	cmp	ecx,1
00001F97: F3 A4                                                 	rep	movs byte [edi],[esi]
00001F99: 0F 85 29 01 00 00                                     	jne	after_macro_operators
00001F9F: 8A 46 FF                                              	mov	al,[esi-1]
00001FA2: 89 D9                                                 	mov	ecx,ebx
00001FA4: BB C7 A2 01 00                                        	mov	ebx,characters
00001FA9: D7                                                    	xlat	byte [ebx]
00001FAA: 89 CB                                                 	mov	ebx,ecx
00001FAC: 08 C0                                                 	or	al,al
00001FAE: 0F 85 14 01 00 00                                     	jnz	after_macro_operators
00001FB4: 83 EF 03                                              	sub	edi,3
00001FB7: 8A 46 FF                                              	mov	al,[esi-1]
00001FBA: AA                                                    	stos	byte [edi]
00001FBB: 30 D2                                                 	xor	dl,dl
00001FBD: E9 06 01 00 00                                        	jmp	after_macro_operators
                                                                      reduce_symbol_conversion:
00001FC2: 46                                                    	inc	esi
                                                                      symbol_conversion:
00001FC3: 89 F2                                                 	mov	edx,esi
00001FC5: 8A 06                                                 	mov	al,[esi]
00001FC7: 3C 1A                                                 	cmp	al,1Ah
00001FC9: 75 14                                                 	jne	symbol_character_conversion
00001FCB: 66 AD                                                 	lods	word [esi]
00001FCD: 0F B6 CC                                              	movzx	ecx,ah
00001FD0: 8D 5F 03                                              	lea	ebx,[edi+3]
00001FD3: E3 24                                                 	jecxz	convert_to_quoted_string
00001FD5: 80 3E 5C                                              	cmp	byte [esi],'\'
00001FD8: 75 1F                                                 	jne	convert_to_quoted_string
00001FDA: 46                                                    	inc	esi
00001FDB: 49                                                    	dec	ecx
00001FDC: 4B                                                    	dec	ebx
00001FDD: EB 1A                                                 	jmp	convert_to_quoted_string
                                                                      symbol_character_conversion:
00001FDF: 3C 22                                                 	cmp	al,22h
00001FE1: 0F 84 E1 00 00 00                                     	je	after_macro_operators
00001FE7: 3C 60                                                 	cmp	al,'`'
00001FE9: 74 D7                                                 	je	reduce_symbol_conversion
00001FEB: 8D 5F 05                                              	lea	ebx,[edi+5]
00001FEE: 31 C9                                                 	xor	ecx,ecx
00001FF0: 08 C0                                                 	or	al,al
00001FF2: 74 05                                                 	jz	convert_to_quoted_string
00001FF4: 3C 23                                                 	cmp	al,'#'
00001FF6: 74 01                                                 	je	convert_to_quoted_string
00001FF8: 41                                                    	inc	ecx
                                                                      convert_to_quoted_string:
00001FF9: 29 D3                                                 	sub	ebx,edx
00001FFB: 77 19                                                 	ja	shift_line_data
00001FFD: B0 22                                                 	mov	al,22h
00001FFF: 88 C2                                                 	mov	dl,al
00002001: AA                                                    	stos	byte [edi]
00002002: 89 FB                                                 	mov	ebx,edi
00002004: 89 C8                                                 	mov	eax,ecx
00002006: AB                                                    	stos	dword [edi]
00002007: F3 A4                                                 	rep	movs byte [edi],[esi]
00002009: 39 F7                                                 	cmp	edi,esi
0000200B: 0F 84 39 FF FF FF                                     	je	before_macro_operators
00002011: E9 B2 00 00 00                                        	jmp	after_macro_operators
                                                                      shift_line_data:
00002016: 51                                                    	push	ecx
00002017: 89 F2                                                 	mov	edx,esi
00002019: 8D 75 FF                                              	lea	esi,[ebp-1]
0000201C: 01 DD                                                 	add	ebp,ebx
0000201E: 8D 7D FF                                              	lea	edi,[ebp-1]
00002021: 8D 4E 01                                              	lea	ecx,[esi+1]
00002024: 29 D1                                                 	sub	ecx,edx
00002026: FD                                                    	std
00002027: F3 A4                                                 	rep	movs byte [edi],[esi]
00002029: FC                                                    	cld
0000202A: 58                                                    	pop	eax
0000202B: 83 EF 03                                              	sub	edi,3
0000202E: B2 22                                                 	mov	dl,22h
00002030: 88 57 FF                                              	mov	[edi-1],dl
00002033: 89 FB                                                 	mov	ebx,edi
00002035: 89 07                                                 	mov	[edi],eax
00002037: 8D 74 07 04                                           	lea	esi,[edi+4+eax]
0000203B: E9 0A FF FF FF                                        	jmp	before_macro_operators
                                                                      concatenation:
00002040: 80 FA 1A                                              	cmp	dl,1Ah
00002043: 74 0F                                                 	je	symbol_concatenation
00002045: 80 FA 22                                              	cmp	dl,22h
00002048: 74 3C                                                 	je	string_concatenation
                                                                      no_concatenation:
0000204A: 39 FE                                                 	cmp	esi,edi
0000204C: 0F 84 F8 FE FF FF                                     	je	before_macro_operators
00002052: EB 74                                                 	jmp	after_macro_operators
                                                                      symbol_concatenation:
00002054: 80 3E 1A                                              	cmp	byte [esi],1Ah
00002057: 75 F1                                                 	jne	no_concatenation
00002059: 46                                                    	inc	esi
0000205A: AC                                                    	lods	byte [esi]
0000205B: 0F B6 C8                                              	movzx	ecx,al
0000205E: E3 05                                                 	jecxz	do_symbol_concatenation
00002060: 80 3E 5C                                              	cmp	byte [esi],'\'
00002063: 74 0C                                                 	je	concatenate_escaped_symbol
                                                                      do_symbol_concatenation:
00002065: 00 0B                                                 	add	[ebx],cl
00002067: 0F 82 EA E9 FF FF                                     	jc	name_too_long
0000206D: F3 A4                                                 	rep	movs byte [edi],[esi]
0000206F: EB 57                                                 	jmp	after_macro_operators
                                                                      concatenate_escaped_symbol:
00002071: 46                                                    	inc	esi
00002072: 49                                                    	dec	ecx
00002073: 74 F0                                                 	jz	do_symbol_concatenation
00002075: 0F B6 06                                              	movzx	eax,byte [esi]
00002078: 80 B8 C7 A2 01 00 00                                  	cmp	byte [characters+eax],0
0000207F: 75 E4                                                 	jne	do_symbol_concatenation
00002081: 83 EE 03                                              	sub	esi,3
00002084: EB C4                                                 	jmp	no_concatenation
                                                                      string_concatenation:
00002086: 80 3E 22                                              	cmp	byte [esi],22h
00002089: 74 35                                                 	je	do_string_concatenation
0000208B: 80 3E 60                                              	cmp	byte [esi],'`'
0000208E: 75 BA                                                 	jne	no_concatenation
                                                                      concatenate_converted_symbol:
00002090: 46                                                    	inc	esi
00002091: 8A 06                                                 	mov	al,[esi]
00002093: 3C 60                                                 	cmp	al,'`'
00002095: 74 F9                                                 	je	concatenate_converted_symbol
00002097: 3C 22                                                 	cmp	al,22h
00002099: 74 25                                                 	je	do_string_concatenation
0000209B: 3C 1A                                                 	cmp	al,1Ah
0000209D: 75 14                                                 	jne	concatenate_converted_symbol_character
0000209F: 46                                                    	inc	esi
000020A0: AC                                                    	lods	byte [esi]
000020A1: 0F B6 C8                                              	movzx	ecx,al
000020A4: E3 07                                                 	jecxz	finish_concatenating_converted_symbol
000020A6: 80 3E 5C                                              	cmp	byte [esi],'\'
000020A9: 75 02                                                 	jne	finish_concatenating_converted_symbol
000020AB: 46                                                    	inc	esi
000020AC: 49                                                    	dec	ecx
                                                                      finish_concatenating_converted_symbol:
000020AD: 01 0B                                                 	add	[ebx],ecx
000020AF: F3 A4                                                 	rep	movs byte [edi],[esi]
000020B1: EB 15                                                 	jmp	after_macro_operators
                                                                      concatenate_converted_symbol_character:
000020B3: 08 C0                                                 	or	al,al
000020B5: 74 11                                                 	jz	after_macro_operators
000020B7: 3C 23                                                 	cmp	al,'#'
000020B9: 74 0D                                                 	je	after_macro_operators
000020BB: FF 03                                                 	inc	dword [ebx]
000020BD: A4                                                    	movs	byte [edi],[esi]
000020BE: EB 08                                                 	jmp	after_macro_operators
                                                                      do_string_concatenation:
000020C0: 46                                                    	inc	esi
000020C1: AD                                                    	lods	dword [esi]
000020C2: 89 C1                                                 	mov	ecx,eax
000020C4: 01 03                                                 	add	[ebx],eax
000020C6: F3 A4                                                 	rep	movs byte [edi],[esi]
                                                                      after_macro_operators:
000020C8: AC                                                    	lods	byte [esi]
000020C9: 3C 60                                                 	cmp	al,'`'
000020CB: 0F 84 F2 FE FF FF                                     	je	symbol_conversion
000020D1: 3C 23                                                 	cmp	al,'#'
000020D3: 0F 84 67 FF FF FF                                     	je	concatenation
000020D9: AA                                                    	stos	byte [edi]
000020DA: 3C 1A                                                 	cmp	al,1Ah
000020DC: 74 13                                                 	je	symbol_after_macro_operators
000020DE: 3C 3B                                                 	cmp	al,3Bh
000020E0: 0F 84 88 FE FF FF                                     	je	no_more_macro_operators
000020E6: 3C 22                                                 	cmp	al,22h
000020E8: 74 1F                                                 	je	string_after_macro_operators
000020EA: 30 D2                                                 	xor	dl,dl
000020EC: 08 C0                                                 	or	al,al
000020EE: 75 D8                                                 	jnz	after_macro_operators
000020F0: C3                                                    	ret
                                                                      symbol_after_macro_operators:
000020F1: B2 1A                                                 	mov	dl,1Ah
000020F3: 89 FB                                                 	mov	ebx,edi
000020F5: AC                                                    	lods	byte [esi]
000020F6: AA                                                    	stos	byte [edi]
000020F7: 0F B6 C8                                              	movzx	ecx,al
000020FA: E3 09                                                 	jecxz	symbol_after_macro_operatorss_ok
000020FC: 80 3E 5C                                              	cmp	byte [esi],'\'
000020FF: 0F 84 8A FE FF FF                                     	je	escaped_symbol
                                                                      symbol_after_macro_operatorss_ok:
00002105: F3 A4                                                 	rep	movs byte [edi],[esi]
00002107: EB BF                                                 	jmp	after_macro_operators
                                                                      string_after_macro_operators:
00002109: B2 22                                                 	mov	dl,22h
0000210B: 89 FB                                                 	mov	ebx,edi
0000210D: AD                                                    	lods	dword [esi]
0000210E: AB                                                    	stos	dword [edi]
0000210F: 89 C1                                                 	mov	ecx,eax
00002111: F3 A4                                                 	rep	movs byte [edi],[esi]
00002113: EB B3                                                 	jmp	after_macro_operators
                                                                
                                                                use_macro:
00002115: FF 35 58 A1 01 00                                     	push	[free_additional_memory]
0000211B: FF 35 88 A1 01 00                                     	push	[macro_symbols]
00002121: C7 05 88 A1 01 00 00 00 00 00                         	mov	[macro_symbols],0
0000212B: FF 35 D4 A1 01 00                                     	push	[counter_limit]
00002131: FF 72 04                                              	push	dword [edx+4]
00002134: C7 42 04 01 00 00 00                                  	mov	dword [edx+4],1
0000213B: 52                                                    	push	edx
0000213C: 89 F3                                                 	mov	ebx,esi
0000213E: 8B 72 08                                              	mov	esi,[edx+8]
00002141: 8B 42 0C                                              	mov	eax,[edx+12]
00002144: A3 78 A1 01 00                                        	mov	[macro_line],eax
00002149: C7 05 D4 A1 01 00 00 00 00 00                         	mov	[counter_limit],0
00002153: 31 ED                                                 	xor	ebp,ebp
                                                                      process_macro_arguments:
00002155: 8A 06                                                 	mov	al,[esi]
00002157: 08 C0                                                 	or	al,al
00002159: 0F 84 FD 00 00 00                                     	jz	arguments_end
0000215F: 3C 7B                                                 	cmp	al,'{'
00002161: 0F 84 F5 00 00 00                                     	je	arguments_end
00002167: 46                                                    	inc	esi
00002168: 3C 5B                                                 	cmp	al,'['
0000216A: 75 09                                                 	jne	get_macro_arguments
0000216C: 89 F5                                                 	mov	ebp,esi
0000216E: 46                                                    	inc	esi
0000216F: FF 05 D4 A1 01 00                                     	inc	[counter_limit]
                                                                      get_macro_arguments:
00002175: E8 33 00 00 00                                        	call	get_macro_argument
0000217A: AC                                                    	lods	byte [esi]
0000217B: 3C 2C                                                 	cmp	al,','
0000217D: 74 12                                                 	je	next_argument
0000217F: 3C 5D                                                 	cmp	al,']'
00002181: 74 16                                                 	je	next_arguments_group
00002183: 3C 26                                                 	cmp	al,'&'
00002185: 0F 84 D1 00 00 00                                     	je	arguments_end
0000218B: 4E                                                    	dec	esi
0000218C: E9 CB 00 00 00                                        	jmp	arguments_end
                                                                      next_argument:
00002191: 80 3B 2C                                              	cmp	byte [ebx],','
00002194: 75 BF                                                 	jne	process_macro_arguments
00002196: 43                                                    	inc	ebx
00002197: EB BC                                                 	jmp	process_macro_arguments
                                                                      next_arguments_group:
00002199: 80 3B 2C                                              	cmp	byte [ebx],','
0000219C: 0F 85 BA 00 00 00                                     	jne	arguments_end
000021A2: 43                                                    	inc	ebx
000021A3: FF 05 D4 A1 01 00                                     	inc	[counter_limit]
000021A9: 89 EE                                                 	mov	esi,ebp
000021AB: EB A8                                                 	jmp	process_macro_arguments
                                                                      get_macro_argument:
000021AD: AC                                                    	lods	byte [esi]
000021AE: 0F B6 C8                                              	movzx	ecx,al
000021B1: A1 D4 A1 01 00                                        	mov	eax,[counter_limit]
000021B6: E8 4B 0B 00 00                                        	call	add_macro_symbol
000021BB: 01 CE                                                 	add	esi,ecx
000021BD: 31 C0                                                 	xor	eax,eax
000021BF: A3 9C A1 01 00                                        	mov	[default_argument_value],eax
000021C4: 80 3E 2A                                              	cmp	byte [esi],'*'
000021C7: 74 1F                                                 	je	required_value
000021C9: 80 3E 3A                                              	cmp	byte [esi],':'
000021CC: 74 05                                                 	je	get_default_value
000021CE: 80 3E 3D                                              	cmp	byte [esi],'='
000021D1: 75 1D                                                 	jne	default_value_ok
                                                                      get_default_value:
000021D3: 46                                                    	inc	esi
000021D4: 89 35 9C A1 01 00                                     	mov	[default_argument_value],esi
000021DA: 80 0D C2 A2 01 00 FF                                  	or	[skip_default_argument_value],-1
000021E1: E8 60 F9 FF FF                                        	call	skip_macro_argument_value
000021E6: EB 08                                                 	jmp	default_value_ok
                                                                      required_value:
000021E8: 46                                                    	inc	esi
000021E9: 83 0D 9C A1 01 00 FF                                  	or	[default_argument_value],-1
                                                                      default_value_ok:
000021F0: 87 F3                                                 	xchg	esi,ebx
000021F2: 89 72 0C                                              	mov	[edx+12],esi
000021F5: C6 05 C2 A2 01 00 00                                  	mov	[skip_default_argument_value],0
000021FC: 80 3B 26                                              	cmp	byte [ebx],'&'
000021FF: 74 0C                                                 	je	greedy_macro_argument
00002201: E8 40 F9 FF FF                                        	call	skip_macro_argument_value
00002206: E8 35 00 00 00                                        	call	finish_macro_argument
0000220B: EB 10                                                 	jmp	got_macro_argument
                                                                      greedy_macro_argument:
0000220D: E8 93 08 00 00                                        	call	skip_foreign_line
00002212: 4E                                                    	dec	esi
00002213: 8B 42 0C                                              	mov	eax,[edx+12]
00002216: 89 F1                                                 	mov	ecx,esi
00002218: 29 C1                                                 	sub	ecx,eax
0000221A: 89 4A 08                                              	mov	[edx+8],ecx
                                                                      got_macro_argument:
0000221D: 87 F3                                                 	xchg	esi,ebx
0000221F: 83 7A 08 00                                           	cmp	dword [edx+8],0
00002223: 75 1A                                                 	jne	macro_argument_ok
00002225: A1 9C A1 01 00                                        	mov	eax,[default_argument_value]
0000222A: 09 C0                                                 	or	eax,eax
0000222C: 74 11                                                 	jz	macro_argument_ok
0000222E: 83 F8 FF                                              	cmp	eax,-1
00002231: 0F 84 CB E6 FF FF                                     	je	invalid_macro_arguments
00002237: 89 42 0C                                              	mov	[edx+12],eax
0000223A: E8 01 00 00 00                                        	call	finish_macro_argument
                                                                      macro_argument_ok:
0000223F: C3                                                    	ret
                                                                      finish_macro_argument:
00002240: 8B 42 0C                                              	mov	eax,[edx+12]
00002243: 89 F1                                                 	mov	ecx,esi
00002245: 29 C1                                                 	sub	ecx,eax
00002247: 80 38 3C                                              	cmp	byte [eax],'<'
0000224A: 75 0C                                                 	jne	argument_value_length_ok
0000224C: FF 42 0C                                              	inc	dword [edx+12]
0000224F: 83 E9 02                                              	sub	ecx,2
00002252: 81 C9 00 00 00 80                                     	or	ecx,80000000h
                                                                      argument_value_length_ok:
00002258: 89 4A 08                                              	mov	[edx+8],ecx
0000225B: C3                                                    	ret
                                                                      arguments_end:
0000225C: 80 3B 00                                              	cmp	byte [ebx],0
0000225F: 0F 85 9D E6 FF FF                                     	jne	invalid_macro_arguments
00002265: 8B 44 24 04                                           	mov	eax,[esp+4]
00002269: 48                                                    	dec	eax
0000226A: E8 EC 04 00 00                                        	call	process_macro
0000226F: 5A                                                    	pop	edx
00002270: 8F 42 04                                              	pop	dword [edx+4]
00002273: 8F 05 D4 A1 01 00                                     	pop	[counter_limit]
00002279: 8F 05 88 A1 01 00                                     	pop	[macro_symbols]
0000227F: 8F 05 58 A1 01 00                                     	pop	[free_additional_memory]
00002285: E9 C7 F5 FF FF                                        	jmp	line_preprocessed
                                                                use_instant_macro:
0000228A: 57                                                    	push	edi
0000228B: FF 35 74 A1 01 00                                     	push	[current_line]
00002291: 56                                                    	push	esi
00002292: A1 DC A1 01 00                                        	mov	eax,[error_line]
00002297: A3 74 A1 01 00                                        	mov	[current_line],eax
0000229C: A3 78 A1 01 00                                        	mov	[macro_line],eax
000022A1: 8B 35 94 A1 01 00                                     	mov	esi,[instant_macro_start]
000022A7: 80 3D A3 A2 01 00 10                                  	cmp	[base_code],10h
000022AE: 0F 83 14 03 00 00                                     	jae	do_match
000022B4: 80 3D A3 A2 01 00 00                                  	cmp	[base_code],0
000022BB: 0F 85 35 01 00 00                                     	jne	do_irp
000022C1: E8 E3 00 00 00                                        	call	precalculate_value
000022C6: 83 F8 00                                              	cmp	eax,0
000022C9: 0F 8C DD E6 FF FF                                     	jl	value_out_of_range
000022CF: FF 35 58 A1 01 00                                     	push	[free_additional_memory]
000022D5: FF 35 88 A1 01 00                                     	push	[macro_symbols]
000022DB: C7 05 88 A1 01 00 00 00 00 00                         	mov	[macro_symbols],0
000022E5: FF 35 D4 A1 01 00                                     	push	[counter_limit]
000022EB: C7 05 8C A1 01 00 00 00 00 00                         	mov	[struc_name],0
000022F5: A3 D4 A1 01 00                                        	mov	[counter_limit],eax
000022FA: AC                                                    	lods	byte [esi]
000022FB: 08 C0                                                 	or	al,al
000022FD: 74 4F                                                 	jz	rept_counters_ok
000022FF: 3C 7B                                                 	cmp	al,'{'
00002301: 74 4B                                                 	je	rept_counters_ok
00002303: 3C 1A                                                 	cmp	al,1Ah
00002305: 0F 85 F7 E5 FF FF                                     	jne	invalid_macro_arguments
                                                                      add_rept_counter:
0000230B: AC                                                    	lods	byte [esi]
0000230C: 0F B6 C8                                              	movzx	ecx,al
0000230F: 31 C0                                                 	xor	eax,eax
00002311: E8 F0 09 00 00                                        	call	add_macro_symbol
00002316: 01 CE                                                 	add	esi,ecx
00002318: 31 C0                                                 	xor	eax,eax
0000231A: 89 42 0C                                              	mov	dword [edx+12],eax
0000231D: 40                                                    	inc	eax
0000231E: 89 42 08                                              	mov	dword [edx+8],eax
00002321: AC                                                    	lods	byte [esi]
00002322: 3C 3A                                                 	cmp	al,':'
00002324: 75 19                                                 	jne	rept_counter_added
00002326: 52                                                    	push	edx
00002327: E8 7D 00 00 00                                        	call	precalculate_value
0000232C: 89 C2                                                 	mov	edx,eax
0000232E: 03 15 D4 A1 01 00                                     	add	edx,[counter_limit]
00002334: 0F 80 72 E6 FF FF                                     	jo	value_out_of_range
0000233A: 5A                                                    	pop	edx
0000233B: 89 42 08                                              	mov	dword [edx+8],eax
0000233E: AC                                                    	lods	byte [esi]
                                                                      rept_counter_added:
0000233F: 3C 2C                                                 	cmp	al,','
00002341: 75 0B                                                 	jne	rept_counters_ok
00002343: AC                                                    	lods	byte [esi]
00002344: 3C 1A                                                 	cmp	al,1Ah
00002346: 0F 85 B6 E5 FF FF                                     	jne	invalid_macro_arguments
0000234C: EB BD                                                 	jmp	add_rept_counter
                                                                      rept_counters_ok:
0000234E: 4E                                                    	dec	esi
0000234F: 83 3D D4 A1 01 00 00                                  	cmp	[counter_limit],0
00002356: 74 07                                                 	je	instant_macro_finish
                                                                      instant_macro_parameters_ok:
00002358: 31 C0                                                 	xor	eax,eax
0000235A: E8 FC 03 00 00                                        	call	process_macro
                                                                      instant_macro_finish:
0000235F: 8F 05 D4 A1 01 00                                     	pop	[counter_limit]
00002365: 8F 05 88 A1 01 00                                     	pop	[macro_symbols]
0000236B: 8F 05 58 A1 01 00                                     	pop	[free_additional_memory]
                                                                      instant_macro_done:
00002371: 5B 5E 5A                                              	pop	ebx esi edx
00002374: 80 3B 00                                              	cmp	byte [ebx],0
00002377: 0F 84 D4 F4 FF FF                                     	je	line_preprocessed
0000237D: 89 3D 74 A1 01 00                                     	mov	[current_line],edi
00002383: B9 04 00 00 00                                        	mov	ecx,4
00002388: F3 A5                                                 	rep	movs dword [edi],[esi]
0000238A: F6 05 C1 A2 01 00 0F                                  	test	[macro_status],0Fh
00002391: 74 06                                                 	jz	instant_macro_attached_line
00002393: 66 B8 3B 00                                           	mov	ax,3Bh
00002397: 66 AB                                                 	stos	word [edi]
                                                                      instant_macro_attached_line:
00002399: 89 DE                                                 	mov	esi,ebx
0000239B: 29 DA                                                 	sub	edx,ebx
0000239D: 89 D1                                                 	mov	ecx,edx
0000239F: E8 AC FA FF FF                                        	call	move_data
000023A4: E9 A8 F2 FF FF                                        	jmp	initial_preprocessing_ok
                                                                      precalculate_value:
000023A9: 57                                                    	push	edi
000023AA: E8 73 1A 00 00                                        	call	convert_expression
000023AF: B0 29                                                 	mov	al,')'
000023B1: AA                                                    	stosb
000023B2: 56                                                    	push	esi
000023B3: 8B 74 24 04                                           	mov	esi,[esp+4]
000023B7: C7 05 DC A1 01 00 00 00 00 00                         	mov	[error_line],0
000023C1: C6 05 AC A2 01 00 00                                  	mov	[value_size],0
000023C8: E8 11 41 00 00                                        	call	calculate_expression
000023CD: 83 3D DC A1 01 00 00                                  	cmp	[error_line],0
000023D4: 74 06                                                 	je	value_precalculated
000023D6: FF 25 E0 A1 01 00                                     	jmp	[error]
                                                                      value_precalculated:
000023DC: 8B 07                                                 	mov	eax,[edi]
000023DE: 8B 4F 04                                              	mov	ecx,[edi+4]
000023E1: 99                                                    	cdq
000023E2: 39 CA                                                 	cmp	edx,ecx
000023E4: 0F 85 C2 E5 FF FF                                     	jne	value_out_of_range
000023EA: 3A 57 0D                                              	cmp	dl,[edi+13]
000023ED: 0F 85 B9 E5 FF FF                                     	jne	value_out_of_range
000023F3: 5E 5F                                                 	pop	esi edi
000023F5: C3                                                    	ret
                                                                do_irp:
000023F6: 80 3E 1A                                              	cmp	byte [esi],1Ah
000023F9: 0F 85 03 E5 FF FF                                     	jne	invalid_macro_arguments
000023FF: 0F B6 46 01                                           	movzx	eax,byte [esi+1]
00002403: 8D 74 06 02                                           	lea	esi,[esi+2+eax]
00002407: AC                                                    	lods	byte [esi]
00002408: 80 3D A3 A2 01 00 01                                  	cmp	[base_code],1
0000240F: 77 31                                                 	ja	irps_name_ok
00002411: 3C 3A                                                 	cmp	al,':'
00002413: 74 13                                                 	je	irp_with_default_value
00002415: 3C 3D                                                 	cmp	al,'='
00002417: 74 0F                                                 	je	irp_with_default_value
00002419: 3C 2A                                                 	cmp	al,'*'
0000241B: 75 01                                                 	jne	irp_name_ok
0000241D: AC                                                    	lods	byte [esi]
                                                                      irp_name_ok:
0000241E: 3C 2C                                                 	cmp	al,','
00002420: 0F 85 DC E4 FF FF                                     	jne	invalid_macro_arguments
00002426: EB 3D                                                 	jmp	irp_parameters_start
                                                                      irp_with_default_value:
00002428: 31 ED                                                 	xor	ebp,ebp
0000242A: 80 0D C2 A2 01 00 FF                                  	or	[skip_default_argument_value],-1
00002431: E8 10 F7 FF FF                                        	call	skip_macro_argument_value
00002436: 80 3E 2C                                              	cmp	byte [esi],','
00002439: 0F 85 C3 E4 FF FF                                     	jne	invalid_macro_arguments
0000243F: 46                                                    	inc	esi
00002440: EB 23                                                 	jmp	irp_parameters_start
                                                                      irps_name_ok:
00002442: 3C 2C                                                 	cmp	al,','
00002444: 0F 85 B8 E4 FF FF                                     	jne	invalid_macro_arguments
0000244A: 80 3D A3 A2 01 00 03                                  	cmp	[base_code],3
00002451: 74 12                                                 	je	irp_parameters_start
00002453: 8A 06                                                 	mov	al,[esi]
00002455: 08 C0                                                 	or	al,al
00002457: 0F 84 14 FF FF FF                                     	jz	instant_macro_done
0000245D: 3C 7B                                                 	cmp	al,'{'
0000245F: 0F 84 0C FF FF FF                                     	je	instant_macro_done
                                                                      irp_parameters_start:
00002465: 31 C0                                                 	xor	eax,eax
00002467: FF 35 58 A1 01 00                                     	push	[free_additional_memory]
0000246D: FF 35 88 A1 01 00                                     	push	[macro_symbols]
00002473: A3 88 A1 01 00                                        	mov	[macro_symbols],eax
00002478: FF 35 D4 A1 01 00                                     	push	[counter_limit]
0000247E: A3 D4 A1 01 00                                        	mov	[counter_limit],eax
00002483: A3 8C A1 01 00                                        	mov	[struc_name],eax
00002488: 80 3D A3 A2 01 00 03                                  	cmp	[base_code],3
0000248F: 0F 84 8F 00 00 00                                     	je	get_irpv_parameter
00002495: 89 F3                                                 	mov	ebx,esi
00002497: 80 3D A3 A2 01 00 02                                  	cmp	[base_code],2
0000249E: 74 30                                                 	je	get_irps_parameter
000024A0: 8B 15 98 A1 01 00                                     	mov	edx,[parameters_end]
000024A6: 8A 02                                                 	mov	al,[edx]
000024A8: 50                                                    	push	eax
000024A9: C6 02 00                                              	mov	byte [edx],0
                                                                      get_irp_parameter:
000024AC: FF 05 D4 A1 01 00                                     	inc	[counter_limit]
000024B2: 8B 35 94 A1 01 00                                     	mov	esi,[instant_macro_start]
000024B8: 46                                                    	inc	esi
000024B9: E8 EF FC FF FF                                        	call	get_macro_argument
000024BE: 80 3B 2C                                              	cmp	byte [ebx],','
000024C1: 75 03                                                 	jne	irp_parameters_end
000024C3: 43                                                    	inc	ebx
000024C4: EB E6                                                 	jmp	get_irp_parameter
                                                                      irp_parameters_end:
000024C6: 89 DE                                                 	mov	esi,ebx
000024C8: 58                                                    	pop	eax
000024C9: 88 06                                                 	mov	[esi],al
000024CB: E9 88 FE FF FF                                        	jmp	instant_macro_parameters_ok
                                                                      get_irps_parameter:
000024D0: 8B 35 94 A1 01 00                                     	mov	esi,[instant_macro_start]
000024D6: 46                                                    	inc	esi
000024D7: AC                                                    	lods	byte [esi]
000024D8: 0F B6 C8                                              	movzx	ecx,al
000024DB: FF 05 D4 A1 01 00                                     	inc	[counter_limit]
000024E1: A1 D4 A1 01 00                                        	mov	eax,[counter_limit]
000024E6: E8 1B 08 00 00                                        	call	add_macro_symbol
000024EB: 89 5A 0C                                              	mov	[edx+12],ebx
000024EE: 80 3B 1A                                              	cmp	byte [ebx],1Ah
000024F1: 74 14                                                 	je	irps_symbol
000024F3: 80 3B 22                                              	cmp	byte [ebx],22h
000024F6: 74 07                                                 	je	irps_quoted_string
000024F8: B8 01 00 00 00                                        	mov	eax,1
000024FD: EB 0F                                                 	jmp	irps_parameter_ok
                                                                      irps_quoted_string:
000024FF: 8B 43 01                                              	mov	eax,[ebx+1]
00002502: 83 C0 05                                              	add	eax,1+4
00002505: EB 07                                                 	jmp	irps_parameter_ok
                                                                      irps_symbol:
00002507: 0F B6 43 01                                           	movzx	eax,byte [ebx+1]
0000250B: 83 C0 02                                              	add	eax,1+1
                                                                      irps_parameter_ok:
0000250E: 89 42 08                                              	mov	[edx+8],eax
00002511: 01 C3                                                 	add	ebx,eax
00002513: 80 3B 00                                              	cmp	byte [ebx],0
00002516: 74 05                                                 	je	irps_parameters_end
00002518: 80 3B 7B                                              	cmp	byte [ebx],'{'
0000251B: 75 B3                                                 	jne	get_irps_parameter
                                                                      irps_parameters_end:
0000251D: 89 DE                                                 	mov	esi,ebx
0000251F: E9 34 FE FF FF                                        	jmp	instant_macro_parameters_ok
                                                                      get_irpv_parameter:
00002524: AC                                                    	lods	byte [esi]
00002525: 3C 1A                                                 	cmp	al,1Ah
00002527: 0F 85 D5 E3 FF FF                                     	jne	invalid_macro_arguments
0000252D: AC                                                    	lods	byte [esi]
0000252E: 89 F5                                                 	mov	ebp,esi
00002530: 88 C1                                                 	mov	cl,al
00002532: B5 02                                                 	mov	ch,10b
00002534: E8 1B F3 FF FF                                        	call	get_preprocessor_symbol
00002539: 0F 82 20 FE FF FF                                     	jc	instant_macro_finish
0000253F: 85 D2                                                 	test	edx,edx
00002541: 0F 84 09 E5 FF FF                                     	jz	invalid_use_of_symbol
00002547: 52                                                    	push	edx
                                                                      mark_variable_value:
00002548: FF 05 D4 A1 01 00                                     	inc	[counter_limit]
0000254E: 89 6A 04                                              	mov	[edx+4],ebp
                                                                      next_variable_value:
00002551: 8B 12                                                 	mov	edx,[edx]
00002553: 09 D2                                                 	or	edx,edx
00002555: 74 16                                                 	jz	variable_values_marked
00002557: 8B 42 04                                              	mov	eax,[edx+4]
0000255A: 83 F8 01                                              	cmp	eax,1
0000255D: 76 F2                                                 	jbe	next_variable_value
0000255F: 89 EE                                                 	mov	esi,ebp
00002561: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00002565: 97                                                    	xchg	edi,eax
00002566: F3 A6                                                 	repe	cmps byte [esi],[edi]
00002568: 97                                                    	xchg	edi,eax
00002569: 74 DD                                                 	je	mark_variable_value
0000256B: EB E4                                                 	jmp	next_variable_value
                                                                      variable_values_marked:
0000256D: 5A                                                    	pop	edx
0000256E: FF 35 D4 A1 01 00                                     	push	[counter_limit]
                                                                      add_irpv_value:
00002574: 52                                                    	push	edx
00002575: 8B 35 94 A1 01 00                                     	mov	esi,[instant_macro_start]
0000257B: 46                                                    	inc	esi
0000257C: AC                                                    	lods	byte [esi]
0000257D: 0F B6 C8                                              	movzx	ecx,al
00002580: 8B 44 24 04                                           	mov	eax,[esp+4]
00002584: E8 7D 07 00 00                                        	call	add_macro_symbol
00002589: 89 D3                                                 	mov	ebx,edx
0000258B: 5A                                                    	pop	edx
0000258C: 8B 4A 0C                                              	mov	ecx,[edx+12]
0000258F: 8B 42 08                                              	mov	eax,[edx+8]
00002592: 89 43 0C                                              	mov	[ebx+12],eax
00002595: 89 4B 08                                              	mov	[ebx+8],ecx
                                                                      collect_next_variable_value:
00002598: 8B 12                                                 	mov	edx,[edx]
0000259A: 09 D2                                                 	or	edx,edx
0000259C: 74 0A                                                 	jz	variable_values_collected
0000259E: 3B 6A 04                                              	cmp	ebp,[edx+4]
000025A1: 75 F5                                                 	jne	collect_next_variable_value
000025A3: FF 0C 24                                              	dec	dword [esp]
000025A6: 75 CC                                                 	jnz	add_irpv_value
                                                                      variable_values_collected:
000025A8: 58                                                    	pop	eax
000025A9: 89 EE                                                 	mov	esi,ebp
000025AB: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
000025AF: 01 CE                                                 	add	esi,ecx
000025B1: 80 3E 00                                              	cmp	byte [esi],0
000025B4: 0F 84 9E FD FF FF                                     	je	instant_macro_parameters_ok
000025BA: 80 3E 7B                                              	cmp	byte [esi],'{'
000025BD: 0F 85 3F E3 FF FF                                     	jne	invalid_macro_arguments
000025C3: E9 90 FD FF FF                                        	jmp	instant_macro_parameters_ok
                                                                
                                                                do_match:
000025C8: 89 F3                                                 	mov	ebx,esi
000025CA: E8 85 F7 FF FF                                        	call	skip_pattern
000025CF: E8 C7 00 00 00                                        	call	exact_match
000025D4: 89 FA                                                 	mov	edx,edi
000025D6: 8A 03                                                 	mov	al,[ebx]
000025D8: 3C 1A                                                 	cmp	al,1Ah
000025DA: 74 19                                                 	je	free_match
000025DC: 3C 2C                                                 	cmp	al,','
000025DE: 0F 85 8D FD FF FF                                     	jne	instant_macro_done
000025E4: 3B 35 98 A1 01 00                                     	cmp	esi,[parameters_end]
000025EA: 0F 84 17 01 00 00                                     	je	matched_pattern
000025F0: E9 7C FD FF FF                                        	jmp	instant_macro_done
                                                                      free_match:
000025F5: 83 C2 0C                                              	add	edx,12
000025F8: 3B 15 30 A1 01 00                                     	cmp	edx,[memory_end]
000025FE: 0F 87 8E E2 FF FF                                     	ja	out_of_memory
00002604: 89 5A F4                                              	mov	[edx-12],ebx
00002607: 89 72 F8                                              	mov	[edx-8],esi
0000260A: E8 62 00 00 00                                        	call	skip_match_element
0000260F: 72 36                                                 	jc	try_different_matching
00002611: 89 72 FC                                              	mov	[edx-4],esi
00002614: 0F B6 43 01                                           	movzx	eax,byte [ebx+1]
00002618: 8D 5C 03 02                                           	lea	ebx,[ebx+2+eax]
0000261C: 80 3B 1A                                              	cmp	byte [ebx],1Ah
0000261F: 74 D4                                                 	je	free_match
                                                                      find_exact_match:
00002621: E8 75 00 00 00                                        	call	exact_match
00002626: 3B 35 98 A1 01 00                                     	cmp	esi,[parameters_end]
0000262C: 0F 84 CC 00 00 00                                     	je	end_matching
00002632: 80 3B 1A                                              	cmp	byte [ebx],1Ah
00002635: 74 BE                                                 	je	free_match
00002637: 8B 5A F4                                              	mov	ebx,[edx-12]
0000263A: 0F B6 43 01                                           	movzx	eax,byte [ebx+1]
0000263E: 8D 5C 03 02                                           	lea	ebx,[ebx+2+eax]
00002642: 8B 72 FC                                              	mov	esi,[edx-4]
00002645: EB 1E                                                 	jmp	match_more_elements
                                                                      try_different_matching:
00002647: 83 EA 0C                                              	sub	edx,12
0000264A: 39 FA                                                 	cmp	edx,edi
0000264C: 0F 84 1F FD FF FF                                     	je	instant_macro_done
00002652: 8B 5A F4                                              	mov	ebx,[edx-12]
00002655: 0F B6 43 01                                           	movzx	eax,byte [ebx+1]
00002659: 8D 5C 03 02                                           	lea	ebx,[ebx+2+eax]
0000265D: 80 3B 1A                                              	cmp	byte [ebx],1Ah
00002660: 74 E5                                                 	je	try_different_matching
00002662: 8B 72 FC                                              	mov	esi,[edx-4]
                                                                      match_more_elements:
00002665: E8 07 00 00 00                                        	call	skip_match_element
0000266A: 72 DB                                                 	jc	try_different_matching
0000266C: 89 72 FC                                              	mov	[edx-4],esi
0000266F: EB B0                                                 	jmp	find_exact_match
                                                                      skip_match_element:
00002671: 3B 35 98 A1 01 00                                     	cmp	esi,[parameters_end]
00002677: 74 20                                                 	je	cannot_match
00002679: 8A 06                                                 	mov	al,[esi]
0000267B: 3C 1A                                                 	cmp	al,1Ah
0000267D: 74 10                                                 	je	skip_match_symbol
0000267F: 3C 22                                                 	cmp	al,22h
00002681: 74 04                                                 	je	skip_match_quoted_string
00002683: 83 C6 01                                              	add	esi,1
00002686: C3                                                    	ret
                                                                      skip_match_quoted_string:
00002687: 8B 46 01                                              	mov	eax,[esi+1]
0000268A: 83 C6 05                                              	add	esi,5
0000268D: EB 07                                                 	jmp	skip_match_ok
                                                                      skip_match_symbol:
0000268F: 0F B6 46 01                                           	movzx	eax,byte [esi+1]
00002693: 83 C6 02                                              	add	esi,2
                                                                      skip_match_ok:
00002696: 01 C6                                                 	add	esi,eax
00002698: C3                                                    	ret
                                                                      cannot_match:
00002699: F9                                                    	stc
0000269A: C3                                                    	ret
                                                                      exact_match:
0000269B: 3B 35 98 A1 01 00                                     	cmp	esi,[parameters_end]
000026A1: 74 17                                                 	je	exact_match_complete
000026A3: 8A 26                                                 	mov	ah,[esi]
000026A5: 8A 03                                                 	mov	al,[ebx]
000026A7: 3C 2C                                                 	cmp	al,','
000026A9: 74 0F                                                 	je	exact_match_complete
000026AB: 3C 1A                                                 	cmp	al,1Ah
000026AD: 74 0B                                                 	je	exact_match_complete
000026AF: 3C 3D                                                 	cmp	al,'='
000026B1: 74 08                                                 	je	match_verbatim
000026B3: E8 0D 00 00 00                                        	call	match_elements
000026B8: 74 E1                                                 	je	exact_match
                                                                      exact_match_complete:
000026BA: C3                                                    	ret
                                                                      match_verbatim:
000026BB: 43                                                    	inc	ebx
000026BC: E8 04 00 00 00                                        	call	match_elements
000026C1: 74 D8                                                 	je	exact_match
000026C3: 4B                                                    	dec	ebx
000026C4: C3                                                    	ret
                                                                      match_elements:
000026C5: 8A 03                                                 	mov	al,[ebx]
000026C7: 3C 1A                                                 	cmp	al,1Ah
000026C9: 74 18                                                 	je	match_symbols
000026CB: 3C 22                                                 	cmp	al,22h
000026CD: 74 0C                                                 	je	match_quoted_strings
000026CF: 38 E0                                                 	cmp	al,ah
000026D1: 74 01                                                 	je	symbol_characters_matched
000026D3: C3                                                    	ret
                                                                      symbol_characters_matched:
000026D4: 8D 5B 01                                              	lea	ebx,[ebx+1]
000026D7: 8D 76 01                                              	lea	esi,[esi+1]
000026DA: C3                                                    	ret
                                                                      match_quoted_strings:
000026DB: 8B 4B 01                                              	mov	ecx,[ebx+1]
000026DE: 83 C1 05                                              	add	ecx,5
000026E1: EB 07                                                 	jmp	compare_elements
                                                                      match_symbols:
000026E3: 0F B6 4B 01                                           	movzx	ecx,byte [ebx+1]
000026E7: 83 C1 02                                              	add	ecx,2
                                                                      compare_elements:
000026EA: 89 F0                                                 	mov	eax,esi
000026EC: 89 FD                                                 	mov	ebp,edi
000026EE: 89 DF                                                 	mov	edi,ebx
000026F0: F3 A6                                                 	repe	cmps byte [esi],[edi]
000026F2: 75 05                                                 	jne	elements_mismatch
000026F4: 89 FB                                                 	mov	ebx,edi
000026F6: 89 EF                                                 	mov	edi,ebp
000026F8: C3                                                    	ret
                                                                      elements_mismatch:
000026F9: 89 C6                                                 	mov	esi,eax
000026FB: 89 EF                                                 	mov	edi,ebp
000026FD: C3                                                    	ret
                                                                      end_matching:
000026FE: 80 3B 2C                                              	cmp	byte [ebx],','
00002701: 0F 85 6A FC FF FF                                     	jne	instant_macro_done
                                                                      matched_pattern:
00002707: 31 C0                                                 	xor	eax,eax
00002709: FF 35 58 A1 01 00                                     	push	[free_additional_memory]
0000270F: FF 35 88 A1 01 00                                     	push	[macro_symbols]
00002715: A3 88 A1 01 00                                        	mov	[macro_symbols],eax
0000271A: FF 35 D4 A1 01 00                                     	push	[counter_limit]
00002720: A3 D4 A1 01 00                                        	mov	[counter_limit],eax
00002725: A3 8C A1 01 00                                        	mov	[struc_name],eax
0000272A: 56 57 52                                              	push	esi edi edx
                                                                      add_matched_symbol:
0000272D: 3B 3C 24                                              	cmp	edi,[esp]
00002730: 74 21                                                 	je	matched_symbols_ok
00002732: 8B 37                                                 	mov	esi,[edi]
00002734: 46                                                    	inc	esi
00002735: AC                                                    	lods	byte [esi]
00002736: 0F B6 C8                                              	movzx	ecx,al
00002739: 31 C0                                                 	xor	eax,eax
0000273B: E8 C6 05 00 00                                        	call	add_macro_symbol
00002740: 8B 47 04                                              	mov	eax,[edi+4]
00002743: 89 42 0C                                              	mov	dword [edx+12],eax
00002746: 8B 4F 08                                              	mov	ecx,[edi+8]
00002749: 29 C1                                                 	sub	ecx,eax
0000274B: 89 4A 08                                              	mov	dword [edx+8],ecx
0000274E: 83 C7 0C                                              	add	edi,12
00002751: EB DA                                                 	jmp	add_matched_symbol
                                                                      matched_symbols_ok:
00002753: 5A 5F 5E                                              	pop	edx edi esi
00002756: E9 FD FB FF FF                                        	jmp	instant_macro_parameters_ok
                                                                
                                                                process_macro:
0000275B: FF 35 C1 A2 01 00                                     	push	dword [macro_status]
00002761: 80 0D C1 A2 01 00 10                                  	or	[macro_status],10h
00002768: FF 35 D0 A1 01 00                                     	push	[counter]
0000276E: FF 35 7C A1 01 00                                     	push	[macro_block]
00002774: FF 35 80 A1 01 00                                     	push	[macro_block_line]
0000277A: FF 35 84 A1 01 00                                     	push	[macro_block_line_number]
00002780: FF 35 90 A1 01 00                                     	push	[struc_label]
00002786: FF 35 8C A1 01 00                                     	push	[struc_name]
0000278C: 50                                                    	push	eax
0000278D: FF 35 74 A1 01 00                                     	push	[current_line]
00002793: AC                                                    	lods	byte [esi]
00002794: 3C 7B                                                 	cmp	al,'{'
00002796: 74 29                                                 	je	macro_instructions_start
00002798: 08 C0                                                 	or	al,al
0000279A: 0F 85 76 E1 FF FF                                     	jnz	unexpected_characters
                                                                      find_macro_instructions:
000027A0: 89 35 78 A1 01 00                                     	mov	[macro_line],esi
000027A6: 83 C6 12                                              	add	esi,16+2
000027A9: AC                                                    	lods	byte [esi]
000027AA: 08 C0                                                 	or	al,al
000027AC: 74 F2                                                 	jz	find_macro_instructions
000027AE: 3C 7B                                                 	cmp	al,'{'
000027B0: 74 0F                                                 	je	macro_instructions_start
000027B2: 3C 3B                                                 	cmp	al,3Bh
000027B4: 0F 85 5C E1 FF FF                                     	jne	unexpected_characters
000027BA: E8 E0 02 00 00                                        	call	skip_foreign_symbol
000027BF: EB DF                                                 	jmp	find_macro_instructions
                                                                      macro_instructions_start:
000027C1: B9 00 00 00 80                                        	mov	ecx,80000000h
000027C6: 89 35 7C A1 01 00                                     	mov	[macro_block],esi
000027CC: A1 78 A1 01 00                                        	mov	eax,[macro_line]
000027D1: A3 80 A1 01 00                                        	mov	[macro_block_line],eax
000027D6: 89 0D 84 A1 01 00                                     	mov	[macro_block_line_number],ecx
000027DC: 31 C0                                                 	xor	eax,eax
000027DE: A3 D0 A1 01 00                                        	mov	[counter],eax
000027E3: 39 05 D4 A1 01 00                                     	cmp	[counter_limit],eax
000027E9: 74 06                                                 	je	process_macro_line
000027EB: FF 05 D0 A1 01 00                                     	inc	[counter]
                                                                      process_macro_line:
000027F1: AC                                                    	lods	byte [esi]
000027F2: 08 C0                                                 	or	al,al
000027F4: 0F 84 D8 02 00 00                                     	jz	process_next_line
000027FA: 3C 7D                                                 	cmp	al,'}'
000027FC: 0F 84 DF 02 00 00                                     	je	macro_block_processed
00002802: 4E                                                    	dec	esi
00002803: 89 3D 74 A1 01 00                                     	mov	[current_line],edi
00002809: 8D 47 10                                              	lea	eax,[edi+10h]
0000280C: 3B 05 30 A1 01 00                                     	cmp	eax,[memory_end]
00002812: 0F 83 7A E0 FF FF                                     	jae	out_of_memory
00002818: 8B 44 24 04                                           	mov	eax,[esp+4]
0000281C: 09 C0                                                 	or	eax,eax
0000281E: 74 10                                                 	jz	instant_macro_line_header
00002820: AB                                                    	stos	dword [edi]
00002821: 89 C8                                                 	mov	eax,ecx
00002823: AB                                                    	stos	dword [edi]
00002824: 8B 04 24                                              	mov	eax,[esp]
00002827: AB                                                    	stos	dword [edi]
00002828: A1 78 A1 01 00                                        	mov	eax,[macro_line]
0000282D: AB                                                    	stos	dword [edi]
0000282E: EB 29                                                 	jmp	macro_line_header_ok
                                                                      instant_macro_line_header:
00002830: 8B 04 24                                              	mov	eax,[esp]
00002833: 83 C0 10                                              	add	eax,16
                                                                      find_defining_directive:
00002836: 40                                                    	inc	eax
00002837: 80 78 FF 3B                                           	cmp	byte [eax-1],3Bh
0000283B: 74 11                                                 	je	defining_directive_ok
0000283D: 80 78 FF 1A                                           	cmp	byte [eax-1],1Ah
00002841: 75 F3                                                 	jne	find_defining_directive
00002843: 50                                                    	push	eax
00002844: 0F B6 00                                              	movzx	eax,byte [eax]
00002847: 40                                                    	inc	eax
00002848: 01 04 24                                              	add	[esp],eax
0000284B: 58                                                    	pop	eax
0000284C: EB E8                                                 	jmp	find_defining_directive
                                                                      defining_directive_ok:
0000284E: AB                                                    	stos	dword [edi]
0000284F: 89 C8                                                 	mov	eax,ecx
00002851: AB                                                    	stos	dword [edi]
00002852: A1 78 A1 01 00                                        	mov	eax,[macro_line]
00002857: AB                                                    	stos	dword [edi]
00002858: AB                                                    	stos	dword [edi]
                                                                      macro_line_header_ok:
00002859: 80 0D C1 A2 01 00 20                                  	or	[macro_status],20h
00002860: 53 51                                                 	push	ebx ecx
00002862: F6 05 C1 A2 01 00 0F                                  	test	[macro_status],0Fh
00002869: 74 06                                                 	jz	process_macro_line_element
0000286B: 66 B8 3B 00                                           	mov	ax,3Bh
0000286F: 66 AB                                                 	stos	word [edi]
                                                                      process_macro_line_element:
00002871: 8D 87 00 01 00 00                                     	lea	eax,[edi+100h]
00002877: 3B 05 30 A1 01 00                                     	cmp	eax,[memory_end]
0000287D: 0F 83 0F E0 FF FF                                     	jae	out_of_memory
00002883: AC                                                    	lods	byte [esi]
00002884: 3C 7D                                                 	cmp	al,'}'
00002886: 0F 84 35 02 00 00                                     	je	macro_line_processed
0000288C: 08 C0                                                 	or	al,al
0000288E: 0F 84 2D 02 00 00                                     	jz	macro_line_processed
00002894: 3C 1A                                                 	cmp	al,1Ah
00002896: 74 20                                                 	je	process_macro_symbol
00002898: 3C 3B                                                 	cmp	al,3Bh
0000289A: 0F 84 1C 02 00 00                                     	je	macro_foreign_line
000028A0: 80 25 C1 A2 01 00 DF                                  	and	[macro_status],not 20h
000028A7: AA                                                    	stos	byte [edi]
000028A8: 3C 22                                                 	cmp	al,22h
000028AA: 75 C5                                                 	jne	process_macro_line_element
                                                                      copy_macro_string:
000028AC: 8B 0E                                                 	mov	ecx,[esi]
000028AE: 83 C1 04                                              	add	ecx,4
000028B1: E8 9A F5 FF FF                                        	call	move_data
000028B6: EB B9                                                 	jmp	process_macro_line_element
                                                                      process_macro_symbol:
000028B8: 56 57                                                 	push	esi edi
000028BA: F6 05 C1 A2 01 00 20                                  	test	[macro_status],20h
000028C1: 74 1F                                                 	jz	not_macro_directive
000028C3: 0F B6 0E                                              	movzx	ecx,byte [esi]
000028C6: 46                                                    	inc	esi
000028C7: BF 2A 45 01 00                                        	mov	edi,macro_directives
000028CC: E8 BA EC FF FF                                        	call	get_directive
000028D1: 73 03                                                 	jnc	process_macro_directive
000028D3: 4E                                                    	dec	esi
000028D4: EB 0C                                                 	jmp	not_macro_directive
                                                                      process_macro_directive:
000028D6: 89 C2                                                 	mov	edx,eax
000028D8: 5F 58                                                 	pop	edi eax
000028DA: C6 07 00                                              	mov	byte [edi],0
000028DD: 47                                                    	inc	edi
000028DE: 59 5B                                                 	pop	ecx ebx
000028E0: FF E2                                                 	jmp	near edx
                                                                      not_macro_directive:
000028E2: 80 25 C1 A2 01 00 DF                                  	and	[macro_status],not 20h
000028E9: 0F B6 0E                                              	movzx	ecx,byte [esi]
000028EC: 46                                                    	inc	esi
000028ED: A1 D0 A1 01 00                                        	mov	eax,[counter]
000028F2: E8 C2 03 00 00                                        	call	get_macro_symbol
000028F7: 73 35                                                 	jnc	group_macro_symbol
000028F9: 31 C0                                                 	xor	eax,eax
000028FB: 39 05 D0 A1 01 00                                     	cmp	[counter],eax
00002901: 74 4C                                                 	je	multiple_macro_symbol_values
00002903: E8 B1 03 00 00                                        	call	get_macro_symbol
00002908: 0F 82 11 01 00 00                                     	jc	not_macro_symbol
                                                                      replace_macro_symbol:
0000290E: 5F 58                                                 	pop	edi eax
00002910: 8B 4A 08                                              	mov	ecx,[edx+8]
00002913: 8B 52 0C                                              	mov	edx,[edx+12]
00002916: 09 D2                                                 	or	edx,edx
00002918: 74 7E                                                 	jz	replace_macro_counter
0000291A: 81 E1 FF FF FF 7F                                     	and	ecx,not 80000000h
00002920: 87 F2                                                 	xchg	esi,edx
00002922: E8 29 F5 FF FF                                        	call	move_data
00002927: 89 D6                                                 	mov	esi,edx
00002929: E9 43 FF FF FF                                        	jmp	process_macro_line_element
                                                                      group_macro_symbol:
0000292E: 31 C0                                                 	xor	eax,eax
00002930: 39 05 D0 A1 01 00                                     	cmp	[counter],eax
00002936: 74 D6                                                 	je	replace_macro_symbol
00002938: 56 52                                                 	push	esi edx
0000293A: 29 CE                                                 	sub	esi,ecx
0000293C: E8 78 03 00 00                                        	call	get_macro_symbol
00002941: 89 D3                                                 	mov	ebx,edx
00002943: 5A 5E                                                 	pop	edx esi
00002945: 72 C7                                                 	jc	replace_macro_symbol
00002947: 39 DA                                                 	cmp	edx,ebx
00002949: 77 C3                                                 	ja	replace_macro_symbol
0000294B: 89 DA                                                 	mov	edx,ebx
0000294D: EB BF                                                 	jmp	replace_macro_symbol
                                                                      multiple_macro_symbol_values:
0000294F: 40                                                    	inc	eax
00002950: 50                                                    	push	eax
00002951: E8 63 03 00 00                                        	call	get_macro_symbol
00002956: 58                                                    	pop	eax
00002957: 0F 82 C2 00 00 00                                     	jc	not_macro_symbol
0000295D: 5F                                                    	pop	edi
0000295E: 51                                                    	push	ecx
0000295F: 8B 4A 08                                              	mov	ecx,[edx+8]
00002962: 8B 52 0C                                              	mov	edx,[edx+12]
00002965: 87 F2                                                 	xchg	esi,edx
00002967: 0F BA F1 1F                                           	btr	ecx,31
0000296B: 72 04                                                 	jc	enclose_macro_symbol_value
0000296D: F3 A4                                                 	rep	movs byte [edi],[esi]
0000296F: EB 0A                                                 	jmp	macro_symbol_value_ok
                                                                      enclose_macro_symbol_value:
00002971: C6 07 3C                                              	mov	byte [edi],'<'
00002974: 47                                                    	inc	edi
00002975: F3 A4                                                 	rep	movs byte [edi],[esi]
00002977: C6 07 3E                                              	mov	byte [edi],'>'
0000297A: 47                                                    	inc	edi
                                                                      macro_symbol_value_ok:
0000297B: 3B 05 D4 A1 01 00                                     	cmp	eax,[counter_limit]
00002981: 74 0C                                                 	je	multiple_macro_symbol_values_ok
00002983: C6 07 2C                                              	mov	byte [edi],','
00002986: 47                                                    	inc	edi
00002987: 89 D6                                                 	mov	esi,edx
00002989: 59                                                    	pop	ecx
0000298A: 57                                                    	push	edi
0000298B: 29 CE                                                 	sub	esi,ecx
0000298D: EB C0                                                 	jmp	multiple_macro_symbol_values
                                                                      multiple_macro_symbol_values_ok:
0000298F: 59 58                                                 	pop	ecx eax
00002991: 89 D6                                                 	mov	esi,edx
00002993: E9 D9 FE FF FF                                        	jmp	process_macro_line_element
                                                                      replace_macro_counter:
00002998: A1 D0 A1 01 00                                        	mov	eax,[counter]
0000299D: 25 FF FF FF 7F                                        	and	eax,not 80000000h
000029A2: 74 0D                                                 	jz	group_macro_counter
000029A4: 01 C1                                                 	add	ecx,eax
000029A6: 49                                                    	dec	ecx
000029A7: E8 27 00 00 00                                        	call	store_number_symbol
000029AC: E9 C0 FE FF FF                                        	jmp	process_macro_line_element
                                                                      group_macro_counter:
000029B1: 89 CA                                                 	mov	edx,ecx
000029B3: 31 C9                                                 	xor	ecx,ecx
                                                                      multiple_macro_counter_values:
000029B5: 51 52                                                 	push	ecx edx
000029B7: 01 D1                                                 	add	ecx,edx
000029B9: E8 15 00 00 00                                        	call	store_number_symbol
000029BE: 5A 59                                                 	pop	edx ecx
000029C0: 41                                                    	inc	ecx
000029C1: 3B 0D D4 A1 01 00                                     	cmp	ecx,[counter_limit]
000029C7: 0F 84 A4 FE FF FF                                     	je	process_macro_line_element
000029CD: C6 07 2C                                              	mov	byte [edi],','
000029D0: 47                                                    	inc	edi
000029D1: EB E2                                                 	jmp	multiple_macro_counter_values
                                                                      store_number_symbol:
000029D3: 83 F9 00                                              	cmp	ecx,0
000029D6: 7D 05                                                 	jge	numer_symbol_sign_ok
000029D8: F7 D9                                                 	neg	ecx
000029DA: B0 2D                                                 	mov	al,'-'
000029DC: AA                                                    	stos	byte [edi]
                                                                      numer_symbol_sign_ok:
000029DD: 66 B8 1A 00                                           	mov	ax,1Ah
000029E1: 66 AB                                                 	stos	word [edi]
000029E3: 57                                                    	push	edi
000029E4: 89 C8                                                 	mov	eax,ecx
000029E6: B9 00 CA 9A 3B                                        	mov	ecx,1000000000
000029EB: 31 D2                                                 	xor	edx,edx
000029ED: 30 DB                                                 	xor	bl,bl
                                                                      store_number_digits:
000029EF: F7 F1                                                 	div	ecx
000029F1: 52                                                    	push	edx
000029F2: 08 DB                                                 	or	bl,bl
000029F4: 75 0B                                                 	jnz	store_number_digit
000029F6: 83 F9 01                                              	cmp	ecx,1
000029F9: 74 06                                                 	je	store_number_digit
000029FB: 08 C0                                                 	or	al,al
000029FD: 74 05                                                 	jz	number_digit_ok
000029FF: F6 D3                                                 	not	bl
                                                                      store_number_digit:
00002A01: 04 30                                                 	add	al,30h
00002A03: AA                                                    	stos	byte [edi]
                                                                      number_digit_ok:
00002A04: 89 C8                                                 	mov	eax,ecx
00002A06: 31 D2                                                 	xor	edx,edx
00002A08: B9 0A 00 00 00                                        	mov	ecx,10
00002A0D: F7 F1                                                 	div	ecx
00002A0F: 89 C1                                                 	mov	ecx,eax
00002A11: 58                                                    	pop	eax
00002A12: 09 C9                                                 	or	ecx,ecx
00002A14: 75 D9                                                 	jnz	store_number_digits
00002A16: 5B                                                    	pop	ebx
00002A17: 89 F8                                                 	mov	eax,edi
00002A19: 29 D8                                                 	sub	eax,ebx
00002A1B: 88 43 FF                                              	mov	[ebx-1],al
00002A1E: C3                                                    	ret
                                                                      not_macro_symbol:
00002A1F: 5F 5E                                                 	pop	edi esi
00002A21: B0 1A                                                 	mov	al,1Ah
00002A23: AA                                                    	stos	byte [edi]
00002A24: 8A 06                                                 	mov	al,[esi]
00002A26: 46                                                    	inc	esi
00002A27: AA                                                    	stos	byte [edi]
00002A28: 80 3E 2E                                              	cmp	byte [esi],'.'
00002A2B: 75 1F                                                 	jne	copy_raw_symbol
00002A2D: 8B 5C 24 10                                           	mov	ebx,[esp+8+8]
00002A31: 09 DB                                                 	or	ebx,ebx
00002A33: 74 17                                                 	jz	copy_raw_symbol
00002A35: 3C 01                                                 	cmp	al,1
00002A37: 74 1D                                                 	je	copy_struc_name
00002A39: 87 F3                                                 	xchg	esi,ebx
00002A3B: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00002A3F: 00 4F FF                                              	add	[edi-1],cl
00002A42: 0F 82 0F E0 FF FF                                     	jc	name_too_long
00002A48: F3 A4                                                 	rep	movs byte [edi],[esi]
00002A4A: 87 F3                                                 	xchg	esi,ebx
                                                                      copy_raw_symbol:
00002A4C: 0F B6 C8                                              	movzx	ecx,al
00002A4F: F3 A4                                                 	rep	movs byte [edi],[esi]
00002A51: E9 1B FE FF FF                                        	jmp	process_macro_line_element
                                                                      copy_struc_name:
00002A56: 46                                                    	inc	esi
00002A57: 87 F3                                                 	xchg	esi,ebx
00002A59: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00002A5D: 88 4F FF                                              	mov	[edi-1],cl
00002A60: F3 A4                                                 	rep	movs byte [edi],[esi]
00002A62: 87 F3                                                 	xchg	esi,ebx
00002A64: 8B 44 24 14                                           	mov	eax,[esp+8+12]
00002A68: 80 38 3B                                              	cmp	byte [eax],3Bh
00002A6B: 0F 84 00 FE FF FF                                     	je	process_macro_line_element
00002A71: 80 38 1A                                              	cmp	byte [eax],1Ah
00002A74: 75 08                                                 	jne	disable_replaced_struc_name
00002A76: C6 00 3B                                              	mov	byte [eax],3Bh
00002A79: E9 F3 FD FF FF                                        	jmp	process_macro_line_element
                                                                      disable_replaced_struc_name:
00002A7E: 8B 5C 24 10                                           	mov	ebx,[esp+8+8]
00002A82: 56 57                                                 	push	esi edi
00002A84: 8D 7B FD                                              	lea	edi,[ebx-3]
00002A87: 8D 77 FE                                              	lea	esi,[edi-2]
00002A8A: 8D 4E 01                                              	lea	ecx,[esi+1]
00002A8D: 29 C1                                                 	sub	ecx,eax
00002A8F: FD                                                    	std
00002A90: F3 A4                                                 	rep	movs byte [edi],[esi]
00002A92: FC                                                    	cld
00002A93: 66 C7 00 3B 00                                        	mov	word [eax],3Bh
00002A98: 5F 5E                                                 	pop	edi esi
00002A9A: E9 D2 FD FF FF                                        	jmp	process_macro_line_element
                                                                      skip_foreign_symbol:
00002A9F: AC                                                    	lods	byte [esi]
00002AA0: 0F B6 C0                                              	movzx	eax,al
00002AA3: 01 C6                                                 	add	esi,eax
                                                                      skip_foreign_line:
00002AA5: AC                                                    	lods	byte [esi]
00002AA6: 3C 1A                                                 	cmp	al,1Ah
00002AA8: 74 F5                                                 	je	skip_foreign_symbol
00002AAA: 3C 3B                                                 	cmp	al,3Bh
00002AAC: 74 F1                                                 	je	skip_foreign_symbol
00002AAE: 3C 22                                                 	cmp	al,22h
00002AB0: 74 05                                                 	je	skip_foreign_string
00002AB2: 08 C0                                                 	or	al,al
00002AB4: 75 EF                                                 	jnz	skip_foreign_line
00002AB6: C3                                                    	ret
                                                                      skip_foreign_string:
00002AB7: AD                                                    	lods	dword [esi]
00002AB8: 01 C6                                                 	add	esi,eax
00002ABA: EB E9                                                 	jmp	skip_foreign_line
                                                                      macro_foreign_line:
00002ABC: E8 DE FF FF FF                                        	call	skip_foreign_symbol
                                                                      macro_line_processed:
00002AC1: C6 07 00                                              	mov	byte [edi],0
00002AC4: 47                                                    	inc	edi
00002AC5: 50                                                    	push	eax
00002AC6: E8 10 EB FF FF                                        	call	preprocess_line
00002ACB: 58                                                    	pop	eax
00002ACC: 59 5B                                                 	pop	ecx ebx
00002ACE: 3C 7D                                                 	cmp	al,'}'
00002AD0: 74 0F                                                 	je	macro_block_processed
                                                                      process_next_line:
00002AD2: 41                                                    	inc	ecx
00002AD3: 89 35 78 A1 01 00                                     	mov	[macro_line],esi
00002AD9: 83 C6 12                                              	add	esi,16+2
00002ADC: E9 10 FD FF FF                                        	jmp	process_macro_line
                                                                      macro_block_processed:
00002AE1: E8 7F 01 00 00                                        	call	close_macro_block
00002AE6: 0F 82 05 FD FF FF                                     	jc	process_macro_line
00002AEC: 8F 05 74 A1 01 00                                     	pop	[current_line]
00002AF2: 83 C4 0C                                              	add	esp,12
00002AF5: 8F 05 84 A1 01 00                                     	pop	[macro_block_line_number]
00002AFB: 8F 05 80 A1 01 00                                     	pop	[macro_block_line]
00002B01: 8F 05 7C A1 01 00                                     	pop	[macro_block]
00002B07: 8F 05 D0 A1 01 00                                     	pop	[counter]
00002B0D: 58                                                    	pop	eax
00002B0E: 24 F0                                                 	and	al,0F0h
00002B10: 80 25 C1 A2 01 00 0F                                  	and	[macro_status],0Fh
00002B17: 08 05 C1 A2 01 00                                     	or	[macro_status],al
00002B1D: C3                                                    	ret
                                                                
                                                                local_symbols:
00002B1E: AC                                                    	lods	byte [esi]
00002B1F: 3C 1A                                                 	cmp	al,1Ah
00002B21: 0F 85 F9 DD FF FF                                     	jne	invalid_argument
00002B27: C6 47 FF 3B                                           	mov	byte [edi-1],3Bh
00002B2B: 30 C0                                                 	xor	al,al
00002B2D: AA                                                    	stos	byte [edi]
                                                                      make_local_symbol:
00002B2E: 51                                                    	push	ecx
00002B2F: AC                                                    	lods	byte [esi]
00002B30: 0F B6 C8                                              	movzx	ecx,al
00002B33: A1 D0 A1 01 00                                        	mov	eax,[counter]
00002B38: E8 C9 01 00 00                                        	call	add_macro_symbol
00002B3D: 89 7A 0C                                              	mov	[edx+12],edi
00002B40: 0F B6 05 A0 A1 01 00                                  	movzx	eax,[locals_counter]
00002B47: 01 C8                                                 	add	eax,ecx
00002B49: 40                                                    	inc	eax
00002B4A: 3D 00 01 00 00                                        	cmp	eax,100h
00002B4F: 0F 83 02 DF FF FF                                     	jae	name_too_long
00002B55: 8D 6C 07 02                                           	lea	ebp,[edi+2+eax]
00002B59: 3B 2D 30 A1 01 00                                     	cmp	ebp,[memory_end]
00002B5F: 0F 83 2D DD FF FF                                     	jae	out_of_memory
00002B65: 88 C4                                                 	mov	ah,al
00002B67: B0 1A                                                 	mov	al,1Ah
00002B69: 66 AB                                                 	stos	word [edi]
00002B6B: F3 A4                                                 	rep	movs byte [edi],[esi]
00002B6D: B0 3F                                                 	mov	al,'?'
00002B6F: AA                                                    	stos	byte [edi]
00002B70: 56                                                    	push	esi
00002B71: BE A1 A1 01 00                                        	mov	esi,locals_counter+1
00002B76: 0F B6 0D A0 A1 01 00                                  	movzx	ecx,[locals_counter]
00002B7D: F3 A4                                                 	rep	movs byte [edi],[esi]
00002B7F: 5E                                                    	pop	esi
00002B80: 89 F8                                                 	mov	eax,edi
00002B82: 2B 42 0C                                              	sub	eax,[edx+12]
00002B85: 89 42 08                                              	mov	[edx+8],eax
00002B88: 30 C0                                                 	xor	al,al
00002B8A: AA                                                    	stos	byte [edi]
00002B8B: B8 A0 A1 01 00                                        	mov	eax,locals_counter
00002B90: 0F B6 08                                              	movzx	ecx,byte [eax]
                                                                      counter_loop:
00002B93: FE 04 08                                              	inc	byte [eax+ecx]
00002B96: 80 3C 08 3A                                           	cmp	byte [eax+ecx],'9'+1
00002B9A: 72 2B                                                 	jb	counter_ok
00002B9C: 75 06                                                 	jne	letter_digit
00002B9E: C6 04 08 41                                           	mov	byte [eax+ecx],'A'
00002BA2: EB 23                                                 	jmp	counter_ok
                                                                      letter_digit:
00002BA4: 80 3C 08 5B                                           	cmp	byte [eax+ecx],'Z'+1
00002BA8: 72 1D                                                 	jb	counter_ok
00002BAA: 75 06                                                 	jne	small_letter_digit
00002BAC: C6 04 08 61                                           	mov	byte [eax+ecx],'a'
00002BB0: EB 15                                                 	jmp	counter_ok
                                                                      small_letter_digit:
00002BB2: 80 3C 08 7B                                           	cmp	byte [eax+ecx],'z'+1
00002BB6: 72 0F                                                 	jb	counter_ok
00002BB8: C6 04 08 30                                           	mov	byte [eax+ecx],'0'
00002BBC: E2 D5                                                 	loop	counter_loop
00002BBE: FE 00                                                 	inc	byte [eax]
00002BC0: 0F B6 08                                              	movzx	ecx,byte [eax]
00002BC3: C6 04 08 30                                           	mov	byte [eax+ecx],'0'
                                                                      counter_ok:
00002BC7: 59                                                    	pop	ecx
00002BC8: AC                                                    	lods	byte [esi]
00002BC9: 3C 7D                                                 	cmp	al,'}'
00002BCB: 0F 84 10 FF FF FF                                     	je	macro_block_processed
00002BD1: 08 C0                                                 	or	al,al
00002BD3: 0F 84 F9 FE FF FF                                     	jz	process_next_line
00002BD9: 3C 2C                                                 	cmp	al,','
00002BDB: 0F 85 A7 DE FF FF                                     	jne	extra_characters_on_line
00002BE1: 4F                                                    	dec	edi
00002BE2: AC                                                    	lods	byte [esi]
00002BE3: 3C 1A                                                 	cmp	al,1Ah
00002BE5: 0F 84 43 FF FF FF                                     	je	make_local_symbol
00002BEB: E9 30 DD FF FF                                        	jmp	invalid_argument
                                                                common_block:
00002BF0: E8 70 00 00 00                                        	call	close_macro_block
00002BF5: 0F 82 F6 FB FF FF                                     	jc	process_macro_line
00002BFB: C7 05 D0 A1 01 00 00 00 00 00                         	mov	[counter],0
00002C05: EB 43                                                 	jmp	new_macro_block
                                                                forward_block:
00002C07: 83 3D D4 A1 01 00 00                                  	cmp	[counter_limit],0
00002C0E: 74 E0                                                 	je	common_block
00002C10: E8 50 00 00 00                                        	call	close_macro_block
00002C15: 0F 82 D6 FB FF FF                                     	jc	process_macro_line
00002C1B: C7 05 D0 A1 01 00 01 00 00 00                         	mov	[counter],1
00002C25: EB 23                                                 	jmp	new_macro_block
                                                                reverse_block:
00002C27: 83 3D D4 A1 01 00 00                                  	cmp	[counter_limit],0
00002C2E: 74 C0                                                 	je	common_block
00002C30: E8 30 00 00 00                                        	call	close_macro_block
00002C35: 0F 82 B6 FB FF FF                                     	jc	process_macro_line
00002C3B: A1 D4 A1 01 00                                        	mov	eax,[counter_limit]
00002C40: 0D 00 00 00 80                                        	or	eax,80000000h
00002C45: A3 D0 A1 01 00                                        	mov	[counter],eax
                                                                      new_macro_block:
00002C4A: 89 35 7C A1 01 00                                     	mov	[macro_block],esi
00002C50: A1 78 A1 01 00                                        	mov	eax,[macro_line]
00002C55: A3 80 A1 01 00                                        	mov	[macro_block_line],eax
00002C5A: 89 0D 84 A1 01 00                                     	mov	[macro_block_line_number],ecx
00002C60: E9 8C FB FF FF                                        	jmp	process_macro_line
                                                                close_macro_block:
00002C65: 3B 35 7C A1 01 00                                     	cmp	esi,[macro_block]
00002C6B: 74 4A                                                 	je	block_closed
00002C6D: 83 3D D0 A1 01 00 00                                  	cmp	[counter],0
00002C74: 74 41                                                 	je	block_closed
00002C76: 7C 15                                                 	jl	reverse_counter
00002C78: A1 D0 A1 01 00                                        	mov	eax,[counter]
00002C7D: 3B 05 D4 A1 01 00                                     	cmp	eax,[counter_limit]
00002C83: 74 32                                                 	je	block_closed
00002C85: FF 05 D0 A1 01 00                                     	inc	[counter]
00002C8B: EB 12                                                 	jmp	continue_block
                                                                      reverse_counter:
00002C8D: A1 D0 A1 01 00                                        	mov	eax,[counter]
00002C92: 48                                                    	dec	eax
00002C93: 3D 00 00 00 80                                        	cmp	eax,80000000h
00002C98: 74 1D                                                 	je	block_closed
00002C9A: A3 D0 A1 01 00                                        	mov	[counter],eax
                                                                      continue_block:
00002C9F: 8B 35 7C A1 01 00                                     	mov	esi,[macro_block]
00002CA5: A1 80 A1 01 00                                        	mov	eax,[macro_block_line]
00002CAA: A3 78 A1 01 00                                        	mov	[macro_line],eax
00002CAF: 8B 0D 84 A1 01 00                                     	mov	ecx,[macro_block_line_number]
00002CB5: F9                                                    	stc
00002CB6: C3                                                    	ret
                                                                      block_closed:
00002CB7: F8                                                    	clc
00002CB8: C3                                                    	ret
                                                                get_macro_symbol:
00002CB9: 51                                                    	push	ecx
00002CBA: E8 20 00 00 00                                        	call	find_macro_symbol_leaf
00002CBF: 72 1B                                                 	jc	macro_symbol_not_found
00002CC1: 8B 13                                                 	mov	edx,[ebx]
00002CC3: 89 F3                                                 	mov	ebx,esi
                                                                      try_macro_symbol:
00002CC5: 09 D2                                                 	or	edx,edx
00002CC7: 74 13                                                 	jz	macro_symbol_not_found
00002CC9: 8B 0C 24                                              	mov	ecx,[esp]
00002CCC: 8B 7A 04                                              	mov	edi,[edx+4]
00002CCF: F3 A6                                                 	repe	cmps byte [esi],[edi]
00002CD1: 74 06                                                 	je	macro_symbol_found
00002CD3: 89 DE                                                 	mov	esi,ebx
00002CD5: 8B 12                                                 	mov	edx,[edx]
00002CD7: EB EC                                                 	jmp	try_macro_symbol
                                                                      macro_symbol_found:
00002CD9: 59                                                    	pop	ecx
00002CDA: F8                                                    	clc
00002CDB: C3                                                    	ret
                                                                      macro_symbol_not_found:
00002CDC: 59                                                    	pop	ecx
00002CDD: F9                                                    	stc
00002CDE: C3                                                    	ret
                                                                      find_macro_symbol_leaf:
00002CDF: C1 E0 08                                              	shl	eax,8
00002CE2: 88 C8                                                 	mov	al,cl
00002CE4: 89 C5                                                 	mov	ebp,eax
00002CE6: BB 88 A1 01 00                                        	mov	ebx,macro_symbols
                                                                      follow_macro_symbols_tree:
00002CEB: 8B 13                                                 	mov	edx,[ebx]
00002CED: 09 D2                                                 	or	edx,edx
00002CEF: 74 13                                                 	jz	no_such_macro_symbol
00002CF1: 31 C0                                                 	xor	eax,eax
00002CF3: D1 ED                                                 	shr	ebp,1
00002CF5: 83 D0 00                                              	adc	eax,0
00002CF8: 8D 1C 82                                              	lea	ebx,[edx+eax*4]
00002CFB: 09 ED                                                 	or	ebp,ebp
00002CFD: 75 EC                                                 	jnz	follow_macro_symbols_tree
00002CFF: 83 C3 08                                              	add	ebx,8
00002D02: F8                                                    	clc
00002D03: C3                                                    	ret
                                                                      no_such_macro_symbol:
00002D04: F9                                                    	stc
00002D05: C3                                                    	ret
                                                                add_macro_symbol:
00002D06: 53 55                                                 	push	ebx ebp
00002D08: E8 D2 FF FF FF                                        	call	find_macro_symbol_leaf
00002D0D: 72 27                                                 	jc	extend_macro_symbol_tree
00002D0F: 8B 03                                                 	mov	eax,[ebx]
                                                                      make_macro_symbol:
00002D11: 8B 15 58 A1 01 00                                     	mov	edx,[free_additional_memory]
00002D17: 83 C2 10                                              	add	edx,16
00002D1A: 3B 15 B4 A1 01 00                                     	cmp	edx,[labels_list]
00002D20: 0F 87 6C DB FF FF                                     	ja	out_of_memory
00002D26: 87 15 58 A1 01 00                                     	xchg	edx,[free_additional_memory]
00002D2C: 89 13                                                 	mov	[ebx],edx
00002D2E: 89 02                                                 	mov	[edx],eax
00002D30: 89 72 04                                              	mov	[edx+4],esi
00002D33: 5D 5B                                                 	pop	ebp ebx
00002D35: C3                                                    	ret
                                                                      extend_macro_symbol_tree:
00002D36: 8B 15 58 A1 01 00                                     	mov	edx,[free_additional_memory]
00002D3C: 83 C2 10                                              	add	edx,16
00002D3F: 3B 15 B4 A1 01 00                                     	cmp	edx,[labels_list]
00002D45: 0F 87 47 DB FF FF                                     	ja	out_of_memory
00002D4B: 87 15 58 A1 01 00                                     	xchg	edx,[free_additional_memory]
00002D51: 31 C0                                                 	xor	eax,eax
00002D53: 89 02                                                 	mov	[edx],eax
00002D55: 89 42 04                                              	mov	[edx+4],eax
00002D58: 89 42 08                                              	mov	[edx+8],eax
00002D5B: 89 42 0C                                              	mov	[edx+12],eax
00002D5E: D1 ED                                                 	shr	ebp,1
00002D60: 83 D0 00                                              	adc	eax,0
00002D63: 89 13                                                 	mov	[ebx],edx
00002D65: 8D 1C 82                                              	lea	ebx,[edx+eax*4]
00002D68: 09 ED                                                 	or	ebp,ebp
00002D6A: 75 CA                                                 	jnz	extend_macro_symbol_tree
00002D6C: 83 C3 08                                              	add	ebx,8
00002D6F: 31 C0                                                 	xor	eax,eax
00002D71: EB 9E                                                 	jmp	make_macro_symbol
                                                                
                                                                include_file:
00002D73: AC                                                    	lods	byte [esi]
00002D74: 3C 22                                                 	cmp	al,22h
00002D76: 0F 85 A4 DB FF FF                                     	jne	invalid_argument
00002D7C: AD                                                    	lods	dword [esi]
00002D7D: 80 3C 06 00                                           	cmp	byte [esi+eax],0
00002D81: 0F 85 01 DD FF FF                                     	jne	extra_characters_on_line
00002D87: 56                                                    	push	esi
00002D88: 57                                                    	push	edi
00002D89: 8B 1D 74 A1 01 00                                     	mov	ebx,[current_line]
                                                                      find_current_file_path:
00002D8F: 8B 33                                                 	mov	esi,[ebx]
00002D91: F6 43 07 80                                           	test	byte [ebx+7],80h
00002D95: 74 05                                                 	jz	copy_current_file_path
00002D97: 8B 5B 08                                              	mov	ebx,[ebx+8]
00002D9A: EB F3                                                 	jmp	find_current_file_path
                                                                      copy_current_file_path:
00002D9C: AC                                                    	lods	byte [esi]
00002D9D: AA                                                    	stos	byte [edi]
00002D9E: 08 C0                                                 	or	al,al
00002DA0: 75 FA                                                 	jnz	copy_current_file_path
                                                                      cut_current_file_name:
00002DA2: 3B 3C 24                                              	cmp	edi,[esp]
00002DA5: 74 0F                                                 	je	current_file_path_ok
00002DA7: 80 7F FF 5C                                           	cmp	byte [edi-1],'\'
00002DAB: 74 09                                                 	je	current_file_path_ok
00002DAD: 80 7F FF 2F                                           	cmp	byte [edi-1],'/'
00002DB1: 74 03                                                 	je	current_file_path_ok
00002DB3: 4F                                                    	dec	edi
00002DB4: EB EC                                                 	jmp	cut_current_file_name
                                                                      current_file_path_ok:
00002DB6: 8B 74 24 04                                           	mov	esi,[esp+4]
00002DBA: E8 4C 50 00 00                                        	call	expand_path
00002DBF: 5A                                                    	pop	edx
00002DC0: 89 D6                                                 	mov	esi,edx
00002DC2: E8 95 D5 FF FF                                        	call	open
00002DC7: 73 49                                                 	jnc	include_path_ok
00002DC9: 8B 2D 54 A1 01 00                                     	mov	ebp,[include_paths]
                                                                      try_include_directories:
00002DCF: 89 F7                                                 	mov	edi,esi
00002DD1: 89 EE                                                 	mov	esi,ebp
00002DD3: 80 3E 00                                              	cmp	byte [esi],0
00002DD6: 74 23                                                 	je	try_in_current_directory
00002DD8: 55                                                    	push	ebp
00002DD9: 57                                                    	push	edi
00002DDA: E8 68 50 00 00                                        	call	get_include_directory
00002DDF: 89 74 24 04                                           	mov	[esp+4],esi
00002DE3: 8B 74 24 08                                           	mov	esi,[esp+8]
00002DE7: E8 1F 50 00 00                                        	call	expand_path
00002DEC: 5A                                                    	pop	edx
00002DED: 89 D6                                                 	mov	esi,edx
00002DEF: E8 68 D5 FF FF                                        	call	open
00002DF4: 5D                                                    	pop	ebp
00002DF5: 73 1B                                                 	jnc	include_path_ok
00002DF7: EB D6                                                 	jmp	try_include_directories
00002DF9: 89 F7                                                 	mov	edi,esi
                                                                      try_in_current_directory:
00002DFB: 8B 34 24                                              	mov	esi,[esp]
00002DFE: 57                                                    	push	edi
00002DFF: E8 07 50 00 00                                        	call	expand_path
00002E04: 5A                                                    	pop	edx
00002E05: 89 D6                                                 	mov	esi,edx
00002E07: E8 50 D5 FF FF                                        	call	open
00002E0C: 0F 82 D2 DA FF FF                                     	jc	file_not_found
                                                                      include_path_ok:
00002E12: 8B 3C 24                                              	mov	edi,[esp]
                                                                      copy_preprocessed_path:
00002E15: AC                                                    	lods	byte [esi]
00002E16: AA                                                    	stos	byte [edi]
00002E17: 08 C0                                                 	or	al,al
00002E19: 75 FA                                                 	jnz	copy_preprocessed_path
00002E1B: 5E                                                    	pop	esi
00002E1C: 8D 4F FF                                              	lea	ecx,[edi-1]
00002E1F: 29 F1                                                 	sub	ecx,esi
00002E21: 89 4E FC                                              	mov	[esi-4],ecx
00002E24: FF 35 C1 A2 01 00                                     	push	dword [macro_status]
00002E2A: 80 25 C1 A2 01 00 0F                                  	and	[macro_status],0Fh
00002E31: E8 8D E4 FF FF                                        	call	preprocess_file
00002E36: 58                                                    	pop	eax
00002E37: 24 F0                                                 	and	al,0F0h
00002E39: 80 25 C1 A2 01 00 0F                                  	and	[macro_status],0Fh
00002E40: 08 05 C1 A2 01 00                                     	or	[macro_status],al
00002E46: E9 06 EA FF FF                                        	jmp	line_preprocessed
                                                                
                                                                include '..\parser.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                parser:
00002E4B: A1 30 A1 01 00                                        	mov	eax,[memory_end]
00002E50: A3 B4 A1 01 00                                        	mov	[labels_list],eax
00002E55: A1 34 A1 01 00                                        	mov	eax,[additional_memory]
00002E5A: A3 58 A1 01 00                                        	mov	[free_additional_memory],eax
00002E5F: 31 C0                                                 	xor	eax,eax
00002E61: A3 A8 A1 01 00                                        	mov	[current_locals_prefix],eax
00002E66: A3 AC A1 01 00                                        	mov	[anonymous_reverse],eax
00002E6B: A3 B0 A1 01 00                                        	mov	[anonymous_forward],eax
00002E70: A3 C0 A1 01 00                                        	mov	[hash_tree],eax
00002E75: A3 88 A2 01 00                                        	mov	[blocks_stack],eax
00002E7A: A3 8C A2 01 00                                        	mov	[parsed_lines],eax
00002E7F: 8B 35 2C A1 01 00                                     	mov	esi,[memory_start]
00002E85: 8B 3D 5C A1 01 00                                     	mov	edi,[source_start]
                                                                      parser_loop:
00002E8B: 89 35 74 A1 01 00                                     	mov	[current_line],esi
00002E91: 8D 87 00 01 00 00                                     	lea	eax,[edi+100h]
00002E97: 3B 05 B4 A1 01 00                                     	cmp	eax,[labels_list]
00002E9D: 0F 83 EF D9 FF FF                                     	jae	out_of_memory
00002EA3: 80 7E 10 00                                           	cmp	byte [esi+16],0
00002EA7: 0F 84 51 01 00 00                                     	je	empty_line
00002EAD: 80 7E 10 3B                                           	cmp	byte [esi+16],3Bh
00002EB1: 0F 84 47 01 00 00                                     	je	empty_line
00002EB7: B0 0F                                                 	mov	al,0Fh
00002EB9: AA                                                    	stos	byte [edi]
00002EBA: 89 F0                                                 	mov	eax,esi
00002EBC: AB                                                    	stos	dword [edi]
00002EBD: FF 05 8C A2 01 00                                     	inc	[parsed_lines]
00002EC3: 83 C6 10                                              	add	esi,16
                                                                      parse_line:
00002EC6: C6 05 C4 A2 01 00 00                                  	mov	[formatter_symbols_allowed],0
00002ECD: C6 05 C5 A2 01 00 00                                  	mov	[decorator_symbols_allowed],0
00002ED4: 80 3E 1A                                              	cmp	byte [esi],1Ah
00002ED7: 0F 85 02 01 00 00                                     	jne	empty_instruction
00002EDD: 57                                                    	push	edi
00002EDE: 83 C6 02                                              	add	esi,2
00002EE1: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00002EE5: 80 3C 0E 3A                                           	cmp	byte [esi+ecx],':'
00002EE9: 74 42                                                 	je	simple_label
00002EEB: 80 3C 0E 3D                                           	cmp	byte [esi+ecx],'='
00002EEF: 74 60                                                 	je	constant_label
00002EF1: E8 CD 0B 00 00                                        	call	get_instruction
00002EF6: 0F 83 8C 00 00 00                                     	jnc	main_instruction_identified
00002EFC: 80 3C 0E 1A                                           	cmp	byte [esi+ecx],1Ah
00002F00: 75 13                                                 	jne	no_data_label
00002F02: 56 51                                                 	push	esi ecx
00002F04: 8D 74 0E 02                                           	lea	esi,[esi+ecx+2]
00002F08: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00002F0C: E8 86 0B 00 00                                        	call	get_data_directive
00002F11: 73 5A                                                 	jnc	data_label
00002F13: 59 5E                                                 	pop	ecx esi
                                                                      no_data_label:
00002F15: E8 7D 0B 00 00                                        	call	get_data_directive
00002F1A: 73 6C                                                 	jnc	main_instruction_identified
00002F1C: 5F                                                    	pop	edi
00002F1D: 83 EE 02                                              	sub	esi,2
00002F20: 66 31 DB                                              	xor	bx,bx
00002F23: E8 CA 04 00 00                                        	call	parse_line_contents
00002F28: E9 D9 00 00 00                                        	jmp	parse_next_line
                                                                      simple_label:
00002F2D: 5F                                                    	pop	edi
00002F2E: E8 53 0A 00 00                                        	call	identify_label
00002F33: 80 7E 01 3A                                           	cmp	byte [esi+1],':'
00002F37: 74 0B                                                 	je	block_label
00002F39: C6 07 02                                              	mov	byte [edi],2
00002F3C: 47                                                    	inc	edi
00002F3D: AB                                                    	stos	dword [edi]
00002F3E: 46                                                    	inc	esi
00002F3F: 30 C0                                                 	xor	al,al
00002F41: AA                                                    	stos	byte [edi]
00002F42: EB 82                                                 	jmp	parse_line
                                                                      block_label:
00002F44: C6 07 04                                              	mov	byte [edi],4
00002F47: 47                                                    	inc	edi
00002F48: AB                                                    	stos	dword [edi]
00002F49: 83 C6 02                                              	add	esi,2
00002F4C: E9 75 FF FF FF                                        	jmp	parse_line
                                                                      constant_label:
00002F51: 5F                                                    	pop	edi
00002F52: E8 D3 0B 00 00                                        	call	get_label_id
00002F57: C6 07 03                                              	mov	byte [edi],3
00002F5A: 47                                                    	inc	edi
00002F5B: AB                                                    	stos	dword [edi]
00002F5C: 30 C0                                                 	xor	al,al
00002F5E: AA                                                    	stos	byte [edi]
00002F5F: 46                                                    	inc	esi
00002F60: 66 31 DB                                              	xor	bx,bx
00002F63: E8 8A 04 00 00                                        	call	parse_line_contents
00002F68: E9 99 00 00 00                                        	jmp	parse_next_line
                                                                      data_label:
00002F6D: 59 5A                                                 	pop	ecx edx
00002F6F: 5F                                                    	pop	edi
00002F70: 50 53 56                                              	push	eax ebx esi
00002F73: 89 D6                                                 	mov	esi,edx
00002F75: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00002F79: E8 08 0A 00 00                                        	call	identify_label
00002F7E: C6 07 02                                              	mov	byte [edi],2
00002F81: 47                                                    	inc	edi
00002F82: AB                                                    	stos	dword [edi]
00002F83: 5E 5B 58                                              	pop	esi ebx eax
00002F86: AA                                                    	stos	byte [edi]
00002F87: 57                                                    	push	edi
                                                                      main_instruction_identified:
00002F88: 5F                                                    	pop	edi
00002F89: 88 C2                                                 	mov	dl,al
00002F8B: B0 01                                                 	mov	al,1
00002F8D: AA                                                    	stos	byte [edi]
00002F8E: 66 89 D8                                              	mov	ax,bx
00002F91: 66 AB                                                 	stos	word [edi]
00002F93: 88 D0                                                 	mov	al,dl
00002F95: AA                                                    	stos	byte [edi]
00002F96: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
00002F9B: 0F 84 96 00 00 00                                     	je	parse_block
00002FA1: 66 81 FB D3 08                                        	cmp	bx,repeat_directive-instruction_handler
00002FA6: 0F 84 8B 00 00 00                                     	je	parse_block
00002FAC: 66 81 FB A6 09                                        	cmp	bx,while_directive-instruction_handler
00002FB1: 0F 84 80 00 00 00                                     	je	parse_block
00002FB7: 66 81 FB 48 0C                                        	cmp	bx,end_directive-instruction_handler
00002FBC: 0F 84 B8 00 00 00                                     	je	parse_end_directive
00002FC2: 66 81 FB C9 0A                                        	cmp	bx,else_directive-instruction_handler
00002FC7: 0F 84 A2 01 00 00                                     	je	parse_else
00002FCD: 66 81 FB 48 15                                        	cmp	bx,assert_directive-instruction_handler
00002FD2: 0F 84 F2 01 00 00                                     	je	parse_assert
                                                                      common_parse:
00002FD8: E8 15 04 00 00                                        	call	parse_line_contents
00002FDD: EB 27                                                 	jmp	parse_next_line
                                                                      empty_instruction:
00002FDF: AC                                                    	lods	byte [esi]
00002FE0: 08 C0                                                 	or	al,al
00002FE2: 74 22                                                 	jz	parse_next_line
00002FE4: 3C 3A                                                 	cmp	al,':'
00002FE6: 0F 84 72 DA FF FF                                     	je	invalid_name
00002FEC: 4E                                                    	dec	esi
00002FED: C7 05 84 A2 01 00 00 00 00 00                         	mov	[parenthesis_stack],0
00002FF7: E8 76 04 00 00                                        	call	parse_argument
00002FFC: EB 08                                                 	jmp	parse_next_line
                                                                      empty_line:
00002FFE: 83 C6 10                                              	add	esi,16
                                                                      skip_rest_of_line:
00003001: E8 9F FA FF FF                                        	call	skip_foreign_line
                                                                      parse_next_line:
00003006: 3B 35 5C A1 01 00                                     	cmp	esi,[source_start]
0000300C: 0F 82 79 FE FF FF                                     	jb	parser_loop
                                                                      source_parsed:
00003012: 83 3D 88 A2 01 00 00                                  	cmp	[blocks_stack],0
00003019: 74 0C                                                 	je	blocks_stack_ok
0000301B: 58                                                    	pop	eax
0000301C: 8F 05 74 A1 01 00                                     	pop	[current_line]
00003022: E9 53 DA FF FF                                        	jmp	missing_end_directive
                                                                      blocks_stack_ok:
00003027: 30 C0                                                 	xor	al,al
00003029: AA                                                    	stos	byte [edi]
0000302A: 83 C7 0F                                              	add	edi,0Fh
0000302D: 83 E7 F0                                              	and	edi,not 0Fh
00003030: 89 3D 60 A1 01 00                                     	mov	[code_start],edi
00003036: C3                                                    	ret
                                                                      parse_block:
00003037: 89 E0                                                 	mov	eax,esp
00003039: 2B 05 3C A1 01 00                                     	sub	eax,[stack_limit]
0000303F: 3D 00 01 00 00                                        	cmp	eax,100h
00003044: 0F 82 52 D8 FF FF                                     	jb	stack_overflow
0000304A: FF 35 74 A1 01 00                                     	push	[current_line]
00003050: 66 89 D8                                              	mov	ax,bx
00003053: C1 E0 10                                              	shl	eax,16
00003056: 50                                                    	push	eax
00003057: FF 05 88 A2 01 00                                     	inc	[blocks_stack]
0000305D: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
00003062: 0F 84 A4 00 00 00                                     	je	parse_if
00003068: 66 81 FB A6 09                                        	cmp	bx,while_directive-instruction_handler
0000306D: 0F 84 BE 00 00 00                                     	je	parse_while
00003073: E8 7A 03 00 00                                        	call	parse_line_contents
00003078: EB 8C                                                 	jmp	parse_next_line
                                                                      parse_end_directive:
0000307A: 80 3E 1A                                              	cmp	byte [esi],1Ah
0000307D: 0F 85 55 FF FF FF                                     	jne	common_parse
00003083: 57                                                    	push	edi
00003084: 46                                                    	inc	esi
00003085: 0F B6 0E                                              	movzx	ecx,byte [esi]
00003088: 46                                                    	inc	esi
00003089: E8 35 0A 00 00                                        	call	get_instruction
0000308E: 5F                                                    	pop	edi
0000308F: 73 08                                                 	jnc	parse_end_block
00003091: 83 EE 02                                              	sub	esi,2
00003094: E9 3F FF FF FF                                        	jmp	common_parse
                                                                      parse_end_block:
00003099: 88 C2                                                 	mov	dl,al
0000309B: B0 01                                                 	mov	al,1
0000309D: AA                                                    	stos	byte [edi]
0000309E: 66 89 D8                                              	mov	ax,bx
000030A1: 66 AB                                                 	stos	word [edi]
000030A3: 88 D0                                                 	mov	al,dl
000030A5: AA                                                    	stos	byte [edi]
000030A6: AC                                                    	lods	byte [esi]
000030A7: 08 C0                                                 	or	al,al
000030A9: 0F 85 D9 D9 FF FF                                     	jnz	extra_characters_on_line
000030AF: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
000030B4: 74 13                                                 	je	close_parsing_block
000030B6: 66 81 FB D3 08                                        	cmp	bx,repeat_directive-instruction_handler
000030BB: 74 0C                                                 	je	close_parsing_block
000030BD: 66 81 FB A6 09                                        	cmp	bx,while_directive-instruction_handler
000030C2: 74 05                                                 	je	close_parsing_block
000030C4: E9 3D FF FF FF                                        	jmp	parse_next_line
                                                                      close_parsing_block:
000030C9: 83 3D 88 A2 01 00 00                                  	cmp	[blocks_stack],0
000030D0: 0F 84 AB D9 FF FF                                     	je	unexpected_instruction
000030D6: 66 3B 5C 24 02                                        	cmp	bx,[esp+2]
000030DB: 0F 85 A0 D9 FF FF                                     	jne	unexpected_instruction
000030E1: FF 0D 88 A2 01 00                                     	dec	[blocks_stack]
000030E7: 58 5A                                                 	pop	eax edx
000030E9: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
000030EE: 0F 85 12 FF FF FF                                     	jne	parse_next_line
000030F4: A8 0C                                                 	test	al,1100b
000030F6: 0F 84 0A FF FF FF                                     	jz	parse_next_line
000030FC: A8 10                                                 	test	al,10000b
000030FE: 0F 85 02 FF FF FF                                     	jnz	parse_next_line
00003104: 83 EF 08                                              	sub	edi,8
00003107: E9 FA FE FF FF                                        	jmp	parse_next_line
                                                                      parse_if:
0000310C: 57                                                    	push	edi
0000310D: E8 E0 02 00 00                                        	call	parse_line_contents
00003112: 30 C0                                                 	xor	al,al
00003114: AA                                                    	stos	byte [edi]
00003115: 87 34 24                                              	xchg	esi,[esp]
00003118: 89 F7                                                 	mov	edi,esi
0000311A: E8 90 15 00 00                                        	call	preevaluate_logical_expression
0000311F: 5E                                                    	pop	esi
00003120: 3C 30                                                 	cmp	al,'0'
00003122: 74 33                                                 	je	parse_false_condition_block
00003124: 3C 31                                                 	cmp	al,'1'
00003126: 74 3B                                                 	je	parse_true_condition_block
00003128: 80 0C 24 10                                           	or	byte [esp],10000b
0000312C: E9 D5 FE FF FF                                        	jmp	parse_next_line
                                                                      parse_while:
00003131: 57                                                    	push	edi
00003132: E8 BB 02 00 00                                        	call	parse_line_contents
00003137: 30 C0                                                 	xor	al,al
00003139: AA                                                    	stos	byte [edi]
0000313A: 87 34 24                                              	xchg	esi,[esp]
0000313D: 89 F7                                                 	mov	edi,esi
0000313F: E8 6B 15 00 00                                        	call	preevaluate_logical_expression
00003144: 5E                                                    	pop	esi
00003145: 3C 30                                                 	cmp	al,'0'
00003147: 74 0E                                                 	je	parse_false_condition_block
00003149: 3C 31                                                 	cmp	al,'1'
0000314B: 0F 85 B5 FE FF FF                                     	jne	parse_next_line
00003151: AA                                                    	stos	byte [edi]
00003152: E9 AF FE FF FF                                        	jmp	parse_next_line
                                                                      parse_false_condition_block:
00003157: 80 0C 24 01                                           	or	byte [esp],1
0000315B: 83 EF 04                                              	sub	edi,4
0000315E: E9 B0 00 00 00                                        	jmp	skip_parsing
                                                                      parse_true_condition_block:
00003163: 80 0C 24 04                                           	or	byte [esp],100b
00003167: 83 EF 04                                              	sub	edi,4
0000316A: E9 97 FE FF FF                                        	jmp	parse_next_line
                                                                      parse_else:
0000316F: 83 3D 88 A2 01 00 00                                  	cmp	[blocks_stack],0
00003176: 0F 84 05 D9 FF FF                                     	je	unexpected_instruction
0000317C: 66 81 7C 24 02 51 0A                                  	cmp	word [esp+2],if_directive-instruction_handler
00003183: 0F 85 F8 D8 FF FF                                     	jne	unexpected_instruction
00003189: AC                                                    	lods	byte [esi]
0000318A: 08 C0                                                 	or	al,al
0000318C: 74 67                                                 	jz	parse_pure_else
0000318E: 3C 1A                                                 	cmp	al,1Ah
00003190: 0F 85 F2 D8 FF FF                                     	jne	extra_characters_on_line
00003196: 57                                                    	push	edi
00003197: 0F B6 0E                                              	movzx	ecx,byte [esi]
0000319A: 46                                                    	inc	esi
0000319B: E8 23 09 00 00                                        	call	get_instruction
000031A0: 0F 82 E2 D8 FF FF                                     	jc	extra_characters_on_line
000031A6: 5F                                                    	pop	edi
000031A7: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
000031AC: 0F 85 D6 D8 FF FF                                     	jne	extra_characters_on_line
000031B2: F6 04 24 04                                           	test	byte [esp],100b
000031B6: 75 34                                                 	jnz	skip_true_condition_else
000031B8: 88 C2                                                 	mov	dl,al
000031BA: B0 01                                                 	mov	al,1
000031BC: AA                                                    	stos	byte [edi]
000031BD: 66 89 D8                                              	mov	ax,bx
000031C0: 66 AB                                                 	stos	word [edi]
000031C2: 88 D0                                                 	mov	al,dl
000031C4: AA                                                    	stos	byte [edi]
000031C5: E9 42 FF FF FF                                        	jmp	parse_if
                                                                      parse_assert:
000031CA: 57                                                    	push	edi
000031CB: E8 22 02 00 00                                        	call	parse_line_contents
000031D0: 30 C0                                                 	xor	al,al
000031D2: AA                                                    	stos	byte [edi]
000031D3: 87 34 24                                              	xchg	esi,[esp]
000031D6: 89 F7                                                 	mov	edi,esi
000031D8: E8 D2 14 00 00                                        	call	preevaluate_logical_expression
000031DD: 5E                                                    	pop	esi
000031DE: 08 C0                                                 	or	al,al
000031E0: 0F 84 20 FE FF FF                                     	jz	parse_next_line
000031E6: AA                                                    	stos	byte [edi]
000031E7: E9 1A FE FF FF                                        	jmp	parse_next_line
                                                                      skip_true_condition_else:
000031EC: 83 EF 04                                              	sub	edi,4
000031EF: 80 0C 24 01                                           	or	byte [esp],1
000031F3: EB 7D                                                 	jmp	skip_parsing_contents
                                                                      parse_pure_else:
000031F5: 0F BA 2C 24 01                                        	bts	dword [esp],1
000031FA: 0F 82 81 D8 FF FF                                     	jc	unexpected_instruction
00003200: F6 04 24 04                                           	test	byte [esp],100b
00003204: 0F 84 FC FD FF FF                                     	jz	parse_next_line
0000320A: 83 EF 04                                              	sub	edi,4
0000320D: 80 0C 24 01                                           	or	byte [esp],1
00003211: EB 00                                                 	jmp	skip_parsing
                                                                      skip_parsing:
00003213: 3B 35 5C A1 01 00                                     	cmp	esi,[source_start]
00003219: 0F 83 F3 FD FF FF                                     	jae	source_parsed
0000321F: 89 35 74 A1 01 00                                     	mov	[current_line],esi
00003225: 83 C6 10                                              	add	esi,16
                                                                      skip_parsing_line:
00003228: 80 3E 1A                                              	cmp	byte [esi],1Ah
0000322B: 75 45                                                 	jne	skip_parsing_contents
0000322D: 46                                                    	inc	esi
0000322E: 0F B6 0E                                              	movzx	ecx,byte [esi]
00003231: 46                                                    	inc	esi
00003232: 80 3C 0E 3A                                           	cmp	byte [esi+ecx],':'
00003236: 74 0D                                                 	je	skip_parsing_label
00003238: 57                                                    	push	edi
00003239: E8 85 08 00 00                                        	call	get_instruction
0000323E: 5F                                                    	pop	edi
0000323F: 73 0A                                                 	jnc	skip_parsing_instruction
00003241: 01 CE                                                 	add	esi,ecx
00003243: EB 2D                                                 	jmp	skip_parsing_contents
                                                                      skip_parsing_label:
00003245: 8D 74 0E 01                                           	lea	esi,[esi+ecx+1]
00003249: EB DD                                                 	jmp	skip_parsing_line
                                                                      skip_parsing_instruction:
0000324B: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
00003250: 74 40                                                 	je	skip_parsing_block
00003252: 66 81 FB D3 08                                        	cmp	bx,repeat_directive-instruction_handler
00003257: 74 39                                                 	je	skip_parsing_block
00003259: 66 81 FB A6 09                                        	cmp	bx,while_directive-instruction_handler
0000325E: 74 32                                                 	je	skip_parsing_block
00003260: 66 81 FB 48 0C                                        	cmp	bx,end_directive-instruction_handler
00003265: 74 53                                                 	je	skip_parsing_end_directive
00003267: 66 81 FB C9 0A                                        	cmp	bx,else_directive-instruction_handler
0000326C: 0F 84 DD 00 00 00                                     	je	skip_parsing_else
                                                                      skip_parsing_contents:
00003272: AC                                                    	lods	byte [esi]
00003273: 08 C0                                                 	or	al,al
00003275: 74 9C                                                 	jz	skip_parsing
00003277: 3C 1A                                                 	cmp	al,1Ah
00003279: 74 0A                                                 	je	skip_parsing_symbol
0000327B: 3C 3B                                                 	cmp	al,3Bh
0000327D: 74 06                                                 	je	skip_parsing_symbol
0000327F: 3C 22                                                 	cmp	al,22h
00003281: 74 0A                                                 	je	skip_parsing_string
00003283: EB ED                                                 	jmp	skip_parsing_contents
                                                                      skip_parsing_symbol:
00003285: AC                                                    	lods	byte [esi]
00003286: 0F B6 C0                                              	movzx	eax,al
00003289: 01 C6                                                 	add	esi,eax
0000328B: EB E5                                                 	jmp	skip_parsing_contents
                                                                      skip_parsing_string:
0000328D: AD                                                    	lods	dword [esi]
0000328E: 01 C6                                                 	add	esi,eax
00003290: EB E0                                                 	jmp	skip_parsing_contents
                                                                      skip_parsing_block:
00003292: 89 E0                                                 	mov	eax,esp
00003294: 2B 05 3C A1 01 00                                     	sub	eax,[stack_limit]
0000329A: 3D 00 01 00 00                                        	cmp	eax,100h
0000329F: 0F 82 F7 D5 FF FF                                     	jb	stack_overflow
000032A5: FF 35 74 A1 01 00                                     	push	[current_line]
000032AB: 66 89 D8                                              	mov	ax,bx
000032AE: C1 E0 10                                              	shl	eax,16
000032B1: 50                                                    	push	eax
000032B2: FF 05 88 A2 01 00                                     	inc	[blocks_stack]
000032B8: EB B8                                                 	jmp	skip_parsing_contents
                                                                      skip_parsing_end_directive:
000032BA: 80 3E 1A                                              	cmp	byte [esi],1Ah
000032BD: 75 B3                                                 	jne	skip_parsing_contents
000032BF: 57                                                    	push	edi
000032C0: 46                                                    	inc	esi
000032C1: 0F B6 0E                                              	movzx	ecx,byte [esi]
000032C4: 46                                                    	inc	esi
000032C5: E8 F9 07 00 00                                        	call	get_instruction
000032CA: 5F                                                    	pop	edi
000032CB: 73 04                                                 	jnc	skip_parsing_end_block
000032CD: 01 CE                                                 	add	esi,ecx
000032CF: EB A1                                                 	jmp	skip_parsing_contents
                                                                      skip_parsing_end_block:
000032D1: AC                                                    	lods	byte [esi]
000032D2: 08 C0                                                 	or	al,al
000032D4: 0F 85 AE D7 FF FF                                     	jnz	extra_characters_on_line
000032DA: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
000032DF: 74 13                                                 	je	close_skip_parsing_block
000032E1: 66 81 FB D3 08                                        	cmp	bx,repeat_directive-instruction_handler
000032E6: 74 0C                                                 	je	close_skip_parsing_block
000032E8: 66 81 FB A6 09                                        	cmp	bx,while_directive-instruction_handler
000032ED: 74 05                                                 	je	close_skip_parsing_block
000032EF: E9 1F FF FF FF                                        	jmp	skip_parsing
                                                                      close_skip_parsing_block:
000032F4: 83 3D 88 A2 01 00 00                                  	cmp	[blocks_stack],0
000032FB: 0F 84 80 D7 FF FF                                     	je	unexpected_instruction
00003301: 66 3B 5C 24 02                                        	cmp	bx,[esp+2]
00003306: 0F 85 75 D7 FF FF                                     	jne	unexpected_instruction
0000330C: FF 0D 88 A2 01 00                                     	dec	[blocks_stack]
00003312: 58 5A                                                 	pop	eax edx
00003314: A8 01                                                 	test	al,1
00003316: 0F 84 F7 FE FF FF                                     	jz	skip_parsing
0000331C: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
00003321: 0F 85 DF FC FF FF                                     	jne	parse_next_line
00003327: A8 10                                                 	test	al,10000b
00003329: 0F 84 D7 FC FF FF                                     	jz	parse_next_line
0000332F: B0 0F                                                 	mov	al,0Fh
00003331: AA                                                    	stos	byte [edi]
00003332: A1 74 A1 01 00                                        	mov	eax,[current_line]
00003337: AB                                                    	stos	dword [edi]
00003338: FF 05 8C A2 01 00                                     	inc	[parsed_lines]
0000333E: B8 01 48 0C 00                                        	mov	eax,1 + (end_directive-instruction_handler) shl 8
00003343: AB                                                    	stos	dword [edi]
00003344: B8 01 51 0A 00                                        	mov	eax,1 + (if_directive-instruction_handler) shl 8
00003349: AB                                                    	stos	dword [edi]
0000334A: E9 B7 FC FF FF                                        	jmp	parse_next_line
                                                                      skip_parsing_else:
0000334F: 83 3D 88 A2 01 00 00                                  	cmp	[blocks_stack],0
00003356: 0F 84 25 D7 FF FF                                     	je	unexpected_instruction
0000335C: 66 81 7C 24 02 51 0A                                  	cmp	word [esp+2],if_directive-instruction_handler
00003363: 0F 85 18 D7 FF FF                                     	jne	unexpected_instruction
00003369: AC                                                    	lods	byte [esi]
0000336A: 08 C0                                                 	or	al,al
0000336C: 74 5A                                                 	jz	skip_parsing_pure_else
0000336E: 3C 1A                                                 	cmp	al,1Ah
00003370: 0F 85 12 D7 FF FF                                     	jne	extra_characters_on_line
00003376: 57                                                    	push	edi
00003377: 0F B6 0E                                              	movzx	ecx,byte [esi]
0000337A: 46                                                    	inc	esi
0000337B: E8 43 07 00 00                                        	call	get_instruction
00003380: 0F 82 02 D7 FF FF                                     	jc	extra_characters_on_line
00003386: 5F                                                    	pop	edi
00003387: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
0000338C: 0F 85 F6 D6 FF FF                                     	jne	extra_characters_on_line
00003392: 8A 04 24                                              	mov	al,[esp]
00003395: A8 01                                                 	test	al,1
00003397: 0F 84 D5 FE FF FF                                     	jz	skip_parsing_contents
0000339D: A8 04                                                 	test	al,100b
0000339F: 0F 85 CD FE FF FF                                     	jnz	skip_parsing_contents
000033A5: A8 10                                                 	test	al,10000b
000033A7: 75 14                                                 	jnz	parse_else_if
000033A9: 30 C0                                                 	xor	al,al
000033AB: 88 04 24                                              	mov	[esp],al
000033AE: B0 0F                                                 	mov	al,0Fh
000033B0: AA                                                    	stos	byte [edi]
000033B1: A1 74 A1 01 00                                        	mov	eax,[current_line]
000033B6: AB                                                    	stos	dword [edi]
000033B7: FF 05 8C A2 01 00                                     	inc	[parsed_lines]
                                                                      parse_else_if:
000033BD: B8 01 51 0A 00                                        	mov	eax,1 + (if_directive-instruction_handler) shl 8
000033C2: AB                                                    	stos	dword [edi]
000033C3: E9 44 FD FF FF                                        	jmp	parse_if
                                                                      skip_parsing_pure_else:
000033C8: 0F BA 2C 24 01                                        	bts	dword [esp],1
000033CD: 0F 82 AE D6 FF FF                                     	jc	unexpected_instruction
000033D3: 8A 04 24                                              	mov	al,[esp]
000033D6: A8 01                                                 	test	al,1
000033D8: 0F 84 35 FE FF FF                                     	jz	skip_parsing
000033DE: A8 04                                                 	test	al,100b
000033E0: 0F 85 2D FE FF FF                                     	jnz	skip_parsing
000033E6: 24 FE                                                 	and	al,not 1
000033E8: 0C 08                                                 	or	al,1000b
000033EA: 88 04 24                                              	mov	[esp],al
000033ED: E9 14 FC FF FF                                        	jmp	parse_next_line
                                                                
                                                                parse_line_contents:
000033F2: C7 05 84 A2 01 00 00 00 00 00                         	mov	[parenthesis_stack],0
                                                                      parse_instruction_arguments:
000033FC: 66 81 FB A6 64                                        	cmp	bx,prefix_instruction-instruction_handler
00003401: 0F 84 BB 01 00 00                                     	je	allow_embedded_instruction
00003407: 66 81 FB 2D 05                                        	cmp	bx,times_directive-instruction_handler
0000340C: 0F 84 E9 01 00 00                                     	je	parse_times_directive
00003412: 66 81 FB 48 0C                                        	cmp	bx,end_directive-instruction_handler
00003417: 0F 84 A5 01 00 00                                     	je	allow_embedded_instruction
0000341D: 66 81 FB D0 00                                        	cmp	bx,label_directive-instruction_handler
00003422: 0F 84 ED 01 00 00                                     	je	parse_label_directive
00003428: 66 81 FB C1 32                                        	cmp	bx,segment_directive-instruction_handler
0000342D: 0F 84 DB 01 00 00                                     	je	parse_segment_directive
00003433: 66 81 FB 8D 01                                        	cmp	bx,load_directive-instruction_handler
00003438: 0F 84 05 02 00 00                                     	je	parse_load_directive
0000343E: 66 81 FB BA 33                                        	cmp	bx,extrn_directive-instruction_handler
00003443: 0F 84 9B 02 00 00                                     	je	parse_extrn_directive
00003449: 66 81 FB FD 32                                        	cmp	bx,public_directive-instruction_handler
0000344E: 0F 84 16 02 00 00                                     	je	parse_public_directive
00003454: 66 81 FB DB 32                                        	cmp	bx,section_directive-instruction_handler
00003459: 74 10                                                 	je	parse_formatter_argument
0000345B: 66 81 FB 7E 31                                        	cmp	bx,format_directive-instruction_handler
00003460: 74 09                                                 	je	parse_formatter_argument
00003462: 66 81 FB E4 40                                        	cmp	bx,data_directive-instruction_handler
00003467: 74 02                                                 	je	parse_formatter_argument
00003469: EB 07                                                 	jmp	parse_argument
                                                                      parse_formatter_argument:
0000346B: 80 0D C4 A2 01 00 FF                                  	or	[formatter_symbols_allowed],-1
                                                                      parse_argument:
00003472: 8D 87 00 01 00 00                                     	lea	eax,[edi+100h]
00003478: 3B 05 B4 A1 01 00                                     	cmp	eax,[labels_list]
0000347E: 0F 83 0E D4 FF FF                                     	jae	out_of_memory
00003484: AC                                                    	lods	byte [esi]
00003485: 3C 3A                                                 	cmp	al,':'
00003487: 0F 84 34 01 00 00                                     	je	instruction_separator
0000348D: 3C 2C                                                 	cmp	al,','
0000348F: 0F 84 A4 04 00 00                                     	je	separator
00003495: 3C 3D                                                 	cmp	al,'='
00003497: 0F 84 85 03 00 00                                     	je	expression_comparator
0000349D: 3C 7C                                                 	cmp	al,'|'
0000349F: 0F 84 94 04 00 00                                     	je	separator
000034A5: 3C 26                                                 	cmp	al,'&'
000034A7: 0F 84 8C 04 00 00                                     	je	separator
000034AD: 3C 7E                                                 	cmp	al,'~'
000034AF: 0F 84 84 04 00 00                                     	je	separator
000034B5: 3C 3E                                                 	cmp	al,'>'
000034B7: 0F 84 68 03 00 00                                     	je	greater
000034BD: 3C 3C                                                 	cmp	al,'<'
000034BF: 0F 84 71 03 00 00                                     	je	less
000034C5: 3C 29                                                 	cmp	al,')'
000034C7: 0F 84 6A 04 00 00                                     	je	close_parenthesis
000034CD: 08 C0                                                 	or	al,al
000034CF: 0F 84 9C 04 00 00                                     	jz	contents_parsed
000034D5: 3C 5B                                                 	cmp	al,'['
000034D7: 0F 84 BC 03 00 00                                     	je	address_argument
000034DD: 3C 5D                                                 	cmp	al,']'
000034DF: 0F 84 54 04 00 00                                     	je	separator
000034E5: 3C 7B                                                 	cmp	al,'{'
000034E7: 0F 84 3A 04 00 00                                     	je	open_decorator
000034ED: 3C 7D                                                 	cmp	al,'}'
000034EF: 0F 84 3A 04 00 00                                     	je	close_decorator
000034F5: 3C 23                                                 	cmp	al,'#'
000034F7: 0F 84 26 04 00 00                                     	je	unallowed_character
000034FD: 3C 60                                                 	cmp	al,'`'
000034FF: 0F 84 1E 04 00 00                                     	je	unallowed_character
00003505: 3C 3B                                                 	cmp	al,3Bh
00003507: 74 4E                                                 	je	foreign_argument
00003509: 80 3D C5 A2 01 00 00                                  	cmp	[decorator_symbols_allowed],0
00003510: 74 08                                                 	je	not_a_separator
00003512: 3C 2D                                                 	cmp	al,'-'
00003514: 0F 84 1F 04 00 00                                     	je	separator
                                                                      not_a_separator:
0000351A: 4E                                                    	dec	esi
0000351B: 3C 1A                                                 	cmp	al,1Ah
0000351D: 0F 85 85 02 00 00                                     	jne	expression_argument
00003523: 57                                                    	push	edi
00003524: BF A9 45 01 00                                        	mov	edi,directive_operators
00003529: E8 85 04 00 00                                        	call	get_operator
0000352E: 08 C0                                                 	or	al,al
00003530: 75 50                                                 	jnz	operator_argument
00003532: 46                                                    	inc	esi
00003533: 0F B6 0E                                              	movzx	ecx,byte [esi]
00003536: 46                                                    	inc	esi
00003537: E8 DD 04 00 00                                        	call	get_symbol
0000353C: 73 24                                                 	jnc	symbol_argument
0000353E: 83 F9 01                                              	cmp	ecx,1
00003541: 0F 85 32 02 00 00                                     	jne	check_argument
00003547: 80 3E 3F                                              	cmp	byte [esi],'?'
0000354A: 0F 85 29 02 00 00                                     	jne	check_argument
00003550: 5F                                                    	pop	edi
00003551: A4                                                    	movs	byte [edi],[esi]
00003552: E9 E3 03 00 00                                        	jmp	argument_parsed
                                                                      foreign_argument:
00003557: 4E                                                    	dec	esi
00003558: E8 48 F5 FF FF                                        	call	skip_foreign_line
0000355D: E9 0F 04 00 00                                        	jmp	contents_parsed
                                                                      symbol_argument:
00003562: 5F                                                    	pop	edi
00003563: 66 AB                                                 	stos	word [edi]
00003565: 80 3E 2B                                              	cmp	byte [esi],'+'
00003568: 0F 85 CC 03 00 00                                     	jne	argument_parsed
0000356E: 66 25 FF F0                                           	and	ax,0F0FFh
00003572: 66 3D 10 60                                           	cmp	ax,6010h
00003576: 0F 85 BE 03 00 00                                     	jne	argument_parsed
0000357C: A4                                                    	movs	byte [edi],[esi]
0000357D: E9 B8 03 00 00                                        	jmp	argument_parsed
                                                                      operator_argument:
00003582: 5F                                                    	pop	edi
00003583: 3C 85                                                 	cmp	al,85h
00003585: 0F 84 E4 01 00 00                                     	je	ptr_argument
0000358B: AA                                                    	stos	byte [edi]
0000358C: 3C 8C                                                 	cmp	al,8Ch
0000358E: 0F 84 D1 02 00 00                                     	je	forced_expression
00003594: 3C 81                                                 	cmp	al,81h
00003596: 0F 84 7D 03 00 00                                     	je	forced_parenthesis
0000359C: 3C 80                                                 	cmp	al,80h
0000359E: 0F 84 90 01 00 00                                     	je	parse_at_operator
000035A4: 3C 82                                                 	cmp	al,82h
000035A6: 0F 84 7F 01 00 00                                     	je	parse_from_operator
000035AC: 3C 89                                                 	cmp	al,89h
000035AE: 0F 84 58 01 00 00                                     	je	parse_label_operator
000035B4: 3C F8                                                 	cmp	al,0F8h
000035B6: 0F 84 A9 02 00 00                                     	je	forced_expression
000035BC: E9 79 03 00 00                                        	jmp	argument_parsed
                                                                      instruction_separator:
000035C1: AA                                                    	stos	byte [edi]
                                                                      allow_embedded_instruction:
000035C2: 80 3E 1A                                              	cmp	byte [esi],1Ah
000035C5: 0F 85 A7 FE FF FF                                     	jne	parse_argument
000035CB: 57                                                    	push	edi
000035CC: 46                                                    	inc	esi
000035CD: 0F B6 0E                                              	movzx	ecx,byte [esi]
000035D0: 46                                                    	inc	esi
000035D1: E8 ED 04 00 00                                        	call	get_instruction
000035D6: 73 10                                                 	jnc	embedded_instruction
000035D8: E8 BA 04 00 00                                        	call	get_data_directive
000035DD: 73 09                                                 	jnc	embedded_instruction
000035DF: 5F                                                    	pop	edi
000035E0: 83 EE 02                                              	sub	esi,2
000035E3: E9 8A FE FF FF                                        	jmp	parse_argument
                                                                      embedded_instruction:
000035E8: 5F                                                    	pop	edi
000035E9: 88 C2                                                 	mov	dl,al
000035EB: B0 01                                                 	mov	al,1
000035ED: AA                                                    	stos	byte [edi]
000035EE: 66 89 D8                                              	mov	ax,bx
000035F1: 66 AB                                                 	stos	word [edi]
000035F3: 88 D0                                                 	mov	al,dl
000035F5: AA                                                    	stos	byte [edi]
000035F6: E9 01 FE FF FF                                        	jmp	parse_instruction_arguments
                                                                      parse_times_directive:
000035FB: B0 28                                                 	mov	al,'('
000035FD: AA                                                    	stos	byte [edi]
000035FE: E8 1F 08 00 00                                        	call	convert_expression
00003603: B0 29                                                 	mov	al,')'
00003605: AA                                                    	stos	byte [edi]
00003606: 80 3E 3A                                              	cmp	byte [esi],':'
00003609: 75 B7                                                 	jne	allow_embedded_instruction
0000360B: A4                                                    	movs	byte [edi],[esi]
0000360C: EB B4                                                 	jmp	allow_embedded_instruction
                                                                      parse_segment_directive:
0000360E: 80 0D C4 A2 01 00 FF                                  	or	[formatter_symbols_allowed],-1
                                                                      parse_label_directive:
00003615: 80 3E 1A                                              	cmp	byte [esi],1Ah
00003618: 0F 85 1C 03 00 00                                     	jne	argument_parsed
0000361E: 56                                                    	push	esi
0000361F: 46                                                    	inc	esi
00003620: 0F B6 0E                                              	movzx	ecx,byte [esi]
00003623: 46                                                    	inc	esi
00003624: E8 5D 03 00 00                                        	call	identify_label
00003629: 5B                                                    	pop	ebx
0000362A: 83 F8 0F                                              	cmp	eax,0Fh
0000362D: 74 0D                                                 	je	non_label_identified
0000362F: C6 07 02                                              	mov	byte [edi],2
00003632: 47                                                    	inc	edi
00003633: AB                                                    	stos	dword [edi]
00003634: 30 C0                                                 	xor	al,al
00003636: AA                                                    	stos	byte [edi]
00003637: E9 FE 02 00 00                                        	jmp	argument_parsed
                                                                      non_label_identified:
0000363C: 89 DE                                                 	mov	esi,ebx
0000363E: E9 F7 02 00 00                                        	jmp	argument_parsed
                                                                      parse_load_directive:
00003643: 80 3E 1A                                              	cmp	byte [esi],1Ah
00003646: 0F 85 EE 02 00 00                                     	jne	argument_parsed
0000364C: 56                                                    	push	esi
0000364D: 46                                                    	inc	esi
0000364E: 0F B6 0E                                              	movzx	ecx,byte [esi]
00003651: 46                                                    	inc	esi
00003652: E8 D3 04 00 00                                        	call	get_label_id
00003657: 5B                                                    	pop	ebx
00003658: 83 F8 0F                                              	cmp	eax,0Fh
0000365B: 74 DF                                                 	je	non_label_identified
0000365D: C6 07 02                                              	mov	byte [edi],2
00003660: 47                                                    	inc	edi
00003661: AB                                                    	stos	dword [edi]
00003662: 30 C0                                                 	xor	al,al
00003664: AA                                                    	stos	byte [edi]
00003665: E9 D0 02 00 00                                        	jmp	argument_parsed
                                                                      parse_public_directive:
0000366A: 80 3E 1A                                              	cmp	byte [esi],1Ah
0000366D: 0F 85 FF FD FF FF                                     	jne	parse_argument
00003673: 46                                                    	inc	esi
00003674: 56                                                    	push	esi
00003675: 0F B6 0E                                              	movzx	ecx,byte [esi]
00003678: 46                                                    	inc	esi
00003679: 56 51                                                 	push	esi ecx
0000367B: 57                                                    	push	edi
0000367C: 80 0D C4 A2 01 00 FF                                  	or	[formatter_symbols_allowed],-1
00003683: E8 91 03 00 00                                        	call	get_symbol
00003688: C6 05 C4 A2 01 00 00                                  	mov	[formatter_symbols_allowed],0
0000368F: 5F                                                    	pop	edi
00003690: 72 0B                                                 	jc	parse_public_label
00003692: 3C 1D                                                 	cmp	al,1Dh
00003694: 75 07                                                 	jne	parse_public_label
00003696: 83 C4 0C                                              	add	esp,12
00003699: 66 AB                                                 	stos	word [edi]
0000369B: EB CD                                                 	jmp	parse_public_directive
                                                                      parse_public_label:
0000369D: 59 5E                                                 	pop	ecx esi
0000369F: B0 02                                                 	mov	al,2
000036A1: AA                                                    	stos	byte [edi]
000036A2: E8 83 04 00 00                                        	call	get_label_id
000036A7: AB                                                    	stos	dword [edi]
000036A8: 66 B8 00 86                                           	mov	ax,8600h
000036AC: 66 AB                                                 	stos	word [edi]
000036AE: 5B                                                    	pop	ebx
000036AF: 53 56 57                                              	push	ebx esi edi
000036B2: BF A9 45 01 00                                        	mov	edi,directive_operators
000036B7: E8 F7 02 00 00                                        	call	get_operator
000036BC: 5F 5A 5B                                              	pop	edi edx ebx
000036BF: 3C 86                                                 	cmp	al,86h
000036C1: 0F 84 73 02 00 00                                     	je	argument_parsed
000036C7: 89 D6                                                 	mov	esi,edx
000036C9: 87 F3                                                 	xchg	esi,ebx
000036CB: 0F B6 0E                                              	movzx	ecx,byte [esi]
000036CE: 46                                                    	inc	esi
000036CF: 66 B8 28 00                                           	mov	ax,'('
000036D3: 66 AB                                                 	stos	word [edi]
000036D5: 89 C8                                                 	mov	eax,ecx
000036D7: AB                                                    	stos	dword [edi]
000036D8: F3 A4                                                 	rep	movs byte [edi],[esi]
000036DA: 30 C0                                                 	xor	al,al
000036DC: AA                                                    	stos	byte [edi]
000036DD: 87 F3                                                 	xchg	esi,ebx
000036DF: E9 56 02 00 00                                        	jmp	argument_parsed
                                                                      parse_extrn_directive:
000036E4: 80 3E 22                                              	cmp	byte [esi],22h
000036E7: 74 59                                                 	je	parse_quoted_extrn
000036E9: 80 3E 1A                                              	cmp	byte [esi],1Ah
000036EC: 0F 85 80 FD FF FF                                     	jne	parse_argument
000036F2: 56                                                    	push	esi
000036F3: 0F B6 4E 01                                           	movzx	ecx,byte [esi+1]
000036F7: 83 C6 02                                              	add	esi,2
000036FA: 66 B8 28 00                                           	mov	ax,'('
000036FE: 66 AB                                                 	stos	word [edi]
00003700: 89 C8                                                 	mov	eax,ecx
00003702: AB                                                    	stos	dword [edi]
00003703: F3 A4                                                 	rep	movs byte [edi],[esi]
00003705: 66 B8 00 86                                           	mov	ax,8600h
00003709: 66 AB                                                 	stos	word [edi]
0000370B: 5E                                                    	pop	esi
                                                                      parse_label_operator:
0000370C: 80 3E 1A                                              	cmp	byte [esi],1Ah
0000370F: 0F 85 25 02 00 00                                     	jne	argument_parsed
00003715: 46                                                    	inc	esi
00003716: 0F B6 0E                                              	movzx	ecx,byte [esi]
00003719: 46                                                    	inc	esi
0000371A: B0 02                                                 	mov	al,2
0000371C: AA                                                    	stos	byte [edi]
0000371D: E8 08 04 00 00                                        	call	get_label_id
00003722: AB                                                    	stos	dword [edi]
00003723: 30 C0                                                 	xor	al,al
00003725: AA                                                    	stos	byte [edi]
00003726: E9 0F 02 00 00                                        	jmp	argument_parsed
                                                                      parse_from_operator:
0000372B: 80 3E 22                                              	cmp	byte [esi],22h
0000372E: 0F 84 06 02 00 00                                     	je	argument_parsed
                                                                      parse_at_operator:
00003734: 80 3E 3A                                              	cmp	byte [esi],':'
00003737: 0F 84 FD 01 00 00                                     	je	argument_parsed
0000373D: E9 3C 01 00 00                                        	jmp	forced_multipart_expression
                                                                      parse_quoted_extrn:
00003742: 46                                                    	inc	esi
00003743: 66 B8 28 00                                           	mov	ax,'('
00003747: 66 AB                                                 	stos	word [edi]
00003749: AD                                                    	lods	dword [esi]
0000374A: 89 C1                                                 	mov	ecx,eax
0000374C: AB                                                    	stos	dword [edi]
0000374D: F3 A4                                                 	rep	movs byte [edi],[esi]
0000374F: 30 C0                                                 	xor	al,al
00003751: AA                                                    	stos	byte [edi]
00003752: 56 57                                                 	push	esi edi
00003754: BF A9 45 01 00                                        	mov	edi,directive_operators
00003759: E8 55 02 00 00                                        	call	get_operator
0000375E: 89 F2                                                 	mov	edx,esi
00003760: 5F 5E                                                 	pop	edi esi
00003762: 3C 86                                                 	cmp	al,86h
00003764: 0F 85 D0 01 00 00                                     	jne	argument_parsed
0000376A: AA                                                    	stos	byte [edi]
0000376B: 89 D6                                                 	mov	esi,edx
0000376D: EB 9D                                                 	jmp	parse_label_operator
                                                                      ptr_argument:
0000376F: E8 49 01 00 00                                        	call	parse_address
00003774: E9 3F 01 00 00                                        	jmp	address_parsed
                                                                      check_argument:
00003779: 56 51                                                 	push	esi ecx
0000377B: 83 EE 02                                              	sub	esi,2
0000377E: BF 89 45 01 00                                        	mov	edi,single_operand_operators
00003783: E8 2B 02 00 00                                        	call	get_operator
00003788: 59 5E                                                 	pop	ecx esi
0000378A: 08 C0                                                 	or	al,al
0000378C: 75 16                                                 	jnz	not_instruction
0000378E: E8 30 03 00 00                                        	call	get_instruction
00003793: 0F 83 4F FE FF FF                                     	jnc	embedded_instruction
00003799: E8 F9 02 00 00                                        	call	get_data_directive
0000379E: 0F 83 44 FE FF FF                                     	jnc	embedded_instruction
                                                                      not_instruction:
000037A4: 5F                                                    	pop	edi
000037A5: 83 EE 02                                              	sub	esi,2
                                                                      expression_argument:
000037A8: 80 3E 22                                              	cmp	byte [esi],22h
000037AB: 75 4C                                                 	jne	not_string
000037AD: 8B 46 01                                              	mov	eax,[esi+1]
000037B0: 8D 5C 06 05                                           	lea	ebx,[esi+5+eax]
000037B4: 53 51 56 57                                           	push	ebx ecx esi edi
000037B8: E8 30 00 00 00                                        	call	parse_expression
000037BD: 58 5A 59 5B                                           	pop	eax edx ecx ebx
000037C1: 39 DE                                                 	cmp	esi,ebx
000037C3: 0F 85 89 01 00 00                                     	jne	expression_argument_parsed
000037C9: 89 C7                                                 	mov	edi,eax
000037CB: 89 D6                                                 	mov	esi,edx
                                                                      string_argument:
000037CD: 46                                                    	inc	esi
000037CE: 66 B8 28 00                                           	mov	ax,'('
000037D2: 66 AB                                                 	stos	word [edi]
000037D4: AD                                                    	lods	dword [esi]
000037D5: 89 C1                                                 	mov	ecx,eax
000037D7: AB                                                    	stos	dword [edi]
000037D8: D1 E9                                                 	shr	ecx,1
000037DA: 73 01                                                 	jnc	string_movsb_ok
000037DC: A4                                                    	movs	byte [edi],[esi]
                                                                      string_movsb_ok:
000037DD: D1 E9                                                 	shr	ecx,1
000037DF: 73 02                                                 	jnc	string_movsw_ok
000037E1: 66 A5                                                 	movs	word [edi],[esi]
                                                                      string_movsw_ok:
000037E3: F3 A5                                                 	rep	movs dword [edi],[esi]
000037E5: 30 C0                                                 	xor	al,al
000037E7: AA                                                    	stos	byte [edi]
000037E8: E9 65 01 00 00                                        	jmp	expression_argument_parsed
                                                                      parse_expression:
000037ED: B0 28                                                 	mov	al,'('
000037EF: AA                                                    	stos	byte [edi]
000037F0: E8 2D 06 00 00                                        	call	convert_expression
000037F5: B0 29                                                 	mov	al,')'
000037F7: AA                                                    	stos	byte [edi]
000037F8: C3                                                    	ret
                                                                      not_string:
000037F9: 80 3E 28                                              	cmp	byte [esi],'('
000037FC: 75 5D                                                 	jne	expression
000037FE: 89 E0                                                 	mov	eax,esp
00003800: 2B 05 3C A1 01 00                                     	sub	eax,[stack_limit]
00003806: 3D 00 01 00 00                                        	cmp	eax,100h
0000380B: 0F 82 8B D0 FF FF                                     	jb	stack_overflow
00003811: 56 57                                                 	push	esi edi
00003813: 46                                                    	inc	esi
00003814: B0 91                                                 	mov	al,91h
00003816: AA                                                    	stos	byte [edi]
00003817: FF 05 84 A2 01 00                                     	inc	[parenthesis_stack]
0000381D: E9 50 FC FF FF                                        	jmp	parse_argument
                                                                      expression_comparator:
00003822: AA                                                    	stos	byte [edi]
00003823: EB 40                                                 	jmp	forced_expression
                                                                      greater:
00003825: 80 3E 3D                                              	cmp	byte [esi],'='
00003828: 0F 85 0B 01 00 00                                     	jne	separator
0000382E: 46                                                    	inc	esi
0000382F: B0 F2                                                 	mov	al,0F2h
00003831: E9 03 01 00 00                                        	jmp	separator
                                                                      less:
00003836: 80 7F FF F6                                           	cmp	byte [edi-1],0F6h
0000383A: 0F 84 F9 00 00 00                                     	je	separator
00003840: 80 3E 3E                                              	cmp	byte [esi],'>'
00003843: 74 11                                                 	je	not_equal
00003845: 80 3E 3D                                              	cmp	byte [esi],'='
00003848: 0F 85 EB 00 00 00                                     	jne	separator
0000384E: 46                                                    	inc	esi
0000384F: B0 F3                                                 	mov	al,0F3h
00003851: E9 E3 00 00 00                                        	jmp	separator
                                                                      not_equal:
00003856: 46                                                    	inc	esi
00003857: B0 F1                                                 	mov	al,0F1h
00003859: EB C7                                                 	jmp	expression_comparator
                                                                      expression:
0000385B: E8 8D FF FF FF                                        	call	parse_expression
00003860: E9 ED 00 00 00                                        	jmp	expression_argument_parsed
                                                                      forced_expression:
00003865: 30 C0                                                 	xor	al,al
00003867: 86 05 C4 A2 01 00                                     	xchg	al,[formatter_symbols_allowed]
0000386D: 50                                                    	push	eax
0000386E: E8 7A FF FF FF                                        	call	parse_expression
                                                                      forced_expression_parsed:
00003873: 58                                                    	pop	eax
00003874: A2 C4 A2 01 00                                        	mov	[formatter_symbols_allowed],al
00003879: E9 BC 00 00 00                                        	jmp	argument_parsed
                                                                      forced_multipart_expression:
0000387E: 30 C0                                                 	xor	al,al
00003880: 86 05 C4 A2 01 00                                     	xchg	al,[formatter_symbols_allowed]
00003886: 50                                                    	push	eax
00003887: E8 61 FF FF FF                                        	call	parse_expression
0000388C: 80 3E 3A                                              	cmp	byte [esi],':'
0000388F: 75 E2                                                 	jne	forced_expression_parsed
00003891: A4                                                    	movs	byte [edi],[esi]
00003892: E8 56 FF FF FF                                        	call	parse_expression
00003897: EB DA                                                 	jmp	forced_expression_parsed
                                                                      address_argument:
00003899: E8 1F 00 00 00                                        	call	parse_address
0000389E: AC                                                    	lods	byte [esi]
0000389F: 3C 5D                                                 	cmp	al,']'
000038A1: 74 15                                                 	je	address_parsed
000038A3: 3C 2C                                                 	cmp	al,','
000038A5: 74 09                                                 	je	divided_address
000038A7: 4E                                                    	dec	esi
000038A8: B0 29                                                 	mov	al,')'
000038AA: AA                                                    	stos	byte [edi]
000038AB: E9 8A 00 00 00                                        	jmp	argument_parsed
                                                                      divided_address:
000038B0: 66 B8 29 2C                                           	mov	ax,'),'
000038B4: 66 AB                                                 	stos	word [edi]
000038B6: EB A3                                                 	jmp	expression
                                                                      address_parsed:
000038B8: B0 5D                                                 	mov	al,']'
000038BA: AA                                                    	stos	byte [edi]
000038BB: EB 7D                                                 	jmp	argument_parsed
                                                                      parse_address:
000038BD: B0 5B                                                 	mov	al,'['
000038BF: AA                                                    	stos	byte [edi]
000038C0: 66 81 3E 1A 02                                        	cmp	word [esi],021Ah
000038C5: 75 36                                                 	jne	convert_address
000038C7: 56                                                    	push	esi
000038C8: 83 C6 04                                              	add	esi,4
000038CB: 8D 5E 01                                              	lea	ebx,[esi+1]
000038CE: 80 3E 3A                                              	cmp	byte [esi],':'
000038D1: 5E                                                    	pop	esi
000038D2: 75 29                                                 	jne	convert_address
000038D4: 83 C6 02                                              	add	esi,2
000038D7: B9 02 00 00 00                                        	mov	ecx,2
000038DC: 53 57                                                 	push	ebx edi
000038DE: E8 36 01 00 00                                        	call	get_symbol
000038E3: 5F 5E                                                 	pop	edi esi
000038E5: 72 13                                                 	jc	unknown_segment_prefix
000038E7: 3C 10                                                 	cmp	al,10h
000038E9: 75 0F                                                 	jne	unknown_segment_prefix
000038EB: 88 E0                                                 	mov	al,ah
000038ED: 80 E4 F0                                              	and	ah,11110000b
000038F0: 80 FC 30                                              	cmp	ah,30h
000038F3: 75 05                                                 	jne	unknown_segment_prefix
000038F5: 04 30                                                 	add	al,30h
000038F7: AA                                                    	stos	byte [edi]
000038F8: EB 03                                                 	jmp	convert_address
                                                                      unknown_segment_prefix:
000038FA: 83 EE 05                                              	sub	esi,5
                                                                      convert_address:
000038FD: 57                                                    	push	edi
000038FE: BF 02 46 01 00                                        	mov	edi,address_sizes
00003903: E8 AB 00 00 00                                        	call	get_operator
00003908: 5F                                                    	pop	edi
00003909: 08 C0                                                 	or	al,al
0000390B: 0F 84 11 05 00 00                                     	jz	convert_expression
00003911: 04 70                                                 	add	al,70h
00003913: AA                                                    	stos	byte [edi]
00003914: E9 09 05 00 00                                        	jmp	convert_expression
                                                                      forced_parenthesis:
00003919: 80 3E 28                                              	cmp	byte [esi],'('
0000391C: 75 1C                                                 	jne	argument_parsed
0000391E: 46                                                    	inc	esi
0000391F: B0 91                                                 	mov	al,91h
00003921: EB 16                                                 	jmp	separator
                                                                      unallowed_character:
00003923: B0 FF                                                 	mov	al,0FFh
00003925: EB 12                                                 	jmp	separator
                                                                      open_decorator:
00003927: FE 05 C5 A2 01 00                                     	inc	[decorator_symbols_allowed]
0000392D: EB 0A                                                 	jmp	separator
                                                                      close_decorator:
0000392F: FE 0D C5 A2 01 00                                     	dec	[decorator_symbols_allowed]
00003935: EB 02                                                 	jmp	separator
                                                                      close_parenthesis:
00003937: B0 92                                                 	mov	al,92h
                                                                      separator:
00003939: AA                                                    	stos	byte [edi]
                                                                      argument_parsed:
0000393A: 83 3D 84 A2 01 00 00                                  	cmp	[parenthesis_stack],0
00003941: 0F 84 2B FB FF FF                                     	je	parse_argument
00003947: FF 0D 84 A2 01 00                                     	dec	[parenthesis_stack]
0000394D: 83 C4 08                                              	add	esp,8
00003950: EB E8                                                 	jmp	argument_parsed
                                                                      expression_argument_parsed:
00003952: 83 3D 84 A2 01 00 00                                  	cmp	[parenthesis_stack],0
00003959: 0F 84 13 FB FF FF                                     	je	parse_argument
0000395F: 80 3E 29                                              	cmp	byte [esi],')'
00003962: 75 D6                                                 	jne	argument_parsed
00003964: FF 0D 84 A2 01 00                                     	dec	[parenthesis_stack]
0000396A: 5F 5E                                                 	pop	edi esi
0000396C: E9 EA FE FF FF                                        	jmp	expression
                                                                      contents_parsed:
00003971: 83 3D 84 A2 01 00 00                                  	cmp	[parenthesis_stack],0
00003978: 74 0B                                                 	je	contents_ok
0000397A: FF 0D 84 A2 01 00                                     	dec	[parenthesis_stack]
00003980: 83 C4 08                                              	add	esp,8
00003983: EB EC                                                 	jmp	contents_parsed
                                                                      contents_ok:
00003985: C3                                                    	ret
                                                                
                                                                identify_label:
00003986: 80 3E 2E                                              	cmp	byte [esi],'.'
00003989: 74 22                                                 	je	local_label_name
0000398B: E8 9A 01 00 00                                        	call	get_label_id
00003990: 83 F8 10                                              	cmp	eax,10h
00003993: 72 0B                                                 	jb	label_identified
00003995: 09 DB                                                 	or	ebx,ebx
00003997: 74 08                                                 	jz	anonymous_label_name
00003999: 4B                                                    	dec	ebx
0000399A: 89 1D A8 A1 01 00                                     	mov	[current_locals_prefix],ebx
                                                                      label_identified:
000039A0: C3                                                    	ret
                                                                      anonymous_label_name:
000039A1: 80 7E FF 40                                           	cmp	byte [esi-1],'@'
000039A5: 74 05                                                 	je	anonymous_label_name_ok
000039A7: B8 0F 00 00 00                                        	mov	eax,0Fh
                                                                      anonymous_label_name_ok:
000039AC: C3                                                    	ret
                                                                      local_label_name:
000039AD: E8 78 01 00 00                                        	call	get_label_id
000039B2: C3                                                    	ret
                                                                
                                                                get_operator:
000039B3: 80 3E 1A                                              	cmp	byte [esi],1Ah
000039B6: 75 41                                                 	jne	get_simple_operator
000039B8: 89 F2                                                 	mov	edx,esi
000039BA: 55                                                    	push	ebp
000039BB: 46                                                    	inc	esi
000039BC: AC                                                    	lods	byte [esi]
000039BD: 0F B6 E8                                              	movzx	ebp,al
000039C0: 57                                                    	push	edi
000039C1: 89 E9                                                 	mov	ecx,ebp
000039C3: E8 B3 DB FF FF                                        	call	lower_case
000039C8: 5F                                                    	pop	edi
                                                                      check_operator:
000039C9: BE C7 A3 01 00                                        	mov	esi,converted
000039CE: 0F B6 0F                                              	movzx	ecx,byte [edi]
000039D1: E3 14                                                 	jecxz	no_operator
000039D3: 47                                                    	inc	edi
000039D4: 89 FB                                                 	mov	ebx,edi
000039D6: 01 CB                                                 	add	ebx,ecx
000039D8: 39 E9                                                 	cmp	ecx,ebp
000039DA: 75 06                                                 	jne	next_operator
000039DC: F3 A6                                                 	repe	cmps byte [esi],[edi]
000039DE: 74 0F                                                 	je	operator_found
000039E0: 72 05                                                 	jb	no_operator
                                                                      next_operator:
000039E2: 89 DF                                                 	mov	edi,ebx
000039E4: 47                                                    	inc	edi
000039E5: EB E2                                                 	jmp	check_operator
                                                                      no_operator:
000039E7: 89 D6                                                 	mov	esi,edx
000039E9: 89 E9                                                 	mov	ecx,ebp
000039EB: 5D                                                    	pop	ebp
                                                                      no_simple_operator:
000039EC: 30 C0                                                 	xor	al,al
000039EE: C3                                                    	ret
                                                                      operator_found:
000039EF: 8D 74 2A 02                                           	lea	esi,[edx+2+ebp]
000039F3: 89 E9                                                 	mov	ecx,ebp
000039F5: 5D                                                    	pop	ebp
000039F6: 8A 07                                                 	mov	al,[edi]
000039F8: C3                                                    	ret
                                                                      get_simple_operator:
000039F9: 8A 06                                                 	mov	al,[esi]
000039FB: 3C 22                                                 	cmp	al,22h
000039FD: 74 ED                                                 	je	no_simple_operator
                                                                      simple_operator:
000039FF: 80 3F 01                                              	cmp	byte [edi],1
00003A02: 72 E8                                                 	jb	no_simple_operator
00003A04: 77 05                                                 	ja	simple_next_operator
00003A06: 3A 47 01                                              	cmp	al,[edi+1]
00003A09: 74 09                                                 	je	simple_operator_found
                                                                      simple_next_operator:
00003A0B: 0F B6 0F                                              	movzx	ecx,byte [edi]
00003A0E: 8D 7C 0F 02                                           	lea	edi,[edi+1+ecx+1]
00003A12: EB EB                                                 	jmp	simple_operator
                                                                      simple_operator_found:
00003A14: 46                                                    	inc	esi
00003A15: 8A 47 02                                              	mov	al,[edi+2]
00003A18: C3                                                    	ret
                                                                
                                                                get_symbol:
00003A19: 56                                                    	push	esi
00003A1A: 89 CD                                                 	mov	ebp,ecx
00003A1C: E8 5A DB FF FF                                        	call	lower_case
00003A21: 89 E9                                                 	mov	ecx,ebp
00003A23: 80 F9 0B                                              	cmp	cl,11
00003A26: 77 5B                                                 	ja	no_symbol
00003A28: 80 E9 01                                              	sub	cl,1
00003A2B: 72 56                                                 	jc	no_symbol
00003A2D: 0F B7 1C 8D 1D 46 01 00                               	movzx	ebx,word [symbols+ecx*4]
00003A35: 81 C3 1D 46 01 00                                     	add	ebx,symbols
00003A3B: 0F B7 14 8D 1F 46 01 00                               	movzx	edx,word [symbols+ecx*4+2]
                                                                      scan_symbols:
00003A43: 09 D2                                                 	or	edx,edx
00003A45: 74 3C                                                 	jz	no_symbol
00003A47: 89 D0                                                 	mov	eax,edx
00003A49: D1 E8                                                 	shr	eax,1
00003A4B: 8D 7D 02                                              	lea	edi,[ebp+2]
00003A4E: 0F AF C7                                              	imul	eax,edi
00003A51: 8D 3C 03                                              	lea	edi,[ebx+eax]
00003A54: BE C7 A3 01 00                                        	mov	esi,converted
00003A59: 89 E9                                                 	mov	ecx,ebp
00003A5B: F3 A6                                                 	repe	cmps byte [esi],[edi]
00003A5D: 77 2D                                                 	ja	symbols_up
00003A5F: 72 27                                                 	jb	symbols_down
00003A61: 66 8B 07                                              	mov	ax,[edi]
00003A64: 3C 18                                                 	cmp	al,18h
00003A66: 72 0D                                                 	jb	symbol_ok
00003A68: 3C 1F                                                 	cmp	al,1Fh
00003A6A: 74 0E                                                 	je	decorator_symbol
00003A6C: 80 3D C4 A2 01 00 00                                  	cmp	[formatter_symbols_allowed],0
00003A73: 74 0E                                                 	je	no_symbol
                                                                      symbol_ok:
00003A75: 5E                                                    	pop	esi
00003A76: 01 EE                                                 	add	esi,ebp
00003A78: F8                                                    	clc
00003A79: C3                                                    	ret
                                                                      decorator_symbol:
00003A7A: 80 3D C5 A2 01 00 00                                  	cmp	[decorator_symbols_allowed],0
00003A81: 75 F2                                                 	jne	symbol_ok
                                                                      no_symbol:
00003A83: 5E                                                    	pop	esi
00003A84: 89 E9                                                 	mov	ecx,ebp
00003A86: F9                                                    	stc
00003A87: C3                                                    	ret
                                                                      symbols_down:
00003A88: D1 EA                                                 	shr	edx,1
00003A8A: EB B7                                                 	jmp	scan_symbols
                                                                      symbols_up:
00003A8C: 8D 5C 0F 02                                           	lea	ebx,[edi+ecx+2]
00003A90: D1 EA                                                 	shr	edx,1
00003A92: 83 D2 FF                                              	adc	edx,-1
00003A95: EB AC                                                 	jmp	scan_symbols
                                                                
                                                                get_data_directive:
00003A97: 56                                                    	push	esi
00003A98: 89 CD                                                 	mov	ebp,ecx
00003A9A: E8 DC DA FF FF                                        	call	lower_case
00003A9F: 89 E9                                                 	mov	ecx,ebp
00003AA1: 80 F9 04                                              	cmp	cl,4
00003AA4: 77 70                                                 	ja	no_instruction
00003AA6: 80 E9 02                                              	sub	cl,2
00003AA9: 72 6B                                                 	jc	no_instruction
00003AAB: 0F B7 1C 8D E6 9C 01 00                               	movzx	ebx,word [data_directives+ecx*4]
00003AB3: 81 C3 E6 9C 01 00                                     	add	ebx,data_directives
00003AB9: 0F B7 14 8D E8 9C 01 00                               	movzx	edx,word [data_directives+ecx*4+2]
00003AC1: EB 2A                                                 	jmp	scan_instructions
                                                                
                                                                get_instruction:
00003AC3: 56                                                    	push	esi
00003AC4: 89 CD                                                 	mov	ebp,ecx
00003AC6: E8 B0 DA FF FF                                        	call	lower_case
00003ACB: 89 E9                                                 	mov	ecx,ebp
00003ACD: 80 F9 11                                              	cmp	cl,17
00003AD0: 77 44                                                 	ja	no_instruction
00003AD2: 80 E9 02                                              	sub	cl,2
00003AD5: 72 3F                                                 	jc	no_instruction
00003AD7: 0F B7 1C 8D DA 4D 01 00                               	movzx	ebx,word [instructions+ecx*4]
00003ADF: 81 C3 DA 4D 01 00                                     	add	ebx,instructions
00003AE5: 0F B7 14 8D DC 4D 01 00                               	movzx	edx,word [instructions+ecx*4+2]
                                                                      scan_instructions:
00003AED: 09 D2                                                 	or	edx,edx
00003AEF: 74 25                                                 	jz	no_instruction
00003AF1: 89 D0                                                 	mov	eax,edx
00003AF3: D1 E8                                                 	shr	eax,1
00003AF5: 8D 7D 03                                              	lea	edi,[ebp+3]
00003AF8: 0F AF C7                                              	imul	eax,edi
00003AFB: 8D 3C 03                                              	lea	edi,[ebx+eax]
00003AFE: BE C7 A3 01 00                                        	mov	esi,converted
00003B03: 89 E9                                                 	mov	ecx,ebp
00003B05: F3 A6                                                 	repe	cmps byte [esi],[edi]
00003B07: 77 16                                                 	ja	instructions_up
00003B09: 72 10                                                 	jb	instructions_down
00003B0B: 5E                                                    	pop	esi
00003B0C: 01 EE                                                 	add	esi,ebp
00003B0E: 8A 07                                                 	mov	al,[edi]
00003B10: 66 8B 5F 01                                           	mov	bx,[edi+1]
00003B14: F8                                                    	clc
00003B15: C3                                                    	ret
                                                                      no_instruction:
00003B16: 5E                                                    	pop	esi
00003B17: 89 E9                                                 	mov	ecx,ebp
00003B19: F9                                                    	stc
00003B1A: C3                                                    	ret
                                                                      instructions_down:
00003B1B: D1 EA                                                 	shr	edx,1
00003B1D: EB CE                                                 	jmp	scan_instructions
                                                                      instructions_up:
00003B1F: 8D 5C 0F 03                                           	lea	ebx,[edi+ecx+3]
00003B23: D1 EA                                                 	shr	edx,1
00003B25: 83 D2 FF                                              	adc	edx,-1
00003B28: EB C3                                                 	jmp	scan_instructions
                                                                
                                                                get_label_id:
00003B2A: 81 F9 00 01 00 00                                     	cmp	ecx,100h
00003B30: 0F 83 21 CF FF FF                                     	jae	name_too_long
00003B36: 80 3E 40                                              	cmp	byte [esi],'@'
00003B39: 74 7F                                                 	je	anonymous_label
00003B3B: 80 3E 2E                                              	cmp	byte [esi],'.'
00003B3E: 0F 85 F3 00 00 00                                     	jne	standard_label
00003B44: 80 7E 01 2E                                           	cmp	byte [esi+1],'.'
00003B48: 0F 84 E9 00 00 00                                     	je	standard_label
00003B4E: 83 3D A8 A1 01 00 00                                  	cmp	[current_locals_prefix],0
00003B55: 0F 84 DC 00 00 00                                     	je	standard_label
00003B5B: 57                                                    	push	edi
00003B5C: 8B 3D 38 A1 01 00                                     	mov	edi,[additional_memory_end]
00003B62: 83 EF 02                                              	sub	edi,2
00003B65: 29 CF                                                 	sub	edi,ecx
00003B67: 51 56                                                 	push	ecx esi
00003B69: 8B 35 A8 A1 01 00                                     	mov	esi,[current_locals_prefix]
00003B6F: AC                                                    	lods	byte [esi]
00003B70: 0F B6 C8                                              	movzx	ecx,al
00003B73: 29 CF                                                 	sub	edi,ecx
00003B75: 3B 3D 58 A1 01 00                                     	cmp	edi,[free_additional_memory]
00003B7B: 0F 82 11 CD FF FF                                     	jb	out_of_memory
00003B81: 66 C7 07 00 00                                        	mov	word [edi],0
00003B86: 83 C7 02                                              	add	edi,2
00003B89: 89 FB                                                 	mov	ebx,edi
00003B8B: F3 A4                                                 	rep	movs byte [edi],[esi]
00003B8D: 5E 59                                                 	pop	esi ecx
00003B8F: 00 C8                                                 	add	al,cl
00003B91: 0F 82 C0 CE FF FF                                     	jc	name_too_long
00003B97: F3 A4                                                 	rep	movs byte [edi],[esi]
00003B99: 5F                                                    	pop	edi
00003B9A: 53 56                                                 	push	ebx esi
00003B9C: 0F B6 C8                                              	movzx	ecx,al
00003B9F: 88 43 FF                                              	mov	byte [ebx-1],al
00003BA2: 89 DE                                                 	mov	esi,ebx
00003BA4: E8 81 FF FF FF                                        	call	get_label_id
00003BA9: 5E 5B                                                 	pop	esi ebx
00003BAB: 3B 58 18                                              	cmp	ebx,[eax+24]
00003BAE: 75 09                                                 	jne	composed_label_id_ok
00003BB0: 8D 53 FE                                              	lea	edx,[ebx-2]
00003BB3: 89 15 38 A1 01 00                                     	mov	[additional_memory_end],edx
                                                                      composed_label_id_ok:
00003BB9: C3                                                    	ret
                                                                      anonymous_label:
00003BBA: 83 F9 02                                              	cmp	ecx,2
00003BBD: 75 78                                                 	jne	standard_label
00003BBF: 8A 46 01                                              	mov	al,[esi+1]
00003BC2: BB C7 A2 01 00                                        	mov	ebx,characters
00003BC7: D7                                                    	xlat	byte [ebx]
00003BC8: 3C 40                                                 	cmp	al,'@'
00003BCA: 74 49                                                 	je	new_anonymous
00003BCC: 3C 62                                                 	cmp	al,'b'
00003BCE: 74 2B                                                 	je	anonymous_back
00003BD0: 3C 72                                                 	cmp	al,'r'
00003BD2: 74 27                                                 	je	anonymous_back
00003BD4: 3C 66                                                 	cmp	al,'f'
00003BD6: 75 5F                                                 	jne	standard_label
00003BD8: 83 C6 02                                              	add	esi,2
00003BDB: A1 B0 A1 01 00                                        	mov	eax,[anonymous_forward]
00003BE0: 09 C0                                                 	or	eax,eax
00003BE2: 75 14                                                 	jnz	anonymous_ok
00003BE4: A1 74 A1 01 00                                        	mov	eax,[current_line]
00003BE9: A3 DC A1 01 00                                        	mov	[error_line],eax
00003BEE: E8 14 02 00 00                                        	call	allocate_label
00003BF3: A3 B0 A1 01 00                                        	mov	[anonymous_forward],eax
                                                                      anonymous_ok:
00003BF8: 31 DB                                                 	xor	ebx,ebx
00003BFA: C3                                                    	ret
                                                                      anonymous_back:
00003BFB: A1 AC A1 01 00                                        	mov	eax,[anonymous_reverse]
00003C00: 83 C6 02                                              	add	esi,2
00003C03: 09 C0                                                 	or	eax,eax
00003C05: 74 02                                                 	jz	bogus_anonymous
00003C07: EB EF                                                 	jmp	anonymous_ok
                                                                      bogus_anonymous:
00003C09: E8 F9 01 00 00                                        	call	allocate_label
00003C0E: A3 AC A1 01 00                                        	mov	[anonymous_reverse],eax
00003C13: EB E3                                                 	jmp	anonymous_ok
                                                                      new_anonymous:
00003C15: 83 C6 02                                              	add	esi,2
00003C18: A1 B0 A1 01 00                                        	mov	eax,[anonymous_forward]
00003C1D: 09 C0                                                 	or	eax,eax
00003C1F: 75 05                                                 	jnz	new_anonymous_ok
00003C21: E8 E1 01 00 00                                        	call	allocate_label
                                                                      new_anonymous_ok:
00003C26: A3 AC A1 01 00                                        	mov	[anonymous_reverse],eax
00003C2B: C7 05 B0 A1 01 00 00 00 00 00                         	mov	[anonymous_forward],0
00003C35: EB C1                                                 	jmp	anonymous_ok
                                                                      standard_label:
00003C37: 80 3E 25                                              	cmp	byte [esi],'%'
00003C3A: 74 61                                                 	je	get_predefined_id
00003C3C: 80 3E 24                                              	cmp	byte [esi],'$'
00003C3F: 74 11                                                 	je	current_address_label
00003C41: 80 3E 3F                                              	cmp	byte [esi],'?'
00003C44: 75 70                                                 	jne	find_label
00003C46: 83 F9 01                                              	cmp	ecx,1
00003C49: 75 6B                                                 	jne	find_label
00003C4B: 46                                                    	inc	esi
00003C4C: B8 0F 00 00 00                                        	mov	eax,0Fh
00003C51: C3                                                    	ret
                                                                      current_address_label:
00003C52: 83 F9 03                                              	cmp	ecx,3
00003C55: 74 35                                                 	je	current_address_label_3_characters
00003C57: 77 5D                                                 	ja	find_label
00003C59: 46                                                    	inc	esi
00003C5A: 83 F9 01                                              	cmp	ecx,1
00003C5D: 76 12                                                 	jbe	get_current_offset_id
00003C5F: 46                                                    	inc	esi
00003C60: 80 7E FF 24                                           	cmp	byte [esi-1],'$'
00003C64: 74 1A                                                 	je	get_org_origin_id
00003C66: 80 7E FF 25                                           	cmp	byte [esi-1],'%'
00003C6A: 74 1A                                                 	je	get_file_offset_id
00003C6C: 83 EE 02                                              	sub	esi,2
00003C6F: EB 45                                                 	jmp	find_label
                                                                      get_current_offset_id:
00003C71: 31 C0                                                 	xor	eax,eax
00003C73: C3                                                    	ret
                                                                      get_counter_id:
00003C74: B8 01 00 00 00                                        	mov	eax,1
00003C79: C3                                                    	ret
                                                                      get_timestamp_id:
00003C7A: B8 02 00 00 00                                        	mov	eax,2
00003C7F: C3                                                    	ret
                                                                      get_org_origin_id:
00003C80: B8 03 00 00 00                                        	mov	eax,3
00003C85: C3                                                    	ret
                                                                      get_file_offset_id:
00003C86: B8 04 00 00 00                                        	mov	eax,4
00003C8B: C3                                                    	ret
                                                                      current_address_label_3_characters:
00003C8C: 66 81 7E 01 25 25                                     	cmp	word [esi+1],'%%'
00003C92: 75 22                                                 	jne	find_label
00003C94: 83 C6 03                                              	add	esi,3
                                                                      get_actual_file_offset_id:
00003C97: B8 05 00 00 00                                        	mov	eax,5
00003C9C: C3                                                    	ret
                                                                      get_predefined_id:
00003C9D: 83 F9 02                                              	cmp	ecx,2
00003CA0: 77 14                                                 	ja	find_label
00003CA2: 46                                                    	inc	esi
00003CA3: 80 F9 01                                              	cmp	cl,1
00003CA6: 74 CC                                                 	je	get_counter_id
00003CA8: AC                                                    	lods	byte [esi]
00003CA9: BB C7 A2 01 00                                        	mov	ebx,characters
00003CAE: D7                                                    	xlat	[ebx]
00003CAF: 3C 74                                                 	cmp	al,'t'
00003CB1: 74 C7                                                 	je	get_timestamp_id
00003CB3: 83 EE 02                                              	sub	esi,2
                                                                      find_label:
00003CB6: 31 DB                                                 	xor	ebx,ebx
00003CB8: B8 C5 9D 1C 81                                        	mov	eax,2166136261
00003CBD: BD 93 01 00 01                                        	mov	ebp,16777619
                                                                      hash_label:
00003CC2: 32 04 1E                                              	xor	al,[esi+ebx]
00003CC5: F7 E5                                                 	mul	ebp
00003CC7: FE C3                                                 	inc	bl
00003CC9: 38 CB                                                 	cmp	bl,cl
00003CCB: 72 F5                                                 	jb	hash_label
00003CCD: 89 C5                                                 	mov	ebp,eax
00003CCF: C1 E0 08                                              	shl	eax,8
00003CD2: 81 E5 00 00 00 FF                                     	and	ebp,0FFh shl 24
00003CD8: 31 C5                                                 	xor	ebp,eax
00003CDA: 09 DD                                                 	or	ebp,ebx
00003CDC: 89 2D B8 A1 01 00                                     	mov	[label_hash],ebp
00003CE2: 57 56                                                 	push	edi esi
00003CE4: 51                                                    	push	ecx
00003CE5: B9 20 00 00 00                                        	mov	ecx,32
00003CEA: BB C0 A1 01 00                                        	mov	ebx,hash_tree
                                                                      follow_tree:
00003CEF: 8B 13                                                 	mov	edx,[ebx]
00003CF1: 09 D2                                                 	or	edx,edx
00003CF3: 74 40                                                 	jz	extend_tree
00003CF5: 31 C0                                                 	xor	eax,eax
00003CF7: D1 E5                                                 	shl	ebp,1
00003CF9: 83 D0 00                                              	adc	eax,0
00003CFC: 8D 1C 82                                              	lea	ebx,[edx+eax*4]
00003CFF: 49                                                    	dec	ecx
00003D00: 75 ED                                                 	jnz	follow_tree
00003D02: 89 1D BC A1 01 00                                     	mov	[label_leaf],ebx
00003D08: 5A                                                    	pop	edx
00003D09: 8B 03                                                 	mov	eax,[ebx]
00003D0B: 09 C0                                                 	or	eax,eax
00003D0D: 74 5B                                                 	jz	add_label
00003D0F: 89 F3                                                 	mov	ebx,esi
00003D11: 8B 2D B8 A1 01 00                                     	mov	ebp,[label_hash]
                                                                      compare_labels:
00003D17: 89 DE                                                 	mov	esi,ebx
00003D19: 89 D1                                                 	mov	ecx,edx
00003D1B: 8B 78 04                                              	mov	edi,[eax+4]
00003D1E: 8B 7F 18                                              	mov	edi,[edi+24]
00003D21: F3 A6                                                 	repe	cmps byte [esi],[edi]
00003D23: 74 08                                                 	je	label_found
00003D25: 8B 00                                                 	mov	eax,[eax]
00003D27: 09 C0                                                 	or	eax,eax
00003D29: 75 EC                                                 	jnz	compare_labels
00003D2B: EB 3D                                                 	jmp	add_label
                                                                      label_found:
00003D2D: 83 C4 04                                              	add	esp,4
00003D30: 5F                                                    	pop	edi
00003D31: 8B 40 04                                              	mov	eax,[eax+4]
00003D34: C3                                                    	ret
                                                                      extend_tree:
00003D35: 8B 15 58 A1 01 00                                     	mov	edx,[free_additional_memory]
00003D3B: 8D 42 08                                              	lea	eax,[edx+8]
00003D3E: 3B 05 38 A1 01 00                                     	cmp	eax,[additional_memory_end]
00003D44: 0F 87 48 CB FF FF                                     	ja	out_of_memory
00003D4A: A3 58 A1 01 00                                        	mov	[free_additional_memory],eax
00003D4F: 31 C0                                                 	xor	eax,eax
00003D51: 89 02                                                 	mov	[edx],eax
00003D53: 89 42 04                                              	mov	[edx+4],eax
00003D56: D1 E5                                                 	shl	ebp,1
00003D58: 83 D0 00                                              	adc	eax,0
00003D5B: 89 13                                                 	mov	[ebx],edx
00003D5D: 8D 1C 82                                              	lea	ebx,[edx+eax*4]
00003D60: 49                                                    	dec	ecx
00003D61: 75 D2                                                 	jnz	extend_tree
00003D63: 89 1D BC A1 01 00                                     	mov	[label_leaf],ebx
00003D69: 5A                                                    	pop	edx
                                                                      add_label:
00003D6A: 89 D1                                                 	mov	ecx,edx
00003D6C: 5E                                                    	pop	esi
00003D6D: 80 7E FE 00                                           	cmp	byte [esi-2],0
00003D71: 74 5E                                                 	je	label_name_ok
00003D73: 8A 06                                                 	mov	al,[esi]
00003D75: 3C 30                                                 	cmp	al,30h
00003D77: 72 04                                                 	jb	name_first_char_ok
00003D79: 3C 39                                                 	cmp	al,39h
00003D7B: 76 04                                                 	jbe	numeric_name
                                                                      name_first_char_ok:
00003D7D: 3C 24                                                 	cmp	al,'$'
00003D7F: 75 09                                                 	jne	check_for_reserved_word
                                                                      numeric_name:
00003D81: 01 CE                                                 	add	esi,ecx
                                                                      reserved_word:
00003D83: B8 0F 00 00 00                                        	mov	eax,0Fh
00003D88: 5F                                                    	pop	edi
00003D89: C3                                                    	ret
                                                                      check_for_reserved_word:
00003D8A: E8 34 FD FF FF                                        	call	get_instruction
00003D8F: 73 F2                                                 	jnc	reserved_word
00003D91: E8 01 FD FF FF                                        	call	get_data_directive
00003D96: 73 EB                                                 	jnc	reserved_word
00003D98: E8 7C FC FF FF                                        	call	get_symbol
00003D9D: 73 E4                                                 	jnc	reserved_word
00003D9F: 83 EE 02                                              	sub	esi,2
00003DA2: BF 5F 45 01 00                                        	mov	edi,operators
00003DA7: E8 07 FC FF FF                                        	call	get_operator
00003DAC: 08 C0                                                 	or	al,al
00003DAE: 75 D3                                                 	jnz	reserved_word
00003DB0: BF 89 45 01 00                                        	mov	edi,single_operand_operators
00003DB5: E8 F9 FB FF FF                                        	call	get_operator
00003DBA: 08 C0                                                 	or	al,al
00003DBC: 75 C5                                                 	jnz	reserved_word
00003DBE: BF A9 45 01 00                                        	mov	edi,directive_operators
00003DC3: E8 EB FB FF FF                                        	call	get_operator
00003DC8: 08 C0                                                 	or	al,al
00003DCA: 75 B7                                                 	jnz	reserved_word
00003DCC: 46                                                    	inc	esi
00003DCD: 0F B6 0E                                              	movzx	ecx,byte [esi]
00003DD0: 46                                                    	inc	esi
                                                                      label_name_ok:
00003DD1: 8B 15 58 A1 01 00                                     	mov	edx,[free_additional_memory]
00003DD7: 8D 42 08                                              	lea	eax,[edx+8]
00003DDA: 3B 05 38 A1 01 00                                     	cmp	eax,[additional_memory_end]
00003DE0: 0F 87 AC CA FF FF                                     	ja	out_of_memory
00003DE6: A3 58 A1 01 00                                        	mov	[free_additional_memory],eax
00003DEB: 89 F3                                                 	mov	ebx,esi
00003DED: 01 CE                                                 	add	esi,ecx
00003DEF: A1 BC A1 01 00                                        	mov	eax,[label_leaf]
00003DF4: 8B 38                                                 	mov	edi,[eax]
00003DF6: 89 3A                                                 	mov	[edx],edi
00003DF8: 89 10                                                 	mov	[eax],edx
00003DFA: E8 08 00 00 00                                        	call	allocate_label
00003DFF: 89 42 04                                              	mov	[edx+4],eax
00003E02: 89 58 18                                              	mov	[eax+24],ebx
00003E05: 5F                                                    	pop	edi
00003E06: C3                                                    	ret
                                                                      allocate_label:
00003E07: A1 B4 A1 01 00                                        	mov	eax,[labels_list]
00003E0C: B9 08 00 00 00                                        	mov	ecx,LABEL_STRUCTURE_SIZE shr 2
                                                                      initialize_label:
00003E11: 83 E8 04                                              	sub	eax,4
00003E14: C7 00 00 00 00 00                                     	mov	dword [eax],0
00003E1A: E2 F5                                                 	loop	initialize_label
00003E1C: A3 B4 A1 01 00                                        	mov	[labels_list],eax
00003E21: C3                                                    	ret
                                                                
                                                                LABEL_STRUCTURE_SIZE = 32
                                                                
                                                                include '..\exprpars.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                convert_expression:
00003E22: 55                                                    	push	ebp
00003E23: E8 9A 04 00 00                                        	call	get_fp_value
00003E28: 73 73                                                 	jnc	fp_expression
00003E2A: 89 25 F0 A1 01 00                                     	mov	[current_offset],esp
                                                                      expression_loop:
00003E30: 57                                                    	push	edi
00003E31: BF 89 45 01 00                                        	mov	edi,single_operand_operators
00003E36: E8 78 FB FF FF                                        	call	get_operator
00003E3B: 5F                                                    	pop	edi
00003E3C: 08 C0                                                 	or	al,al
00003E3E: 74 07                                                 	jz	expression_element
00003E40: 3C 82                                                 	cmp	al,82h
00003E42: 74 EC                                                 	je	expression_loop
00003E44: 50                                                    	push	eax
00003E45: EB E9                                                 	jmp	expression_loop
                                                                      expression_element:
00003E47: 8A 06                                                 	mov	al,[esi]
00003E49: 3C 1A                                                 	cmp	al,1Ah
00003E4B: 74 0D                                                 	je	expression_number
00003E4D: 3C 22                                                 	cmp	al,22h
00003E4F: 74 09                                                 	je	expression_number
00003E51: 3C 28                                                 	cmp	al,'('
00003E53: 74 05                                                 	je	expression_number
00003E55: B0 21                                                 	mov	al,'!'
00003E57: AA                                                    	stos	byte [edi]
00003E58: EB 05                                                 	jmp	expression_operator
                                                                      expression_number:
00003E5A: E8 55 00 00 00                                        	call	convert_number
                                                                      expression_operator:
00003E5F: 57                                                    	push	edi
00003E60: BF 5F 45 01 00                                        	mov	edi,operators
00003E65: E8 49 FB FF FF                                        	call	get_operator
00003E6A: 5F                                                    	pop	edi
00003E6B: 08 C0                                                 	or	al,al
00003E6D: 74 20                                                 	jz	expression_end
                                                                      operators_loop:
00003E6F: 3B 25 F0 A1 01 00                                     	cmp	esp,[current_offset]
00003E75: 74 15                                                 	je	push_operator
00003E77: 88 C3                                                 	mov	bl,al
00003E79: 80 E3 F0                                              	and	bl,0F0h
00003E7C: 8A 3C 24                                              	mov	bh,byte [esp]
00003E7F: 80 E7 F0                                              	and	bh,0F0h
00003E82: 38 FB                                                 	cmp	bl,bh
00003E84: 77 06                                                 	ja	push_operator
00003E86: 5B                                                    	pop	ebx
00003E87: 88 1F                                                 	mov	byte [edi],bl
00003E89: 47                                                    	inc	edi
00003E8A: EB E3                                                 	jmp	operators_loop
                                                                      push_operator:
00003E8C: 50                                                    	push	eax
00003E8D: EB A1                                                 	jmp	expression_loop
                                                                      expression_end:
00003E8F: 3B 25 F0 A1 01 00                                     	cmp	esp,[current_offset]
00003E95: 74 04                                                 	je	expression_converted
00003E97: 58                                                    	pop	eax
00003E98: AA                                                    	stos	byte [edi]
00003E99: EB F4                                                 	jmp	expression_end
                                                                      expression_converted:
00003E9B: 5D                                                    	pop	ebp
00003E9C: C3                                                    	ret
                                                                      fp_expression:
00003E9D: B0 2E                                                 	mov	al,'.'
00003E9F: AA                                                    	stos	byte [edi]
00003EA0: A1 FC A1 01 00                                        	mov	eax,[fp_value]
00003EA5: AB                                                    	stos	dword [edi]
00003EA6: A1 00 A2 01 00                                        	mov	eax,[fp_value+4]
00003EAB: AB                                                    	stos	dword [edi]
00003EAC: A1 04 A2 01 00                                        	mov	eax,[fp_value+8]
00003EB1: AB                                                    	stos	dword [edi]
00003EB2: 5D                                                    	pop	ebp
00003EB3: C3                                                    	ret
                                                                
                                                                convert_number:
00003EB4: 8D 47 20                                              	lea	eax,[edi+20h]
00003EB7: 8B 15 30 A1 01 00                                     	mov	edx,[memory_end]
00003EBD: 83 3D 5C A1 01 00 00                                  	cmp	[source_start],0
00003EC4: 74 06                                                 	je	check_memory_for_number
00003EC6: 8B 15 B4 A1 01 00                                     	mov	edx,[labels_list]
                                                                      check_memory_for_number:
00003ECC: 39 D0                                                 	cmp	eax,edx
00003ECE: 0F 83 BE C9 FF FF                                     	jae	out_of_memory
00003ED4: 89 E0                                                 	mov	eax,esp
00003ED6: 2B 05 3C A1 01 00                                     	sub	eax,[stack_limit]
00003EDC: 3D 00 01 00 00                                        	cmp	eax,100h
00003EE1: 0F 82 B5 C9 FF FF                                     	jb	stack_overflow
00003EE7: 80 3E 28                                              	cmp	byte [esi],'('
00003EEA: 74 3F                                                 	je	expression_value
00003EEC: 47                                                    	inc	edi
00003EED: E8 31 01 00 00                                        	call	get_number
00003EF2: 72 53                                                 	jc	symbol_value
00003EF4: 09 ED                                                 	or	ebp,ebp
00003EF6: 74 05                                                 	jz	valid_number
00003EF8: C6 47 FF 0F                                           	mov	byte [edi-1],0Fh
00003EFC: C3                                                    	ret
                                                                      valid_number:
00003EFD: 83 7F 04 00                                           	cmp	dword [edi+4],0
00003F01: 75 13                                                 	jne	qword_number
00003F03: 66 83 7F 02 00                                        	cmp	word [edi+2],0
00003F08: 75 14                                                 	jne	dword_number
00003F0A: 80 7F 01 00                                           	cmp	byte [edi+1],0
00003F0E: 75 14                                                 	jne	word_number
                                                                      byte_number:
00003F10: C6 47 FF 01                                           	mov	byte [edi-1],1
00003F14: 47                                                    	inc	edi
00003F15: C3                                                    	ret
                                                                      qword_number:
00003F16: C6 47 FF 08                                           	mov	byte [edi-1],8
00003F1A: 83 C7 08                                              	add	edi,8
00003F1D: C3                                                    	ret
                                                                      dword_number:
00003F1E: C6 47 FF 04                                           	mov	byte [edi-1],4
00003F22: AF                                                    	scas	dword [edi]
00003F23: C3                                                    	ret
                                                                      word_number:
00003F24: C6 47 FF 02                                           	mov	byte [edi-1],2
00003F28: 66 AF                                                 	scas	word [edi]
00003F2A: C3                                                    	ret
                                                                      expression_value:
00003F2B: 46                                                    	inc	esi
00003F2C: FF 35 F0 A1 01 00                                     	push	[current_offset]
00003F32: E8 EB FE FF FF                                        	call	convert_expression
00003F37: 8F 05 F0 A1 01 00                                     	pop	[current_offset]
00003F3D: AC                                                    	lods	byte [esi]
00003F3E: 3C 29                                                 	cmp	al,')'
00003F40: 74 04                                                 	je	subexpression_closed
00003F42: 4E                                                    	dec	esi
00003F43: B0 21                                                 	mov	al,'!'
00003F45: AA                                                    	stosb
                                                                      subexpression_closed:
00003F46: C3                                                    	ret
                                                                      symbol_value:
00003F47: A1 5C A1 01 00                                        	mov	eax,[source_start]
00003F4C: 85 C0                                                 	test	eax,eax
00003F4E: 0F 84 82 00 00 00                                     	jz	preprocessor_value
00003F54: 83 F8 FF                                              	cmp	eax,-1
00003F57: 0F 84 45 CA FF FF                                     	je	invalid_value
00003F5D: 57 56                                                 	push	edi esi
00003F5F: 66 AD                                                 	lods	word [esi]
00003F61: 3C 1A                                                 	cmp	al,1Ah
00003F63: 75 3A                                                 	jne	no_address_register
00003F65: 0F B6 CC                                              	movzx	ecx,ah
00003F68: E8 AC FA FF FF                                        	call	get_symbol
00003F6D: 72 30                                                 	jc	no_address_register
00003F6F: 3C 10                                                 	cmp	al,10h
00003F71: 75 2C                                                 	jne	no_address_register
00003F73: 88 E0                                                 	mov	al,ah
00003F75: C0 EC 04                                              	shr	ah,4
00003F78: 80 FC 04                                              	cmp	ah,4
00003F7B: 74 51                                                 	je	register_value
00003F7D: 80 E4 FE                                              	and	ah,not 1
00003F80: 80 FC 08                                              	cmp	ah,8
00003F83: 74 49                                                 	je	register_value
00003F85: 80 FC 0C                                              	cmp	ah,0Ch
00003F88: 73 44                                                 	jae	register_value
00003F8A: 80 FC 06                                              	cmp	ah,6
00003F8D: 74 3F                                                 	je	register_value
00003F8F: 3C 23                                                 	cmp	al,23h
00003F91: 74 3B                                                 	je	register_value
00003F93: 3C 25                                                 	cmp	al,25h
00003F95: 74 37                                                 	je	register_value
00003F97: 3C 26                                                 	cmp	al,26h
00003F99: 74 33                                                 	je	register_value
00003F9B: 3C 27                                                 	cmp	al,27h
00003F9D: 74 2F                                                 	je	register_value
                                                                      no_address_register:
00003F9F: 5E                                                    	pop	esi
00003FA0: BF A9 45 01 00                                        	mov	edi,directive_operators
00003FA5: E8 09 FA FF FF                                        	call	get_operator
00003FAA: 5F                                                    	pop	edi
00003FAB: 08 C0                                                 	or	al,al
00003FAD: 75 18                                                 	jnz	broken_value
00003FAF: AC                                                    	lods	byte [esi]
00003FB0: 3C 1A                                                 	cmp	al,1Ah
00003FB2: 0F 85 EA C9 FF FF                                     	jne	invalid_value
00003FB8: AC                                                    	lods	byte [esi]
00003FB9: 0F B6 C8                                              	movzx	ecx,al
00003FBC: E8 69 FB FF FF                                        	call	get_label_id
                                                                      store_label_value:
00003FC1: C6 47 FF 11                                           	mov	byte [edi-1],11h
00003FC5: AB                                                    	stos	dword [edi]
00003FC6: C3                                                    	ret
                                                                      broken_value:
00003FC7: B8 0F 00 00 00                                        	mov	eax,0Fh
00003FCC: EB F3                                                 	jmp	store_label_value
                                                                      register_value:
00003FCE: 5A 5F                                                 	pop	edx edi
00003FD0: C6 47 FF 10                                           	mov	byte [edi-1],10h
00003FD4: AA                                                    	stos	byte [edi]
00003FD5: C3                                                    	ret
                                                                      preprocessor_value:
00003FD6: 4F                                                    	dec	edi
00003FD7: AC                                                    	lods	byte [esi]
00003FD8: 3C 1A                                                 	cmp	al,1Ah
00003FDA: 0F 85 C2 C9 FF FF                                     	jne	invalid_value
00003FE0: AC                                                    	lods	byte [esi]
00003FE1: 88 C1                                                 	mov	cl,al
00003FE3: B5 02                                                 	mov	ch,10b
00003FE5: E8 6A D8 FF FF                                        	call	get_preprocessor_symbol
00003FEA: 0F 82 B2 C9 FF FF                                     	jc	invalid_value
00003FF0: 85 D2                                                 	test	edx,edx
00003FF2: 74 17                                                 	jz	special_preprocessor_value
00003FF4: 56                                                    	push	esi
00003FF5: 8B 72 08                                              	mov	esi,[edx+8]
00003FF8: FF 35 F0 A1 01 00                                     	push	[current_offset]
00003FFE: E8 1F FE FF FF                                        	call	convert_expression
00004003: 8F 05 F0 A1 01 00                                     	pop	[current_offset]
00004009: 5E                                                    	pop	esi
0000400A: C3                                                    	ret
                                                                      special_preprocessor_value:
0000400B: 3D 07 1F 00 00                                        	cmp	eax,preprocessed_line_value
00004010: 0F 85 8C C9 FF FF                                     	jne	invalid_value
00004016: E8 15 DF FF FF                                        	call	get_current_line_from_file
0000401B: B0 04                                                 	mov	al,4
0000401D: AA                                                    	stos	byte [edi]
0000401E: 8B 43 04                                              	mov	eax,[ebx+4]
00004021: AB                                                    	stos	dword [edi]
00004022: C3                                                    	ret
                                                                
                                                                get_number:
00004023: 31 ED                                                 	xor	ebp,ebp
00004025: AC                                                    	lods	byte [esi]
00004026: 3C 22                                                 	cmp	al,22h
00004028: 0F 84 55 02 00 00                                     	je	get_text_number
0000402E: 3C 1A                                                 	cmp	al,1Ah
00004030: 0F 85 15 01 00 00                                     	jne	not_number
00004036: AC                                                    	lods	byte [esi]
00004037: 0F B6 C8                                              	movzx	ecx,al
0000403A: 89 35 EC A1 01 00                                     	mov	[number_start],esi
00004040: 8A 06                                                 	mov	al,[esi]
00004042: 3C 24                                                 	cmp	al,'$'
00004044: 74 0A                                                 	je	number_begin
00004046: 2C 30                                                 	sub	al,30h
00004048: 3C 09                                                 	cmp	al,9
0000404A: 0F 87 F4 00 00 00                                     	ja	invalid_number
                                                                      number_begin:
00004050: 89 F3                                                 	mov	ebx,esi
00004052: 01 CE                                                 	add	esi,ecx
00004054: 56                                                    	push	esi
00004055: 4E                                                    	dec	esi
00004056: C7 07 00 00 00 00                                     	mov	dword [edi],0
0000405C: C7 47 04 00 00 00 00                                  	mov	dword [edi+4],0
00004063: 80 3B 24                                              	cmp	byte [ebx],'$'
00004066: 0F 84 2E 01 00 00                                     	je	pascal_hex_number
0000406C: 66 81 3B 30 78                                        	cmp	word [ebx],'0x'
00004071: 0F 84 28 01 00 00                                     	je	get_hex_number
00004077: 8A 06                                                 	mov	al,[esi]
00004079: 4E                                                    	dec	esi
0000407A: 3C 68                                                 	cmp	al,'h'
0000407C: 0F 84 1D 01 00 00                                     	je	get_hex_number
00004082: 3C 62                                                 	cmp	al,'b'
00004084: 0F 84 C4 00 00 00                                     	je	get_bin_number
0000408A: 3C 64                                                 	cmp	al,'d'
0000408C: 74 35                                                 	je	get_dec_number
0000408E: 3C 6F                                                 	cmp	al,'o'
00004090: 0F 84 7E 01 00 00                                     	je	get_oct_number
00004096: 3C 71                                                 	cmp	al,'q'
00004098: 0F 84 76 01 00 00                                     	je	get_oct_number
0000409E: 3C 48                                                 	cmp	al,'H'
000040A0: 0F 84 F9 00 00 00                                     	je	get_hex_number
000040A6: 3C 42                                                 	cmp	al,'B'
000040A8: 0F 84 A0 00 00 00                                     	je	get_bin_number
000040AE: 3C 44                                                 	cmp	al,'D'
000040B0: 74 11                                                 	je	get_dec_number
000040B2: 3C 4F                                                 	cmp	al,'O'
000040B4: 0F 84 5A 01 00 00                                     	je	get_oct_number
000040BA: 3C 51                                                 	cmp	al,'Q'
000040BC: 0F 84 52 01 00 00                                     	je	get_oct_number
000040C2: 46                                                    	inc	esi
                                                                      get_dec_number:
000040C3: 89 F3                                                 	mov	ebx,esi
000040C5: 8B 35 EC A1 01 00                                     	mov	esi,[number_start]
                                                                      get_dec_digit:
000040CB: 39 DE                                                 	cmp	esi,ebx
000040CD: 0F 87 AD 01 00 00                                     	ja	number_ok
000040D3: 80 3E 27                                              	cmp	byte [esi],27h
000040D6: 74 49                                                 	je	next_dec_digit
000040D8: 80 3E 5F                                              	cmp	byte [esi],'_'
000040DB: 74 44                                                 	je	next_dec_digit
000040DD: 31 D2                                                 	xor	edx,edx
000040DF: 8B 07                                                 	mov	eax,[edi]
000040E1: 0F A4 C2 02                                           	shld	edx,eax,2
000040E5: C1 E0 02                                              	shl	eax,2
000040E8: 03 07                                                 	add	eax,[edi]
000040EA: 83 D2 00                                              	adc	edx,0
000040ED: 01 C0                                                 	add	eax,eax
000040EF: 11 D2                                                 	adc	edx,edx
000040F1: 89 07                                                 	mov	[edi],eax
000040F3: 8B 47 04                                              	mov	eax,[edi+4]
000040F6: 01 C0                                                 	add	eax,eax
000040F8: 72 2A                                                 	jc	dec_out_of_range
000040FA: 01 C0                                                 	add	eax,eax
000040FC: 72 26                                                 	jc	dec_out_of_range
000040FE: 03 47 04                                              	add	eax,[edi+4]
00004101: 72 21                                                 	jc	dec_out_of_range
00004103: 01 C0                                                 	add	eax,eax
00004105: 72 1D                                                 	jc	dec_out_of_range
00004107: 01 D0                                                 	add	eax,edx
00004109: 72 19                                                 	jc	dec_out_of_range
0000410B: 89 47 04                                              	mov	[edi+4],eax
0000410E: 0F B6 06                                              	movzx	eax,byte [esi]
00004111: 2C 30                                                 	sub	al,30h
00004113: 72 2E                                                 	jc	bad_number
00004115: 3C 09                                                 	cmp	al,9
00004117: 77 2A                                                 	ja	bad_number
00004119: 01 07                                                 	add	[edi],eax
0000411B: 83 57 04 00                                           	adc	dword [edi+4],0
0000411F: 72 03                                                 	jc	dec_out_of_range
                                                                      next_dec_digit:
00004121: 46                                                    	inc	esi
00004122: EB A7                                                 	jmp	get_dec_digit
                                                                      dec_out_of_range:
00004124: 39 DE                                                 	cmp	esi,ebx
00004126: 77 13                                                 	ja	dec_out_of_range_finished
00004128: AC                                                    	lods	byte [esi]
00004129: 3C 27                                                 	cmp	al,27h
0000412B: 74 16                                                 	je	bad_number
0000412D: 3C 5F                                                 	cmp	al,'_'
0000412F: 74 12                                                 	je	bad_number
00004131: 2C 30                                                 	sub	al,30h
00004133: 72 0E                                                 	jc	bad_number
00004135: 3C 09                                                 	cmp	al,9
00004137: 77 0A                                                 	ja	bad_number
00004139: EB E9                                                 	jmp	dec_out_of_range
                                                                      dec_out_of_range_finished:
0000413B: 83 CD FF                                              	or	ebp,-1
0000413E: E9 3D 01 00 00                                        	jmp	number_ok
                                                                      bad_number:
00004143: 58                                                    	pop	eax
                                                                      invalid_number:
00004144: 8B 35 EC A1 01 00                                     	mov	esi,[number_start]
0000414A: 4E                                                    	dec	esi
                                                                      not_number:
0000414B: 4E                                                    	dec	esi
0000414C: F9                                                    	stc
0000414D: C3                                                    	ret
                                                                      get_bin_number:
0000414E: 30 DB                                                 	xor	bl,bl
                                                                      get_bin_digit:
00004150: 3B 35 EC A1 01 00                                     	cmp	esi,[number_start]
00004156: 0F 82 24 01 00 00                                     	jb	number_ok
0000415C: 0F B6 06                                              	movzx	eax,byte [esi]
0000415F: 3C 27                                                 	cmp	al,27h
00004161: 74 34                                                 	je	bin_digit_skip
00004163: 3C 5F                                                 	cmp	al,'_'
00004165: 74 30                                                 	je	bin_digit_skip
00004167: 2C 30                                                 	sub	al,30h
00004169: 3C 01                                                 	cmp	al,1
0000416B: 77 D6                                                 	ja	bad_number
0000416D: 31 D2                                                 	xor	edx,edx
0000416F: 88 D9                                                 	mov	cl,bl
00004171: 4E                                                    	dec	esi
00004172: 80 FB 40                                              	cmp	bl,64
00004175: 74 17                                                 	je	bin_out_of_range
00004177: FE C3                                                 	inc	bl
00004179: 80 F9 20                                              	cmp	cl,32
0000417C: 73 06                                                 	jae	bin_digit_high
0000417E: D3 E0                                                 	shl	eax,cl
00004180: 09 07                                                 	or	dword [edi],eax
00004182: EB CC                                                 	jmp	get_bin_digit
                                                                      bin_digit_high:
00004184: 80 E9 20                                              	sub	cl,32
00004187: D3 E0                                                 	shl	eax,cl
00004189: 09 47 04                                              	or	dword [edi+4],eax
0000418C: EB C2                                                 	jmp	get_bin_digit
                                                                      bin_out_of_range:
0000418E: 08 C0                                                 	or	al,al
00004190: 74 BE                                                 	jz	get_bin_digit
00004192: 83 CD FF                                              	or	ebp,-1
00004195: EB B9                                                 	jmp	get_bin_digit
                                                                      bin_digit_skip:
00004197: 4E                                                    	dec	esi
00004198: EB B6                                                 	jmp	get_bin_digit
                                                                      pascal_hex_number:
0000419A: 80 F9 01                                              	cmp	cl,1
0000419D: 74 A4                                                 	je	bad_number
                                                                      get_hex_number:
0000419F: 30 DB                                                 	xor	bl,bl
                                                                      get_hex_digit:
000041A1: 3B 35 EC A1 01 00                                     	cmp	esi,[number_start]
000041A7: 0F 82 D3 00 00 00                                     	jb	number_ok
000041AD: 0F B6 06                                              	movzx	eax,byte [esi]
000041B0: 3C 27                                                 	cmp	al,27h
000041B2: 74 5D                                                 	je	hex_digit_skip
000041B4: 3C 5F                                                 	cmp	al,'_'
000041B6: 74 59                                                 	je	hex_digit_skip
000041B8: 3C 78                                                 	cmp	al,'x'
000041BA: 0F 84 B3 00 00 00                                     	je	hex_number_ok
000041C0: 3C 24                                                 	cmp	al,'$'
000041C2: 0F 84 AC 00 00 00                                     	je	pascal_hex_ok
000041C8: 2C 30                                                 	sub	al,30h
000041CA: 3C 09                                                 	cmp	al,9
000041CC: 76 18                                                 	jbe	hex_digit_ok
000041CE: 2C 07                                                 	sub	al,7
000041D0: 3C 0F                                                 	cmp	al,15
000041D2: 76 0A                                                 	jbe	hex_letter_digit_ok
000041D4: 2C 20                                                 	sub	al,20h
000041D6: 3C 0F                                                 	cmp	al,15
000041D8: 0F 87 65 FF FF FF                                     	ja	bad_number
                                                                      hex_letter_digit_ok:
000041DE: 3C 0A                                                 	cmp	al,10
000041E0: 0F 82 5D FF FF FF                                     	jb	bad_number
                                                                      hex_digit_ok:
000041E6: 31 D2                                                 	xor	edx,edx
000041E8: 88 D9                                                 	mov	cl,bl
000041EA: 4E                                                    	dec	esi
000041EB: 80 FB 40                                              	cmp	bl,64
000041EE: 74 18                                                 	je	hex_out_of_range
000041F0: 80 C3 04                                              	add	bl,4
000041F3: 80 F9 20                                              	cmp	cl,32
000041F6: 73 06                                                 	jae	hex_digit_high
000041F8: D3 E0                                                 	shl	eax,cl
000041FA: 09 07                                                 	or	dword [edi],eax
000041FC: EB A3                                                 	jmp	get_hex_digit
                                                                      hex_digit_high:
000041FE: 80 E9 20                                              	sub	cl,32
00004201: D3 E0                                                 	shl	eax,cl
00004203: 09 47 04                                              	or	dword [edi+4],eax
00004206: EB 99                                                 	jmp	get_hex_digit
                                                                      hex_out_of_range:
00004208: 08 C0                                                 	or	al,al
0000420A: 74 95                                                 	jz	get_hex_digit
0000420C: 83 CD FF                                              	or	ebp,-1
0000420F: EB 90                                                 	jmp	get_hex_digit
                                                                      hex_digit_skip:
00004211: 4E                                                    	dec	esi
00004212: EB 8D                                                 	jmp	get_hex_digit
                                                                      get_oct_number:
00004214: 30 DB                                                 	xor	bl,bl
                                                                      get_oct_digit:
00004216: 3B 35 EC A1 01 00                                     	cmp	esi,[number_start]
0000421C: 72 62                                                 	jb	number_ok
0000421E: 0F B6 06                                              	movzx	eax,byte [esi]
00004221: 3C 27                                                 	cmp	al,27h
00004223: 74 42                                                 	je	oct_digit_skip
00004225: 3C 5F                                                 	cmp	al,'_'
00004227: 74 3E                                                 	je	oct_digit_skip
00004229: 2C 30                                                 	sub	al,30h
0000422B: 3C 07                                                 	cmp	al,7
0000422D: 0F 87 10 FF FF FF                                     	ja	bad_number
                                                                      oct_digit_ok:
00004233: 31 D2                                                 	xor	edx,edx
00004235: 88 D9                                                 	mov	cl,bl
00004237: 4E                                                    	dec	esi
00004238: 80 FB 3F                                              	cmp	bl,63
0000423B: 77 2D                                                 	ja	oct_out_of_range
0000423D: 75 04                                                 	jne	oct_range_ok
0000423F: 3C 01                                                 	cmp	al,1
00004241: 77 27                                                 	ja	oct_out_of_range
                                                                      oct_range_ok:
00004243: 80 C3 03                                              	add	bl,3
00004246: 80 F9 1E                                              	cmp	cl,30
00004249: 74 08                                                 	je	oct_digit_wrap
0000424B: 77 10                                                 	ja	oct_digit_high
0000424D: D3 E0                                                 	shl	eax,cl
0000424F: 09 07                                                 	or	dword [edi],eax
00004251: EB C3                                                 	jmp	get_oct_digit
                                                                      oct_digit_wrap:
00004253: D3 E0                                                 	shl	eax,cl
00004255: 83 57 04 00                                           	adc	dword [edi+4],0
00004259: 09 07                                                 	or	dword [edi],eax
0000425B: EB B9                                                 	jmp	get_oct_digit
                                                                      oct_digit_high:
0000425D: 80 E9 20                                              	sub	cl,32
00004260: D3 E0                                                 	shl	eax,cl
00004262: 09 47 04                                              	or	dword [edi+4],eax
00004265: EB AF                                                 	jmp	get_oct_digit
                                                                      oct_digit_skip:
00004267: 4E                                                    	dec	esi
00004268: EB AC                                                 	jmp	get_oct_digit
                                                                      oct_out_of_range:
0000426A: 08 C0                                                 	or	al,al
0000426C: 74 A8                                                 	jz	get_oct_digit
0000426E: 83 CD FF                                              	or	ebp,-1
00004271: EB A3                                                 	jmp	get_oct_digit
                                                                      hex_number_ok:
00004273: 4E                                                    	dec	esi
                                                                      pascal_hex_ok:
00004274: 3B 35 EC A1 01 00                                     	cmp	esi,[number_start]
0000427A: 0F 85 C3 FE FF FF                                     	jne	bad_number
                                                                      number_ok:
00004280: 5E                                                    	pop	esi
                                                                      number_done:
00004281: F8                                                    	clc
00004282: C3                                                    	ret
                                                                      get_text_number:
00004283: AD                                                    	lods	dword [esi]
00004284: 89 C2                                                 	mov	edx,eax
00004286: 30 DB                                                 	xor	bl,bl
00004288: C7 07 00 00 00 00                                     	mov	dword [edi],0
0000428E: C7 47 04 00 00 00 00                                  	mov	dword [edi+4],0
                                                                      get_text_character:
00004295: 83 EA 01                                              	sub	edx,1
00004298: 72 E7                                                 	jc	number_done
0000429A: 0F B6 06                                              	movzx	eax,byte [esi]
0000429D: 46                                                    	inc	esi
0000429E: 88 D9                                                 	mov	cl,bl
000042A0: 80 FB 40                                              	cmp	bl,64
000042A3: 74 18                                                 	je	text_out_of_range
000042A5: 80 C3 08                                              	add	bl,8
000042A8: 80 F9 20                                              	cmp	cl,32
000042AB: 73 06                                                 	jae	text_character_high
000042AD: D3 E0                                                 	shl	eax,cl
000042AF: 09 07                                                 	or	dword [edi],eax
000042B1: EB E2                                                 	jmp	get_text_character
                                                                      text_character_high:
000042B3: 80 E9 20                                              	sub	cl,32
000042B6: D3 E0                                                 	shl	eax,cl
000042B8: 09 47 04                                              	or	dword [edi+4],eax
000042BB: EB D8                                                 	jmp	get_text_character
                                                                      text_out_of_range:
000042BD: 83 CD FF                                              	or	ebp,-1
000042C0: EB D3                                                 	jmp	get_text_character
                                                                
                                                                get_fp_value:
000042C2: 57 56                                                 	push	edi esi
                                                                      fp_value_start:
000042C4: AC                                                    	lods	byte [esi]
000042C5: 3C 2D                                                 	cmp	al,'-'
000042C7: 74 FB                                                 	je	fp_value_start
000042C9: 3C 2B                                                 	cmp	al,'+'
000042CB: 74 F7                                                 	je	fp_value_start
000042CD: 3C 1A                                                 	cmp	al,1Ah
000042CF: 75 3B                                                 	jne	not_fp_value
000042D1: AC                                                    	lods	byte [esi]
000042D2: 0F B6 C8                                              	movzx	ecx,al
000042D5: 80 F9 01                                              	cmp	cl,1
000042D8: 76 32                                                 	jbe	not_fp_value
000042DA: 8D 56 01                                              	lea	edx,[esi+1]
000042DD: 30 E4                                                 	xor	ah,ah
                                                                      check_fp_value:
000042DF: AC                                                    	lods	byte [esi]
000042E0: 3C 2E                                                 	cmp	al,'.'
000042E2: 74 1A                                                 	je	fp_character_dot
000042E4: 3C 45                                                 	cmp	al,'E'
000042E6: 74 32                                                 	je	fp_character_exp
000042E8: 3C 65                                                 	cmp	al,'e'
000042EA: 74 2E                                                 	je	fp_character_exp
000042EC: 3C 46                                                 	cmp	al,'F'
000042EE: 74 20                                                 	je	fp_last_character
000042F0: 3C 66                                                 	cmp	al,'f'
000042F2: 74 1C                                                 	je	fp_last_character
                                                                      digit_expected:
000042F4: 3C 30                                                 	cmp	al,'0'
000042F6: 72 14                                                 	jb	not_fp_value
000042F8: 3C 39                                                 	cmp	al,'9'
000042FA: 77 10                                                 	ja	not_fp_value
000042FC: EB 43                                                 	jmp	fp_character_ok
                                                                      fp_character_dot:
000042FE: 39 D6                                                 	cmp	esi,edx
00004300: 74 0A                                                 	je	not_fp_value
00004302: 08 E4                                                 	or	ah,ah
00004304: 75 06                                                 	jnz	not_fp_value
00004306: 80 CC 01                                              	or	ah,1
00004309: AC                                                    	lods	byte [esi]
0000430A: E2 E8                                                 	loop	digit_expected
                                                                      not_fp_value:
0000430C: 5E 5F                                                 	pop	esi edi
0000430E: F9                                                    	stc
0000430F: C3                                                    	ret
                                                                      fp_last_character:
00004310: 80 F9 01                                              	cmp	cl,1
00004313: 75 F7                                                 	jne	not_fp_value
00004315: 80 CC 04                                              	or	ah,4
00004318: EB 27                                                 	jmp	fp_character_ok
                                                                      fp_character_exp:
0000431A: 39 D6                                                 	cmp	esi,edx
0000431C: 74 EE                                                 	je	not_fp_value
0000431E: 80 FC 01                                              	cmp	ah,1
00004321: 77 E9                                                 	ja	not_fp_value
00004323: 80 CC 02                                              	or	ah,2
00004326: 83 F9 01                                              	cmp	ecx,1
00004329: 75 16                                                 	jne	fp_character_ok
0000432B: 80 3E 2B                                              	cmp	byte [esi],'+'
0000432E: 74 05                                                 	je	fp_exp_sign
00004330: 80 3E 2D                                              	cmp	byte [esi],'-'
00004333: 75 0C                                                 	jne	fp_character_ok
                                                                      fp_exp_sign:
00004335: 46                                                    	inc	esi
00004336: 80 3E 1A                                              	cmp	byte [esi],1Ah
00004339: 75 D1                                                 	jne	not_fp_value
0000433B: 46                                                    	inc	esi
0000433C: AC                                                    	lods	byte [esi]
0000433D: 0F B6 C8                                              	movzx	ecx,al
00004340: 41                                                    	inc	ecx
                                                                      fp_character_ok:
00004341: 49                                                    	dec	ecx
00004342: 75 9B                                                 	jnz	check_fp_value
00004344: 08 E4                                                 	or	ah,ah
00004346: 74 C4                                                 	jz	not_fp_value
00004348: 5E                                                    	pop	esi
00004349: C6 05 B6 A2 01 00 00                                  	mov	[fp_sign],0
                                                                      fp_get_sign:
00004350: AC                                                    	lods	byte [esi]
00004351: 3C 1A                                                 	cmp	al,1Ah
00004353: 74 0D                                                 	je	fp_get
00004355: 3C 2B                                                 	cmp	al,'+'
00004357: 74 F7                                                 	je	fp_get_sign
00004359: 80 35 B6 A2 01 00 01                                  	xor	[fp_sign],1
00004360: EB EE                                                 	jmp	fp_get_sign
                                                                      fp_get:
00004362: AC                                                    	lods	byte [esi]
00004363: 0F B6 C8                                              	movzx	ecx,al
00004366: 31 D2                                                 	xor	edx,edx
00004368: BF FC A1 01 00                                        	mov	edi,fp_value
0000436D: 89 17                                                 	mov	[edi],edx
0000436F: 89 57 04                                              	mov	[edi+4],edx
00004372: 89 57 0C                                              	mov	[edi+12],edx
00004375: E8 04 03 00 00                                        	call	fp_optimize
0000437A: C6 05 B7 A2 01 00 00                                  	mov	[fp_format],0
00004381: 8A 06                                                 	mov	al,[esi]
                                                                      fp_before_dot:
00004383: AC                                                    	lods	byte [esi]
00004384: 3C 2E                                                 	cmp	al,'.'
00004386: 74 5B                                                 	je	fp_dot
00004388: 3C 45                                                 	cmp	al,'E'
0000438A: 0F 84 E8 00 00 00                                     	je	fp_exponent
00004390: 3C 65                                                 	cmp	al,'e'
00004392: 0F 84 E0 00 00 00                                     	je	fp_exponent
00004398: 3C 46                                                 	cmp	al,'F'
0000439A: 0F 84 43 01 00 00                                     	je	fp_done
000043A0: 3C 66                                                 	cmp	al,'f'
000043A2: 0F 84 3B 01 00 00                                     	je	fp_done
000043A8: 2C 30                                                 	sub	al,30h
000043AA: BF 0C A2 01 00                                        	mov	edi,fp_value+16
000043AF: 31 D2                                                 	xor	edx,edx
000043B1: 89 57 0C                                              	mov	dword [edi+12],edx
000043B4: 89 17                                                 	mov	dword [edi],edx
000043B6: 89 57 04                                              	mov	dword [edi+4],edx
000043B9: 88 47 07                                              	mov	[edi+7],al
000043BC: B2 07                                                 	mov	dl,7
000043BE: 89 57 08                                              	mov	dword [edi+8],edx
000043C1: E8 B8 02 00 00                                        	call	fp_optimize
000043C6: BF FC A1 01 00                                        	mov	edi,fp_value
000043CB: 51                                                    	push	ecx
000043CC: B9 0A 00 00 00                                        	mov	ecx,10
000043D1: E8 49 01 00 00                                        	call	fp_mul
000043D6: 59                                                    	pop	ecx
000043D7: BB 0C A2 01 00                                        	mov	ebx,fp_value+16
000043DC: E8 0B 02 00 00                                        	call	fp_add
000043E1: E2 A0                                                 	loop	fp_before_dot
                                                                      fp_dot:
000043E3: BF 0C A2 01 00                                        	mov	edi,fp_value+16
000043E8: 31 D2                                                 	xor	edx,edx
000043EA: 89 17                                                 	mov	[edi],edx
000043EC: 89 57 04                                              	mov	[edi+4],edx
000043EF: C6 47 07 80                                           	mov	byte [edi+7],80h
000043F3: 89 57 08                                              	mov	[edi+8],edx
000043F6: 89 57 0C                                              	mov	dword [edi+12],edx
000043F9: 49                                                    	dec	ecx
000043FA: 0F 84 E3 00 00 00                                     	jz	fp_done
                                                                      fp_after_dot:
00004400: AC                                                    	lods	byte [esi]
00004401: 3C 45                                                 	cmp	al,'E'
00004403: 74 73                                                 	je	fp_exponent
00004405: 3C 65                                                 	cmp	al,'e'
00004407: 74 6F                                                 	je	fp_exponent
00004409: 3C 46                                                 	cmp	al,'F'
0000440B: 0F 84 D2 00 00 00                                     	je	fp_done
00004411: 3C 66                                                 	cmp	al,'f'
00004413: 0F 84 CA 00 00 00                                     	je	fp_done
00004419: FE 05 B7 A2 01 00                                     	inc	[fp_format]
0000441F: 80 3D B7 A2 01 00 80                                  	cmp	[fp_format],80h
00004426: 75 07                                                 	jne	fp_counter_ok
00004428: C6 05 B7 A2 01 00 7F                                  	mov	[fp_format],7Fh
                                                                      fp_counter_ok:
0000442F: 4E                                                    	dec	esi
00004430: BF 0C A2 01 00                                        	mov	edi,fp_value+16
00004435: 51                                                    	push	ecx
00004436: B9 0A 00 00 00                                        	mov	ecx,10
0000443B: E8 39 01 00 00                                        	call	fp_div
00004440: FF 37                                                 	push	dword [edi]
00004442: FF 77 04                                              	push	dword [edi+4]
00004445: FF 77 08                                              	push	dword [edi+8]
00004448: FF 77 0C                                              	push	dword [edi+12]
0000444B: AC                                                    	lods	byte [esi]
0000444C: 2C 30                                                 	sub	al,30h
0000444E: 0F B6 C8                                              	movzx	ecx,al
00004451: E8 C9 00 00 00                                        	call	fp_mul
00004456: 89 FB                                                 	mov	ebx,edi
00004458: BF FC A1 01 00                                        	mov	edi,fp_value
0000445D: E8 8A 01 00 00                                        	call	fp_add
00004462: BF 0C A2 01 00                                        	mov	edi,fp_value+16
00004467: 8F 47 0C                                              	pop	dword [edi+12]
0000446A: 8F 47 08                                              	pop	dword [edi+8]
0000446D: 8F 47 04                                              	pop	dword [edi+4]
00004470: 8F 07                                                 	pop	dword [edi]
00004472: 59                                                    	pop	ecx
00004473: 49                                                    	dec	ecx
00004474: 75 8A                                                 	jnz	fp_after_dot
00004476: EB 6B                                                 	jmp	fp_done
                                                                      fp_exponent:
00004478: 80 0D B7 A2 01 00 80                                  	or	[fp_format],80h
0000447F: 31 D2                                                 	xor	edx,edx
00004481: 31 ED                                                 	xor	ebp,ebp
00004483: 49                                                    	dec	ecx
00004484: 75 13                                                 	jnz	get_exponent
00004486: 80 3E 2B                                              	cmp	byte [esi],'+'
00004489: 74 07                                                 	je	fp_exponent_sign
0000448B: 80 3E 2D                                              	cmp	byte [esi],'-'
0000448E: 75 53                                                 	jne	fp_done
00004490: F7 D5                                                 	not	ebp
                                                                      fp_exponent_sign:
00004492: 83 C6 02                                              	add	esi,2
00004495: AC                                                    	lods	byte [esi]
00004496: 0F B6 C8                                              	movzx	ecx,al
                                                                      get_exponent:
00004499: 0F B6 06                                              	movzx	eax,byte [esi]
0000449C: 46                                                    	inc	esi
0000449D: 2C 30                                                 	sub	al,30h
0000449F: 3C 0A                                                 	cmp	al,10
000044A1: 73 13                                                 	jae	exponent_ok
000044A3: 6B D2 0A                                              	imul	edx,10
000044A6: 81 FA 00 80 00 00                                     	cmp	edx,8000h
000044AC: 0F 83 FA C4 FF FF                                     	jae	value_out_of_range
000044B2: 01 C2                                                 	add	edx,eax
000044B4: E2 E3                                                 	loop	get_exponent
                                                                      exponent_ok:
000044B6: BF FC A1 01 00                                        	mov	edi,fp_value
000044BB: 09 D2                                                 	or	edx,edx
000044BD: 74 24                                                 	jz	fp_done
000044BF: 89 D1                                                 	mov	ecx,edx
000044C1: 09 ED                                                 	or	ebp,ebp
000044C3: 75 10                                                 	jnz	fp_negative_power
                                                                      fp_power:
000044C5: 51                                                    	push	ecx
000044C6: B9 0A 00 00 00                                        	mov	ecx,10
000044CB: E8 4F 00 00 00                                        	call	fp_mul
000044D0: 59                                                    	pop	ecx
000044D1: E2 F2                                                 	loop	fp_power
000044D3: EB 0E                                                 	jmp	fp_done
                                                                      fp_negative_power:
000044D5: 51                                                    	push	ecx
000044D6: B9 0A 00 00 00                                        	mov	ecx,10
000044DB: E8 99 00 00 00                                        	call	fp_div
000044E0: 59                                                    	pop	ecx
000044E1: E2 F2                                                 	loop	fp_negative_power
                                                                      fp_done:
000044E3: BF FC A1 01 00                                        	mov	edi,fp_value
000044E8: A0 B7 A2 01 00                                        	mov	al,[fp_format]
000044ED: 88 47 0A                                              	mov	[edi+10],al
000044F0: A0 B6 A2 01 00                                        	mov	al,[fp_sign]
000044F5: 88 47 0B                                              	mov	[edi+11],al
000044F8: F6 47 0F 80                                           	test	byte [edi+15],80h
000044FC: 74 1E                                                 	jz	fp_ok
000044FE: 83 07 01                                              	add	dword [edi],1
00004501: 83 57 04 00                                           	adc	dword [edi+4],0
00004505: 73 15                                                 	jnc	fp_ok
00004507: 8B 47 04                                              	mov	eax,[edi+4]
0000450A: 0F AC 07 01                                           	shrd	[edi],eax,1
0000450E: D1 E8                                                 	shr	eax,1
00004510: 0D 00 00 00 80                                        	or	eax,80000000h
00004515: 89 47 04                                              	mov	[edi+4],eax
00004518: 66 FF 47 08                                           	inc	word [edi+8]
                                                                      fp_ok:
0000451C: 5F                                                    	pop	edi
0000451D: F8                                                    	clc
0000451E: C3                                                    	ret
                                                                      fp_mul:
0000451F: 09 C9                                                 	or	ecx,ecx
00004521: 0F 84 80 01 00 00                                     	jz	fp_zero
00004527: 8B 47 0C                                              	mov	eax,[edi+12]
0000452A: F7 E1                                                 	mul	ecx
0000452C: 89 47 0C                                              	mov	[edi+12],eax
0000452F: 89 D3                                                 	mov	ebx,edx
00004531: 8B 07                                                 	mov	eax,[edi]
00004533: F7 E1                                                 	mul	ecx
00004535: 01 D8                                                 	add	eax,ebx
00004537: 83 D2 00                                              	adc	edx,0
0000453A: 89 07                                                 	mov	[edi],eax
0000453C: 89 D3                                                 	mov	ebx,edx
0000453E: 8B 47 04                                              	mov	eax,[edi+4]
00004541: F7 E1                                                 	mul	ecx
00004543: 01 D8                                                 	add	eax,ebx
00004545: 83 D2 00                                              	adc	edx,0
00004548: 89 47 04                                              	mov	[edi+4],eax
                                                                      .loop:
0000454B: 09 D2                                                 	or	edx,edx
0000454D: 74 29                                                 	jz	.done
0000454F: 8B 07                                                 	mov	eax,[edi]
00004551: 0F AC 47 0C 01                                        	shrd	[edi+12],eax,1
00004556: 8B 47 04                                              	mov	eax,[edi+4]
00004559: 0F AC 07 01                                           	shrd	[edi],eax,1
0000455D: 0F AC D0 01                                           	shrd	eax,edx,1
00004561: 89 47 04                                              	mov	[edi+4],eax
00004564: D1 EA                                                 	shr	edx,1
00004566: FF 47 08                                              	inc	dword [edi+8]
00004569: 81 7F 08 00 80 00 00                                  	cmp	dword [edi+8],8000h
00004570: 0F 8D 36 C4 FF FF                                     	jge	value_out_of_range
00004576: EB D3                                                 	jmp	.loop
                                                                      .done:
00004578: C3                                                    	ret
                                                                      fp_div:
00004579: 8B 47 04                                              	mov	eax,[edi+4]
0000457C: 31 D2                                                 	xor	edx,edx
0000457E: F7 F1                                                 	div	ecx
00004580: 89 47 04                                              	mov	[edi+4],eax
00004583: 8B 07                                                 	mov	eax,[edi]
00004585: F7 F1                                                 	div	ecx
00004587: 89 07                                                 	mov	[edi],eax
00004589: 8B 47 0C                                              	mov	eax,[edi+12]
0000458C: F7 F1                                                 	div	ecx
0000458E: 89 47 0C                                              	mov	[edi+12],eax
00004591: 89 C3                                                 	mov	ebx,eax
00004593: 0B 1F                                                 	or	ebx,[edi]
00004595: 0B 5F 04                                              	or	ebx,[edi+4]
00004598: 0F 84 09 01 00 00                                     	jz	fp_zero
                                                                      .loop:
0000459E: F6 47 07 80                                           	test	byte [edi+7],80h
000045A2: 75 1A                                                 	jnz	.exp_ok
000045A4: 8B 07                                                 	mov	eax,[edi]
000045A6: 0F A4 47 04 01                                        	shld	[edi+4],eax,1
000045AB: 8B 47 0C                                              	mov	eax,[edi+12]
000045AE: 0F A4 07 01                                           	shld	[edi],eax,1
000045B2: 01 C0                                                 	add	eax,eax
000045B4: 89 47 0C                                              	mov	[edi+12],eax
000045B7: FF 4F 08                                              	dec	dword [edi+8]
000045BA: 01 D2                                                 	add	edx,edx
000045BC: EB E0                                                 	jmp	.loop
                                                                      .exp_ok:
000045BE: 89 D0                                                 	mov	eax,edx
000045C0: 31 D2                                                 	xor	edx,edx
000045C2: F7 F1                                                 	div	ecx
000045C4: 01 47 0C                                              	add	[edi+12],eax
000045C7: 83 17 00                                              	adc	dword [edi],0
000045CA: 83 57 04 00                                           	adc	dword [edi+4],0
000045CE: 73 1B                                                 	jnc	.done
000045D0: 8B 47 04                                              	mov	eax,[edi+4]
000045D3: 8B 1F                                                 	mov	ebx,[edi]
000045D5: 0F AC 07 01                                           	shrd	[edi],eax,1
000045D9: 0F AC 5F 0C 01                                        	shrd	[edi+12],ebx,1
000045DE: D1 E8                                                 	shr	eax,1
000045E0: 0D 00 00 00 80                                        	or	eax,80000000h
000045E5: 89 47 04                                              	mov	[edi+4],eax
000045E8: FF 47 08                                              	inc	dword [edi+8]
                                                                      .done:
000045EB: C3                                                    	ret
                                                                      fp_add:
000045EC: 81 7B 08 00 80 00 00                                  	cmp	dword [ebx+8],8000h
000045F3: 74 4F                                                 	je	.done
000045F5: 81 7F 08 00 80 00 00                                  	cmp	dword [edi+8],8000h
000045FC: 74 47                                                 	je	.copy
000045FE: 8B 43 08                                              	mov	eax,[ebx+8]
00004601: 3B 47 08                                              	cmp	eax,[edi+8]
00004604: 7D 03                                                 	jge	.exp_ok
00004606: 8B 47 08                                              	mov	eax,[edi+8]
                                                                      .exp_ok:
00004609: E8 4E 00 00 00                                        	call	.change_exp
0000460E: 87 DF                                                 	xchg	ebx,edi
00004610: E8 47 00 00 00                                        	call	.change_exp
00004615: 87 DF                                                 	xchg	ebx,edi
00004617: 8B 53 0C                                              	mov	edx,[ebx+12]
0000461A: 8B 03                                                 	mov	eax,[ebx]
0000461C: 8B 5B 04                                              	mov	ebx,[ebx+4]
0000461F: 01 57 0C                                              	add	[edi+12],edx
00004622: 11 07                                                 	adc	[edi],eax
00004624: 11 5F 04                                              	adc	[edi+4],ebx
00004627: 73 1B                                                 	jnc	.done
00004629: 8B 07                                                 	mov	eax,[edi]
0000462B: 0F AC 47 0C 01                                        	shrd	[edi+12],eax,1
00004630: 8B 47 04                                              	mov	eax,[edi+4]
00004633: 0F AC 07 01                                           	shrd	[edi],eax,1
00004637: D1 E8                                                 	shr	eax,1
00004639: 0D 00 00 00 80                                        	or	eax,80000000h
0000463E: 89 47 04                                              	mov	[edi+4],eax
00004641: FF 47 08                                              	inc	dword [edi+8]
                                                                      .done:
00004644: C3                                                    	ret
                                                                      .copy:
00004645: 8B 03                                                 	mov	eax,[ebx]
00004647: 89 07                                                 	mov	[edi],eax
00004649: 8B 43 04                                              	mov	eax,[ebx+4]
0000464C: 89 47 04                                              	mov	[edi+4],eax
0000464F: 8B 43 08                                              	mov	eax,[ebx+8]
00004652: 89 47 08                                              	mov	[edi+8],eax
00004655: 8B 43 0C                                              	mov	eax,[ebx+12]
00004658: 89 47 0C                                              	mov	[edi+12],eax
0000465B: C3                                                    	ret
                                                                      .change_exp:
0000465C: 51                                                    	push	ecx
0000465D: 89 C1                                                 	mov	ecx,eax
0000465F: 2B 4B 08                                              	sub	ecx,[ebx+8]
00004662: 8B 53 04                                              	mov	edx,[ebx+4]
00004665: E3 12                                                 	jecxz	.exp_done
                                                                      .exp_loop:
00004667: 8B 2B                                                 	mov	ebp,[ebx]
00004669: 0F AC 6B 0C 01                                        	shrd	[ebx+12],ebp,1
0000466E: 0F AC 13 01                                           	shrd	[ebx],edx,1
00004672: D1 EA                                                 	shr	edx,1
00004674: FF 43 08                                              	inc	dword [ebx+8]
00004677: E2 EE                                                 	loop	.exp_loop
                                                                      .exp_done:
00004679: 89 53 04                                              	mov	[ebx+4],edx
0000467C: 59                                                    	pop	ecx
0000467D: C3                                                    	ret
                                                                      fp_optimize:
0000467E: 8B 07                                                 	mov	eax,[edi]
00004680: 8B 6F 04                                              	mov	ebp,[edi+4]
00004683: 0B 2F                                                 	or	ebp,[edi]
00004685: 0B 6F 0C                                              	or	ebp,[edi+12]
00004688: 74 1D                                                 	jz	fp_zero
                                                                      .loop:
0000468A: F6 47 07 80                                           	test	byte [edi+7],80h
0000468E: 75 16                                                 	jnz	.done
00004690: 0F A4 47 04 01                                        	shld	[edi+4],eax,1
00004695: 8B 6F 0C                                              	mov	ebp,[edi+12]
00004698: 0F A4 E8 01                                           	shld	eax,ebp,1
0000469C: 89 07                                                 	mov	[edi],eax
0000469E: D1 67 0C                                              	shl	dword [edi+12],1
000046A1: FF 4F 08                                              	dec	dword [edi+8]
000046A4: EB E4                                                 	jmp	.loop
                                                                      .done:
000046A6: C3                                                    	ret
                                                                      fp_zero:
000046A7: C7 47 08 00 80 00 00                                  	mov	dword [edi+8],8000h
000046AE: C3                                                    	ret
                                                                
                                                                preevaluate_logical_expression:
000046AF: 30 C0                                                 	xor	al,al
                                                                  preevaluate_embedded_logical_expression:
000046B1: A2 BB A2 01 00                                        	mov	[logical_value_wrapping],al
000046B6: 57                                                    	push	edi
000046B7: E8 15 01 00 00                                        	call	preevaluate_logical_value
                                                                      preevaluation_loop:
000046BC: 3C FF                                                 	cmp	al,0FFh
000046BE: 0F 84 86 00 00 00                                     	je	invalid_logical_expression
000046C4: 8A 16                                                 	mov	dl,[esi]
000046C6: 46                                                    	inc	esi
000046C7: 80 FA 7C                                              	cmp	dl,'|'
000046CA: 74 11                                                 	je	preevaluate_or
000046CC: 80 FA 26                                              	cmp	dl,'&'
000046CF: 74 2B                                                 	je	preevaluate_and
000046D1: 80 FA 92                                              	cmp	dl,92h
000046D4: 74 04                                                 	je	preevaluation_done
000046D6: 08 D2                                                 	or	dl,dl
000046D8: 75 70                                                 	jnz	invalid_logical_expression
                                                                      preevaluation_done:
000046DA: 5A                                                    	pop	edx
000046DB: 4E                                                    	dec	esi
000046DC: C3                                                    	ret
                                                                      preevaluate_or:
000046DD: 3C 31                                                 	cmp	al,'1'
000046DF: 74 4A                                                 	je	quick_true
000046E1: 3C 30                                                 	cmp	al,'0'
000046E3: 74 36                                                 	je	leave_only_following
000046E5: 57                                                    	push	edi
000046E6: 88 D0                                                 	mov	al,dl
000046E8: AA                                                    	stos	byte [edi]
000046E9: E8 E3 00 00 00                                        	call	preevaluate_logical_value
000046EE: 5B                                                    	pop	ebx
000046EF: 3C 30                                                 	cmp	al,'0'
000046F1: 74 32                                                 	je	leave_only_preceding
000046F3: 3C 31                                                 	cmp	al,'1'
000046F5: 75 C5                                                 	jne	preevaluation_loop
000046F7: AA                                                    	stos	byte [edi]
000046F8: 30 C0                                                 	xor	al,al
000046FA: EB C0                                                 	jmp	preevaluation_loop
                                                                      preevaluate_and:
000046FC: 3C 30                                                 	cmp	al,'0'
000046FE: 74 39                                                 	je	quick_false
00004700: 3C 31                                                 	cmp	al,'1'
00004702: 74 17                                                 	je	leave_only_following
00004704: 57                                                    	push	edi
00004705: 88 D0                                                 	mov	al,dl
00004707: AA                                                    	stos	byte [edi]
00004708: E8 C4 00 00 00                                        	call	preevaluate_logical_value
0000470D: 5B                                                    	pop	ebx
0000470E: 3C 31                                                 	cmp	al,'1'
00004710: 74 13                                                 	je	leave_only_preceding
00004712: 3C 30                                                 	cmp	al,'0'
00004714: 75 A6                                                 	jne	preevaluation_loop
00004716: AA                                                    	stos	byte [edi]
00004717: 30 C0                                                 	xor	al,al
00004719: EB A1                                                 	jmp	preevaluation_loop
                                                                      leave_only_following:
0000471B: 8B 3C 24                                              	mov	edi,[esp]
0000471E: E8 AE 00 00 00                                        	call	preevaluate_logical_value
00004723: EB 97                                                 	jmp	preevaluation_loop
                                                                      leave_only_preceding:
00004725: 89 DF                                                 	mov	edi,ebx
00004727: 30 C0                                                 	xor	al,al
00004729: EB 91                                                 	jmp	preevaluation_loop
                                                                      quick_true:
0000472B: E8 21 00 00 00                                        	call	skip_logical_value
00004730: 72 18                                                 	jc	invalid_logical_expression
00004732: 8B 3C 24                                              	mov	edi,[esp]
00004735: B0 31                                                 	mov	al,'1'
00004737: EB 83                                                 	jmp	preevaluation_loop
                                                                      quick_false:
00004739: E8 13 00 00 00                                        	call	skip_logical_value
0000473E: 72 0A                                                 	jc	invalid_logical_expression
00004740: 8B 3C 24                                              	mov	edi,[esp]
00004743: B0 30                                                 	mov	al,'0'
00004745: E9 72 FF FF FF                                        	jmp	preevaluation_loop
                                                                      invalid_logical_expression:
0000474A: 5F                                                    	pop	edi
0000474B: 89 FE                                                 	mov	esi,edi
0000474D: B0 FF                                                 	mov	al,0FFh
0000474F: AA                                                    	stos	byte [edi]
00004750: C3                                                    	ret
                                                                  skip_logical_value:
00004751: 80 3E 7E                                              	cmp	byte [esi],'~'
00004754: 75 03                                                 	jne	negation_skipped
00004756: 46                                                    	inc	esi
00004757: EB F8                                                 	jmp	skip_logical_value
                                                                      negation_skipped:
00004759: 8A 06                                                 	mov	al,[esi]
0000475B: 3C 91                                                 	cmp	al,91h
0000475D: 75 2D                                                 	jne	skip_simple_logical_value
0000475F: 46                                                    	inc	esi
00004760: 86 05 BB A2 01 00                                     	xchg	al,[logical_value_wrapping]
00004766: 50                                                    	push	eax
                                                                      skip_logical_expression:
00004767: E8 E5 FF FF FF                                        	call	skip_logical_value
0000476C: AC                                                    	lods	byte [esi]
0000476D: 08 C0                                                 	or	al,al
0000476F: 74 18                                                 	jz	wrongly_structured_logical_expression
00004771: 3C 0F                                                 	cmp	al,0Fh
00004773: 74 14                                                 	je	wrongly_structured_logical_expression
00004775: 3C 7C                                                 	cmp	al,'|'
00004777: 74 EE                                                 	je	skip_logical_expression
00004779: 3C 26                                                 	cmp	al,'&'
0000477B: 74 EA                                                 	je	skip_logical_expression
0000477D: 3C 92                                                 	cmp	al,92h
0000477F: 75 08                                                 	jne	wrongly_structured_logical_expression
00004781: 58                                                    	pop	eax
00004782: A2 BB A2 01 00                                        	mov	[logical_value_wrapping],al
                                                                      logical_value_skipped:
00004787: F8                                                    	clc
00004788: C3                                                    	ret
                                                                      wrongly_structured_logical_expression:
00004789: 58                                                    	pop	eax
0000478A: F9                                                    	stc
0000478B: C3                                                    	ret
                                                                      skip_simple_logical_value:
0000478C: C7 05 90 A2 01 00 00 00 00 00                         	mov	[logical_value_parentheses],0
                                                                      find_simple_logical_value_end:
00004796: 8A 06                                                 	mov	al,[esi]
00004798: 08 C0                                                 	or	al,al
0000479A: 74 EB                                                 	jz	logical_value_skipped
0000479C: 3C 0F                                                 	cmp	al,0Fh
0000479E: 74 E7                                                 	je	logical_value_skipped
000047A0: 3C 7C                                                 	cmp	al,'|'
000047A2: 74 E3                                                 	je	logical_value_skipped
000047A4: 3C 26                                                 	cmp	al,'&'
000047A6: 74 DF                                                 	je	logical_value_skipped
000047A8: 3C 91                                                 	cmp	al,91h
000047AA: 74 18                                                 	je	skip_logical_value_internal_parenthesis
000047AC: 3C 92                                                 	cmp	al,92h
000047AE: 75 1A                                                 	jne	skip_logical_value_symbol
000047B0: 83 2D 90 A2 01 00 01                                  	sub	[logical_value_parentheses],1
000047B7: 73 11                                                 	jnc	skip_logical_value_symbol
000047B9: 80 3D BB A2 01 00 91                                  	cmp	[logical_value_wrapping],91h
000047C0: 75 08                                                 	jne	skip_logical_value_symbol
000047C2: EB C3                                                 	jmp	logical_value_skipped
                                                                      skip_logical_value_internal_parenthesis:
000047C4: FF 05 90 A2 01 00                                     	inc	[logical_value_parentheses]
                                                                      skip_logical_value_symbol:
000047CA: E8 B8 35 00 00                                        	call	skip_symbol
000047CF: EB C5                                                 	jmp	find_simple_logical_value_end
                                                                  preevaluate_logical_value:
000047D1: 89 FD                                                 	mov	ebp,edi
                                                                      preevaluate_negation:
000047D3: 80 3E 7E                                              	cmp	byte [esi],'~'
000047D6: 75 03                                                 	jne	preevaluate_negation_ok
000047D8: A4                                                    	movs	byte [edi],[esi]
000047D9: EB F8                                                 	jmp	preevaluate_negation
                                                                      preevaluate_negation_ok:
000047DB: 89 F3                                                 	mov	ebx,esi
000047DD: 80 3E 91                                              	cmp	byte [esi],91h
000047E0: 75 3E                                                 	jne	preevaluate_simple_logical_value
000047E2: AC                                                    	lods	byte [esi]
000047E3: AA                                                    	stos	byte [edi]
000047E4: 55                                                    	push	ebp
000047E5: 8A 15 BB A2 01 00                                     	mov	dl,[logical_value_wrapping]
000047EB: 52                                                    	push	edx
000047EC: E8 C0 FE FF FF                                        	call	preevaluate_embedded_logical_expression
000047F1: 5A                                                    	pop	edx
000047F2: 88 15 BB A2 01 00                                     	mov	[logical_value_wrapping],dl
000047F8: 5D                                                    	pop	ebp
000047F9: 3C FF                                                 	cmp	al,0FFh
000047FB: 74 1E                                                 	je	invalid_logical_value
000047FD: 80 3E 92                                              	cmp	byte [esi],92h
00004800: 75 19                                                 	jne	invalid_logical_value
00004802: 08 C0                                                 	or	al,al
00004804: 75 02                                                 	jnz	preevaluated_expression_value
00004806: A4                                                    	movs	byte [edi],[esi]
00004807: C3                                                    	ret
                                                                      preevaluated_expression_value:
00004808: 46                                                    	inc	esi
00004809: 8D 57 FF                                              	lea	edx,[edi-1]
0000480C: 29 EA                                                 	sub	edx,ebp
0000480E: F7 C2 01 00 00 00                                     	test	edx,1
00004814: 74 02                                                 	jz	expression_negation_ok
00004816: 34 01                                                 	xor	al,1
                                                                      expression_negation_ok:
00004818: 89 EF                                                 	mov	edi,ebp
0000481A: C3                                                    	ret
                                                                      invalid_logical_value:
0000481B: 89 EF                                                 	mov	edi,ebp
0000481D: B0 FF                                                 	mov	al,0FFh
0000481F: C3                                                    	ret
                                                                      preevaluate_simple_logical_value:
00004820: 31 D2                                                 	xor	edx,edx
00004822: 89 15 90 A2 01 00                                     	mov	[logical_value_parentheses],edx
                                                                      find_logical_value_boundaries:
00004828: 8A 06                                                 	mov	al,[esi]
0000482A: 08 C0                                                 	or	al,al
0000482C: 74 43                                                 	jz	logical_value_boundaries_found
0000482E: 3C 91                                                 	cmp	al,91h
00004830: 74 25                                                 	je	logical_value_internal_parentheses
00004832: 3C 92                                                 	cmp	al,92h
00004834: 74 29                                                 	je	logical_value_boundaries_parenthesis_close
00004836: 3C 7C                                                 	cmp	al,'|'
00004838: 74 37                                                 	je	logical_value_boundaries_found
0000483A: 3C 26                                                 	cmp	al,'&'
0000483C: 74 33                                                 	je	logical_value_boundaries_found
0000483E: 09 D2                                                 	or	edx,edx
00004840: 75 0E                                                 	jnz	next_symbol_in_logical_value
00004842: 3C F0                                                 	cmp	al,0F0h
00004844: 74 08                                                 	je	preevaluable_logical_operator
00004846: 3C F7                                                 	cmp	al,0F7h
00004848: 74 04                                                 	je	preevaluable_logical_operator
0000484A: 3C F6                                                 	cmp	al,0F6h
0000484C: 75 02                                                 	jne	next_symbol_in_logical_value
                                                                      preevaluable_logical_operator:
0000484E: 89 F2                                                 	mov	edx,esi
                                                                      next_symbol_in_logical_value:
00004850: E8 32 35 00 00                                        	call	skip_symbol
00004855: EB D1                                                 	jmp	find_logical_value_boundaries
                                                                      logical_value_internal_parentheses:
00004857: FF 05 90 A2 01 00                                     	inc	[logical_value_parentheses]
0000485D: EB F1                                                 	jmp	next_symbol_in_logical_value
                                                                      logical_value_boundaries_parenthesis_close:
0000485F: 83 2D 90 A2 01 00 01                                  	sub	[logical_value_parentheses],1
00004866: 73 E8                                                 	jnc	next_symbol_in_logical_value
00004868: 80 3D BB A2 01 00 91                                  	cmp	[logical_value_wrapping],91h
0000486F: 75 DF                                                 	jne	next_symbol_in_logical_value
                                                                      logical_value_boundaries_found:
00004871: 09 D2                                                 	or	edx,edx
00004873: 74 12                                                 	jz	non_preevaluable_logical_value
00004875: 8A 02                                                 	mov	al,[edx]
00004877: 3C F0                                                 	cmp	al,0F0h
00004879: 74 24                                                 	je	compare_symbols
0000487B: 3C F7                                                 	cmp	al,0F7h
0000487D: 74 5A                                                 	je	compare_symbol_types
0000487F: 3C F6                                                 	cmp	al,0F6h
00004881: 0F 84 9B 00 00 00                                     	je	scan_symbols_list
                                                                      non_preevaluable_logical_value:
00004887: 89 F1                                                 	mov	ecx,esi
00004889: 89 DE                                                 	mov	esi,ebx
0000488B: 29 F1                                                 	sub	ecx,esi
0000488D: 74 8C                                                 	jz	invalid_logical_value
0000488F: 39 FE                                                 	cmp	esi,edi
00004891: 74 05                                                 	je	leave_logical_value_intact
00004893: F3 A4                                                 	rep	movs byte [edi],[esi]
00004895: 30 C0                                                 	xor	al,al
00004897: C3                                                    	ret
                                                                      leave_logical_value_intact:
00004898: 01 CF                                                 	add	edi,ecx
0000489A: 01 CE                                                 	add	esi,ecx
0000489C: 30 C0                                                 	xor	al,al
0000489E: C3                                                    	ret
                                                                      compare_symbols:
0000489F: 8D 4E FF                                              	lea	ecx,[esi-1]
000048A2: 29 D1                                                 	sub	ecx,edx
000048A4: 89 D0                                                 	mov	eax,edx
000048A6: 29 D8                                                 	sub	eax,ebx
000048A8: 39 C1                                                 	cmp	ecx,eax
000048AA: 75 0D                                                 	jne	preevaluated_false
000048AC: 56 57                                                 	push	esi edi
000048AE: 89 DE                                                 	mov	esi,ebx
000048B0: 8D 7A 01                                              	lea	edi,[edx+1]
000048B3: F3 A6                                                 	repe	cmps byte [esi],[edi]
000048B5: 5F 5E                                                 	pop	edi esi
000048B7: 74 10                                                 	je	preevaluated_true
                                                                      preevaluated_false:
000048B9: 89 F8                                                 	mov	eax,edi
000048BB: 29 E8                                                 	sub	eax,ebp
000048BD: A9 01 00 00 00                                        	test	eax,1
000048C2: 75 10                                                 	jnz	store_true
                                                                      store_false:
000048C4: 89 EF                                                 	mov	edi,ebp
000048C6: B0 30                                                 	mov	al,'0'
000048C8: C3                                                    	ret
                                                                      preevaluated_true:
000048C9: 89 F8                                                 	mov	eax,edi
000048CB: 29 E8                                                 	sub	eax,ebp
000048CD: A9 01 00 00 00                                        	test	eax,1
000048D2: 75 F0                                                 	jnz	store_false
                                                                      store_true:
000048D4: 89 EF                                                 	mov	edi,ebp
000048D6: B0 31                                                 	mov	al,'1'
000048D8: C3                                                    	ret
                                                                      compare_symbol_types:
000048D9: 56                                                    	push	esi
000048DA: 8D 72 01                                              	lea	esi,[edx+1]
                                                                      type_comparison:
000048DD: 3B 34 24                                              	cmp	esi,[esp]
000048E0: 74 35                                                 	je	types_compared
000048E2: 8A 06                                                 	mov	al,[esi]
000048E4: 3A 03                                                 	cmp	al,[ebx]
000048E6: 75 37                                                 	jne	different_type
000048E8: 3C 28                                                 	cmp	al,'('
000048EA: 75 1B                                                 	jne	equal_type
000048EC: 8A 46 01                                              	mov	al,[esi+1]
000048EF: 8A 63 01                                              	mov	ah,[ebx+1]
000048F2: 38 E0                                                 	cmp	al,ah
000048F4: 74 11                                                 	je	equal_type
000048F6: 08 C0                                                 	or	al,al
000048F8: 74 25                                                 	jz	different_type
000048FA: 08 E4                                                 	or	ah,ah
000048FC: 74 21                                                 	jz	different_type
000048FE: 3C 2E                                                 	cmp	al,'.'
00004900: 74 1D                                                 	je	different_type
00004902: 80 FC 2E                                              	cmp	ah,'.'
00004905: 74 18                                                 	je	different_type
                                                                      equal_type:
00004907: E8 7B 34 00 00                                        	call	skip_symbol
0000490C: 87 F3                                                 	xchg	esi,ebx
0000490E: E8 74 34 00 00                                        	call	skip_symbol
00004913: 87 F3                                                 	xchg	esi,ebx
00004915: EB C6                                                 	jmp	type_comparison
                                                                      types_compared:
00004917: 5E                                                    	pop	esi
00004918: 80 3B F7                                              	cmp	byte [ebx],0F7h
0000491B: 75 9C                                                 	jne	preevaluated_false
0000491D: EB AA                                                 	jmp	preevaluated_true
                                                                      different_type:
0000491F: 5E                                                    	pop	esi
00004920: EB 97                                                 	jmp	preevaluated_false
                                                                      scan_symbols_list:
00004922: 57 56                                                 	push	edi esi
00004924: 8D 72 01                                              	lea	esi,[edx+1]
00004927: 29 DA                                                 	sub	edx,ebx
00004929: AC                                                    	lods	byte [esi]
0000492A: 3C 3C                                                 	cmp	al,'<'
0000492C: 75 59                                                 	jne	invalid_symbols_list
                                                                      get_next_from_list:
0000492E: 89 F7                                                 	mov	edi,esi
                                                                      get_from_list:
00004930: 80 3E 2C                                              	cmp	byte [esi],','
00004933: 74 11                                                 	je	compare_in_list
00004935: 80 3E 3E                                              	cmp	byte [esi],'>'
00004938: 74 0C                                                 	je	compare_in_list
0000493A: 3B 34 24                                              	cmp	esi,[esp]
0000493D: 73 48                                                 	jae	invalid_symbols_list
0000493F: E8 43 34 00 00                                        	call	skip_symbol
00004944: EB EA                                                 	jmp	get_from_list
                                                                      compare_in_list:
00004946: 89 F1                                                 	mov	ecx,esi
00004948: 29 F9                                                 	sub	ecx,edi
0000494A: 39 D1                                                 	cmp	ecx,edx
0000494C: 75 28                                                 	jne	not_equal_length_in_list
0000494E: 89 DE                                                 	mov	esi,ebx
00004950: F3 A6                                                 	repe	cmps byte [esi],[edi]
00004952: 89 FE                                                 	mov	esi,edi
00004954: 75 1E                                                 	jne	not_equal_in_list
                                                                      skip_rest_of_list:
00004956: 80 3E 3E                                              	cmp	byte [esi],'>'
00004959: 74 0C                                                 	je	check_list_end
0000495B: 3B 34 24                                              	cmp	esi,[esp]
0000495E: 73 27                                                 	jae	invalid_symbols_list
00004960: E8 22 34 00 00                                        	call	skip_symbol
00004965: EB EF                                                 	jmp	skip_rest_of_list
                                                                      check_list_end:
00004967: 46                                                    	inc	esi
00004968: 3B 34 24                                              	cmp	esi,[esp]
0000496B: 75 1A                                                 	jne	invalid_symbols_list
0000496D: 5E 5F                                                 	pop	esi edi
0000496F: E9 55 FF FF FF                                        	jmp	preevaluated_true
                                                                      not_equal_in_list:
00004974: 01 CE                                                 	add	esi,ecx
                                                                      not_equal_length_in_list:
00004976: AC                                                    	lods	byte [esi]
00004977: 3C 2C                                                 	cmp	al,','
00004979: 74 B3                                                 	je	get_next_from_list
0000497B: 3B 34 24                                              	cmp	esi,[esp]
0000497E: 75 07                                                 	jne	invalid_symbols_list
00004980: 5E 5F                                                 	pop	esi edi
00004982: E9 32 FF FF FF                                        	jmp	preevaluated_false
                                                                      invalid_symbols_list:
00004987: 5E 5F                                                 	pop	esi edi
00004989: E9 8D FE FF FF                                        	jmp	invalid_logical_value
                                                                
                                                                include '..\assemble.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                assembler:
0000498E: 31 C0                                                 	xor	eax,eax
00004990: A3 48 A2 01 00                                        	mov	[stub_size],eax
00004995: 66 A3 52 A1 01 00                                     	mov	[current_pass],ax
0000499B: A3 38 A2 01 00                                        	mov	[resolver_flags],eax
000049A0: A3 44 A2 01 00                                        	mov	[number_of_sections],eax
000049A5: A3 70 A2 01 00                                        	mov	[actual_fixups_size],eax
                                                                      assembler_loop:
000049AA: A1 B4 A1 01 00                                        	mov	eax,[labels_list]
000049AF: A3 E4 A1 01 00                                        	mov	[tagged_blocks],eax
000049B4: A1 34 A1 01 00                                        	mov	eax,[additional_memory]
000049B9: A3 58 A1 01 00                                        	mov	[free_additional_memory],eax
000049BE: A1 38 A1 01 00                                        	mov	eax,[additional_memory_end]
000049C3: A3 E8 A1 01 00                                        	mov	[structures_buffer],eax
000049C8: 8B 35 5C A1 01 00                                     	mov	esi,[source_start]
000049CE: 8B 3D 60 A1 01 00                                     	mov	edi,[code_start]
000049D4: 31 C0                                                 	xor	eax,eax
000049D6: A3 1C A2 01 00                                        	mov	dword [adjustment],eax
000049DB: A3 20 A2 01 00                                        	mov	dword [adjustment+4],eax
000049E0: A3 C4 A1 01 00                                        	mov	[addressing_space],eax
000049E5: A3 DC A1 01 00                                        	mov	[error_line],eax
000049EA: A3 D0 A1 01 00                                        	mov	[counter],eax
000049EF: A3 34 A2 01 00                                        	mov	[format_flags],eax
000049F4: A3 40 A2 01 00                                        	mov	[number_of_relocations],eax
000049F9: A3 CC A1 01 00                                        	mov	[undefined_data_end],eax
000049FE: A3 94 A2 01 00                                        	mov	[file_extension],eax
00004A03: A2 BC A2 01 00                                        	mov	[next_pass_needed],al
00004A08: A2 BD A2 01 00                                        	mov	[output_format],al
00004A0D: A2 BF A2 01 00                                        	mov	[adjustment_sign],al
00004A12: A2 C0 A2 01 00                                        	mov	[evex_mode],al
00004A17: C6 05 BE A2 01 00 10                                  	mov	[code_type],16
00004A1E: E8 67 01 00 00                                        	call	init_addressing_space
                                                                      pass_loop:
00004A23: E8 A7 01 00 00                                        	call	assemble_line
00004A28: 73 F9                                                 	jnc	pass_loop
00004A2A: A1 38 A1 01 00                                        	mov	eax,[additional_memory_end]
00004A2F: 3B 05 E8 A1 01 00                                     	cmp	eax,[structures_buffer]
00004A35: 74 10                                                 	je	pass_done
00004A37: 83 E8 18                                              	sub	eax,18h
00004A3A: 8B 40 04                                              	mov	eax,[eax+4]
00004A3D: A3 74 A1 01 00                                        	mov	[current_line],eax
00004A42: E9 33 C0 FF FF                                        	jmp	missing_end_directive
                                                                      pass_done:
00004A47: E8 DD 39 00 00                                        	call	close_pass
00004A4C: A1 B4 A1 01 00                                        	mov	eax,[labels_list]
                                                                      check_symbols:
00004A51: 3B 05 30 A1 01 00                                     	cmp	eax,[memory_end]
00004A57: 0F 83 AC 00 00 00                                     	jae	symbols_checked
00004A5D: F6 40 08 08                                           	test	byte [eax+8],8
00004A61: 74 28                                                 	jz	symbol_defined_ok
00004A63: 66 8B 0D 52 A1 01 00                                  	mov	cx,[current_pass]
00004A6A: 66 3B 48 12                                           	cmp	cx,[eax+18]
00004A6E: 75 1B                                                 	jne	symbol_defined_ok
00004A70: F6 40 08 01                                           	test	byte [eax+8],1
00004A74: 74 15                                                 	jz	symbol_defined_ok
00004A76: 66 2B 48 10                                           	sub	cx,[eax+16]
00004A7A: 66 83 F9 01                                           	cmp	cx,1
00004A7E: 75 0B                                                 	jne	symbol_defined_ok
00004A80: 80 60 08 FE                                           	and	byte [eax+8],not 1
00004A84: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      symbol_defined_ok:
00004A8B: F6 40 08 10                                           	test	byte [eax+8],10h
00004A8F: 74 32                                                 	jz	use_prediction_ok
00004A91: 66 8B 0D 52 A1 01 00                                  	mov	cx,[current_pass]
00004A98: 80 60 08 EF                                           	and	byte [eax+8],not 10h
00004A9C: F6 40 08 20                                           	test	byte [eax+8],20h
00004AA0: 75 0E                                                 	jnz	check_use_prediction
00004AA2: 66 3B 48 12                                           	cmp	cx,[eax+18]
00004AA6: 75 1B                                                 	jne	use_prediction_ok
00004AA8: F6 40 08 08                                           	test	byte [eax+8],8
00004AAC: 74 15                                                 	jz	use_prediction_ok
00004AAE: EB 0C                                                 	jmp	use_misprediction
                                                                      check_use_prediction:
00004AB0: F6 40 08 08                                           	test	byte [eax+8],8
00004AB4: 74 06                                                 	jz	use_misprediction
00004AB6: 66 3B 48 12                                           	cmp	cx,[eax+18]
00004ABA: 74 07                                                 	je	use_prediction_ok
                                                                      use_misprediction:
00004ABC: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      use_prediction_ok:
00004AC3: F6 40 08 40                                           	test	byte [eax+8],40h
00004AC7: 74 38                                                 	jz	check_next_symbol
00004AC9: 80 60 08 BF                                           	and	byte [eax+8],not 40h
00004ACD: F6 40 08 04                                           	test	byte [eax+8],4
00004AD1: 75 27                                                 	jnz	define_misprediction
00004AD3: 66 8B 0D 52 A1 01 00                                  	mov	cx,[current_pass]
00004ADA: F6 40 08 80                                           	test	byte [eax+8],80h
00004ADE: 75 0E                                                 	jnz	check_define_prediction
00004AE0: 66 3B 48 10                                           	cmp	cx,[eax+16]
00004AE4: 75 1B                                                 	jne	check_next_symbol
00004AE6: F6 40 08 01                                           	test	byte [eax+8],1
00004AEA: 74 15                                                 	jz	check_next_symbol
00004AEC: EB 0C                                                 	jmp	define_misprediction
                                                                      check_define_prediction:
00004AEE: F6 40 08 01                                           	test	byte [eax+8],1
00004AF2: 74 06                                                 	jz	define_misprediction
00004AF4: 66 3B 48 10                                           	cmp	cx,[eax+16]
00004AF8: 74 07                                                 	je	check_next_symbol
                                                                      define_misprediction:
00004AFA: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      check_next_symbol:
00004B01: 83 C0 20                                              	add	eax,LABEL_STRUCTURE_SIZE
00004B04: E9 48 FF FF FF                                        	jmp	check_symbols
                                                                      symbols_checked:
00004B09: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
00004B10: 75 3C                                                 	jne	next_pass
00004B12: A1 DC A1 01 00                                        	mov	eax,[error_line]
00004B17: 09 C0                                                 	or	eax,eax
00004B19: 74 52                                                 	jz	assemble_ok
00004B1B: A3 74 A1 01 00                                        	mov	[current_line],eax
00004B20: 81 3D E0 A1 01 00 B6 09 00 00                         	cmp	[error],undefined_symbol
00004B2A: 75 0F                                                 	jne	error_confirmed
00004B2C: A1 D8 A1 01 00                                        	mov	eax,[error_info]
00004B31: 09 C0                                                 	or	eax,eax
00004B33: 74 06                                                 	jz	error_confirmed
00004B35: F6 40 08 01                                           	test	byte [eax+8],1
00004B39: 75 13                                                 	jnz	next_pass
                                                                      error_confirmed:
00004B3B: E8 00 00 00 00                                        	call	error_handler
                                                                      error_handler:
00004B40: A1 E0 A1 01 00                                        	mov	eax,[error]
00004B45: 2D 40 4B 00 00                                        	sub	eax,error_handler
00004B4A: 01 04 24                                              	add	[esp],eax
00004B4D: C3                                                    	ret
                                                                      next_pass:
00004B4E: 66 FF 05 52 A1 01 00                                  	inc	[current_pass]
00004B55: 66 A1 52 A1 01 00                                     	mov	ax,[current_pass]
00004B5B: 66 3B 05 50 A1 01 00                                  	cmp	ax,[passes_limit]
00004B62: 0F 84 52 BD FF FF                                     	je	code_cannot_be_generated
00004B68: E9 3D FE FF FF                                        	jmp	assembler_loop
                                                                      assemble_ok:
00004B6D: C3                                                    	ret
                                                                
                                                                create_addressing_space:
00004B6E: 8B 1D C4 A1 01 00                                     	mov	ebx,[addressing_space]
00004B74: 85 DB                                                 	test	ebx,ebx
00004B76: 74 12                                                 	jz	init_addressing_space
00004B78: F6 43 0A 01                                           	test	byte [ebx+0Ah],1
00004B7C: 0F 85 A8 BD FF FF                                     	jnz	illegal_instruction
00004B82: 89 F8                                                 	mov	eax,edi
00004B84: 2B 43 18                                              	sub	eax,[ebx+18h]
00004B87: 89 43 1C                                              	mov	[ebx+1Ch],eax
                                                                      init_addressing_space:
00004B8A: 8B 1D E4 A1 01 00                                     	mov	ebx,[tagged_blocks]
00004B90: C7 43 FC 10 00 00 00                                  	mov	dword [ebx-4],10h
00004B97: C7 43 F8 24 00 00 00                                  	mov	dword [ebx-8],24h
00004B9E: 83 EB 2C                                              	sub	ebx,8+24h
00004BA1: 39 FB                                                 	cmp	ebx,edi
00004BA3: 0F 86 E9 BC FF FF                                     	jbe	out_of_memory
00004BA9: 89 1D E4 A1 01 00                                     	mov	[tagged_blocks],ebx
00004BAF: 89 1D C4 A1 01 00                                     	mov	[addressing_space],ebx
00004BB5: 31 C0                                                 	xor	eax,eax
00004BB7: 89 3B                                                 	mov	[ebx],edi
00004BB9: 89 43 04                                              	mov	[ebx+4],eax
00004BBC: 89 43 08                                              	mov	[ebx+8],eax
00004BBF: 89 43 10                                              	mov	[ebx+10h],eax
00004BC2: 89 43 14                                              	mov	[ebx+14h],eax
00004BC5: 89 7B 18                                              	mov	[ebx+18h],edi
00004BC8: 89 43 1C                                              	mov	[ebx+1Ch],eax
00004BCB: 89 43 20                                              	mov	[ebx+20h],eax
00004BCE: C3                                                    	ret
                                                                
                                                                assemble_line:
00004BCF: A1 E4 A1 01 00                                        	mov	eax,[tagged_blocks]
00004BD4: 2D 00 01 00 00                                        	sub	eax,100h
00004BD9: 39 C7                                                 	cmp	edi,eax
00004BDB: 0F 87 B1 BC FF FF                                     	ja	out_of_memory
00004BE1: AC                                                    	lods	byte [esi]
00004BE2: 3C 01                                                 	cmp	al,1
00004BE4: 0F 84 66 03 00 00                                     	je	assemble_instruction
00004BEA: 0F 82 9D 03 00 00                                     	jb	source_end
00004BF0: 3C 03                                                 	cmp	al,3
00004BF2: 0F 82 96 00 00 00                                     	jb	define_label
00004BF8: 0F 84 D8 01 00 00                                     	je	define_constant
00004BFE: 3C 04                                                 	cmp	al,4
00004C00: 0F 84 E6 02 00 00                                     	je	label_addressing_space
00004C06: 3C 0F                                                 	cmp	al,0Fh
00004C08: 74 1D                                                 	je	new_line
00004C0A: 3C 13                                                 	cmp	al,13h
00004C0C: 74 0E                                                 	je	code_type_setting
00004C0E: 3C 10                                                 	cmp	al,10h
00004C10: 0F 85 14 BD FF FF                                     	jne	illegal_instruction
00004C16: AC                                                    	lods	byte [esi]
00004C17: E9 FA 67 00 00                                        	jmp	segment_prefix
                                                                      code_type_setting:
00004C1C: AC                                                    	lods	byte [esi]
00004C1D: A2 BE A2 01 00                                        	mov	[code_type],al
00004C22: E9 49 03 00 00                                        	jmp	instruction_assembled
                                                                      new_line:
00004C27: AD                                                    	lods	dword [esi]
00004C28: A3 74 A1 01 00                                        	mov	[current_line],eax
00004C2D: 80 25 C3 A2 01 00 00                                  	and	[prefix_flags],0
00004C34: 83 3D 4C A1 01 00 00                                  	cmp	[symbols_file],0
00004C3B: 74 43                                                 	je	continue_line
00004C3D: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
00004C44: 75 3A                                                 	jne	continue_line
00004C46: 8B 1D E4 A1 01 00                                     	mov	ebx,[tagged_blocks]
00004C4C: C7 43 FC 01 00 00 00                                  	mov	dword [ebx-4],1
00004C53: C7 43 F8 14 00 00 00                                  	mov	dword [ebx-8],14h
00004C5A: 83 EB 1C                                              	sub	ebx,8+14h
00004C5D: 39 FB                                                 	cmp	ebx,edi
00004C5F: 0F 86 2D BC FF FF                                     	jbe	out_of_memory
00004C65: 89 1D E4 A1 01 00                                     	mov	[tagged_blocks],ebx
00004C6B: 89 03                                                 	mov	[ebx],eax
00004C6D: 89 7B 04                                              	mov	[ebx+4],edi
00004C70: A1 C4 A1 01 00                                        	mov	eax,[addressing_space]
00004C75: 89 43 08                                              	mov	[ebx+8],eax
00004C78: A0 BE A2 01 00                                        	mov	al,[code_type]
00004C7D: 88 43 10                                              	mov	[ebx+10h],al
                                                                      continue_line:
00004C80: 80 3E 0F                                              	cmp	byte [esi],0Fh
00004C83: 0F 84 02 03 00 00                                     	je	line_assembled
00004C89: E9 41 FF FF FF                                        	jmp	assemble_line
                                                                      define_label:
00004C8E: AD                                                    	lods	dword [esi]
00004C8F: 83 F8 0F                                              	cmp	eax,0Fh
00004C92: 0F 82 B8 BD FF FF                                     	jb	invalid_use_of_symbol
00004C98: 0F 84 C7 BD FF FF                                     	je	reserved_word_used_as_symbol
00004C9E: 89 C3                                                 	mov	ebx,eax
00004CA0: AC                                                    	lods	byte [esi]
00004CA1: A2 AE A2 01 00                                        	mov	[label_size],al
00004CA6: E8 02 00 00 00                                        	call	make_label
00004CAB: EB D3                                                 	jmp	continue_line
                                                                      make_label:
00004CAD: 89 F8                                                 	mov	eax,edi
00004CAF: 31 D2                                                 	xor	edx,edx
00004CB1: 30 C9                                                 	xor	cl,cl
00004CB3: 8B 2D C4 A1 01 00                                     	mov	ebp,[addressing_space]
00004CB9: 3E 2B 45 00                                           	sub	eax,[ds:ebp]
00004CBD: 3E 1B 55 04                                           	sbb	edx,[ds:ebp+4]
00004CC1: 3E 1A 4D 08                                           	sbb	cl,[ds:ebp+8]
00004CC5: 7A 05                                                 	jp	label_value_ok
00004CC7: E8 25 26 00 00                                        	call	recoverable_overflow
                                                                      label_value_ok:
00004CCC: 88 0D B8 A2 01 00                                     	mov	[address_sign],cl
00004CD2: 3E F6 45 0A 01                                        	test	byte [ds:ebp+0Ah],1
00004CD7: 75 34                                                 	jnz	make_virtual_label
00004CD9: 80 4B 09 01                                           	or	byte [ebx+9],1
00004CDD: 87 03                                                 	xchg	eax,[ebx]
00004CDF: 87 53 04                                              	xchg	edx,[ebx+4]
00004CE2: 8A 6B 09                                              	mov	ch,[ebx+9]
00004CE5: D0 ED                                                 	shr	ch,1
00004CE7: 80 E5 01                                              	and	ch,1
00004CEA: F6 DD                                                 	neg	ch
00004CEC: 2B 03                                                 	sub	eax,[ebx]
00004CEE: 1B 53 04                                              	sbb	edx,[ebx+4]
00004CF1: 18 CD                                                 	sbb	ch,cl
00004CF3: A3 1C A2 01 00                                        	mov	dword [adjustment],eax
00004CF8: 89 15 20 A2 01 00                                     	mov	dword [adjustment+4],edx
00004CFE: 88 2D BF A2 01 00                                     	mov	[adjustment_sign],ch
00004D04: 08 E8                                                 	or	al,ch
00004D06: 09 D0                                                 	or	eax,edx
00004D08: 0F 95 C4                                              	setnz	ah
00004D0B: EB 16                                                 	jmp	finish_label
                                                                      make_virtual_label:
00004D0D: 80 63 09 FE                                           	and	byte [ebx+9],not 1
00004D11: 3B 03                                                 	cmp	eax,[ebx]
00004D13: 89 03                                                 	mov	[ebx],eax
00004D15: 0F 95 C4                                              	setne	ah
00004D18: 3B 53 04                                              	cmp	edx,[ebx+4]
00004D1B: 89 53 04                                              	mov	[ebx+4],edx
00004D1E: 0F 95 C0                                              	setne	al
00004D21: 08 C4                                                 	or	ah,al
                                                                      finish_label:
00004D23: 8B 2D C4 A1 01 00                                     	mov	ebp,[addressing_space]
00004D29: 3E 8A 6D 09                                           	mov	ch,[ds:ebp+9]
00004D2D: 8A 0D AE A2 01 00                                     	mov	cl,[label_size]
00004D33: 3E 8B 55 14                                           	mov	edx,[ds:ebp+14h]
00004D37: 3E 8B 6D 10                                           	mov	ebp,[ds:ebp+10h]
                                                                      finish_label_symbol:
00004D3B: A0 B8 A2 01 00                                        	mov	al,[address_sign]
00004D40: 32 43 09                                              	xor	al,[ebx+9]
00004D43: 24 02                                                 	and	al,10b
00004D45: 08 C4                                                 	or	ah,al
00004D47: 30 43 09                                              	xor	[ebx+9],al
00004D4A: 3A 4B 0A                                              	cmp	cl,[ebx+10]
00004D4D: 88 4B 0A                                              	mov	[ebx+10],cl
00004D50: 0F 95 C0                                              	setne	al
00004D53: 08 C4                                                 	or	ah,al
00004D55: 3A 6B 0B                                              	cmp	ch,[ebx+11]
00004D58: 88 6B 0B                                              	mov	[ebx+11],ch
00004D5B: 0F 95 C0                                              	setne	al
00004D5E: 08 C4                                                 	or	ah,al
00004D60: 3B 6B 0C                                              	cmp	ebp,[ebx+12]
00004D63: 89 6B 0C                                              	mov	[ebx+12],ebp
00004D66: 0F 95 C0                                              	setne	al
00004D69: 08 C4                                                 	or	ah,al
00004D6B: 08 ED                                                 	or	ch,ch
00004D6D: 74 0B                                                 	jz	label_symbol_ok
00004D6F: 3B 53 14                                              	cmp	edx,[ebx+20]
00004D72: 89 53 14                                              	mov	[ebx+20],edx
00004D75: 0F 95 C0                                              	setne	al
00004D78: 08 C4                                                 	or	ah,al
                                                                      label_symbol_ok:
00004D7A: 66 8B 0D 52 A1 01 00                                  	mov	cx,[current_pass]
00004D81: 66 87 4B 10                                           	xchg	[ebx+16],cx
00004D85: 8B 15 74 A1 01 00                                     	mov	edx,[current_line]
00004D8B: 89 53 1C                                              	mov	[ebx+28],edx
00004D8E: 80 63 08 FD                                           	and	byte [ebx+8],not 2
00004D92: F6 43 08 01                                           	test	byte [ebx+8],1
00004D96: 74 39                                                 	jz	new_label
00004D98: 66 3B 4B 10                                           	cmp	cx,[ebx+16]
00004D9C: 0F 84 CA BC FF FF                                     	je	symbol_already_defined
00004DA2: 0F BA 73 08 0A                                        	btr	dword [ebx+8],10
00004DA7: 72 20                                                 	jc	requalified_label
00004DA9: 66 41                                                 	inc	cx
00004DAB: 66 2B 4B 10                                           	sub	cx,[ebx+16]
00004DAF: 0F 95 C0                                              	setnz	al
00004DB2: 08 C4                                                 	or	ah,al
00004DB4: 74 1A                                                 	jz	label_made
00004DB6: F6 43 08 08                                           	test	byte [ebx+8],8
00004DBA: 74 14                                                 	jz	label_made
00004DBC: 66 8B 0D 52 A1 01 00                                  	mov	cx,[current_pass]
00004DC3: 66 3B 4B 12                                           	cmp	cx,[ebx+18]
00004DC7: 75 07                                                 	jne	label_made
                                                                      requalified_label:
00004DC9: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      label_made:
00004DD0: C3                                                    	ret
                                                                      new_label:
00004DD1: 80 4B 08 01                                           	or	byte [ebx+8],1
00004DD5: C3                                                    	ret
                                                                      define_constant:
00004DD6: AD                                                    	lods	dword [esi]
00004DD7: 46                                                    	inc	esi
00004DD8: 83 F8 0F                                              	cmp	eax,0Fh
00004DDB: 0F 82 6F BC FF FF                                     	jb	invalid_use_of_symbol
00004DE1: 0F 84 7E BC FF FF                                     	je	reserved_word_used_as_symbol
00004DE7: 50                                                    	push	eax
00004DE8: 80 0D 99 A2 01 00 01                                  	or	[operand_flags],1
00004DEF: E8 A1 26 00 00                                        	call	get_value
00004DF4: 5B                                                    	pop	ebx
00004DF5: 30 C9                                                 	xor	cl,cl
00004DF7: 8A 2D B4 A2 01 00                                     	mov	ch,[value_type]
00004DFD: 80 FD 03                                              	cmp	ch,3
00004E00: 0F 84 4A BC FF FF                                     	je	invalid_use_of_symbol
                                                                      make_constant:
00004E06: 80 63 09 FE                                           	and	byte [ebx+9],not 1
00004E0A: 3B 03                                                 	cmp	eax,[ebx]
00004E0C: 89 03                                                 	mov	[ebx],eax
00004E0E: 0F 95 C4                                              	setne	ah
00004E11: 3B 53 04                                              	cmp	edx,[ebx+4]
00004E14: 89 53 04                                              	mov	[ebx+4],edx
00004E17: 0F 95 C0                                              	setne	al
00004E1A: 08 C4                                                 	or	ah,al
00004E1C: A0 B5 A2 01 00                                        	mov	al,[value_sign]
00004E21: 32 43 09                                              	xor	al,[ebx+9]
00004E24: 24 02                                                 	and	al,10b
00004E26: 08 C4                                                 	or	ah,al
00004E28: 30 43 09                                              	xor	[ebx+9],al
00004E2B: 3A 4B 0A                                              	cmp	cl,[ebx+10]
00004E2E: 88 4B 0A                                              	mov	[ebx+10],cl
00004E31: 0F 95 C0                                              	setne	al
00004E34: 08 C4                                                 	or	ah,al
00004E36: 3A 6B 0B                                              	cmp	ch,[ebx+11]
00004E39: 88 6B 0B                                              	mov	[ebx+11],ch
00004E3C: 0F 95 C0                                              	setne	al
00004E3F: 08 C4                                                 	or	ah,al
00004E41: 31 D2                                                 	xor	edx,edx
00004E43: 3B 53 0C                                              	cmp	edx,[ebx+12]
00004E46: 89 53 0C                                              	mov	[ebx+12],edx
00004E49: 0F 95 C0                                              	setne	al
00004E4C: 08 C4                                                 	or	ah,al
00004E4E: 08 ED                                                 	or	ch,ch
00004E50: 74 11                                                 	jz	constant_symbol_ok
00004E52: 8B 15 24 A2 01 00                                     	mov	edx,[symbol_identifier]
00004E58: 3B 53 14                                              	cmp	edx,[ebx+20]
00004E5B: 89 53 14                                              	mov	[ebx+20],edx
00004E5E: 0F 95 C0                                              	setne	al
00004E61: 08 C4                                                 	or	ah,al
                                                                      constant_symbol_ok:
00004E63: 66 8B 0D 52 A1 01 00                                  	mov	cx,[current_pass]
00004E6A: 66 87 4B 10                                           	xchg	[ebx+16],cx
00004E6E: 8B 15 74 A1 01 00                                     	mov	edx,[current_line]
00004E74: 89 53 1C                                              	mov	[ebx+28],edx
00004E77: F6 43 08 01                                           	test	byte [ebx+8],1
00004E7B: 74 66                                                 	jz	new_constant
00004E7D: 66 3B 4B 10                                           	cmp	cx,[ebx+16]
00004E81: 75 17                                                 	jne	redeclare_constant
00004E83: F6 43 08 02                                           	test	byte [ebx+8],2
00004E87: 0F 84 DF BB FF FF                                     	jz	symbol_already_defined
00004E8D: 80 4B 08 04                                           	or	byte [ebx+8],4
00004E91: 80 63 09 FB                                           	and	byte [ebx+9],not 4
00004E95: E9 D6 00 00 00                                        	jmp	instruction_assembled
                                                                      redeclare_constant:
00004E9A: 0F BA 73 08 0A                                        	btr	dword [ebx+8],10
00004E9F: 72 36                                                 	jc	requalified_constant
00004EA1: 66 41                                                 	inc	cx
00004EA3: 66 2B 4B 10                                           	sub	cx,[ebx+16]
00004EA7: 0F 95 C0                                              	setnz	al
00004EAA: 08 C4                                                 	or	ah,al
00004EAC: 0F 84 BE 00 00 00                                     	jz	instruction_assembled
00004EB2: F6 43 08 04                                           	test	byte [ebx+8],4
00004EB6: 0F 85 B4 00 00 00                                     	jnz	instruction_assembled
00004EBC: F6 43 08 08                                           	test	byte [ebx+8],8
00004EC0: 0F 84 AA 00 00 00                                     	jz	instruction_assembled
00004EC6: 66 8B 0D 52 A1 01 00                                  	mov	cx,[current_pass]
00004ECD: 66 3B 4B 12                                           	cmp	cx,[ebx+18]
00004ED1: 0F 85 99 00 00 00                                     	jne	instruction_assembled
                                                                      requalified_constant:
00004ED7: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
00004EDE: E9 8D 00 00 00                                        	jmp	instruction_assembled
                                                                      new_constant:
00004EE3: 80 4B 08 03                                           	or	byte [ebx+8],1+2
00004EE7: E9 84 00 00 00                                        	jmp	instruction_assembled
                                                                      label_addressing_space:
00004EEC: AD                                                    	lods	dword [esi]
00004EED: 83 F8 0F                                              	cmp	eax,0Fh
00004EF0: 0F 82 5A BB FF FF                                     	jb	invalid_use_of_symbol
00004EF6: 0F 84 69 BB FF FF                                     	je	reserved_word_used_as_symbol
00004EFC: 66 8B 0D 52 A1 01 00                                  	mov	cx,[current_pass]
00004F03: F6 40 08 01                                           	test	byte [eax+8],1
00004F07: 74 17                                                 	jz	make_addressing_space_label
00004F09: 66 3B 48 10                                           	cmp	cx,[eax+16]
00004F0D: 0F 84 59 BB FF FF                                     	je	symbol_already_defined
00004F13: F6 40 09 04                                           	test	byte [eax+9],4
00004F17: 75 07                                                 	jnz	make_addressing_space_label
00004F19: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      make_addressing_space_label:
00004F20: 66 8B 50 08                                           	mov	dx,[eax+8]
00004F24: 66 81 E2 FD FE                                        	and	dx,not (2 or 100h)
00004F29: 66 81 CA 05 04                                        	or	dx,1 or 4 or 400h
00004F2E: 66 89 50 08                                           	mov	[eax+8],dx
00004F32: 66 89 48 10                                           	mov	[eax+16],cx
00004F36: 8B 15 74 A1 01 00                                     	mov	edx,[current_line]
00004F3C: 89 50 1C                                              	mov	[eax+28],edx
00004F3F: 8B 1D C4 A1 01 00                                     	mov	ebx,[addressing_space]
00004F45: 89 18                                                 	mov	[eax],ebx
00004F47: 80 4B 0A 02                                           	or	byte [ebx+0Ah],2
00004F4B: E9 30 FD FF FF                                        	jmp	continue_line
                                                                      assemble_instruction:
                                                                ;	 mov	 [operand_size],0
                                                                ;	 mov	 [operand_flags],0
                                                                ;	 mov	 [operand_prefix],0
                                                                ;	 mov	 [rex_prefix],0
00004F50: 83 25 98 A2 01 00 00                                  	and	dword [operand_size],0
                                                                ;	 mov	 [opcode_prefix],0
                                                                ;	 mov	 [vex_required],0
                                                                ;	 mov	 [vex_register],0
                                                                ;	 mov	 [immediate_size],0
00004F57: 83 25 9C A2 01 00 00                                  	and	dword [opcode_prefix],0
00004F5E: E8 00 00 00 00                                        	call	instruction_handler
                                                                      instruction_handler:
00004F63: 0F B7 1E                                              	movzx	ebx,word [esi]
00004F66: 8A 46 02                                              	mov	al,[esi+2]
00004F69: 83 C6 03                                              	add	esi,3
00004F6C: 01 1C 24                                              	add	[esp],ebx
00004F6F: C3                                                    	ret
                                                                      instruction_assembled:
00004F70: F6 05 C3 A2 01 00 FE                                  	test	[prefix_flags],not 1
00004F77: 0F 85 AD B9 FF FF                                     	jnz	illegal_instruction
00004F7D: 8A 06                                                 	mov	al,[esi]
00004F7F: 3C 0F                                                 	cmp	al,0Fh
00004F81: 74 08                                                 	je	line_assembled
00004F83: 08 C0                                                 	or	al,al
00004F85: 0F 85 FD BA FF FF                                     	jnz	extra_characters_on_line
                                                                      line_assembled:
00004F8B: F8                                                    	clc
00004F8C: C3                                                    	ret
                                                                      source_end:
00004F8D: 4E                                                    	dec	esi
00004F8E: F9                                                    	stc
00004F8F: C3                                                    	ret
                                                                
                                                                org_directive:
00004F90: AC                                                    	lods	byte [esi]
00004F91: 3C 28                                                 	cmp	al,'('
00004F93: 0F 85 87 B9 FF FF                                     	jne	invalid_argument
00004F99: 80 3E 2E                                              	cmp	byte [esi],'.'
00004F9C: 0F 84 00 BA FF FF                                     	je	invalid_value
00004FA2: E8 74 24 00 00                                        	call	get_qword_value
00004FA7: 8A 0D B4 A2 01 00                                     	mov	cl,[value_type]
00004FAD: F6 C1 01                                              	test	cl,1
00004FB0: 0F 85 9A BA FF FF                                     	jnz	invalid_use_of_symbol
00004FB6: 50                                                    	push	eax
00004FB7: 8B 1D C4 A1 01 00                                     	mov	ebx,[addressing_space]
00004FBD: 89 F8                                                 	mov	eax,edi
00004FBF: 2B 43 18                                              	sub	eax,[ebx+18h]
00004FC2: 89 43 1C                                              	mov	[ebx+1Ch],eax
00004FC5: F6 43 0A 01                                           	test	byte [ebx+0Ah],1
00004FC9: 75 07                                                 	jnz	in_virtual
00004FCB: E8 BA FB FF FF                                        	call	init_addressing_space
00004FD0: EB 0E                                                 	jmp	org_space_ok
                                                                      in_virtual:
00004FD2: E8 EA 07 00 00                                        	call	close_virtual_addressing_space
00004FD7: E8 AE FB FF FF                                        	call	init_addressing_space
00004FDC: 80 4B 0A 01                                           	or	byte [ebx+0Ah],1
                                                                      org_space_ok:
00004FE0: 58                                                    	pop	eax
00004FE1: 88 4B 09                                              	mov	[ebx+9],cl
00004FE4: 8A 0D B5 A2 01 00                                     	mov	cl,[value_sign]
00004FEA: 29 03                                                 	sub	[ebx],eax
00004FEC: 19 53 04                                              	sbb	[ebx+4],edx
00004FEF: 18 4B 08                                              	sbb	byte [ebx+8],cl
00004FF2: 7A 05                                                 	jp	org_value_ok
00004FF4: E8 F8 22 00 00                                        	call	recoverable_overflow
                                                                      org_value_ok:
00004FF9: 8B 15 24 A2 01 00                                     	mov	edx,[symbol_identifier]
00004FFF: 89 53 14                                              	mov	[ebx+14h],edx
00005002: 80 3D BD A2 01 00 01                                  	cmp	[output_format],1
00005009: 0F 87 61 FF FF FF                                     	ja	instruction_assembled
0000500F: 3B 3D 60 A1 01 00                                     	cmp	edi,[code_start]
00005015: 0F 85 55 FF FF FF                                     	jne	instruction_assembled
0000501B: 3D 00 01 00 00                                        	cmp	eax,100h
00005020: 0F 85 4A FF FF FF                                     	jne	instruction_assembled
00005026: 0F BA 2D 34 A2 01 00 00                               	bts	[format_flags],0
0000502E: E9 3D FF FF FF                                        	jmp	instruction_assembled
                                                                label_directive:
00005033: AC                                                    	lods	byte [esi]
00005034: 3C 02                                                 	cmp	al,2
00005036: 0F 85 E4 B8 FF FF                                     	jne	invalid_argument
0000503C: AD                                                    	lods	dword [esi]
0000503D: 83 F8 0F                                              	cmp	eax,0Fh
00005040: 0F 82 0A BA FF FF                                     	jb	invalid_use_of_symbol
00005046: 0F 84 19 BA FF FF                                     	je	reserved_word_used_as_symbol
0000504C: 46                                                    	inc	esi
0000504D: 89 C3                                                 	mov	ebx,eax
0000504F: C6 05 AE A2 01 00 00                                  	mov	[label_size],0
00005056: AC                                                    	lods	byte [esi]
00005057: 3C 3A                                                 	cmp	al,':'
00005059: 74 05                                                 	je	get_label_size
0000505B: 4E                                                    	dec	esi
0000505C: 3C 11                                                 	cmp	al,11h
0000505E: 75 10                                                 	jne	label_size_ok
                                                                      get_label_size:
00005060: 66 AD                                                 	lods	word [esi]
00005062: 3C 11                                                 	cmp	al,11h
00005064: 0F 85 B6 B8 FF FF                                     	jne	invalid_argument
0000506A: 88 25 AE A2 01 00                                     	mov	[label_size],ah
                                                                      label_size_ok:
00005070: 80 3E 80                                              	cmp	byte [esi],80h
00005073: 74 0A                                                 	je	get_free_label_value
00005075: E8 33 FC FF FF                                        	call	make_label
0000507A: E9 F1 FE FF FF                                        	jmp	instruction_assembled
                                                                      get_free_label_value:
0000507F: 46                                                    	inc	esi
00005080: AC                                                    	lods	byte [esi]
00005081: 3C 28                                                 	cmp	al,'('
00005083: 0F 85 97 B8 FF FF                                     	jne	invalid_argument
00005089: 53 51                                                 	push	ebx ecx
0000508B: 80 4B 08 04                                           	or	byte [ebx+8],4
0000508F: 80 3E 2E                                              	cmp	byte [esi],'.'
00005092: 0F 84 0A B9 FF FF                                     	je	invalid_value
00005098: E8 E4 24 00 00                                        	call	get_address_value
0000509D: 08 FF                                                 	or	bh,bh
0000509F: 0F 95 C5                                              	setnz	ch
000050A2: 86 E9                                                 	xchg	ch,cl
000050A4: 66 89 CD                                              	mov	bp,cx
000050A7: C1 E5 10                                              	shl	ebp,16
000050AA: 86 DF                                                 	xchg	bl,bh
000050AC: 66 89 DD                                              	mov	bp,bx
000050AF: 59 5B                                                 	pop	ecx ebx
000050B1: 80 63 08 FB                                           	and	byte [ebx+8],not 4
000050B5: 8A 2D B4 A2 01 00                                     	mov	ch,[value_type]
000050BB: F6 C5 01                                              	test	ch,1
000050BE: 0F 85 8C B9 FF FF                                     	jnz	invalid_use_of_symbol
                                                                      make_free_label:
000050C4: 80 63 09 FE                                           	and	byte [ebx+9],not 1
000050C8: 3B 03                                                 	cmp	eax,[ebx]
000050CA: 89 03                                                 	mov	[ebx],eax
000050CC: 0F 95 C4                                              	setne	ah
000050CF: 3B 53 04                                              	cmp	edx,[ebx+4]
000050D2: 89 53 04                                              	mov	[ebx+4],edx
000050D5: 0F 95 C0                                              	setne	al
000050D8: 08 C4                                                 	or	ah,al
000050DA: 8B 15 28 A2 01 00                                     	mov	edx,[address_symbol]
000050E0: 8A 0D AE A2 01 00                                     	mov	cl,[label_size]
000050E6: E8 50 FC FF FF                                        	call	finish_label_symbol
000050EB: E9 80 FE FF FF                                        	jmp	instruction_assembled
                                                                load_directive:
000050F0: AC                                                    	lods	byte [esi]
000050F1: 3C 02                                                 	cmp	al,2
000050F3: 0F 85 27 B8 FF FF                                     	jne	invalid_argument
000050F9: AD                                                    	lods	dword [esi]
000050FA: 83 F8 0F                                              	cmp	eax,0Fh
000050FD: 0F 82 4D B9 FF FF                                     	jb	invalid_use_of_symbol
00005103: 0F 84 5C B9 FF FF                                     	je	reserved_word_used_as_symbol
00005109: 46                                                    	inc	esi
0000510A: 50                                                    	push	eax
0000510B: B0 01                                                 	mov	al,1
0000510D: 80 3E 11                                              	cmp	byte [esi],11h
00005110: 75 02                                                 	jne	load_size_ok
00005112: AC                                                    	lods	byte [esi]
00005113: AC                                                    	lods	byte [esi]
                                                                      load_size_ok:
00005114: 3C 08                                                 	cmp	al,8
00005116: 0F 87 86 B8 FF FF                                     	ja	invalid_value
0000511C: A2 98 A2 01 00                                        	mov	[operand_size],al
00005121: 83 25 F4 A1 01 00 00                                  	and	dword [value],0
00005128: 83 25 F8 A1 01 00 00                                  	and	dword [value+4],0
0000512F: AC                                                    	lods	byte [esi]
00005130: 3C 82                                                 	cmp	al,82h
00005132: 0F 85 E8 B7 FF FF                                     	jne	invalid_argument
00005138: E8 2A 00 00 00                                        	call	get_data_point
0000513D: 72 0D                                                 	jc	value_loaded
0000513F: 56 57                                                 	push	esi edi
00005141: 89 DE                                                 	mov	esi,ebx
00005143: BF F4 A1 01 00                                        	mov	edi,value
00005148: F3 A4                                                 	rep	movs byte [edi],[esi]
0000514A: 5F 5E                                                 	pop	edi esi
                                                                      value_loaded:
0000514C: C6 05 B5 A2 01 00 00                                  	mov	[value_sign],0
00005153: A1 F4 A1 01 00                                        	mov	eax,dword [value]
00005158: 8B 15 F8 A1 01 00                                     	mov	edx,dword [value+4]
0000515E: 5B                                                    	pop	ebx
0000515F: 66 31 C9                                              	xor	cx,cx
00005162: E9 9F FC FF FF                                        	jmp	make_constant
                                                                      get_data_point:
00005167: AC                                                    	lods	byte [esi]
00005168: 3C 3A                                                 	cmp	al,':'
0000516A: 0F 84 FA 00 00 00                                     	je	get_data_offset
00005170: 3C 28                                                 	cmp	al,'('
00005172: 0F 85 A8 B7 FF FF                                     	jne	invalid_argument
00005178: 8B 1D C4 A1 01 00                                     	mov	ebx,[addressing_space]
0000517E: 89 F9                                                 	mov	ecx,edi
00005180: 2B 4B 18                                              	sub	ecx,[ebx+18h]
00005183: 89 4B 1C                                              	mov	[ebx+1Ch],ecx
00005186: 80 3E 11                                              	cmp	byte [esi],11h
00005189: 75 62                                                 	jne	get_data_address
0000518B: 66 81 7E 05 29 3A                                     	cmp	word [esi+1+4],'):'
00005191: 75 5A                                                 	jne	get_data_address
00005193: 46                                                    	inc	esi
00005194: AD                                                    	lods	dword [esi]
00005195: 83 C6 02                                              	add	esi,2
00005198: 80 3E 28                                              	cmp	byte [esi],'('
0000519B: 0F 85 7F B7 FF FF                                     	jne	invalid_argument
000051A1: 46                                                    	inc	esi
000051A2: 83 F8 0F                                              	cmp	eax,0Fh
000051A5: 0F 86 BA B8 FF FF                                     	jbe	reserved_word_used_as_symbol
000051AB: BA B6 09 00 00                                        	mov	edx,undefined_symbol
000051B0: F6 40 08 01                                           	test	byte [eax+8],1
000051B4: 0F 84 87 00 00 00                                     	jz	addressing_space_unavailable
000051BA: BA 0D 0A 00 00                                        	mov	edx,symbol_out_of_scope
000051BF: 66 8B 48 10                                           	mov	cx,[eax+16]
000051C3: 66 3B 0D 52 A1 01 00                                  	cmp	cx,[current_pass]
000051CA: 75 75                                                 	jne	addressing_space_unavailable
000051CC: F6 40 09 04                                           	test	byte [eax+9],4
000051D0: 0F 84 7A B8 FF FF                                     	jz	invalid_use_of_symbol
000051D6: 89 C3                                                 	mov	ebx,eax
000051D8: 66 A1 52 A1 01 00                                     	mov	ax,[current_pass]
000051DE: 66 89 43 12                                           	mov	[ebx+18],ax
000051E2: 80 4B 08 08                                           	or	byte [ebx+8],8
000051E6: E8 62 1E 00 00                                        	call	store_label_reference
                                                                      get_addressing_space:
000051EB: 8B 1B                                                 	mov	ebx,[ebx]
                                                                      get_data_address:
000051ED: 53                                                    	push	ebx
000051EE: 80 3E 2E                                              	cmp	byte [esi],'.'
000051F1: 0F 84 AB B7 FF FF                                     	je	invalid_value
000051F7: 80 0D 99 A2 01 00 01                                  	or	[operand_flags],1
000051FE: E8 7E 23 00 00                                        	call	get_address_value
00005203: 5D                                                    	pop	ebp
00005204: E8 98 26 00 00                                        	call	calculate_relative_offset
00005209: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
00005210: 75 0D                                                 	jne	data_address_type_ok
00005212: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
00005219: 0F 85 31 B8 FF FF                                     	jne	invalid_use_of_symbol
                                                                      data_address_type_ok:
0000521F: 89 FB                                                 	mov	ebx,edi
00005221: 31 C9                                                 	xor	ecx,ecx
00005223: 01 C3                                                 	add	ebx,eax
00005225: 11 CA                                                 	adc	edx,ecx
00005227: 89 D8                                                 	mov	eax,ebx
00005229: 3E 2B 45 18                                           	sub	eax,[ds:ebp+18h]
0000522D: 19 CA                                                 	sbb	edx,ecx
0000522F: 75 32                                                 	jnz	bad_data_address
00005231: 8A 0D 98 A2 01 00                                     	mov	cl,[operand_size]
00005237: 01 C8                                                 	add	eax,ecx
00005239: 3E 3B 45 1C                                           	cmp	eax,[ds:ebp+1Ch]
0000523D: 77 24                                                 	ja	bad_data_address
0000523F: F8                                                    	clc
00005240: C3                                                    	ret
                                                                      addressing_space_unavailable:
00005241: 83 3D DC A1 01 00 00                                  	cmp	[error_line],0
00005248: 75 A3                                                 	jne	get_data_address
0000524A: FF 35 74 A1 01 00                                     	push	[current_line]
00005250: 8F 05 DC A1 01 00                                     	pop	[error_line]
00005256: 89 15 E0 A1 01 00                                     	mov	[error],edx
0000525C: A3 D8 A1 01 00                                        	mov	[error_info],eax
00005261: EB 8A                                                 	jmp	get_data_address
                                                                      bad_data_address:
00005263: E8 89 20 00 00                                        	call	recoverable_overflow
00005268: F9                                                    	stc
00005269: C3                                                    	ret
                                                                      get_data_offset:
0000526A: 80 3D BD A2 01 00 02                                  	cmp	[output_format],2
00005271: 0F 83 BD B6 FF FF                                     	jae	invalid_operand
00005277: AC                                                    	lods	byte [esi]
00005278: 3C 28                                                 	cmp	al,'('
0000527A: 0F 85 A0 B6 FF FF                                     	jne	invalid_argument
00005280: 80 3E 2E                                              	cmp	byte [esi],'.'
00005283: 0F 84 19 B7 FF FF                                     	je	invalid_value
00005289: E8 F2 20 00 00                                        	call	get_dword_value
0000528E: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
00005295: 74 05                                                 	je	data_offset_ok
00005297: E8 18 33 00 00                                        	call	recoverable_invalid_address
                                                                      data_offset_ok:
0000529C: 03 05 60 A1 01 00                                     	add	eax,[code_start]
000052A2: 72 BF                                                 	jc	bad_data_address
000052A4: 89 C3                                                 	mov	ebx,eax
000052A6: 0F B6 0D 98 A2 01 00                                  	movzx	ecx,[operand_size]
000052AD: 01 C8                                                 	add	eax,ecx
000052AF: 72 B2                                                 	jc	bad_data_address
000052B1: 8B 15 C4 A1 01 00                                     	mov	edx,[addressing_space]
000052B7: F6 42 0A 01                                           	test	byte [edx+0Ah],1
000052BB: 75 06                                                 	jnz	data_offset_from_virtual
000052BD: 39 F8                                                 	cmp	eax,edi
000052BF: 77 A2                                                 	ja	bad_data_address
000052C1: F8                                                    	clc
000052C2: C3                                                    	ret
                                                                      data_offset_from_virtual:
000052C3: 3B 05 CC A1 01 00                                     	cmp	eax,[undefined_data_end]
000052C9: 77 98                                                 	ja	bad_data_address
000052CB: F8                                                    	clc
000052CC: C3                                                    	ret
                                                                
                                                                store_directive:
000052CD: 80 3E 11                                              	cmp	byte [esi],11h
000052D0: 74 1C                                                 	je	sized_store
000052D2: AC                                                    	lods	byte [esi]
000052D3: 3C 28                                                 	cmp	al,'('
000052D5: 0F 85 45 B6 FF FF                                     	jne	invalid_argument
000052DB: E8 CD 1F 00 00                                        	call	get_byte_value
000052E0: 31 D2                                                 	xor	edx,edx
000052E2: 0F B6 C0                                              	movzx	eax,al
000052E5: C6 05 98 A2 01 00 01                                  	mov	[operand_size],1
000052EC: EB 0C                                                 	jmp	store_value_ok
                                                                      sized_store:
000052EE: 80 0D 99 A2 01 00 01                                  	or	[operand_flags],1
000052F5: E8 9B 21 00 00                                        	call	get_value
                                                                      store_value_ok:
000052FA: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
00005301: 0F 85 49 B7 FF FF                                     	jne	invalid_use_of_symbol
00005307: A3 F4 A1 01 00                                        	mov	dword [value],eax
0000530C: 89 15 F8 A1 01 00                                     	mov	dword [value+4],edx
00005312: AC                                                    	lods	byte [esi]
00005313: 3C 80                                                 	cmp	al,80h
00005315: 0F 85 05 B6 FF FF                                     	jne	invalid_argument
0000531B: E8 47 FE FF FF                                        	call	get_data_point
00005320: 0F 82 4A FC FF FF                                     	jc	instruction_assembled
00005326: 56 57                                                 	push	esi edi
00005328: BE F4 A1 01 00                                        	mov	esi,value
0000532D: 89 DF                                                 	mov	edi,ebx
0000532F: F3 A4                                                 	rep	movs byte [edi],[esi]
00005331: 89 F8                                                 	mov	eax,edi
00005333: 5F 5E                                                 	pop	edi esi
00005335: 3B 1D CC A1 01 00                                     	cmp	ebx,[undefined_data_end]
0000533B: 0F 83 2F FC FF FF                                     	jae	instruction_assembled
00005341: 3B 05 C8 A1 01 00                                     	cmp	eax,[undefined_data_start]
00005347: 0F 86 23 FC FF FF                                     	jbe	instruction_assembled
0000534D: A3 C8 A1 01 00                                        	mov	[undefined_data_start],eax
00005352: E9 19 FC FF FF                                        	jmp	instruction_assembled
                                                                
                                                                display_directive:
00005357: AC                                                    	lods	byte [esi]
00005358: 3C 28                                                 	cmp	al,'('
0000535A: 0F 85 C0 B5 FF FF                                     	jne	invalid_argument
00005360: 80 3E 00                                              	cmp	byte [esi],0
00005363: 75 29                                                 	jne	display_byte
00005365: 46                                                    	inc	esi
00005366: AD                                                    	lods	dword [esi]
00005367: 89 C1                                                 	mov	ecx,eax
00005369: 57                                                    	push	edi
0000536A: 8B 3D E4 A1 01 00                                     	mov	edi,[tagged_blocks]
00005370: 83 EF 08                                              	sub	edi,8
00005373: 29 C7                                                 	sub	edi,eax
00005375: 3B 3C 24                                              	cmp	edi,[esp]
00005378: 0F 86 14 B5 FF FF                                     	jbe	out_of_memory
0000537E: 89 3D E4 A1 01 00                                     	mov	[tagged_blocks],edi
00005384: F3 A4                                                 	rep	movs byte [edi],[esi]
00005386: AB                                                    	stos	dword [edi]
00005387: 31 C0                                                 	xor	eax,eax
00005389: AB                                                    	stos	dword [edi]
0000538A: 5F                                                    	pop	edi
0000538B: 46                                                    	inc	esi
0000538C: EB 1F                                                 	jmp	display_next
                                                                      display_byte:
0000538E: E8 1A 1F 00 00                                        	call	get_byte_value
00005393: 57                                                    	push	edi
00005394: 8B 3D E4 A1 01 00                                     	mov	edi,[tagged_blocks]
0000539A: 83 EF 09                                              	sub	edi,8+1
0000539D: 89 3D E4 A1 01 00                                     	mov	[tagged_blocks],edi
000053A3: AA                                                    	stos	byte [edi]
000053A4: B8 01 00 00 00                                        	mov	eax,1
000053A9: AB                                                    	stos	dword [edi]
000053AA: 48                                                    	dec	eax
000053AB: AB                                                    	stos	dword [edi]
000053AC: 5F                                                    	pop	edi
                                                                      display_next:
000053AD: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
000053B3: 0F 87 D9 B4 FF FF                                     	ja	out_of_memory
000053B9: AC                                                    	lods	byte [esi]
000053BA: 3C 2C                                                 	cmp	al,','
000053BC: 74 99                                                 	je	display_directive
000053BE: 4E                                                    	dec	esi
000053BF: E9 AC FB FF FF                                        	jmp	instruction_assembled
                                                                show_display_buffer:
000053C4: A1 E4 A1 01 00                                        	mov	eax,[tagged_blocks]
000053C9: 09 C0                                                 	or	eax,eax
000053CB: 74 2C                                                 	jz	display_done
000053CD: 8B 35 B4 A1 01 00                                     	mov	esi,[labels_list]
000053D3: 39 C6                                                 	cmp	esi,eax
000053D5: 74 22                                                 	je	display_done
                                                                      display_messages:
000053D7: 83 EE 08                                              	sub	esi,8
000053DA: 8B 46 04                                              	mov	eax,[esi+4]
000053DD: 8B 0E                                                 	mov	ecx,[esi]
000053DF: 29 CE                                                 	sub	esi,ecx
000053E1: 83 F8 10                                              	cmp	eax,10h
000053E4: 74 14                                                 	je	write_addressing_space
000053E6: 85 C0                                                 	test	eax,eax
000053E8: 75 07                                                 	jnz	skip_block
000053EA: 56                                                    	push	esi
000053EB: E8 B6 B0 FF FF                                        	call	display_block
000053F0: 5E                                                    	pop	esi
                                                                      skip_block:
000053F1: 3B 35 E4 A1 01 00                                     	cmp	esi,[tagged_blocks]
000053F7: 75 DE                                                 	jne	display_messages
                                                                      display_done:
000053F9: C3                                                    	ret
                                                                      write_addressing_space:
000053FA: 8B 4E 20                                              	mov	ecx,[esi+20h]
000053FD: E3 F2                                                 	jecxz	skip_block
000053FF: 56                                                    	push	esi
00005400: 8B 3D 58 A1 01 00                                     	mov	edi,[free_additional_memory]
00005406: 8B 35 48 A1 01 00                                     	mov	esi,[output_file]
0000540C: 85 F6                                                 	test	esi,esi
0000540E: 74 7A                                                 	jz	addressing_space_written
00005410: 31 DB                                                 	xor	ebx,ebx
                                                                      copy_output_path:
00005412: AC                                                    	lodsb
00005413: 3B 3D E8 A1 01 00                                     	cmp	edi,[structures_buffer]
00005419: 0F 83 73 B4 FF FF                                     	jae	out_of_memory
0000541F: AA                                                    	stosb
00005420: 84 C0                                                 	test	al,al
00005422: 74 14                                                 	jz	output_path_copied
00005424: 3C 2F                                                 	cmp	al,'/'
00005426: 74 0C                                                 	je	new_path_segment
00005428: 3C 5C                                                 	cmp	al,'\'
0000542A: 74 08                                                 	je	new_path_segment
0000542C: 3C 2E                                                 	cmp	al,'.'
0000542E: 75 E2                                                 	jne	copy_output_path
00005430: 89 FB                                                 	mov	ebx,edi
00005432: EB DE                                                 	jmp	copy_output_path
                                                                      new_path_segment:
00005434: 31 DB                                                 	xor	ebx,ebx
00005436: EB DA                                                 	jmp	copy_output_path
                                                                      output_path_copied:
00005438: 85 DB                                                 	test	ebx,ebx
0000543A: 75 06                                                 	jnz	append_extension
0000543C: C6 47 FF 2E                                           	mov	byte [edi-1],'.'
00005440: 89 FB                                                 	mov	ebx,edi
                                                                      append_extension:
00005442: 89 DF                                                 	mov	edi,ebx
00005444: 01 CB                                                 	add	ebx,ecx
00005446: 43                                                    	inc	ebx
00005447: 3B 1D E8 A1 01 00                                     	cmp	ebx,[structures_buffer]
0000544D: 0F 83 3F B4 FF FF                                     	jae	out_of_memory
00005453: 8B 34 24                                              	mov	esi,[esp]
00005456: 8B 76 18                                              	mov	esi,[esi+18h]
00005459: 29 CE                                                 	sub	esi,ecx
0000545B: F3 A4                                                 	rep	movs byte [edi],[esi]
0000545D: 30 C0                                                 	xor	al,al
0000545F: AA                                                    	stos	byte [edi]
00005460: 8B 15 58 A1 01 00                                     	mov	edx,[free_additional_memory]
00005466: E8 2F AF FF FF                                        	call	create
0000546B: 0F 82 3F B4 FF FF                                     	jc	write_failed
00005471: 8B 34 24                                              	mov	esi,[esp]
00005474: 8B 56 18                                              	mov	edx,[esi+18h]
00005477: 8B 4E 1C                                              	mov	ecx,[esi+1Ch]
0000547A: E8 51 AF FF FF                                        	call	write
0000547F: 0F 82 2B B4 FF FF                                     	jc	write_failed
00005485: E8 2C AF FF FF                                        	call	close
                                                                      addressing_space_written:
0000548A: 5E                                                    	pop	esi
0000548B: E9 61 FF FF FF                                        	jmp	skip_block
                                                                
                                                                times_directive:
00005490: AC                                                    	lods	byte [esi]
00005491: 3C 28                                                 	cmp	al,'('
00005493: 0F 85 87 B4 FF FF                                     	jne	invalid_argument
00005499: 80 3E 2E                                              	cmp	byte [esi],'.'
0000549C: 0F 84 00 B5 FF FF                                     	je	invalid_value
000054A2: E8 8D 1F 00 00                                        	call	get_count_value
000054A7: 83 F8 00                                              	cmp	eax,0
000054AA: 74 69                                                 	je	zero_times
000054AC: 80 3E 3A                                              	cmp	byte [esi],':'
000054AF: 75 01                                                 	jne	times_argument_ok
000054B1: 46                                                    	inc	esi
                                                                      times_argument_ok:
000054B2: FF 35 D0 A1 01 00                                     	push	[counter]
000054B8: FF 35 D4 A1 01 00                                     	push	[counter_limit]
000054BE: A3 D4 A1 01 00                                        	mov	[counter_limit],eax
000054C3: C7 05 D0 A1 01 00 01 00 00 00                         	mov	[counter],1
                                                                      times_loop:
000054CD: 89 E0                                                 	mov	eax,esp
000054CF: 2B 05 3C A1 01 00                                     	sub	eax,[stack_limit]
000054D5: 3D 00 01 00 00                                        	cmp	eax,100h
000054DA: 0F 82 BC B3 FF FF                                     	jb	stack_overflow
000054E0: 56                                                    	push	esi
000054E1: 80 0D C3 A2 01 00 01                                  	or	[prefix_flags],1
000054E8: E8 93 F7 FF FF                                        	call	continue_line
000054ED: A1 D4 A1 01 00                                        	mov	eax,[counter_limit]
000054F2: 39 05 D0 A1 01 00                                     	cmp	[counter],eax
000054F8: 74 09                                                 	je	times_done
000054FA: FF 05 D0 A1 01 00                                     	inc	[counter]
00005500: 5E                                                    	pop	esi
00005501: EB CA                                                 	jmp	times_loop
                                                                      times_done:
00005503: 58                                                    	pop	eax
00005504: 8F 05 D4 A1 01 00                                     	pop	[counter_limit]
0000550A: 8F 05 D0 A1 01 00                                     	pop	[counter]
00005510: E9 5B FA FF FF                                        	jmp	instruction_assembled
                                                                      zero_times:
00005515: E8 6D 28 00 00                                        	call	skip_symbol
0000551A: 73 F9                                                 	jnc	zero_times
0000551C: E9 4F FA FF FF                                        	jmp	instruction_assembled
                                                                
                                                                virtual_directive:
00005521: AC                                                    	lods	byte [esi]
00005522: 3C 28                                                 	cmp	al,'('
00005524: 0F 84 75 01 00 00                                     	je	continue_virtual_area
0000552A: 3C 80                                                 	cmp	al,80h
0000552C: 75 24                                                 	jne	virtual_at_current
0000552E: AC                                                    	lods	byte [esi]
0000552F: 3C 28                                                 	cmp	al,'('
00005531: 0F 85 E9 B3 FF FF                                     	jne	invalid_argument
00005537: 80 3E 2E                                              	cmp	byte [esi],'.'
0000553A: 0F 84 62 B4 FF FF                                     	je	invalid_value
00005540: E8 3C 20 00 00                                        	call	get_address_value
00005545: 8B 2D 28 A2 01 00                                     	mov	ebp,[address_symbol]
0000554B: 08 FF                                                 	or	bh,bh
0000554D: 0F 95 C5                                              	setnz	ch
00005550: EB 3A                                                 	jmp	set_virtual
                                                                      virtual_at_current:
00005552: 4E                                                    	dec	esi
                                                                      virtual_fallback:
00005553: 8B 2D C4 A1 01 00                                     	mov	ebp,[addressing_space]
00005559: 3E 8A 45 09                                           	mov	al,[ds:ebp+9]
0000555D: A2 B4 A2 01 00                                        	mov	[value_type],al
00005562: 89 F8                                                 	mov	eax,edi
00005564: 31 D2                                                 	xor	edx,edx
00005566: 30 C9                                                 	xor	cl,cl
00005568: 3E 2B 45 00                                           	sub	eax,[ds:ebp]
0000556C: 3E 1B 55 04                                           	sbb	edx,[ds:ebp+4]
00005570: 3E 1A 4D 08                                           	sbb	cl,[ds:ebp+8]
00005574: 88 0D B8 A2 01 00                                     	mov	[address_sign],cl
0000557A: 3E 66 8B 5D 10                                        	mov	bx,[ds:ebp+10h]
0000557F: 3E 66 8B 4D 12                                        	mov	cx,[ds:ebp+10h+2]
00005584: 86 FB                                                 	xchg	bh,bl
00005586: 86 E9                                                 	xchg	ch,cl
00005588: 3E 8B 6D 14                                           	mov	ebp,[ds:ebp+14h]
                                                                      set_virtual:
0000558C: 86 DF                                                 	xchg	bl,bh
0000558E: 86 CD                                                 	xchg	cl,ch
00005590: C1 E1 10                                              	shl	ecx,16
00005593: 66 89 D9                                              	mov	cx,bx
00005596: 51 50                                                 	push	ecx eax
00005598: 8B 1D C4 A1 01 00                                     	mov	ebx,[addressing_space]
0000559E: F6 43 0A 01                                           	test	byte [ebx+0Ah],1
000055A2: 75 12                                                 	jnz	non_virtual_end_ok
000055A4: 89 F8                                                 	mov	eax,edi
000055A6: 87 05 CC A1 01 00                                     	xchg	eax,[undefined_data_end]
000055AC: 39 F8                                                 	cmp	eax,edi
000055AE: 74 06                                                 	je	non_virtual_end_ok
000055B0: 89 3D C8 A1 01 00                                     	mov	[undefined_data_start],edi
                                                                      non_virtual_end_ok:
000055B6: E8 B6 00 00 00                                        	call	allocate_virtual_structure_data
000055BB: E8 CA F5 FF FF                                        	call	init_addressing_space
000055C0: 80 4B 0A 01                                           	or	byte [ebx+0Ah],1
000055C4: 80 3E 86                                              	cmp	byte [esi],86h
000055C7: 75 30                                                 	jne	addressing_space_extension_ok
000055C9: 66 83 7E 01 28                                        	cmp	word [esi+1],'('
000055CE: 0F 85 4C B3 FF FF                                     	jne	invalid_argument
000055D4: 8B 4E 03                                              	mov	ecx,[esi+3]
000055D7: 83 C6 07                                              	add	esi,3+4
000055DA: 01 4B 18                                              	add	[ebx+18h],ecx
000055DD: 89 4B 20                                              	mov	[ebx+20h],ecx
000055E0: 80 4B 0A 02                                           	or	byte [ebx+0Ah],2
000055E4: 53                                                    	push	ebx
000055E5: BB C7 A2 01 00                                        	mov	ebx,characters
                                                                      get_extension:
000055EA: AC                                                    	lods	byte [esi]
000055EB: AA                                                    	stos	byte [edi]
000055EC: D7                                                    	xlat	byte [ebx]
000055ED: 84 C0                                                 	test	al,al
000055EF: 0F 84 2B B3 FF FF                                     	jz	invalid_argument
000055F5: E2 F3                                                 	loop	get_extension
000055F7: 46                                                    	inc	esi
000055F8: 5B                                                    	pop	ebx
                                                                      addressing_space_extension_ok:
000055F9: 58                                                    	pop	eax
000055FA: 8A 0D B8 A2 01 00                                     	mov	cl,[address_sign]
00005600: F7 D0                                                 	not	eax
00005602: F7 D2                                                 	not	edx
00005604: F6 D1                                                 	not	cl
00005606: 83 C0 01                                              	add	eax,1
00005609: 83 D2 00                                              	adc	edx,0
0000560C: 80 D1 00                                              	adc	cl,0
0000560F: 01 F8                                                 	add	eax,edi
00005611: 83 D2 00                                              	adc	edx,0
00005614: 80 D1 00                                              	adc	cl,0
00005617: 89 03                                                 	mov	[ebx],eax
00005619: 89 53 04                                              	mov	[ebx+4],edx
0000561C: 88 4B 08                                              	mov	[ebx+8],cl
0000561F: 8F 43 10                                              	pop	dword [ebx+10h]
00005622: 89 6B 14                                              	mov	[ebx+14h],ebp
00005625: A0 B4 A2 01 00                                        	mov	al,[value_type]
0000562A: A8 01                                                 	test	al,1
0000562C: 0F 85 1E B4 FF FF                                     	jnz	invalid_use_of_symbol
00005632: 88 43 09                                              	mov	[ebx+9],al
00005635: E9 36 F9 FF FF                                        	jmp	instruction_assembled
                                                                      allocate_structure_data:
0000563A: 8B 1D E8 A1 01 00                                     	mov	ebx,[structures_buffer]
00005640: 83 EB 18                                              	sub	ebx,18h
00005643: 3B 1D 58 A1 01 00                                     	cmp	ebx,[free_additional_memory]
00005649: 0F 82 43 B2 FF FF                                     	jb	out_of_memory
0000564F: 89 1D E8 A1 01 00                                     	mov	[structures_buffer],ebx
00005655: C3                                                    	ret
                                                                      find_structure_data:
00005656: 8B 1D E8 A1 01 00                                     	mov	ebx,[structures_buffer]
                                                                      scan_structures:
0000565C: 3B 1D 38 A1 01 00                                     	cmp	ebx,[additional_memory_end]
00005662: 74 0B                                                 	je	no_such_structure
00005664: 66 3B 03                                              	cmp	ax,[ebx]
00005667: 74 05                                                 	je	structure_data_found
00005669: 83 C3 18                                              	add	ebx,18h
0000566C: EB EE                                                 	jmp	scan_structures
                                                                      structure_data_found:
0000566E: C3                                                    	ret
                                                                      no_such_structure:
0000566F: F9                                                    	stc
00005670: C3                                                    	ret
                                                                      allocate_virtual_structure_data:
00005671: E8 C4 FF FF FF                                        	call	allocate_structure_data
00005676: 66 C7 03 BE 05                                        	mov	word [ebx],virtual_directive-instruction_handler
0000567B: 8B 0D C4 A1 01 00                                     	mov	ecx,[addressing_space]
00005681: 89 4B 0C                                              	mov	[ebx+12],ecx
00005684: 89 7B 08                                              	mov	[ebx+8],edi
00005687: 8B 0D 74 A1 01 00                                     	mov	ecx,[current_line]
0000568D: 89 4B 04                                              	mov	[ebx+4],ecx
00005690: 8B 1D C4 A1 01 00                                     	mov	ebx,[addressing_space]
00005696: 89 F8                                                 	mov	eax,edi
00005698: 2B 43 18                                              	sub	eax,[ebx+18h]
0000569B: 89 43 1C                                              	mov	[ebx+1Ch],eax
0000569E: C3                                                    	ret
                                                                      continue_virtual_area:
0000569F: 80 3E 11                                              	cmp	byte [esi],11h
000056A2: 0F 85 78 B2 FF FF                                     	jne	invalid_argument
000056A8: 80 7E 05 29                                           	cmp	byte [esi+1+4],')'
000056AC: 0F 85 6E B2 FF FF                                     	jne	invalid_argument
000056B2: 46                                                    	inc	esi
000056B3: AD                                                    	lods	dword [esi]
000056B4: 46                                                    	inc	esi
000056B5: 83 F8 0F                                              	cmp	eax,0Fh
000056B8: 0F 86 A7 B3 FF FF                                     	jbe	reserved_word_used_as_symbol
000056BE: BA B6 09 00 00                                        	mov	edx,undefined_symbol
000056C3: F6 40 08 01                                           	test	byte [eax+8],1
000056C7: 0F 84 8D 00 00 00                                     	jz	virtual_area_unavailable
000056CD: BA 0D 0A 00 00                                        	mov	edx,symbol_out_of_scope
000056D2: 66 8B 48 10                                           	mov	cx,[eax+16]
000056D6: 66 3B 0D 52 A1 01 00                                  	cmp	cx,[current_pass]
000056DD: 75 7B                                                 	jne	virtual_area_unavailable
000056DF: BA 50 0A 00 00                                        	mov	edx,invalid_use_of_symbol
000056E4: F6 40 09 04                                           	test	byte [eax+9],4
000056E8: 74 70                                                 	jz	virtual_area_unavailable
000056EA: 89 C3                                                 	mov	ebx,eax
000056EC: 66 A1 52 A1 01 00                                     	mov	ax,[current_pass]
000056F2: 66 89 43 12                                           	mov	[ebx+18],ax
000056F6: 80 4B 08 08                                           	or	byte [ebx+8],8
000056FA: E8 4E 19 00 00                                        	call	store_label_reference
000056FF: 8B 1B                                                 	mov	ebx,[ebx]
00005701: F6 43 0A 04                                           	test	byte [ebx+0Ah],4
00005705: 74 53                                                 	jz	virtual_area_unavailable
00005707: 80 63 0A FB                                           	and	byte [ebx+0Ah],not 4
0000570B: 89 DA                                                 	mov	edx,ebx
0000570D: E8 5F FF FF FF                                        	call	allocate_virtual_structure_data
00005712: 89 15 C4 A1 01 00                                     	mov	[addressing_space],edx
00005718: 56                                                    	push	esi
00005719: 8B 72 18                                              	mov	esi,[edx+18h]
0000571C: 8B 4A 1C                                              	mov	ecx,[edx+1Ch]
0000571F: 8B 42 20                                              	mov	eax,[edx+20h]
00005722: 29 C6                                                 	sub	esi,eax
00005724: 01 C1                                                 	add	ecx,eax
00005726: 8D 04 0F                                              	lea	eax,[edi+ecx]
00005729: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
0000572F: 0F 83 5D B1 FF FF                                     	jae	out_of_memory
00005735: 89 F0                                                 	mov	eax,esi
00005737: 29 F8                                                 	sub	eax,edi
00005739: 29 42 18                                              	sub	[edx+18h],eax
0000573C: 29 02                                                 	sub	[edx],eax
0000573E: 83 5A 04 00                                           	sbb	dword [edx+4],0
00005742: 80 5A 08 00                                           	sbb	byte [edx+8],0
00005746: 88 C8                                                 	mov	al,cl
00005748: C1 E9 02                                              	shr	ecx,2
0000574B: F3 A5                                                 	rep	movs dword [edi],[esi]
0000574D: 88 C1                                                 	mov	cl,al
0000574F: 80 E1 03                                              	and	cl,11b
00005752: F3 A4                                                 	rep	movs byte [edi],[esi]
00005754: 5E                                                    	pop	esi
00005755: E9 16 F8 FF FF                                        	jmp	instruction_assembled
                                                                      virtual_area_unavailable:
0000575A: 83 3D DC A1 01 00 00                                  	cmp	[error_line],0
00005761: 0F 85 EC FD FF FF                                     	jne	virtual_fallback
00005767: FF 35 74 A1 01 00                                     	push	[current_line]
0000576D: 8F 05 DC A1 01 00                                     	pop	[error_line]
00005773: 89 15 E0 A1 01 00                                     	mov	[error],edx
00005779: A3 D8 A1 01 00                                        	mov	[error_info],eax
0000577E: E9 D0 FD FF FF                                        	jmp	virtual_fallback
                                                                      end_virtual:
00005783: E8 CE FE FF FF                                        	call	find_structure_data
00005788: 0F 82 F3 B2 FF FF                                     	jc	unexpected_instruction
0000578E: 53                                                    	push	ebx
0000578F: E8 2D 00 00 00                                        	call	close_virtual_addressing_space
00005794: 5B                                                    	pop	ebx
00005795: 8B 43 0C                                              	mov	eax,[ebx+12]
00005798: A3 C4 A1 01 00                                        	mov	[addressing_space],eax
0000579D: 8B 7B 08                                              	mov	edi,[ebx+8]
                                                                      remove_structure_data:
000057A0: 56 57                                                 	push	esi edi
000057A2: 89 D9                                                 	mov	ecx,ebx
000057A4: 2B 0D E8 A1 01 00                                     	sub	ecx,[structures_buffer]
000057AA: C1 E9 02                                              	shr	ecx,2
000057AD: 8D 73 FC                                              	lea	esi,[ebx-4]
000057B0: 8D 7E 18                                              	lea	edi,[esi+18h]
000057B3: FD                                                    	std
000057B4: F3 A5                                                 	rep	movs dword [edi],[esi]
000057B6: FC                                                    	cld
000057B7: 83 05 E8 A1 01 00 18                                  	add	[structures_buffer],18h
000057BE: 5F 5E                                                 	pop	edi esi
000057C0: C3                                                    	ret
                                                                      close_virtual_addressing_space:
000057C1: 8B 1D C4 A1 01 00                                     	mov	ebx,[addressing_space]
000057C7: 89 F8                                                 	mov	eax,edi
000057C9: 2B 43 18                                              	sub	eax,[ebx+18h]
000057CC: 89 43 1C                                              	mov	[ebx+1Ch],eax
000057CF: 03 43 20                                              	add	eax,[ebx+20h]
000057D2: F6 43 0A 02                                           	test	byte [ebx+0Ah],2
000057D6: 74 5D                                                 	jz	addressing_space_closed
000057D8: 80 4B 0A 04                                           	or	byte [ebx+0Ah],4
000057DC: 56 57 51 52                                           	push	esi edi ecx edx
000057E0: 89 C1                                                 	mov	ecx,eax
000057E2: A1 E4 A1 01 00                                        	mov	eax,[tagged_blocks]
000057E7: C7 40 FC 11 00 00 00                                  	mov	dword [eax-4],11h
000057EE: 89 48 F8                                              	mov	dword [eax-8],ecx
000057F1: 83 E8 08                                              	sub	eax,8
000057F4: 29 C8                                                 	sub	eax,ecx
000057F6: A3 E4 A1 01 00                                        	mov	[tagged_blocks],eax
000057FB: 8D 7C 08 FF                                           	lea	edi,[eax+ecx-1]
000057FF: 03 43 20                                              	add	eax,[ebx+20h]
00005802: 87 43 18                                              	xchg	eax,[ebx+18h]
00005805: 2B 43 20                                              	sub	eax,[ebx+20h]
00005808: 8D 74 08 FF                                           	lea	esi,[eax+ecx-1]
0000580C: 89 F8                                                 	mov	eax,edi
0000580E: 29 F0                                                 	sub	eax,esi
00005810: FD                                                    	std
00005811: D1 E9                                                 	shr	ecx,1
00005813: 73 01                                                 	jnc	virtual_byte_ok
00005815: A4                                                    	movs	byte [edi],[esi]
                                                                      virtual_byte_ok:
00005816: 4E                                                    	dec	esi
00005817: 4F                                                    	dec	edi
00005818: D1 E9                                                 	shr	ecx,1
0000581A: 73 02                                                 	jnc	virtual_word_ok
0000581C: 66 A5                                                 	movs	word [edi],[esi]
                                                                      virtual_word_ok:
0000581E: 83 EE 02                                              	sub	esi,2
00005821: 83 EF 02                                              	sub	edi,2
00005824: F3 A5                                                 	rep	movs dword [edi],[esi]
00005826: FC                                                    	cld
00005827: 31 D2                                                 	xor	edx,edx
00005829: 01 03                                                 	add	[ebx],eax
0000582B: 11 53 04                                              	adc	dword [ebx+4],edx
0000582E: 10 53 08                                              	adc	byte [ebx+8],dl
00005831: 5A 59 5F 5E                                           	pop	edx ecx edi esi
                                                                      addressing_space_closed:
00005835: C3                                                    	ret
                                                                repeat_directive:
00005836: F6 05 C3 A2 01 00 01                                  	test	[prefix_flags],1
0000583D: 0F 85 3E B2 FF FF                                     	jnz	unexpected_instruction
00005843: AC                                                    	lods	byte [esi]
00005844: 3C 28                                                 	cmp	al,'('
00005846: 0F 85 D4 B0 FF FF                                     	jne	invalid_argument
0000584C: 80 3E 2E                                              	cmp	byte [esi],'.'
0000584F: 0F 84 4D B1 FF FF                                     	je	invalid_value
00005855: E8 DA 1B 00 00                                        	call	get_count_value
0000585A: 83 F8 00                                              	cmp	eax,0
0000585D: 74 7E                                                 	je	zero_repeat
0000585F: E8 D6 FD FF FF                                        	call	allocate_structure_data
00005864: 66 C7 03 D3 08                                        	mov	word [ebx],repeat_directive-instruction_handler
00005869: 87 05 D4 A1 01 00                                     	xchg	eax,[counter_limit]
0000586F: 89 43 10                                              	mov	[ebx+10h],eax
00005872: B8 01 00 00 00                                        	mov	eax,1
00005877: 87 05 D0 A1 01 00                                     	xchg	eax,[counter]
0000587D: 89 43 14                                              	mov	[ebx+14h],eax
00005880: 89 73 08                                              	mov	[ebx+8],esi
00005883: A1 74 A1 01 00                                        	mov	eax,[current_line]
00005888: 89 43 04                                              	mov	[ebx+4],eax
0000588B: E9 E0 F6 FF FF                                        	jmp	instruction_assembled
                                                                      end_repeat:
00005890: F6 05 C3 A2 01 00 01                                  	test	[prefix_flags],1
00005897: 0F 85 E4 B1 FF FF                                     	jnz	unexpected_instruction
0000589D: E8 B4 FD FF FF                                        	call	find_structure_data
000058A2: 0F 82 D9 B1 FF FF                                     	jc	unexpected_instruction
000058A8: A1 D4 A1 01 00                                        	mov	eax,[counter_limit]
000058AD: FF 05 D0 A1 01 00                                     	inc	[counter]
000058B3: 39 05 D0 A1 01 00                                     	cmp	[counter],eax
000058B9: 76 1A                                                 	jbe	continue_repeating
                                                                      stop_repeat:
000058BB: 8B 43 10                                              	mov	eax,[ebx+10h]
000058BE: A3 D4 A1 01 00                                        	mov	[counter_limit],eax
000058C3: 8B 43 14                                              	mov	eax,[ebx+14h]
000058C6: A3 D0 A1 01 00                                        	mov	[counter],eax
000058CB: E8 D0 FE FF FF                                        	call	remove_structure_data
000058D0: E9 9B F6 FF FF                                        	jmp	instruction_assembled
                                                                      continue_repeating:
000058D5: 8B 73 08                                              	mov	esi,[ebx+8]
000058D8: E9 93 F6 FF FF                                        	jmp	instruction_assembled
                                                                      zero_repeat:
000058DD: 8A 06                                                 	mov	al,[esi]
000058DF: 08 C0                                                 	or	al,al
000058E1: 0F 84 93 B1 FF FF                                     	jz	missing_end_directive
000058E7: 3C 0F                                                 	cmp	al,0Fh
000058E9: 0F 85 99 B1 FF FF                                     	jne	extra_characters_on_line
000058EF: E8 05 00 00 00                                        	call	find_end_repeat
000058F4: E9 77 F6 FF FF                                        	jmp	instruction_assembled
                                                                      find_end_repeat:
000058F9: E8 E0 01 00 00                                        	call	find_structure_end
000058FE: 66 3D D3 08                                           	cmp	ax,repeat_directive-instruction_handler
00005902: 0F 85 79 B1 FF FF                                     	jne	unexpected_instruction
00005908: C3                                                    	ret
                                                                while_directive:
00005909: F6 05 C3 A2 01 00 01                                  	test	[prefix_flags],1
00005910: 0F 85 6B B1 FF FF                                     	jnz	unexpected_instruction
00005916: E8 1F FD FF FF                                        	call	allocate_structure_data
0000591B: 66 C7 03 A6 09                                        	mov	word [ebx],while_directive-instruction_handler
00005920: B8 01 00 00 00                                        	mov	eax,1
00005925: 87 05 D0 A1 01 00                                     	xchg	eax,[counter]
0000592B: 89 43 10                                              	mov	[ebx+10h],eax
0000592E: 89 73 08                                              	mov	[ebx+8],esi
00005931: A1 74 A1 01 00                                        	mov	eax,[current_line]
00005936: 89 43 04                                              	mov	[ebx+4],eax
                                                                      do_while:
00005939: 53                                                    	push	ebx
0000593A: E8 1D 20 00 00                                        	call	calculate_logical_expression
0000593F: 08 C0                                                 	or	al,al
00005941: 75 2A                                                 	jnz	while_true
00005943: 8A 06                                                 	mov	al,[esi]
00005945: 08 C0                                                 	or	al,al
00005947: 0F 84 2D B1 FF FF                                     	jz	missing_end_directive
0000594D: 3C 0F                                                 	cmp	al,0Fh
0000594F: 0F 85 33 B1 FF FF                                     	jne	extra_characters_on_line
                                                                      stop_while:
00005955: E8 4A 00 00 00                                        	call	find_end_while
0000595A: 5B                                                    	pop	ebx
0000595B: 8B 43 10                                              	mov	eax,[ebx+10h]
0000595E: A3 D0 A1 01 00                                        	mov	[counter],eax
00005963: E8 38 FE FF FF                                        	call	remove_structure_data
00005968: E9 03 F6 FF FF                                        	jmp	instruction_assembled
                                                                      while_true:
0000596D: 5B                                                    	pop	ebx
0000596E: E9 FD F5 FF FF                                        	jmp	instruction_assembled
                                                                      end_while:
00005973: F6 05 C3 A2 01 00 01                                  	test	[prefix_flags],1
0000597A: 0F 85 01 B1 FF FF                                     	jnz	unexpected_instruction
00005980: E8 D1 FC FF FF                                        	call	find_structure_data
00005985: 0F 82 F6 B0 FF FF                                     	jc	unexpected_instruction
0000598B: 8B 43 04                                              	mov	eax,[ebx+4]
0000598E: A3 74 A1 01 00                                        	mov	[current_line],eax
00005993: FF 05 D0 A1 01 00                                     	inc	[counter]
00005999: 0F 84 05 B1 FF FF                                     	jz	too_many_repeats
0000599F: 8B 73 08                                              	mov	esi,[ebx+8]
000059A2: EB 95                                                 	jmp	do_while
                                                                      find_end_while:
000059A4: E8 35 01 00 00                                        	call	find_structure_end
000059A9: 66 3D A6 09                                           	cmp	ax,while_directive-instruction_handler
000059AD: 0F 85 CE B0 FF FF                                     	jne	unexpected_instruction
000059B3: C3                                                    	ret
                                                                if_directive:
000059B4: F6 05 C3 A2 01 00 01                                  	test	[prefix_flags],1
000059BB: 0F 85 C0 B0 FF FF                                     	jnz	unexpected_instruction
000059C1: E8 96 1F 00 00                                        	call	calculate_logical_expression
000059C6: 88 C2                                                 	mov	dl,al
000059C8: 8A 06                                                 	mov	al,[esi]
000059CA: 08 C0                                                 	or	al,al
000059CC: 0F 84 A8 B0 FF FF                                     	jz	missing_end_directive
000059D2: 3C 0F                                                 	cmp	al,0Fh
000059D4: 0F 85 AE B0 FF FF                                     	jne	extra_characters_on_line
000059DA: 08 D2                                                 	or	dl,dl
000059DC: 75 1E                                                 	jnz	if_true
000059DE: E8 D2 00 00 00                                        	call	find_else
000059E3: 0F 82 87 F5 FF FF                                     	jc	instruction_assembled
000059E9: 8A 06                                                 	mov	al,[esi]
000059EB: 3C 01                                                 	cmp	al,1
000059ED: 75 29                                                 	jne	else_true
000059EF: 66 81 7E 01 51 0A                                     	cmp	word [esi+1],if_directive-instruction_handler
000059F5: 75 21                                                 	jne	else_true
000059F7: 83 C6 04                                              	add	esi,4
000059FA: EB B8                                                 	jmp	if_directive
                                                                      if_true:
000059FC: 30 C0                                                 	xor	al,al
                                                                      make_if_structure:
000059FE: E8 37 FC FF FF                                        	call	allocate_structure_data
00005A03: 66 C7 03 51 0A                                        	mov	word [ebx],if_directive-instruction_handler
00005A08: 88 43 02                                              	mov	byte [ebx+2],al
00005A0B: A1 74 A1 01 00                                        	mov	eax,[current_line]
00005A10: 89 43 04                                              	mov	[ebx+4],eax
00005A13: E9 58 F5 FF FF                                        	jmp	instruction_assembled
                                                                      else_true:
00005A18: 08 C0                                                 	or	al,al
00005A1A: 0F 84 5A B0 FF FF                                     	jz	missing_end_directive
00005A20: 3C 0F                                                 	cmp	al,0Fh
00005A22: 0F 85 60 B0 FF FF                                     	jne	extra_characters_on_line
00005A28: 0C FF                                                 	or	al,-1
00005A2A: EB D2                                                 	jmp	make_if_structure
                                                                      else_directive:
00005A2C: F6 05 C3 A2 01 00 01                                  	test	[prefix_flags],1
00005A33: 0F 85 48 B0 FF FF                                     	jnz	unexpected_instruction
00005A39: 66 B8 51 0A                                           	mov	ax,if_directive-instruction_handler
00005A3D: E8 14 FC FF FF                                        	call	find_structure_data
00005A42: 0F 82 39 B0 FF FF                                     	jc	unexpected_instruction
00005A48: 80 7B 02 00                                           	cmp	byte [ebx+2],0
00005A4C: 0F 85 2F B0 FF FF                                     	jne	unexpected_instruction
                                                                      found_else:
00005A52: 8A 06                                                 	mov	al,[esi]
00005A54: 3C 01                                                 	cmp	al,1
00005A56: 75 1C                                                 	jne	skip_else
00005A58: 66 81 7E 01 51 0A                                     	cmp	word [esi+1],if_directive-instruction_handler
00005A5E: 75 14                                                 	jne	skip_else
00005A60: 83 C6 04                                              	add	esi,4
00005A63: E8 4D 00 00 00                                        	call	find_else
00005A68: 73 E8                                                 	jnc	found_else
00005A6A: E8 31 FD FF FF                                        	call	remove_structure_data
00005A6F: E9 FC F4 FF FF                                        	jmp	instruction_assembled
                                                                      skip_else:
00005A74: 08 C0                                                 	or	al,al
00005A76: 0F 84 FE AF FF FF                                     	jz	missing_end_directive
00005A7C: 3C 0F                                                 	cmp	al,0Fh
00005A7E: 0F 85 04 B0 FF FF                                     	jne	extra_characters_on_line
00005A84: E8 45 00 00 00                                        	call	find_end_if
00005A89: E8 12 FD FF FF                                        	call	remove_structure_data
00005A8E: E9 DD F4 FF FF                                        	jmp	instruction_assembled
                                                                      end_if:
00005A93: F6 05 C3 A2 01 00 01                                  	test	[prefix_flags],1
00005A9A: 0F 85 E1 AF FF FF                                     	jnz	unexpected_instruction
00005AA0: E8 B1 FB FF FF                                        	call	find_structure_data
00005AA5: 0F 82 D6 AF FF FF                                     	jc	unexpected_instruction
00005AAB: E8 F0 FC FF FF                                        	call	remove_structure_data
00005AB0: E9 BB F4 FF FF                                        	jmp	instruction_assembled
                                                                      find_else:
00005AB5: E8 24 00 00 00                                        	call	find_structure_end
00005ABA: 66 3D C9 0A                                           	cmp	ax,else_directive-instruction_handler
00005ABE: 74 0C                                                 	je	else_found
00005AC0: 66 3D 51 0A                                           	cmp	ax,if_directive-instruction_handler
00005AC4: 0F 85 B7 AF FF FF                                     	jne	unexpected_instruction
00005ACA: F9                                                    	stc
00005ACB: C3                                                    	ret
                                                                      else_found:
00005ACC: F8                                                    	clc
00005ACD: C3                                                    	ret
                                                                      find_end_if:
00005ACE: E8 0B 00 00 00                                        	call	find_structure_end
00005AD3: 66 3D 51 0A                                           	cmp	ax,if_directive-instruction_handler
00005AD7: 0F 85 A4 AF FF FF                                     	jne	unexpected_instruction
00005ADD: C3                                                    	ret
                                                                      find_structure_end:
00005ADE: FF 35 DC A1 01 00                                     	push	[error_line]
00005AE4: A1 74 A1 01 00                                        	mov	eax,[current_line]
00005AE9: A3 DC A1 01 00                                        	mov	[error_line],eax
                                                                      find_end_directive:
00005AEE: E8 94 22 00 00                                        	call	skip_symbol
00005AF3: 73 F9                                                 	jnc	find_end_directive
00005AF5: AC                                                    	lods	byte [esi]
00005AF6: 3C 0F                                                 	cmp	al,0Fh
00005AF8: 75 65                                                 	jne	no_end_directive
00005AFA: AD                                                    	lods	dword [esi]
00005AFB: A3 74 A1 01 00                                        	mov	[current_line],eax
                                                                      skip_labels:
00005B00: 80 3E 02                                              	cmp	byte [esi],2
00005B03: 75 05                                                 	jne	labels_ok
00005B05: 83 C6 06                                              	add	esi,6
00005B08: EB F6                                                 	jmp	skip_labels
                                                                      labels_ok:
00005B0A: 80 3E 01                                              	cmp	byte [esi],1
00005B0D: 75 DF                                                 	jne	find_end_directive
00005B0F: 66 8B 46 01                                           	mov	ax,[esi+1]
00005B13: 66 3D A6 64                                           	cmp	ax,prefix_instruction-instruction_handler
00005B17: 74 D5                                                 	je	find_end_directive
00005B19: 83 C6 04                                              	add	esi,4
00005B1C: 66 3D D3 08                                           	cmp	ax,repeat_directive-instruction_handler
00005B20: 74 4C                                                 	je	skip_repeat
00005B22: 66 3D A6 09                                           	cmp	ax,while_directive-instruction_handler
00005B26: 74 50                                                 	je	skip_while
00005B28: 66 3D 51 0A                                           	cmp	ax,if_directive-instruction_handler
00005B2C: 74 54                                                 	je	skip_if
00005B2E: 66 3D C9 0A                                           	cmp	ax,else_directive-instruction_handler
00005B32: 74 24                                                 	je	structure_end
00005B34: 66 3D 48 0C                                           	cmp	ax,end_directive-instruction_handler
00005B38: 75 B4                                                 	jne	find_end_directive
00005B3A: 80 3E 01                                              	cmp	byte [esi],1
00005B3D: 75 AF                                                 	jne	find_end_directive
00005B3F: 66 8B 46 01                                           	mov	ax,[esi+1]
00005B43: 83 C6 04                                              	add	esi,4
00005B46: 66 3D D3 08                                           	cmp	ax,repeat_directive-instruction_handler
00005B4A: 74 0C                                                 	je	structure_end
00005B4C: 66 3D A6 09                                           	cmp	ax,while_directive-instruction_handler
00005B50: 74 06                                                 	je	structure_end
00005B52: 66 3D 51 0A                                           	cmp	ax,if_directive-instruction_handler
00005B56: 75 96                                                 	jne	find_end_directive
                                                                      structure_end:
00005B58: 8F 05 DC A1 01 00                                     	pop	[error_line]
00005B5E: C3                                                    	ret
                                                                      no_end_directive:
00005B5F: A1 DC A1 01 00                                        	mov	eax,[error_line]
00005B64: A3 74 A1 01 00                                        	mov	[current_line],eax
00005B69: E9 0C AF FF FF                                        	jmp	missing_end_directive
                                                                      skip_repeat:
00005B6E: E8 86 FD FF FF                                        	call	find_end_repeat
00005B73: E9 76 FF FF FF                                        	jmp	find_end_directive
                                                                      skip_while:
00005B78: E8 27 FE FF FF                                        	call	find_end_while
00005B7D: E9 6C FF FF FF                                        	jmp	find_end_directive
                                                                      skip_if:
00005B82: E8 05 00 00 00                                        	call	skip_if_block
00005B87: E9 62 FF FF FF                                        	jmp	find_end_directive
                                                                      skip_if_block:
00005B8C: E8 24 FF FF FF                                        	call	find_else
00005B91: 72 17                                                 	jc	if_block_skipped
00005B93: 80 3E 01                                              	cmp	byte [esi],1
00005B96: 75 0D                                                 	jne	skip_after_else
00005B98: 66 81 7E 01 51 0A                                     	cmp	word [esi+1],if_directive-instruction_handler
00005B9E: 75 05                                                 	jne	skip_after_else
00005BA0: 83 C6 04                                              	add	esi,4
00005BA3: EB E7                                                 	jmp	skip_if_block
                                                                      skip_after_else:
00005BA5: E8 24 FF FF FF                                        	call	find_end_if
                                                                      if_block_skipped:
00005BAA: C3                                                    	ret
                                                                end_directive:
00005BAB: AC                                                    	lods	byte [esi]
00005BAC: 3C 01                                                 	cmp	al,1
00005BAE: 0F 85 6C AD FF FF                                     	jne	invalid_argument
00005BB4: 66 AD                                                 	lods	word [esi]
00005BB6: 46                                                    	inc	esi
00005BB7: 66 3D BE 05                                           	cmp	ax,virtual_directive-instruction_handler
00005BBB: 0F 84 C2 FB FF FF                                     	je	end_virtual
00005BC1: 66 3D D3 08                                           	cmp	ax,repeat_directive-instruction_handler
00005BC5: 0F 84 C5 FC FF FF                                     	je	end_repeat
00005BCB: 66 3D A6 09                                           	cmp	ax,while_directive-instruction_handler
00005BCF: 0F 84 9E FD FF FF                                     	je	end_while
00005BD5: 66 3D 51 0A                                           	cmp	ax,if_directive-instruction_handler
00005BD9: 0F 84 B4 FE FF FF                                     	je	end_if
00005BDF: 66 3D E4 40                                           	cmp	ax,data_directive-instruction_handler
00005BE3: 0F 84 DF 34 00 00                                     	je	end_data
00005BE9: E9 32 AD FF FF                                        	jmp	invalid_argument
                                                                break_directive:
00005BEE: 8B 1D E8 A1 01 00                                     	mov	ebx,[structures_buffer]
00005BF4: 8A 06                                                 	mov	al,[esi]
00005BF6: 08 C0                                                 	or	al,al
00005BF8: 74 08                                                 	jz	find_breakable_structure
00005BFA: 3C 0F                                                 	cmp	al,0Fh
00005BFC: 0F 85 86 AE FF FF                                     	jne	extra_characters_on_line
                                                                      find_breakable_structure:
00005C02: 3B 1D 38 A1 01 00                                     	cmp	ebx,[additional_memory_end]
00005C08: 0F 84 73 AE FF FF                                     	je	unexpected_instruction
00005C0E: 66 8B 03                                              	mov	ax,[ebx]
00005C11: 66 3D D3 08                                           	cmp	ax,repeat_directive-instruction_handler
00005C15: 74 37                                                 	je	break_repeat
00005C17: 66 3D A6 09                                           	cmp	ax,while_directive-instruction_handler
00005C1B: 74 3D                                                 	je	break_while
00005C1D: 66 3D 51 0A                                           	cmp	ax,if_directive-instruction_handler
00005C21: 74 05                                                 	je	break_if
00005C23: 83 C3 18                                              	add	ebx,18h
00005C26: EB DA                                                 	jmp	find_breakable_structure
                                                                      break_if:
00005C28: FF 35 74 A1 01 00                                     	push	[current_line]
00005C2E: 8B 43 04                                              	mov	eax,[ebx+4]
00005C31: A3 74 A1 01 00                                        	mov	[current_line],eax
00005C36: E8 65 FB FF FF                                        	call	remove_structure_data
00005C3B: E8 4C FF FF FF                                        	call	skip_if_block
00005C40: 8F 05 74 A1 01 00                                     	pop	[current_line]
00005C46: 8B 1D E8 A1 01 00                                     	mov	ebx,[structures_buffer]
00005C4C: EB B4                                                 	jmp	find_breakable_structure
                                                                      break_repeat:
00005C4E: 53                                                    	push	ebx
00005C4F: E8 A5 FC FF FF                                        	call	find_end_repeat
00005C54: 5B                                                    	pop	ebx
00005C55: E9 61 FC FF FF                                        	jmp	stop_repeat
                                                                      break_while:
00005C5A: 53                                                    	push	ebx
00005C5B: E9 F5 FC FF FF                                        	jmp	stop_while
                                                                
                                                                define_data:
00005C60: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
00005C66: 0F 83 26 AC FF FF                                     	jae	out_of_memory
00005C6C: 80 3E 28                                              	cmp	byte [esi],'('
00005C6F: 0F 85 85 00 00 00                                     	jne	simple_data_value
00005C75: 89 F3                                                 	mov	ebx,esi
00005C77: 46                                                    	inc	esi
00005C78: E8 4E 21 00 00                                        	call	skip_expression
00005C7D: 87 F3                                                 	xchg	esi,ebx
00005C7F: 80 3B 81                                              	cmp	byte [ebx],81h
00005C82: 75 76                                                 	jne	simple_data_value
00005C84: 46                                                    	inc	esi
00005C85: E8 AA 17 00 00                                        	call	get_count_value
00005C8A: 46                                                    	inc	esi
00005C8B: 09 C0                                                 	or	eax,eax
00005C8D: 74 4B                                                 	jz	duplicate_zero_times
00005C8F: 80 3E 91                                              	cmp	byte [esi],91h
00005C92: 75 2A                                                 	jne	duplicate_single_data_value
00005C94: 46                                                    	inc	esi
                                                                      duplicate_data:
00005C95: 50 56                                                 	push	eax esi
                                                                      duplicated_values:
00005C97: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
00005C9D: 0F 83 EF AB FF FF                                     	jae	out_of_memory
00005CA3: F8                                                    	clc
00005CA4: FF 54 24 08                                           	call	near dword [esp+8]
00005CA8: AC                                                    	lods	byte [esi]
00005CA9: 3C 2C                                                 	cmp	al,','
00005CAB: 74 EA                                                 	je	duplicated_values
00005CAD: 3C 92                                                 	cmp	al,92h
00005CAF: 0F 85 6B AC FF FF                                     	jne	invalid_argument
00005CB5: 5B 58                                                 	pop	ebx eax
00005CB7: 48                                                    	dec	eax
00005CB8: 74 50                                                 	jz	data_defined
00005CBA: 89 DE                                                 	mov	esi,ebx
00005CBC: EB D7                                                 	jmp	duplicate_data
                                                                      duplicate_single_data_value:
00005CBE: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
00005CC4: 0F 83 C8 AB FF FF                                     	jae	out_of_memory
00005CCA: 50 56                                                 	push	eax esi
00005CCC: F8                                                    	clc
00005CCD: FF 54 24 08                                           	call	near dword [esp+8]
00005CD1: 5B 58                                                 	pop	ebx eax
00005CD3: 48                                                    	dec	eax
00005CD4: 74 34                                                 	jz	data_defined
00005CD6: 89 DE                                                 	mov	esi,ebx
00005CD8: EB E4                                                 	jmp	duplicate_single_data_value
                                                                      duplicate_zero_times:
00005CDA: 80 3E 91                                              	cmp	byte [esi],91h
00005CDD: 75 14                                                 	jne	skip_single_data_value
00005CDF: 46                                                    	inc	esi
                                                                      skip_data_value:
00005CE0: E8 A2 20 00 00                                        	call	skip_symbol
00005CE5: 0F 82 35 AC FF FF                                     	jc	invalid_argument
00005CEB: 80 3E 92                                              	cmp	byte [esi],92h
00005CEE: 75 F0                                                 	jne	skip_data_value
00005CF0: 46                                                    	inc	esi
00005CF1: EB 17                                                 	jmp	data_defined
                                                                      skip_single_data_value:
00005CF3: E8 8F 20 00 00                                        	call	skip_symbol
00005CF8: EB 10                                                 	jmp	data_defined
                                                                      simple_data_value:
00005CFA: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
00005D00: 0F 83 8C AB FF FF                                     	jae	out_of_memory
00005D06: F8                                                    	clc
00005D07: FF 14 24                                              	call	near dword [esp]
                                                                      data_defined:
00005D0A: AC                                                    	lods	byte [esi]
00005D0B: 3C 2C                                                 	cmp	al,','
00005D0D: 0F 84 4D FF FF FF                                     	je	define_data
00005D13: 4E                                                    	dec	esi
00005D14: F9                                                    	stc
00005D15: C3                                                    	ret
                                                                data_bytes:
00005D16: E8 45 FF FF FF                                        	call	define_data
00005D1B: 0F 82 4F F2 FF FF                                     	jc	instruction_assembled
00005D21: AC                                                    	lods	byte [esi]
00005D22: 3C 28                                                 	cmp	al,'('
00005D24: 74 10                                                 	je	get_byte
00005D26: 3C 3F                                                 	cmp	al,'?'
00005D28: 0F 85 F2 AB FF FF                                     	jne	invalid_argument
00005D2E: 89 F8                                                 	mov	eax,edi
00005D30: C6 07 00                                              	mov	byte [edi],0
00005D33: 47                                                    	inc	edi
00005D34: EB 23                                                 	jmp	undefined_data
                                                                      get_byte:
00005D36: 80 3E 00                                              	cmp	byte [esi],0
00005D39: 74 07                                                 	je	get_string
00005D3B: E8 6D 15 00 00                                        	call	get_byte_value
00005D40: AA                                                    	stos	byte [edi]
00005D41: C3                                                    	ret
                                                                      get_string:
00005D42: 46                                                    	inc	esi
00005D43: AD                                                    	lods	dword [esi]
00005D44: 89 C1                                                 	mov	ecx,eax
00005D46: 8D 04 0F                                              	lea	eax,[edi+ecx]
00005D49: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
00005D4F: 0F 87 3D AB FF FF                                     	ja	out_of_memory
00005D55: F3 A4                                                 	rep	movs byte [edi],[esi]
00005D57: 46                                                    	inc	esi
00005D58: C3                                                    	ret
                                                                      undefined_data:
00005D59: 8B 2D C4 A1 01 00                                     	mov	ebp,[addressing_space]
00005D5F: 3E F6 45 0A 01                                        	test	byte [ds:ebp+0Ah],1
00005D64: 74 01                                                 	jz	mark_undefined_data
00005D66: C3                                                    	ret
                                                                      mark_undefined_data:
00005D67: 3B 05 CC A1 01 00                                     	cmp	eax,[undefined_data_end]
00005D6D: 74 05                                                 	je	undefined_data_ok
00005D6F: A3 C8 A1 01 00                                        	mov	[undefined_data_start],eax
                                                                      undefined_data_ok:
00005D74: 89 3D CC A1 01 00                                     	mov	[undefined_data_end],edi
00005D7A: C3                                                    	ret
                                                                data_unicode:
00005D7B: 80 0D A3 A2 01 00 FF                                  	or	[base_code],-1
00005D82: EB 07                                                 	jmp	define_words
                                                                data_words:
00005D84: C6 05 A3 A2 01 00 00                                  	mov	[base_code],0
                                                                    define_words:
00005D8B: E8 D0 FE FF FF                                        	call	define_data
00005D90: 0F 82 DA F1 FF FF                                     	jc	instruction_assembled
00005D96: AC                                                    	lods	byte [esi]
00005D97: 3C 28                                                 	cmp	al,'('
00005D99: 74 13                                                 	je	get_word
00005D9B: 3C 3F                                                 	cmp	al,'?'
00005D9D: 0F 85 7D AB FF FF                                     	jne	invalid_argument
00005DA3: 89 F8                                                 	mov	eax,edi
00005DA5: 66 83 27 00                                           	and	word [edi],0
00005DA9: 66 AF                                                 	scas	word [edi]
00005DAB: EB AC                                                 	jmp	undefined_data
00005DAD: C3                                                    	ret
                                                                      get_word:
00005DAE: 80 3D A3 A2 01 00 00                                  	cmp	[base_code],0
00005DB5: 74 05                                                 	je	word_data_value
00005DB7: 80 3E 00                                              	cmp	byte [esi],0
00005DBA: 74 0D                                                 	je	word_string
                                                                      word_data_value:
00005DBC: E8 77 15 00 00                                        	call	get_word_value
00005DC1: E8 1C 26 00 00                                        	call	mark_relocation
00005DC6: 66 AB                                                 	stos	word [edi]
00005DC8: C3                                                    	ret
                                                                      word_string:
00005DC9: 46                                                    	inc	esi
00005DCA: AD                                                    	lods	dword [esi]
00005DCB: 89 C1                                                 	mov	ecx,eax
00005DCD: E3 16                                                 	jecxz	word_string_ok
00005DCF: 8D 04 4F                                              	lea	eax,[edi+ecx*2]
00005DD2: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
00005DD8: 0F 87 B4 AA FF FF                                     	ja	out_of_memory
00005DDE: 30 E4                                                 	xor	ah,ah
                                                                      copy_word_string:
00005DE0: AC                                                    	lods	byte [esi]
00005DE1: 66 AB                                                 	stos	word [edi]
00005DE3: E2 FB                                                 	loop	copy_word_string
                                                                      word_string_ok:
00005DE5: 46                                                    	inc	esi
00005DE6: C3                                                    	ret
                                                                data_dwords:
00005DE7: E8 74 FE FF FF                                        	call	define_data
00005DEC: 0F 82 7E F1 FF FF                                     	jc	instruction_assembled
00005DF2: AC                                                    	lods	byte [esi]
00005DF3: 3C 28                                                 	cmp	al,'('
00005DF5: 74 13                                                 	je	get_dword
00005DF7: 3C 3F                                                 	cmp	al,'?'
00005DF9: 0F 85 21 AB FF FF                                     	jne	invalid_argument
00005DFF: 89 F8                                                 	mov	eax,edi
00005E01: 83 27 00                                              	and	dword [edi],0
00005E04: AF                                                    	scas	dword [edi]
00005E05: E9 4F FF FF FF                                        	jmp	undefined_data
                                                                      get_dword:
00005E0A: 56                                                    	push	esi
00005E0B: E8 70 15 00 00                                        	call	get_dword_value
00005E10: 5B                                                    	pop	ebx
00005E11: 80 3E 3A                                              	cmp	byte [esi],':'
00005E14: 74 07                                                 	je	complex_dword
00005E16: E8 C7 25 00 00                                        	call	mark_relocation
00005E1B: AB                                                    	stos	dword [edi]
00005E1C: C3                                                    	ret
                                                                      complex_dword:
00005E1D: 89 DE                                                 	mov	esi,ebx
00005E1F: 80 3E 2E                                              	cmp	byte [esi],'.'
00005E22: 0F 84 7A AB FF FF                                     	je	invalid_value
00005E28: E8 0B 15 00 00                                        	call	get_word_value
00005E2D: 50                                                    	push	eax
00005E2E: 46                                                    	inc	esi
00005E2F: AC                                                    	lods	byte [esi]
00005E30: 3C 28                                                 	cmp	al,'('
00005E32: 0F 85 FC AA FF FF                                     	jne	invalid_operand
00005E38: A0 B4 A2 01 00                                        	mov	al,[value_type]
00005E3D: 50                                                    	push	eax
00005E3E: 80 3E 2E                                              	cmp	byte [esi],'.'
00005E41: 0F 84 5B AB FF FF                                     	je	invalid_value
00005E47: E8 EC 14 00 00                                        	call	get_word_value
00005E4C: E8 91 25 00 00                                        	call	mark_relocation
00005E51: 66 AB                                                 	stos	word [edi]
00005E53: 58                                                    	pop	eax
00005E54: A2 B4 A2 01 00                                        	mov	[value_type],al
00005E59: 58                                                    	pop	eax
00005E5A: E8 83 25 00 00                                        	call	mark_relocation
00005E5F: 66 AB                                                 	stos	word [edi]
00005E61: C3                                                    	ret
                                                                data_pwords:
00005E62: E8 F9 FD FF FF                                        	call	define_data
00005E67: 0F 82 03 F1 FF FF                                     	jc	instruction_assembled
00005E6D: AC                                                    	lods	byte [esi]
00005E6E: 3C 28                                                 	cmp	al,'('
00005E70: 74 19                                                 	je	get_pword
00005E72: 3C 3F                                                 	cmp	al,'?'
00005E74: 0F 85 A6 AA FF FF                                     	jne	invalid_argument
00005E7A: 89 F8                                                 	mov	eax,edi
00005E7C: 83 27 00                                              	and	dword [edi],0
00005E7F: AF                                                    	scas	dword [edi]
00005E80: 66 83 27 00                                           	and	word [edi],0
00005E84: 66 AF                                                 	scas	word [edi]
00005E86: E9 CE FE FF FF                                        	jmp	undefined_data
                                                                      get_pword:
00005E8B: 56                                                    	push	esi
00005E8C: E8 49 15 00 00                                        	call	get_pword_value
00005E91: 5B                                                    	pop	ebx
00005E92: 80 3E 3A                                              	cmp	byte [esi],':'
00005E95: 74 0C                                                 	je	complex_pword
00005E97: E8 46 25 00 00                                        	call	mark_relocation
00005E9C: AB                                                    	stos	dword [edi]
00005E9D: 66 89 D0                                              	mov	ax,dx
00005EA0: 66 AB                                                 	stos	word [edi]
00005EA2: C3                                                    	ret
                                                                      complex_pword:
00005EA3: 89 DE                                                 	mov	esi,ebx
00005EA5: 80 3E 2E                                              	cmp	byte [esi],'.'
00005EA8: 0F 84 F4 AA FF FF                                     	je	invalid_value
00005EAE: E8 85 14 00 00                                        	call	get_word_value
00005EB3: 50                                                    	push	eax
00005EB4: 46                                                    	inc	esi
00005EB5: AC                                                    	lods	byte [esi]
00005EB6: 3C 28                                                 	cmp	al,'('
00005EB8: 0F 85 76 AA FF FF                                     	jne	invalid_operand
00005EBE: A0 B4 A2 01 00                                        	mov	al,[value_type]
00005EC3: 50                                                    	push	eax
00005EC4: 80 3E 2E                                              	cmp	byte [esi],'.'
00005EC7: 0F 84 D5 AA FF FF                                     	je	invalid_value
00005ECD: E8 AE 14 00 00                                        	call	get_dword_value
00005ED2: E8 0B 25 00 00                                        	call	mark_relocation
00005ED7: AB                                                    	stos	dword [edi]
00005ED8: 58                                                    	pop	eax
00005ED9: A2 B4 A2 01 00                                        	mov	[value_type],al
00005EDE: 58                                                    	pop	eax
00005EDF: E8 FE 24 00 00                                        	call	mark_relocation
00005EE4: 66 AB                                                 	stos	word [edi]
00005EE6: C3                                                    	ret
                                                                data_qwords:
00005EE7: E8 74 FD FF FF                                        	call	define_data
00005EEC: 0F 82 7E F0 FF FF                                     	jc	instruction_assembled
00005EF2: AC                                                    	lods	byte [esi]
00005EF3: 3C 28                                                 	cmp	al,'('
00005EF5: 74 17                                                 	je	get_qword
00005EF7: 3C 3F                                                 	cmp	al,'?'
00005EF9: 0F 85 21 AA FF FF                                     	jne	invalid_argument
00005EFF: 89 F8                                                 	mov	eax,edi
00005F01: 83 27 00                                              	and	dword [edi],0
00005F04: AF                                                    	scas	dword [edi]
00005F05: 83 27 00                                              	and	dword [edi],0
00005F08: AF                                                    	scas	dword [edi]
00005F09: E9 4B FE FF FF                                        	jmp	undefined_data
                                                                      get_qword:
00005F0E: E8 08 15 00 00                                        	call	get_qword_value
00005F13: E8 CA 24 00 00                                        	call	mark_relocation
00005F18: AB                                                    	stos	dword [edi]
00005F19: 89 D0                                                 	mov	eax,edx
00005F1B: AB                                                    	stos	dword [edi]
00005F1C: C3                                                    	ret
                                                                data_twords:
00005F1D: E8 3E FD FF FF                                        	call	define_data
00005F22: 0F 82 48 F0 FF FF                                     	jc	instruction_assembled
00005F28: AC                                                    	lods	byte [esi]
00005F29: 3C 28                                                 	cmp	al,'('
00005F2B: 74 1D                                                 	je	get_tword
00005F2D: 3C 3F                                                 	cmp	al,'?'
00005F2F: 0F 85 EB A9 FF FF                                     	jne	invalid_argument
00005F35: 89 F8                                                 	mov	eax,edi
00005F37: 83 27 00                                              	and	dword [edi],0
00005F3A: AF                                                    	scas	dword [edi]
00005F3B: 83 27 00                                              	and	dword [edi],0
00005F3E: AF                                                    	scas	dword [edi]
00005F3F: 66 83 27 00                                           	and	word [edi],0
00005F43: 66 AF                                                 	scas	word [edi]
00005F45: E9 0F FE FF FF                                        	jmp	undefined_data
                                                                      get_tword:
00005F4A: 80 3E 2E                                              	cmp	byte [esi],'.'
00005F4D: 0F 85 9F 00 00 00                                     	jne	complex_tword
00005F53: 46                                                    	inc	esi
00005F54: 66 81 7E 08 00 80                                     	cmp	word [esi+8],8000h
00005F5A: 0F 84 81 00 00 00                                     	je	fp_zero_tword
00005F60: 8B 06                                                 	mov	eax,[esi]
00005F62: AB                                                    	stos	dword [edi]
00005F63: 8B 46 04                                              	mov	eax,[esi+4]
00005F66: AB                                                    	stos	dword [edi]
00005F67: 66 8B 46 08                                           	mov	ax,[esi+8]
00005F6B: 66 05 FF 3F                                           	add	ax,3FFFh
00005F6F: 0F 80 37 AA FF FF                                     	jo	value_out_of_range
00005F75: 66 3D FF 7F                                           	cmp	ax,7FFFh
00005F79: 0F 8D 2D AA FF FF                                     	jge	value_out_of_range
00005F7F: 66 83 F8 00                                           	cmp	ax,0
00005F83: 7F 4C                                                 	jg	tword_exp_ok
00005F85: 66 89 C1                                              	mov	cx,ax
00005F88: 66 F7 D9                                              	neg	cx
00005F8B: 66 41                                                 	inc	cx
00005F8D: 66 83 F9 40                                           	cmp	cx,64
00005F91: 0F 83 15 AA FF FF                                     	jae	value_out_of_range
00005F97: 66 83 F9 20                                           	cmp	cx,32
00005F9B: 77 0E                                                 	ja	large_shift
00005F9D: 8B 06                                                 	mov	eax,[esi]
00005F9F: 8B 56 04                                              	mov	edx,[esi+4]
00005FA2: 89 D3                                                 	mov	ebx,edx
00005FA4: D3 EA                                                 	shr	edx,cl
00005FA6: 0F AD D8                                              	shrd	eax,ebx,cl
00005FA9: EB 0B                                                 	jmp	tword_mantissa_shift_done
                                                                      large_shift:
00005FAB: 66 83 E9 20                                           	sub	cx,32
00005FAF: 31 D2                                                 	xor	edx,edx
00005FB1: 8B 46 04                                              	mov	eax,[esi+4]
00005FB4: D3 E8                                                 	shr	eax,cl
                                                                      tword_mantissa_shift_done:
00005FB6: 73 06                                                 	jnc	store_shifted_mantissa
00005FB8: 83 C0 01                                              	add	eax,1
00005FBB: 83 D2 00                                              	adc	edx,0
                                                                      store_shifted_mantissa:
00005FBE: 89 47 F8                                              	mov	[edi-8],eax
00005FC1: 89 57 FC                                              	mov	[edi-4],edx
00005FC4: 66 31 C0                                              	xor	ax,ax
00005FC7: F7 C2 00 00 00 80                                     	test	edx,1 shl 31
00005FCD: 74 02                                                 	jz	tword_exp_ok
00005FCF: 66 40                                                 	inc	ax
                                                                      tword_exp_ok:
00005FD1: 8A 5E 0B                                              	mov	bl,[esi+11]
00005FD4: 66 C1 E3 0F                                           	shl	bx,15
00005FD8: 66 09 D8                                              	or	ax,bx
00005FDB: 66 AB                                                 	stos	word [edi]
00005FDD: 83 C6 0D                                              	add	esi,13
00005FE0: C3                                                    	ret
                                                                      fp_zero_tword:
00005FE1: 31 C0                                                 	xor	eax,eax
00005FE3: AB                                                    	stos	dword [edi]
00005FE4: AB                                                    	stos	dword [edi]
00005FE5: 8A 46 0B                                              	mov	al,[esi+11]
00005FE8: 66 C1 E0 0F                                           	shl	ax,15
00005FEC: 66 AB                                                 	stos	word [edi]
00005FEE: 83 C6 0D                                              	add	esi,13
00005FF1: C3                                                    	ret
                                                                      complex_tword:
00005FF2: E8 41 13 00 00                                        	call	get_word_value
00005FF7: 50                                                    	push	eax
00005FF8: 80 3E 3A                                              	cmp	byte [esi],':'
00005FFB: 0F 85 33 A9 FF FF                                     	jne	invalid_operand
00006001: 46                                                    	inc	esi
00006002: AC                                                    	lods	byte [esi]
00006003: 3C 28                                                 	cmp	al,'('
00006005: 0F 85 29 A9 FF FF                                     	jne	invalid_operand
0000600B: A0 B4 A2 01 00                                        	mov	al,[value_type]
00006010: 50                                                    	push	eax
00006011: 80 3E 2E                                              	cmp	byte [esi],'.'
00006014: 0F 84 88 A9 FF FF                                     	je	invalid_value
0000601A: E8 FC 13 00 00                                        	call	get_qword_value
0000601F: E8 BE 23 00 00                                        	call	mark_relocation
00006024: AB                                                    	stos	dword [edi]
00006025: 89 D0                                                 	mov	eax,edx
00006027: AB                                                    	stos	dword [edi]
00006028: 58                                                    	pop	eax
00006029: A2 B4 A2 01 00                                        	mov	[value_type],al
0000602E: 58                                                    	pop	eax
0000602F: E8 AE 23 00 00                                        	call	mark_relocation
00006034: 66 AB                                                 	stos	word [edi]
00006036: C3                                                    	ret
                                                                data_file:
00006037: 66 AD                                                 	lods	word [esi]
00006039: 66 83 F8 28                                           	cmp	ax,'('
0000603D: 0F 85 DD A8 FF FF                                     	jne	invalid_argument
00006043: 83 C6 04                                              	add	esi,4
00006046: E8 A9 00 00 00                                        	call	open_binary_file
0000604B: 8B 46 FC                                              	mov	eax,[esi-4]
0000604E: 8D 74 06 01                                           	lea	esi,[esi+eax+1]
00006052: B0 02                                                 	mov	al,2
00006054: 31 D2                                                 	xor	edx,edx
00006056: E8 87 A3 FF FF                                        	call	lseek
0000605B: 50                                                    	push	eax
0000605C: 31 D2                                                 	xor	edx,edx
0000605E: 80 3E 3A                                              	cmp	byte [esi],':'
00006061: 75 26                                                 	jne	position_ok
00006063: 46                                                    	inc	esi
00006064: 80 3E 28                                              	cmp	byte [esi],'('
00006067: 0F 85 B3 A8 FF FF                                     	jne	invalid_argument
0000606D: 46                                                    	inc	esi
0000606E: 80 3E 2E                                              	cmp	byte [esi],'.'
00006071: 0F 84 2B A9 FF FF                                     	je	invalid_value
00006077: 53                                                    	push	ebx
00006078: E8 B7 13 00 00                                        	call	get_count_value
0000607D: 5B                                                    	pop	ebx
0000607E: 89 C2                                                 	mov	edx,eax
00006080: 29 14 24                                              	sub	[esp],edx
00006083: 0F 82 23 A9 FF FF                                     	jc	value_out_of_range
                                                                      position_ok:
00006089: 80 3E 2C                                              	cmp	byte [esi],','
0000608C: 75 29                                                 	jne	size_ok
0000608E: 46                                                    	inc	esi
0000608F: 80 3E 28                                              	cmp	byte [esi],'('
00006092: 0F 85 88 A8 FF FF                                     	jne	invalid_argument
00006098: 46                                                    	inc	esi
00006099: 80 3E 2E                                              	cmp	byte [esi],'.'
0000609C: 0F 84 00 A9 FF FF                                     	je	invalid_value
000060A2: 53 52                                                 	push	ebx edx
000060A4: E8 8B 13 00 00                                        	call	get_count_value
000060A9: 5A 5B                                                 	pop	edx ebx
000060AB: 3B 04 24                                              	cmp	eax,[esp]
000060AE: 0F 87 F8 A8 FF FF                                     	ja	value_out_of_range
000060B4: 89 04 24                                              	mov	[esp],eax
                                                                      size_ok:
000060B7: 30 C0                                                 	xor	al,al
000060B9: E8 24 A3 FF FF                                        	call	lseek
000060BE: 59                                                    	pop	ecx
000060BF: 89 FA                                                 	mov	edx,edi
000060C1: 01 CF                                                 	add	edi,ecx
000060C3: 0F 82 C9 A7 FF FF                                     	jc	out_of_memory
000060C9: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
000060CF: 0F 87 BD A7 FF FF                                     	ja	out_of_memory
000060D5: E8 E4 A2 FF FF                                        	call	read
000060DA: 0F 82 0E A8 FF FF                                     	jc	error_reading_file
000060E0: E8 D1 A2 FF FF                                        	call	close
000060E5: AC                                                    	lods	byte [esi]
000060E6: 3C 2C                                                 	cmp	al,','
000060E8: 0F 84 49 FF FF FF                                     	je	data_file
000060EE: 4E                                                    	dec	esi
000060EF: E9 7C EE FF FF                                        	jmp	instruction_assembled
                                                                      open_binary_file:
000060F4: 56                                                    	push	esi
000060F5: 57                                                    	push	edi
000060F6: A1 74 A1 01 00                                        	mov	eax,[current_line]
                                                                      find_current_source_path: 
000060FB: 8B 30                                                 	mov	esi,[eax] 
000060FD: F6 40 07 80                                           	test	byte [eax+7],80h 
00006101: 74 05                                                 	jz	get_current_path 
00006103: 8B 40 08                                              	mov	eax,[eax+8]
00006106: EB F3                                                 	jmp	find_current_source_path
                                                                      get_current_path:
00006108: AC                                                    	lodsb
00006109: AA                                                    	stosb
0000610A: 08 C0                                                 	or	al,al
0000610C: 75 FA                                                 	jnz	get_current_path
                                                                      cut_current_path:
0000610E: 3B 3C 24                                              	cmp	edi,[esp]
00006111: 74 0F                                                 	je	current_path_ok
00006113: 80 7F FF 5C                                           	cmp	byte [edi-1],'\'
00006117: 74 09                                                 	je	current_path_ok
00006119: 80 7F FF 2F                                           	cmp	byte [edi-1],'/'
0000611D: 74 03                                                 	je	current_path_ok
0000611F: 4F                                                    	dec	edi
00006120: EB EC                                                 	jmp	cut_current_path
                                                                      current_path_ok:
00006122: 8B 74 24 04                                           	mov	esi,[esp+4]
00006126: E8 E0 1C 00 00                                        	call	expand_path
0000612B: 5A                                                    	pop	edx
0000612C: 89 D6                                                 	mov	esi,edx
0000612E: E8 29 A2 FF FF                                        	call	open
00006133: 73 49                                                 	jnc	file_opened
00006135: 8B 15 54 A1 01 00                                     	mov	edx,[include_paths]
                                                                      search_in_include_paths:
0000613B: 52 56                                                 	push	edx esi
0000613D: 89 F7                                                 	mov	edi,esi
0000613F: 8B 74 24 04                                           	mov	esi,[esp+4]
00006143: E8 FF 1C 00 00                                        	call	get_include_directory
00006148: 89 74 24 04                                           	mov	[esp+4],esi
0000614C: 8B 74 24 08                                           	mov	esi,[esp+8]
00006150: E8 B6 1C 00 00                                        	call	expand_path
00006155: 5A                                                    	pop	edx
00006156: 89 D6                                                 	mov	esi,edx
00006158: E8 FF A1 FF FF                                        	call	open
0000615D: 5A                                                    	pop	edx
0000615E: 73 1E                                                 	jnc	file_opened
00006160: 80 3A 00                                              	cmp	byte [edx],0
00006163: 75 D6                                                 	jne	search_in_include_paths
00006165: 89 F7                                                 	mov	edi,esi
00006167: 8B 34 24                                              	mov	esi,[esp]
0000616A: 57                                                    	push	edi
0000616B: E8 9B 1C 00 00                                        	call	expand_path
00006170: 5A                                                    	pop	edx
00006171: 89 D6                                                 	mov	esi,edx
00006173: E8 E4 A1 FF FF                                        	call	open
00006178: 0F 82 66 A7 FF FF                                     	jc	file_not_found
                                                                      file_opened:
0000617E: 89 F7                                                 	mov	edi,esi
00006180: 5E                                                    	pop	esi
00006181: C3                                                    	ret
                                                                reserve_bytes:
00006182: AC                                                    	lods	byte [esi]
00006183: 3C 28                                                 	cmp	al,'('
00006185: 0F 85 95 A7 FF FF                                     	jne	invalid_argument
0000618B: 80 3E 2E                                              	cmp	byte [esi],'.'
0000618E: 0F 84 0E A8 FF FF                                     	je	invalid_value
00006194: E8 9B 12 00 00                                        	call	get_count_value
00006199: 89 C1                                                 	mov	ecx,eax
0000619B: 89 CA                                                 	mov	edx,ecx
0000619D: 01 FA                                                 	add	edx,edi
0000619F: 0F 82 ED A6 FF FF                                     	jc	out_of_memory
000061A5: 3B 15 E4 A1 01 00                                     	cmp	edx,[tagged_blocks]
000061AB: 0F 87 E1 A6 FF FF                                     	ja	out_of_memory
000061B1: 57                                                    	push	edi
000061B2: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
000061B9: 74 04                                                 	je	zero_bytes
000061BB: 01 CF                                                 	add	edi,ecx
000061BD: EB 0F                                                 	jmp	reserved_data
                                                                      zero_bytes:
000061BF: 31 C0                                                 	xor	eax,eax
000061C1: D1 E9                                                 	shr	ecx,1
000061C3: 73 01                                                 	jnc	bytes_stosb_ok
000061C5: AA                                                    	stos	byte [edi]
                                                                      bytes_stosb_ok:
000061C6: D1 E9                                                 	shr	ecx,1
000061C8: 73 02                                                 	jnc	bytes_stosw_ok
000061CA: 66 AB                                                 	stos	word [edi]
                                                                      bytes_stosw_ok:
000061CC: F3 AB                                                 	rep	stos dword [edi]
                                                                      reserved_data:
000061CE: 58                                                    	pop	eax
000061CF: E8 85 FB FF FF                                        	call	undefined_data
000061D4: E9 97 ED FF FF                                        	jmp	instruction_assembled
                                                                reserve_words:
000061D9: AC                                                    	lods	byte [esi]
000061DA: 3C 28                                                 	cmp	al,'('
000061DC: 0F 85 3E A7 FF FF                                     	jne	invalid_argument
000061E2: 80 3E 2E                                              	cmp	byte [esi],'.'
000061E5: 0F 84 B7 A7 FF FF                                     	je	invalid_value
000061EB: E8 44 12 00 00                                        	call	get_count_value
000061F0: 89 C1                                                 	mov	ecx,eax
000061F2: 89 CA                                                 	mov	edx,ecx
000061F4: D1 E2                                                 	shl	edx,1
000061F6: 0F 82 96 A6 FF FF                                     	jc	out_of_memory
000061FC: 01 FA                                                 	add	edx,edi
000061FE: 0F 82 8E A6 FF FF                                     	jc	out_of_memory
00006204: 3B 15 E4 A1 01 00                                     	cmp	edx,[tagged_blocks]
0000620A: 0F 87 82 A6 FF FF                                     	ja	out_of_memory
00006210: 57                                                    	push	edi
00006211: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
00006218: 74 05                                                 	je	zero_words
0000621A: 8D 3C 4F                                              	lea	edi,[edi+ecx*2]
0000621D: EB AF                                                 	jmp	reserved_data
                                                                      zero_words:
0000621F: 31 C0                                                 	xor	eax,eax
00006221: D1 E9                                                 	shr	ecx,1
00006223: 73 02                                                 	jnc	words_stosw_ok
00006225: 66 AB                                                 	stos	word [edi]
                                                                      words_stosw_ok:
00006227: F3 AB                                                 	rep	stos dword [edi]
00006229: EB A3                                                 	jmp	reserved_data
                                                                reserve_dwords:
0000622B: AC                                                    	lods	byte [esi]
0000622C: 3C 28                                                 	cmp	al,'('
0000622E: 0F 85 EC A6 FF FF                                     	jne	invalid_argument
00006234: 80 3E 2E                                              	cmp	byte [esi],'.'
00006237: 0F 84 65 A7 FF FF                                     	je	invalid_value
0000623D: E8 F2 11 00 00                                        	call	get_count_value
00006242: 89 C1                                                 	mov	ecx,eax
00006244: 89 CA                                                 	mov	edx,ecx
00006246: D1 E2                                                 	shl	edx,1
00006248: 0F 82 44 A6 FF FF                                     	jc	out_of_memory
0000624E: D1 E2                                                 	shl	edx,1
00006250: 0F 82 3C A6 FF FF                                     	jc	out_of_memory
00006256: 01 FA                                                 	add	edx,edi
00006258: 0F 82 34 A6 FF FF                                     	jc	out_of_memory
0000625E: 3B 15 E4 A1 01 00                                     	cmp	edx,[tagged_blocks]
00006264: 0F 87 28 A6 FF FF                                     	ja	out_of_memory
0000626A: 57                                                    	push	edi
0000626B: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
00006272: 74 08                                                 	je	zero_dwords
00006274: 8D 3C 8F                                              	lea	edi,[edi+ecx*4]
00006277: E9 52 FF FF FF                                        	jmp	reserved_data
                                                                      zero_dwords:
0000627C: 31 C0                                                 	xor	eax,eax
0000627E: F3 AB                                                 	rep	stos dword [edi]
00006280: E9 49 FF FF FF                                        	jmp	reserved_data
                                                                reserve_pwords:
00006285: AC                                                    	lods	byte [esi]
00006286: 3C 28                                                 	cmp	al,'('
00006288: 0F 85 92 A6 FF FF                                     	jne	invalid_argument
0000628E: 80 3E 2E                                              	cmp	byte [esi],'.'
00006291: 0F 84 0B A7 FF FF                                     	je	invalid_value
00006297: E8 98 11 00 00                                        	call	get_count_value
0000629C: 89 C1                                                 	mov	ecx,eax
0000629E: D1 E1                                                 	shl	ecx,1
000062A0: 0F 82 EC A5 FF FF                                     	jc	out_of_memory
000062A6: 01 C1                                                 	add	ecx,eax
000062A8: 89 CA                                                 	mov	edx,ecx
000062AA: D1 E2                                                 	shl	edx,1
000062AC: 0F 82 E0 A5 FF FF                                     	jc	out_of_memory
000062B2: 01 FA                                                 	add	edx,edi
000062B4: 0F 82 D8 A5 FF FF                                     	jc	out_of_memory
000062BA: 3B 15 E4 A1 01 00                                     	cmp	edx,[tagged_blocks]
000062C0: 0F 87 CC A5 FF FF                                     	ja	out_of_memory
000062C6: 57                                                    	push	edi
000062C7: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
000062CE: 0F 84 4B FF FF FF                                     	je	zero_words
000062D4: 8D 3C 4F                                              	lea	edi,[edi+ecx*2]
000062D7: E9 F2 FE FF FF                                        	jmp	reserved_data
                                                                reserve_qwords:
000062DC: AC                                                    	lods	byte [esi]
000062DD: 3C 28                                                 	cmp	al,'('
000062DF: 0F 85 3B A6 FF FF                                     	jne	invalid_argument
000062E5: 80 3E 2E                                              	cmp	byte [esi],'.'
000062E8: 0F 84 B4 A6 FF FF                                     	je	invalid_value
000062EE: E8 41 11 00 00                                        	call	get_count_value
000062F3: 89 C1                                                 	mov	ecx,eax
000062F5: D1 E1                                                 	shl	ecx,1
000062F7: 0F 82 95 A5 FF FF                                     	jc	out_of_memory
000062FD: 89 CA                                                 	mov	edx,ecx
000062FF: D1 E2                                                 	shl	edx,1
00006301: 0F 82 8B A5 FF FF                                     	jc	out_of_memory
00006307: D1 E2                                                 	shl	edx,1
00006309: 0F 82 83 A5 FF FF                                     	jc	out_of_memory
0000630F: 01 FA                                                 	add	edx,edi
00006311: 0F 82 7B A5 FF FF                                     	jc	out_of_memory
00006317: 3B 15 E4 A1 01 00                                     	cmp	edx,[tagged_blocks]
0000631D: 0F 87 6F A5 FF FF                                     	ja	out_of_memory
00006323: 57                                                    	push	edi
00006324: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
0000632B: 0F 84 4B FF FF FF                                     	je	zero_dwords
00006331: 8D 3C 8F                                              	lea	edi,[edi+ecx*4]
00006334: E9 95 FE FF FF                                        	jmp	reserved_data
                                                                reserve_twords:
00006339: AC                                                    	lods	byte [esi]
0000633A: 3C 28                                                 	cmp	al,'('
0000633C: 0F 85 DE A5 FF FF                                     	jne	invalid_argument
00006342: 80 3E 2E                                              	cmp	byte [esi],'.'
00006345: 0F 84 57 A6 FF FF                                     	je	invalid_value
0000634B: E8 E4 10 00 00                                        	call	get_count_value
00006350: 89 C1                                                 	mov	ecx,eax
00006352: C1 E1 02                                              	shl	ecx,2
00006355: 0F 82 37 A5 FF FF                                     	jc	out_of_memory
0000635B: 01 C1                                                 	add	ecx,eax
0000635D: 89 CA                                                 	mov	edx,ecx
0000635F: D1 E2                                                 	shl	edx,1
00006361: 0F 82 2B A5 FF FF                                     	jc	out_of_memory
00006367: 01 FA                                                 	add	edx,edi
00006369: 0F 82 23 A5 FF FF                                     	jc	out_of_memory
0000636F: 3B 15 E4 A1 01 00                                     	cmp	edx,[tagged_blocks]
00006375: 0F 87 17 A5 FF FF                                     	ja	out_of_memory
0000637B: 57                                                    	push	edi
0000637C: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
00006383: 0F 84 96 FE FF FF                                     	je	zero_words
00006389: 8D 3C 4F                                              	lea	edi,[edi+ecx*2]
0000638C: E9 3D FE FF FF                                        	jmp	reserved_data
                                                                align_directive:
00006391: AC                                                    	lods	byte [esi]
00006392: 3C 28                                                 	cmp	al,'('
00006394: 0F 85 86 A5 FF FF                                     	jne	invalid_argument
0000639A: 80 3E 2E                                              	cmp	byte [esi],'.'
0000639D: 0F 84 FF A5 FF FF                                     	je	invalid_value
000063A3: E8 8C 10 00 00                                        	call	get_count_value
000063A8: 89 C2                                                 	mov	edx,eax
000063AA: 4A                                                    	dec	edx
000063AB: 85 D0                                                 	test	eax,edx
000063AD: 0F 85 A4 00 00 00                                     	jnz	invalid_align_value
000063B3: 09 C0                                                 	or	eax,eax
000063B5: 0F 84 9C 00 00 00                                     	jz	invalid_align_value
000063BB: 83 F8 01                                              	cmp	eax,1
000063BE: 0F 84 AC EB FF FF                                     	je	instruction_assembled
000063C4: 89 F9                                                 	mov	ecx,edi
000063C6: 8B 2D C4 A1 01 00                                     	mov	ebp,[addressing_space]
000063CC: 3E 2B 4D 00                                           	sub	ecx,[ds:ebp]
000063D0: 3E 83 7D 10 00                                        	cmp	dword [ds:ebp+10h],0
000063D5: 0F 85 B4 A6 FF FF                                     	jne	section_not_aligned_enough
000063DB: 3E 80 7D 09 00                                        	cmp	byte [ds:ebp+9],0
000063E0: 74 40                                                 	je	make_alignment
000063E2: 80 3D BD A2 01 00 03                                  	cmp	[output_format],3
000063E9: 74 2C                                                 	je	pe_alignment
000063EB: 80 3D BD A2 01 00 05                                  	cmp	[output_format],5
000063F2: 75 0C                                                 	jne	object_alignment
000063F4: F7 05 34 A2 01 00 01 00 00 00                         	test	[format_flags],1
000063FE: 75 17                                                 	jnz	pe_alignment
                                                                      object_alignment:
00006400: 3E 8B 5D 14                                           	mov	ebx,[ds:ebp+14h]
00006404: 80 3B 00                                              	cmp	byte [ebx],0
00006407: 0F 85 82 A6 FF FF                                     	jne	section_not_aligned_enough
0000640D: 3B 43 10                                              	cmp	eax,[ebx+10h]
00006410: 76 10                                                 	jbe	make_alignment
00006412: E9 78 A6 FF FF                                        	jmp	section_not_aligned_enough
                                                                      pe_alignment:
00006417: 3D 00 10 00 00                                        	cmp	eax,1000h
0000641C: 0F 87 6D A6 FF FF                                     	ja	section_not_aligned_enough
                                                                      make_alignment:
00006422: 48                                                    	dec	eax
00006423: 21 C1                                                 	and	ecx,eax
00006425: 0F 84 45 EB FF FF                                     	jz	instruction_assembled
0000642B: F7 D9                                                 	neg	ecx
0000642D: 01 C1                                                 	add	ecx,eax
0000642F: 41                                                    	inc	ecx
00006430: 89 CA                                                 	mov	edx,ecx
00006432: 01 FA                                                 	add	edx,edi
00006434: 0F 82 58 A4 FF FF                                     	jc	out_of_memory
0000643A: 3B 15 E4 A1 01 00                                     	cmp	edx,[tagged_blocks]
00006440: 0F 87 4C A4 FF FF                                     	ja	out_of_memory
00006446: 57                                                    	push	edi
00006447: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
0000644E: 74 2D                                                 	je	nops
00006450: 01 CF                                                 	add	edi,ecx
00006452: E9 77 FD FF FF                                        	jmp	reserved_data
                                                                      invalid_align_value:
00006457: 83 3D DC A1 01 00 00                                  	cmp	[error_line],0
0000645E: 0F 85 0C EB FF FF                                     	jne	instruction_assembled
00006464: A1 74 A1 01 00                                        	mov	eax,[current_line]
00006469: A3 DC A1 01 00                                        	mov	[error_line],eax
0000646E: C7 05 E0 A1 01 00 A2 09 00 00                         	mov	[error],invalid_value
00006478: E9 F3 EA FF FF                                        	jmp	instruction_assembled
                                                                      nops:
0000647D: B8 90 90 90 90                                        	mov	eax,90909090h
00006482: D1 E9                                                 	shr	ecx,1
00006484: 73 01                                                 	jnc	nops_stosb_ok
00006486: AA                                                    	stos	byte [edi]
                                                                      nops_stosb_ok:
00006487: D1 E9                                                 	shr	ecx,1
00006489: 73 02                                                 	jnc	nops_stosw_ok
0000648B: 66 AB                                                 	stos	word [edi]
                                                                      nops_stosw_ok:
0000648D: F3 AB                                                 	rep	stos dword [edi]
0000648F: E9 3A FD FF FF                                        	jmp	reserved_data
                                                                err_directive:
00006494: 8A 06                                                 	mov	al,[esi]
00006496: 3C 0F                                                 	cmp	al,0Fh
00006498: 0F 84 14 A6 FF FF                                     	je	invoked_error
0000649E: 08 C0                                                 	or	al,al
000064A0: 0F 84 0C A6 FF FF                                     	jz	invoked_error
000064A6: E9 DD A5 FF FF                                        	jmp	extra_characters_on_line
                                                                assert_directive:
000064AB: E8 AC 14 00 00                                        	call	calculate_logical_expression
000064B0: 08 C0                                                 	or	al,al
000064B2: 0F 85 B8 EA FF FF                                     	jnz	instruction_assembled
000064B8: 83 3D DC A1 01 00 00                                  	cmp	[error_line],0
000064BF: 0F 85 AB EA FF FF                                     	jne	instruction_assembled
000064C5: A1 74 A1 01 00                                        	mov	eax,[current_line]
000064CA: A3 DC A1 01 00                                        	mov	[error_line],eax
000064CF: C7 05 E0 A1 01 00 AB 0A 00 00                         	mov	[error],assertion_failed
000064D9: E9 92 EA FF FF                                        	jmp	instruction_assembled
                                                                
                                                                include '..\exprcalc.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                calculate_expression:
000064DE: 89 3D F0 A1 01 00                                     	mov	[current_offset],edi
000064E4: C6 05 B2 A2 01 00 00                                  	mov	[value_undefined],0
000064EB: 80 3E 00                                              	cmp	byte [esi],0
000064EE: 0F 84 94 0D 00 00                                     	je	get_string_value
000064F4: 80 3E 2E                                              	cmp	byte [esi],'.'
000064F7: 0F 84 88 0B 00 00                                     	je	convert_fp
                                                                      calculation_loop:
000064FD: A1 E4 A1 01 00                                        	mov	eax,[tagged_blocks]
00006502: 83 E8 0C                                              	sub	eax,0Ch
00006505: 39 F8                                                 	cmp	eax,edi
00006507: 0F 86 85 A3 FF FF                                     	jbe	out_of_memory
0000650D: AC                                                    	lods	byte [esi]
0000650E: 3C 01                                                 	cmp	al,1
00006510: 0F 84 0A 01 00 00                                     	je	get_byte_number
00006516: 3C 02                                                 	cmp	al,2
00006518: 0F 84 1E 01 00 00                                     	je	get_word_number
0000651E: 3C 04                                                 	cmp	al,4
00006520: 0F 84 21 01 00 00                                     	je	get_dword_number
00006526: 3C 08                                                 	cmp	al,8
00006528: 0F 84 1F 01 00 00                                     	je	get_qword_number
0000652E: 3C 0F                                                 	cmp	al,0Fh
00006530: 0F 84 76 A4 FF FF                                     	je	value_out_of_range
00006536: 3C 10                                                 	cmp	al,10h
00006538: 0F 84 13 01 00 00                                     	je	get_register
0000653E: 3C 11                                                 	cmp	al,11h
00006540: 0F 84 2B 01 00 00                                     	je	get_label
00006546: 3C 29                                                 	cmp	al,')'
00006548: 0F 84 BB 00 00 00                                     	je	expression_calculated
0000654E: 3C 5D                                                 	cmp	al,']'
00006550: 0F 84 B3 00 00 00                                     	je	expression_calculated
00006556: 3C 21                                                 	cmp	al,'!'
00006558: 0F 84 30 A4 FF FF                                     	je	invalid_expression
0000655E: 83 EF 14                                              	sub	edi,14h
00006561: 89 FB                                                 	mov	ebx,edi
00006563: 83 EB 14                                              	sub	ebx,14h
00006566: 3C F0                                                 	cmp	al,0F0h
00006568: 0F 84 9D 08 00 00                                     	je	calculate_rva
0000656E: 3C F1                                                 	cmp	al,0F1h
00006570: 0F 84 6E 09 00 00                                     	je	calculate_plt
00006576: 3C D0                                                 	cmp	al,0D0h
00006578: 0F 84 A4 07 00 00                                     	je	calculate_not
0000657E: 3C E0                                                 	cmp	al,0E0h
00006580: 0F 84 C2 07 00 00                                     	je	calculate_bsf
00006586: 3C E1                                                 	cmp	al,0E1h
00006588: 0F 84 F5 07 00 00                                     	je	calculate_bsr
0000658E: 3C 83                                                 	cmp	al,083h
00006590: 0F 84 2F 08 00 00                                     	je	calculate_neg
00006596: 66 8B 53 08                                           	mov	dx,[ebx+8]
0000659A: 66 0B 57 08                                           	or	dx,[edi+8]
0000659E: 3C 80                                                 	cmp	al,80h
000065A0: 0F 84 10 03 00 00                                     	je	calculate_add
000065A6: 3C 81                                                 	cmp	al,81h
000065A8: 0F 84 C6 03 00 00                                     	je	calculate_sub
000065AE: 8A 63 0C                                              	mov	ah,[ebx+12]
000065B1: 0A 67 0C                                              	or	ah,[edi+12]
000065B4: 74 05                                                 	jz	absolute_values_calculation
000065B6: E8 5D 0D 00 00                                        	call	recoverable_misuse
                                                                      absolute_values_calculation:
000065BB: 3C 90                                                 	cmp	al,90h
000065BD: 0F 84 40 04 00 00                                     	je	calculate_mul
000065C3: 3C 91                                                 	cmp	al,91h
000065C5: 0F 84 AB 05 00 00                                     	je	calculate_div
000065CB: 66 09 D2                                              	or	dx,dx
000065CE: 0F 85 BA A3 FF FF                                     	jnz	invalid_expression
000065D4: 3C A0                                                 	cmp	al,0A0h
000065D6: 0F 84 F9 05 00 00                                     	je	calculate_mod
000065DC: 3C B0                                                 	cmp	al,0B0h
000065DE: 0F 84 07 06 00 00                                     	je	calculate_and
000065E4: 3C B1                                                 	cmp	al,0B1h
000065E6: 0F 84 14 06 00 00                                     	je	calculate_or
000065EC: 3C B2                                                 	cmp	al,0B2h
000065EE: 0F 84 21 06 00 00                                     	je	calculate_xor
000065F4: 3C C0                                                 	cmp	al,0C0h
000065F6: 0F 84 40 06 00 00                                     	je	calculate_shl
000065FC: 3C C1                                                 	cmp	al,0C1h
000065FE: 0F 84 C8 06 00 00                                     	je	calculate_shr
00006604: E9 85 A3 FF FF                                        	jmp	invalid_expression
                                                                      expression_calculated:
00006609: 83 EF 14                                              	sub	edi,14h
0000660C: 80 3D B2 A2 01 00 00                                  	cmp	[value_undefined],0
00006613: 74 0A                                                 	je	expression_value_ok
00006615: 31 C0                                                 	xor	eax,eax
00006617: 89 07                                                 	mov	[edi],eax
00006619: 89 47 04                                              	mov	[edi+4],eax
0000661C: 89 47 0C                                              	mov	[edi+12],eax
                                                                      expression_value_ok:
0000661F: C3                                                    	ret
                                                                      get_byte_number:
00006620: 31 C0                                                 	xor	eax,eax
00006622: AC                                                    	lods	byte [esi]
00006623: AB                                                    	stos	dword [edi]
00006624: 30 C0                                                 	xor	al,al
00006626: AB                                                    	stos	dword [edi]
                                                                      got_number:
00006627: 66 83 27 00                                           	and	word [edi-8+8],0
0000662B: 66 83 67 04 00                                        	and	word [edi-8+12],0
00006630: 83 67 08 00                                           	and	dword [edi-8+16],0
00006634: 83 C7 0C                                              	add	edi,0Ch
00006637: E9 C1 FE FF FF                                        	jmp	calculation_loop
                                                                      get_word_number:
0000663C: 31 C0                                                 	xor	eax,eax
0000663E: 66 AD                                                 	lods	word [esi]
00006640: AB                                                    	stos	dword [edi]
00006641: 66 31 C0                                              	xor	ax,ax
00006644: AB                                                    	stos	dword [edi]
00006645: EB E0                                                 	jmp	got_number
                                                                      get_dword_number:
00006647: A5                                                    	movs	dword [edi],[esi]
00006648: 31 C0                                                 	xor	eax,eax
0000664A: AB                                                    	stos	dword [edi]
0000664B: EB DA                                                 	jmp	got_number
                                                                      get_qword_number:
0000664D: A5                                                    	movs	dword [edi],[esi]
0000664E: A5                                                    	movs	dword [edi],[esi]
0000664F: EB D6                                                 	jmp	got_number
                                                                      get_register:
00006651: C6 47 09 00                                           	mov	byte [edi+9],0
00006655: 66 83 67 0C 00                                        	and	word [edi+12],0
0000665A: AC                                                    	lods	byte [esi]
0000665B: 88 47 08                                              	mov	[edi+8],al
0000665E: C6 47 0A 01                                           	mov	byte [edi+10],1
00006662: 31 C0                                                 	xor	eax,eax
00006664: 89 47 10                                              	mov	[edi+16],eax
00006667: AB                                                    	stos	dword [edi]
00006668: AB                                                    	stos	dword [edi]
00006669: 83 C7 0C                                              	add	edi,0Ch
0000666C: E9 8C FE FF FF                                        	jmp	calculation_loop
                                                                      get_label:
00006671: 31 C0                                                 	xor	eax,eax
00006673: 89 47 08                                              	mov	[edi+8],eax
00006676: 89 47 0C                                              	mov	[edi+12],eax
00006679: 89 47 14                                              	mov	[edi+20],eax
0000667C: AD                                                    	lods	dword [esi]
0000667D: 83 F8 0F                                              	cmp	eax,0Fh
00006680: 0F 82 AC 01 00 00                                     	jb	predefined_label
00006686: 0F 84 D9 A3 FF FF                                     	je	reserved_word_used_as_symbol
0000668C: 89 C3                                                 	mov	ebx,eax
0000668E: 66 A1 52 A1 01 00                                     	mov	ax,[current_pass]
00006694: 66 89 43 12                                           	mov	[ebx+18],ax
00006698: 8A 4B 09                                              	mov	cl,[ebx+9]
0000669B: D0 E9                                                 	shr	cl,1
0000669D: 80 E1 01                                              	and	cl,1
000066A0: F6 D9                                                 	neg	cl
000066A2: 80 4B 08 08                                           	or	byte [ebx+8],8
000066A6: F6 43 08 01                                           	test	byte [ebx+8],1
000066AA: 0F 84 B5 01 00 00                                     	jz	label_undefined
000066B0: 66 3B 43 10                                           	cmp	ax,[ebx+16]
000066B4: 74 48                                                 	je	unadjusted_label
000066B6: F6 43 08 04                                           	test	byte [ebx+8],4
000066BA: 0F 85 9E 01 00 00                                     	jnz	label_out_of_scope
000066C0: F6 43 09 01                                           	test	byte [ebx+9],1
000066C4: 74 38                                                 	jz	unadjusted_label
000066C6: 8B 03                                                 	mov	eax,[ebx]
000066C8: 2B 05 1C A2 01 00                                     	sub	eax,dword [adjustment]
000066CE: AB                                                    	stos	dword [edi]
000066CF: 8B 43 04                                              	mov	eax,[ebx+4]
000066D2: 1B 05 20 A2 01 00                                     	sbb	eax,dword [adjustment+4]
000066D8: AB                                                    	stos	dword [edi]
000066D9: 1A 0D BF A2 01 00                                     	sbb	cl,[adjustment_sign]
000066DF: 88 4F 05                                              	mov	[edi-8+13],cl
000066E2: A1 1C A2 01 00                                        	mov	eax,dword [adjustment]
000066E7: 0A 05 BF A2 01 00                                     	or	al,[adjustment_sign]
000066ED: 0B 05 20 A2 01 00                                     	or	eax,dword [adjustment+4]
000066F3: 74 13                                                 	jz	got_label
000066F5: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
000066FC: EB 0A                                                 	jmp	got_label
                                                                      unadjusted_label:
000066FE: 8B 03                                                 	mov	eax,[ebx]
00006700: AB                                                    	stos	dword [edi]
00006701: 8B 43 04                                              	mov	eax,[ebx+4]
00006704: AB                                                    	stos	dword [edi]
00006705: 88 4F 05                                              	mov	[edi-8+13],cl
                                                                      got_label:
00006708: F6 43 09 04                                           	test	byte [ebx+9],4
0000670C: 0F 85 3E A3 FF FF                                     	jnz	invalid_use_of_symbol
00006712: E8 36 09 00 00                                        	call	store_label_reference
00006717: 8A 43 0B                                              	mov	al,[ebx+11]
0000671A: 88 47 04                                              	mov	[edi-8+12],al
0000671D: 8B 43 0C                                              	mov	eax,[ebx+12]
00006720: 89 07                                                 	mov	[edi-8+8],eax
00006722: 38 E0                                                 	cmp	al,ah
00006724: 75 10                                                 	jne	labeled_registers_ok
00006726: C1 E8 10                                              	shr	eax,16
00006729: 00 E0                                                 	add	al,ah
0000672B: 70 09                                                 	jo	labeled_registers_ok
0000672D: 30 E4                                                 	xor	ah,ah
0000672F: 66 89 47 02                                           	mov	[edi-8+10],ax
00006733: 88 67 01                                              	mov	[edi-8+9],ah
                                                                      labeled_registers_ok:
00006736: 8B 43 14                                              	mov	eax,[ebx+20]
00006739: 89 47 08                                              	mov	[edi-8+16],eax
0000673C: 83 C7 0C                                              	add	edi,0Ch
0000673F: 8A 43 0A                                              	mov	al,[ebx+10]
00006742: 08 C0                                                 	or	al,al
00006744: 0F 84 B3 FD FF FF                                     	jz	calculation_loop
0000674A: F6 05 99 A2 01 00 01                                  	test	[operand_flags],1
00006751: 0F 85 A6 FD FF FF                                     	jnz	calculation_loop
                                                                      check_size:
00006757: 86 05 98 A2 01 00                                     	xchg	[operand_size],al
0000675D: 08 C0                                                 	or	al,al
0000675F: 0F 84 98 FD FF FF                                     	jz	calculation_loop
00006765: 3A 05 98 A2 01 00                                     	cmp	al,[operand_size]
0000676B: 0F 85 E1 A1 FF FF                                     	jne	operand_sizes_do_not_match
00006771: E9 87 FD FF FF                                        	jmp	calculation_loop
                                                                      actual_file_offset_label:
00006776: A1 CC A1 01 00                                        	mov	eax,[undefined_data_end]
0000677B: 8B 2D C4 A1 01 00                                     	mov	ebp,[addressing_space]
00006781: 3E F6 45 0A 01                                        	test	byte [ds:ebp+0Ah],1
00006786: 75 08                                                 	jnz	use_undefined_data_offset
00006788: 3B 05 F0 A1 01 00                                     	cmp	eax,[current_offset]
0000678E: 75 1B                                                 	jne	use_current_offset
                                                                       use_undefined_data_offset:
00006790: A1 C8 A1 01 00                                        	mov	eax,[undefined_data_start]
00006795: EB 19                                                 	jmp	make_file_offset_label
                                                                      current_file_offset_label:
00006797: 8B 2D C4 A1 01 00                                     	mov	ebp,[addressing_space]
0000679D: 3E F6 45 0A 01                                        	test	byte [ds:ebp+0Ah],1
000067A2: 74 07                                                 	jz	use_current_offset
000067A4: A1 CC A1 01 00                                        	mov	eax,[undefined_data_end]
000067A9: EB 05                                                 	jmp	make_file_offset_label
                                                                       use_current_offset:
000067AB: A1 F0 A1 01 00                                        	mov	eax,[current_offset]
                                                                       make_file_offset_label:
000067B0: 80 3D BD A2 01 00 02                                  	cmp	[output_format],2
000067B7: 0F 83 93 A2 FF FF                                     	jae	invalid_use_of_symbol
000067BD: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
000067C3: EB 50                                                 	jmp	make_dword_label_value
                                                                      current_offset_label:
000067C5: A1 F0 A1 01 00                                        	mov	eax,[current_offset]
                                                                       make_current_offset_label:
000067CA: 31 D2                                                 	xor	edx,edx
000067CC: 30 ED                                                 	xor	ch,ch
000067CE: 8B 2D C4 A1 01 00                                     	mov	ebp,[addressing_space]
000067D4: 3E 2B 45 00                                           	sub	eax,[ds:ebp]
000067D8: 3E 1B 55 04                                           	sbb	edx,[ds:ebp+4]
000067DC: 3E 1A 6D 08                                           	sbb	ch,[ds:ebp+8]
000067E0: 7A 05                                                 	jp	current_offset_label_ok
000067E2: E8 0A 0B 00 00                                        	call	recoverable_overflow
                                                                       current_offset_label_ok:
000067E7: AB                                                    	stos	dword [edi]
000067E8: 89 D0                                                 	mov	eax,edx
000067EA: AB                                                    	stos	dword [edi]
000067EB: 3E 8B 45 10                                           	mov	eax,[ds:ebp+10h]
000067EF: AB                                                    	stos	dword [edi]
000067F0: 3E 8A 4D 09                                           	mov	cl,[ds:ebp+9]
000067F4: 66 89 0F                                              	mov	[edi-12+12],cx
000067F7: 3E 8B 45 14                                           	mov	eax,[ds:ebp+14h]
000067FB: 89 47 04                                              	mov	[edi-12+16],eax
000067FE: 83 C7 08                                              	add	edi,8
00006801: E9 F7 FC FF FF                                        	jmp	calculation_loop
                                                                      org_origin_label:
00006806: A1 C4 A1 01 00                                        	mov	eax,[addressing_space]
0000680B: 8B 40 18                                              	mov	eax,[eax+18h]
0000680E: EB BA                                                 	jmp	make_current_offset_label
                                                                      counter_label:
00006810: A1 D0 A1 01 00                                        	mov	eax,[counter]
                                                                      make_dword_label_value:
00006815: AB                                                    	stos	dword [edi]
00006816: 31 C0                                                 	xor	eax,eax
00006818: AB                                                    	stos	dword [edi]
00006819: 83 C7 0C                                              	add	edi,0Ch
0000681C: E9 DC FC FF FF                                        	jmp	calculation_loop
                                                                      timestamp_label:
00006821: E8 97 9E FF FF                                        	call	make_timestamp
                                                                      make_qword_label_value:
00006826: AB                                                    	stos	dword [edi]
00006827: 89 D0                                                 	mov	eax,edx
00006829: AB                                                    	stos	dword [edi]
0000682A: 83 C7 0C                                              	add	edi,0Ch
0000682D: E9 CB FC FF FF                                        	jmp	calculation_loop
                                                                      predefined_label:
00006832: 09 C0                                                 	or	eax,eax
00006834: 74 8F                                                 	jz	current_offset_label
00006836: 83 F8 01                                              	cmp	eax,1
00006839: 74 D5                                                 	je	counter_label
0000683B: 83 F8 02                                              	cmp	eax,2
0000683E: 74 E1                                                 	je	timestamp_label
00006840: 83 F8 03                                              	cmp	eax,3
00006843: 74 C1                                                 	je	org_origin_label
00006845: 83 F8 04                                              	cmp	eax,4
00006848: 0F 84 49 FF FF FF                                     	je	current_file_offset_label
0000684E: 83 F8 05                                              	cmp	eax,5
00006851: 0F 84 1F FF FF FF                                     	je	actual_file_offset_label
00006857: BA A2 09 00 00                                        	mov	edx,invalid_value
0000685C: EB 0C                                                 	jmp	error_undefined
                                                                      label_out_of_scope:
0000685E: BA 0D 0A 00 00                                        	mov	edx,symbol_out_of_scope
00006863: EB 05                                                 	jmp	error_undefined
                                                                      label_undefined:
00006865: BA B6 09 00 00                                        	mov	edx,undefined_symbol
                                                                      error_undefined:
0000686A: 66 83 3D 52 A1 01 00 01                               	cmp	[current_pass],1
00006872: 77 07                                                 	ja	undefined_value
                                                                      force_next_pass:
00006874: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      undefined_value:
0000687B: 80 0D B2 A2 01 00 FF                                  	or	[value_undefined],-1
00006882: 66 83 67 0C 00                                        	and	word [edi+12],0
00006887: 31 C0                                                 	xor	eax,eax
00006889: AB                                                    	stos	dword [edi]
0000688A: AB                                                    	stos	dword [edi]
0000688B: 83 C7 0C                                              	add	edi,0Ch
0000688E: 83 3D DC A1 01 00 00                                  	cmp	[error_line],0
00006895: 0F 85 62 FC FF FF                                     	jne	calculation_loop
0000689B: A1 74 A1 01 00                                        	mov	eax,[current_line]
000068A0: A3 DC A1 01 00                                        	mov	[error_line],eax
000068A5: 89 15 E0 A1 01 00                                     	mov	[error],edx
000068AB: 89 1D D8 A1 01 00                                     	mov	[error_info],ebx
000068B1: E9 47 FC FF FF                                        	jmp	calculation_loop
                                                                      calculate_add:
000068B6: 30 E4                                                 	xor	ah,ah
000068B8: 8A 63 0C                                              	mov	ah,[ebx+12]
000068BB: 8A 47 0C                                              	mov	al,[edi+12]
000068BE: 08 C0                                                 	or	al,al
000068C0: 74 1F                                                 	jz	add_values
000068C2: 08 E4                                                 	or	ah,ah
000068C4: 74 13                                                 	jz	add_relocatable
000068C6: 00 C4                                                 	add	ah,al
000068C8: 75 08                                                 	jnz	invalid_add
000068CA: 8B 4F 10                                              	mov	ecx,[edi+16]
000068CD: 3B 4B 10                                              	cmp	ecx,[ebx+16]
000068D0: 74 0F                                                 	je	add_values
                                                                      invalid_add:
000068D2: E8 41 0A 00 00                                        	call	recoverable_misuse
000068D7: EB 08                                                 	jmp	add_values
                                                                      add_relocatable:
000068D9: 88 C4                                                 	mov	ah,al
000068DB: 8B 4F 10                                              	mov	ecx,[edi+16]
000068DE: 89 4B 10                                              	mov	[ebx+16],ecx
                                                                      add_values:
000068E1: 88 63 0C                                              	mov	[ebx+12],ah
000068E4: 8B 07                                                 	mov	eax,[edi]
000068E6: 01 03                                                 	add	[ebx],eax
000068E8: 8B 47 04                                              	mov	eax,[edi+4]
000068EB: 11 43 04                                              	adc	[ebx+4],eax
000068EE: 8A 47 0D                                              	mov	al,[edi+13]
000068F1: 10 43 0D                                              	adc	[ebx+13],al
000068F4: 7A 05                                                 	jp	add_sign_ok
000068F6: E8 F6 09 00 00                                        	call	recoverable_overflow
                                                                      add_sign_ok:
000068FB: 66 09 D2                                              	or	dx,dx
000068FE: 0F 84 F9 FB FF FF                                     	jz	calculation_loop
00006904: 56                                                    	push	esi
00006905: 89 DE                                                 	mov	esi,ebx
00006907: 8A 4F 0A                                              	mov	cl,[edi+10]
0000690A: 8A 47 08                                              	mov	al,[edi+8]
0000690D: E8 11 00 00 00                                        	call	add_register
00006912: 8A 4F 0B                                              	mov	cl,[edi+11]
00006915: 8A 47 09                                              	mov	al,[edi+9]
00006918: E8 06 00 00 00                                        	call	add_register
0000691D: 5E                                                    	pop	esi
0000691E: E9 DA FB FF FF                                        	jmp	calculation_loop
                                                                      add_register:
00006923: 08 C0                                                 	or	al,al
00006925: 74 47                                                 	jz	add_register_done
                                                                      add_register_start:
00006927: 38 46 08                                              	cmp	[esi+8],al
0000692A: 75 10                                                 	jne	add_in_second_slot
0000692C: 00 4E 0A                                              	add	[esi+10],cl
0000692F: 0F 80 77 A0 FF FF                                     	jo	value_out_of_range
00006935: 75 37                                                 	jnz	add_register_done
00006937: C6 46 08 00                                           	mov	byte [esi+8],0
0000693B: C3                                                    	ret
                                                                      add_in_second_slot:
0000693C: 38 46 09                                              	cmp	[esi+9],al
0000693F: 75 10                                                 	jne	create_in_first_slot
00006941: 00 4E 0B                                              	add	[esi+11],cl
00006944: 0F 80 62 A0 FF FF                                     	jo	value_out_of_range
0000694A: 75 22                                                 	jnz	add_register_done
0000694C: C6 46 09 00                                           	mov	byte [esi+9],0
00006950: C3                                                    	ret
                                                                      create_in_first_slot:
00006951: 80 7E 08 00                                           	cmp	byte [esi+8],0
00006955: 75 07                                                 	jne	create_in_second_slot
00006957: 88 46 08                                              	mov	[esi+8],al
0000695A: 88 4E 0A                                              	mov	[esi+10],cl
0000695D: C3                                                    	ret
                                                                      create_in_second_slot:
0000695E: 80 7E 09 00                                           	cmp	byte [esi+9],0
00006962: 0F 85 26 A0 FF FF                                     	jne	invalid_expression
00006968: 88 46 09                                              	mov	[esi+9],al
0000696B: 88 4E 0B                                              	mov	[esi+11],cl
                                                                      add_register_done:
0000696E: C3                                                    	ret
                                                                      out_of_range:
0000696F: E9 89 FB FF FF                                        	jmp	calculation_loop
                                                                      calculate_sub:
00006974: 30 E4                                                 	xor	ah,ah
00006976: 8A 63 0C                                              	mov	ah,[ebx+12]
00006979: 8A 47 0C                                              	mov	al,[edi+12]
0000697C: 08 C0                                                 	or	al,al
0000697E: 74 23                                                 	jz	sub_values
00006980: 08 E4                                                 	or	ah,ah
00006982: 74 15                                                 	jz	negate_relocatable
00006984: 38 E0                                                 	cmp	al,ah
00006986: 75 0A                                                 	jne	invalid_sub
00006988: 30 E4                                                 	xor	ah,ah
0000698A: 8B 4F 10                                              	mov	ecx,[edi+16]
0000698D: 3B 4B 10                                              	cmp	ecx,[ebx+16]
00006990: 74 11                                                 	je	sub_values
                                                                      invalid_sub:
00006992: E8 81 09 00 00                                        	call	recoverable_misuse
00006997: EB 0A                                                 	jmp	sub_values
                                                                      negate_relocatable:
00006999: F6 D8                                                 	neg	al
0000699B: 88 C4                                                 	mov	ah,al
0000699D: 8B 4F 10                                              	mov	ecx,[edi+16]
000069A0: 89 4B 10                                              	mov	[ebx+16],ecx
                                                                      sub_values:
000069A3: 88 63 0C                                              	mov	[ebx+12],ah
000069A6: 8B 07                                                 	mov	eax,[edi]
000069A8: 29 03                                                 	sub	[ebx],eax
000069AA: 8B 47 04                                              	mov	eax,[edi+4]
000069AD: 19 43 04                                              	sbb	[ebx+4],eax
000069B0: 8A 47 0D                                              	mov	al,[edi+13]
000069B3: 18 43 0D                                              	sbb	[ebx+13],al
000069B6: 7A 0E                                                 	jp	sub_sign_ok
000069B8: 83 3D DC A1 01 00 00                                  	cmp	[error_line],0
000069BF: 75 05                                                 	jne	sub_sign_ok
000069C1: E8 2B 09 00 00                                        	call	recoverable_overflow
                                                                      sub_sign_ok:
000069C6: 66 09 D2                                              	or	dx,dx
000069C9: 0F 84 2E FB FF FF                                     	jz	calculation_loop
000069CF: 56                                                    	push	esi
000069D0: 89 DE                                                 	mov	esi,ebx
000069D2: 8A 4F 0A                                              	mov	cl,[edi+10]
000069D5: 8A 47 08                                              	mov	al,[edi+8]
000069D8: E8 11 00 00 00                                        	call	sub_register
000069DD: 8A 4F 0B                                              	mov	cl,[edi+11]
000069E0: 8A 47 09                                              	mov	al,[edi+9]
000069E3: E8 06 00 00 00                                        	call	sub_register
000069E8: 5E                                                    	pop	esi
000069E9: E9 0F FB FF FF                                        	jmp	calculation_loop
                                                                      sub_register:
000069EE: 08 C0                                                 	or	al,al
000069F0: 0F 84 78 FF FF FF                                     	jz	add_register_done
000069F6: F6 D9                                                 	neg	cl
000069F8: 0F 80 AE 9F FF FF                                     	jo	value_out_of_range
000069FE: E9 24 FF FF FF                                        	jmp	add_register_start
                                                                      calculate_mul:
00006A03: 66 09 D2                                              	or	dx,dx
00006A06: 74 1A                                                 	jz	mul_start
00006A08: 66 83 7B 08 00                                        	cmp	word [ebx+8],0
00006A0D: 75 13                                                 	jne	mul_start
00006A0F: 31 C9                                                 	xor	ecx,ecx
                                                                      swap_values:
00006A11: 8B 04 0B                                              	mov	eax,[ebx+ecx]
00006A14: 87 04 0F                                              	xchg	eax,[edi+ecx]
00006A17: 89 04 0B                                              	mov	[ebx+ecx],eax
00006A1A: 83 C1 04                                              	add	ecx,4
00006A1D: 83 F9 10                                              	cmp	ecx,16
00006A20: 72 EF                                                 	jb	swap_values
                                                                      mul_start:
00006A22: 56 52                                                 	push	esi edx
00006A24: 89 DE                                                 	mov	esi,ebx
00006A26: 30 DB                                                 	xor	bl,bl
00006A28: 80 7E 0D 00                                           	cmp	byte [esi+13],0
00006A2C: 74 1F                                                 	je	mul_first_sign_ok
00006A2E: 80 F3 FF                                              	xor	bl,-1
00006A31: 8B 06                                                 	mov	eax,[esi]
00006A33: 8B 56 04                                              	mov	edx,[esi+4]
00006A36: F7 D0                                                 	not	eax
00006A38: F7 D2                                                 	not	edx
00006A3A: 83 C0 01                                              	add	eax,1
00006A3D: 83 D2 00                                              	adc	edx,0
00006A40: 89 06                                                 	mov	[esi],eax
00006A42: 89 56 04                                              	mov	[esi+4],edx
00006A45: 09 D0                                                 	or	eax,edx
00006A47: 0F 84 05 01 00 00                                     	jz	mul_overflow
                                                                      mul_first_sign_ok:
00006A4D: 80 7F 0D 00                                           	cmp	byte [edi+13],0
00006A51: 74 3D                                                 	je	mul_second_sign_ok
00006A53: 80 F3 FF                                              	xor	bl,-1
00006A56: 80 7E 08 00                                           	cmp	byte [esi+8],0
00006A5A: 74 09                                                 	je	mul_first_register_sign_ok
00006A5C: F6 5E 0A                                              	neg	byte [esi+10]
00006A5F: 0F 80 29 9F FF FF                                     	jo	invalid_expression
                                                                      mul_first_register_sign_ok:
00006A65: 80 7E 09 00                                           	cmp	byte [esi+9],0
00006A69: 74 09                                                 	je	mul_second_register_sign_ok
00006A6B: F6 5E 0B                                              	neg	byte [esi+11]
00006A6E: 0F 80 1A 9F FF FF                                     	jo	invalid_expression
                                                                      mul_second_register_sign_ok:
00006A74: 8B 07                                                 	mov	eax,[edi]
00006A76: 8B 57 04                                              	mov	edx,[edi+4]
00006A79: F7 D0                                                 	not	eax
00006A7B: F7 D2                                                 	not	edx
00006A7D: 83 C0 01                                              	add	eax,1
00006A80: 83 D2 00                                              	adc	edx,0
00006A83: 89 07                                                 	mov	[edi],eax
00006A85: 89 57 04                                              	mov	[edi+4],edx
00006A88: 09 D0                                                 	or	eax,edx
00006A8A: 0F 84 C2 00 00 00                                     	jz	mul_overflow
                                                                      mul_second_sign_ok:
00006A90: 83 7E 04 00                                           	cmp	dword [esi+4],0
00006A94: 74 0C                                                 	jz	mul_numbers
00006A96: 83 7F 04 00                                           	cmp	dword [edi+4],0
00006A9A: 74 06                                                 	jz	mul_numbers
00006A9C: 0F 85 B0 00 00 00                                     	jnz	mul_overflow
                                                                      mul_numbers:
00006AA2: 8B 46 04                                              	mov	eax,[esi+4]
00006AA5: F7 27                                                 	mul	dword [edi]
00006AA7: 09 D2                                                 	or	edx,edx
00006AA9: 0F 85 A3 00 00 00                                     	jnz	mul_overflow
00006AAF: 89 C1                                                 	mov	ecx,eax
00006AB1: 8B 06                                                 	mov	eax,[esi]
00006AB3: F7 67 04                                              	mul	dword [edi+4]
00006AB6: 09 D2                                                 	or	edx,edx
00006AB8: 0F 85 94 00 00 00                                     	jnz	mul_overflow
00006ABE: 01 C1                                                 	add	ecx,eax
00006AC0: 0F 82 8C 00 00 00                                     	jc	mul_overflow
00006AC6: 8B 06                                                 	mov	eax,[esi]
00006AC8: F7 27                                                 	mul	dword [edi]
00006ACA: 01 CA                                                 	add	edx,ecx
00006ACC: 0F 82 80 00 00 00                                     	jc	mul_overflow
00006AD2: 89 06                                                 	mov	[esi],eax
00006AD4: 89 56 04                                              	mov	[esi+4],edx
00006AD7: 08 DB                                                 	or	bl,bl
00006AD9: 74 15                                                 	jz	mul_ok
00006ADB: F7 D0                                                 	not	eax
00006ADD: F7 D2                                                 	not	edx
00006ADF: 83 C0 01                                              	add	eax,1
00006AE2: 83 D2 00                                              	adc	edx,0
00006AE5: 89 06                                                 	mov	[esi],eax
00006AE7: 89 56 04                                              	mov	[esi+4],edx
00006AEA: 09 D0                                                 	or	eax,edx
00006AEC: 75 02                                                 	jnz	mul_ok
00006AEE: F6 D3                                                 	not	bl
                                                                      mul_ok:
00006AF0: 88 5E 0D                                              	mov	[esi+13],bl
00006AF3: 5A                                                    	pop	edx
00006AF4: 66 09 D2                                              	or	dx,dx
00006AF7: 74 53                                                 	jz	mul_calculated
00006AF9: 66 83 7F 08 00                                        	cmp	word [edi+8],0
00006AFE: 0F 85 9E 9E FF FF                                     	jne	invalid_value
00006B04: 80 7E 08 00                                           	cmp	byte [esi+8],0
00006B08: 74 1E                                                 	je	mul_first_register_ok
00006B0A: E8 4F 00 00 00                                        	call	get_byte_scale
00006B0F: F6 6E 0A                                              	imul	byte [esi+10]
00006B12: 88 E2                                                 	mov	dl,ah
00006B14: 66 98                                                 	cbw
00006B16: 38 D4                                                 	cmp	ah,dl
00006B18: 0F 85 8E 9E FF FF                                     	jne	value_out_of_range
00006B1E: 88 46 0A                                              	mov	[esi+10],al
00006B21: 08 C0                                                 	or	al,al
00006B23: 75 03                                                 	jnz	mul_first_register_ok
00006B25: 88 46 08                                              	mov	[esi+8],al
                                                                      mul_first_register_ok:
00006B28: 80 7E 09 00                                           	cmp	byte [esi+9],0
00006B2C: 74 1E                                                 	je	mul_calculated
00006B2E: E8 2B 00 00 00                                        	call	get_byte_scale
00006B33: F6 6E 0B                                              	imul	byte [esi+11]
00006B36: 88 E2                                                 	mov	dl,ah
00006B38: 66 98                                                 	cbw
00006B3A: 38 D4                                                 	cmp	ah,dl
00006B3C: 0F 85 6A 9E FF FF                                     	jne	value_out_of_range
00006B42: 88 46 0B                                              	mov	[esi+11],al
00006B45: 08 C0                                                 	or	al,al
00006B47: 75 03                                                 	jnz	mul_calculated
00006B49: 88 46 09                                              	mov	[esi+9],al
                                                                      mul_calculated:
00006B4C: 5E                                                    	pop	esi
00006B4D: E9 AB F9 FF FF                                        	jmp	calculation_loop
                                                                      mul_overflow:
00006B52: 5A 5E                                                 	pop	edx esi
00006B54: E8 98 07 00 00                                        	call	recoverable_overflow
00006B59: E9 9F F9 FF FF                                        	jmp	calculation_loop
                                                                      get_byte_scale:
00006B5E: 8A 07                                                 	mov	al,[edi]
00006B60: 66 98                                                 	cbw
00006B62: 98                                                    	cwde
00006B63: 99                                                    	cdq
00006B64: 3B 57 04                                              	cmp	edx,[edi+4]
00006B67: 0F 85 3F 9E FF FF                                     	jne	value_out_of_range
00006B6D: 3B 07                                                 	cmp	eax,[edi]
00006B6F: 0F 85 37 9E FF FF                                     	jne	value_out_of_range
00006B75: C3                                                    	ret
                                                                      calculate_div:
00006B76: 56 52                                                 	push	esi edx
00006B78: 89 DE                                                 	mov	esi,ebx
00006B7A: E8 B5 03 00 00                                        	call	div_64
00006B7F: 5A                                                    	pop	edx
00006B80: 66 09 D2                                              	or	dx,dx
00006B83: 74 4A                                                 	jz	div_calculated
00006B85: 80 7E 08 00                                           	cmp	byte [esi+8],0
00006B89: 74 1F                                                 	je	div_first_register_ok
00006B8B: E8 CE FF FF FF                                        	call	get_byte_scale
00006B90: 08 C0                                                 	or	al,al
00006B92: 0F 84 14 9E FF FF                                     	jz	value_out_of_range
00006B98: 8A 46 0A                                              	mov	al,[esi+10]
00006B9B: 66 98                                                 	cbw
00006B9D: F6 3F                                                 	idiv	byte [edi]
00006B9F: 08 E4                                                 	or	ah,ah
00006BA1: 0F 85 A9 9E FF FF                                     	jnz	invalid_use_of_symbol
00006BA7: 88 46 0A                                              	mov	[esi+10],al
                                                                      div_first_register_ok:
00006BAA: 80 7E 09 00                                           	cmp	byte [esi+9],0
00006BAE: 74 1F                                                 	je	div_calculated
00006BB0: E8 A9 FF FF FF                                        	call	get_byte_scale
00006BB5: 08 C0                                                 	or	al,al
00006BB7: 0F 84 EF 9D FF FF                                     	jz	value_out_of_range
00006BBD: 8A 46 0B                                              	mov	al,[esi+11]
00006BC0: 66 98                                                 	cbw
00006BC2: F6 3F                                                 	idiv	byte [edi]
00006BC4: 08 E4                                                 	or	ah,ah
00006BC6: 0F 85 84 9E FF FF                                     	jnz	invalid_use_of_symbol
00006BCC: 88 46 0B                                              	mov	[esi+11],al
                                                                      div_calculated:
00006BCF: 5E                                                    	pop	esi
00006BD0: E9 28 F9 FF FF                                        	jmp	calculation_loop
                                                                      calculate_mod:
00006BD5: 56                                                    	push	esi
00006BD6: 89 DE                                                 	mov	esi,ebx
00006BD8: E8 57 03 00 00                                        	call	div_64
00006BDD: 89 06                                                 	mov	[esi],eax
00006BDF: 89 56 04                                              	mov	[esi+4],edx
00006BE2: 88 7E 0D                                              	mov	[esi+13],bh
00006BE5: 5E                                                    	pop	esi
00006BE6: E9 12 F9 FF FF                                        	jmp	calculation_loop
                                                                      calculate_and:
00006BEB: 8B 07                                                 	mov	eax,[edi]
00006BED: 8B 57 04                                              	mov	edx,[edi+4]
00006BF0: 8A 4F 0D                                              	mov	cl,[edi+13]
00006BF3: 21 03                                                 	and	[ebx],eax
00006BF5: 21 53 04                                              	and	[ebx+4],edx
00006BF8: 20 4B 0D                                              	and	[ebx+13],cl
00006BFB: E9 FD F8 FF FF                                        	jmp	calculation_loop
                                                                      calculate_or:
00006C00: 8B 07                                                 	mov	eax,[edi]
00006C02: 8B 57 04                                              	mov	edx,[edi+4]
00006C05: 8A 4F 0D                                              	mov	cl,[edi+13]
00006C08: 09 03                                                 	or	[ebx],eax
00006C0A: 09 53 04                                              	or	[ebx+4],edx
00006C0D: 08 4B 0D                                              	or	[ebx+13],cl
00006C10: E9 E8 F8 FF FF                                        	jmp	calculation_loop
                                                                      calculate_xor:
00006C15: 8B 07                                                 	mov	eax,[edi]
00006C17: 8B 57 04                                              	mov	edx,[edi+4]
00006C1A: 8A 4F 0D                                              	mov	cl,[edi+13]
00006C1D: 31 03                                                 	xor	[ebx],eax
00006C1F: 31 53 04                                              	xor	[ebx+4],edx
00006C22: 30 4B 0D                                              	xor	[ebx+13],cl
00006C25: E9 D3 F8 FF FF                                        	jmp	calculation_loop
                                                                      shr_negative:
00006C2A: C6 47 0D 00                                           	mov	byte [edi+13],0
00006C2E: F7 17                                                 	not	dword [edi]
00006C30: F7 57 04                                              	not	dword [edi+4]
00006C33: 83 07 01                                              	add	dword [edi],1
00006C36: 83 57 04 00                                           	adc	dword [edi+4],0
00006C3A: 72 32                                                 	jc	shl_over
                                                                      calculate_shl:
00006C3C: 80 7F 0D 00                                           	cmp	byte [edi+13],0
00006C40: 75 75                                                 	jne	shl_negative
00006C42: 8B 53 04                                              	mov	edx,[ebx+4]
00006C45: 8B 03                                                 	mov	eax,[ebx]
00006C47: 83 7F 04 00                                           	cmp	dword [edi+4],0
00006C4B: 75 21                                                 	jne	shl_over
00006C4D: 0F BE 4B 0D                                           	movsx	ecx,byte [ebx+13]
00006C51: 87 0F                                                 	xchg	ecx,[edi]
00006C53: 83 F9 40                                              	cmp	ecx,64
00006C56: 74 1C                                                 	je	shl_max
00006C58: 77 14                                                 	ja	shl_over
00006C5A: 83 F9 20                                              	cmp	ecx,32
00006C5D: 73 2D                                                 	jae	shl_high
00006C5F: 0F A5 17                                              	shld	[edi],edx,cl
00006C62: 0F A5 C2                                              	shld	edx,eax,cl
00006C65: D3 E0                                                 	shl	eax,cl
00006C67: 89 03                                                 	mov	[ebx],eax
00006C69: 89 53 04                                              	mov	[ebx+4],edx
00006C6C: EB 33                                                 	jmp	shl_done
                                                                      shl_over:
00006C6E: 80 7B 0D 00                                           	cmp	byte [ebx+13],0
00006C72: 75 39                                                 	jne	shl_overflow
                                                                      shl_max:
00006C74: 0F BE 4B 0D                                           	movsx	ecx,byte [ebx+13]
00006C78: 39 C8                                                 	cmp	eax,ecx
00006C7A: 75 31                                                 	jne	shl_overflow
00006C7C: 39 CA                                                 	cmp	edx,ecx
00006C7E: 75 2D                                                 	jne	shl_overflow
00006C80: 31 C0                                                 	xor	eax,eax
00006C82: 89 03                                                 	mov	[ebx],eax
00006C84: 89 43 04                                              	mov	[ebx+4],eax
00006C87: E9 71 F8 FF FF                                        	jmp	calculation_loop
                                                                      shl_high:
00006C8C: 80 E9 20                                              	sub	cl,32
00006C8F: 0F A5 17                                              	shld	[edi],edx,cl
00006C92: 0F A5 C2                                              	shld	edx,eax,cl
00006C95: D3 E0                                                 	shl	eax,cl
00006C97: 89 43 04                                              	mov	[ebx+4],eax
00006C9A: 83 23 00                                              	and	dword [ebx],0
00006C9D: 3B 17                                                 	cmp	edx,[edi]
00006C9F: 75 0C                                                 	jne	shl_overflow
                                                                      shl_done:
00006CA1: 0F BE 43 0D                                           	movsx	eax,byte [ebx+13]
00006CA5: 3B 07                                                 	cmp	eax,[edi]
00006CA7: 0F 84 50 F8 FF FF                                     	je	calculation_loop
                                                                      shl_overflow:
00006CAD: E8 3F 06 00 00                                        	call	recoverable_overflow
00006CB2: E9 46 F8 FF FF                                        	jmp	calculation_loop
                                                                      shl_negative:
00006CB7: C6 47 0D 00                                           	mov	byte [edi+13],0
00006CBB: F7 17                                                 	not	dword [edi]
00006CBD: F7 57 04                                              	not	dword [edi+4]
00006CC0: 83 07 01                                              	add	dword [edi],1
00006CC3: 83 57 04 00                                           	adc	dword [edi+4],0
00006CC7: 73 03                                                 	jnc	calculate_shr
00006CC9: FF 4F 04                                              	dec	dword [edi+4]
                                                                      calculate_shr:
00006CCC: 80 7F 0D 00                                           	cmp	byte [edi+13],0
00006CD0: 0F 85 54 FF FF FF                                     	jne	shr_negative
00006CD6: 8B 53 04                                              	mov	edx,[ebx+4]
00006CD9: 8B 03                                                 	mov	eax,[ebx]
00006CDB: 83 7F 04 00                                           	cmp	dword [edi+4],0
00006CDF: 75 33                                                 	jne	shr_over
00006CE1: 8B 0F                                                 	mov	ecx,[edi]
00006CE3: 83 F9 40                                              	cmp	ecx,64
00006CE6: 73 2C                                                 	jae	shr_over
00006CE8: 56                                                    	push	esi
00006CE9: 0F BE 73 0D                                           	movsx	esi,byte [ebx+13]
00006CED: 83 F9 20                                              	cmp	ecx,32
00006CF0: 73 11                                                 	jae	shr_high
00006CF2: 0F AD D0                                              	shrd	eax,edx,cl
00006CF5: 0F AD F2                                              	shrd	edx,esi,cl
00006CF8: 89 03                                                 	mov	[ebx],eax
00006CFA: 89 53 04                                              	mov	[ebx+4],edx
00006CFD: 5E                                                    	pop	esi
00006CFE: E9 FA F7 FF FF                                        	jmp	calculation_loop
                                                                      shr_high:
00006D03: 80 E9 20                                              	sub	cl,32
00006D06: 0F AD F2                                              	shrd	edx,esi,cl
00006D09: 89 13                                                 	mov	[ebx],edx
00006D0B: 89 73 04                                              	mov	[ebx+4],esi
00006D0E: 5E                                                    	pop	esi
00006D0F: E9 E9 F7 FF FF                                        	jmp	calculation_loop
                                                                      shr_over:
00006D14: 0F BE 43 0D                                           	movsx	eax,byte [ebx+13]
00006D18: 89 03                                                 	mov	dword [ebx],eax
00006D1A: 89 43 04                                              	mov	dword [ebx+4],eax
00006D1D: E9 DB F7 FF FF                                        	jmp	calculation_loop
                                                                      calculate_not:
00006D22: 66 83 7F 08 00                                        	cmp	word [edi+8],0
00006D27: 0F 85 61 9C FF FF                                     	jne	invalid_expression
00006D2D: 80 7F 0C 00                                           	cmp	byte [edi+12],0
00006D31: 74 05                                                 	je	not_ok
00006D33: E8 E0 05 00 00                                        	call	recoverable_misuse
                                                                      not_ok:
00006D38: F7 17                                                 	not	dword [edi]
00006D3A: F7 57 04                                              	not	dword [edi+4]
00006D3D: F6 57 0D                                              	not	byte [edi+13]
00006D40: 83 C7 14                                              	add	edi,14h
00006D43: E9 B5 F7 FF FF                                        	jmp	calculation_loop
                                                                      calculate_bsf:
00006D48: 66 83 7F 08 00                                        	cmp	word [edi+8],0
00006D4D: 0F 85 3B 9C FF FF                                     	jne	invalid_expression
00006D53: 80 7F 0C 00                                           	cmp	byte [edi+12],0
00006D57: 74 05                                                 	je	bsf_ok
00006D59: E8 BA 05 00 00                                        	call	recoverable_misuse
                                                                      bsf_ok:
00006D5E: 31 C9                                                 	xor	ecx,ecx
00006D60: 0F BC 07                                              	bsf	eax,[edi]
00006D63: 75 4C                                                 	jnz	finish_bs
00006D65: B9 20 00 00 00                                        	mov	ecx,32
00006D6A: 0F BC 47 04                                           	bsf	eax,[edi+4]
00006D6E: 75 41                                                 	jnz	finish_bs
00006D70: 80 7F 0D 00                                           	cmp	byte [edi+13],0
00006D74: 75 3B                                                 	jne	finish_bs
                                                                      bs_overflow:
00006D76: E8 76 05 00 00                                        	call	recoverable_overflow
00006D7B: 83 C7 14                                              	add	edi,14h
00006D7E: E9 7A F7 FF FF                                        	jmp	calculation_loop
                                                                      calculate_bsr:
00006D83: 66 83 7F 08 00                                        	cmp	word [edi+8],0
00006D88: 0F 85 00 9C FF FF                                     	jne	invalid_expression
00006D8E: 80 7F 0C 00                                           	cmp	byte [edi+12],0
00006D92: 74 05                                                 	je	bsr_ok
00006D94: E8 7F 05 00 00                                        	call	recoverable_misuse
                                                                      bsr_ok:
00006D99: 80 7F 0D 00                                           	cmp	byte [edi+13],0
00006D9D: 75 D7                                                 	jne	bs_overflow
00006D9F: B9 20 00 00 00                                        	mov	ecx,32
00006DA4: 0F BD 47 04                                           	bsr	eax,[edi+4]
00006DA8: 75 07                                                 	jnz	finish_bs
00006DAA: 31 C9                                                 	xor	ecx,ecx
00006DAC: 0F BD 07                                              	bsr	eax,[edi]
00006DAF: 74 C5                                                 	jz	bs_overflow
                                                                      finish_bs:
00006DB1: 01 C8                                                 	add	eax,ecx
00006DB3: 31 D2                                                 	xor	edx,edx
00006DB5: 89 07                                                 	mov	[edi],eax
00006DB7: 89 57 04                                              	mov	[edi+4],edx
00006DBA: 88 57 0D                                              	mov	[edi+13],dl
00006DBD: 83 C7 14                                              	add	edi,14h
00006DC0: E9 38 F7 FF FF                                        	jmp	calculation_loop
                                                                      calculate_neg:
00006DC5: 80 7F 08 00                                           	cmp	byte [edi+8],0
00006DC9: 74 09                                                 	je	neg_first_register_ok
00006DCB: F6 5F 0A                                              	neg	byte [edi+10]
00006DCE: 0F 80 BA 9B FF FF                                     	jo	invalid_expression
                                                                      neg_first_register_ok:
00006DD4: 80 7F 09 00                                           	cmp	byte [edi+9],0
00006DD8: 74 09                                                 	je	neg_second_register_ok
00006DDA: F6 5F 0B                                              	neg	byte [edi+11]
00006DDD: 0F 80 AB 9B FF FF                                     	jo	invalid_expression
                                                                      neg_second_register_ok:
00006DE3: F6 5F 0C                                              	neg	byte [edi+12]
00006DE6: 31 C0                                                 	xor	eax,eax
00006DE8: 31 D2                                                 	xor	edx,edx
00006DEA: 30 C9                                                 	xor	cl,cl
00006DEC: 87 07                                                 	xchg	eax,[edi]
00006DEE: 87 57 04                                              	xchg	edx,[edi+4]
00006DF1: 86 4F 0D                                              	xchg	cl,[edi+13]
00006DF4: 29 07                                                 	sub	[edi],eax
00006DF6: 19 57 04                                              	sbb	[edi+4],edx
00006DF9: 18 4F 0D                                              	sbb	[edi+13],cl
00006DFC: 7A 05                                                 	jp	neg_sign_ok
00006DFE: E8 EE 04 00 00                                        	call	recoverable_overflow
                                                                      neg_sign_ok:
00006E03: 83 C7 14                                              	add	edi,14h
00006E06: E9 F2 F6 FF FF                                        	jmp	calculation_loop
                                                                      calculate_rva:
00006E0B: 66 83 7F 08 00                                        	cmp	word [edi+8],0
00006E10: 0F 85 78 9B FF FF                                     	jne	invalid_expression
00006E16: A0 BD A2 01 00                                        	mov	al,[output_format]
00006E1B: 3C 05                                                 	cmp	al,5
00006E1D: 0F 84 83 00 00 00                                     	je	calculate_gotoff
00006E23: 3C 04                                                 	cmp	al,4
00006E25: 0F 84 97 00 00 00                                     	je	calculate_coff_rva
00006E2B: 3C 03                                                 	cmp	al,3
00006E2D: 0F 85 5B 9B FF FF                                     	jne	invalid_expression
00006E33: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
00006E3D: 75 3E                                                 	jnz	pe64_rva
00006E3F: B0 02                                                 	mov	al,2
00006E41: 0F BA 25 38 A2 01 00 00                               	bt	[resolver_flags],0
00006E49: 72 02                                                 	jc	rva_type_ok
00006E4B: 30 C0                                                 	xor	al,al
                                                                      rva_type_ok:
00006E4D: 38 47 0C                                              	cmp	byte [edi+12],al
00006E50: 74 05                                                 	je	rva_ok
00006E52: E8 C1 04 00 00                                        	call	recoverable_misuse
                                                                      rva_ok:
00006E57: C6 47 0C 00                                           	mov	byte [edi+12],0
00006E5B: A1 60 A1 01 00                                        	mov	eax,[code_start]
00006E60: 8B 40 34                                              	mov	eax,[eax+34h]
00006E63: 31 D2                                                 	xor	edx,edx
                                                                      finish_rva:
00006E65: 29 07                                                 	sub	[edi],eax
00006E67: 19 57 04                                              	sbb	[edi+4],edx
00006E6A: 80 5F 0D 00                                           	sbb	byte [edi+13],0
00006E6E: 7A 05                                                 	jp	rva_finished
00006E70: E8 7C 04 00 00                                        	call	recoverable_overflow
                                                                      rva_finished:
00006E75: 83 C7 14                                              	add	edi,14h
00006E78: E9 80 F6 FF FF                                        	jmp	calculation_loop
                                                                      pe64_rva:
00006E7D: B0 04                                                 	mov	al,4
00006E7F: 0F BA 25 38 A2 01 00 00                               	bt	[resolver_flags],0
00006E87: 72 02                                                 	jc	pe64_rva_type_ok
00006E89: 30 C0                                                 	xor	al,al
                                                                      pe64_rva_type_ok:
00006E8B: 38 47 0C                                              	cmp	byte [edi+12],al
00006E8E: 74 05                                                 	je	pe64_rva_ok
00006E90: E8 83 04 00 00                                        	call	recoverable_misuse
                                                                      pe64_rva_ok:
00006E95: C6 47 0C 00                                           	mov	byte [edi+12],0
00006E99: A1 60 A1 01 00                                        	mov	eax,[code_start]
00006E9E: 8B 50 34                                              	mov	edx,[eax+34h]
00006EA1: 8B 40 30                                              	mov	eax,[eax+30h]
00006EA4: EB BF                                                 	jmp	finish_rva
                                                                      calculate_gotoff:
00006EA6: F7 05 34 A2 01 00 01 00 00 00                         	test	[format_flags],1
00006EB0: 75 28                                                 	jnz	calculate_elf_dyn_rva
00006EB2: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
00006EBC: 0F 85 CC 9A FF FF                                     	jnz	invalid_expression
                                                                      calculate_coff_rva:
00006EC2: B2 05                                                 	mov	dl,5
00006EC4: 80 7F 0C 02                                           	cmp	byte [edi+12],2
00006EC8: 74 05                                                 	je	change_value_type
                                                                      incorrect_change_of_value_type:
00006ECA: E8 49 04 00 00                                        	call	recoverable_misuse
                                                                      change_value_type:
00006ECF: 88 57 0C                                              	mov	byte [edi+12],dl
00006ED2: 83 C7 14                                              	add	edi,14h
00006ED5: E9 23 F6 FF FF                                        	jmp	calculation_loop
                                                                      calculate_elf_dyn_rva:
00006EDA: 30 D2                                                 	xor	dl,dl
00006EDC: F6 47 0C 01                                           	test	byte [edi+12],1
00006EE0: 75 E8                                                 	jnz	incorrect_change_of_value_type
00006EE2: EB EB                                                 	jmp	change_value_type
                                                                      calculate_plt:
00006EE4: 66 83 7F 08 00                                        	cmp	word [edi+8],0
00006EE9: 0F 85 9F 9A FF FF                                     	jne	invalid_expression
00006EEF: 80 3D BD A2 01 00 05                                  	cmp	[output_format],5
00006EF6: 0F 85 92 9A FF FF                                     	jne	invalid_expression
00006EFC: F7 05 34 A2 01 00 01 00 00 00                         	test	[format_flags],1
00006F06: 0F 85 82 9A FF FF                                     	jnz	invalid_expression
00006F0C: B2 06                                                 	mov	dl,6
00006F0E: B6 02                                                 	mov	dh,2
00006F10: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
00006F1A: 74 02                                                 	jz	check_value_for_plt
00006F1C: B6 04                                                 	mov	dh,4
                                                                      check_value_for_plt:
00006F1E: 8B 07                                                 	mov	eax,[edi]
00006F20: 0B 47 04                                              	or	eax,[edi+4]
00006F23: 75 A5                                                 	jnz	incorrect_change_of_value_type
00006F25: 38 77 0C                                              	cmp	byte [edi+12],dh
00006F28: 75 A0                                                 	jne	incorrect_change_of_value_type
00006F2A: 8B 47 10                                              	mov	eax,[edi+16]
00006F2D: 80 38 80                                              	cmp	byte [eax],80h
00006F30: 75 98                                                 	jne	incorrect_change_of_value_type
00006F32: EB 9B                                                 	jmp	change_value_type
                                                                      div_64:
00006F34: 31 DB                                                 	xor	ebx,ebx
00006F36: 83 3F 00                                              	cmp	dword [edi],0
00006F39: 75 18                                                 	jne	divider_ok
00006F3B: 83 7F 04 00                                           	cmp	dword [edi+4],0
00006F3F: 75 12                                                 	jne	divider_ok
00006F41: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
00006F48: 0F 84 5E 9A FF FF                                     	je	value_out_of_range
00006F4E: E9 C7 00 00 00                                        	jmp	div_done
                                                                      divider_ok:
00006F53: 80 7E 0D 00                                           	cmp	byte [esi+13],0
00006F57: 74 20                                                 	je	div_first_sign_ok
00006F59: 8B 06                                                 	mov	eax,[esi]
00006F5B: 8B 56 04                                              	mov	edx,[esi+4]
00006F5E: F7 D0                                                 	not	eax
00006F60: F7 D2                                                 	not	edx
00006F62: 83 C0 01                                              	add	eax,1
00006F65: 83 D2 00                                              	adc	edx,0
00006F68: 89 06                                                 	mov	[esi],eax
00006F6A: 89 56 04                                              	mov	[esi+4],edx
00006F6D: 09 D0                                                 	or	eax,edx
00006F6F: 0F 84 37 9A FF FF                                     	jz	value_out_of_range
00006F75: 66 83 F3 FF                                           	xor	bx,-1
                                                                      div_first_sign_ok:
00006F79: 80 7F 0D 00                                           	cmp	byte [edi+13],0
00006F7D: 74 1F                                                 	je	div_second_sign_ok
00006F7F: 8B 07                                                 	mov	eax,[edi]
00006F81: 8B 57 04                                              	mov	edx,[edi+4]
00006F84: F7 D0                                                 	not	eax
00006F86: F7 D2                                                 	not	edx
00006F88: 83 C0 01                                              	add	eax,1
00006F8B: 83 D2 00                                              	adc	edx,0
00006F8E: 89 07                                                 	mov	[edi],eax
00006F90: 89 57 04                                              	mov	[edi+4],edx
00006F93: 09 D0                                                 	or	eax,edx
00006F95: 0F 84 11 9A FF FF                                     	jz	value_out_of_range
00006F9B: 80 F3 FF                                              	xor	bl,-1
                                                                      div_second_sign_ok:
00006F9E: 83 7F 04 00                                           	cmp	dword [edi+4],0
00006FA2: 75 18                                                 	jne	div_high
00006FA4: 8B 0F                                                 	mov	ecx,[edi]
00006FA6: 8B 46 04                                              	mov	eax,[esi+4]
00006FA9: 31 D2                                                 	xor	edx,edx
00006FAB: F7 F1                                                 	div	ecx
00006FAD: 89 46 04                                              	mov	[esi+4],eax
00006FB0: 8B 06                                                 	mov	eax,[esi]
00006FB2: F7 F1                                                 	div	ecx
00006FB4: 89 06                                                 	mov	[esi],eax
00006FB6: 89 D0                                                 	mov	eax,edx
00006FB8: 31 D2                                                 	xor	edx,edx
00006FBA: EB 5E                                                 	jmp	div_done
                                                                      div_high:
00006FBC: 53                                                    	push	ebx
00006FBD: 8B 46 04                                              	mov	eax,[esi+4]
00006FC0: 31 D2                                                 	xor	edx,edx
00006FC2: F7 77 04                                              	div	dword [edi+4]
00006FC5: 8B 1E                                                 	mov	ebx,[esi]
00006FC7: 89 06                                                 	mov	[esi],eax
00006FC9: 83 66 04 00                                           	and	dword [esi+4],0
00006FCD: 89 D1                                                 	mov	ecx,edx
00006FCF: F7 27                                                 	mul	dword [edi]
                                                                      div_high_loop:
00006FD1: 39 D1                                                 	cmp	ecx,edx
00006FD3: 77 0F                                                 	ja	div_high_done
00006FD5: 72 18                                                 	jb	div_high_large_correction
00006FD7: 39 C3                                                 	cmp	ebx,eax
00006FD9: 73 09                                                 	jae	div_high_done
                                                                      div_high_correction:
00006FDB: FF 0E                                                 	dec	dword [esi]
00006FDD: 2B 07                                                 	sub	eax,[edi]
00006FDF: 1B 57 04                                              	sbb	edx,[edi+4]
00006FE2: 73 ED                                                 	jnc	div_high_loop
                                                                      div_high_done:
00006FE4: 29 C3                                                 	sub	ebx,eax
00006FE6: 19 D1                                                 	sbb	ecx,edx
00006FE8: 89 CA                                                 	mov	edx,ecx
00006FEA: 89 D8                                                 	mov	eax,ebx
00006FEC: 5B                                                    	pop	ebx
00006FED: EB 2B                                                 	jmp	div_done
                                                                      div_high_large_correction:
00006FEF: 50 52                                                 	push	eax edx
00006FF1: 89 D0                                                 	mov	eax,edx
00006FF3: 29 C8                                                 	sub	eax,ecx
00006FF5: 31 D2                                                 	xor	edx,edx
00006FF7: F7 77 04                                              	div	dword [edi+4]
00006FFA: D1 E8                                                 	shr	eax,1
00006FFC: 74 18                                                 	jz	div_high_small_correction
00006FFE: 29 06                                                 	sub	[esi],eax
00007000: 50                                                    	push	eax
00007001: F7 67 04                                              	mul	dword [edi+4]
00007004: 29 44 24 04                                           	sub	dword [esp+4],eax
00007008: 58                                                    	pop	eax
00007009: F7 27                                                 	mul	dword [edi]
0000700B: 29 44 24 04                                           	sub	dword [esp+4],eax
0000700F: 19 14 24                                              	sbb	dword [esp],edx
00007012: 5A 58                                                 	pop	edx eax
00007014: EB BB                                                 	jmp	div_high_loop
                                                                      div_high_small_correction:
00007016: 5A 58                                                 	pop	edx eax
00007018: EB C1                                                 	jmp	div_high_correction
                                                                      div_done:
0000701A: 08 FF                                                 	or	bh,bh
0000701C: 74 12                                                 	jz	remainder_ok
0000701E: F7 D0                                                 	not	eax
00007020: F7 D2                                                 	not	edx
00007022: 83 C0 01                                              	add	eax,1
00007025: 83 D2 00                                              	adc	edx,0
00007028: 89 C1                                                 	mov	ecx,eax
0000702A: 09 D1                                                 	or	ecx,edx
0000702C: 75 02                                                 	jnz	remainder_ok
0000702E: F6 D7                                                 	not	bh
                                                                      remainder_ok:
00007030: 08 DB                                                 	or	bl,bl
00007032: 74 15                                                 	jz	div_ok
00007034: F7 16                                                 	not	dword [esi]
00007036: F7 56 04                                              	not	dword [esi+4]
00007039: 83 06 01                                              	add	dword [esi],1
0000703C: 83 56 04 00                                           	adc	dword [esi+4],0
00007040: 8B 0E                                                 	mov	ecx,[esi]
00007042: 0B 4E 04                                              	or	ecx,[esi+4]
00007045: 75 02                                                 	jnz	div_ok
00007047: F6 D3                                                 	not	bl
                                                                      div_ok:
00007049: 88 5E 0D                                              	mov	[esi+13],bl
0000704C: C3                                                    	ret
                                                                      store_label_reference:
0000704D: 83 3D 4C A1 01 00 00                                  	cmp	[symbols_file],0
00007054: 74 2E                                                 	je	label_reference_ok
00007056: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
0000705D: 75 25                                                 	jne	label_reference_ok
0000705F: A1 E4 A1 01 00                                        	mov	eax,[tagged_blocks]
00007064: C7 40 FC 02 00 00 00                                  	mov	dword [eax-4],2
0000706B: C7 40 F8 04 00 00 00                                  	mov	dword [eax-8],4
00007072: 83 E8 0C                                              	sub	eax,8+4
00007075: 39 F8                                                 	cmp	eax,edi
00007077: 0F 86 15 98 FF FF                                     	jbe	out_of_memory
0000707D: A3 E4 A1 01 00                                        	mov	[tagged_blocks],eax
00007082: 89 18                                                 	mov	[eax],ebx
                                                                      label_reference_ok:
00007084: C3                                                    	ret
                                                                      convert_fp:
00007085: 46                                                    	inc	esi
00007086: 66 83 67 08 00                                        	and	word [edi+8],0
0000708B: 66 83 67 0C 00                                        	and	word [edi+12],0
00007090: A0 AC A2 01 00                                        	mov	al,[value_size]
00007095: 3C 02                                                 	cmp	al,2
00007097: 0F 84 D4 00 00 00                                     	je	convert_fp_word
0000709D: 3C 04                                                 	cmp	al,4
0000709F: 0F 84 5B 01 00 00                                     	je	convert_fp_dword
000070A5: A8 F7                                                 	test	al,not 8
000070A7: 74 05                                                 	jz	convert_fp_qword
000070A9: E8 6A 02 00 00                                        	call	recoverable_misuse
                                                                      convert_fp_qword:
000070AE: 31 C0                                                 	xor	eax,eax
000070B0: 31 D2                                                 	xor	edx,edx
000070B2: 66 81 7E 08 00 80                                     	cmp	word [esi+8],8000h
000070B8: 0F 84 A2 00 00 00                                     	je	fp_qword_store
000070BE: 66 8B 5E 08                                           	mov	bx,[esi+8]
000070C2: 8B 06                                                 	mov	eax,[esi]
000070C4: 8B 56 04                                              	mov	edx,[esi+4]
000070C7: 01 C0                                                 	add	eax,eax
000070C9: 11 D2                                                 	adc	edx,edx
000070CB: 89 D1                                                 	mov	ecx,edx
000070CD: C1 EA 0C                                              	shr	edx,12
000070D0: 0F AC C8 0C                                           	shrd	eax,ecx,12
000070D4: 73 18                                                 	jnc	fp_qword_ok
000070D6: 83 C0 01                                              	add	eax,1
000070D9: 83 D2 00                                              	adc	edx,0
000070DC: 0F BA E2 14                                           	bt	edx,20
000070E0: 73 0C                                                 	jnc	fp_qword_ok
000070E2: 81 E2 FF FF 0F 00                                     	and	edx,1 shl 20 - 1
000070E8: 66 43                                                 	inc	bx
000070EA: D1 EA                                                 	shr	edx,1
000070EC: D1 D8                                                 	rcr	eax,1
                                                                      fp_qword_ok:
000070EE: 66 81 C3 FF 03                                        	add	bx,3FFh
000070F3: 66 81 FB FF 07                                        	cmp	bx,7FFh
000070F8: 0F 8D AE 98 FF FF                                     	jge	value_out_of_range
000070FE: 66 83 FB 00                                           	cmp	bx,0
00007102: 7F 4D                                                 	jg	fp_qword_exp_ok
00007104: 81 CA 00 00 10 00                                     	or	edx,1 shl 20
0000710A: 66 89 D9                                              	mov	cx,bx
0000710D: 66 F7 D9                                              	neg	cx
00007110: 66 41                                                 	inc	cx
00007112: 66 83 F9 35                                           	cmp	cx,52+1
00007116: 0F 87 90 98 FF FF                                     	ja	value_out_of_range
0000711C: 66 83 F9 20                                           	cmp	cx,32
00007120: 72 0C                                                 	jb	fp_qword_small_shift
00007122: 66 83 E9 20                                           	sub	cx,32
00007126: 89 D0                                                 	mov	eax,edx
00007128: 31 D2                                                 	xor	edx,edx
0000712A: D3 E8                                                 	shr	eax,cl
0000712C: EB 07                                                 	jmp	fp_qword_shift_done
                                                                      fp_qword_small_shift:
0000712E: 89 D3                                                 	mov	ebx,edx
00007130: D3 EA                                                 	shr	edx,cl
00007132: 0F AD D8                                              	shrd	eax,ebx,cl
                                                                      fp_qword_shift_done:
00007135: 66 BB 00 00                                           	mov	bx,0
00007139: 73 16                                                 	jnc	fp_qword_exp_ok
0000713B: 83 C0 01                                              	add	eax,1
0000713E: 83 D2 00                                              	adc	edx,0
00007141: F7 C2 00 00 10 00                                     	test	edx,1 shl 20
00007147: 74 08                                                 	jz	fp_qword_exp_ok
00007149: 81 E2 FF FF 0F 00                                     	and	edx,1 shl 20 - 1
0000714F: 66 43                                                 	inc	bx
                                                                      fp_qword_exp_ok:
00007151: C1 E3 14                                              	shl	ebx,20
00007154: 09 DA                                                 	or	edx,ebx
00007156: 75 08                                                 	jnz	fp_qword_store
00007158: 09 C0                                                 	or	eax,eax
0000715A: 0F 84 4C 98 FF FF                                     	jz	value_out_of_range
                                                                      fp_qword_store:
00007160: 8A 5E 0B                                              	mov	bl,[esi+11]
00007163: C1 E3 1F                                              	shl	ebx,31
00007166: 09 DA                                                 	or	edx,ebx
00007168: 89 07                                                 	mov	[edi],eax
0000716A: 89 57 04                                              	mov	[edi+4],edx
0000716D: 83 C6 0D                                              	add	esi,13
00007170: C3                                                    	ret
                                                                      convert_fp_word:
00007171: 31 C0                                                 	xor	eax,eax
00007173: 66 81 7E 08 00 80                                     	cmp	word [esi+8],8000h
00007179: 74 70                                                 	je	fp_word_store
0000717B: 66 8B 5E 08                                           	mov	bx,[esi+8]
0000717F: 66 8B 46 06                                           	mov	ax,[esi+6]
00007183: 66 D1 E0                                              	shl	ax,1
00007186: 66 C1 E8 06                                           	shr	ax,6
0000718A: 73 12                                                 	jnc	fp_word_ok
0000718C: 66 40                                                 	inc	ax
0000718E: 66 0F BA E0 0A                                        	bt	ax,10
00007193: 73 09                                                 	jnc	fp_word_ok
00007195: 66 25 FF 03                                           	and	ax,1 shl 10 - 1
00007199: 66 43                                                 	inc	bx
0000719B: 66 D1 E8                                              	shr	ax,1
                                                                      fp_word_ok:
0000719E: 66 83 C3 0F                                           	add	bx,0Fh
000071A2: 66 83 FB 1F                                           	cmp	bx,01Fh
000071A6: 0F 8D 00 98 FF FF                                     	jge	value_out_of_range
000071AC: 66 83 FB 00                                           	cmp	bx,0
000071B0: 7F 2C                                                 	jg	fp_word_exp_ok
000071B2: 66 0D 00 04                                           	or	ax,1 shl 10
000071B6: 66 89 D9                                              	mov	cx,bx
000071B9: 66 F7 D9                                              	neg	cx
000071BC: 66 41                                                 	inc	cx
000071BE: 66 83 F9 0B                                           	cmp	cx,10+1
000071C2: 0F 87 E4 97 FF FF                                     	ja	value_out_of_range
000071C8: 66 31 DB                                              	xor	bx,bx
000071CB: 66 D3 E8                                              	shr	ax,cl
000071CE: 73 0E                                                 	jnc	fp_word_exp_ok
000071D0: 66 40                                                 	inc	ax
000071D2: 66 A9 00 04                                           	test	ax,1 shl 10
000071D6: 74 06                                                 	jz	fp_word_exp_ok
000071D8: 66 25 FF 03                                           	and	ax,1 shl 10 - 1
000071DC: 66 43                                                 	inc	bx
                                                                      fp_word_exp_ok:
000071DE: 66 C1 E3 0A                                           	shl	bx,10
000071E2: 66 09 D8                                              	or	ax,bx
000071E5: 0F 84 C1 97 FF FF                                     	jz	value_out_of_range
                                                                      fp_word_store:
000071EB: 8A 5E 0B                                              	mov	bl,[esi+11]
000071EE: 66 C1 E3 0F                                           	shl	bx,15
000071F2: 66 09 D8                                              	or	ax,bx
000071F5: 89 07                                                 	mov	[edi],eax
000071F7: 31 C0                                                 	xor	eax,eax
000071F9: 89 47 04                                              	mov	[edi+4],eax
000071FC: 83 C6 0D                                              	add	esi,13
000071FF: C3                                                    	ret
                                                                      convert_fp_dword:
00007200: 31 C0                                                 	xor	eax,eax
00007202: 66 81 7E 08 00 80                                     	cmp	word [esi+8],8000h
00007208: 74 6B                                                 	je	fp_dword_store
0000720A: 66 8B 5E 08                                           	mov	bx,[esi+8]
0000720E: 8B 46 04                                              	mov	eax,[esi+4]
00007211: D1 E0                                                 	shl	eax,1
00007213: C1 E8 09                                              	shr	eax,9
00007216: 73 10                                                 	jnc	fp_dword_ok
00007218: 40                                                    	inc	eax
00007219: 0F BA E0 17                                           	bt	eax,23
0000721D: 73 09                                                 	jnc	fp_dword_ok
0000721F: 25 FF FF 7F 00                                        	and	eax,1 shl 23 - 1
00007224: 66 43                                                 	inc	bx
00007226: D1 E8                                                 	shr	eax,1
                                                                      fp_dword_ok:
00007228: 66 83 C3 7F                                           	add	bx,7Fh
0000722C: 66 81 FB FF 00                                        	cmp	bx,0FFh
00007231: 0F 8D 75 97 FF FF                                     	jge	value_out_of_range
00007237: 66 83 FB 00                                           	cmp	bx,0
0000723B: 7F 2D                                                 	jg	fp_dword_exp_ok
0000723D: 0D 00 00 80 00                                        	or	eax,1 shl 23
00007242: 66 89 D9                                              	mov	cx,bx
00007245: 66 F7 D9                                              	neg	cx
00007248: 66 41                                                 	inc	cx
0000724A: 66 83 F9 18                                           	cmp	cx,23+1
0000724E: 0F 87 58 97 FF FF                                     	ja	value_out_of_range
00007254: 66 31 DB                                              	xor	bx,bx
00007257: D3 E8                                                 	shr	eax,cl
00007259: 73 0F                                                 	jnc	fp_dword_exp_ok
0000725B: 40                                                    	inc	eax
0000725C: A9 00 00 80 00                                        	test	eax,1 shl 23
00007261: 74 07                                                 	jz	fp_dword_exp_ok
00007263: 25 FF FF 7F 00                                        	and	eax,1 shl 23 - 1
00007268: 66 43                                                 	inc	bx
                                                                      fp_dword_exp_ok:
0000726A: C1 E3 17                                              	shl	ebx,23
0000726D: 09 D8                                                 	or	eax,ebx
0000726F: 0F 84 37 97 FF FF                                     	jz	value_out_of_range
                                                                      fp_dword_store:
00007275: 8A 5E 0B                                              	mov	bl,[esi+11]
00007278: C1 E3 1F                                              	shl	ebx,31
0000727B: 09 D8                                                 	or	eax,ebx
0000727D: 89 07                                                 	mov	[edi],eax
0000727F: 31 C0                                                 	xor	eax,eax
00007281: 89 47 04                                              	mov	[edi+4],eax
00007284: 83 C6 0D                                              	add	esi,13
00007287: C3                                                    	ret
                                                                      get_string_value:
00007288: 46                                                    	inc	esi
00007289: AD                                                    	lods	dword [esi]
0000728A: 89 C1                                                 	mov	ecx,eax
0000728C: 83 F9 08                                              	cmp	ecx,8
0000728F: 0F 87 17 97 FF FF                                     	ja	value_out_of_range
00007295: 89 FA                                                 	mov	edx,edi
00007297: 31 C0                                                 	xor	eax,eax
00007299: AB                                                    	stos	dword [edi]
0000729A: AB                                                    	stos	dword [edi]
0000729B: 89 D7                                                 	mov	edi,edx
0000729D: F3 A4                                                 	rep	movs byte [edi],[esi]
0000729F: 89 D7                                                 	mov	edi,edx
000072A1: 46                                                    	inc	esi
000072A2: 66 83 67 08 00                                        	and	word [edi+8],0
000072A7: 66 83 67 0C 00                                        	and	word [edi+12],0
000072AC: C3                                                    	ret
                                                                
                                                                get_byte_value:
000072AD: C6 05 AC A2 01 00 01                                  	mov	[value_size],1
000072B4: 80 0D 99 A2 01 00 01                                  	or	[operand_flags],1
000072BB: E8 1B 02 00 00                                        	call	calculate_value
000072C0: 08 C0                                                 	or	al,al
000072C2: 74 05                                                 	jz	check_byte_value
000072C4: E8 4F 00 00 00                                        	call	recoverable_misuse
                                                                      check_byte_value:
000072C9: 8B 07                                                 	mov	eax,[edi]
000072CB: 8B 57 04                                              	mov	edx,[edi+4]
000072CE: 80 7F 0D 00                                           	cmp	byte [edi+13],0
000072D2: 74 0D                                                 	je	byte_positive
000072D4: 83 FA FF                                              	cmp	edx,-1
000072D7: 75 14                                                 	jne	range_exceeded
000072D9: 3D 00 FF FF FF                                        	cmp	eax,-100h
000072DE: 72 0D                                                 	jb	range_exceeded
000072E0: C3                                                    	ret
                                                                      byte_positive:
000072E1: 85 D2                                                 	test	edx,edx
000072E3: 75 08                                                 	jnz	range_exceeded
000072E5: 3D 00 01 00 00                                        	cmp	eax,100h
000072EA: 73 01                                                 	jae	range_exceeded
                                                                      return_byte_value:
000072EC: C3                                                    	ret
                                                                      range_exceeded:
000072ED: 31 C0                                                 	xor	eax,eax
000072EF: 31 D2                                                 	xor	edx,edx
                                                                      recoverable_overflow:
000072F1: 83 3D DC A1 01 00 00                                  	cmp	[error_line],0
000072F8: 75 1D                                                 	jne	ignore_overflow
000072FA: FF 35 74 A1 01 00                                     	push	[current_line]
00007300: 8F 05 DC A1 01 00                                     	pop	[error_line]
00007306: C7 05 E0 A1 01 00 AC 09 00 00                         	mov	[error],value_out_of_range
00007310: 80 0D B2 A2 01 00 FF                                  	or	[value_undefined],-1
                                                                      ignore_overflow:
00007317: C3                                                    	ret
                                                                      recoverable_misuse:
00007318: 83 3D DC A1 01 00 00                                  	cmp	[error_line],0
0000731F: 75 16                                                 	jne	ignore_misuse
00007321: FF 35 74 A1 01 00                                     	push	[current_line]
00007327: 8F 05 DC A1 01 00                                     	pop	[error_line]
0000732D: C7 05 E0 A1 01 00 50 0A 00 00                         	mov	[error],invalid_use_of_symbol
                                                                      ignore_misuse:
00007337: C3                                                    	ret
                                                                get_word_value:
00007338: C6 05 AC A2 01 00 02                                  	mov	[value_size],2
0000733F: 80 0D 99 A2 01 00 01                                  	or	[operand_flags],1
00007346: E8 90 01 00 00                                        	call	calculate_value
0000734B: 3C 02                                                 	cmp	al,2
0000734D: 72 05                                                 	jb	check_word_value
0000734F: E8 C4 FF FF FF                                        	call	recoverable_misuse
                                                                      check_word_value:
00007354: 8B 07                                                 	mov	eax,[edi]
00007356: 8B 57 04                                              	mov	edx,[edi+4]
00007359: 80 7F 0D 00                                           	cmp	byte [edi+13],0
0000735D: 74 0D                                                 	je	word_positive
0000735F: 83 FA FF                                              	cmp	edx,-1
00007362: 75 89                                                 	jne	range_exceeded
00007364: 3D 00 00 FF FF                                        	cmp	eax,-10000h
00007369: 72 82                                                 	jb	range_exceeded
0000736B: C3                                                    	ret
                                                                      word_positive:
0000736C: 85 D2                                                 	test	edx,edx
0000736E: 0F 85 79 FF FF FF                                     	jnz	range_exceeded
00007374: 3D 00 00 01 00                                        	cmp	eax,10000h
00007379: 0F 83 6E FF FF FF                                     	jae	range_exceeded
0000737F: C3                                                    	ret
                                                                get_dword_value:
00007380: C6 05 AC A2 01 00 04                                  	mov	[value_size],4
00007387: 80 0D 99 A2 01 00 01                                  	or	[operand_flags],1
0000738E: E8 48 01 00 00                                        	call	calculate_value
00007393: 3C 04                                                 	cmp	al,4
00007395: 75 25                                                 	jne	check_dword_value
00007397: C6 05 B4 A2 01 00 02                                  	mov	[value_type],2
0000739E: 8B 07                                                 	mov	eax,[edi]
000073A0: 99                                                    	cdq
000073A1: 3B 57 04                                              	cmp	edx,[edi+4]
000073A4: 0F 85 43 FF FF FF                                     	jne	range_exceeded
000073AA: 89 D1                                                 	mov	ecx,edx
000073AC: C1 F9 1F                                              	sar	ecx,31
000073AF: 3A 0D B5 A2 01 00                                     	cmp	cl,[value_sign]
000073B5: 0F 85 32 FF FF FF                                     	jne	range_exceeded
000073BB: C3                                                    	ret
                                                                      check_dword_value:
000073BC: 8B 07                                                 	mov	eax,[edi]
000073BE: 8B 57 04                                              	mov	edx,[edi+4]
000073C1: 80 7F 0D 00                                           	cmp	byte [edi+13],0
000073C5: 74 0A                                                 	je	dword_positive
000073C7: 83 FA FF                                              	cmp	edx,-1
000073CA: 0F 85 1D FF FF FF                                     	jne	range_exceeded
000073D0: C3                                                    	ret
                                                                      dword_positive:
000073D1: 85 D2                                                 	test	edx,edx
000073D3: 0F 85 14 FF FF FF                                     	jne	range_exceeded
000073D9: C3                                                    	ret
                                                                get_pword_value:
000073DA: C6 05 AC A2 01 00 06                                  	mov	[value_size],6
000073E1: 80 0D 99 A2 01 00 01                                  	or	[operand_flags],1
000073E8: E8 EE 00 00 00                                        	call	calculate_value
000073ED: 3C 04                                                 	cmp	al,4
000073EF: 75 05                                                 	jne	check_pword_value
000073F1: E8 22 FF FF FF                                        	call	recoverable_misuse
                                                                      check_pword_value:
000073F6: 8B 07                                                 	mov	eax,[edi]
000073F8: 8B 57 04                                              	mov	edx,[edi+4]
000073FB: 80 7F 0D 00                                           	cmp	byte [edi+13],0
000073FF: 74 0D                                                 	je	pword_positive
00007401: 81 FA 00 00 FF FF                                     	cmp	edx,-10000h
00007407: 0F 82 E0 FE FF FF                                     	jb	range_exceeded
0000740D: C3                                                    	ret
                                                                      pword_positive:
0000740E: 81 FA 00 00 01 00                                     	cmp	edx,10000h
00007414: 0F 83 D3 FE FF FF                                     	jae	range_exceeded
0000741A: C3                                                    	ret
                                                                get_qword_value:
0000741B: C6 05 AC A2 01 00 08                                  	mov	[value_size],8
00007422: 80 0D 99 A2 01 00 01                                  	or	[operand_flags],1
00007429: E8 AD 00 00 00                                        	call	calculate_value
                                                                      check_qword_value:
0000742E: 8B 07                                                 	mov	eax,[edi]
00007430: 8B 57 04                                              	mov	edx,[edi+4]
00007433: C3                                                    	ret
                                                                get_count_value:
00007434: C6 05 AC A2 01 00 08                                  	mov	[value_size],8
0000743B: 80 0D 99 A2 01 00 01                                  	or	[operand_flags],1
00007442: E8 97 F0 FF FF                                        	call	calculate_expression
00007447: 66 83 7F 08 00                                        	cmp	word [edi+8],0
0000744C: 0F 85 50 95 FF FF                                     	jne	invalid_value
00007452: C6 05 B5 A2 01 00 00                                  	mov	[value_sign],0
00007459: 8A 47 0C                                              	mov	al,[edi+12]
0000745C: 08 C0                                                 	or	al,al
0000745E: 74 05                                                 	jz	check_count_value
00007460: E8 B3 FE FF FF                                        	call	recoverable_misuse
                                                                      check_count_value:
00007465: 80 7F 0D 00                                           	cmp	byte [edi+13],0
00007469: 75 0A                                                 	jne	invalid_count_value
0000746B: 8B 07                                                 	mov	eax,[edi]
0000746D: 8B 57 04                                              	mov	edx,[edi+4]
00007470: 09 D2                                                 	or	edx,edx
00007472: 75 01                                                 	jnz	invalid_count_value
00007474: C3                                                    	ret
                                                                      invalid_count_value:
00007475: 83 3D DC A1 01 00 00                                  	cmp	[error_line],0
0000747C: 75 14                                                 	jne	zero_count
0000747E: A1 74 A1 01 00                                        	mov	eax,[current_line]
00007483: A3 DC A1 01 00                                        	mov	[error_line],eax
00007488: C7 05 E0 A1 01 00 A2 09 00 00                         	mov	[error],invalid_value
                                                                      zero_count:
00007492: 31 C0                                                 	xor	eax,eax
00007494: C3                                                    	ret
                                                                get_value:
00007495: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000749C: AC                                                    	lods	byte [esi]
0000749D: E8 88 98 00 00                                        	call	get_size_operator
000074A2: 3C 28                                                 	cmp	al,'('
000074A4: 0F 85 F8 94 FF FF                                     	jne	invalid_value
000074AA: A0 98 A2 01 00                                        	mov	al,[operand_size]
000074AF: 3C 01                                                 	cmp	al,1
000074B1: 74 7D                                                 	je	value_byte
000074B3: 3C 02                                                 	cmp	al,2
000074B5: 74 6D                                                 	je	value_word
000074B7: 3C 04                                                 	cmp	al,4
000074B9: 74 60                                                 	je	value_dword
000074BB: 3C 06                                                 	cmp	al,6
000074BD: 74 52                                                 	je	value_pword
000074BF: 3C 08                                                 	cmp	al,8
000074C1: 74 41                                                 	je	value_qword
000074C3: 08 C0                                                 	or	al,al
000074C5: 0F 85 D7 94 FF FF                                     	jnz	invalid_value
000074CB: A2 AC A2 01 00                                        	mov	[value_size],al
000074D0: E8 06 00 00 00                                        	call	calculate_value
000074D5: 8B 07                                                 	mov	eax,[edi]
000074D7: 8B 57 04                                              	mov	edx,[edi+4]
000074DA: C3                                                    	ret
                                                                      calculate_value:
000074DB: E8 FE EF FF FF                                        	call	calculate_expression
000074E0: 66 83 7F 08 00                                        	cmp	word [edi+8],0
000074E5: 0F 85 B7 94 FF FF                                     	jne	invalid_value
000074EB: 8B 47 10                                              	mov	eax,[edi+16]
000074EE: A3 24 A2 01 00                                        	mov	[symbol_identifier],eax
000074F3: 8A 47 0D                                              	mov	al,[edi+13]
000074F6: A2 B5 A2 01 00                                        	mov	[value_sign],al
000074FB: 8A 47 0C                                              	mov	al,[edi+12]
000074FE: A2 B4 A2 01 00                                        	mov	[value_type],al
00007503: C3                                                    	ret
                                                                      value_qword:
00007504: E8 12 FF FF FF                                        	call	get_qword_value
                                                                      truncated_value:
00007509: C6 05 B5 A2 01 00 00                                  	mov	[value_sign],0
00007510: C3                                                    	ret
                                                                      value_pword:
00007511: E8 C4 FE FF FF                                        	call	get_pword_value
00007516: 0F B7 D2                                              	movzx	edx,dx
00007519: EB EE                                                 	jmp	truncated_value
                                                                      value_dword:
0000751B: E8 60 FE FF FF                                        	call	get_dword_value
00007520: 31 D2                                                 	xor	edx,edx
00007522: EB E5                                                 	jmp	truncated_value
                                                                      value_word:
00007524: E8 0F FE FF FF                                        	call	get_word_value
00007529: 31 D2                                                 	xor	edx,edx
0000752B: 0F B7 C0                                              	movzx	eax,ax
0000752E: EB D9                                                 	jmp	truncated_value
                                                                      value_byte:
00007530: E8 78 FD FF FF                                        	call	get_byte_value
00007535: 31 D2                                                 	xor	edx,edx
00007537: 0F B6 C0                                              	movzx	eax,al
0000753A: EB CD                                                 	jmp	truncated_value
                                                                get_address_word_value:
0000753C: C6 05 AD A2 01 00 02                                  	mov	[address_size],2
00007543: C6 05 AC A2 01 00 02                                  	mov	[value_size],2
0000754A: C6 05 C6 A2 01 00 00                                  	mov	[free_address_range],0
00007551: EB 43                                                 	jmp	calculate_address
                                                                get_address_dword_value:
00007553: C6 05 AD A2 01 00 04                                  	mov	[address_size],4
0000755A: C6 05 AC A2 01 00 04                                  	mov	[value_size],4
00007561: C6 05 C6 A2 01 00 00                                  	mov	[free_address_range],0
00007568: EB 2C                                                 	jmp	calculate_address
                                                                get_address_qword_value:
0000756A: C6 05 AD A2 01 00 08                                  	mov	[address_size],8
00007571: C6 05 AC A2 01 00 08                                  	mov	[value_size],8
00007578: C6 05 C6 A2 01 00 00                                  	mov	[free_address_range],0
0000757F: EB 15                                                 	jmp	calculate_address
                                                                get_address_value:
00007581: C6 05 AD A2 01 00 00                                  	mov	[address_size],0
00007588: C6 05 AC A2 01 00 08                                  	mov	[value_size],8
0000758F: 80 0D C6 A2 01 00 FF                                  	or	[free_address_range],-1
                                                                      calculate_address:
00007596: 80 3E 2E                                              	cmp	byte [esi],'.'
00007599: 0F 84 F9 93 FF FF                                     	je	invalid_address
0000759F: E8 3A EF FF FF                                        	call	calculate_expression
000075A4: 8B 47 10                                              	mov	eax,[edi+16]
000075A7: A3 28 A2 01 00                                        	mov	[address_symbol],eax
000075AC: 8A 47 0D                                              	mov	al,[edi+13]
000075AF: A2 B8 A2 01 00                                        	mov	[address_sign],al
000075B4: 8A 47 0C                                              	mov	al,[edi+12]
000075B7: A2 B4 A2 01 00                                        	mov	[value_type],al
000075BC: 3C 00                                                 	cmp	al,0
000075BE: 74 6B                                                 	je	address_size_ok
000075C0: 7F 02                                                 	jg	get_address_symbol_size
000075C2: F6 D8                                                 	neg	al
                                                                      get_address_symbol_size:
000075C4: 3C 06                                                 	cmp	al,6
000075C6: 74 14                                                 	je	special_address_type_32bit
000075C8: 3C 05                                                 	cmp	al,5
000075CA: 74 10                                                 	je	special_address_type_32bit
000075CC: 77 09                                                 	ja	invalid_address_type
000075CE: A8 01                                                 	test	al,1
000075D0: 75 05                                                 	jnz	invalid_address_type
000075D2: C0 E0 05                                              	shl	al,5
000075D5: EB 07                                                 	jmp	address_symbol_ok
                                                                      invalid_address_type:
000075D7: E8 3C FD FF FF                                        	call	recoverable_misuse
                                                                      special_address_type_32bit:
000075DC: B0 40                                                 	mov	al,40h
                                                                      address_symbol_ok:
000075DE: 8A 25 AD A2 01 00                                     	mov	ah,[address_size]
000075E4: 08 05 AD A2 01 00                                     	or	[address_size],al
000075EA: C0 E8 04                                              	shr	al,4
000075ED: 08 E4                                                 	or	ah,ah
000075EF: 74 3A                                                 	jz	address_size_ok
000075F1: 38 E0                                                 	cmp	al,ah
000075F3: 74 36                                                 	je	address_size_ok
000075F5: 66 3D 08 04                                           	cmp	ax,0408h
000075F9: 74 0A                                                 	je	address_sizes_mixed
000075FB: 66 3D 04 08                                           	cmp	ax,0804h
000075FF: 0F 85 61 93 FF FF                                     	jne	address_sizes_do_not_agree
                                                                      address_sizes_mixed:
00007605: 80 3D B4 A2 01 00 04                                  	cmp	[value_type],4
0000760C: 75 07                                                 	jne	address_sizes_mixed_type_ok
0000760E: C6 05 B4 A2 01 00 02                                  	mov	[value_type],2
                                                                      address_sizes_mixed_type_ok:
00007615: 8B 07                                                 	mov	eax,[edi]
00007617: 99                                                    	cdq
00007618: 3B 57 04                                              	cmp	edx,[edi+4]
0000761B: 74 0E                                                 	je	address_size_ok
0000761D: 83 3D DC A1 01 00 00                                  	cmp	[error_line],0
00007624: 75 05                                                 	jne	address_size_ok
00007626: E8 C6 FC FF FF                                        	call	recoverable_overflow
                                                                      address_size_ok:
0000762B: 31 DB                                                 	xor	ebx,ebx
0000762D: 31 C9                                                 	xor	ecx,ecx
0000762F: 8A 0D B4 A2 01 00                                     	mov	cl,[value_type]
00007635: C1 E1 10                                              	shl	ecx,16
00007638: 8A 2D AD A2 01 00                                     	mov	ch,[address_size]
0000763E: 66 83 7F 08 00                                        	cmp	word [edi+8],0
00007643: 0F 84 57 01 00 00                                     	je	check_immediate_address
00007649: 8A 47 08                                              	mov	al,[edi+8]
0000764C: 8A 57 0A                                              	mov	dl,[edi+10]
0000764F: E8 D3 00 00 00                                        	call	get_address_register
00007654: 8A 47 09                                              	mov	al,[edi+9]
00007657: 8A 57 0B                                              	mov	dl,[edi+11]
0000765A: E8 C8 00 00 00                                        	call	get_address_register
0000765F: 66 89 D8                                              	mov	ax,bx
00007662: C0 EC 04                                              	shr	ah,4
00007665: C0 E8 04                                              	shr	al,4
00007668: 08 FF                                                 	or	bh,bh
0000766A: 74 0C                                                 	jz	check_address_registers
0000766C: 08 DB                                                 	or	bl,bl
0000766E: 74 08                                                 	jz	check_address_registers
00007670: 38 E0                                                 	cmp	al,ah
00007672: 0F 85 D1 01 00 00                                     	jne	check_vsib
                                                                      check_address_registers:
00007678: 08 E0                                                 	or	al,ah
0000767A: 3C 0C                                                 	cmp	al,0Ch
0000767C: 0F 83 C7 01 00 00                                     	jae	check_vsib
00007682: 3C 06                                                 	cmp	al,6
00007684: 0F 84 BF 01 00 00                                     	je	check_vsib
0000768A: 3C 07                                                 	cmp	al,7
0000768C: 0F 84 B7 01 00 00                                     	je	check_vsib
00007692: 8A 25 AD A2 01 00                                     	mov	ah,[address_size]
00007698: 80 E4 0F                                              	and	ah,0Fh
0000769B: 74 08                                                 	jz	address_registers_sizes_ok
0000769D: 38 E0                                                 	cmp	al,ah
0000769F: 0F 85 F3 92 FF FF                                     	jne	invalid_address
                                                                      address_registers_sizes_ok:
000076A5: 3C 04                                                 	cmp	al,4
000076A7: 0F 84 98 00 00 00                                     	je	sib_allowed
000076AD: 3C 08                                                 	cmp	al,8
000076AF: 0F 84 90 00 00 00                                     	je	sib_allowed
000076B5: 3C 09                                                 	cmp	al,9
000076B7: 74 2F                                                 	je	check_ip_relative_address
000076B9: 80 F9 01                                              	cmp	cl,1
000076BC: 0F 87 D6 92 FF FF                                     	ja	invalid_address
000076C2: 80 3D C6 A2 01 00 00                                  	cmp	[free_address_range],0
000076C9: 0F 85 5F FD FF FF                                     	jne	check_qword_value
000076CF: E9 80 FC FF FF                                        	jmp	check_word_value
                                                                      address_sizes_do_not_match:
000076D4: 3C 0F                                                 	cmp	al,0Fh
000076D6: 0F 85 BC 92 FF FF                                     	jne	invalid_address
000076DC: 88 F8                                                 	mov	al,bh
000076DE: 24 0F                                                 	and	al,0Fh
000076E0: 38 E0                                                 	cmp	al,ah
000076E2: 0F 85 B0 92 FF FF                                     	jne	invalid_address
                                                                      check_ip_relative_address:
000076E8: 08 DB                                                 	or	bl,bl
000076EA: 0F 85 A8 92 FF FF                                     	jnz	invalid_address
000076F0: 80 FF 98                                              	cmp	bh,98h
000076F3: 74 1C                                                 	je	check_rip_relative_address
000076F5: 80 FF 94                                              	cmp	bh,94h
000076F8: 0F 85 9A 92 FF FF                                     	jne	invalid_address
000076FE: 80 3D C6 A2 01 00 00                                  	cmp	[free_address_range],0
00007705: 0F 84 B1 FC FF FF                                     	je	check_dword_value
0000770B: 8B 07                                                 	mov	eax,[edi]
0000770D: 8B 57 04                                              	mov	edx,[edi+4]
00007710: C3                                                    	ret
                                                                      check_rip_relative_address:
00007711: 8B 07                                                 	mov	eax,[edi]
00007713: 99                                                    	cdq
00007714: 3B 57 04                                              	cmp	edx,[edi+4]
00007717: 0F 85 D0 FB FF FF                                     	jne	range_exceeded
0000771D: 3A 57 0D                                              	cmp	dl,[edi+13]
00007720: 0F 85 C7 FB FF FF                                     	jne	range_exceeded
00007726: C3                                                    	ret
                                                                      get_address_register:
00007727: 08 C0                                                 	or	al,al
00007729: 74 0B                                                 	jz	address_register_ok
0000772B: 80 FA 01                                              	cmp	dl,1
0000772E: 75 07                                                 	jne	scaled_register
00007730: 08 FF                                                 	or	bh,bh
00007732: 75 03                                                 	jnz	scaled_register
00007734: 88 C7                                                 	mov	bh,al
                                                                      address_register_ok:
00007736: C3                                                    	ret
                                                                      scaled_register:
00007737: 08 DB                                                 	or	bl,bl
00007739: 0F 85 59 92 FF FF                                     	jnz	invalid_address
0000773F: 88 C3                                                 	mov	bl,al
00007741: 88 D1                                                 	mov	cl,dl
00007743: EB F1                                                 	jmp	address_register_ok
                                                                      sib_allowed:
00007745: 08 FF                                                 	or	bh,bh
00007747: 0F 85 99 00 00 00                                     	jnz	check_index_with_base
0000774D: 80 F9 03                                              	cmp	cl,3
00007750: 74 4A                                                 	je	special_index_scale
00007752: 80 F9 05                                              	cmp	cl,5
00007755: 74 45                                                 	je	special_index_scale
00007757: 80 F9 09                                              	cmp	cl,9
0000775A: 74 40                                                 	je	special_index_scale
0000775C: 80 F9 02                                              	cmp	cl,2
0000775F: 0F 85 CA 00 00 00                                     	jne	check_index_scale
00007765: 80 FB 45                                              	cmp	bl,45h
00007768: 75 32                                                 	jne	special_index_scale
0000776A: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00007771: 74 29                                                 	je	special_index_scale
00007773: 80 3D A7 A2 01 00 04                                  	cmp	[segment_register],4
0000777A: 75 20                                                 	jne	special_index_scale
0000777C: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
00007783: 0F 85 A6 00 00 00                                     	jne	check_index_scale
00007789: 8A 07                                                 	mov	al,[edi]
0000778B: 66 98                                                 	cbw
0000778D: 98                                                    	cwde
0000778E: 3B 07                                                 	cmp	eax,[edi]
00007790: 0F 85 99 00 00 00                                     	jne	check_index_scale
00007796: 99                                                    	cdq
00007797: 3B 57 04                                              	cmp	edx,[edi+4]
0000779A: 75 04                                                 	jne	check_immediate_address
                                                                      special_index_scale:
0000779C: 88 DF                                                 	mov	bh,bl
0000779E: FE C9                                                 	dec	cl
                                                                      check_immediate_address:
000077A0: 80 3D C6 A2 01 00 00                                  	cmp	[free_address_range],0
000077A7: 0F 85 81 FC FF FF                                     	jne	check_qword_value
000077AD: A0 AD A2 01 00                                        	mov	al,[address_size]
000077B2: 24 0F                                                 	and	al,0Fh
000077B4: 3C 02                                                 	cmp	al,2
000077B6: 0F 84 98 FB FF FF                                     	je	check_word_value
000077BC: 3C 04                                                 	cmp	al,4
000077BE: 0F 84 F8 FB FF FF                                     	je	check_dword_value
000077C4: 3C 08                                                 	cmp	al,8
000077C6: 0F 84 62 FC FF FF                                     	je	check_qword_value
000077CC: 08 C0                                                 	or	al,al
000077CE: 0F 85 CE 91 FF FF                                     	jnz	invalid_value
000077D4: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
000077DB: 0F 85 DB FB FF FF                                     	jne	check_dword_value
000077E1: E9 48 FC FF FF                                        	jmp	check_qword_value
                                                                      check_index_with_base:
000077E6: 80 F9 01                                              	cmp	cl,1
000077E9: 75 44                                                 	jne	check_index_scale
000077EB: 80 FB 44                                              	cmp	bl,44h
000077EE: 74 2C                                                 	je	swap_base_with_index
000077F0: 80 FB 84                                              	cmp	bl,84h
000077F3: 74 27                                                 	je	swap_base_with_index
000077F5: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
000077FC: 74 22                                                 	je	check_for_rbp_base
000077FE: 80 FB 45                                              	cmp	bl,45h
00007801: 75 0B                                                 	jne	check_for_ebp_base
00007803: 80 3D A7 A2 01 00 03                                  	cmp	[segment_register],3
0000780A: 74 10                                                 	je	swap_base_with_index
0000780C: EB 92                                                 	jmp	check_immediate_address
                                                                      check_for_ebp_base:
0000780E: 80 FF 45                                              	cmp	bh,45h
00007811: 75 8D                                                 	jne	check_immediate_address
00007813: 80 3D A7 A2 01 00 04                                  	cmp	[segment_register],4
0000781A: 75 84                                                 	jne	check_immediate_address
                                                                      swap_base_with_index:
0000781C: 86 DF                                                 	xchg	bl,bh
0000781E: EB 80                                                 	jmp	check_immediate_address
                                                                      check_for_rbp_base:
00007820: 80 FF 45                                              	cmp	bh,45h
00007823: 74 F7                                                 	je	swap_base_with_index
00007825: 80 FF 85                                              	cmp	bh,85h
00007828: 74 F2                                                 	je	swap_base_with_index
0000782A: E9 71 FF FF FF                                        	jmp	check_immediate_address
                                                                      check_index_scale:
0000782F: F6 C1 F0                                              	test	cl,not 1111b
00007832: 0F 85 60 91 FF FF                                     	jnz	invalid_address
00007838: 88 C8                                                 	mov	al,cl
0000783A: FE C8                                                 	dec	al
0000783C: 20 C8                                                 	and	al,cl
0000783E: 0F 84 5C FF FF FF                                     	jz	check_immediate_address
00007844: E9 4F 91 FF FF                                        	jmp	invalid_address
                                                                      check_vsib:
00007849: 30 E4                                                 	xor	ah,ah
                                                                      check_vsib_base:
0000784B: 84 FF                                                 	test	bh,bh
0000784D: 74 29                                                 	jz	check_vsib_index
0000784F: 88 F8                                                 	mov	al,bh
00007851: C0 E8 04                                              	shr	al,4
00007854: 3C 04                                                 	cmp	al,4
00007856: 74 0D                                                 	je	check_vsib_base_size
00007858: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000785F: 75 28                                                 	jne	swap_vsib_registers
00007861: 3C 08                                                 	cmp	al,8
00007863: 75 24                                                 	jne	swap_vsib_registers
                                                                      check_vsib_base_size:
00007865: 8A 25 AD A2 01 00                                     	mov	ah,[address_size]
0000786B: 80 E4 0F                                              	and	ah,0Fh
0000786E: 74 08                                                 	jz	check_vsib_index
00007870: 38 E0                                                 	cmp	al,ah
00007872: 0F 85 20 91 FF FF                                     	jne	invalid_address
                                                                      check_vsib_index:
00007878: 88 D8                                                 	mov	al,bl
0000787A: 24 E0                                                 	and	al,0E0h
0000787C: 3C C0                                                 	cmp	al,0C0h
0000787E: 73 AF                                                 	jae	check_index_scale
00007880: 3C 60                                                 	cmp	al,60h
00007882: 74 AB                                                 	je	check_index_scale
00007884: E9 0F 91 FF FF                                        	jmp	invalid_address
                                                                      swap_vsib_registers:
00007889: 80 F4 FF                                              	xor	ah,-1
0000788C: 0F 84 06 91 FF FF                                     	jz	invalid_address
00007892: 80 F9 01                                              	cmp	cl,1
00007895: 0F 87 FD 90 FF FF                                     	ja	invalid_address
0000789B: 86 DF                                                 	xchg	bl,bh
0000789D: B1 01                                                 	mov	cl,1
0000789F: EB AA                                                 	jmp	check_vsib_base
                                                                
                                                                calculate_relative_offset:
000078A1: 80 3D B2 A2 01 00 00                                  	cmp	[value_undefined],0
000078A8: 0F 85 93 00 00 00                                     	jne	relative_offset_ok
000078AE: 84 FF                                                 	test	bh,bh
000078B0: 0F 95 C5                                              	setne	ch
000078B3: 3E 66 3B 5D 10                                        	cmp	bx,[ds:ebp+10h]
000078B8: 74 0F                                                 	je	origin_registers_ok
000078BA: 86 FB                                                 	xchg	bh,bl
000078BC: 86 E9                                                 	xchg	ch,cl
000078BE: 3E 66 3B 5D 10                                        	cmp	bx,[ds:ebp+10h]
000078C3: 0F 85 D9 90 FF FF                                     	jne	invalid_value
                                                                      origin_registers_ok:
000078C9: 3E 66 3B 4D 12                                        	cmp	cx,[ds:ebp+10h+2]
000078CE: 0F 85 CE 90 FF FF                                     	jne	invalid_value
000078D4: 8A 1D B8 A2 01 00                                     	mov	bl,[address_sign]
000078DA: 3E 03 45 00                                           	add	eax,[ds:ebp]
000078DE: 3E 13 55 04                                           	adc	edx,[ds:ebp+4]
000078E2: 3E 12 5D 08                                           	adc	bl,[ds:ebp+8]
000078E6: 29 F8                                                 	sub	eax,edi
000078E8: 83 DA 00                                              	sbb	edx,0
000078EB: 80 DB 00                                              	sbb	bl,0
000078EE: 88 1D B5 A2 01 00                                     	mov	[value_sign],bl
000078F4: 8A 1D B4 A2 01 00                                     	mov	bl,[value_type]
000078FA: 8B 0D 28 A2 01 00                                     	mov	ecx,[address_symbol]
00007900: 89 0D 24 A2 01 00                                     	mov	[symbol_identifier],ecx
00007906: F6 C3 01                                              	test	bl,1
00007909: 75 14                                                 	jnz	relative_offset_unallowed
0000790B: 80 FB 06                                              	cmp	bl,6
0000790E: 74 32                                                 	je	plt_relative_offset
00007910: 3E 8A 7D 09                                           	mov	bh,[ds:ebp+9]
00007914: 38 FB                                                 	cmp	bl,bh
00007916: 74 0C                                                 	je	set_relative_offset_type
00007918: 66 81 FB 02 04                                        	cmp	bx,0402h
0000791D: 74 05                                                 	je	set_relative_offset_type
                                                                      relative_offset_unallowed:
0000791F: E8 F4 F9 FF FF                                        	call	recoverable_misuse
                                                                      set_relative_offset_type:
00007924: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000792B: 74 14                                                 	je	relative_offset_ok
0000792D: C6 05 B4 A2 01 00 00                                  	mov	[value_type],0
00007934: 3E 3B 4D 14                                           	cmp	ecx,[ds:ebp+14h]
00007938: 74 07                                                 	je	relative_offset_ok
0000793A: C6 05 B4 A2 01 00 03                                  	mov	[value_type],3
                                                                      relative_offset_ok:
00007941: C3                                                    	ret
                                                                      plt_relative_offset:
00007942: C6 05 B4 A2 01 00 07                                  	mov	[value_type],7
00007949: 3E 80 7D 09 02                                        	cmp	byte [ds:ebp+9],2
0000794E: 74 F1                                                 	je	relative_offset_ok
00007950: 3E 80 7D 09 04                                        	cmp	byte [ds:ebp+9],4
00007955: 0F 85 BD F9 FF FF                                     	jne	recoverable_misuse
0000795B: C3                                                    	ret
                                                                
                                                                calculate_logical_expression:
0000795C: 30 C0                                                 	xor	al,al
                                                                  calculate_embedded_logical_expression:
0000795E: A2 BB A2 01 00                                        	mov	[logical_value_wrapping],al
00007963: E8 7E 00 00 00                                        	call	get_logical_value
                                                                      logical_loop:
00007968: 80 3E 7C                                              	cmp	byte [esi],'|'
0000796B: 74 06                                                 	je	logical_or
0000796D: 80 3E 26                                              	cmp	byte [esi],'&'
00007970: 74 11                                                 	je	logical_and
00007972: C3                                                    	ret
                                                                      logical_or:
00007973: 46                                                    	inc	esi
00007974: 08 C0                                                 	or	al,al
00007976: 75 1B                                                 	jnz	logical_value_already_determined
00007978: 50                                                    	push	eax
00007979: E8 68 00 00 00                                        	call	get_logical_value
0000797E: 5B                                                    	pop	ebx
0000797F: 08 D8                                                 	or	al,bl
00007981: EB E5                                                 	jmp	logical_loop
                                                                      logical_and:
00007983: 46                                                    	inc	esi
00007984: 08 C0                                                 	or	al,al
00007986: 74 0B                                                 	jz	logical_value_already_determined
00007988: 50                                                    	push	eax
00007989: E8 58 00 00 00                                        	call	get_logical_value
0000798E: 5B                                                    	pop	ebx
0000798F: 20 D8                                                 	and	al,bl
00007991: EB D5                                                 	jmp	logical_loop
                                                                      logical_value_already_determined:
00007993: 50                                                    	push	eax
00007994: E8 B8 CD FF FF                                        	call	skip_logical_value
00007999: 0F 82 EF 8F FF FF                                     	jc	invalid_expression
0000799F: 58                                                    	pop	eax
000079A0: EB C6                                                 	jmp	logical_loop
                                                                  get_value_for_comparison:
000079A2: C6 05 AC A2 01 00 08                                  	mov	[value_size],8
000079A9: 80 0D 99 A2 01 00 01                                  	or	[operand_flags],1
000079B0: AC                                                    	lods	byte [esi]
000079B1: E8 28 EB FF FF                                        	call	calculate_expression
000079B6: 80 7F 08 00                                           	cmp	byte [edi+8],0
000079BA: 75 04                                                 	jne	first_register_size_ok
000079BC: C6 47 0A 00                                           	mov	byte [edi+10],0
                                                                      first_register_size_ok:
000079C0: 80 7F 09 00                                           	cmp	byte [edi+9],0
000079C4: 75 04                                                 	jne	second_register_size_ok
000079C6: C6 47 0B 00                                           	mov	byte [edi+11],0
                                                                      second_register_size_ok:
000079CA: 8B 47 10                                              	mov	eax,[edi+16]
000079CD: A3 24 A2 01 00                                        	mov	[symbol_identifier],eax
000079D2: 8A 47 0D                                              	mov	al,[edi+13]
000079D5: A2 B5 A2 01 00                                        	mov	[value_sign],al
000079DA: 8A 5F 0C                                              	mov	bl,[edi+12]
000079DD: 8B 07                                                 	mov	eax,[edi]
000079DF: 8B 57 04                                              	mov	edx,[edi+4]
000079E2: 8B 4F 08                                              	mov	ecx,[edi+8]
000079E5: C3                                                    	ret
                                                                  get_logical_value:
000079E6: 30 C0                                                 	xor	al,al
                                                                      check_for_negation:
000079E8: 80 3E 7E                                              	cmp	byte [esi],'~'
000079EB: 75 05                                                 	jne	negation_ok
000079ED: 46                                                    	inc	esi
000079EE: 34 FF                                                 	xor	al,-1
000079F0: EB F6                                                 	jmp	check_for_negation
                                                                      negation_ok:
000079F2: 50                                                    	push	eax
000079F3: 8A 06                                                 	mov	al,[esi]
000079F5: 3C 91                                                 	cmp	al,91h
000079F7: 0F 84 67 03 00 00                                     	je	logical_expression
000079FD: 3C FF                                                 	cmp	al,0FFh
000079FF: 0F 84 89 8F FF FF                                     	je	invalid_expression
00007A05: 3C 88                                                 	cmp	al,88h
00007A07: 0F 84 50 02 00 00                                     	je	check_for_defined
00007A0D: 3C 8A                                                 	cmp	al,8Ah
00007A0F: 0F 84 43 02 00 00                                     	je	check_for_earlier_defined
00007A15: 3C 89                                                 	cmp	al,89h
00007A17: 0F 84 F8 02 00 00                                     	je	check_for_used
00007A1D: 3C 30                                                 	cmp	al,'0'
00007A1F: 0F 84 35 03 00 00                                     	je	given_false
00007A25: 3C 31                                                 	cmp	al,'1'
00007A27: 0F 84 32 03 00 00                                     	je	given_true
00007A2D: 3C 28                                                 	cmp	al,'('
00007A2F: 0F 85 6D 8F FF FF                                     	jne	invalid_value
00007A35: E8 68 FF FF FF                                        	call	get_value_for_comparison
00007A3A: 8A 3D B5 A2 01 00                                     	mov	bh,[value_sign]
00007A40: 50 52                                                 	push	eax edx
00007A42: FF 35 24 A2 01 00                                     	push	[symbol_identifier]
00007A48: 53 51                                                 	push	ebx ecx
00007A4A: 8A 06                                                 	mov	al,[esi]
00007A4C: 08 C0                                                 	or	al,al
00007A4E: 0F 84 DC 01 00 00                                     	jz	logical_number
00007A54: 3C 0F                                                 	cmp	al,0Fh
00007A56: 0F 84 D4 01 00 00                                     	je	logical_number
00007A5C: 3C 92                                                 	cmp	al,92h
00007A5E: 0F 84 CC 01 00 00                                     	je	logical_number
00007A64: 3C 26                                                 	cmp	al,'&'
00007A66: 0F 84 C4 01 00 00                                     	je	logical_number
00007A6C: 3C 7C                                                 	cmp	al,'|'
00007A6E: 0F 84 BC 01 00 00                                     	je	logical_number
00007A74: 46                                                    	inc	esi
00007A75: A2 BA A2 01 00                                        	mov	[compare_type],al
00007A7A: 80 3E 28                                              	cmp	byte [esi],'('
00007A7D: 0F 85 1F 8F FF FF                                     	jne	invalid_value
00007A83: E8 1A FF FF FF                                        	call	get_value_for_comparison
00007A88: 3A 5C 24 04                                           	cmp	bl,[esp+4]
00007A8C: 75 24                                                 	jne	values_not_relative
00007A8E: 08 DB                                                 	or	bl,bl
00007A90: 74 0C                                                 	jz	check_values_registers
00007A92: 8B 1D 24 A2 01 00                                     	mov	ebx,[symbol_identifier]
00007A98: 3B 5C 24 08                                           	cmp	ebx,[esp+8]
00007A9C: 75 14                                                 	jne	values_not_relative
                                                                      check_values_registers:
00007A9E: 3B 0C 24                                              	cmp	ecx,[esp]
00007AA1: 74 25                                                 	je	values_relative
00007AA3: C1 C9 10                                              	ror	ecx,16
00007AA6: 86 E9                                                 	xchg	ch,cl
00007AA8: C1 C9 10                                              	ror	ecx,16
00007AAB: 86 E9                                                 	xchg	ch,cl
00007AAD: 3B 0C 24                                              	cmp	ecx,[esp]
00007AB0: 74 16                                                 	je	values_relative
                                                                      values_not_relative:
00007AB2: 80 3D BA A2 01 00 F8                                  	cmp	[compare_type],0F8h
00007AB9: 75 08                                                 	jne	invalid_comparison
00007ABB: 83 C4 14                                              	add	esp,12+8
00007ABE: E9 98 02 00 00                                        	jmp	return_false
                                                                      invalid_comparison:
00007AC3: E8 50 F8 FF FF                                        	call	recoverable_misuse
                                                                      values_relative:
00007AC8: 5B                                                    	pop	ebx
00007AC9: C1 E3 10                                              	shl	ebx,16
00007ACC: 66 8B 1C 24                                           	mov	bx,[esp]
00007AD0: 83 C4 08                                              	add	esp,8
00007AD3: 59 5D                                                 	pop	ecx ebp
00007AD5: 80 3D BA A2 01 00 3D                                  	cmp	[compare_type],'='
00007ADC: 74 58                                                 	je	check_equal
00007ADE: 80 3D BA A2 01 00 F1                                  	cmp	[compare_type],0F1h
00007AE5: 0F 84 24 01 00 00                                     	je	check_not_equal
00007AEB: 80 3D BA A2 01 00 F8                                  	cmp	[compare_type],0F8h
00007AF2: 0F 84 68 02 00 00                                     	je	return_true
00007AF8: F7 C3 00 00 FF FF                                     	test	ebx,0FFFF0000h
00007AFE: 74 05                                                 	jz	check_less_or_greater
00007B00: E8 13 F8 FF FF                                        	call	recoverable_misuse
                                                                      check_less_or_greater:
00007B05: 80 3D BA A2 01 00 3E                                  	cmp	[compare_type],'>'
00007B0C: 74 49                                                 	je	check_greater
00007B0E: 80 3D BA A2 01 00 3C                                  	cmp	[compare_type],'<'
00007B15: 74 6E                                                 	je	check_less
00007B17: 80 3D BA A2 01 00 F2                                  	cmp	[compare_type],0F2h
00007B1E: 0F 84 8F 00 00 00                                     	je	check_not_less
00007B24: 80 3D BA A2 01 00 F3                                  	cmp	[compare_type],0F3h
00007B2B: 0F 84 B0 00 00 00                                     	je	check_not_greater
00007B31: E9 58 8E FF FF                                        	jmp	invalid_expression
                                                                      check_equal:
00007B36: 3A 3D B5 A2 01 00                                     	cmp	bh,[value_sign]
00007B3C: 0F 85 19 02 00 00                                     	jne	return_false
00007B42: 39 E8                                                 	cmp	eax,ebp
00007B44: 0F 85 11 02 00 00                                     	jne	return_false
00007B4A: 39 CA                                                 	cmp	edx,ecx
00007B4C: 0F 85 09 02 00 00                                     	jne	return_false
00007B52: E9 09 02 00 00                                        	jmp	return_true
                                                                      check_greater:
00007B57: 3A 3D B5 A2 01 00                                     	cmp	bh,[value_sign]
00007B5D: 0F 8F FD 01 00 00                                     	jg	return_true
00007B63: 0F 8C F2 01 00 00                                     	jl	return_false
00007B69: 39 CA                                                 	cmp	edx,ecx
00007B6B: 0F 82 EF 01 00 00                                     	jb	return_true
00007B71: 0F 87 E4 01 00 00                                     	ja	return_false
00007B77: 39 E8                                                 	cmp	eax,ebp
00007B79: 0F 82 E1 01 00 00                                     	jb	return_true
00007B7F: 0F 83 D6 01 00 00                                     	jae	return_false
                                                                      check_less:
00007B85: 3A 3D B5 A2 01 00                                     	cmp	bh,[value_sign]
00007B8B: 0F 8F CA 01 00 00                                     	jg	return_false
00007B91: 0F 8C C9 01 00 00                                     	jl	return_true
00007B97: 39 CA                                                 	cmp	edx,ecx
00007B99: 0F 82 BC 01 00 00                                     	jb	return_false
00007B9F: 0F 87 BB 01 00 00                                     	ja	return_true
00007BA5: 39 E8                                                 	cmp	eax,ebp
00007BA7: 0F 86 AE 01 00 00                                     	jbe	return_false
00007BAD: 0F 87 AD 01 00 00                                     	ja	return_true
                                                                      check_not_less:
00007BB3: 3A 3D B5 A2 01 00                                     	cmp	bh,[value_sign]
00007BB9: 0F 8F A1 01 00 00                                     	jg	return_true
00007BBF: 0F 8C 96 01 00 00                                     	jl	return_false
00007BC5: 39 CA                                                 	cmp	edx,ecx
00007BC7: 0F 82 93 01 00 00                                     	jb	return_true
00007BCD: 0F 87 88 01 00 00                                     	ja	return_false
00007BD3: 39 E8                                                 	cmp	eax,ebp
00007BD5: 0F 86 85 01 00 00                                     	jbe	return_true
00007BDB: 0F 87 7A 01 00 00                                     	ja	return_false
                                                                      check_not_greater:
00007BE1: 3A 3D B5 A2 01 00                                     	cmp	bh,[value_sign]
00007BE7: 0F 8F 6E 01 00 00                                     	jg	return_false
00007BED: 0F 8C 6D 01 00 00                                     	jl	return_true
00007BF3: 39 CA                                                 	cmp	edx,ecx
00007BF5: 0F 82 60 01 00 00                                     	jb	return_false
00007BFB: 0F 87 5F 01 00 00                                     	ja	return_true
00007C01: 39 E8                                                 	cmp	eax,ebp
00007C03: 0F 82 52 01 00 00                                     	jb	return_false
00007C09: 0F 83 51 01 00 00                                     	jae	return_true
                                                                      check_not_equal:
00007C0F: 3A 3D B5 A2 01 00                                     	cmp	bh,[value_sign]
00007C15: 0F 85 45 01 00 00                                     	jne	return_true
00007C1B: 39 E8                                                 	cmp	eax,ebp
00007C1D: 0F 85 3D 01 00 00                                     	jne	return_true
00007C23: 39 CA                                                 	cmp	edx,ecx
00007C25: 0F 85 35 01 00 00                                     	jne	return_true
00007C2B: E9 2B 01 00 00                                        	jmp	return_false
                                                                      logical_number:
00007C30: 59 5B 58 5A 58                                        	pop	ecx ebx eax edx eax
00007C35: 08 DB                                                 	or	bl,bl
00007C37: 75 05                                                 	jnz	invalid_logical_number
00007C39: 66 09 C9                                              	or	cx,cx
00007C3C: 74 05                                                 	jz	logical_number_ok
                                                                      invalid_logical_number:
00007C3E: E8 D5 F6 FF FF                                        	call	recoverable_misuse
                                                                      logical_number_ok:
00007C43: 84 FF                                                 	test	bh,bh
00007C45: 0F 85 15 01 00 00                                     	jnz	return_true
00007C4B: 09 D0                                                 	or	eax,edx
00007C4D: 0F 85 0D 01 00 00                                     	jnz	return_true
00007C53: E9 03 01 00 00                                        	jmp	return_false
                                                                      check_for_earlier_defined:
00007C58: 80 CF FF                                              	or	bh,-1
00007C5B: EB 02                                                 	jmp	check_if_expression_defined
                                                                      check_for_defined:
00007C5D: 30 FF                                                 	xor	bh,bh
                                                                      check_if_expression_defined:
00007C5F: 80 CB FF                                              	or	bl,-1
00007C62: 66 AD                                                 	lods	word [esi]
00007C64: 80 FC 28                                              	cmp	ah,'('
00007C67: 0F 85 21 8D FF FF                                     	jne	invalid_expression
                                                                      check_expression:
00007C6D: AC                                                    	lods	byte [esi]
00007C6E: 08 C0                                                 	or	al,al
00007C70: 74 33                                                 	jz	defined_string
00007C72: 3C 2E                                                 	cmp	al,'.'
00007C74: 74 2A                                                 	je	defined_fp_value
00007C76: 3C 29                                                 	cmp	al,')'
00007C78: 0F 84 93 00 00 00                                     	je	expression_checked
00007C7E: 3C 21                                                 	cmp	al,'!'
00007C80: 0F 84 08 8D FF FF                                     	je	invalid_expression
00007C86: 3C 0F                                                 	cmp	al,0Fh
00007C88: 74 E3                                                 	je	check_expression
00007C8A: 3C 10                                                 	cmp	al,10h
00007C8C: 74 0F                                                 	je	defined_register
00007C8E: 3C 11                                                 	cmp	al,11h
00007C90: 74 19                                                 	je	check_if_symbol_defined
00007C92: 3C 80                                                 	cmp	al,80h
00007C94: 73 D7                                                 	jae	check_expression
00007C96: 0F B6 C0                                              	movzx	eax,al
00007C99: 01 C6                                                 	add	esi,eax
00007C9B: EB D0                                                 	jmp	check_expression
                                                                      defined_register:
00007C9D: 46                                                    	inc	esi
00007C9E: EB CD                                                 	jmp	check_expression
                                                                      defined_fp_value:
00007CA0: 83 C6 0D                                              	add	esi,12+1
00007CA3: EB 6C                                                 	jmp	expression_checked
                                                                      defined_string:
00007CA5: AD                                                    	lods	dword [esi]
00007CA6: 01 C6                                                 	add	esi,eax
00007CA8: 46                                                    	inc	esi
00007CA9: EB 66                                                 	jmp	expression_checked
                                                                      check_if_symbol_defined:
00007CAB: AD                                                    	lods	dword [esi]
00007CAC: 83 F8 FF                                              	cmp	eax,-1
00007CAF: 0F 84 D9 8C FF FF                                     	je	invalid_expression
00007CB5: 83 F8 0F                                              	cmp	eax,0Fh
00007CB8: 72 B3                                                 	jb	check_expression
00007CBA: 0F 84 A5 8D FF FF                                     	je	reserved_word_used_as_symbol
00007CC0: 84 FF                                                 	test	bh,bh
00007CC2: 75 25                                                 	jnz	no_prediction
00007CC4: F6 40 08 04                                           	test	byte [eax+8],4
00007CC8: 75 1F                                                 	jnz	no_prediction
00007CCA: F6 40 08 01                                           	test	byte [eax+8],1
00007CCE: 74 32                                                 	jz	symbol_predicted_undefined
00007CD0: 66 8B 0D 52 A1 01 00                                  	mov	cx,[current_pass]
00007CD7: 66 2B 48 10                                           	sub	cx,[eax+16]
00007CDB: 74 90                                                 	jz	check_expression
00007CDD: 66 83 F9 01                                           	cmp	cx,1
00007CE1: 77 1F                                                 	ja	symbol_predicted_undefined
00007CE3: 80 48 08 C0                                           	or	byte [eax+8],40h+80h
00007CE7: EB 84                                                 	jmp	check_expression
                                                                      no_prediction:
00007CE9: F6 40 08 01                                           	test	byte [eax+8],1
00007CED: 74 1B                                                 	jz	symbol_undefined
00007CEF: 66 8B 0D 52 A1 01 00                                  	mov	cx,[current_pass]
00007CF6: 66 2B 48 10                                           	sub	cx,[eax+16]
00007CFA: 0F 84 6D FF FF FF                                     	jz	check_expression
00007D00: EB 08                                                 	jmp	symbol_undefined
                                                                      symbol_predicted_undefined:
00007D02: 80 48 08 40                                           	or	byte [eax+8],40h
00007D06: 80 60 08 7F                                           	and	byte [eax+8],not 80h
                                                                      symbol_undefined:
00007D0A: 30 DB                                                 	xor	bl,bl
00007D0C: E9 5C FF FF FF                                        	jmp	check_expression
                                                                      expression_checked:
00007D11: 88 D8                                                 	mov	al,bl
00007D13: EB 6E                                                 	jmp	logical_value_ok
                                                                      check_for_used:
00007D15: 66 AD                                                 	lods	word [esi]
00007D17: 80 FC 02                                              	cmp	ah,2
00007D1A: 0F 85 6E 8C FF FF                                     	jne	invalid_expression
00007D20: AD                                                    	lods	dword [esi]
00007D21: 83 F8 0F                                              	cmp	eax,0Fh
00007D24: 0F 82 26 8D FF FF                                     	jb	invalid_use_of_symbol
00007D2A: 0F 84 35 8D FF FF                                     	je	reserved_word_used_as_symbol
00007D30: 46                                                    	inc	esi
00007D31: F6 40 08 08                                           	test	byte [eax+8],8
00007D35: 74 19                                                 	jz	not_used
00007D37: 66 8B 0D 52 A1 01 00                                  	mov	cx,[current_pass]
00007D3E: 66 2B 48 12                                           	sub	cx,[eax+18]
00007D42: 74 1C                                                 	jz	return_true
00007D44: 66 83 F9 01                                           	cmp	cx,1
00007D48: 77 06                                                 	ja	not_used
00007D4A: 80 48 08 30                                           	or	byte [eax+8],10h+20h
00007D4E: EB 10                                                 	jmp	return_true
                                                                      not_used:
00007D50: 80 48 08 10                                           	or	byte [eax+8],10h
00007D54: 80 60 08 DF                                           	and	byte [eax+8],not 20h
00007D58: EB 01                                                 	jmp	return_false
                                                                      given_false:
00007D5A: 46                                                    	inc	esi
                                                                      return_false:
00007D5B: 30 C0                                                 	xor	al,al
00007D5D: EB 24                                                 	jmp	logical_value_ok
                                                                      given_true:
00007D5F: 46                                                    	inc	esi
                                                                      return_true:
00007D60: 0C FF                                                 	or	al,-1
00007D62: EB 1F                                                 	jmp	logical_value_ok
                                                                      logical_expression:
00007D64: AC                                                    	lods	byte [esi]
00007D65: 8A 15 BB A2 01 00                                     	mov	dl,[logical_value_wrapping]
00007D6B: 52                                                    	push	edx
00007D6C: E8 ED FB FF FF                                        	call	calculate_embedded_logical_expression
00007D71: 5A                                                    	pop	edx
00007D72: 88 15 BB A2 01 00                                     	mov	[logical_value_wrapping],dl
00007D78: 50                                                    	push	eax
00007D79: AC                                                    	lods	byte [esi]
00007D7A: 3C 92                                                 	cmp	al,92h
00007D7C: 0F 85 0C 8C FF FF                                     	jne	invalid_expression
00007D82: 58                                                    	pop	eax
                                                                      logical_value_ok:
00007D83: 5B                                                    	pop	ebx
00007D84: 30 D8                                                 	xor	al,bl
00007D86: C3                                                    	ret
                                                                
                                                                skip_symbol:
00007D87: AC                                                    	lods	byte [esi]
00007D88: 08 C0                                                 	or	al,al
00007D8A: 74 7C                                                 	jz	nothing_to_skip
00007D8C: 3C 0F                                                 	cmp	al,0Fh
00007D8E: 74 78                                                 	je	nothing_to_skip
00007D90: 3C 01                                                 	cmp	al,1
00007D92: 74 1D                                                 	je	skip_instruction
00007D94: 3C 02                                                 	cmp	al,2
00007D96: 74 16                                                 	je	skip_label
00007D98: 3C 03                                                 	cmp	al,3
00007D9A: 74 12                                                 	je	skip_label
00007D9C: 3C 04                                                 	cmp	al,4
00007D9E: 74 17                                                 	je	skip_special_label
00007DA0: 3C 20                                                 	cmp	al,20h
00007DA2: 72 10                                                 	jb	skip_assembler_symbol
00007DA4: 3C 28                                                 	cmp	al,'('
00007DA6: 74 23                                                 	je	skip_expression
00007DA8: 3C 5B                                                 	cmp	al,'['
00007DAA: 74 10                                                 	je	skip_address
                                                                      skip_done:
00007DAC: F8                                                    	clc
00007DAD: C3                                                    	ret
                                                                      skip_label:
00007DAE: 83 C6 02                                              	add	esi,2
                                                                      skip_instruction:
00007DB1: 83 C6 02                                              	add	esi,2
                                                                      skip_assembler_symbol:
00007DB4: 46                                                    	inc	esi
00007DB5: EB F5                                                 	jmp	skip_done
                                                                      skip_special_label:
00007DB7: 83 C6 04                                              	add	esi,4
00007DBA: EB F0                                                 	jmp	skip_done
                                                                      skip_address:
00007DBC: 8A 06                                                 	mov	al,[esi]
00007DBE: 24 F0                                                 	and	al,11110000b
00007DC0: 3C 60                                                 	cmp	al,60h
00007DC2: 72 07                                                 	jb	skip_expression
00007DC4: 3C 70                                                 	cmp	al,70h
00007DC6: 77 03                                                 	ja	skip_expression
00007DC8: 46                                                    	inc	esi
00007DC9: EB F1                                                 	jmp	skip_address
                                                                      skip_expression:
00007DCB: AC                                                    	lods	byte [esi]
00007DCC: 08 C0                                                 	or	al,al
00007DCE: 74 32                                                 	jz	skip_string
00007DD0: 3C 2E                                                 	cmp	al,'.'
00007DD2: 74 29                                                 	je	skip_fp_value
00007DD4: 3C 29                                                 	cmp	al,')'
00007DD6: 74 D4                                                 	je	skip_done
00007DD8: 3C 5D                                                 	cmp	al,']'
00007DDA: 74 D0                                                 	je	skip_done
00007DDC: 3C 21                                                 	cmp	al,'!'
00007DDE: 74 EB                                                 	je	skip_expression
00007DE0: 3C 0F                                                 	cmp	al,0Fh
00007DE2: 74 E7                                                 	je	skip_expression
00007DE4: 3C 10                                                 	cmp	al,10h
00007DE6: 74 12                                                 	je	skip_register
00007DE8: 3C 11                                                 	cmp	al,11h
00007DEA: 74 0B                                                 	je	skip_label_value
00007DEC: 3C 80                                                 	cmp	al,80h
00007DEE: 73 DB                                                 	jae	skip_expression
00007DF0: 0F B6 C0                                              	movzx	eax,al
00007DF3: 01 C6                                                 	add	esi,eax
00007DF5: EB D4                                                 	jmp	skip_expression
                                                                      skip_label_value:
00007DF7: 83 C6 03                                              	add	esi,3
                                                                      skip_register:
00007DFA: 46                                                    	inc	esi
00007DFB: EB CE                                                 	jmp	skip_expression
                                                                      skip_fp_value:
00007DFD: 83 C6 0C                                              	add	esi,12
00007E00: EB AA                                                 	jmp	skip_done
                                                                      skip_string:
00007E02: AD                                                    	lods	dword [esi]
00007E03: 01 C6                                                 	add	esi,eax
00007E05: 46                                                    	inc	esi
00007E06: EB A4                                                 	jmp	skip_done
                                                                      nothing_to_skip:
00007E08: 4E                                                    	dec	esi
00007E09: F9                                                    	stc
00007E0A: C3                                                    	ret
                                                                
                                                                expand_path:
00007E0B: AC                                                    	lods	byte [esi]
00007E0C: 3C 25                                                 	cmp	al,'%'
00007E0E: 74 12                                                 	je	environment_variable
00007E10: AA                                                    	stos	byte [edi]
00007E11: 08 C0                                                 	or	al,al
00007E13: 75 F6                                                 	jnz	expand_path
00007E15: 3B 3D 30 A1 01 00                                     	cmp	edi,[memory_end]
00007E1B: 0F 87 71 8A FF FF                                     	ja	out_of_memory
00007E21: C3                                                    	ret
                                                                      environment_variable:
00007E22: 89 F3                                                 	mov	ebx,esi
                                                                      find_variable_end:
00007E24: AC                                                    	lods	byte [esi]
00007E25: 08 C0                                                 	or	al,al
00007E27: 74 17                                                 	jz	not_environment_variable
00007E29: 3C 25                                                 	cmp	al,'%'
00007E2B: 75 F7                                                 	jne	find_variable_end
00007E2D: C6 46 FF 00                                           	mov	byte [esi-1],0
00007E31: 56                                                    	push	esi
00007E32: 89 DE                                                 	mov	esi,ebx
00007E34: E8 E8 84 FF FF                                        	call	get_environment_variable
00007E39: 5E                                                    	pop	esi
00007E3A: C6 46 FF 25                                           	mov	byte [esi-1],'%'
00007E3E: EB CB                                                 	jmp	expand_path
                                                                      not_environment_variable:
00007E40: B0 25                                                 	mov	al,'%'
00007E42: AA                                                    	stos	byte [edi]
00007E43: 89 DE                                                 	mov	esi,ebx
00007E45: EB C4                                                 	jmp	expand_path
                                                                get_include_directory:
00007E47: AC                                                    	lods	byte [esi]
00007E48: 3C 3B                                                 	cmp	al,';'
00007E4A: 74 07                                                 	je	include_directory_ok
00007E4C: AA                                                    	stos	byte [edi]
00007E4D: 08 C0                                                 	or	al,al
00007E4F: 75 F6                                                 	jnz	get_include_directory
00007E51: 4E                                                    	dec	esi
00007E52: 4F                                                    	dec	edi
                                                                      include_directory_ok:
00007E53: 80 7F FF 2F                                           	cmp	byte [edi-1],'/'
00007E57: 74 09                                                 	je	path_separator_ok
00007E59: 80 7F FF 5C                                           	cmp	byte [edi-1],'\'
00007E5D: 74 03                                                 	je	path_separator_ok
00007E5F: B0 2F                                                 	mov	al,'/'
00007E61: AA                                                    	stos	byte [edi]
                                                                      path_separator_ok:
00007E62: C3                                                    	ret
                                                                
                                                                include '..\formats.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                formatter:
00007E63: 89 3D F0 A1 01 00                                     	mov	[current_offset],edi
00007E69: 83 3D 48 A1 01 00 00                                  	cmp	[output_file],0
00007E70: 0F 85 34 01 00 00                                     	jne	output_path_ok
00007E76: 8B 35 44 A1 01 00                                     	mov	esi,[input_file]
00007E7C: 8B 3D 58 A1 01 00                                     	mov	edi,[free_additional_memory]
                                                                      duplicate_output_path:
00007E82: AC                                                    	lods	byte [esi]
00007E83: 3B 3D E8 A1 01 00                                     	cmp	edi,[structures_buffer]
00007E89: 0F 83 03 8A FF FF                                     	jae	out_of_memory
00007E8F: AA                                                    	stos	byte [edi]
00007E90: 08 C0                                                 	or	al,al
00007E92: 75 EE                                                 	jnz	duplicate_output_path
00007E94: 4F                                                    	dec	edi
00007E95: 89 F8                                                 	mov	eax,edi
                                                                      find_extension:
00007E97: 48                                                    	dec	eax
00007E98: 3B 05 58 A1 01 00                                     	cmp	eax,[free_additional_memory]
00007E9E: 72 11                                                 	jb	extension_found
00007EA0: 80 38 5C                                              	cmp	byte [eax],'\'
00007EA3: 74 0C                                                 	je	extension_found
00007EA5: 80 38 2F                                              	cmp	byte [eax],'/'
00007EA8: 74 07                                                 	je	extension_found
00007EAA: 80 38 2E                                              	cmp	byte [eax],'.'
00007EAD: 75 E8                                                 	jne	find_extension
00007EAF: 89 C7                                                 	mov	edi,eax
                                                                      extension_found:
00007EB1: 8D 47 09                                              	lea	eax,[edi+9]
00007EB4: 3B 05 E8 A1 01 00                                     	cmp	eax,[structures_buffer]
00007EBA: 0F 83 D2 89 FF FF                                     	jae	out_of_memory
00007EC0: 83 3D 94 A2 01 00 00                                  	cmp	[file_extension],0
00007EC7: 0F 85 AA 00 00 00                                     	jne	extension_specified
00007ECD: A0 BD A2 01 00                                        	mov	al,[output_format]
00007ED2: 3C 02                                                 	cmp	al,2
00007ED4: 74 71                                                 	je	exe_extension
00007ED6: 72 3F                                                 	jb	bin_extension
00007ED8: 3C 04                                                 	cmp	al,4
00007EDA: 74 51                                                 	je	obj_extension
00007EDC: 3C 05                                                 	cmp	al,5
00007EDE: 74 54                                                 	je	o_extension
00007EE0: 3C 03                                                 	cmp	al,3
00007EE2: 75 5F                                                 	jne	no_extension
00007EE4: 66 83 3D 56 A2 01 00 01                               	cmp	[subsystem],1
00007EEC: 74 1B                                                 	je	sys_extension
00007EEE: 66 83 3D 56 A2 01 00 0A                               	cmp	[subsystem],10
00007EF6: 73 18                                                 	jae	efi_extension
00007EF8: 0F BA 25 34 A2 01 00 08                               	bt	[format_flags],8
00007F00: 73 45                                                 	jnc	exe_extension
00007F02: B8 2E 64 6C 6C                                        	mov	eax,'.dll'
00007F07: EB 43                                                 	jmp	make_extension
                                                                      sys_extension:
00007F09: B8 2E 73 79 73                                        	mov	eax,'.sys'
00007F0E: EB 3C                                                 	jmp	make_extension
                                                                      efi_extension:
00007F10: B8 2E 65 66 69                                        	mov	eax,'.efi'
00007F15: EB 35                                                 	jmp	make_extension
                                                                      bin_extension:
00007F17: B8 2E 62 69 6E                                        	mov	eax,'.bin'
00007F1C: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
00007F24: 73 26                                                 	jnc	make_extension
00007F26: B8 2E 63 6F 6D                                        	mov	eax,'.com'
00007F2B: EB 1F                                                 	jmp	make_extension
                                                                      obj_extension:
00007F2D: B8 2E 6F 62 6A                                        	mov	eax,'.obj'
00007F32: EB 18                                                 	jmp	make_extension
                                                                      o_extension:
00007F34: B8 2E 6F 00 00                                        	mov	eax,'.o'
00007F39: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
00007F41: 73 09                                                 	jnc	make_extension
                                                                      no_extension:
00007F43: 31 C0                                                 	xor	eax,eax
00007F45: EB 05                                                 	jmp	make_extension
                                                                      exe_extension:
00007F47: B8 2E 65 78 65                                        	mov	eax,'.exe'
                                                                      make_extension:
00007F4C: 87 07                                                 	xchg	eax,[edi]
00007F4E: AF                                                    	scas	dword [edi]
00007F4F: C6 07 00                                              	mov	byte [edi],0
00007F52: AE                                                    	scas	byte [edi]
00007F53: 89 FE                                                 	mov	esi,edi
00007F55: AB                                                    	stos	dword [edi]
00007F56: 83 EF 09                                              	sub	edi,9
00007F59: 31 C0                                                 	xor	eax,eax
00007F5B: BB C7 A2 01 00                                        	mov	ebx,characters
                                                                      adapt_case:
00007F60: 8A 06                                                 	mov	al,[esi]
00007F62: 08 C0                                                 	or	al,al
00007F64: 74 09                                                 	jz	adapt_next
00007F66: D7                                                    	xlat	byte [ebx]
00007F67: 3A 06                                                 	cmp	al,[esi]
00007F69: 74 03                                                 	je	adapt_ok
00007F6B: 80 2F 20                                              	sub	byte [edi],20h
                                                                      adapt_ok:
00007F6E: 46                                                    	inc	esi
                                                                      adapt_next:
00007F6F: 47                                                    	inc	edi
00007F70: 80 3F 00                                              	cmp	byte [edi],0
00007F73: 75 EB                                                 	jne	adapt_case
00007F75: EB 10                                                 	jmp	extension_ok
                                                                      extension_specified:
00007F77: B0 2E                                                 	mov	al,'.'
00007F79: AA                                                    	stos	byte [edi]
00007F7A: 8B 35 94 A2 01 00                                     	mov	esi,[file_extension]
                                                                      copy_extension:
00007F80: AC                                                    	lods	byte [esi]
00007F81: AA                                                    	stos	byte [edi]
00007F82: 84 C0                                                 	test	al,al
00007F84: 75 FA                                                 	jnz	copy_extension
00007F86: 4F                                                    	dec	edi
                                                                      extension_ok:
00007F87: 89 FE                                                 	mov	esi,edi
00007F89: 8D 4E 01                                              	lea	ecx,[esi+1]
00007F8C: 2B 0D 58 A1 01 00                                     	sub	ecx,[free_additional_memory]
00007F92: 8B 3D E8 A1 01 00                                     	mov	edi,[structures_buffer]
00007F98: 4F                                                    	dec	edi
00007F99: FD                                                    	std
00007F9A: F3 A4                                                 	rep	movs byte [edi],[esi]
00007F9C: FC                                                    	cld
00007F9D: 47                                                    	inc	edi
00007F9E: 89 3D E8 A1 01 00                                     	mov	[structures_buffer],edi
00007FA4: 89 3D 48 A1 01 00                                     	mov	[output_file],edi
                                                                      output_path_ok:
00007FAA: 83 3D 4C A1 01 00 00                                  	cmp	[symbols_file],0
00007FB1: 74 4C                                                 	je	labels_table_ok
00007FB3: 8B 0D 30 A1 01 00                                     	mov	ecx,[memory_end]
00007FB9: 2B 0D B4 A1 01 00                                     	sub	ecx,[labels_list]
00007FBF: 8B 3D E4 A1 01 00                                     	mov	edi,[tagged_blocks]
00007FC5: 83 EF 08                                              	sub	edi,8
00007FC8: 89 0F                                                 	mov	[edi],ecx
00007FCA: 83 4F 04 FF                                           	or	dword [edi+4],-1
00007FCE: 29 CF                                                 	sub	edi,ecx
00007FD0: 3B 3D F0 A1 01 00                                     	cmp	edi,[current_offset]
00007FD6: 0F 86 B6 88 FF FF                                     	jbe	out_of_memory
00007FDC: 89 3D E4 A1 01 00                                     	mov	[tagged_blocks],edi
00007FE2: 8B 35 30 A1 01 00                                     	mov	esi,[memory_end]
                                                                      copy_labels:
00007FE8: 83 EE 20                                              	sub	esi,32
00007FEB: 3B 35 B4 A1 01 00                                     	cmp	esi,[labels_list]
00007FF1: 72 0C                                                 	jb	labels_table_ok
00007FF3: B9 08 00 00 00                                        	mov	ecx,32 shr 2
00007FF8: F3 A5                                                 	rep	movs dword [edi],[esi]
00007FFA: 83 EE 20                                              	sub	esi,32
00007FFD: EB E9                                                 	jmp	copy_labels
                                                                      labels_table_ok:
00007FFF: 8B 3D F0 A1 01 00                                     	mov	edi,[current_offset]
00008005: 80 3D BD A2 01 00 04                                  	cmp	[output_format],4
0000800C: 0F 84 D1 1E 00 00                                     	je	coff_formatter
00008012: 80 3D BD A2 01 00 05                                  	cmp	[output_format],5
00008019: 75 0E                                                 	jne	common_formatter
0000801B: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
00008023: 0F 83 51 26 00 00                                     	jnc	elf_formatter
                                                                      common_formatter:
00008029: 89 F8                                                 	mov	eax,edi
0000802B: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
00008031: A3 68 A1 01 00                                        	mov	[real_code_size],eax
00008036: 3B 3D CC A1 01 00                                     	cmp	edi,[undefined_data_end]
0000803C: 75 06                                                 	jne	calculate_code_size
0000803E: 8B 3D C8 A1 01 00                                     	mov	edi,[undefined_data_start]
                                                                      calculate_code_size:
00008044: 89 3D F0 A1 01 00                                     	mov	[current_offset],edi
0000804A: 2B 3D 60 A1 01 00                                     	sub	edi,[code_start]
00008050: 89 3D 64 A1 01 00                                     	mov	[code_size],edi
00008056: 83 25 6C A1 01 00 00                                  	and	[written_size],0
0000805D: 8B 15 48 A1 01 00                                     	mov	edx,[output_file]
00008063: E8 32 83 FF FF                                        	call	create
00008068: 0F 82 42 88 FF FF                                     	jc	write_failed
0000806E: 80 3D BD A2 01 00 03                                  	cmp	[output_format],3
00008075: 75 19                                                 	jne	stub_written
00008077: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
0000807D: 8B 0D 48 A2 01 00                                     	mov	ecx,[stub_size]
00008083: 29 CA                                                 	sub	edx,ecx
00008085: 01 0D 6C A1 01 00                                     	add	[written_size],ecx
0000808B: E8 40 83 FF FF                                        	call	write
                                                                      stub_written:
00008090: 80 3D BD A2 01 00 02                                  	cmp	[output_format],2
00008097: 75 05                                                 	jne	write_output
00008099: E8 10 06 00 00                                        	call	write_mz_header
                                                                      write_output:
0000809E: E8 13 00 00 00                                        	call	write_code
                                                                      output_written:
000080A3: E8 0E 83 FF FF                                        	call	close
000080A8: 83 3D 4C A1 01 00 00                                  	cmp	[symbols_file],0
000080AF: 0F 85 1E 8A FF FF                                     	jne	dump_symbols
000080B5: C3                                                    	ret
                                                                      write_code:
000080B6: A1 6C A1 01 00                                        	mov	eax,[written_size]
000080BB: A3 70 A1 01 00                                        	mov	[headers_size],eax
000080C0: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
000080C6: 8B 0D 64 A1 01 00                                     	mov	ecx,[code_size]
000080CC: 01 0D 6C A1 01 00                                     	add	[written_size],ecx
000080D2: 8D 04 0A                                              	lea	eax,[edx+ecx]
000080D5: E8 F6 82 FF FF                                        	call	write
000080DA: 0F 82 D0 87 FF FF                                     	jc	write_failed
000080E0: C3                                                    	ret
                                                                format_directive:
000080E1: 3B 3D 60 A1 01 00                                     	cmp	edi,[code_start]
000080E7: 0F 85 94 89 FF FF                                     	jne	unexpected_instruction
000080ED: 8B 2D C4 A1 01 00                                     	mov	ebp,[addressing_space]
000080F3: 3E F6 45 0A 01                                        	test	byte [ds:ebp+0Ah],1
000080F8: 0F 85 83 89 FF FF                                     	jnz	unexpected_instruction
000080FE: 80 3D BD A2 01 00 00                                  	cmp	[output_format],0
00008105: 0F 85 76 89 FF FF                                     	jne	unexpected_instruction
0000810B: AC                                                    	lods	byte [esi]
0000810C: 3C 1C                                                 	cmp	al,1Ch
0000810E: 74 65                                                 	je	format_prefix
00008110: 3C 18                                                 	cmp	al,18h
00008112: 0F 85 08 88 FF FF                                     	jne	invalid_argument
00008118: AC                                                    	lods	byte [esi]
                                                                      select_format:
00008119: 88 C2                                                 	mov	dl,al
0000811B: C0 E8 04                                              	shr	al,4
0000811E: A2 BD A2 01 00                                        	mov	[output_format],al
00008123: 83 E2 0F                                              	and	edx,0Fh
00008126: 09 15 34 A2 01 00                                     	or	[format_flags],edx
0000812C: 3C 02                                                 	cmp	al,2
0000812E: 0F 84 13 03 00 00                                     	je	format_mz
00008134: 3C 03                                                 	cmp	al,3
00008136: 0F 84 74 08 00 00                                     	je	format_pe
0000813C: 3C 04                                                 	cmp	al,4
0000813E: 0F 84 BE 1A 00 00                                     	je	format_coff
00008144: 3C 05                                                 	cmp	al,5
00008146: 0F 84 0B 22 00 00                                     	je	format_elf
                                                                      format_defined:
0000814C: 80 3E 86                                              	cmp	byte [esi],86h
0000814F: 0F 85 1B CE FF FF                                     	jne	instruction_assembled
00008155: 66 83 7E 01 28                                        	cmp	word [esi+1],'('
0000815A: 0F 85 C0 87 FF FF                                     	jne	invalid_argument
00008160: 8B 46 03                                              	mov	eax,[esi+3]
00008163: 83 C6 07                                              	add	esi,3+4
00008166: 89 35 94 A2 01 00                                     	mov	[file_extension],esi
0000816C: 8D 74 06 01                                           	lea	esi,[esi+eax+1]
00008170: E9 FB CD FF FF                                        	jmp	instruction_assembled
                                                                      format_prefix:
00008175: AC                                                    	lods	byte [esi]
00008176: 88 C4                                                 	mov	ah,al
00008178: AC                                                    	lods	byte [esi]
00008179: 3C 18                                                 	cmp	al,18h
0000817B: 0F 85 9F 87 FF FF                                     	jne	invalid_argument
00008181: AC                                                    	lods	byte [esi]
00008182: 89 C2                                                 	mov	edx,eax
00008184: C0 EA 04                                              	shr	dl,4
00008187: C0 EE 04                                              	shr	dh,4
0000818A: 38 F2                                                 	cmp	dl,dh
0000818C: 0F 85 8E 87 FF FF                                     	jne	invalid_argument
00008192: 08 E0                                                 	or	al,ah
00008194: EB 83                                                 	jmp	select_format
                                                                entry_directive:
00008196: 0F BA 2D 34 A2 01 00 10                               	bts	[format_flags],10h
0000819E: 0F 82 F2 88 FF FF                                     	jc	setting_already_specified
000081A4: A0 BD A2 01 00                                        	mov	al,[output_format]
000081A9: 3C 02                                                 	cmp	al,2
000081AB: 0F 84 A4 03 00 00                                     	je	mz_entry
000081B1: 3C 03                                                 	cmp	al,3
000081B3: 0F 84 6B 0F 00 00                                     	je	pe_entry
000081B9: 3C 05                                                 	cmp	al,5
000081BB: 0F 85 69 87 FF FF                                     	jne	illegal_instruction
000081C1: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
000081C9: 0F 82 CC 2C 00 00                                     	jc	elf_entry
000081CF: E9 56 87 FF FF                                        	jmp	illegal_instruction
                                                                stack_directive:
000081D4: 0F BA 2D 34 A2 01 00 11                               	bts	[format_flags],11h
000081DC: 0F 82 B4 88 FF FF                                     	jc	setting_already_specified
000081E2: A0 BD A2 01 00                                        	mov	al,[output_format]
000081E7: 3C 02                                                 	cmp	al,2
000081E9: 0F 84 E5 03 00 00                                     	je	mz_stack
000081EF: 3C 03                                                 	cmp	al,3
000081F1: 0F 84 C4 0F 00 00                                     	je	pe_stack
000081F7: E9 2E 87 FF FF                                        	jmp	illegal_instruction
                                                                heap_directive:
000081FC: 0F BA 2D 34 A2 01 00 12                               	bts	[format_flags],12h
00008204: 0F 82 8C 88 FF FF                                     	jc	setting_already_specified
0000820A: A0 BD A2 01 00                                        	mov	al,[output_format]
0000820F: 3C 02                                                 	cmp	al,2
00008211: 0F 84 49 04 00 00                                     	je	mz_heap
00008217: 3C 03                                                 	cmp	al,3
00008219: 0F 84 B1 10 00 00                                     	je	pe_heap
0000821F: E9 06 87 FF FF                                        	jmp	illegal_instruction
                                                                segment_directive:
00008224: A0 BD A2 01 00                                        	mov	al,[output_format]
00008229: 3C 02                                                 	cmp	al,2
0000822B: 0F 84 98 02 00 00                                     	je	mz_segment
00008231: 3C 05                                                 	cmp	al,5
00008233: 0F 84 A9 2C 00 00                                     	je	elf_segment
00008239: E9 EC 86 FF FF                                        	jmp	illegal_instruction
                                                                section_directive:
0000823E: A0 BD A2 01 00                                        	mov	al,[output_format]
00008243: 3C 03                                                 	cmp	al,3
00008245: 0F 84 A4 0B 00 00                                     	je	pe_section
0000824B: 3C 04                                                 	cmp	al,4
0000824D: 0F 84 34 1A 00 00                                     	je	coff_section
00008253: 3C 05                                                 	cmp	al,5
00008255: 0F 84 40 22 00 00                                     	je	elf_section
0000825B: E9 CA 86 FF FF                                        	jmp	illegal_instruction
                                                                public_directive:
00008260: A0 BD A2 01 00                                        	mov	al,[output_format]
00008265: 3C 04                                                 	cmp	al,4
00008267: 74 16                                                 	je	public_allowed
00008269: 3C 05                                                 	cmp	al,5
0000826B: 0F 85 B9 86 FF FF                                     	jne	illegal_instruction
00008271: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
00008279: 0F 82 AB 86 FF FF                                     	jc	illegal_instruction
                                                                      public_allowed:
0000827F: C6 05 A3 A2 01 00 C0                                  	mov	[base_code],0C0h
00008286: AC                                                    	lods	byte [esi]
00008287: 3C 02                                                 	cmp	al,2
00008289: 74 1A                                                 	je	public_label
0000828B: 3C 1D                                                 	cmp	al,1Dh
0000828D: 0F 85 8D 86 FF FF                                     	jne	invalid_argument
00008293: AC                                                    	lods	byte [esi]
00008294: 24 07                                                 	and	al,7
00008296: 00 05 A3 A2 01 00                                     	add	[base_code],al
0000829C: AC                                                    	lods	byte [esi]
0000829D: 3C 02                                                 	cmp	al,2
0000829F: 0F 85 7B 86 FF FF                                     	jne	invalid_argument
                                                                      public_label:
000082A5: AD                                                    	lods	dword [esi]
000082A6: 83 F8 0F                                              	cmp	eax,0Fh
000082A9: 0F 82 A1 87 FF FF                                     	jb	invalid_use_of_symbol
000082AF: 0F 84 B0 87 FF FF                                     	je	reserved_word_used_as_symbol
000082B5: 46                                                    	inc	esi
000082B6: 66 8B 15 52 A1 01 00                                  	mov	dx,[current_pass]
000082BD: 66 89 50 12                                           	mov	[eax+18],dx
000082C1: 80 48 08 08                                           	or	byte [eax+8],8
000082C5: 89 C3                                                 	mov	ebx,eax
000082C7: E8 81 ED FF FF                                        	call	store_label_reference
000082CC: 89 D8                                                 	mov	eax,ebx
000082CE: 8B 1D 58 A1 01 00                                     	mov	ebx,[free_additional_memory]
000082D4: 8D 53 10                                              	lea	edx,[ebx+10h]
000082D7: 3B 15 E8 A1 01 00                                     	cmp	edx,[structures_buffer]
000082DD: 0F 83 AF 85 FF FF                                     	jae	out_of_memory
000082E3: 89 15 58 A1 01 00                                     	mov	[free_additional_memory],edx
000082E9: 89 43 08                                              	mov	[ebx+8],eax
000082EC: A1 74 A1 01 00                                        	mov	eax,[current_line]
000082F1: 89 43 0C                                              	mov	[ebx+0Ch],eax
000082F4: AC                                                    	lods	byte [esi]
000082F5: 3C 86                                                 	cmp	al,86h
000082F7: 0F 85 23 86 FF FF                                     	jne	invalid_argument
000082FD: 66 AD                                                 	lods	word [esi]
000082FF: 66 83 F8 28                                           	cmp	ax,'('
00008303: 0F 85 17 86 FF FF                                     	jne	invalid_argument
00008309: 89 73 04                                              	mov	[ebx+4],esi
0000830C: AD                                                    	lods	dword [esi]
0000830D: 8D 74 06 01                                           	lea	esi,[esi+eax+1]
00008311: A0 A3 A2 01 00                                        	mov	al,[base_code]
00008316: 88 03                                                 	mov	[ebx],al
00008318: E9 53 CC FF FF                                        	jmp	instruction_assembled
                                                                extrn_directive:
0000831D: A0 BD A2 01 00                                        	mov	al,[output_format]
00008322: 3C 04                                                 	cmp	al,4
00008324: 74 16                                                 	je	extrn_allowed
00008326: 3C 05                                                 	cmp	al,5
00008328: 0F 85 FC 85 FF FF                                     	jne	illegal_instruction
0000832E: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
00008336: 0F 82 EE 85 FF FF                                     	jc	illegal_instruction
                                                                      extrn_allowed:
0000833C: 66 AD                                                 	lods	word [esi]
0000833E: 66 83 F8 28                                           	cmp	ax,'('
00008342: 0F 85 D8 85 FF FF                                     	jne	invalid_argument
00008348: 89 F3                                                 	mov	ebx,esi
0000834A: AD                                                    	lods	dword [esi]
0000834B: 8D 74 06 01                                           	lea	esi,[esi+eax+1]
0000834F: 8B 15 58 A1 01 00                                     	mov	edx,[free_additional_memory]
00008355: 8D 42 0C                                              	lea	eax,[edx+0Ch]
00008358: 3B 05 E8 A1 01 00                                     	cmp	eax,[structures_buffer]
0000835E: 0F 83 2E 85 FF FF                                     	jae	out_of_memory
00008364: A3 58 A1 01 00                                        	mov	[free_additional_memory],eax
00008369: C6 02 80                                              	mov	byte [edx],80h
0000836C: 89 5A 04                                              	mov	[edx+4],ebx
0000836F: AC                                                    	lods	byte [esi]
00008370: 3C 86                                                 	cmp	al,86h
00008372: 0F 85 A8 85 FF FF                                     	jne	invalid_argument
00008378: AC                                                    	lods	byte [esi]
00008379: 3C 02                                                 	cmp	al,2
0000837B: 0F 85 9F 85 FF FF                                     	jne	invalid_argument
00008381: AD                                                    	lods	dword [esi]
00008382: 83 F8 0F                                              	cmp	eax,0Fh
00008385: 0F 82 C5 86 FF FF                                     	jb	invalid_use_of_symbol
0000838B: 0F 84 D4 86 FF FF                                     	je	reserved_word_used_as_symbol
00008391: 46                                                    	inc	esi
00008392: 89 C3                                                 	mov	ebx,eax
00008394: 30 E4                                                 	xor	ah,ah
00008396: AC                                                    	lods	byte [esi]
00008397: 3C 3A                                                 	cmp	al,':'
00008399: 74 05                                                 	je	get_extrn_size
0000839B: 4E                                                    	dec	esi
0000839C: 3C 11                                                 	cmp	al,11h
0000839E: 75 0A                                                 	jne	extrn_size_ok
                                                                      get_extrn_size:
000083A0: 66 AD                                                 	lods	word [esi]
000083A2: 3C 11                                                 	cmp	al,11h
000083A4: 0F 85 76 85 FF FF                                     	jne	invalid_argument
                                                                      extrn_size_ok:
000083AA: 89 15 28 A2 01 00                                     	mov	[address_symbol],edx
000083B0: 88 25 AE A2 01 00                                     	mov	[label_size],ah
000083B6: 0F B6 CC                                              	movzx	ecx,ah
000083B9: 89 4A 08                                              	mov	[edx+8],ecx
000083BC: 31 C0                                                 	xor	eax,eax
000083BE: 31 D2                                                 	xor	edx,edx
000083C0: 31 ED                                                 	xor	ebp,ebp
000083C2: C6 05 B8 A2 01 00 00                                  	mov	[address_sign],0
000083C9: B5 02                                                 	mov	ch,2
000083CB: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
000083D5: 0F 84 E9 CC FF FF                                     	jz	make_free_label
000083DB: B5 04                                                 	mov	ch,4
000083DD: E9 E2 CC FF FF                                        	jmp	make_free_label
                                                                mark_relocation:
000083E2: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
000083E9: 74 3D                                                 	je	relocation_ok
000083EB: 8B 2D C4 A1 01 00                                     	mov	ebp,[addressing_space]
000083F1: 3E F6 45 0A 01                                        	test	byte [ds:ebp+0Ah],1
000083F6: 75 30                                                 	jnz	relocation_ok
000083F8: 80 3D BD A2 01 00 02                                  	cmp	[output_format],2
000083FF: 74 77                                                 	je	mark_mz_relocation
00008401: 80 3D BD A2 01 00 03                                  	cmp	[output_format],3
00008408: 0F 84 9B 0F 00 00                                     	je	mark_pe_relocation
0000840E: 80 3D BD A2 01 00 04                                  	cmp	[output_format],4
00008415: 0F 84 D1 19 00 00                                     	je	mark_coff_relocation
0000841B: 80 3D BD A2 01 00 05                                  	cmp	[output_format],5
00008422: 0F 84 87 21 00 00                                     	je	mark_elf_relocation
                                                                      relocation_ok:
00008428: C3                                                    	ret
                                                                close_pass:
00008429: A0 BD A2 01 00                                        	mov	al,[output_format]
0000842E: 3C 03                                                 	cmp	al,3
00008430: 0F 84 C9 16 00 00                                     	je	close_pe
00008436: 3C 04                                                 	cmp	al,4
00008438: 0F 84 8C 1A 00 00                                     	je	close_coff
0000843E: 3C 05                                                 	cmp	al,5
00008440: 0F 84 0D 22 00 00                                     	je	close_elf
00008446: C3                                                    	ret
                                                                
                                                                format_mz:
00008447: 8B 15 34 A1 01 00                                     	mov	edx,[additional_memory]
0000844D: 57                                                    	push	edi
0000844E: 89 D7                                                 	mov	edi,edx
00008450: B9 07 00 00 00                                        	mov	ecx,1Ch shr 2
00008455: 31 C0                                                 	xor	eax,eax
00008457: F3 AB                                                 	rep	stos dword [edi]
00008459: 89 3D 58 A1 01 00                                     	mov	[free_additional_memory],edi
0000845F: 5F                                                    	pop	edi
00008460: 66 C7 42 0C FF FF                                     	mov	word [edx+0Ch],0FFFFh
00008466: 66 C7 42 10 00 10                                     	mov	word [edx+10h],1000h
0000846C: C6 05 BE A2 01 00 10                                  	mov	[code_type],16
00008473: E9 D4 FC FF FF                                        	jmp	format_defined
                                                                mark_mz_relocation:
00008478: 50 53                                                 	push	eax ebx
0000847A: 66 FF 05 40 A2 01 00                                  	inc	word [number_of_relocations]
00008481: 0F 84 3A 84 FF FF                                     	jz	format_limitations_exceeded
00008487: 8B 1D 58 A1 01 00                                     	mov	ebx,[free_additional_memory]
0000848D: 89 F8                                                 	mov	eax,edi
0000848F: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
00008495: 66 89 03                                              	mov	[ebx],ax
00008498: C1 E8 10                                              	shr	eax,16
0000849B: 66 C1 E0 0C                                           	shl	ax,12
0000849F: 66 89 43 02                                           	mov	[ebx+2],ax
000084A3: 66 83 3B FF                                           	cmp	word [ebx],0FFFFh
000084A7: 75 08                                                 	jne	mz_relocation_ok
000084A9: 66 FF 43 02                                           	inc	word [ebx+2]
000084AD: 66 83 2B 10                                           	sub	word [ebx],10h
                                                                      mz_relocation_ok:
000084B1: 83 C3 04                                              	add	ebx,4
000084B4: 3B 1D E8 A1 01 00                                     	cmp	ebx,[structures_buffer]
000084BA: 0F 83 D2 83 FF FF                                     	jae	out_of_memory
000084C0: 89 1D 58 A1 01 00                                     	mov	[free_additional_memory],ebx
000084C6: 5B 58                                                 	pop	ebx eax
000084C8: C3                                                    	ret
                                                                mz_segment:
000084C9: AC                                                    	lods	byte [esi]
000084CA: 3C 02                                                 	cmp	al,2
000084CC: 0F 85 4E 84 FF FF                                     	jne	invalid_argument
000084D2: AD                                                    	lods	dword [esi]
000084D3: 83 F8 0F                                              	cmp	eax,0Fh
000084D6: 0F 82 74 85 FF FF                                     	jb	invalid_use_of_symbol
000084DC: 0F 84 83 85 FF FF                                     	je	reserved_word_used_as_symbol
000084E2: 46                                                    	inc	esi
000084E3: 89 C3                                                 	mov	ebx,eax
000084E5: 89 F8                                                 	mov	eax,edi
000084E7: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
000084ED: B9 0F 00 00 00                                        	mov	ecx,0Fh
000084F2: 83 C0 0F                                              	add	eax,0Fh
000084F5: 83 E0 0F                                              	and	eax,1111b
000084F8: 29 C1                                                 	sub	ecx,eax
000084FA: 89 FA                                                 	mov	edx,edi
000084FC: 31 C0                                                 	xor	eax,eax
000084FE: F3 AA                                                 	rep	stos byte [edi]
00008500: 89 D0                                                 	mov	eax,edx
00008502: E8 52 D8 FF FF                                        	call	undefined_data
00008507: 53                                                    	push	ebx
00008508: E8 61 C6 FF FF                                        	call	create_addressing_space
0000850D: 5B                                                    	pop	ebx
0000850E: 89 F8                                                 	mov	eax,edi
00008510: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
00008516: C1 E8 04                                              	shr	eax,4
00008519: 3D 00 00 01 00                                        	cmp	eax,10000h
0000851E: 0F 83 88 84 FF FF                                     	jae	value_out_of_range
00008524: 89 C2                                                 	mov	edx,eax
00008526: B0 10                                                 	mov	al,16
00008528: 80 3E 13                                              	cmp	byte [esi],13h
0000852B: 75 02                                                 	jne	segment_type_ok
0000852D: 46                                                    	inc	esi
0000852E: AC                                                    	lods	byte [esi]
                                                                      segment_type_ok:
0000852F: A2 BE A2 01 00                                        	mov	[code_type],al
00008534: 89 D0                                                 	mov	eax,edx
00008536: B5 01                                                 	mov	ch,1
00008538: C6 05 B8 A2 01 00 00                                  	mov	[address_sign],0
0000853F: 31 D2                                                 	xor	edx,edx
00008541: 31 ED                                                 	xor	ebp,ebp
00008543: C6 05 AE A2 01 00 00                                  	mov	[label_size],0
0000854A: 89 15 28 A2 01 00                                     	mov	[address_symbol],edx
00008550: E9 6F CB FF FF                                        	jmp	make_free_label
                                                                mz_entry:
00008555: AC                                                    	lods	byte [esi]
00008556: 3C 28                                                 	cmp	al,'('
00008558: 0F 85 C2 83 FF FF                                     	jne	invalid_argument
0000855E: E8 D5 ED FF FF                                        	call	get_word_value
00008563: 80 3D B4 A2 01 00 01                                  	cmp	[value_type],1
0000856A: 74 05                                                 	je	initial_cs_ok
0000856C: E8 43 00 00 00                                        	call	recoverable_invalid_address
                                                                      initial_cs_ok:
00008571: 8B 15 34 A1 01 00                                     	mov	edx,[additional_memory]
00008577: 66 89 42 16                                           	mov	[edx+16h],ax
0000857B: AC                                                    	lods	byte [esi]
0000857C: 3C 3A                                                 	cmp	al,':'
0000857E: 0F 85 9C 83 FF FF                                     	jne	invalid_argument
00008584: AC                                                    	lods	byte [esi]
00008585: 3C 28                                                 	cmp	al,'('
00008587: 0F 85 93 83 FF FF                                     	jne	invalid_argument
0000858D: 0F 87 05 84 FF FF                                     	ja	invalid_address
00008593: E8 A0 ED FF FF                                        	call	get_word_value
00008598: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000859F: 0F 85 AB 84 FF FF                                     	jne	invalid_use_of_symbol
000085A5: 8B 15 34 A1 01 00                                     	mov	edx,[additional_memory]
000085AB: 66 89 42 14                                           	mov	[edx+14h],ax
000085AF: E9 BC C9 FF FF                                        	jmp	instruction_assembled
                                                                      recoverable_invalid_address:
000085B4: 83 3D DC A1 01 00 00                                  	cmp	[error_line],0
000085BB: 75 16                                                 	jne	ignore_invalid_address
000085BD: FF 35 74 A1 01 00                                     	push	[current_line]
000085C3: 8F 05 DC A1 01 00                                     	pop	[error_line]
000085C9: C7 05 E0 A1 01 00 98 09 00 00                         	mov	[error],invalid_address
                                                                      ignore_invalid_address:
000085D3: C3                                                    	ret
                                                                mz_stack:
000085D4: AC                                                    	lods	byte [esi]
000085D5: 3C 28                                                 	cmp	al,'('
000085D7: 0F 85 43 83 FF FF                                     	jne	invalid_argument
000085DD: E8 56 ED FF FF                                        	call	get_word_value
000085E2: 80 3E 3A                                              	cmp	byte [esi],':'
000085E5: 74 26                                                 	je	stack_pointer
000085E7: 66 83 F8 10                                           	cmp	ax,10h
000085EB: 0F 82 B1 83 FF FF                                     	jb	invalid_value
000085F1: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
000085F8: 0F 85 52 84 FF FF                                     	jne	invalid_use_of_symbol
000085FE: 8B 15 34 A1 01 00                                     	mov	edx,[additional_memory]
00008604: 66 89 42 10                                           	mov	[edx+10h],ax
00008608: E9 63 C9 FF FF                                        	jmp	instruction_assembled
                                                                      stack_pointer:
0000860D: 80 3D B4 A2 01 00 01                                  	cmp	[value_type],1
00008614: 74 05                                                 	je	initial_ss_ok
00008616: E8 99 FF FF FF                                        	call	recoverable_invalid_address
                                                                      initial_ss_ok:
0000861B: 8B 15 34 A1 01 00                                     	mov	edx,[additional_memory]
00008621: 66 89 42 0E                                           	mov	[edx+0Eh],ax
00008625: AC                                                    	lods	byte [esi]
00008626: 3C 3A                                                 	cmp	al,':'
00008628: 0F 85 F2 82 FF FF                                     	jne	invalid_argument
0000862E: AC                                                    	lods	byte [esi]
0000862F: 3C 28                                                 	cmp	al,'('
00008631: 0F 85 E9 82 FF FF                                     	jne	invalid_argument
00008637: E8 FC EC FF FF                                        	call	get_word_value
0000863C: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
00008643: 0F 85 07 84 FF FF                                     	jne	invalid_use_of_symbol
00008649: 8B 15 34 A1 01 00                                     	mov	edx,[additional_memory]
0000864F: 66 89 42 10                                           	mov	[edx+10h],ax
00008653: 0F BA 2D 34 A2 01 00 04                               	bts	[format_flags],4
0000865B: E9 10 C9 FF FF                                        	jmp	instruction_assembled
                                                                mz_heap:
00008660: 80 3D BD A2 01 00 02                                  	cmp	[output_format],2
00008667: 0F 85 BD 82 FF FF                                     	jne	illegal_instruction
0000866D: AC                                                    	lods	byte [esi]
0000866E: E8 B7 86 00 00                                        	call	get_size_operator
00008673: 80 FC 01                                              	cmp	ah,1
00008676: 0F 84 26 83 FF FF                                     	je	invalid_value
0000867C: 80 FC 02                                              	cmp	ah,2
0000867F: 0F 87 1D 83 FF FF                                     	ja	invalid_value
00008685: 3C 28                                                 	cmp	al,'('
00008687: 0F 85 93 82 FF FF                                     	jne	invalid_argument
0000868D: E8 A6 EC FF FF                                        	call	get_word_value
00008692: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
00008699: 0F 85 B1 83 FF FF                                     	jne	invalid_use_of_symbol
0000869F: 8B 15 34 A1 01 00                                     	mov	edx,[additional_memory]
000086A5: 66 89 42 0C                                           	mov	[edx+0Ch],ax
000086A9: E9 C2 C8 FF FF                                        	jmp	instruction_assembled
                                                                write_mz_header:
000086AE: 8B 15 34 A1 01 00                                     	mov	edx,[additional_memory]
000086B4: 0F BA 25 34 A2 01 00 04                               	bt	[format_flags],4
000086BC: 72 1C                                                 	jc	mz_stack_ok
000086BE: A1 68 A1 01 00                                        	mov	eax,[real_code_size]
000086C3: 48                                                    	dec	eax
000086C4: C1 E8 04                                              	shr	eax,4
000086C7: 40                                                    	inc	eax
000086C8: 66 89 42 0E                                           	mov	[edx+0Eh],ax
000086CC: C1 E0 04                                              	shl	eax,4
000086CF: 0F B7 4A 10                                           	movzx	ecx,word [edx+10h]
000086D3: 01 C8                                                 	add	eax,ecx
000086D5: A3 68 A1 01 00                                        	mov	[real_code_size],eax
                                                                      mz_stack_ok:
000086DA: 8B 3D 58 A1 01 00                                     	mov	edi,[free_additional_memory]
000086E0: A1 40 A2 01 00                                        	mov	eax,[number_of_relocations]
000086E5: C1 E0 02                                              	shl	eax,2
000086E8: 83 C0 1C                                              	add	eax,1Ch
000086EB: 29 C7                                                 	sub	edi,eax
000086ED: 87 3D 58 A1 01 00                                     	xchg	edi,[free_additional_memory]
000086F3: B9 0F 00 00 00                                        	mov	ecx,0Fh
000086F8: 83 C0 0F                                              	add	eax,0Fh
000086FB: 83 E0 0F                                              	and	eax,1111b
000086FE: 29 C1                                                 	sub	ecx,eax
00008700: 30 C0                                                 	xor	al,al
00008702: F3 AA                                                 	rep	stos byte [edi]
00008704: 2B 3D 58 A1 01 00                                     	sub	edi,[free_additional_memory]
0000870A: 89 F9                                                 	mov	ecx,edi
0000870C: C1 EF 04                                              	shr	edi,4
0000870F: 66 C7 02 4D 5A                                        	mov	word [edx],'MZ' 	; signature
00008714: 66 89 7A 08                                           	mov	[edx+8],di		; header size in paragraphs
00008718: A1 40 A2 01 00                                        	mov	eax,[number_of_relocations]
0000871D: 66 89 42 06                                           	mov	[edx+6],ax		; number of relocation entries
00008721: A1 64 A1 01 00                                        	mov	eax,[code_size]
00008726: 01 C8                                                 	add	eax,ecx
00008728: 89 C6                                                 	mov	esi,eax
0000872A: C1 EE 09                                              	shr	esi,9
0000872D: 25 FF 01 00 00                                        	and	eax,1FFh
00008732: 66 46                                                 	inc	si
00008734: 66 09 C0                                              	or	ax,ax
00008737: 75 02                                                 	jnz	mz_size_ok
00008739: 66 4E                                                 	dec	si
                                                                      mz_size_ok:
0000873B: 66 89 42 02                                           	mov	[edx+2],ax		; number of bytes in last page
0000873F: 66 89 72 04                                           	mov	[edx+4],si		; number of pages
00008743: A1 68 A1 01 00                                        	mov	eax,[real_code_size]
00008748: 48                                                    	dec	eax
00008749: C1 E8 04                                              	shr	eax,4
0000874C: 40                                                    	inc	eax
0000874D: 8B 35 64 A1 01 00                                     	mov	esi,[code_size]
00008753: 4E                                                    	dec	esi
00008754: C1 EE 04                                              	shr	esi,4
00008757: 46                                                    	inc	esi
00008758: 29 F0                                                 	sub	eax,esi
0000875A: 66 89 42 0A                                           	mov	[edx+0Ah],ax		; minimum memory in addition to code
0000875E: 66 01 42 0C                                           	add	[edx+0Ch],ax		; maximum memory in addition to code
00008762: D6                                                    	salc
00008763: 88 C4                                                 	mov	ah,al
00008765: 66 09 42 0C                                           	or	[edx+0Ch],ax
00008769: 66 C7 42 18 1C 00                                     	mov	word [edx+18h],1Ch	; offset of relocation table
0000876F: 01 0D 6C A1 01 00                                     	add	[written_size],ecx
00008775: E8 56 7C FF FF                                        	call	write
0000877A: 0F 82 30 81 FF FF                                     	jc	write_failed
00008780: C3                                                    	ret
                                                                
                                                                make_stub:
00008781: 89 15 4C A2 01 00                                     	mov	[stub_file],edx
00008787: 09 D2                                                 	or	edx,edx
00008789: 0F 85 91 00 00 00                                     	jnz	stub_from_file
0000878F: 56                                                    	push	esi
00008790: 89 FA                                                 	mov	edx,edi
00008792: 31 C0                                                 	xor	eax,eax
00008794: B9 20 00 00 00                                        	mov	ecx,20h
00008799: F3 AB                                                 	rep	stos dword [edi]
0000879B: B8 80 00 00 00                                        	mov	eax,40h+default_stub_end-default_stub
000087A0: 66 B9 40 01                                           	mov	cx,100h+default_stub_end-default_stub
000087A4: 66 C7 02 4D 5A                                        	mov	word [edx],'MZ'
000087A9: C6 42 04 01                                           	mov	byte [edx+4],1
000087AD: 66 89 42 02                                           	mov	word [edx+2],ax
000087B1: C6 42 08 04                                           	mov	byte [edx+8],4
000087B5: C6 42 0A 10                                           	mov	byte [edx+0Ah],10h
000087B9: 66 C7 42 0C FF FF                                     	mov	word [edx+0Ch],0FFFFh
000087BF: 66 89 4A 10                                           	mov	word [edx+10h],cx
000087C3: 66 89 42 3C                                           	mov	word [edx+3Ch],ax
000087C7: C6 42 18 40                                           	mov	byte [edx+18h],40h
000087CB: 8D 7A 40                                              	lea	edi,[edx+40h]
000087CE: BE E0 87 00 00                                        	mov	esi,default_stub
000087D3: B9 40 00 00 00                                        	mov	ecx,default_stub_end-default_stub
000087D8: F3 A4                                                 	rep	movs byte [edi],[esi]
000087DA: 5E                                                    	pop	esi
000087DB: E9 28 01 00 00                                        	jmp	stub_ok
                                                                      default_stub:
                                                                	use16
000087E0: 0E                                                    	push	cs
000087E1: 1F                                                    	pop	ds
000087E2: BA 0E 00                                              	mov	dx,stub_message-default_stub
000087E5: B4 09                                                 	mov	ah,9
000087E7: CD 21                                                 	int	21h
000087E9: B8 01 4C                                              	mov	ax,4C01h
000087EC: CD 21                                                 	int	21h
000087EE: 54 68 69 73 20 70 72 6F 67 72 61 6D 20 63 61 6E             stub_message db 'This program cannot be run in DOS mode.',0Dh,0Ah,24h
          6E 6F 74 20 62 65 20 72 75 6E 20 69 6E 20 44 4F       
          53 20 6D 6F 64 65 2E 0D 0A 24                         
00008818: 00 00 00 00 00 00 00 00                               	rq	1
                                                                      default_stub_end:
                                                                	use32
                                                                      stub_from_file:
00008820: 56                                                    	push	esi
00008821: 89 D6                                                 	mov	esi,edx
00008823: E8 CC D8 FF FF                                        	call	open_binary_file
00008828: 89 FA                                                 	mov	edx,edi
0000882A: B9 1C 00 00 00                                        	mov	ecx,1Ch
0000882F: 89 D6                                                 	mov	esi,edx
00008831: E8 88 7B FF FF                                        	call	read
00008836: 0F 82 CD 00 00 00                                     	jc	binary_stub
0000883C: 66 81 3E 4D 5A                                        	cmp	word [esi],'MZ'
00008841: 0F 85 C2 00 00 00                                     	jne	binary_stub
00008847: 83 C7 1C                                              	add	edi,1Ch
0000884A: 0F B7 4E 06                                           	movzx	ecx,word [esi+6]
0000884E: 83 C1 03                                              	add	ecx,11b
00008851: 83 E1 FC                                              	and	ecx,not 11b
00008854: 83 C1 09                                              	add	ecx,(40h-1Ch) shr 2
00008857: 8D 04 8F                                              	lea	eax,[edi+ecx*4]
0000885A: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
00008860: 0F 83 2C 80 FF FF                                     	jae	out_of_memory
00008866: 31 C0                                                 	xor	eax,eax
00008868: F3 AB                                                 	rep	stos dword [edi]
0000886A: BA 40 00 00 00                                        	mov	edx,40h
0000886F: 66 87 56 18                                           	xchg	dx,[esi+18h]
00008873: 30 C0                                                 	xor	al,al
00008875: E8 68 7B FF FF                                        	call	lseek
0000887A: 0F B7 4E 06                                           	movzx	ecx,word [esi+6]
0000887E: C1 E1 02                                              	shl	ecx,2
00008881: 8D 56 40                                              	lea	edx,[esi+40h]
00008884: E8 35 7B FF FF                                        	call	read
00008889: 89 FA                                                 	mov	edx,edi
0000888B: 29 F2                                                 	sub	edx,esi
0000888D: C1 EA 04                                              	shr	edx,4
00008890: 66 87 56 08                                           	xchg	dx,[esi+8]
00008894: C1 E2 04                                              	shl	edx,4
00008897: 30 C0                                                 	xor	al,al
00008899: E8 44 7B FF FF                                        	call	lseek
0000889E: 0F B7 4E 04                                           	movzx	ecx,word [esi+4]
000088A2: 49                                                    	dec	ecx
000088A3: 0F 88 E9 7F FF FF                                     	js	out_of_memory
000088A9: C1 E1 09                                              	shl	ecx,9
000088AC: 0F B7 56 02                                           	movzx	edx,word [esi+2]
000088B0: 85 D2                                                 	test	edx,edx
000088B2: 75 04                                                 	jnz	stub_header_size_ok
000088B4: 66 BA 00 02                                           	mov	dx,200h
                                                                     stub_header_size_ok:
000088B8: 01 D1                                                 	add	ecx,edx
000088BA: 89 FA                                                 	mov	edx,edi
000088BC: 29 C1                                                 	sub	ecx,eax
000088BE: 74 1E                                                 	je	read_stub_code
000088C0: 72 21                                                 	jb	stub_code_ok
000088C2: 51                                                    	push	ecx
000088C3: 49                                                    	dec	ecx
000088C4: C1 E9 03                                              	shr	ecx,3
000088C7: 41                                                    	inc	ecx
000088C8: D1 E1                                                 	shl	ecx,1
000088CA: 8D 04 8F                                              	lea	eax,[edi+ecx*4]
000088CD: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
000088D3: 0F 83 B9 7F FF FF                                     	jae	out_of_memory
000088D9: 31 C0                                                 	xor	eax,eax
000088DB: F3 AB                                                 	rep	stos dword [edi]
000088DD: 59                                                    	pop	ecx
                                                                     read_stub_code:
000088DE: E8 DB 7A FF FF                                        	call	read
                                                                     stub_code_ok:
000088E3: E8 CE 7A FF FF                                        	call	close
000088E8: 89 FA                                                 	mov	edx,edi
000088EA: 29 F2                                                 	sub	edx,esi
000088EC: 66 89 D0                                              	mov	ax,dx
000088EF: 66 25 FF 01                                           	and	ax,1FFh
000088F3: 66 89 46 02                                           	mov	[esi+2],ax
000088F7: 4A                                                    	dec	edx
000088F8: C1 EA 09                                              	shr	edx,9
000088FB: 42                                                    	inc	edx
000088FC: 66 89 56 04                                           	mov	[esi+4],dx
00008900: 89 F8                                                 	mov	eax,edi
00008902: 29 F0                                                 	sub	eax,esi
00008904: 89 46 3C                                              	mov	[esi+3Ch],eax
00008907: 5E                                                    	pop	esi
                                                                      stub_ok:
00008908: C3                                                    	ret
                                                                      binary_stub:
00008909: 89 FE                                                 	mov	esi,edi
0000890B: B9 10 00 00 00                                        	mov	ecx,40h shr 2
00008910: 31 C0                                                 	xor	eax,eax
00008912: F3 AB                                                 	rep	stos dword [edi]
00008914: B0 02                                                 	mov	al,2
00008916: 31 D2                                                 	xor	edx,edx
00008918: E8 C5 7A FF FF                                        	call	lseek
0000891D: 50                                                    	push	eax
0000891E: 30 C0                                                 	xor	al,al
00008920: 31 D2                                                 	xor	edx,edx
00008922: E8 BB 7A FF FF                                        	call	lseek
00008927: 8B 0C 24                                              	mov	ecx,[esp]
0000892A: 83 C1 47                                              	add	ecx,40h+111b
0000892D: 83 E1 F8                                              	and	ecx,not 111b
00008930: 66 89 C8                                              	mov	ax,cx
00008933: 66 25 FF 01                                           	and	ax,1FFh
00008937: 66 89 46 02                                           	mov	[esi+2],ax
0000893B: 8D 81 FF 01 00 00                                     	lea	eax,[ecx+1FFh]
00008941: C1 E8 09                                              	shr	eax,9
00008944: 66 89 46 04                                           	mov	[esi+4],ax
00008948: 89 4E 3C                                              	mov	[esi+3Ch],ecx
0000894B: 83 E9 40                                              	sub	ecx,40h
0000894E: B8 00 00 01 00                                        	mov	eax,10000h
00008953: 29 C8                                                 	sub	eax,ecx
00008955: 76 07                                                 	jbe	binary_heap_ok
00008957: C1 E8 04                                              	shr	eax,4
0000895A: 66 89 46 0A                                           	mov	[esi+0Ah],ax
                                                                      binary_heap_ok:
0000895E: 66 C7 06 4D 5A                                        	mov	word [esi],'MZ'
00008963: C6 46 08 04                                           	mov	byte [esi+8],4
00008967: 66 B8 FF FF                                           	mov	ax,0FFFFh
0000896B: 66 89 46 0C                                           	mov	[esi+0Ch],ax
0000896F: 66 48                                                 	dec	ax
00008971: 66 89 46 10                                           	mov	[esi+10h],ax
00008975: 66 83 E8 0E                                           	sub	ax,0Eh
00008979: 66 89 46 0E                                           	mov	[esi+0Eh],ax
0000897D: 66 89 46 16                                           	mov	[esi+16h],ax
00008981: 66 C7 46 14 00 01                                     	mov	word [esi+14h],100h
00008987: C6 46 18 40                                           	mov	byte [esi+18h],40h
0000898B: A1 E4 A1 01 00                                        	mov	eax,[tagged_blocks]
00008990: 29 C8                                                 	sub	eax,ecx
00008992: 39 C7                                                 	cmp	edi,eax
00008994: 0F 83 F8 7E FF FF                                     	jae	out_of_memory
0000899A: 89 FA                                                 	mov	edx,edi
0000899C: C1 E9 02                                              	shr	ecx,2
0000899F: 31 C0                                                 	xor	eax,eax
000089A1: F3 AB                                                 	rep	stos dword [edi]
000089A3: 59                                                    	pop	ecx
000089A4: E8 15 7A FF FF                                        	call	read
000089A9: E8 08 7A FF FF                                        	call	close
000089AE: 5E                                                    	pop	esi
000089AF: C3                                                    	ret
                                                                
                                                                format_pe:
000089B0: 31 D2                                                 	xor	edx,edx
000089B2: 66 C7 05 54 A2 01 00 4C 01                            	mov	[machine],14Ch
000089BB: 66 C7 05 56 A2 01 00 03 00                            	mov	[subsystem],3
000089C4: C7 05 58 A2 01 00 03 00 0A 00                         	mov	[subsystem_version],3 + 10 shl 16
000089CE: C7 05 5C A2 01 00 00 00 40 00                         	mov	[image_base],400000h
000089D8: 83 25 60 A2 01 00 00                                  	and	[image_base_high],0
000089DF: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
000089E9: 74 13                                                 	jz	pe_settings
000089EB: 66 C7 05 54 A2 01 00 64 86                            	mov	[machine],8664h
000089F4: C7 05 58 A2 01 00 05 00 00 00                         	mov	[subsystem_version],5 + 0 shl 16
                                                                      pe_settings:
000089FE: 80 3E 84                                              	cmp	byte [esi],84h
00008A01: 0F 84 8E 01 00 00                                     	je	get_stub_name
00008A07: 80 3E 80                                              	cmp	byte [esi],80h
00008A0A: 0F 84 1F 01 00 00                                     	je	get_pe_base
00008A10: 80 3E 1B                                              	cmp	byte [esi],1Bh
00008A13: 0F 85 8F 01 00 00                                     	jne	pe_settings_ok
00008A19: AC                                                    	lods	byte [esi]
00008A1A: AC                                                    	lods	byte [esi]
00008A1B: A8 C0                                                 	test	al,80h+40h
00008A1D: 74 65                                                 	jz	subsystem_setting
00008A1F: 3C 80                                                 	cmp	al,80h
00008A21: 74 0E                                                 	je	dll_flag
00008A23: 3C 81                                                 	cmp	al,81h
00008A25: 74 1A                                                 	je	wdm_flag
00008A27: 3C 82                                                 	cmp	al,82h
00008A29: 74 26                                                 	je	large_flag
00008A2B: 3C 83                                                 	cmp	al,83h
00008A2D: 74 42                                                 	je	nx_flag
00008A2F: EB CD                                                 	jmp	pe_settings
                                                                      dll_flag:
00008A31: 0F BA 2D 34 A2 01 00 08                               	bts	[format_flags],8
00008A39: 0F 82 57 80 FF FF                                     	jc	setting_already_specified
00008A3F: EB BD                                                 	jmp	pe_settings
                                                                      wdm_flag:
00008A41: 0F BA 2D 34 A2 01 00 09                               	bts	[format_flags],9
00008A49: 0F 82 47 80 FF FF                                     	jc	setting_already_specified
00008A4F: EB AD                                                 	jmp	pe_settings
                                                                      large_flag:
00008A51: 0F BA 2D 34 A2 01 00 0B                               	bts	[format_flags],11
00008A59: 0F 82 37 80 FF FF                                     	jc	setting_already_specified
00008A5F: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
00008A69: 0F 85 B1 7E FF FF                                     	jnz	invalid_argument
00008A6F: EB 8D                                                 	jmp	pe_settings
                                                                      nx_flag:
00008A71: 0F BA 2D 34 A2 01 00 0C                               	bts	[format_flags],12
00008A79: 0F 82 17 80 FF FF                                     	jc	setting_already_specified
00008A7F: E9 7A FF FF FF                                        	jmp	pe_settings
                                                                      subsystem_setting:
00008A84: 0F BA 2D 34 A2 01 00 07                               	bts	[format_flags],7
00008A8C: 0F 82 04 80 FF FF                                     	jc	setting_already_specified
00008A92: 66 83 E0 3F                                           	and	ax,3Fh
00008A96: 66 A3 56 A2 01 00                                     	mov	[subsystem],ax
00008A9C: 66 83 F8 0A                                           	cmp	ax,10
00008AA0: 72 07                                                 	jb	subsystem_type_ok
00008AA2: 83 0D 34 A2 01 00 04                                  	or	[format_flags],4
                                                                      subsystem_type_ok:
00008AA9: 80 3E 28                                              	cmp	byte [esi],'('
00008AAC: 0F 85 4C FF FF FF                                     	jne	pe_settings
00008AB2: 46                                                    	inc	esi
00008AB3: 80 3E 2E                                              	cmp	byte [esi],'.'
00008AB6: 0F 85 E6 7E FF FF                                     	jne	invalid_value
00008ABC: 46                                                    	inc	esi
00008ABD: 52                                                    	push	edx
00008ABE: 80 7E 0B 00                                           	cmp	byte [esi+11],0
00008AC2: 0F 85 DA 7E FF FF                                     	jne	invalid_value
00008AC8: 80 7E 0A 02                                           	cmp	byte [esi+10],2
00008ACC: 0F 87 D0 7E FF FF                                     	ja	invalid_value
00008AD2: 66 8B 56 08                                           	mov	dx,[esi+8]
00008AD6: 66 81 FA 00 80                                        	cmp	dx,8000h
00008ADB: 74 42                                                 	je	zero_version
00008ADD: 8B 46 04                                              	mov	eax,[esi+4]
00008AE0: 66 83 FA 07                                           	cmp	dx,7
00008AE4: 0F 8F B8 7E FF FF                                     	jg	invalid_value
00008AEA: 66 B9 07 00                                           	mov	cx,7
00008AEE: 66 29 D1                                              	sub	cx,dx
00008AF1: 8B 46 04                                              	mov	eax,[esi+4]
00008AF4: D3 E8                                                 	shr	eax,cl
00008AF6: 89 C3                                                 	mov	ebx,eax
00008AF8: C1 EB 18                                              	shr	ebx,24
00008AFB: 80 FB 64                                              	cmp	bl,100
00008AFE: 0F 83 9E 7E FF FF                                     	jae	invalid_value
00008B04: 25 FF FF FF 00                                        	and	eax,0FFFFFFh
00008B09: B9 64 00 00 00                                        	mov	ecx,100
00008B0E: F7 E1                                                 	mul	ecx
00008B10: 0F AC D0 18                                           	shrd	eax,edx,24
00008B14: 73 01                                                 	jnc	version_value_ok
00008B16: 40                                                    	inc	eax
                                                                      version_value_ok:
00008B17: C1 E0 10                                              	shl	eax,16
00008B1A: 66 89 D8                                              	mov	ax,bx
00008B1D: EB 02                                                 	jmp	subsystem_version_ok
                                                                      zero_version:
00008B1F: 31 C0                                                 	xor	eax,eax
                                                                      subsystem_version_ok:
00008B21: 5A                                                    	pop	edx
00008B22: 83 C6 0D                                              	add	esi,13
00008B25: A3 58 A2 01 00                                        	mov	[subsystem_version],eax
00008B2A: E9 CF FE FF FF                                        	jmp	pe_settings
                                                                      get_pe_base:
00008B2F: 0F BA 2D 34 A2 01 00 0A                               	bts	[format_flags],10
00008B37: 0F 82 59 7F FF FF                                     	jc	setting_already_specified
00008B3D: 66 AD                                                 	lods	word [esi]
00008B3F: 80 FC 28                                              	cmp	ah,'('
00008B42: 0F 85 D8 7D FF FF                                     	jne	invalid_argument
00008B48: 80 3E 2E                                              	cmp	byte [esi],'.'
00008B4B: 0F 84 51 7E FF FF                                     	je	invalid_value
00008B51: 52 57                                                 	push	edx edi
00008B53: 03 3D 48 A2 01 00                                     	add	edi,[stub_size]
00008B59: F7 05 34 A2 01 00 04 00 00 00                         	test	[format_flags],4
00008B63: 75 0C                                                 	jnz	get_peplus_base
00008B65: E8 16 E8 FF FF                                        	call	get_dword_value
00008B6A: A3 5C A2 01 00                                        	mov	[image_base],eax
00008B6F: EB 10                                                 	jmp	pe_base_ok
                                                                      get_peplus_base:
00008B71: E8 A5 E8 FF FF                                        	call	get_qword_value
00008B76: A3 5C A2 01 00                                        	mov	[image_base],eax
00008B7B: 89 15 60 A2 01 00                                     	mov	[image_base_high],edx
                                                                      pe_base_ok:
00008B81: 5F 5A                                                 	pop	edi edx
00008B83: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
00008B8A: 0F 85 C0 7E FF FF                                     	jne	invalid_use_of_symbol
00008B90: 80 3E 84                                              	cmp	byte [esi],84h
00008B93: 75 13                                                 	jne	pe_settings_ok
                                                                      get_stub_name:
00008B95: AC                                                    	lods	byte [esi]
00008B96: 66 AD                                                 	lods	word [esi]
00008B98: 66 83 F8 28                                           	cmp	ax,'('
00008B9C: 0F 85 7E 7D FF FF                                     	jne	invalid_argument
00008BA2: AD                                                    	lods	dword [esi]
00008BA3: 89 F2                                                 	mov	edx,esi
00008BA5: 01 C6                                                 	add	esi,eax
00008BA7: 46                                                    	inc	esi
                                                                      pe_settings_ok:
00008BA8: 8B 2D 48 A2 01 00                                     	mov	ebp,[stub_size]
00008BAE: 09 ED                                                 	or	ebp,ebp
00008BB0: 74 14                                                 	jz	make_pe_stub
00008BB2: 3B 15 4C A2 01 00                                     	cmp	edx,[stub_file]
00008BB8: 74 26                                                 	je	pe_stub_ok
00008BBA: 2B 3D 48 A2 01 00                                     	sub	edi,[stub_size]
00008BC0: 89 3D 60 A1 01 00                                     	mov	[code_start],edi
                                                                      make_pe_stub:
00008BC6: E8 B6 FB FF FF                                        	call	make_stub
00008BCB: 89 F8                                                 	mov	eax,edi
00008BCD: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
00008BD3: A3 48 A2 01 00                                        	mov	[stub_size],eax
00008BD8: 89 3D 60 A1 01 00                                     	mov	[code_start],edi
00008BDE: 89 C5                                                 	mov	ebp,eax
                                                                      pe_stub_ok:
00008BE0: 89 FA                                                 	mov	edx,edi
00008BE2: B9 F8 00 00 00                                        	mov	ecx,18h+0E0h
00008BE7: F7 05 34 A2 01 00 04 00 00 00                         	test	[format_flags],4
00008BF1: 74 03                                                 	jz	zero_pe_header
00008BF3: 83 C1 10                                              	add	ecx,10h
                                                                      zero_pe_header:
00008BF6: 01 CD                                                 	add	ebp,ecx
00008BF8: C1 E9 02                                              	shr	ecx,2
00008BFB: 31 C0                                                 	xor	eax,eax
00008BFD: F3 AB                                                 	rep	stos dword [edi]
00008BFF: 66 C7 02 50 45                                        	mov	word [edx],'PE' 	; signature
00008C04: 66 A1 54 A2 01 00                                     	mov	ax,[machine]
00008C0A: 66 89 42 04                                           	mov	word [edx+4],ax
00008C0E: C6 42 39 10                                           	mov	byte [edx+38h+1],10h	; section alignment
00008C12: C6 42 3D 02                                           	mov	byte [edx+3Ch+1],2	; file alignment
00008C16: C6 42 40 01                                           	mov	byte [edx+40h],1	; OS version
00008C1A: A1 58 A2 01 00                                        	mov	eax,[subsystem_version]
00008C1F: 89 42 48                                              	mov	[edx+48h],eax
00008C22: 66 A1 56 A2 01 00                                     	mov	ax,[subsystem]
00008C28: 66 89 42 5C                                           	mov	[edx+5Ch],ax
00008C2C: 66 83 F8 01                                           	cmp	ax,1
00008C30: 75 0B                                                 	jne	pe_alignment_ok
00008C32: B8 20 00 00 00                                        	mov	eax,20h
00008C37: 89 42 38                                              	mov	dword [edx+38h],eax
00008C3A: 89 42 3C                                              	mov	dword [edx+3Ch],eax
                                                                      pe_alignment_ok:
00008C3D: 66 C7 42 1A 01 49                                     	mov	word [edx+1Ah],VERSION_MAJOR + VERSION_MINOR shl 8
00008C43: F7 05 34 A2 01 00 04 00 00 00                         	test	[format_flags],4
00008C4D: 75 25                                                 	jnz	init_peplus_specific
00008C4F: C6 42 14 E0                                           	mov	byte [edx+14h],0E0h	; size of optional header
00008C53: C7 42 16 0F 01 0B 01                                  	mov	dword [edx+16h],10B010Fh; flags and magic value
00008C5A: A1 5C A2 01 00                                        	mov	eax,[image_base]
00008C5F: 89 42 34                                              	mov	[edx+34h],eax
00008C62: C6 42 61 10                                           	mov	byte [edx+60h+1],10h	; stack reserve
00008C66: C6 42 65 10                                           	mov	byte [edx+64h+1],10h	; stack commit
00008C6A: C6 42 6A 01                                           	mov	byte [edx+68h+2],1	; heap reserve
00008C6E: C6 42 74 10                                           	mov	byte [edx+74h],16	; number of directories
00008C72: EB 2E                                                 	jmp	pe_header_ok
                                                                      init_peplus_specific:
00008C74: C6 42 14 F0                                           	mov	byte [edx+14h],0F0h	; size of optional header
00008C78: C7 42 16 2F 00 0B 02                                  	mov	dword [edx+16h],20B002Fh; flags and magic value
00008C7F: A1 5C A2 01 00                                        	mov	eax,[image_base]
00008C84: 89 42 30                                              	mov	[edx+30h],eax
00008C87: A1 60 A2 01 00                                        	mov	eax,[image_base_high]
00008C8C: 89 42 34                                              	mov	[edx+34h],eax
00008C8F: C6 42 61 10                                           	mov	byte [edx+60h+1],10h	; stack reserve
00008C93: C6 42 69 10                                           	mov	byte [edx+68h+1],10h	; stack commit
00008C97: C6 42 72 01                                           	mov	byte [edx+70h+2],1	; heap reserve
00008C9B: C6 82 84 00 00 00 10                                  	mov	byte [edx+84h],16	; number of directories
                                                                      pe_header_ok:
00008CA2: 0F BC 4A 3C                                           	bsf	ecx,[edx+3Ch]
00008CA6: 6B 1D 44 A2 01 00 28                                  	imul	ebx,[number_of_sections],28h
00008CAD: 09 DB                                                 	or	ebx,ebx
00008CAF: 75 05                                                 	jnz	reserve_space_for_section_headers
00008CB1: BB 28 00 00 00                                        	mov	ebx,28h
                                                                      reserve_space_for_section_headers:
00008CB6: 01 EB                                                 	add	ebx,ebp
00008CB8: 4B                                                    	dec	ebx
00008CB9: D3 EB                                                 	shr	ebx,cl
00008CBB: 43                                                    	inc	ebx
00008CBC: D3 E3                                                 	shl	ebx,cl
00008CBE: 29 EB                                                 	sub	ebx,ebp
00008CC0: 89 D9                                                 	mov	ecx,ebx
00008CC2: A1 E4 A1 01 00                                        	mov	eax,[tagged_blocks]
00008CC7: 29 C8                                                 	sub	eax,ecx
00008CC9: 39 C7                                                 	cmp	edi,eax
00008CCB: 0F 83 C1 7B FF FF                                     	jae	out_of_memory
00008CD1: C1 E9 02                                              	shr	ecx,2
00008CD4: 31 C0                                                 	xor	eax,eax
00008CD6: F3 AB                                                 	rep	stos dword [edi]
00008CD8: 89 F8                                                 	mov	eax,edi
00008CDA: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
00008CE0: 03 05 48 A2 01 00                                     	add	eax,[stub_size]
00008CE6: 89 42 54                                              	mov	[edx+54h],eax		; size of headers
00008CE9: 8B 4A 38                                              	mov	ecx,[edx+38h]
00008CEC: 49                                                    	dec	ecx
00008CED: 01 C8                                                 	add	eax,ecx
00008CEF: F7 D1                                                 	not	ecx
00008CF1: 21 C8                                                 	and	eax,ecx
00008CF3: 0F BA 25 34 A2 01 00 08                               	bt	[format_flags],8
00008CFB: 72 03                                                 	jc	pe_entry_init_ok
00008CFD: 89 42 28                                              	mov	[edx+28h],eax		; entry point rva
                                                                      pe_entry_init_ok:
00008D00: 83 25 44 A2 01 00 00                                  	and	[number_of_sections],0
00008D07: 0F B7 5A 14                                           	movzx	ebx,word [edx+14h]
00008D0B: 8D 5C 1A 18                                           	lea	ebx,[edx+18h+ebx]
00008D0F: 89 1D 50 A2 01 00                                     	mov	[current_section],ebx
00008D15: C7 03 2E 66 6C 61                                     	mov	dword [ebx],'.fla'
00008D1B: C7 43 04 74 00 00 00                                  	mov	dword [ebx+4],'t'
00008D22: 89 7B 14                                              	mov	[ebx+14h],edi
00008D25: 89 43 0C                                              	mov	[ebx+0Ch],eax
00008D28: C7 43 24 60 00 00 E0                                  	mov	dword [ebx+24h],0E0000060h
00008D2F: 31 C9                                                 	xor	ecx,ecx
00008D31: 30 DB                                                 	xor	bl,bl
00008D33: F7 D0                                                 	not	eax
00008D35: F7 D1                                                 	not	ecx
00008D37: F6 D3                                                 	not	bl
00008D39: 83 C0 01                                              	add	eax,1
00008D3C: 83 D1 00                                              	adc	ecx,0
00008D3F: 80 D3 00                                              	adc	bl,0
00008D42: 01 F8                                                 	add	eax,edi
00008D44: 83 D1 00                                              	adc	ecx,0
00008D47: 80 D3 00                                              	adc	bl,0
00008D4A: F7 05 34 A2 01 00 04 00 00 00                         	test	[format_flags],4
00008D54: 75 0B                                                 	jnz	peplus_org
00008D56: 2B 42 34                                              	sub	eax,[edx+34h]
00008D59: 83 D9 00                                              	sbb	ecx,0
00008D5C: 80 DB 00                                              	sbb	bl,0
00008D5F: EB 09                                                 	jmp	pe_org_ok
                                                                      peplus_org:
00008D61: 2B 42 30                                              	sub	eax,[edx+30h]
00008D64: 1B 4A 34                                              	sbb	ecx,[edx+34h]
00008D67: 80 DB 00                                              	sbb	bl,0
                                                                      pe_org_ok:
00008D6A: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
00008D74: 75 0B                                                 	jnz	pe64_code
00008D76: B7 02                                                 	mov	bh,2
00008D78: C6 05 BE A2 01 00 20                                  	mov	[code_type],32
00008D7F: EB 09                                                 	jmp	pe_code_type_ok
                                                                      pe64_code:
00008D81: B7 04                                                 	mov	bh,4
00008D83: C6 05 BE A2 01 00 40                                  	mov	[code_type],64
                                                                      pe_code_type_ok:
00008D8A: 0F BA 25 38 A2 01 00 00                               	bt	[resolver_flags],0
00008D92: 72 02                                                 	jc	pe_labels_type_ok
00008D94: 30 FF                                                 	xor	bh,bh
                                                                      pe_labels_type_ok:
00008D96: 50 53                                                 	push	eax ebx
00008D98: E8 ED BD FF FF                                        	call	init_addressing_space
00008D9D: 89 DD                                                 	mov	ebp,ebx
00008D9F: 5B 58                                                 	pop	ebx eax
00008DA1: 3E 89 45 00                                           	mov	[ds:ebp],eax
00008DA5: 3E 89 4D 04                                           	mov	[ds:ebp+4],ecx
00008DA9: 3E 66 89 5D 08                                        	mov	[ds:ebp+8],bx
00008DAE: 3E 89 7D 18                                           	mov	[ds:ebp+18h],edi
00008DB2: 0F BA 25 34 A2 01 00 08                               	bt	[format_flags],8
00008DBA: 73 04                                                 	jnc	dll_flag_ok
00008DBC: 80 4A 17 20                                           	or	byte [edx+16h+1],20h
                                                                      dll_flag_ok:
00008DC0: 0F BA 25 34 A2 01 00 09                               	bt	[format_flags],9
00008DC8: 73 04                                                 	jnc	wdm_flag_ok
00008DCA: 80 4A 5F 20                                           	or	byte [edx+5Eh+1],20h
                                                                      wdm_flag_ok:
00008DCE: 0F BA 25 34 A2 01 00 0B                               	bt	[format_flags],11
00008DD6: 73 04                                                 	jnc	large_flag_ok
00008DD8: 80 4A 16 20                                           	or	byte [edx+16h],20h
                                                                      large_flag_ok:
00008DDC: 0F BA 25 34 A2 01 00 0C                               	bt	[format_flags],12
00008DE4: 73 04                                                 	jnc	nx_ok
00008DE6: 80 4A 5F 01                                           	or	byte [edx+5Eh+1],1
                                                                      nx_ok:
00008DEA: E9 5D F3 FF FF                                        	jmp	format_defined
                                                                pe_section:
00008DEF: E8 76 01 00 00                                        	call	close_pe_section
00008DF4: 50 53                                                 	push	eax ebx
00008DF6: E8 73 BD FF FF                                        	call	create_addressing_space
00008DFB: 89 DD                                                 	mov	ebp,ebx
00008DFD: 5B 58                                                 	pop	ebx eax
00008DFF: 0F BA 2D 34 A2 01 00 05                               	bts	[format_flags],5
00008E07: 8D 4B 28                                              	lea	ecx,[ebx+28h]
00008E0A: 03 52 54                                              	add	edx,[edx+54h]
00008E0D: 2B 15 48 A2 01 00                                     	sub	edx,[stub_size]
00008E13: 39 D1                                                 	cmp	ecx,edx
00008E15: 76 17                                                 	jbe	new_section
00008E17: 8D 5A D8                                              	lea	ebx,[edx-28h]
00008E1A: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
00008E21: 57                                                    	push	edi
00008E22: 89 DF                                                 	mov	edi,ebx
00008E24: B9 02 00 00 00                                        	mov	ecx,28h shr 4
00008E29: 31 C0                                                 	xor	eax,eax
00008E2B: F3 AB                                                 	rep	stos dword [edi]
00008E2D: 5F                                                    	pop	edi
                                                                      new_section:
00008E2E: 89 43 0C                                              	mov	[ebx+0Ch],eax
00008E31: 66 AD                                                 	lods	word [esi]
00008E33: 66 83 F8 28                                           	cmp	ax,'('
00008E37: 0F 85 E3 7A FF FF                                     	jne	invalid_argument
00008E3D: 8D 56 04                                              	lea	edx,[esi+4]
00008E40: 8B 0E                                                 	mov	ecx,[esi]
00008E42: 8D 74 0E 05                                           	lea	esi,[esi+4+ecx+1]
00008E46: 83 F9 08                                              	cmp	ecx,8
00008E49: 0F 87 08 7C FF FF                                     	ja	name_too_long
00008E4F: 31 C0                                                 	xor	eax,eax
00008E51: 89 03                                                 	mov	[ebx],eax
00008E53: 89 43 04                                              	mov	[ebx+4],eax
00008E56: 56 57                                                 	push	esi edi
00008E58: 89 DF                                                 	mov	edi,ebx
00008E5A: 89 D6                                                 	mov	esi,edx
00008E5C: F3 A4                                                 	rep	movs byte [edi],[esi]
00008E5E: 5F 5E                                                 	pop	edi esi
00008E60: 83 63 24 00                                           	and	dword [ebx+24h],0
00008E64: 89 7B 14                                              	mov	[ebx+14h],edi
00008E67: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
00008E6D: 89 F8                                                 	mov	eax,edi
00008E6F: 31 C9                                                 	xor	ecx,ecx
00008E71: 2B 43 0C                                              	sub	eax,[ebx+0Ch]
00008E74: 83 D9 00                                              	sbb	ecx,0
00008E77: 3E 80 5D 08 00                                        	sbb	byte [ds:ebp+8],0
00008E7C: 3E C6 45 09 02                                        	mov	byte [ds:ebp+9],2
00008E81: C6 05 BE A2 01 00 20                                  	mov	[code_type],32
00008E88: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
00008E92: 74 0C                                                 	jz	pe_section_code_type_ok
00008E94: 3E C6 45 09 04                                        	mov	byte [ds:ebp+9],4
00008E99: C6 05 BE A2 01 00 40                                  	mov	[code_type],64
                                                                      pe_section_code_type_ok:
00008EA0: F7 05 34 A2 01 00 04 00 00 00                         	test	[format_flags],4
00008EAA: 75 1C                                                 	jnz	peplus_section_org
00008EAC: 2B 42 34                                              	sub	eax,[edx+34h]
00008EAF: 83 D9 00                                              	sbb	ecx,0
00008EB2: 3E 80 5D 08 00                                        	sbb	byte [ds:ebp+8],0
00008EB7: 0F BA 25 38 A2 01 00 00                               	bt	[resolver_flags],0
00008EBF: 72 21                                                 	jc	pe_section_org_ok
00008EC1: 3E C6 45 09 00                                        	mov	byte [ds:ebp+9],0
00008EC6: EB 1A                                                 	jmp	pe_section_org_ok
                                                                      peplus_section_org:
00008EC8: 2B 42 30                                              	sub	eax,[edx+30h]
00008ECB: 1B 4A 34                                              	sbb	ecx,[edx+34h]
00008ECE: 3E 80 5D 08 00                                        	sbb	byte [ds:ebp+8],0
00008ED3: 0F BA 25 38 A2 01 00 00                               	bt	[resolver_flags],0
00008EDB: 72 05                                                 	jc	pe_section_org_ok
00008EDD: 3E C6 45 09 00                                        	mov	byte [ds:ebp+9],0
                                                                      pe_section_org_ok:
00008EE2: 3E 89 45 00                                           	mov	[ds:ebp],eax
00008EE6: 3E 89 4D 04                                           	mov	[ds:ebp+4],ecx
00008EEA: 3E 89 7D 18                                           	mov	[ds:ebp+18h],edi
                                                                      get_section_flags:
00008EEE: AC                                                    	lods	byte [esi]
00008EEF: 3C 1A                                                 	cmp	al,1Ah
00008EF1: 74 0A                                                 	je	set_directory
00008EF3: 3C 19                                                 	cmp	al,19h
00008EF5: 74 4B                                                 	je	section_flag
00008EF7: 4E                                                    	dec	esi
00008EF8: E9 73 C0 FF FF                                        	jmp	instruction_assembled
                                                                      set_directory:
00008EFD: 0F B6 06                                              	movzx	eax,byte [esi]
00008F00: 46                                                    	inc	esi
00008F01: 89 D9                                                 	mov	ecx,ebx
00008F03: F7 05 34 A2 01 00 04 00 00 00                         	test	[format_flags],4
00008F0D: 75 0E                                                 	jnz	peplus_directory
00008F0F: 87 4C C2 78                                           	xchg	ecx,[edx+78h+eax*8]
00008F13: C7 44 C2 7C FF FF FF FF                               	mov	dword [edx+78h+eax*8+4],-1
00008F1B: EB 12                                                 	jmp	pe_directory_set
                                                                      peplus_directory:
00008F1D: 87 8C C2 88 00 00 00                                  	xchg	ecx,[edx+88h+eax*8]
00008F24: C7 84 C2 8C 00 00 00 FF FF FF FF                      	mov	dword [edx+88h+eax*8+4],-1
                                                                      pe_directory_set:
00008F2F: 09 C9                                                 	or	ecx,ecx
00008F31: 0F 85 66 7B FF FF                                     	jnz	data_already_defined
00008F37: 53 52                                                 	push	ebx edx
00008F39: E8 D8 04 00 00                                        	call	generate_pe_data
00008F3E: 5A 5B                                                 	pop	edx ebx
00008F40: EB AC                                                 	jmp	get_section_flags
                                                                      section_flag:
00008F42: AC                                                    	lods	byte [esi]
00008F43: 3C 09                                                 	cmp	al,9
00008F45: 0F 84 D5 79 FF FF                                     	je	invalid_argument
00008F4B: 3C 0B                                                 	cmp	al,11
00008F4D: 0F 84 CD 79 FF FF                                     	je	invalid_argument
00008F53: 88 C1                                                 	mov	cl,al
00008F55: B8 01 00 00 00                                        	mov	eax,1
00008F5A: D3 E0                                                 	shl	eax,cl
00008F5C: 85 43 24                                              	test	dword [ebx+24h],eax
00008F5F: 0F 85 31 7B FF FF                                     	jnz	setting_already_specified
00008F65: 09 43 24                                              	or	dword [ebx+24h],eax
00008F68: EB 84                                                 	jmp	get_section_flags
                                                                      close_pe_section:
00008F6A: 8B 1D 50 A2 01 00                                     	mov	ebx,[current_section]
00008F70: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
00008F76: 89 F8                                                 	mov	eax,edi
00008F78: 2B 43 14                                              	sub	eax,[ebx+14h]
00008F7B: 75 0E                                                 	jnz	finish_section
00008F7D: 0F BA 25 34 A2 01 00 05                               	bt	[format_flags],5
00008F85: 72 04                                                 	jc	finish_section
00008F87: 8B 43 0C                                              	mov	eax,[ebx+0Ch]
00008F8A: C3                                                    	ret
                                                                      finish_section:
00008F8B: 89 43 08                                              	mov	[ebx+8],eax
00008F8E: 3B 3D CC A1 01 00                                     	cmp	edi,[undefined_data_end]
00008F94: 75 0F                                                 	jne	align_section
00008F96: 81 7A 38 00 10 00 00                                  	cmp	dword [edx+38h],1000h
00008F9D: 72 06                                                 	jb	align_section
00008F9F: 8B 3D C8 A1 01 00                                     	mov	edi,[undefined_data_start]
                                                                      align_section:
00008FA5: 83 25 CC A1 01 00 00                                  	and	[undefined_data_end],0
00008FAC: 89 FD                                                 	mov	ebp,edi
00008FAE: 2B 6B 14                                              	sub	ebp,[ebx+14h]
00008FB1: 8B 4A 3C                                              	mov	ecx,[edx+3Ch]
00008FB4: 49                                                    	dec	ecx
00008FB5: 8D 44 0D 00                                           	lea	eax,[ebp+ecx]
00008FB9: F7 D1                                                 	not	ecx
00008FBB: 21 C8                                                 	and	eax,ecx
00008FBD: 89 43 10                                              	mov	[ebx+10h],eax
00008FC0: 29 E8                                                 	sub	eax,ebp
00008FC2: 89 C1                                                 	mov	ecx,eax
00008FC4: 30 C0                                                 	xor	al,al
00008FC6: F3 AA                                                 	rep	stos byte [edi]
00008FC8: A1 60 A1 01 00                                        	mov	eax,[code_start]
00008FCD: 2B 05 48 A2 01 00                                     	sub	eax,[stub_size]
00008FD3: 29 43 14                                              	sub	[ebx+14h],eax
00008FD6: 8B 4B 10                                              	mov	ecx,[ebx+10h]
00008FD9: F6 43 24 20                                           	test	byte [ebx+24h],20h
00008FDD: 74 0F                                                 	jz	pe_code_sum_ok
00008FDF: 01 4A 1C                                              	add	[edx+1Ch],ecx
00008FE2: 83 7A 2C 00                                           	cmp	dword [edx+2Ch],0
00008FE6: 75 06                                                 	jne	pe_code_sum_ok
00008FE8: 8B 43 0C                                              	mov	eax,[ebx+0Ch]
00008FEB: 89 42 2C                                              	mov	[edx+2Ch],eax
                                                                      pe_code_sum_ok:
00008FEE: F6 43 24 40                                           	test	byte [ebx+24h],40h
00008FF2: 74 1B                                                 	jz	pe_data_sum_ok
00008FF4: 01 4A 20                                              	add	[edx+20h],ecx
00008FF7: F7 05 34 A2 01 00 04 00 00 00                         	test	[format_flags],4
00009001: 75 0C                                                 	jnz	pe_data_sum_ok
00009003: 83 7A 30 00                                           	cmp	dword [edx+30h],0
00009007: 75 06                                                 	jne	pe_data_sum_ok
00009009: 8B 43 0C                                              	mov	eax,[ebx+0Ch]
0000900C: 89 42 30                                              	mov	[edx+30h],eax
                                                                      pe_data_sum_ok:
0000900F: 8B 43 08                                              	mov	eax,[ebx+8]
00009012: 09 C0                                                 	or	eax,eax
00009014: 74 0D                                                 	jz	udata_ok
00009016: 83 7B 10 00                                           	cmp	dword [ebx+10h],0
0000901A: 75 07                                                 	jne	udata_ok
0000901C: 80 4B 24 80                                           	or	byte [ebx+24h],80h
00009020: 01 4A 24                                              	add	[edx+24h],ecx
                                                                      udata_ok:
00009023: 8B 4A 38                                              	mov	ecx,[edx+38h]
00009026: 49                                                    	dec	ecx
00009027: 01 C8                                                 	add	eax,ecx
00009029: F7 D1                                                 	not	ecx
0000902B: 21 C8                                                 	and	eax,ecx
0000902D: 03 43 0C                                              	add	eax,[ebx+0Ch]
00009030: 83 C3 28                                              	add	ebx,28h
00009033: 89 1D 50 A2 01 00                                     	mov	[current_section],ebx
00009039: 66 FF 05 44 A2 01 00                                  	inc	word [number_of_sections]
00009040: 0F 84 7B 78 FF FF                                     	jz	format_limitations_exceeded
00009046: C3                                                    	ret
                                                                data_directive:
00009047: 80 3D BD A2 01 00 03                                  	cmp	[output_format],3
0000904E: 0F 85 D6 78 FF FF                                     	jne	illegal_instruction
00009054: AC                                                    	lods	byte [esi]
00009055: 3C 1A                                                 	cmp	al,1Ah
00009057: 74 16                                                 	je	predefined_data_type
00009059: 3C 28                                                 	cmp	al,'('
0000905B: 0F 85 BF 78 FF FF                                     	jne	invalid_argument
00009061: E8 47 E2 FF FF                                        	call	get_byte_value
00009066: 3C 10                                                 	cmp	al,16
00009068: 72 09                                                 	jb	data_type_ok
0000906A: E9 33 79 FF FF                                        	jmp	invalid_value
                                                                      predefined_data_type:
0000906F: 0F B6 06                                              	movzx	eax,byte [esi]
00009072: 46                                                    	inc	esi
                                                                      data_type_ok:
00009073: 8B 1D 50 A2 01 00                                     	mov	ebx,[current_section]
00009079: 89 F9                                                 	mov	ecx,edi
0000907B: 2B 4B 14                                              	sub	ecx,[ebx+14h]
0000907E: 03 4B 0C                                              	add	ecx,[ebx+0Ch]
00009081: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
00009087: F7 05 34 A2 01 00 04 00 00 00                         	test	[format_flags],4
00009091: 75 06                                                 	jnz	peplus_data
00009093: 87 4C C2 78                                           	xchg	ecx,[edx+78h+eax*8]
00009097: EB 07                                                 	jmp	init_pe_data
                                                                      peplus_data:
00009099: 87 8C C2 88 00 00 00                                  	xchg	ecx,[edx+88h+eax*8]
                                                                      init_pe_data:
000090A0: 09 C9                                                 	or	ecx,ecx
000090A2: 0F 85 F5 79 FF FF                                     	jnz	data_already_defined
000090A8: E8 8D C5 FF FF                                        	call	allocate_structure_data
000090AD: 66 C7 03 E4 40                                        	mov	word [ebx],data_directive-instruction_handler
000090B2: 88 43 02                                              	mov	[ebx+2],al
000090B5: 8B 15 74 A1 01 00                                     	mov	edx,[current_line]
000090BB: 89 53 04                                              	mov	[ebx+4],edx
000090BE: E8 53 03 00 00                                        	call	generate_pe_data
000090C3: E9 A8 BE FF FF                                        	jmp	instruction_assembled
                                                                      end_data:
000090C8: 80 3D BD A2 01 00 03                                  	cmp	[output_format],3
000090CF: 0F 85 55 78 FF FF                                     	jne	illegal_instruction
000090D5: E8 7C C5 FF FF                                        	call	find_structure_data
000090DA: 0F 82 A1 79 FF FF                                     	jc	unexpected_instruction
000090E0: 0F B6 43 02                                           	movzx	eax,byte [ebx+2]
000090E4: 8B 15 50 A2 01 00                                     	mov	edx,[current_section]
000090EA: 89 F9                                                 	mov	ecx,edi
000090EC: 2B 4A 14                                              	sub	ecx,[edx+14h]
000090EF: 03 4A 0C                                              	add	ecx,[edx+0Ch]
000090F2: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
000090F8: F7 05 34 A2 01 00 04 00 00 00                         	test	[format_flags],4
00009102: 75 0D                                                 	jnz	end_peplus_data
00009104: 2B 4C C2 78                                           	sub	ecx,[edx+78h+eax*8]
00009108: 89 4C C2 7C                                           	mov	[edx+78h+eax*8+4],ecx
0000910C: E9 8F C6 FF FF                                        	jmp	remove_structure_data
                                                                      end_peplus_data:
00009111: 2B 8C C2 88 00 00 00                                  	sub	ecx,[edx+88h+eax*8]
00009118: 89 8C C2 8C 00 00 00                                  	mov	[edx+88h+eax*8+4],ecx
0000911F: E9 7C C6 FF FF                                        	jmp	remove_structure_data
                                                                pe_entry:
00009124: AC                                                    	lods	byte [esi]
00009125: 3C 28                                                 	cmp	al,'('
00009127: 0F 85 F3 77 FF FF                                     	jne	invalid_argument
0000912D: 80 3E 2E                                              	cmp	byte [esi],'.'
00009130: 0F 84 6C 78 FF FF                                     	je	invalid_value
00009136: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
00009140: 75 3E                                                 	jnz	pe64_entry
00009142: E8 39 E2 FF FF                                        	call	get_dword_value
00009147: B3 02                                                 	mov	bl,2
00009149: 0F BA 25 38 A2 01 00 00                               	bt	[resolver_flags],0
00009151: 72 02                                                 	jc	check_pe_entry_label_type
00009153: 30 DB                                                 	xor	bl,bl
                                                                      check_pe_entry_label_type:
00009155: 38 1D B4 A2 01 00                                     	cmp	[value_type],bl
0000915B: 74 05                                                 	je	pe_entry_ok
0000915D: E8 52 F4 FF FF                                        	call	recoverable_invalid_address
                                                                      pe_entry_ok:
00009162: 99                                                    	cdq
00009163: F7 05 34 A2 01 00 04 00 00 00                         	test	[format_flags],4
0000916D: 75 31                                                 	jnz	pe64_entry_type_ok
0000916F: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
00009175: 2B 42 34                                              	sub	eax,[edx+34h]
00009178: 89 42 28                                              	mov	[edx+28h],eax
0000917B: E9 F0 BD FF FF                                        	jmp	instruction_assembled
                                                                      pe64_entry:
00009180: E8 96 E2 FF FF                                        	call	get_qword_value
00009185: B3 04                                                 	mov	bl,4
00009187: 0F BA 25 38 A2 01 00 00                               	bt	[resolver_flags],0
0000918F: 72 02                                                 	jc	check_pe64_entry_label_type
00009191: 30 DB                                                 	xor	bl,bl
                                                                      check_pe64_entry_label_type:
00009193: 38 1D B4 A2 01 00                                     	cmp	[value_type],bl
00009199: 74 05                                                 	je	pe64_entry_type_ok
0000919B: E8 14 F4 FF FF                                        	call	recoverable_invalid_address
                                                                      pe64_entry_type_ok:
000091A0: 8B 0D 60 A1 01 00                                     	mov	ecx,[code_start]
000091A6: 2B 41 30                                              	sub	eax,[ecx+30h]
000091A9: 1B 51 34                                              	sbb	edx,[ecx+34h]
000091AC: 74 05                                                 	jz	pe64_entry_range_ok
000091AE: E8 3E E1 FF FF                                        	call	recoverable_overflow
                                                                      pe64_entry_range_ok:
000091B3: 89 41 28                                              	mov	[ecx+28h],eax
000091B6: E9 B5 BD FF FF                                        	jmp	instruction_assembled
                                                                pe_stack:
000091BB: AC                                                    	lods	byte [esi]
000091BC: 3C 28                                                 	cmp	al,'('
000091BE: 0F 85 5C 77 FF FF                                     	jne	invalid_argument
000091C4: 80 3E 2E                                              	cmp	byte [esi],'.'
000091C7: 0F 84 D5 77 FF FF                                     	je	invalid_value
000091CD: F7 05 34 A2 01 00 04 00 00 00                         	test	[format_flags],4
000091D7: 75 5F                                                 	jnz	peplus_stack
000091D9: E8 56 E2 FF FF                                        	call	get_count_value
000091DE: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
000091E4: 89 42 60                                              	mov	[edx+60h],eax
000091E7: 80 3E 2C                                              	cmp	byte [esi],','
000091EA: 75 2F                                                 	jne	default_stack_commit
000091EC: AC                                                    	lods	byte [esi]
000091ED: AC                                                    	lods	byte [esi]
000091EE: 3C 28                                                 	cmp	al,'('
000091F0: 0F 85 2A 77 FF FF                                     	jne	invalid_argument
000091F6: 80 3E 2E                                              	cmp	byte [esi],'.'
000091F9: 0F 84 A3 77 FF FF                                     	je	invalid_value
000091FF: E8 30 E2 FF FF                                        	call	get_count_value
00009204: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
0000920A: 89 42 64                                              	mov	[edx+64h],eax
0000920D: 3B 42 60                                              	cmp	eax,[edx+60h]
00009210: 0F 87 96 77 FF FF                                     	ja	value_out_of_range
00009216: E9 55 BD FF FF                                        	jmp	instruction_assembled
                                                                      default_stack_commit:
0000921B: C7 42 64 00 10 00 00                                  	mov	dword [edx+64h],1000h
00009222: 8B 42 60                                              	mov	eax,[edx+60h]
00009225: 3D 00 10 00 00                                        	cmp	eax,1000h
0000922A: 0F 87 40 BD FF FF                                     	ja	instruction_assembled
00009230: 89 42 64                                              	mov	dword [edx+64h],eax
00009233: E9 38 BD FF FF                                        	jmp	instruction_assembled
                                                                      peplus_stack:
00009238: E8 DE E1 FF FF                                        	call	get_qword_value
0000923D: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
00009244: 0F 85 06 78 FF FF                                     	jne	invalid_use_of_symbol
0000924A: 8B 0D 60 A1 01 00                                     	mov	ecx,[code_start]
00009250: 89 41 60                                              	mov	[ecx+60h],eax
00009253: 89 51 64                                              	mov	[ecx+64h],edx
00009256: 80 3E 2C                                              	cmp	byte [esi],','
00009259: 75 4E                                                 	jne	default_peplus_stack_commit
0000925B: AC                                                    	lods	byte [esi]
0000925C: AC                                                    	lods	byte [esi]
0000925D: 3C 28                                                 	cmp	al,'('
0000925F: 0F 85 BB 76 FF FF                                     	jne	invalid_argument
00009265: 80 3E 2E                                              	cmp	byte [esi],'.'
00009268: 0F 84 34 77 FF FF                                     	je	invalid_value
0000926E: E8 A8 E1 FF FF                                        	call	get_qword_value
00009273: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000927A: 0F 85 D0 77 FF FF                                     	jne	invalid_use_of_symbol
00009280: 8B 0D 60 A1 01 00                                     	mov	ecx,[code_start]
00009286: 89 41 68                                              	mov	[ecx+68h],eax
00009289: 89 51 6C                                              	mov	[ecx+6Ch],edx
0000928C: 3B 51 64                                              	cmp	edx,[ecx+64h]
0000928F: 0F 87 17 77 FF FF                                     	ja	value_out_of_range
00009295: 0F 82 D5 BC FF FF                                     	jb	instruction_assembled
0000929B: 3B 41 60                                              	cmp	eax,[ecx+60h]
0000929E: 0F 87 08 77 FF FF                                     	ja	value_out_of_range
000092A4: E9 C7 BC FF FF                                        	jmp	instruction_assembled
                                                                      default_peplus_stack_commit:
000092A9: C7 41 68 00 10 00 00                                  	mov	dword [ecx+68h],1000h
000092B0: 83 79 64 00                                           	cmp	dword [ecx+64h],0
000092B4: 0F 85 B6 BC FF FF                                     	jne	instruction_assembled
000092BA: 8B 41 60                                              	mov	eax,[ecx+60h]
000092BD: 3D 00 10 00 00                                        	cmp	eax,1000h
000092C2: 0F 87 A8 BC FF FF                                     	ja	instruction_assembled
000092C8: 89 41 68                                              	mov	dword [ecx+68h],eax
000092CB: E9 A0 BC FF FF                                        	jmp	instruction_assembled
                                                                pe_heap:
000092D0: AC                                                    	lods	byte [esi]
000092D1: 3C 28                                                 	cmp	al,'('
000092D3: 0F 85 47 76 FF FF                                     	jne	invalid_argument
000092D9: 80 3E 2E                                              	cmp	byte [esi],'.'
000092DC: 0F 84 C0 76 FF FF                                     	je	invalid_value
000092E2: F7 05 34 A2 01 00 04 00 00 00                         	test	[format_flags],4
000092EC: 75 46                                                 	jnz	peplus_heap
000092EE: E8 41 E1 FF FF                                        	call	get_count_value
000092F3: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
000092F9: 89 42 68                                              	mov	[edx+68h],eax
000092FC: 80 3E 2C                                              	cmp	byte [esi],','
000092FF: 0F 85 6B BC FF FF                                     	jne	instruction_assembled
00009305: AC                                                    	lods	byte [esi]
00009306: AC                                                    	lods	byte [esi]
00009307: 3C 28                                                 	cmp	al,'('
00009309: 0F 85 11 76 FF FF                                     	jne	invalid_argument
0000930F: 80 3E 2E                                              	cmp	byte [esi],'.'
00009312: 0F 84 8A 76 FF FF                                     	je	invalid_value
00009318: E8 17 E1 FF FF                                        	call	get_count_value
0000931D: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
00009323: 89 42 6C                                              	mov	[edx+6Ch],eax
00009326: 3B 42 68                                              	cmp	eax,[edx+68h]
00009329: 0F 87 7D 76 FF FF                                     	ja	value_out_of_range
0000932F: E9 3C BC FF FF                                        	jmp	instruction_assembled
                                                                      peplus_heap:
00009334: E8 E2 E0 FF FF                                        	call	get_qword_value
00009339: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
00009340: 0F 85 0A 77 FF FF                                     	jne	invalid_use_of_symbol
00009346: 8B 0D 60 A1 01 00                                     	mov	ecx,[code_start]
0000934C: 89 41 70                                              	mov	[ecx+70h],eax
0000934F: 89 51 74                                              	mov	[ecx+74h],edx
00009352: 80 3E 2C                                              	cmp	byte [esi],','
00009355: 0F 85 15 BC FF FF                                     	jne	instruction_assembled
0000935B: AC                                                    	lods	byte [esi]
0000935C: AC                                                    	lods	byte [esi]
0000935D: 3C 28                                                 	cmp	al,'('
0000935F: 0F 85 BB 75 FF FF                                     	jne	invalid_argument
00009365: 80 3E 2E                                              	cmp	byte [esi],'.'
00009368: 0F 84 34 76 FF FF                                     	je	invalid_value
0000936E: E8 A8 E0 FF FF                                        	call	get_qword_value
00009373: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000937A: 0F 85 D0 76 FF FF                                     	jne	invalid_use_of_symbol
00009380: 8B 0D 60 A1 01 00                                     	mov	ecx,[code_start]
00009386: 89 41 78                                              	mov	[ecx+78h],eax
00009389: 89 51 7C                                              	mov	[ecx+7Ch],edx
0000938C: 3B 51 74                                              	cmp	edx,[ecx+74h]
0000938F: 0F 87 17 76 FF FF                                     	ja	value_out_of_range
00009395: 0F 82 D5 BB FF FF                                     	jb	instruction_assembled
0000939B: 3B 41 70                                              	cmp	eax,[ecx+70h]
0000939E: 0F 87 08 76 FF FF                                     	ja	value_out_of_range
000093A4: E9 C7 BB FF FF                                        	jmp	instruction_assembled
                                                                mark_pe_relocation:
000093A9: 50 53                                                 	push	eax ebx
000093AB: F7 05 34 A2 01 00 04 00 00 00                         	test	[format_flags],4
000093B5: 74 09                                                 	jz	check_standard_pe_relocation_type
000093B7: 80 3D B4 A2 01 00 04                                  	cmp	[value_type],4
000093BE: 74 0E                                                 	je	pe_relocation_type_ok
                                                                      check_standard_pe_relocation_type:
000093C0: 80 3D B4 A2 01 00 02                                  	cmp	[value_type],2
000093C7: 74 05                                                 	je	pe_relocation_type_ok
000093C9: E8 4A DF FF FF                                        	call	recoverable_misuse
                                                                      pe_relocation_type_ok:
000093CE: 8B 1D 50 A2 01 00                                     	mov	ebx,[current_section]
000093D4: 89 F8                                                 	mov	eax,edi
000093D6: 2B 43 14                                              	sub	eax,[ebx+14h]
000093D9: 03 43 0C                                              	add	eax,[ebx+0Ch]
000093DC: 8B 1D 58 A1 01 00                                     	mov	ebx,[free_additional_memory]
000093E2: FF 05 40 A2 01 00                                     	inc	[number_of_relocations]
000093E8: 83 C3 05                                              	add	ebx,5
000093EB: 3B 1D E8 A1 01 00                                     	cmp	ebx,[structures_buffer]
000093F1: 0F 83 9B 74 FF FF                                     	jae	out_of_memory
000093F7: 89 1D 58 A1 01 00                                     	mov	[free_additional_memory],ebx
000093FD: 89 43 FB                                              	mov	[ebx-5],eax
00009400: 80 3D B4 A2 01 00 02                                  	cmp	[value_type],2
00009407: 74 06                                                 	je	fixup_32bit
00009409: C6 43 FF 0A                                           	mov	byte [ebx-1],0Ah
0000940D: EB 04                                                 	jmp	fixup_ok
                                                                      fixup_32bit:
0000940F: C6 43 FF 03                                           	mov	byte [ebx-1],3
                                                                      fixup_ok:
00009413: 5B 58                                                 	pop	ebx eax
00009415: C3                                                    	ret
                                                                generate_pe_data:
00009416: 3C 02                                                 	cmp	al,2
00009418: 0F 84 D0 00 00 00                                     	je	make_pe_resource
0000941E: 3C 05                                                 	cmp	al,5
00009420: 74 01                                                 	je	make_pe_fixups
00009422: C3                                                    	ret
                                                                make_pe_fixups:
00009423: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
00009429: 80 62 16 FE                                           	and	byte [edx+16h],not 1
0000942D: 80 4A 5E 40                                           	or	byte [edx+5Eh],40h
00009431: 0F BA 2D 38 A2 01 00 00                               	bts	[resolver_flags],0
00009439: 72 07                                                 	jc	fixups_ready
0000943B: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      fixups_ready:
00009442: 83 25 7C A2 01 00 00                                  	and	[last_fixup_base],0
00009449: E8 1E 00 00 00                                        	call	make_fixups
0000944E: 87 05 70 A2 01 00                                     	xchg	eax,[actual_fixups_size]
00009454: 2B 05 70 A2 01 00                                     	sub	eax,[actual_fixups_size]
0000945A: 77 02                                                 	ja	reserve_forward_fixups
0000945C: 31 C0                                                 	xor	eax,eax
                                                                      reserve_forward_fixups:
0000945E: 89 3D 74 A2 01 00                                     	mov	[reserved_fixups],edi
00009464: 01 C7                                                 	add	edi,eax
00009466: A3 78 A2 01 00                                        	mov	[reserved_fixups_size],eax
0000946B: C3                                                    	ret
                                                                      make_fixups:
0000946C: 56                                                    	push	esi
0000946D: 31 C9                                                 	xor	ecx,ecx
0000946F: 87 0D 40 A2 01 00                                     	xchg	ecx,[number_of_relocations]
00009475: 8B 35 58 A1 01 00                                     	mov	esi,[free_additional_memory]
0000947B: 8D 04 89                                              	lea	eax,[ecx*5]
0000947E: 29 C6                                                 	sub	esi,eax
00009480: 89 35 58 A1 01 00                                     	mov	[free_additional_memory],esi
00009486: 8B 15 7C A2 01 00                                     	mov	edx,[last_fixup_base]
0000948C: 8B 1D 80 A2 01 00                                     	mov	ebx,[last_fixup_header]
00009492: 89 FD                                                 	mov	ebp,edi
00009494: E3 46                                                 	jecxz	fixups_done
                                                                      make_fixup:
00009496: 39 16                                                 	cmp	[esi],edx
00009498: 72 28                                                 	jb	store_fixup
0000949A: 89 F8                                                 	mov	eax,edi
0000949C: 29 E8                                                 	sub	eax,ebp
0000949E: A9 03 00 00 00                                        	test	eax,11b
000094A3: 74 08                                                 	jz	fixups_block
000094A5: 66 31 C0                                              	xor	ax,ax
000094A8: 66 AB                                                 	stos	word [edi]
000094AA: 83 03 02                                              	add	dword [ebx],2
                                                                      fixups_block:
000094AD: 89 D0                                                 	mov	eax,edx
000094AF: 81 C2 00 10 00 00                                     	add	edx,1000h
000094B5: 39 16                                                 	cmp	[esi],edx
000094B7: 73 F4                                                 	jae	fixups_block
000094B9: AB                                                    	stos	dword [edi]
000094BA: 89 FB                                                 	mov	ebx,edi
000094BC: B8 08 00 00 00                                        	mov	eax,8
000094C1: AB                                                    	stos	dword [edi]
                                                                      store_fixup:
000094C2: 83 03 02                                              	add	dword [ebx],2
000094C5: 8A 66 01                                              	mov	ah,[esi+1]
000094C8: 80 E4 0F                                              	and	ah,0Fh
000094CB: 8A 46 04                                              	mov	al,[esi+4]
000094CE: C0 E0 04                                              	shl	al,4
000094D1: 08 C4                                                 	or	ah,al
000094D3: 8A 06                                                 	mov	al,[esi]
000094D5: 66 AB                                                 	stos	word [edi]
000094D7: 83 C6 05                                              	add	esi,5
000094DA: E2 BA                                                 	loop	make_fixup
                                                                      fixups_done:
000094DC: 89 15 7C A2 01 00                                     	mov	[last_fixup_base],edx
000094E2: 89 1D 80 A2 01 00                                     	mov	[last_fixup_header],ebx
000094E8: 5E                                                    	pop	esi
000094E9: 89 F8                                                 	mov	eax,edi
000094EB: 29 E8                                                 	sub	eax,ebp
000094ED: C3                                                    	ret
                                                                make_pe_resource:
000094EE: 80 3E 82                                              	cmp	byte [esi],82h
000094F1: 0F 85 07 06 00 00                                     	jne	resource_done
000094F7: 46                                                    	inc	esi
000094F8: 66 AD                                                 	lods	word [esi]
000094FA: 66 83 F8 28                                           	cmp	ax,'('
000094FE: 0F 85 1C 74 FF FF                                     	jne	invalid_argument
00009504: AD                                                    	lods	dword [esi]
00009505: 89 F2                                                 	mov	edx,esi
00009507: 8D 74 06 01                                           	lea	esi,[esi+eax+1]
0000950B: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
00009512: 74 28                                                 	je	resource_from_file
00009514: 66 83 3D 52 A1 01 00 00                               	cmp	[current_pass],0
0000951C: 75 07                                                 	jne	reserve_space_for_resource
0000951E: 83 25 6C A2 01 00 00                                  	and	[resource_size],0
                                                                      reserve_space_for_resource:
00009525: 03 3D 6C A2 01 00                                     	add	edi,[resource_size]
0000952B: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
00009531: 0F 87 5B 73 FF FF                                     	ja	out_of_memory
00009537: E9 C2 05 00 00                                        	jmp	resource_done
                                                                      resource_from_file:
0000953C: 56                                                    	push	esi
0000953D: 89 D6                                                 	mov	esi,edx
0000953F: E8 B0 CB FF FF                                        	call	open_binary_file
00009544: 53                                                    	push	ebx
00009545: 8B 35 58 A1 01 00                                     	mov	esi,[free_additional_memory]
0000954B: 8D 46 20                                              	lea	eax,[esi+20h]
0000954E: 3B 05 E8 A1 01 00                                     	cmp	eax,[structures_buffer]
00009554: 0F 87 38 73 FF FF                                     	ja	out_of_memory
0000955A: 89 F2                                                 	mov	edx,esi
0000955C: B9 20 00 00 00                                        	mov	ecx,20h
00009561: E8 58 6E FF FF                                        	call	read
00009566: 0F 82 8C 73 FF FF                                     	jc	invalid_file_format
0000956C: 31 C0                                                 	xor	eax,eax
0000956E: 39 06                                                 	cmp	[esi],eax
00009570: 0F 85 82 73 FF FF                                     	jne	invalid_file_format
00009576: 66 B8 FF FF                                           	mov	ax,0FFFFh
0000957A: 39 46 08                                              	cmp	[esi+8],eax
0000957D: 0F 85 75 73 FF FF                                     	jne	invalid_file_format
00009583: 39 46 0C                                              	cmp	[esi+12],eax
00009586: 0F 85 6C 73 FF FF                                     	jne	invalid_file_format
0000958C: B8 20 00 00 00                                        	mov	eax,20h
00009591: 39 46 04                                              	cmp	[esi+4],eax
00009594: 0F 85 5E 73 FF FF                                     	jne	invalid_file_format
                                                                      read_resource_headers:
0000959A: A9 03 00 00 00                                        	test	eax,11b
0000959F: 74 17                                                 	jz	resource_file_alignment_ok
000095A1: BA 04 00 00 00                                        	mov	edx,4
000095A6: 83 E0 03                                              	and	eax,11b
000095A9: 29 C2                                                 	sub	edx,eax
000095AB: B0 01                                                 	mov	al,1
000095AD: E8 30 6E FF FF                                        	call	lseek
000095B2: 0F 82 8D 00 00 00                                     	jc	resource_headers_ok
                                                                      resource_file_alignment_ok:
000095B8: 89 06                                                 	mov	[esi],eax
000095BA: 8D 56 0C                                              	lea	edx,[esi+12]
000095BD: B9 08 00 00 00                                        	mov	ecx,8
000095C2: E8 F7 6D FF FF                                        	call	read
000095C7: 72 7C                                                 	jc	resource_headers_ok
000095C9: 8B 4E 10                                              	mov	ecx,[esi+16]
000095CC: 01 0E                                                 	add	[esi],ecx
000095CE: 8D 56 14                                              	lea	edx,[esi+20]
000095D1: 83 E9 08                                              	sub	ecx,8
000095D4: 89 4E 10                                              	mov	[esi+16],ecx
000095D7: 8D 04 0A                                              	lea	eax,[edx+ecx]
000095DA: 3B 05 E8 A1 01 00                                     	cmp	eax,[structures_buffer]
000095E0: 0F 87 AC 72 FF FF                                     	ja	out_of_memory
000095E6: E8 D3 6D FF FF                                        	call	read
000095EB: 0F 82 07 73 FF FF                                     	jc	invalid_file_format
000095F1: 8B 16                                                 	mov	edx,[esi]
000095F3: 03 56 0C                                              	add	edx,[esi+12]
000095F6: 8B 46 10                                              	mov	eax,[esi+16]
000095F9: 8D 4E 14                                              	lea	ecx,[esi+20]
000095FC: 8D 34 01                                              	lea	esi,[ecx+eax]
000095FF: 83 C1 02                                              	add	ecx,2
00009602: 66 83 79 FE FF                                        	cmp	word [ecx-2],0FFFFh
00009607: 74 13                                                 	je	resource_header_type_ok
                                                                      check_resource_header_type:
00009609: 39 F1                                                 	cmp	ecx,esi
0000960B: 0F 83 E7 72 FF FF                                     	jae	invalid_file_format
00009611: 66 83 39 00                                           	cmp	word [ecx],0
00009615: 74 05                                                 	je	resource_header_type_ok
00009617: 83 C1 02                                              	add	ecx,2
0000961A: EB ED                                                 	jmp	check_resource_header_type
                                                                      resource_header_type_ok:
0000961C: 83 C1 02                                              	add	ecx,2
0000961F: 66 83 39 FF                                           	cmp	word [ecx],0FFFFh
00009623: 74 13                                                 	je	resource_header_name_ok
                                                                      check_resource_header_name:
00009625: 39 F1                                                 	cmp	ecx,esi
00009627: 0F 83 CB 72 FF FF                                     	jae	invalid_file_format
0000962D: 66 83 39 00                                           	cmp	word [ecx],0
00009631: 74 05                                                 	je	resource_header_name_ok
00009633: 83 C1 02                                              	add	ecx,2
00009636: EB ED                                                 	jmp	check_resource_header_name
                                                                      resource_header_name_ok:
00009638: 30 C0                                                 	xor	al,al
0000963A: E8 A3 6D FF FF                                        	call	lseek
0000963F: 0F 83 55 FF FF FF                                     	jnc	read_resource_headers
                                                                      resource_headers_ok:
00009645: 3B 35 58 A1 01 00                                     	cmp	esi,[free_additional_memory]
0000964B: 0F 84 A7 72 FF FF                                     	je	invalid_file_format
00009651: 31 C0                                                 	xor	eax,eax
00009653: 89 06                                                 	mov	[esi],eax
00009655: 89 3D 68 A2 01 00                                     	mov	[resource_data],edi
0000965B: 8D 47 10                                              	lea	eax,[edi+16]
0000965E: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
00009664: 0F 83 28 72 FF FF                                     	jae	out_of_memory
0000966A: 31 C0                                                 	xor	eax,eax
0000966C: AB                                                    	stos	dword [edi]
0000966D: E8 4B 70 FF FF                                        	call	make_timestamp
00009672: AB                                                    	stos	dword [edi]
00009673: 31 C0                                                 	xor	eax,eax
00009675: AB                                                    	stos	dword [edi]
00009676: AB                                                    	stos	dword [edi]
00009677: 31 DB                                                 	xor	ebx,ebx
                                                                      make_type_name_directory:
00009679: 8B 35 58 A1 01 00                                     	mov	esi,[free_additional_memory]
0000967F: 31 D2                                                 	xor	edx,edx
                                                                      find_type_name:
00009681: 83 3E 00                                              	cmp	dword [esi],0
00009684: 74 57                                                 	je	type_name_ok
00009686: 83 C6 14                                              	add	esi,20
00009689: 66 83 3E FF                                           	cmp	word [esi],0FFFFh
0000968D: 74 47                                                 	je	check_next_type_name
0000968F: 09 DB                                                 	or	ebx,ebx
00009691: 74 1D                                                 	jz	check_this_type_name
00009693: 31 C9                                                 	xor	ecx,ecx
                                                                      compare_with_previous_type_name:
00009695: 66 8B 04 0E                                           	mov	ax,[esi+ecx]
00009699: 66 3B 04 0B                                           	cmp	ax,[ebx+ecx]
0000969D: 77 11                                                 	ja	check_this_type_name
0000969F: 72 35                                                 	jb	check_next_type_name
000096A1: 83 C1 02                                              	add	ecx,2
000096A4: 66 8B 04 0E                                           	mov	ax,[esi+ecx]
000096A8: 66 0B 04 0B                                           	or	ax,[ebx+ecx]
000096AC: 75 E7                                                 	jnz	compare_with_previous_type_name
000096AE: EB 26                                                 	jmp	check_next_type_name
                                                                      check_this_type_name:
000096B0: 09 D2                                                 	or	edx,edx
000096B2: 74 1D                                                 	jz	type_name_found
000096B4: 31 C9                                                 	xor	ecx,ecx
                                                                      compare_with_current_type_name:
000096B6: 66 8B 04 0E                                           	mov	ax,[esi+ecx]
000096BA: 66 3B 04 0A                                           	cmp	ax,[edx+ecx]
000096BE: 77 16                                                 	ja	check_next_type_name
000096C0: 72 0F                                                 	jb	type_name_found
000096C2: 83 C1 02                                              	add	ecx,2
000096C5: 66 8B 04 0E                                           	mov	ax,[esi+ecx]
000096C9: 66 0B 04 0A                                           	or	ax,[edx+ecx]
000096CD: 75 E7                                                 	jnz	compare_with_current_type_name
000096CF: EB 02                                                 	jmp	same_type_name
                                                                      type_name_found:
000096D1: 89 F2                                                 	mov	edx,esi
                                                                      same_type_name:
000096D3: 89 7E F0                                              	mov	[esi-16],edi
                                                                      check_next_type_name:
000096D6: 8B 46 FC                                              	mov	eax,[esi-4]
000096D9: 01 C6                                                 	add	esi,eax
000096DB: EB A4                                                 	jmp	find_type_name
                                                                      type_name_ok:
000096DD: 09 D2                                                 	or	edx,edx
000096DF: 74 25                                                 	jz	type_name_directory_done
000096E1: 89 D3                                                 	mov	ebx,edx
                                                                      make_type_name_entry:
000096E3: A1 68 A2 01 00                                        	mov	eax,[resource_data]
000096E8: 66 FF 40 0C                                           	inc	word [eax+12]
000096EC: 8D 47 08                                              	lea	eax,[edi+8]
000096EF: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
000096F5: 0F 83 97 71 FF FF                                     	jae	out_of_memory
000096FB: 89 D8                                                 	mov	eax,ebx
000096FD: AB                                                    	stos	dword [edi]
000096FE: 31 C0                                                 	xor	eax,eax
00009700: AB                                                    	stos	dword [edi]
00009701: E9 73 FF FF FF                                        	jmp	make_type_name_directory
                                                                      type_name_directory_done:
00009706: BB FF FF FF FF                                        	mov	ebx,-1
                                                                      make_type_id_directory:
0000970B: 8B 35 58 A1 01 00                                     	mov	esi,[free_additional_memory]
00009711: BA 00 00 01 00                                        	mov	edx,10000h
                                                                      find_type_id:
00009716: 83 3E 00                                              	cmp	dword [esi],0
00009719: 74 21                                                 	je	type_id_ok
0000971B: 83 C6 14                                              	add	esi,20
0000971E: 66 83 3E FF                                           	cmp	word [esi],0FFFFh
00009722: 75 11                                                 	jne	check_next_type_id
00009724: 0F B7 46 02                                           	movzx	eax,word [esi+2]
00009728: 39 D8                                                 	cmp	eax,ebx
0000972A: 7E 09                                                 	jle	check_next_type_id
0000972C: 39 D0                                                 	cmp	eax,edx
0000972E: 7F 05                                                 	jg	check_next_type_id
00009730: 89 C2                                                 	mov	edx,eax
00009732: 89 7E F0                                              	mov	[esi-16],edi
                                                                      check_next_type_id:
00009735: 8B 46 FC                                              	mov	eax,[esi-4]
00009738: 01 C6                                                 	add	esi,eax
0000973A: EB DA                                                 	jmp	find_type_id
                                                                      type_id_ok:
0000973C: 81 FA 00 00 01 00                                     	cmp	edx,10000h
00009742: 74 22                                                 	je	type_id_directory_done
00009744: 89 D3                                                 	mov	ebx,edx
                                                                      make_type_id_entry:
00009746: A1 68 A2 01 00                                        	mov	eax,[resource_data]
0000974B: 66 FF 40 0E                                           	inc	word [eax+14]
0000974F: 8D 47 08                                              	lea	eax,[edi+8]
00009752: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
00009758: 0F 83 34 71 FF FF                                     	jae	out_of_memory
0000975E: 89 D8                                                 	mov	eax,ebx
00009760: AB                                                    	stos	dword [edi]
00009761: 31 C0                                                 	xor	eax,eax
00009763: AB                                                    	stos	dword [edi]
00009764: EB A5                                                 	jmp	make_type_id_directory
                                                                      type_id_directory_done:
00009766: 8B 35 68 A2 01 00                                     	mov	esi,[resource_data]
0000976C: 83 C6 10                                              	add	esi,10h
0000976F: 8B 4E FC                                              	mov	ecx,[esi-4]
00009772: 66 09 C9                                              	or	cx,cx
00009775: 0F 84 67 01 00 00                                     	jz	resource_directories_ok
                                                                      make_resource_directories:
0000977B: 51                                                    	push	ecx
0000977C: 57                                                    	push	edi
0000977D: 89 FA                                                 	mov	edx,edi
0000977F: 2B 15 68 A2 01 00                                     	sub	edx,[resource_data]
00009785: 0F BA EA 1F                                           	bts	edx,31
00009789: 89 56 04                                              	mov	[esi+4],edx
0000978C: 8D 47 10                                              	lea	eax,[edi+16]
0000978F: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
00009795: 0F 83 F7 70 FF FF                                     	jae	out_of_memory
0000979B: 31 C0                                                 	xor	eax,eax
0000979D: AB                                                    	stos	dword [edi]
0000979E: E8 1A 6F FF FF                                        	call	make_timestamp
000097A3: AB                                                    	stos	dword [edi]
000097A4: 31 C0                                                 	xor	eax,eax
000097A6: AB                                                    	stos	dword [edi]
000097A7: AB                                                    	stos	dword [edi]
000097A8: 89 F5                                                 	mov	ebp,esi
000097AA: 31 DB                                                 	xor	ebx,ebx
                                                                      make_resource_name_directory:
000097AC: 8B 35 58 A1 01 00                                     	mov	esi,[free_additional_memory]
000097B2: 31 D2                                                 	xor	edx,edx
                                                                      find_resource_name:
000097B4: 83 3E 00                                              	cmp	dword [esi],0
000097B7: 0F 84 80 00 00 00                                     	je	resource_name_ok
000097BD: 56                                                    	push	esi
000097BE: 39 6E 04                                              	cmp	[esi+4],ebp
000097C1: 75 6D                                                 	jne	check_next_resource_name
000097C3: 83 C6 14                                              	add	esi,20
000097C6: E8 27 00 00 00                                        	call	skip_resource_name
000097CB: 66 83 3E FF                                           	cmp	word [esi],0FFFFh
000097CF: 74 5F                                                 	je	check_next_resource_name
000097D1: 09 DB                                                 	or	ebx,ebx
000097D3: 74 32                                                 	jz	check_this_resource_name
000097D5: 31 C9                                                 	xor	ecx,ecx
                                                                      compare_with_previous_resource_name:
000097D7: 66 8B 04 0E                                           	mov	ax,[esi+ecx]
000097DB: 66 3B 04 0B                                           	cmp	ax,[ebx+ecx]
000097DF: 77 26                                                 	ja	check_this_resource_name
000097E1: 72 4D                                                 	jb	check_next_resource_name
000097E3: 83 C1 02                                              	add	ecx,2
000097E6: 66 8B 04 0E                                           	mov	ax,[esi+ecx]
000097EA: 66 0B 04 0B                                           	or	ax,[ebx+ecx]
000097EE: 75 E7                                                 	jnz	compare_with_previous_resource_name
000097F0: EB 3E                                                 	jmp	check_next_resource_name
                                                                      skip_resource_name:
000097F2: 66 83 3E FF                                           	cmp	word [esi],0FFFFh
000097F6: 75 04                                                 	jne	skip_unicode_string
000097F8: 83 C6 04                                              	add	esi,4
000097FB: C3                                                    	ret
                                                                      skip_unicode_string:
000097FC: 83 C6 02                                              	add	esi,2
000097FF: 66 83 7E FE 00                                        	cmp	word [esi-2],0
00009804: 75 F6                                                 	jne	skip_unicode_string
00009806: C3                                                    	ret
                                                                      check_this_resource_name:
00009807: 09 D2                                                 	or	edx,edx
00009809: 74 1D                                                 	jz	resource_name_found
0000980B: 31 C9                                                 	xor	ecx,ecx
                                                                      compare_with_current_resource_name:
0000980D: 66 8B 04 0E                                           	mov	ax,[esi+ecx]
00009811: 66 3B 04 0A                                           	cmp	ax,[edx+ecx]
00009815: 77 19                                                 	ja	check_next_resource_name
00009817: 72 0F                                                 	jb	resource_name_found
00009819: 83 C1 02                                              	add	ecx,2
0000981C: 66 8B 04 0E                                           	mov	ax,[esi+ecx]
00009820: 66 0B 04 0A                                           	or	ax,[edx+ecx]
00009824: 75 E7                                                 	jnz	compare_with_current_resource_name
00009826: EB 02                                                 	jmp	same_resource_name
                                                                      resource_name_found:
00009828: 89 F2                                                 	mov	edx,esi
                                                                      same_resource_name:
0000982A: 8B 04 24                                              	mov	eax,[esp]
0000982D: 89 78 08                                              	mov	[eax+8],edi
                                                                      check_next_resource_name:
00009830: 5E                                                    	pop	esi
00009831: 8B 46 10                                              	mov	eax,[esi+16]
00009834: 8D 74 06 14                                           	lea	esi,[esi+20+eax]
00009838: E9 77 FF FF FF                                        	jmp	find_resource_name
                                                                      resource_name_ok:
0000983D: 09 D2                                                 	or	edx,edx
0000983F: 74 23                                                 	jz	resource_name_directory_done
00009841: 89 D3                                                 	mov	ebx,edx
                                                                      make_resource_name_entry:
00009843: 8B 04 24                                              	mov	eax,[esp]
00009846: 66 FF 40 0C                                           	inc	word [eax+12]
0000984A: 8D 47 08                                              	lea	eax,[edi+8]
0000984D: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
00009853: 0F 83 39 70 FF FF                                     	jae	out_of_memory
00009859: 89 D8                                                 	mov	eax,ebx
0000985B: AB                                                    	stos	dword [edi]
0000985C: 31 C0                                                 	xor	eax,eax
0000985E: AB                                                    	stos	dword [edi]
0000985F: E9 48 FF FF FF                                        	jmp	make_resource_name_directory
                                                                      resource_name_directory_done:
00009864: BB FF FF FF FF                                        	mov	ebx,-1
                                                                      make_resource_id_directory:
00009869: 8B 35 58 A1 01 00                                     	mov	esi,[free_additional_memory]
0000986F: BA 00 00 01 00                                        	mov	edx,10000h
                                                                      find_resource_id:
00009874: 83 3E 00                                              	cmp	dword [esi],0
00009877: 74 32                                                 	je	resource_id_ok
00009879: 56                                                    	push	esi
0000987A: 39 6E 04                                              	cmp	[esi+4],ebp
0000987D: 75 22                                                 	jne	check_next_resource_id
0000987F: 83 C6 14                                              	add	esi,20
00009882: E8 6B FF FF FF                                        	call	skip_resource_name
00009887: 66 83 3E FF                                           	cmp	word [esi],0FFFFh
0000988B: 75 14                                                 	jne	check_next_resource_id
0000988D: 0F B7 46 02                                           	movzx	eax,word [esi+2]
00009891: 39 D8                                                 	cmp	eax,ebx
00009893: 7E 0C                                                 	jle	check_next_resource_id
00009895: 39 D0                                                 	cmp	eax,edx
00009897: 7F 08                                                 	jg	check_next_resource_id
00009899: 89 C2                                                 	mov	edx,eax
0000989B: 8B 04 24                                              	mov	eax,[esp]
0000989E: 89 78 08                                              	mov	[eax+8],edi
                                                                      check_next_resource_id:
000098A1: 5E                                                    	pop	esi
000098A2: 8B 46 10                                              	mov	eax,[esi+16]
000098A5: 8D 74 06 14                                           	lea	esi,[esi+20+eax]
000098A9: EB C9                                                 	jmp	find_resource_id
                                                                      resource_id_ok:
000098AB: 81 FA 00 00 01 00                                     	cmp	edx,10000h
000098B1: 74 20                                                 	je	resource_id_directory_done
000098B3: 89 D3                                                 	mov	ebx,edx
                                                                      make_resource_id_entry:
000098B5: 8B 04 24                                              	mov	eax,[esp]
000098B8: 66 FF 40 0E                                           	inc	word [eax+14]
000098BC: 8D 47 08                                              	lea	eax,[edi+8]
000098BF: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
000098C5: 0F 83 C7 6F FF FF                                     	jae	out_of_memory
000098CB: 89 D8                                                 	mov	eax,ebx
000098CD: AB                                                    	stos	dword [edi]
000098CE: 31 C0                                                 	xor	eax,eax
000098D0: AB                                                    	stos	dword [edi]
000098D1: EB 96                                                 	jmp	make_resource_id_directory
                                                                      resource_id_directory_done:
000098D3: 58                                                    	pop	eax
000098D4: 89 EE                                                 	mov	esi,ebp
000098D6: 59                                                    	pop	ecx
000098D7: 83 C6 08                                              	add	esi,8
000098DA: 66 49                                                 	dec	cx
000098DC: 0F 85 99 FE FF FF                                     	jnz	make_resource_directories
                                                                      resource_directories_ok:
000098E2: C1 E9 10                                              	shr	ecx,16
000098E5: 0F 85 90 FE FF FF                                     	jnz	make_resource_directories
000098EB: 8B 35 68 A2 01 00                                     	mov	esi,[resource_data]
000098F1: 83 C6 10                                              	add	esi,10h
000098F4: 0F B7 46 FC                                           	movzx	eax,word [esi-4]
000098F8: 0F B7 56 FE                                           	movzx	edx,word [esi-2]
000098FC: 01 D0                                                 	add	eax,edx
000098FE: 8D 34 C6                                              	lea	esi,[esi+eax*8]
00009901: 57                                                    	push	edi			; address of language directories
                                                                      update_resource_directories:
00009902: 3B 34 24                                              	cmp	esi,[esp]
00009905: 0F 84 D9 00 00 00                                     	je	resource_directories_updated
0000990B: 83 C6 10                                              	add	esi,10h
0000990E: 8B 4E FC                                              	mov	ecx,[esi-4]
00009911: 66 09 C9                                              	or	cx,cx
00009914: 0F 84 BC 00 00 00                                     	jz	language_directories_ok
                                                                      make_language_directories:
0000991A: 51                                                    	push	ecx
0000991B: 57                                                    	push	edi
0000991C: 89 FA                                                 	mov	edx,edi
0000991E: 2B 15 68 A2 01 00                                     	sub	edx,[resource_data]
00009924: 0F BA EA 1F                                           	bts	edx,31
00009928: 89 56 04                                              	mov	[esi+4],edx
0000992B: 8D 47 10                                              	lea	eax,[edi+16]
0000992E: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
00009934: 0F 83 58 6F FF FF                                     	jae	out_of_memory
0000993A: 31 C0                                                 	xor	eax,eax
0000993C: AB                                                    	stos	dword [edi]
0000993D: E8 7B 6D FF FF                                        	call	make_timestamp
00009942: AB                                                    	stos	dword [edi]
00009943: 31 C0                                                 	xor	eax,eax
00009945: AB                                                    	stos	dword [edi]
00009946: AB                                                    	stos	dword [edi]
00009947: 89 F5                                                 	mov	ebp,esi
00009949: BB FF FF FF FF                                        	mov	ebx,-1
                                                                      make_language_id_directory:
0000994E: 8B 35 58 A1 01 00                                     	mov	esi,[free_additional_memory]
00009954: BA 00 00 01 00                                        	mov	edx,10000h
                                                                      find_language_id:
00009959: 83 3E 00                                              	cmp	dword [esi],0
0000995C: 74 3E                                                 	je	language_id_ok
0000995E: 56                                                    	push	esi
0000995F: 39 6E 08                                              	cmp	[esi+8],ebp
00009962: 75 2E                                                 	jne	check_next_language_id
00009964: 83 C6 14                                              	add	esi,20
00009967: 89 F0                                                 	mov	eax,esi
00009969: E8 84 FE FF FF                                        	call	skip_resource_name
0000996E: E8 7F FE FF FF                                        	call	skip_resource_name
00009973: F7 D8                                                 	neg	eax
00009975: 01 F0                                                 	add	eax,esi
00009977: 83 E0 03                                              	and	eax,11b
0000997A: 01 C6                                                 	add	esi,eax
                                                                      get_language_id:
0000997C: 0F B7 46 06                                           	movzx	eax,word [esi+6]
00009980: 39 D8                                                 	cmp	eax,ebx
00009982: 7E 0E                                                 	jle	check_next_language_id
00009984: 39 D0                                                 	cmp	eax,edx
00009986: 7D 0A                                                 	jge	check_next_language_id
00009988: 89 C2                                                 	mov	edx,eax
0000998A: 8B 04 24                                              	mov	eax,[esp]
0000998D: A3 F4 A1 01 00                                        	mov	dword [value],eax
                                                                      check_next_language_id:
00009992: 5E                                                    	pop	esi
00009993: 8B 46 10                                              	mov	eax,[esi+16]
00009996: 8D 74 06 14                                           	lea	esi,[esi+20+eax]
0000999A: EB BD                                                 	jmp	find_language_id
                                                                      language_id_ok:
0000999C: 81 FA 00 00 01 00                                     	cmp	edx,10000h
000099A2: 74 23                                                 	je	language_id_directory_done
000099A4: 89 D3                                                 	mov	ebx,edx
                                                                      make_language_id_entry:
000099A6: 8B 04 24                                              	mov	eax,[esp]
000099A9: 66 FF 40 0E                                           	inc	word [eax+14]
000099AD: 8D 47 08                                              	lea	eax,[edi+8]
000099B0: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
000099B6: 0F 83 D6 6E FF FF                                     	jae	out_of_memory
000099BC: 89 D8                                                 	mov	eax,ebx
000099BE: AB                                                    	stos	dword [edi]
000099BF: A1 F4 A1 01 00                                        	mov	eax,dword [value]
000099C4: AB                                                    	stos	dword [edi]
000099C5: EB 87                                                 	jmp	make_language_id_directory
                                                                      language_id_directory_done:
000099C7: 58                                                    	pop	eax
000099C8: 89 EE                                                 	mov	esi,ebp
000099CA: 59                                                    	pop	ecx
000099CB: 83 C6 08                                              	add	esi,8
000099CE: 66 49                                                 	dec	cx
000099D0: 0F 85 44 FF FF FF                                     	jnz	make_language_directories
                                                                      language_directories_ok:
000099D6: C1 E9 10                                              	shr	ecx,16
000099D9: 0F 85 3B FF FF FF                                     	jnz	make_language_directories
000099DF: E9 1E FF FF FF                                        	jmp	update_resource_directories
                                                                      resource_directories_updated:
000099E4: 8B 35 68 A2 01 00                                     	mov	esi,[resource_data]
000099EA: 57                                                    	push	edi
                                                                      make_name_strings:
000099EB: 83 C6 10                                              	add	esi,10h
000099EE: 0F B7 46 FE                                           	movzx	eax,word [esi-2]
000099F2: 0F B7 4E FC                                           	movzx	ecx,word [esi-4]
000099F6: 01 C8                                                 	add	eax,ecx
000099F8: 8D 04 C6                                              	lea	eax,[esi+eax*8]
000099FB: 50                                                    	push	eax
000099FC: 09 C9                                                 	or	ecx,ecx
000099FE: 74 3D                                                 	jz	string_entries_processed
                                                                      process_string_entries:
00009A00: 51                                                    	push	ecx
00009A01: 89 FA                                                 	mov	edx,edi
00009A03: 2B 15 68 A2 01 00                                     	sub	edx,[resource_data]
00009A09: 0F BA EA 1F                                           	bts	edx,31
00009A0D: 87 16                                                 	xchg	[esi],edx
00009A0F: 89 FB                                                 	mov	ebx,edi
00009A11: 66 31 C0                                              	xor	ax,ax
00009A14: 66 AB                                                 	stos	word [edi]
                                                                      copy_string_data:
00009A16: 8D 47 02                                              	lea	eax,[edi+2]
00009A19: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
00009A1F: 0F 83 6D 6E FF FF                                     	jae	out_of_memory
00009A25: 66 8B 02                                              	mov	ax,[edx]
00009A28: 66 09 C0                                              	or	ax,ax
00009A2B: 74 0A                                                 	jz	string_data_copied
00009A2D: 66 AB                                                 	stos	word [edi]
00009A2F: 66 FF 03                                              	inc	word [ebx]
00009A32: 83 C2 02                                              	add	edx,2
00009A35: EB DF                                                 	jmp	copy_string_data
                                                                      string_data_copied:
00009A37: 83 C6 08                                              	add	esi,8
00009A3A: 59                                                    	pop	ecx
00009A3B: E2 C3                                                 	loop	process_string_entries
                                                                      string_entries_processed:
00009A3D: 5E                                                    	pop	esi
00009A3E: 3B 34 24                                              	cmp	esi,[esp]
00009A41: 72 A8                                                 	jb	make_name_strings
00009A43: 89 F8                                                 	mov	eax,edi
00009A45: 2B 05 68 A2 01 00                                     	sub	eax,[resource_data]
00009A4B: A8 03                                                 	test	al,11b
00009A4D: 74 05                                                 	jz	resource_strings_alignment_ok
00009A4F: 66 31 C0                                              	xor	ax,ax
00009A52: 66 AB                                                 	stos	word [edi]
                                                                      resource_strings_alignment_ok:
00009A54: 5A                                                    	pop	edx
00009A55: 5B                                                    	pop	ebx			; address of language directories
00009A56: 89 FD                                                 	mov	ebp,edi
                                                                      update_language_directories:
00009A58: 83 C3 10                                              	add	ebx,10h
00009A5B: 0F B7 43 FE                                           	movzx	eax,word [ebx-2]
00009A5F: 0F B7 4B FC                                           	movzx	ecx,word [ebx-4]
00009A63: 01 C1                                                 	add	ecx,eax
                                                                      make_data_records:
00009A65: 51                                                    	push	ecx
00009A66: 89 FE                                                 	mov	esi,edi
00009A68: 2B 35 68 A2 01 00                                     	sub	esi,[resource_data]
00009A6E: 87 73 04                                              	xchg	esi,[ebx+4]
00009A71: 8D 47 10                                              	lea	eax,[edi+16]
00009A74: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
00009A7A: 0F 83 12 6E FF FF                                     	jae	out_of_memory
00009A80: 89 F0                                                 	mov	eax,esi
00009A82: AB                                                    	stos	dword [edi]
00009A83: 8B 46 0C                                              	mov	eax,[esi+12]
00009A86: AB                                                    	stos	dword [edi]
00009A87: 31 C0                                                 	xor	eax,eax
00009A89: AB                                                    	stos	dword [edi]
00009A8A: AB                                                    	stos	dword [edi]
00009A8B: 59                                                    	pop	ecx
00009A8C: 83 C3 08                                              	add	ebx,8
00009A8F: E2 D4                                                 	loop	make_data_records
00009A91: 39 D3                                                 	cmp	ebx,edx
00009A93: 72 C3                                                 	jb	update_language_directories
00009A95: 5B                                                    	pop	ebx			; file handle
00009A96: 89 EE                                                 	mov	esi,ebp
00009A98: 89 FD                                                 	mov	ebp,edi
                                                                      update_data_records:
00009A9A: 55                                                    	push	ebp
00009A9B: 89 F9                                                 	mov	ecx,edi
00009A9D: A1 50 A2 01 00                                        	mov	eax,[current_section]
00009AA2: 2B 48 14                                              	sub	ecx,[eax+14h]
00009AA5: 03 48 0C                                              	add	ecx,[eax+0Ch]
00009AA8: 87 0E                                                 	xchg	ecx,[esi]
00009AAA: 8B 11                                                 	mov	edx,[ecx]
00009AAC: 30 C0                                                 	xor	al,al
00009AAE: E8 2F 69 FF FF                                        	call	lseek
00009AB3: 89 FA                                                 	mov	edx,edi
00009AB5: 8B 4E 04                                              	mov	ecx,[esi+4]
00009AB8: 01 CF                                                 	add	edi,ecx
00009ABA: 3B 3D E4 A1 01 00                                     	cmp	edi,[tagged_blocks]
00009AC0: 0F 87 CC 6D FF FF                                     	ja	out_of_memory
00009AC6: E8 F3 68 FF FF                                        	call	read
00009ACB: 89 F8                                                 	mov	eax,edi
00009ACD: 2B 05 68 A2 01 00                                     	sub	eax,[resource_data]
00009AD3: 83 E0 03                                              	and	eax,11b
00009AD6: 74 0B                                                 	jz	resource_data_alignment_ok
00009AD8: B9 04 00 00 00                                        	mov	ecx,4
00009ADD: 29 C1                                                 	sub	ecx,eax
00009ADF: 30 C0                                                 	xor	al,al
00009AE1: F3 AA                                                 	rep	stos byte [edi]
                                                                      resource_data_alignment_ok:
00009AE3: 5D                                                    	pop	ebp
00009AE4: 83 C6 10                                              	add	esi,16
00009AE7: 39 EE                                                 	cmp	esi,ebp
00009AE9: 72 AF                                                 	jb	update_data_records
00009AEB: 5E                                                    	pop	esi
00009AEC: E8 C5 68 FF FF                                        	call	close
00009AF1: 89 F8                                                 	mov	eax,edi
00009AF3: 2B 05 68 A2 01 00                                     	sub	eax,[resource_data]
00009AF9: A3 6C A2 01 00                                        	mov	[resource_size],eax
                                                                      resource_done:
00009AFE: C3                                                    	ret
                                                                close_pe:
00009AFF: E8 66 F4 FF FF                                        	call	close_pe_section
00009B04: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
00009B0A: 89 42 50                                              	mov	[edx+50h],eax
00009B0D: E8 AB 6B FF FF                                        	call	make_timestamp
00009B12: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
00009B18: 89 42 08                                              	mov	[edx+8],eax
00009B1B: A1 44 A2 01 00                                        	mov	eax,[number_of_sections]
00009B20: 66 89 42 06                                           	mov	[edx+6],ax
00009B24: 6B C0 28                                              	imul	eax,28h
00009B27: 0F B7 4A 14                                           	movzx	ecx,word [edx+14h]
00009B2B: 8D 44 08 18                                           	lea	eax,[eax+18h+ecx]
00009B2F: 03 05 48 A2 01 00                                     	add	eax,[stub_size]
00009B35: 8B 4A 3C                                              	mov	ecx,[edx+3Ch]
00009B38: 49                                                    	dec	ecx
00009B39: 01 C8                                                 	add	eax,ecx
00009B3B: F7 D1                                                 	not	ecx
00009B3D: 21 C8                                                 	and	eax,ecx
00009B3F: 3B 42 54                                              	cmp	eax,[edx+54h]
00009B42: 74 07                                                 	je	pe_sections_ok
00009B44: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      pe_sections_ok:
00009B4B: 31 C9                                                 	xor	ecx,ecx
00009B4D: 83 C2 78                                              	add	edx,78h
00009B50: F7 05 34 A2 01 00 04 00 00 00                         	test	[format_flags],4
00009B5A: 74 03                                                 	jz	process_directories
00009B5C: 83 C2 10                                              	add	edx,10h
                                                                      process_directories:
00009B5F: 8B 04 CA                                              	mov	eax,[edx+ecx*8]
00009B62: 09 C0                                                 	or	eax,eax
00009B64: 74 17                                                 	jz	directory_ok
00009B66: 83 7C CA 04 FF                                        	cmp	dword [edx+ecx*8+4],-1
00009B6B: 75 10                                                 	jne	directory_ok
                                                                      section_data:
00009B6D: 8B 1C CA                                              	mov	ebx,[edx+ecx*8]
00009B70: 8B 43 0C                                              	mov	eax,[ebx+0Ch]
00009B73: 89 04 CA                                              	mov	[edx+ecx*8],eax 	; directory rva
00009B76: 8B 43 08                                              	mov	eax,[ebx+8]
00009B79: 89 44 CA 04                                           	mov	[edx+ecx*8+4],eax	; directory size
                                                                      directory_ok:
00009B7D: FE C1                                                 	inc	cl
00009B7F: 80 F9 10                                              	cmp	cl,10h
00009B82: 72 DB                                                 	jb	process_directories
00009B84: 83 7A 28 00                                           	cmp	dword [edx+5*8],0
00009B88: 75 21                                                 	jne	finish_pe_relocations
00009B8A: A1 40 A2 01 00                                        	mov	eax,[number_of_relocations]
00009B8F: C1 E0 02                                              	shl	eax,2
00009B92: 29 05 58 A1 01 00                                     	sub	[free_additional_memory],eax
00009B98: 0F BA 35 38 A2 01 00 00                               	btr	[resolver_flags],0
00009BA0: 73 2B                                                 	jnc	pe_relocations_ok
00009BA2: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
00009BA9: EB 22                                                 	jmp	pe_relocations_ok
                                                                      finish_pe_relocations:
00009BAB: 57                                                    	push	edi
00009BAC: 8B 3D 74 A2 01 00                                     	mov	edi,[reserved_fixups]
00009BB2: E8 B5 F8 FF FF                                        	call	make_fixups
00009BB7: 5F                                                    	pop	edi
00009BB8: 01 05 70 A2 01 00                                     	add	[actual_fixups_size],eax
00009BBE: 3B 05 78 A2 01 00                                     	cmp	eax,[reserved_fixups_size]
00009BC4: 74 07                                                 	je	pe_relocations_ok
00009BC6: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      pe_relocations_ok:
00009BCD: 8B 1D 60 A1 01 00                                     	mov	ebx,[code_start]
00009BD3: 2B 1D 48 A2 01 00                                     	sub	ebx,[stub_size]
00009BD9: 89 F9                                                 	mov	ecx,edi
00009BDB: 29 D9                                                 	sub	ecx,ebx
00009BDD: 89 CD                                                 	mov	ebp,ecx
00009BDF: D1 E9                                                 	shr	ecx,1
00009BE1: 31 C0                                                 	xor	eax,eax
00009BE3: 99                                                    	cdq
                                                                      calculate_checksum:
00009BE4: 66 8B 13                                              	mov	dx,[ebx]
00009BE7: 01 D0                                                 	add	eax,edx
00009BE9: 66 89 C2                                              	mov	dx,ax
00009BEC: C1 E8 10                                              	shr	eax,16
00009BEF: 01 D0                                                 	add	eax,edx
00009BF1: 83 C3 02                                              	add	ebx,2
00009BF4: E2 EE                                                 	loop	calculate_checksum
00009BF6: 01 E8                                                 	add	eax,ebp
00009BF8: 8B 1D 60 A1 01 00                                     	mov	ebx,[code_start]
00009BFE: 89 43 58                                              	mov	[ebx+58h],eax
00009C01: C3                                                    	ret
                                                                
                                                                format_coff:
00009C02: A1 34 A1 01 00                                        	mov	eax,[additional_memory]
00009C07: A3 3C A2 01 00                                        	mov	[symbols_stream],eax
00009C0C: 89 C3                                                 	mov	ebx,eax
00009C0E: 83 C0 20                                              	add	eax,20h
00009C11: 3B 05 E8 A1 01 00                                     	cmp	eax,[structures_buffer]
00009C17: 0F 83 75 6C FF FF                                     	jae	out_of_memory
00009C1D: A3 58 A1 01 00                                        	mov	[free_additional_memory],eax
00009C22: 31 C0                                                 	xor	eax,eax
00009C24: 88 03                                                 	mov	[ebx],al
00009C26: 89 43 04                                              	mov	[ebx+4],eax
00009C29: 89 7B 08                                              	mov	[ebx+8],edi
00009C2C: B0 04                                                 	mov	al,4
00009C2E: 89 43 10                                              	mov	[ebx+10h],eax
00009C31: B0 60                                                 	mov	al,60h
00009C33: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
00009C3B: 73 05                                                 	jnc	flat_section_flags_ok
00009C3D: 0D 00 00 00 E0                                        	or	eax,0E0000000h
                                                                      flat_section_flags_ok:
00009C42: 89 43 14                                              	mov	dword [ebx+14h],eax
00009C45: 89 1D 50 A2 01 00                                     	mov	[current_section],ebx
00009C4B: 31 C0                                                 	xor	eax,eax
00009C4D: A3 44 A2 01 00                                        	mov	[number_of_sections],eax
00009C52: 89 DA                                                 	mov	edx,ebx
00009C54: E8 31 AF FF FF                                        	call	init_addressing_space
00009C59: 89 53 14                                              	mov	[ebx+14h],edx
00009C5C: C6 43 09 02                                           	mov	byte [ebx+9],2
00009C60: C6 05 BE A2 01 00 20                                  	mov	[code_type],32
00009C67: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
00009C71: 0F 84 D5 E4 FF FF                                     	jz	format_defined
00009C77: C6 43 09 04                                           	mov	byte [ebx+9],4
00009C7B: C6 05 BE A2 01 00 40                                  	mov	[code_type],64
00009C82: E9 C5 E4 FF FF                                        	jmp	format_defined
                                                                coff_section:
00009C87: E8 35 01 00 00                                        	call	close_coff_section
00009C8C: 8B 1D 58 A1 01 00                                     	mov	ebx,[free_additional_memory]
00009C92: 8D 43 20                                              	lea	eax,[ebx+20h]
00009C95: 3B 05 E8 A1 01 00                                     	cmp	eax,[structures_buffer]
00009C9B: 0F 83 F1 6B FF FF                                     	jae	out_of_memory
00009CA1: A3 58 A1 01 00                                        	mov	[free_additional_memory],eax
00009CA6: 89 1D 50 A2 01 00                                     	mov	[current_section],ebx
00009CAC: FF 05 44 A2 01 00                                     	inc	[number_of_sections]
00009CB2: 31 C0                                                 	xor	eax,eax
00009CB4: 88 03                                                 	mov	[ebx],al
00009CB6: 89 7B 08                                              	mov	[ebx+8],edi
00009CB9: 89 43 10                                              	mov	[ebx+10h],eax
00009CBC: 89 43 14                                              	mov	[ebx+14h],eax
00009CBF: 89 DA                                                 	mov	edx,ebx
00009CC1: E8 A8 AE FF FF                                        	call	create_addressing_space
00009CC6: 87 D3                                                 	xchg	edx,ebx
00009CC8: 89 5A 14                                              	mov	[edx+14h],ebx
00009CCB: C6 42 09 02                                           	mov	byte [edx+9],2
00009CCF: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
00009CD9: 74 04                                                 	jz	coff_labels_type_ok
00009CDB: C6 42 09 04                                           	mov	byte [edx+9],4
                                                                      coff_labels_type_ok:
00009CDF: 66 AD                                                 	lods	word [esi]
00009CE1: 66 83 F8 28                                           	cmp	ax,'('
00009CE5: 0F 85 35 6C FF FF                                     	jne	invalid_argument
00009CEB: 89 73 04                                              	mov	[ebx+4],esi
00009CEE: 8B 0E                                                 	mov	ecx,[esi]
00009CF0: 8D 74 0E 05                                           	lea	esi,[esi+4+ecx+1]
00009CF4: 83 F9 08                                              	cmp	ecx,8
00009CF7: 0F 87 5A 6D FF FF                                     	ja	name_too_long
                                                                      coff_section_flags:
00009CFD: 80 3E 8C                                              	cmp	byte [esi],8Ch
00009D00: 74 34                                                 	je	coff_section_alignment
00009D02: 80 3E 19                                              	cmp	byte [esi],19h
00009D05: 0F 85 8B 00 00 00                                     	jne	coff_section_settings_ok
00009D0B: 46                                                    	inc	esi
00009D0C: AC                                                    	lods	byte [esi]
00009D0D: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
00009D15: 72 08                                                 	jc	coff_section_flag_ok
00009D17: 3C 07                                                 	cmp	al,7
00009D19: 0F 87 01 6C FF FF                                     	ja	invalid_argument
                                                                      coff_section_flag_ok:
00009D1F: 88 C1                                                 	mov	cl,al
00009D21: B8 01 00 00 00                                        	mov	eax,1
00009D26: D3 E0                                                 	shl	eax,cl
00009D28: 85 43 14                                              	test	dword [ebx+14h],eax
00009D2B: 0F 85 65 6D FF FF                                     	jnz	setting_already_specified
00009D31: 09 43 14                                              	or	dword [ebx+14h],eax
00009D34: EB C7                                                 	jmp	coff_section_flags
                                                                      coff_section_alignment:
00009D36: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
00009D3E: 0F 83 DC 6B FF FF                                     	jnc	invalid_argument
00009D44: 46                                                    	inc	esi
00009D45: AC                                                    	lods	byte [esi]
00009D46: 3C 28                                                 	cmp	al,'('
00009D48: 0F 85 D2 6B FF FF                                     	jne	invalid_argument
00009D4E: 80 3E 2E                                              	cmp	byte [esi],'.'
00009D51: 0F 84 4B 6C FF FF                                     	je	invalid_value
00009D57: 53                                                    	push	ebx
00009D58: E8 D7 D6 FF FF                                        	call	get_count_value
00009D5D: 5B                                                    	pop	ebx
00009D5E: 89 C2                                                 	mov	edx,eax
00009D60: 4A                                                    	dec	edx
00009D61: 85 D0                                                 	test	eax,edx
00009D63: 0F 85 39 6C FF FF                                     	jnz	invalid_value
00009D69: 09 C0                                                 	or	eax,eax
00009D6B: 0F 84 31 6C FF FF                                     	jz	invalid_value
00009D71: 3D 00 20 00 00                                        	cmp	eax,2000h
00009D76: 0F 87 26 6C FF FF                                     	ja	invalid_value
00009D7C: 0F BC D0                                              	bsf	edx,eax
00009D7F: 42                                                    	inc	edx
00009D80: C1 E2 14                                              	shl	edx,20
00009D83: 09 53 14                                              	or	[ebx+14h],edx
00009D86: 87 43 10                                              	xchg	[ebx+10h],eax
00009D89: 09 C0                                                 	or	eax,eax
00009D8B: 0F 85 05 6D FF FF                                     	jnz	setting_already_specified
00009D91: E9 67 FF FF FF                                        	jmp	coff_section_flags
                                                                      coff_section_settings_ok:
00009D96: 83 7B 10 00                                           	cmp	dword [ebx+10h],0
00009D9A: 0F 85 D0 B1 FF FF                                     	jne	instruction_assembled
00009DA0: C7 43 10 04 00 00 00                                  	mov	dword [ebx+10h],4
00009DA7: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
00009DAF: 0F 83 BB B1 FF FF                                     	jnc	instruction_assembled
00009DB5: 81 4B 14 00 00 30 00                                  	or	dword [ebx+14h],300000h
00009DBC: E9 AF B1 FF FF                                        	jmp	instruction_assembled
                                                                      close_coff_section:
00009DC1: 8B 1D 50 A2 01 00                                     	mov	ebx,[current_section]
00009DC7: 89 F8                                                 	mov	eax,edi
00009DC9: 8B 53 08                                              	mov	edx,[ebx+8]
00009DCC: 29 D0                                                 	sub	eax,edx
00009DCE: 89 43 0C                                              	mov	[ebx+0Ch],eax
00009DD1: 31 C0                                                 	xor	eax,eax
00009DD3: 87 05 CC A1 01 00                                     	xchg	[undefined_data_end],eax
00009DD9: 39 F8                                                 	cmp	eax,edi
00009DDB: 75 0E                                                 	jne	coff_section_ok
00009DDD: 3B 15 C8 A1 01 00                                     	cmp	edx,[undefined_data_start]
00009DE3: 75 06                                                 	jne	coff_section_ok
00009DE5: 89 D7                                                 	mov	edi,edx
00009DE7: 80 4B 14 80                                           	or	byte [ebx+14h],80h
                                                                      coff_section_ok:
00009DEB: C3                                                    	ret
                                                                mark_coff_relocation:
00009DEC: 80 3D B4 A2 01 00 03                                  	cmp	[value_type],3
00009DF3: 74 55                                                 	je	coff_relocation_relative
00009DF5: 53 50                                                 	push	ebx eax
00009DF7: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
00009E01: 75 20                                                 	jnz	coff_64bit_relocation
00009E03: B0 06                                                 	mov	al,6
00009E05: 80 3D B4 A2 01 00 02                                  	cmp	[value_type],2
00009E0C: 0F 84 80 00 00 00                                     	je	coff_relocation
00009E12: 80 3D B4 A2 01 00 05                                  	cmp	[value_type],5
00009E19: 0F 85 31 6C FF FF                                     	jne	invalid_use_of_symbol
00009E1F: FE C0                                                 	inc	al
00009E21: EB 6F                                                 	jmp	coff_relocation
                                                                      coff_64bit_relocation:
00009E23: B0 01                                                 	mov	al,1
00009E25: 80 3D B4 A2 01 00 04                                  	cmp	[value_type],4
00009E2C: 74 64                                                 	je	coff_relocation
00009E2E: B0 02                                                 	mov	al,2
00009E30: 80 3D B4 A2 01 00 02                                  	cmp	[value_type],2
00009E37: 74 59                                                 	je	coff_relocation
00009E39: 80 3D B4 A2 01 00 05                                  	cmp	[value_type],5
00009E40: 0F 85 0A 6C FF FF                                     	jne	invalid_use_of_symbol
00009E46: FE C0                                                 	inc	al
00009E48: EB 48                                                 	jmp	coff_relocation
                                                                      coff_relocation_relative:
00009E4A: 53                                                    	push	ebx
00009E4B: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
00009E53: 73 10                                                 	jnc	relative_ok
00009E55: 8B 1D 50 A2 01 00                                     	mov	ebx,[current_section]
00009E5B: 8B 5B 08                                              	mov	ebx,[ebx+8]
00009E5E: 29 FB                                                 	sub	ebx,edi
00009E60: 29 D8                                                 	sub	eax,ebx
00009E62: 83 C0 04                                              	add	eax,4
                                                                      relative_ok:
00009E65: 8B 1D C4 A1 01 00                                     	mov	ebx,[addressing_space]
00009E6B: 50                                                    	push	eax
00009E6C: B0 14                                                 	mov	al,20
00009E6E: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
00009E78: 75 0C                                                 	jnz	relative_coff_64bit_relocation
00009E7A: 80 7B 09 02                                           	cmp	byte [ebx+9],2
00009E7E: 0F 85 CC 6B FF FF                                     	jne	invalid_use_of_symbol
00009E84: EB 0C                                                 	jmp	coff_relocation
                                                                      relative_coff_64bit_relocation:
00009E86: B0 04                                                 	mov	al,4
00009E88: 80 7B 09 04                                           	cmp	byte [ebx+9],4
00009E8C: 0F 85 BE 6B FF FF                                     	jne	invalid_use_of_symbol
                                                                      coff_relocation:
00009E92: 8B 1D 58 A1 01 00                                     	mov	ebx,[free_additional_memory]
00009E98: 83 C3 0C                                              	add	ebx,0Ch
00009E9B: 3B 1D E8 A1 01 00                                     	cmp	ebx,[structures_buffer]
00009EA1: 0F 83 EB 69 FF FF                                     	jae	out_of_memory
00009EA7: 89 1D 58 A1 01 00                                     	mov	[free_additional_memory],ebx
00009EAD: 88 43 F4                                              	mov	byte [ebx-0Ch],al
00009EB0: A1 50 A2 01 00                                        	mov	eax,[current_section]
00009EB5: 8B 40 08                                              	mov	eax,[eax+8]
00009EB8: F7 D8                                                 	neg	eax
00009EBA: 01 F8                                                 	add	eax,edi
00009EBC: 89 43 F8                                              	mov	[ebx-0Ch+4],eax
00009EBF: A1 24 A2 01 00                                        	mov	eax,[symbol_identifier]
00009EC4: 89 43 FC                                              	mov	[ebx-0Ch+8],eax
00009EC7: 58 5B                                                 	pop	eax ebx
00009EC9: C3                                                    	ret
                                                                close_coff:
00009ECA: E8 F2 FE FF FF                                        	call	close_coff_section
00009ECF: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
00009ED6: 74 0A                                                 	je	coff_closed
00009ED8: A1 3C A2 01 00                                        	mov	eax,[symbols_stream]
00009EDD: A3 58 A1 01 00                                        	mov	[free_additional_memory],eax
                                                                      coff_closed:
00009EE2: C3                                                    	ret
                                                                coff_formatter:
00009EE3: 2B 3D 60 A1 01 00                                     	sub	edi,[code_start]
00009EE9: 89 3D 64 A1 01 00                                     	mov	[code_size],edi
00009EEF: E8 D9 00 00 00                                        	call	prepare_default_section
00009EF4: 8B 3D 58 A1 01 00                                     	mov	edi,[free_additional_memory]
00009EFA: 89 FB                                                 	mov	ebx,edi
00009EFC: B9 0A 00 00 00                                        	mov	ecx,28h shr 2
00009F01: 0F AF 0D 44 A2 01 00                                  	imul	ecx,[number_of_sections]
00009F08: 83 C1 05                                              	add	ecx,14h shr 2
00009F0B: 8D 04 8F                                              	lea	eax,[edi+ecx*4]
00009F0E: 3B 05 E8 A1 01 00                                     	cmp	eax,[structures_buffer]
00009F14: 0F 83 78 69 FF FF                                     	jae	out_of_memory
00009F1A: 31 C0                                                 	xor	eax,eax
00009F1C: F3 AB                                                 	rep	stos dword [edi]
00009F1E: 66 C7 03 4C 01                                        	mov	word [ebx],14Ch
00009F23: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
00009F2D: 74 05                                                 	jz	coff_magic_ok
00009F2F: 66 C7 03 64 86                                        	mov	word [ebx],8664h
                                                                      coff_magic_ok:
00009F34: 66 C7 43 12 04 01                                     	mov	word [ebx+12h],104h
00009F3A: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
00009F42: 73 04                                                 	jnc	coff_flags_ok
00009F44: 80 4B 12 80                                           	or	byte [ebx+12h],80h
                                                                      coff_flags_ok:
00009F48: 53                                                    	push	ebx
00009F49: E8 6F 67 FF FF                                        	call	make_timestamp
00009F4E: 5B                                                    	pop	ebx
00009F4F: 89 43 04                                              	mov	[ebx+4],eax
00009F52: A1 44 A2 01 00                                        	mov	eax,[number_of_sections]
00009F57: 66 89 43 02                                           	mov	[ebx+2],ax
00009F5B: 8B 35 3C A2 01 00                                     	mov	esi,[symbols_stream]
00009F61: 31 C0                                                 	xor	eax,eax
00009F63: 31 C9                                                 	xor	ecx,ecx
                                                                      enumerate_symbols:
00009F65: 3B 35 58 A1 01 00                                     	cmp	esi,[free_additional_memory]
00009F6B: 0F 84 C7 00 00 00                                     	je	symbols_enumerated
00009F71: 8A 16                                                 	mov	dl,[esi]
00009F73: 08 D2                                                 	or	dl,dl
00009F75: 74 0F                                                 	jz	enumerate_section
00009F77: 80 FA C0                                              	cmp	dl,0C0h
00009F7A: 73 1C                                                 	jae	enumerate_public
00009F7C: 80 FA 80                                              	cmp	dl,80h
00009F7F: 73 3D                                                 	jae	enumerate_extrn
00009F81: 83 C6 0C                                              	add	esi,0Ch
00009F84: EB DF                                                 	jmp	enumerate_symbols
                                                                      enumerate_section:
00009F86: 89 C2                                                 	mov	edx,eax
00009F88: C1 E2 08                                              	shl	edx,8
00009F8B: 89 16                                                 	mov	[esi],edx
00009F8D: 40                                                    	inc	eax
00009F8E: 41                                                    	inc	ecx
00009F8F: 66 89 4E 1E                                           	mov	[esi+1Eh],cx
00009F93: 83 C6 20                                              	add	esi,20h
00009F96: EB CD                                                 	jmp	enumerate_symbols
                                                                      enumerate_public:
00009F98: 89 C2                                                 	mov	edx,eax
00009F9A: C1 E2 08                                              	shl	edx,8
00009F9D: 8A 16                                                 	mov	dl,[esi]
00009F9F: 89 16                                                 	mov	[esi],edx
00009FA1: 8B 56 08                                              	mov	edx,[esi+8]
00009FA4: 83 C6 10                                              	add	esi,10h
00009FA7: 40                                                    	inc	eax
00009FA8: 80 7A 0B 00                                           	cmp	byte [edx+11],0
00009FAC: 74 B7                                                 	je	enumerate_symbols
00009FAE: 8B 52 14                                              	mov	edx,[edx+20]
00009FB1: 80 3A C0                                              	cmp	byte [edx],0C0h
00009FB4: 73 AF                                                 	jae	enumerate_symbols
00009FB6: 80 3A 80                                              	cmp	byte [edx],80h
00009FB9: 72 AA                                                 	jb	enumerate_symbols
00009FBB: 40                                                    	inc	eax
00009FBC: EB A7                                                 	jmp	enumerate_symbols
                                                                      enumerate_extrn:
00009FBE: 89 C2                                                 	mov	edx,eax
00009FC0: C1 E2 08                                              	shl	edx,8
00009FC3: 8A 16                                                 	mov	dl,[esi]
00009FC5: 89 16                                                 	mov	[esi],edx
00009FC7: 83 C6 0C                                              	add	esi,0Ch
00009FCA: 40                                                    	inc	eax
00009FCB: EB 98                                                 	jmp	enumerate_symbols
                                                                      prepare_default_section:
00009FCD: 8B 1D 3C A2 01 00                                     	mov	ebx,[symbols_stream]
00009FD3: 83 7B 0C 00                                           	cmp	dword [ebx+0Ch],0
00009FD7: 75 58                                                 	jne	default_section_ok
00009FD9: 83 3D 44 A2 01 00 00                                  	cmp	[number_of_sections],0
00009FE0: 74 4F                                                 	je	default_section_ok
00009FE2: 89 DA                                                 	mov	edx,ebx
                                                                      find_references_to_default_section:
00009FE4: 3B 1D 58 A1 01 00                                     	cmp	ebx,[free_additional_memory]
00009FEA: 75 08                                                 	jne	check_reference
00009FEC: 83 05 3C A2 01 00 20                                  	add	[symbols_stream],20h
00009FF3: C3                                                    	ret
                                                                      check_reference:
00009FF4: 8A 03                                                 	mov	al,[ebx]
00009FF6: 08 C0                                                 	or	al,al
00009FF8: 74 32                                                 	jz	skip_other_section
00009FFA: 3C C0                                                 	cmp	al,0C0h
00009FFC: 73 0E                                                 	jae	check_public_reference
00009FFE: 3C 80                                                 	cmp	al,80h
0000A000: 73 05                                                 	jae	next_reference
0000A002: 3B 53 08                                              	cmp	edx,[ebx+8]
0000A005: 74 2A                                                 	je	default_section_ok
                                                                      next_reference:
0000A007: 83 C3 0C                                              	add	ebx,0Ch
0000A00A: EB D8                                                 	jmp	find_references_to_default_section
                                                                      check_public_reference:
0000A00C: 8B 43 08                                              	mov	eax,[ebx+8]
0000A00F: 83 C3 10                                              	add	ebx,10h
0000A012: F6 40 08 01                                           	test	byte [eax+8],1
0000A016: 74 CC                                                 	jz	find_references_to_default_section
0000A018: 66 8B 0D 52 A1 01 00                                  	mov	cx,[current_pass]
0000A01F: 66 3B 48 10                                           	cmp	cx,[eax+16]
0000A023: 75 BF                                                 	jne	find_references_to_default_section
0000A025: 3B 50 14                                              	cmp	edx,[eax+20]
0000A028: 74 07                                                 	je	default_section_ok
0000A02A: EB B8                                                 	jmp	find_references_to_default_section
                                                                      skip_other_section:
0000A02C: 83 C3 20                                              	add	ebx,20h
0000A02F: EB B3                                                 	jmp	find_references_to_default_section
                                                                      default_section_ok:
0000A031: FF 05 44 A2 01 00                                     	inc	[number_of_sections]
0000A037: C3                                                    	ret
                                                                      symbols_enumerated:
0000A038: 89 43 0C                                              	mov	[ebx+0Ch],eax
0000A03B: 89 FD                                                 	mov	ebp,edi
0000A03D: 29 DD                                                 	sub	ebp,ebx
0000A03F: 55                                                    	push	ebp
0000A040: 8D 7B 14                                              	lea	edi,[ebx+14h]
0000A043: 8B 35 3C A2 01 00                                     	mov	esi,[symbols_stream]
                                                                      find_section:
0000A049: 3B 35 58 A1 01 00                                     	cmp	esi,[free_additional_memory]
0000A04F: 0F 84 16 01 00 00                                     	je	sections_finished
0000A055: 8A 06                                                 	mov	al,[esi]
0000A057: 08 C0                                                 	or	al,al
0000A059: 74 0C                                                 	jz	section_found
0000A05B: 83 C6 0C                                              	add	esi,0Ch
0000A05E: 3C C0                                                 	cmp	al,0C0h
0000A060: 72 E7                                                 	jb	find_section
0000A062: 83 C6 04                                              	add	esi,4
0000A065: EB E2                                                 	jmp	find_section
                                                                      section_found:
0000A067: 56 57                                                 	push	esi edi
0000A069: 8B 76 04                                              	mov	esi,[esi+4]
0000A06C: 09 F6                                                 	or	esi,esi
0000A06E: 74 09                                                 	jz	default_section
0000A070: 8B 0E                                                 	mov	ecx,[esi]
0000A072: 83 C6 04                                              	add	esi,4
0000A075: F3 A4                                                 	rep	movs byte [edi],[esi]
0000A077: EB 09                                                 	jmp	section_name_ok
                                                                      default_section:
0000A079: B0 2E                                                 	mov	al,'.'
0000A07B: AA                                                    	stos	byte [edi]
0000A07C: B8 66 6C 61 74                                        	mov	eax,'flat'
0000A081: AB                                                    	stos	dword [edi]
                                                                      section_name_ok:
0000A082: 5F 5E                                                 	pop	edi esi
0000A084: 8B 46 0C                                              	mov	eax,[esi+0Ch]
0000A087: 89 47 10                                              	mov	[edi+10h],eax
0000A08A: 8B 46 14                                              	mov	eax,[esi+14h]
0000A08D: 89 47 24                                              	mov	[edi+24h],eax
0000A090: A8 80                                                 	test	al,80h
0000A092: 75 0E                                                 	jnz	section_ptr_ok
0000A094: 8B 46 08                                              	mov	eax,[esi+8]
0000A097: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
0000A09D: 01 E8                                                 	add	eax,ebp
0000A09F: 89 47 14                                              	mov	[edi+14h],eax
                                                                      section_ptr_ok:
0000A0A2: 8B 1D 60 A1 01 00                                     	mov	ebx,[code_start]
0000A0A8: 8B 15 64 A1 01 00                                     	mov	edx,[code_size]
0000A0AE: 01 D3                                                 	add	ebx,edx
0000A0B0: 01 EA                                                 	add	edx,ebp
0000A0B2: 31 C9                                                 	xor	ecx,ecx
0000A0B4: 83 C6 20                                              	add	esi,20h
                                                                      find_relocations:
0000A0B7: 3B 35 58 A1 01 00                                     	cmp	esi,[free_additional_memory]
0000A0BD: 74 43                                                 	je	section_relocations_done
0000A0BF: 8A 06                                                 	mov	al,[esi]
0000A0C1: 08 C0                                                 	or	al,al
0000A0C3: 74 3D                                                 	jz	section_relocations_done
0000A0C5: 3C 80                                                 	cmp	al,80h
0000A0C7: 72 09                                                 	jb	add_relocation
0000A0C9: 3C C0                                                 	cmp	al,0C0h
0000A0CB: 72 30                                                 	jb	next_relocation
0000A0CD: 83 C6 10                                              	add	esi,10h
0000A0D0: EB E5                                                 	jmp	find_relocations
                                                                      add_relocation:
0000A0D2: 8D 43 0A                                              	lea	eax,[ebx+0Ah]
0000A0D5: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
0000A0DB: 0F 87 B1 67 FF FF                                     	ja	out_of_memory
0000A0E1: 8B 46 04                                              	mov	eax,[esi+4]
0000A0E4: 89 03                                                 	mov	[ebx],eax
0000A0E6: 8B 46 08                                              	mov	eax,[esi+8]
0000A0E9: 8B 00                                                 	mov	eax,[eax]
0000A0EB: C1 E8 08                                              	shr	eax,8
0000A0EE: 89 43 04                                              	mov	[ebx+4],eax
0000A0F1: 66 0F B6 06                                           	movzx	ax,byte [esi]
0000A0F5: 66 89 43 08                                           	mov	[ebx+8],ax
0000A0F9: 83 C3 0A                                              	add	ebx,0Ah
0000A0FC: 41                                                    	inc	ecx
                                                                      next_relocation:
0000A0FD: 83 C6 0C                                              	add	esi,0Ch
0000A100: EB B5                                                 	jmp	find_relocations
                                                                      section_relocations_done:
0000A102: 81 F9 00 00 01 00                                     	cmp	ecx,10000h
0000A108: 72 43                                                 	jb	section_relocations_count_16bit
0000A10A: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
0000A112: 0F 83 A9 67 FF FF                                     	jnc	format_limitations_exceeded
0000A118: 66 C7 47 20 FF FF                                     	mov	word [edi+20h],0FFFFh
0000A11E: 81 4F 24 00 00 00 01                                  	or	dword [edi+24h],1000000h
0000A125: 89 57 18                                              	mov	[edi+18h],edx
0000A128: 56 57                                                 	push	esi edi
0000A12A: 51                                                    	push	ecx
0000A12B: 8D 73 FF                                              	lea	esi,[ebx-1]
0000A12E: 83 C3 0A                                              	add	ebx,0Ah
0000A131: 8D 7B FF                                              	lea	edi,[ebx-1]
0000A134: 6B C9 0A                                              	imul	ecx,0Ah
0000A137: FD                                                    	std
0000A138: F3 A4                                                 	rep	movs byte [edi],[esi]
0000A13A: FC                                                    	cld
0000A13B: 59                                                    	pop	ecx
0000A13C: 46                                                    	inc	esi
0000A13D: 41                                                    	inc	ecx
0000A13E: 89 0E                                                 	mov	[esi],ecx
0000A140: 31 C0                                                 	xor	eax,eax
0000A142: 89 46 04                                              	mov	[esi+4],eax
0000A145: 66 89 46 08                                           	mov	[esi+8],ax
0000A149: 5F 5E                                                 	pop	edi esi
0000A14B: EB 0A                                                 	jmp	section_relocations_ok
                                                                      section_relocations_count_16bit:
0000A14D: 66 89 4F 20                                           	mov	[edi+20h],cx
0000A151: 67 E3 03                                              	jcxz	section_relocations_ok
0000A154: 89 57 18                                              	mov	[edi+18h],edx
                                                                      section_relocations_ok:
0000A157: 2B 1D 60 A1 01 00                                     	sub	ebx,[code_start]
0000A15D: 89 1D 64 A1 01 00                                     	mov	[code_size],ebx
0000A163: 83 C7 28                                              	add	edi,28h
0000A166: E9 DE FE FF FF                                        	jmp	find_section
                                                                      sections_finished:
0000A16B: 8B 15 58 A1 01 00                                     	mov	edx,[free_additional_memory]
0000A171: 8B 1D 64 A1 01 00                                     	mov	ebx,[code_size]
0000A177: 01 DD                                                 	add	ebp,ebx
0000A179: 89 6A 08                                              	mov	[edx+8],ebp
0000A17C: 03 1D 60 A1 01 00                                     	add	ebx,[code_start]
0000A182: 89 DF                                                 	mov	edi,ebx
0000A184: 8B 4A 0C                                              	mov	ecx,[edx+0Ch]
0000A187: 6B C9 09                                              	imul	ecx,12h shr 1
0000A18A: 31 C0                                                 	xor	eax,eax
0000A18C: D1 E9                                                 	shr	ecx,1
0000A18E: 73 02                                                 	jnc	zero_symbols_table
0000A190: 66 AB                                                 	stos	word [edi]
                                                                      zero_symbols_table:
0000A192: F3 AB                                                 	rep	stos dword [edi]
0000A194: 89 FA                                                 	mov	edx,edi
0000A196: AB                                                    	stos	dword [edi]
0000A197: 8B 35 3C A2 01 00                                     	mov	esi,[symbols_stream]
                                                                      make_symbols_table:
0000A19D: 3B 35 58 A1 01 00                                     	cmp	esi,[free_additional_memory]
0000A1A3: 0F 84 34 01 00 00                                     	je	symbols_table_ok
0000A1A9: 8A 06                                                 	mov	al,[esi]
0000A1AB: 3C C0                                                 	cmp	al,0C0h
0000A1AD: 73 37                                                 	jae	add_public_symbol
0000A1AF: 3C 80                                                 	cmp	al,80h
0000A1B1: 73 22                                                 	jae	add_extrn_symbol
0000A1B3: 08 C0                                                 	or	al,al
0000A1B5: 74 05                                                 	jz	add_section_symbol
0000A1B7: 83 C6 0C                                              	add	esi,0Ch
0000A1BA: EB E1                                                 	jmp	make_symbols_table
                                                                      add_section_symbol:
0000A1BC: E8 63 01 00 00                                        	call	store_symbol_name
0000A1C1: 0F B7 46 1E                                           	movzx	eax,word [esi+1Eh]
0000A1C5: 66 89 43 0C                                           	mov	[ebx+0Ch],ax
0000A1C9: C6 43 10 03                                           	mov	byte [ebx+10h],3
0000A1CD: 83 C6 20                                              	add	esi,20h
0000A1D0: 83 C3 12                                              	add	ebx,12h
0000A1D3: EB C8                                                 	jmp	make_symbols_table
                                                                      add_extrn_symbol:
0000A1D5: E8 4A 01 00 00                                        	call	store_symbol_name
0000A1DA: C6 43 10 02                                           	mov	byte [ebx+10h],2
0000A1DE: 83 C6 0C                                              	add	esi,0Ch
0000A1E1: 83 C3 12                                              	add	ebx,12h
0000A1E4: EB B7                                                 	jmp	make_symbols_table
                                                                      add_public_symbol:
0000A1E6: E8 39 01 00 00                                        	call	store_symbol_name
0000A1EB: 8B 46 0C                                              	mov	eax,[esi+0Ch]
0000A1EE: A3 74 A1 01 00                                        	mov	[current_line],eax
0000A1F3: 8B 46 08                                              	mov	eax,[esi+8]
0000A1F6: F6 40 08 01                                           	test	byte [eax+8],1
0000A1FA: 74 2E                                                 	jz	undefined_coff_public
0000A1FC: 66 8B 0D 52 A1 01 00                                  	mov	cx,[current_pass]
0000A203: 66 3B 48 10                                           	cmp	cx,[eax+16]
0000A207: 75 21                                                 	jne	undefined_coff_public
0000A209: 8A 48 0B                                              	mov	cl,[eax+11]
0000A20C: 08 C9                                                 	or	cl,cl
0000A20E: 0F 84 BE 00 00 00                                     	jz	public_constant
0000A214: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A21E: 75 14                                                 	jnz	check_64bit_public_symbol
0000A220: 80 F9 02                                              	cmp	cl,2
0000A223: 74 18                                                 	je	public_symbol_type_ok
0000A225: E9 26 68 FF FF                                        	jmp	invalid_use_of_symbol
                                                                      undefined_coff_public:
0000A22A: A3 D8 A1 01 00                                        	mov	[error_info],eax
0000A22F: E9 82 67 FF FF                                        	jmp	undefined_symbol
                                                                      check_64bit_public_symbol:
0000A234: 80 F9 04                                              	cmp	cl,4
0000A237: 0F 85 13 68 FF FF                                     	jne	invalid_use_of_symbol
                                                                      public_symbol_type_ok:
0000A23D: 8B 48 14                                              	mov	ecx,[eax+20]
0000A240: 80 39 80                                              	cmp	byte [ecx],80h
0000A243: 74 50                                                 	je	alias_symbol
0000A245: 80 39 00                                              	cmp	byte [ecx],0
0000A248: 0F 85 02 68 FF FF                                     	jne	invalid_use_of_symbol
0000A24E: 66 8B 49 1E                                           	mov	cx,[ecx+1Eh]
0000A252: 66 89 4B 0C                                           	mov	[ebx+0Ch],cx
                                                                      public_symbol_section_ok:
0000A256: 0F B6 48 09                                           	movzx	ecx,byte [eax+9]
0000A25A: D0 E9                                                 	shr	cl,1
0000A25C: 80 E1 01                                              	and	cl,1
0000A25F: F7 D9                                                 	neg	ecx
0000A261: 3B 48 04                                              	cmp	ecx,[eax+4]
0000A264: 0F 85 42 67 FF FF                                     	jne	value_out_of_range
0000A26A: 33 08                                                 	xor	ecx,[eax]
0000A26C: 0F 88 3A 67 FF FF                                     	js	value_out_of_range
0000A272: 8B 00                                                 	mov	eax,[eax]
0000A274: 89 43 08                                              	mov	[ebx+8],eax
0000A277: B0 02                                                 	mov	al,2
0000A279: 80 3E C0                                              	cmp	byte [esi],0C0h
0000A27C: 74 09                                                 	je	store_symbol_class
0000A27E: FE C0                                                 	inc	al
0000A280: 80 3E C1                                              	cmp	byte [esi],0C1h
0000A283: 74 02                                                 	je	store_symbol_class
0000A285: B0 69                                                 	mov	al,105
                                                                      store_symbol_class:
0000A287: 88 43 10                                              	mov	byte [ebx+10h],al
0000A28A: 83 C6 10                                              	add	esi,10h
0000A28D: 83 C3 12                                              	add	ebx,12h
0000A290: E9 08 FF FF FF                                        	jmp	make_symbols_table
                                                                      alias_symbol:
0000A295: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
0000A29D: 0F 83 AD 67 FF FF                                     	jnc	invalid_use_of_symbol
0000A2A3: 8B 08                                                 	mov	ecx,[eax]
0000A2A5: 0B 48 04                                              	or	ecx,[eax+4]
0000A2A8: 0F 85 A2 67 FF FF                                     	jnz	invalid_use_of_symbol
0000A2AE: C6 43 10 69                                           	mov	byte [ebx+10h],69h
0000A2B2: C6 43 11 01                                           	mov	byte [ebx+11h],1
0000A2B6: 83 C3 12                                              	add	ebx,12h
0000A2B9: 8B 48 14                                              	mov	ecx,[eax+20]
0000A2BC: 8B 09                                                 	mov	ecx,[ecx]
0000A2BE: C1 E9 08                                              	shr	ecx,8
0000A2C1: 89 0B                                                 	mov	[ebx],ecx
0000A2C3: C6 43 04 03                                           	mov	byte [ebx+4],3
0000A2C7: 83 C6 10                                              	add	esi,10h
0000A2CA: 83 C3 12                                              	add	ebx,12h
0000A2CD: E9 CB FE FF FF                                        	jmp	make_symbols_table
                                                                      public_constant:
0000A2D2: 66 C7 43 0C FF FF                                     	mov	word [ebx+0Ch],0FFFFh
0000A2D8: E9 79 FF FF FF                                        	jmp	public_symbol_section_ok
                                                                      symbols_table_ok:
0000A2DD: 89 F8                                                 	mov	eax,edi
0000A2DF: 29 D0                                                 	sub	eax,edx
0000A2E1: 89 02                                                 	mov	[edx],eax
0000A2E3: 2B 3D 60 A1 01 00                                     	sub	edi,[code_start]
0000A2E9: 89 3D 64 A1 01 00                                     	mov	[code_size],edi
0000A2EF: 83 25 6C A1 01 00 00                                  	and	[written_size],0
0000A2F6: 8B 15 48 A1 01 00                                     	mov	edx,[output_file]
0000A2FC: E8 99 60 FF FF                                        	call	create
0000A301: 0F 82 A9 65 FF FF                                     	jc	write_failed
0000A307: 8B 15 58 A1 01 00                                     	mov	edx,[free_additional_memory]
0000A30D: 59                                                    	pop	ecx
0000A30E: 01 0D 6C A1 01 00                                     	add	[written_size],ecx
0000A314: E8 B7 60 FF FF                                        	call	write
0000A319: 0F 82 91 65 FF FF                                     	jc	write_failed
0000A31F: E9 7A DD FF FF                                        	jmp	write_output
                                                                      store_symbol_name:
0000A324: 56                                                    	push	esi
0000A325: 8B 76 04                                              	mov	esi,[esi+4]
0000A328: 09 F6                                                 	or	esi,esi
0000A32A: 74 10                                                 	jz	default_name
0000A32C: AD                                                    	lods	dword [esi]
0000A32D: 89 C1                                                 	mov	ecx,eax
0000A32F: 83 F9 08                                              	cmp	ecx,8
0000A332: 77 17                                                 	ja	add_string
0000A334: 57                                                    	push	edi
0000A335: 89 DF                                                 	mov	edi,ebx
0000A337: F3 A4                                                 	rep	movs byte [edi],[esi]
0000A339: 5F 5E                                                 	pop	edi esi
0000A33B: C3                                                    	ret
                                                                      default_name:
0000A33C: C7 03 2E 66 6C 61                                     	mov	dword [ebx],'.fla'
0000A342: C7 43 04 74 00 00 00                                  	mov	dword [ebx+4],'t'
0000A349: 5E                                                    	pop	esi
0000A34A: C3                                                    	ret
                                                                      add_string:
0000A34B: 89 F8                                                 	mov	eax,edi
0000A34D: 29 D0                                                 	sub	eax,edx
0000A34F: 89 43 04                                              	mov	[ebx+4],eax
0000A352: 41                                                    	inc	ecx
0000A353: F3 A4                                                 	rep	movs byte [edi],[esi]
0000A355: 5E                                                    	pop	esi
0000A356: C3                                                    	ret
                                                                
                                                                format_elf:
0000A357: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A361: 0F 85 CF 00 00 00                                     	jnz	format_elf64
0000A367: 89 FA                                                 	mov	edx,edi
0000A369: B9 0D 00 00 00                                        	mov	ecx,34h shr 2
0000A36E: 8D 04 8F                                              	lea	eax,[edi+ecx*4]
0000A371: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
0000A377: 0F 83 15 65 FF FF                                     	jae	out_of_memory
0000A37D: 31 C0                                                 	xor	eax,eax
0000A37F: F3 AB                                                 	rep	stos dword [edi]
0000A381: C7 02 7F 45 4C 46                                     	mov	dword [edx],7Fh + 'ELF' shl 8
0000A387: B0 01                                                 	mov	al,1
0000A389: 88 42 04                                              	mov	[edx+4],al
0000A38C: 88 42 05                                              	mov	[edx+5],al
0000A38F: 88 42 06                                              	mov	[edx+6],al
0000A392: 88 42 14                                              	mov	[edx+14h],al
0000A395: C6 42 12 03                                           	mov	byte [edx+12h],3
0000A399: C6 42 28 34                                           	mov	byte [edx+28h],34h
0000A39D: C6 42 2E 28                                           	mov	byte [edx+2Eh],28h
0000A3A1: C6 05 BE A2 01 00 20                                  	mov	[code_type],32
0000A3A8: C6 42 10 02                                           	mov	byte [edx+10h],2
0000A3AC: 66 81 3E 19 1D                                        	cmp	word [esi],1D19h
0000A3B1: 0F 84 EA 08 00 00                                     	je	format_elf_exe
0000A3B7: C6 42 10 03                                           	mov	byte [edx+10h],3
0000A3BB: 66 81 3E 1E 02                                        	cmp	word [esi],021Eh
0000A3C0: 0F 84 DB 08 00 00                                     	je	format_elf_exe
                                                                      elf_header_ok:
0000A3C6: C6 42 10 01                                           	mov	byte [edx+10h],1
0000A3CA: A1 34 A1 01 00                                        	mov	eax,[additional_memory]
0000A3CF: A3 3C A2 01 00                                        	mov	[symbols_stream],eax
0000A3D4: 89 C3                                                 	mov	ebx,eax
0000A3D6: 83 C0 20                                              	add	eax,20h
0000A3D9: 3B 05 E8 A1 01 00                                     	cmp	eax,[structures_buffer]
0000A3DF: 0F 83 AD 64 FF FF                                     	jae	out_of_memory
0000A3E5: A3 58 A1 01 00                                        	mov	[free_additional_memory],eax
0000A3EA: 31 C0                                                 	xor	eax,eax
0000A3EC: 89 1D 50 A2 01 00                                     	mov	[current_section],ebx
0000A3F2: A3 44 A2 01 00                                        	mov	[number_of_sections],eax
0000A3F7: 88 03                                                 	mov	[ebx],al
0000A3F9: 89 43 04                                              	mov	[ebx+4],eax
0000A3FC: 89 7B 08                                              	mov	[ebx+8],edi
0000A3FF: B0 07                                                 	mov	al,111b
0000A401: 89 43 14                                              	mov	[ebx+14h],eax
0000A404: B0 04                                                 	mov	al,4
0000A406: 89 43 10                                              	mov	[ebx+10h],eax
0000A409: 89 DA                                                 	mov	edx,ebx
0000A40B: E8 7A A7 FF FF                                        	call	init_addressing_space
0000A410: 87 D3                                                 	xchg	edx,ebx
0000A412: 89 5A 14                                              	mov	[edx+14h],ebx
0000A415: C6 42 09 02                                           	mov	byte [edx+9],2
0000A419: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A423: 0F 84 23 DD FF FF                                     	jz	format_defined
0000A429: C6 42 09 04                                           	mov	byte [edx+9],4
0000A42D: C6 43 10 08                                           	mov	byte [ebx+10h],8
0000A431: E9 16 DD FF FF                                        	jmp	format_defined
                                                                      format_elf64:
0000A436: 89 FA                                                 	mov	edx,edi
0000A438: B9 10 00 00 00                                        	mov	ecx,40h shr 2
0000A43D: 8D 04 8F                                              	lea	eax,[edi+ecx*4]
0000A440: 3B 05 E4 A1 01 00                                     	cmp	eax,[tagged_blocks]
0000A446: 0F 83 46 64 FF FF                                     	jae	out_of_memory
0000A44C: 31 C0                                                 	xor	eax,eax
0000A44E: F3 AB                                                 	rep	stos dword [edi]
0000A450: C7 02 7F 45 4C 46                                     	mov	dword [edx],7Fh + 'ELF' shl 8
0000A456: B0 01                                                 	mov	al,1
0000A458: 88 42 05                                              	mov	[edx+5],al
0000A45B: 88 42 06                                              	mov	[edx+6],al
0000A45E: 88 42 14                                              	mov	[edx+14h],al
0000A461: C6 42 04 02                                           	mov	byte [edx+4],2
0000A465: C6 42 12 3E                                           	mov	byte [edx+12h],62
0000A469: C6 42 34 40                                           	mov	byte [edx+34h],40h
0000A46D: C6 42 3A 40                                           	mov	byte [edx+3Ah],40h
0000A471: C6 05 BE A2 01 00 40                                  	mov	[code_type],64
0000A478: C6 42 10 02                                           	mov	byte [edx+10h],2
0000A47C: 66 81 3E 19 1D                                        	cmp	word [esi],1D19h
0000A481: 0F 84 13 09 00 00                                     	je	format_elf64_exe
0000A487: C6 42 10 03                                           	mov	byte [edx+10h],3
0000A48B: 66 81 3E 1E 02                                        	cmp	word [esi],021Eh
0000A490: 0F 84 04 09 00 00                                     	je	format_elf64_exe
0000A496: E9 2B FF FF FF                                        	jmp	elf_header_ok
                                                                elf_section:
0000A49B: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
0000A4A3: 0F 82 81 64 FF FF                                     	jc	illegal_instruction
0000A4A9: E8 13 F9 FF FF                                        	call	close_coff_section
0000A4AE: 8B 1D 58 A1 01 00                                     	mov	ebx,[free_additional_memory]
0000A4B4: 8D 43 20                                              	lea	eax,[ebx+20h]
0000A4B7: 3B 05 E8 A1 01 00                                     	cmp	eax,[structures_buffer]
0000A4BD: 0F 83 CF 63 FF FF                                     	jae	out_of_memory
0000A4C3: A3 58 A1 01 00                                        	mov	[free_additional_memory],eax
0000A4C8: 89 1D 50 A2 01 00                                     	mov	[current_section],ebx
0000A4CE: 66 FF 05 44 A2 01 00                                  	inc	word [number_of_sections]
0000A4D5: 0F 84 E6 63 FF FF                                     	jz	format_limitations_exceeded
0000A4DB: 31 C0                                                 	xor	eax,eax
0000A4DD: 88 03                                                 	mov	[ebx],al
0000A4DF: 89 7B 08                                              	mov	[ebx+8],edi
0000A4E2: 89 43 10                                              	mov	[ebx+10h],eax
0000A4E5: B0 02                                                 	mov	al,10b
0000A4E7: 89 43 14                                              	mov	[ebx+14h],eax
0000A4EA: 89 DA                                                 	mov	edx,ebx
0000A4EC: E8 7D A6 FF FF                                        	call	create_addressing_space
0000A4F1: 87 D3                                                 	xchg	edx,ebx
0000A4F3: 89 5A 14                                              	mov	[edx+14h],ebx
0000A4F6: C6 42 09 02                                           	mov	byte [edx+9],2
0000A4FA: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A504: 74 04                                                 	jz	elf_labels_type_ok
0000A506: C6 42 09 04                                           	mov	byte [edx+9],4
                                                                      elf_labels_type_ok:
0000A50A: 66 AD                                                 	lods	word [esi]
0000A50C: 66 83 F8 28                                           	cmp	ax,'('
0000A510: 0F 85 0A 64 FF FF                                     	jne	invalid_argument
0000A516: 89 73 04                                              	mov	[ebx+4],esi
0000A519: 8B 0E                                                 	mov	ecx,[esi]
0000A51B: 8D 74 0E 05                                           	lea	esi,[esi+4+ecx+1]
                                                                      elf_section_flags:
0000A51F: 80 3E 8C                                              	cmp	byte [esi],8Ch
0000A522: 74 27                                                 	je	elf_section_alignment
0000A524: 80 3E 19                                              	cmp	byte [esi],19h
0000A527: 75 5C                                                 	jne	elf_section_settings_ok
0000A529: 46                                                    	inc	esi
0000A52A: AC                                                    	lods	byte [esi]
0000A52B: 2C 1C                                                 	sub	al,28
0000A52D: 34 03                                                 	xor	al,11b
0000A52F: A8 FD                                                 	test	al,not 10b
0000A531: 0F 85 E9 63 FF FF                                     	jnz	invalid_argument
0000A537: 88 C1                                                 	mov	cl,al
0000A539: B0 01                                                 	mov	al,1
0000A53B: D2 E0                                                 	shl	al,cl
0000A53D: 84 43 14                                              	test	byte [ebx+14h],al
0000A540: 0F 85 50 65 FF FF                                     	jnz	setting_already_specified
0000A546: 08 43 14                                              	or	byte [ebx+14h],al
0000A549: EB D4                                                 	jmp	elf_section_flags
                                                                      elf_section_alignment:
0000A54B: 46                                                    	inc	esi
0000A54C: AC                                                    	lods	byte [esi]
0000A54D: 3C 28                                                 	cmp	al,'('
0000A54F: 0F 85 CB 63 FF FF                                     	jne	invalid_argument
0000A555: 80 3E 2E                                              	cmp	byte [esi],'.'
0000A558: 0F 84 44 64 FF FF                                     	je	invalid_value
0000A55E: 53                                                    	push	ebx
0000A55F: E8 D0 CE FF FF                                        	call	get_count_value
0000A564: 5B                                                    	pop	ebx
0000A565: 89 C2                                                 	mov	edx,eax
0000A567: 4A                                                    	dec	edx
0000A568: 85 D0                                                 	test	eax,edx
0000A56A: 0F 85 32 64 FF FF                                     	jnz	invalid_value
0000A570: 09 C0                                                 	or	eax,eax
0000A572: 0F 84 2A 64 FF FF                                     	jz	invalid_value
0000A578: 87 43 10                                              	xchg	[ebx+10h],eax
0000A57B: 09 C0                                                 	or	eax,eax
0000A57D: 0F 85 13 65 FF FF                                     	jnz	setting_already_specified
0000A583: EB 9A                                                 	jmp	elf_section_flags
                                                                      elf_section_settings_ok:
0000A585: 83 7B 10 00                                           	cmp	dword [ebx+10h],0
0000A589: 0F 85 E1 A9 FF FF                                     	jne	instruction_assembled
0000A58F: C7 43 10 04 00 00 00                                  	mov	dword [ebx+10h],4
0000A596: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A5A0: 0F 84 CA A9 FF FF                                     	jz	instruction_assembled
0000A5A6: C6 43 10 08                                           	mov	byte [ebx+10h],8
0000A5AA: E9 C1 A9 FF FF                                        	jmp	instruction_assembled
                                                                mark_elf_relocation:
0000A5AF: F7 05 34 A2 01 00 01 00 00 00                         	test	[format_flags],1
0000A5B9: 0F 85 91 64 FF FF                                     	jnz	invalid_use_of_symbol
0000A5BF: 53                                                    	push	ebx
0000A5C0: 8B 1D C4 A1 01 00                                     	mov	ebx,[addressing_space]
0000A5C6: 80 3D B4 A2 01 00 03                                  	cmp	[value_type],3
0000A5CD: 74 56                                                 	je	elf_relocation_relative
0000A5CF: 80 3D B4 A2 01 00 07                                  	cmp	[value_type],7
0000A5D6: 74 4D                                                 	je	elf_relocation_relative
0000A5D8: 50                                                    	push	eax
0000A5D9: 80 3D B4 A2 01 00 05                                  	cmp	[value_type],5
0000A5E0: 74 2C                                                 	je	elf_gotoff_relocation
0000A5E2: 0F 87 68 64 FF FF                                     	ja	invalid_use_of_symbol
0000A5E8: B0 01                                                 	mov	al,1			; R_386_32 / R_AMD64_64
0000A5EA: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A5F4: 0F 84 98 F8 FF FF                                     	jz	coff_relocation
0000A5FA: 80 3D B4 A2 01 00 04                                  	cmp	[value_type],4
0000A601: 0F 84 8B F8 FF FF                                     	je	coff_relocation
0000A607: B0 0B                                                 	mov	al,11			; R_AMD64_32S
0000A609: E9 84 F8 FF FF                                        	jmp	coff_relocation
                                                                      elf_gotoff_relocation:
0000A60E: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A618: 0F 85 32 64 FF FF                                     	jnz	invalid_use_of_symbol
0000A61E: B0 09                                                 	mov	al,9			; R_386_GOTOFF
0000A620: E9 6D F8 FF FF                                        	jmp	coff_relocation
                                                                      elf_relocation_relative:
0000A625: 80 7B 09 00                                           	cmp	byte [ebx+9],0
0000A629: 0F 84 21 64 FF FF                                     	je	invalid_use_of_symbol
0000A62F: 8B 1D 50 A2 01 00                                     	mov	ebx,[current_section]
0000A635: 8B 5B 08                                              	mov	ebx,[ebx+8]
0000A638: 29 FB                                                 	sub	ebx,edi
0000A63A: 29 D8                                                 	sub	eax,ebx
0000A63C: 50                                                    	push	eax
0000A63D: B0 02                                                 	mov	al,2			; R_386_PC32 / R_AMD64_PC32
0000A63F: 80 3D B4 A2 01 00 03                                  	cmp	[value_type],3
0000A646: 0F 84 46 F8 FF FF                                     	je	coff_relocation
0000A64C: B0 04                                                 	mov	al,4			; R_386_PLT32 / R_AMD64_PLT32
0000A64E: E9 3F F8 FF FF                                        	jmp	coff_relocation
                                                                close_elf:
0000A653: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
0000A65B: 0F 82 94 0C 00 00                                     	jc	close_elf_exe
0000A661: E8 5B F7 FF FF                                        	call	close_coff_section
0000A666: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
0000A66D: 74 0A                                                 	je	elf_closed
0000A66F: A1 3C A2 01 00                                        	mov	eax,[symbols_stream]
0000A674: A3 58 A1 01 00                                        	mov	[free_additional_memory],eax
                                                                      elf_closed:
0000A679: C3                                                    	ret
                                                                elf_formatter:
0000A67A: 89 F9                                                 	mov	ecx,edi
0000A67C: 2B 0D 60 A1 01 00                                     	sub	ecx,[code_start]
0000A682: F7 D9                                                 	neg	ecx
0000A684: 83 E1 07                                              	and	ecx,111b
0000A687: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A691: 75 03                                                 	jnz	align_elf_structures
0000A693: 83 E1 03                                              	and	ecx,11b
                                                                      align_elf_structures:
0000A696: 30 C0                                                 	xor	al,al
0000A698: F3 AA                                                 	rep	stos byte [edi]
0000A69A: 57                                                    	push	edi
0000A69B: E8 2D F9 FF FF                                        	call	prepare_default_section
0000A6A0: 8B 35 3C A2 01 00                                     	mov	esi,[symbols_stream]
0000A6A6: 8B 3D 58 A1 01 00                                     	mov	edi,[free_additional_memory]
0000A6AC: 31 C0                                                 	xor	eax,eax
0000A6AE: B9 04 00 00 00                                        	mov	ecx,4
0000A6B3: F3 AB                                                 	rep	stos dword [edi]
0000A6B5: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A6BF: 74 07                                                 	jz	find_first_section
0000A6C1: B9 02 00 00 00                                        	mov	ecx,2
0000A6C6: F3 AB                                                 	rep	stos dword [edi]
                                                                      find_first_section:
0000A6C8: 8A 06                                                 	mov	al,[esi]
0000A6CA: 08 C0                                                 	or	al,al
0000A6CC: 74 0C                                                 	jz	first_section_found
0000A6CE: 3C C0                                                 	cmp	al,0C0h
0000A6D0: 72 03                                                 	jb	skip_other_symbol
0000A6D2: 83 C6 04                                              	add	esi,4
                                                                      skip_other_symbol:
0000A6D5: 83 C6 0C                                              	add	esi,0Ch
0000A6D8: EB EE                                                 	jmp	find_first_section
                                                                      first_section_found:
0000A6DA: 89 F3                                                 	mov	ebx,esi
0000A6DC: 89 F5                                                 	mov	ebp,esi
0000A6DE: 83 C6 20                                              	add	esi,20h
0000A6E1: 31 C9                                                 	xor	ecx,ecx
0000A6E3: 31 D2                                                 	xor	edx,edx
                                                                      find_next_section:
0000A6E5: 3B 35 58 A1 01 00                                     	cmp	esi,[free_additional_memory]
0000A6EB: 74 1C                                                 	je	make_section_symbol
0000A6ED: 8A 06                                                 	mov	al,[esi]
0000A6EF: 08 C0                                                 	or	al,al
0000A6F1: 74 16                                                 	jz	make_section_symbol
0000A6F3: 3C C0                                                 	cmp	al,0C0h
0000A6F5: 73 0D                                                 	jae	skip_public
0000A6F7: 3C 80                                                 	cmp	al,80h
0000A6F9: 73 04                                                 	jae	skip_extrn
0000A6FB: 80 4B 14 40                                           	or	byte [ebx+14h],40h
                                                                      skip_extrn:
0000A6FF: 83 C6 0C                                              	add	esi,0Ch
0000A702: EB E1                                                 	jmp	find_next_section
                                                                      skip_public:
0000A704: 83 C6 10                                              	add	esi,10h
0000A707: EB DC                                                 	jmp	find_next_section
                                                                      make_section_symbol:
0000A709: 89 F8                                                 	mov	eax,edi
0000A70B: 87 43 04                                              	xchg	eax,[ebx+4]
0000A70E: AB                                                    	stos	dword [edi]
0000A70F: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A719: 75 35                                                 	jnz	elf64_section_symbol
0000A71B: 31 C0                                                 	xor	eax,eax
0000A71D: AB                                                    	stos	dword [edi]
0000A71E: AB                                                    	stos	dword [edi]
0000A71F: E8 02 00 00 00                                        	call	store_section_index
0000A724: EB 35                                                 	jmp	section_symbol_ok
                                                                      store_section_index:
0000A726: 41                                                    	inc	ecx
0000A727: 89 C8                                                 	mov	eax,ecx
0000A729: C1 E0 08                                              	shl	eax,8
0000A72C: 89 03                                                 	mov	[ebx],eax
0000A72E: 66 42                                                 	inc	dx
0000A730: 0F 84 8B 61 FF FF                                     	jz	format_limitations_exceeded
0000A736: 89 D0                                                 	mov	eax,edx
0000A738: C1 E0 10                                              	shl	eax,16
0000A73B: B0 03                                                 	mov	al,3
0000A73D: F6 43 14 40                                           	test	byte [ebx+14h],40h
0000A741: 74 0B                                                 	jz	section_index_ok
0000A743: 80 CC FF                                              	or	ah,-1
0000A746: 66 42                                                 	inc	dx
0000A748: 0F 84 73 61 FF FF                                     	jz	format_limitations_exceeded
                                                                      section_index_ok:
0000A74E: AB                                                    	stos	dword [edi]
0000A74F: C3                                                    	ret
                                                                      elf64_section_symbol:
0000A750: E8 D1 FF FF FF                                        	call	store_section_index
0000A755: 31 C0                                                 	xor	eax,eax
0000A757: AB                                                    	stos	dword [edi]
0000A758: AB                                                    	stos	dword [edi]
0000A759: AB                                                    	stos	dword [edi]
0000A75A: AB                                                    	stos	dword [edi]
                                                                      section_symbol_ok:
0000A75B: 89 F3                                                 	mov	ebx,esi
0000A75D: 83 C6 20                                              	add	esi,20h
0000A760: 3B 1D 58 A1 01 00                                     	cmp	ebx,[free_additional_memory]
0000A766: 0F 85 79 FF FF FF                                     	jne	find_next_section
0000A76C: 66 42                                                 	inc	dx
0000A76E: 0F 84 4D 61 FF FF                                     	jz	format_limitations_exceeded
0000A774: 89 15 50 A2 01 00                                     	mov	[current_section],edx
0000A77A: 8B 35 3C A2 01 00                                     	mov	esi,[symbols_stream]
                                                                      find_other_symbols:
0000A780: 3B 35 58 A1 01 00                                     	cmp	esi,[free_additional_memory]
0000A786: 0F 84 60 01 00 00                                     	je	elf_symbol_table_ok
0000A78C: 8A 06                                                 	mov	al,[esi]
0000A78E: 08 C0                                                 	or	al,al
0000A790: 74 11                                                 	jz	skip_section
0000A792: 3C C0                                                 	cmp	al,0C0h
0000A794: 73 12                                                 	jae	make_public_symbol
0000A796: 3C 80                                                 	cmp	al,80h
0000A798: 0F 83 0C 01 00 00                                     	jae	make_extrn_symbol
0000A79E: 83 C6 0C                                              	add	esi,0Ch
0000A7A1: EB DD                                                 	jmp	find_other_symbols
                                                                      skip_section:
0000A7A3: 83 C6 20                                              	add	esi,20h
0000A7A6: EB D8                                                 	jmp	find_other_symbols
                                                                      make_public_symbol:
0000A7A8: 8B 46 0C                                              	mov	eax,[esi+0Ch]
0000A7AB: A3 74 A1 01 00                                        	mov	[current_line],eax
0000A7B0: 80 3E C0                                              	cmp	byte [esi],0C0h
0000A7B3: 0F 85 67 61 FF FF                                     	jne	invalid_argument
0000A7B9: 8B 5E 08                                              	mov	ebx,[esi+8]
0000A7BC: F6 43 08 01                                           	test	byte [ebx+8],1
0000A7C0: 74 3D                                                 	jz	undefined_public
0000A7C2: 66 A1 52 A1 01 00                                     	mov	ax,[current_pass]
0000A7C8: 66 3B 43 10                                           	cmp	ax,[ebx+16]
0000A7CC: 75 31                                                 	jne	undefined_public
0000A7CE: 8A 53 0B                                              	mov	dl,[ebx+11]
0000A7D1: 08 D2                                                 	or	dl,dl
0000A7D3: 74 44                                                 	jz	public_absolute
0000A7D5: 8B 43 14                                              	mov	eax,[ebx+20]
0000A7D8: 80 38 00                                              	cmp	byte [eax],0
0000A7DB: 0F 85 6F 62 FF FF                                     	jne	invalid_use_of_symbol
0000A7E1: 8B 40 04                                              	mov	eax,[eax+4]
0000A7E4: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A7EE: 75 1A                                                 	jnz	elf64_public
0000A7F0: 80 FA 02                                              	cmp	dl,2
0000A7F3: 0F 85 57 62 FF FF                                     	jne	invalid_use_of_symbol
0000A7F9: 66 8B 50 0E                                           	mov	dx,[eax+0Eh]
0000A7FD: EB 1E                                                 	jmp	section_for_public_ok
                                                                      undefined_public:
0000A7FF: 89 1D D8 A1 01 00                                     	mov	[error_info],ebx
0000A805: E9 AC 61 FF FF                                        	jmp	undefined_symbol
                                                                      elf64_public:
0000A80A: 80 FA 04                                              	cmp	dl,4
0000A80D: 0F 85 3D 62 FF FF                                     	jne	invalid_use_of_symbol
0000A813: 66 8B 50 06                                           	mov	dx,[eax+6]
0000A817: EB 04                                                 	jmp	section_for_public_ok
                                                                      public_absolute:
0000A819: 66 BA F1 FF                                           	mov	dx,0FFF1h
                                                                      section_for_public_ok:
0000A81D: 8B 46 04                                              	mov	eax,[esi+4]
0000A820: AB                                                    	stos	dword [edi]
0000A821: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A82B: 75 3A                                                 	jnz	elf64_public_symbol
0000A82D: 0F B6 43 09                                           	movzx	eax,byte [ebx+9]
0000A831: D0 E8                                                 	shr	al,1
0000A833: 24 01                                                 	and	al,1
0000A835: F7 D8                                                 	neg	eax
0000A837: 3B 43 04                                              	cmp	eax,[ebx+4]
0000A83A: 0F 85 6C 61 FF FF                                     	jne	value_out_of_range
0000A840: 33 03                                                 	xor	eax,[ebx]
0000A842: 0F 88 64 61 FF FF                                     	js	value_out_of_range
0000A848: 8B 03                                                 	mov	eax,[ebx]
0000A84A: AB                                                    	stos	dword [edi]
0000A84B: 31 C0                                                 	xor	eax,eax
0000A84D: 8A 43 0A                                              	mov	al,[ebx+10]
0000A850: AB                                                    	stos	dword [edi]
0000A851: 89 D0                                                 	mov	eax,edx
0000A853: C1 E0 10                                              	shl	eax,16
0000A856: B0 10                                                 	mov	al,10h
0000A858: 80 7B 0A 00                                           	cmp	byte [ebx+10],0
0000A85C: 74 04                                                 	je	elf_public_function
0000A85E: 0C 01                                                 	or	al,1
0000A860: EB 02                                                 	jmp	store_elf_public_info
                                                                      elf_public_function:
0000A862: 0C 02                                                 	or	al,2
                                                                      store_elf_public_info:
0000A864: AB                                                    	stos	dword [edi]
0000A865: EB 31                                                 	jmp	public_symbol_ok
                                                                      elf64_public_symbol:
0000A867: 89 D0                                                 	mov	eax,edx
0000A869: C1 E0 10                                              	shl	eax,16
0000A86C: B0 10                                                 	mov	al,10h
0000A86E: 80 7B 0A 00                                           	cmp	byte [ebx+10],0
0000A872: 74 04                                                 	je	elf64_public_function
0000A874: 0C 01                                                 	or	al,1
0000A876: EB 02                                                 	jmp	store_elf64_public_info
                                                                      elf64_public_function:
0000A878: 0C 02                                                 	or	al,2
                                                                      store_elf64_public_info:
0000A87A: AB                                                    	stos	dword [edi]
0000A87B: 8A 43 09                                              	mov	al,[ebx+9]
0000A87E: C1 E0 1E                                              	shl	eax,31-1
0000A881: 33 43 04                                              	xor	eax,[ebx+4]
0000A884: 0F 88 22 61 FF FF                                     	js	value_out_of_range
0000A88A: 8B 03                                                 	mov	eax,[ebx]
0000A88C: AB                                                    	stos	dword [edi]
0000A88D: 8B 43 04                                              	mov	eax,[ebx+4]
0000A890: AB                                                    	stos	dword [edi]
0000A891: 8A 43 0A                                              	mov	al,[ebx+10]
0000A894: AB                                                    	stos	dword [edi]
0000A895: 30 C0                                                 	xor	al,al
0000A897: AB                                                    	stos	dword [edi]
                                                                      public_symbol_ok:
0000A898: 41                                                    	inc	ecx
0000A899: 89 C8                                                 	mov	eax,ecx
0000A89B: C1 E0 08                                              	shl	eax,8
0000A89E: B0 C0                                                 	mov	al,0C0h
0000A8A0: 89 06                                                 	mov	[esi],eax
0000A8A2: 83 C6 10                                              	add	esi,10h
0000A8A5: E9 D6 FE FF FF                                        	jmp	find_other_symbols
                                                                      make_extrn_symbol:
0000A8AA: 8B 46 04                                              	mov	eax,[esi+4]
0000A8AD: AB                                                    	stos	dword [edi]
0000A8AE: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A8B8: 75 0F                                                 	jnz	elf64_extrn_symbol
0000A8BA: 31 C0                                                 	xor	eax,eax
0000A8BC: AB                                                    	stos	dword [edi]
0000A8BD: 8B 46 08                                              	mov	eax,[esi+8]
0000A8C0: AB                                                    	stos	dword [edi]
0000A8C1: B8 10 00 00 00                                        	mov	eax,10h
0000A8C6: AB                                                    	stos	dword [edi]
0000A8C7: EB 11                                                 	jmp	extrn_symbol_ok
                                                                      elf64_extrn_symbol:
0000A8C9: B8 10 00 00 00                                        	mov	eax,10h
0000A8CE: AB                                                    	stos	dword [edi]
0000A8CF: 30 C0                                                 	xor	al,al
0000A8D1: AB                                                    	stos	dword [edi]
0000A8D2: AB                                                    	stos	dword [edi]
0000A8D3: 8B 46 08                                              	mov	eax,[esi+8]
0000A8D6: AB                                                    	stos	dword [edi]
0000A8D7: 31 C0                                                 	xor	eax,eax
0000A8D9: AB                                                    	stos	dword [edi]
                                                                      extrn_symbol_ok:
0000A8DA: 41                                                    	inc	ecx
0000A8DB: 89 C8                                                 	mov	eax,ecx
0000A8DD: C1 E0 08                                              	shl	eax,8
0000A8E0: B0 80                                                 	mov	al,80h
0000A8E2: 89 06                                                 	mov	[esi],eax
0000A8E4: 83 C6 0C                                              	add	esi,0Ch
0000A8E7: E9 94 FE FF FF                                        	jmp	find_other_symbols
                                                                      elf_symbol_table_ok:
0000A8EC: 89 FA                                                 	mov	edx,edi
0000A8EE: 8B 1D 58 A1 01 00                                     	mov	ebx,[free_additional_memory]
0000A8F4: 30 C0                                                 	xor	al,al
0000A8F6: AA                                                    	stos	byte [edi]
0000A8F7: 83 C7 10                                              	add	edi,16
0000A8FA: 89 52 01                                              	mov	[edx+1],edx
0000A8FD: 83 C3 10                                              	add	ebx,10h
0000A900: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A90A: 74 03                                                 	jz	make_string_table
0000A90C: 83 C3 08                                              	add	ebx,8
                                                                      make_string_table:
0000A90F: 39 D3                                                 	cmp	ebx,edx
0000A911: 74 5F                                                 	je	elf_string_table_ok
0000A913: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A91D: 75 27                                                 	jnz	make_elf64_string
0000A91F: 80 7B 0D 00                                           	cmp	byte [ebx+0Dh],0
0000A923: 74 0A                                                 	je	rel_prefix_ok
0000A925: C6 43 0D 00                                           	mov	byte [ebx+0Dh],0
0000A929: B8 2E 72 65 6C                                        	mov	eax,'.rel'
0000A92E: AB                                                    	stos	dword [edi]
                                                                      rel_prefix_ok:
0000A92F: 89 FE                                                 	mov	esi,edi
0000A931: 29 D6                                                 	sub	esi,edx
0000A933: 87 33                                                 	xchg	esi,[ebx]
0000A935: 83 C3 10                                              	add	ebx,10h
                                                                      make_elf_string:
0000A938: 09 F6                                                 	or	esi,esi
0000A93A: 74 28                                                 	jz	default_string
0000A93C: AD                                                    	lods	dword [esi]
0000A93D: 89 C1                                                 	mov	ecx,eax
0000A93F: F3 A4                                                 	rep	movs byte [edi],[esi]
0000A941: 30 C0                                                 	xor	al,al
0000A943: AA                                                    	stos	byte [edi]
0000A944: EB C9                                                 	jmp	make_string_table
                                                                      make_elf64_string:
0000A946: 80 7B 05 00                                           	cmp	byte [ebx+5],0
0000A94A: 74 0D                                                 	je	elf64_rel_prefix_ok
0000A94C: C6 43 05 00                                           	mov	byte [ebx+5],0
0000A950: B8 2E 72 65 6C                                        	mov	eax,'.rel'
0000A955: AB                                                    	stos	dword [edi]
0000A956: B0 61                                                 	mov	al,'a'
0000A958: AA                                                    	stos	byte [edi]
                                                                      elf64_rel_prefix_ok:
0000A959: 89 FE                                                 	mov	esi,edi
0000A95B: 29 D6                                                 	sub	esi,edx
0000A95D: 87 33                                                 	xchg	esi,[ebx]
0000A95F: 83 C3 18                                              	add	ebx,18h
0000A962: EB D4                                                 	jmp	make_elf_string
                                                                      default_string:
0000A964: B8 2E 66 6C 61                                        	mov	eax,'.fla'
0000A969: AB                                                    	stos	dword [edi]
0000A96A: 66 B8 74 00                                           	mov	ax,'t'
0000A96E: 66 AB                                                 	stos	word [edi]
0000A970: EB 9D                                                 	jmp	make_string_table
                                                                      elf_string_table_ok:
0000A972: 89 7A 09                                              	mov	[edx+1+8],edi
0000A975: 8B 1D 60 A1 01 00                                     	mov	ebx,[code_start]
0000A97B: 89 F8                                                 	mov	eax,edi
0000A97D: 2B 05 58 A1 01 00                                     	sub	eax,[free_additional_memory]
0000A983: 31 C9                                                 	xor	ecx,ecx
0000A985: 29 C1                                                 	sub	ecx,eax
0000A987: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A991: 75 27                                                 	jnz	finish_elf64_header
0000A993: 83 E1 03                                              	and	ecx,11b
0000A996: 01 C8                                                 	add	eax,ecx
0000A998: 89 43 20                                              	mov	[ebx+20h],eax
0000A99B: A1 50 A2 01 00                                        	mov	eax,[current_section]
0000A9A0: 66 40                                                 	inc	ax
0000A9A2: 0F 84 19 5F FF FF                                     	jz	format_limitations_exceeded
0000A9A8: 66 89 43 32                                           	mov	[ebx+32h],ax
0000A9AC: 66 40                                                 	inc	ax
0000A9AE: 0F 84 0D 5F FF FF                                     	jz	format_limitations_exceeded
0000A9B4: 66 89 43 30                                           	mov	[ebx+30h],ax
0000A9B8: EB 25                                                 	jmp	elf_header_finished
                                                                      finish_elf64_header:
0000A9BA: 83 E1 07                                              	and	ecx,111b
0000A9BD: 01 C8                                                 	add	eax,ecx
0000A9BF: 89 43 28                                              	mov	[ebx+28h],eax
0000A9C2: A1 50 A2 01 00                                        	mov	eax,[current_section]
0000A9C7: 66 40                                                 	inc	ax
0000A9C9: 0F 84 F2 5E FF FF                                     	jz	format_limitations_exceeded
0000A9CF: 66 89 43 3E                                           	mov	[ebx+3Eh],ax
0000A9D3: 66 40                                                 	inc	ax
0000A9D5: 0F 84 E6 5E FF FF                                     	jz	format_limitations_exceeded
0000A9DB: 66 89 43 3C                                           	mov	[ebx+3Ch],ax
                                                                      elf_header_finished:
0000A9DF: 31 C0                                                 	xor	eax,eax
0000A9E1: 83 C1 28                                              	add	ecx,10*4
0000A9E4: F3 AA                                                 	rep	stos byte [edi]
0000A9E6: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A9F0: 74 07                                                 	jz	elf_null_section_ok
0000A9F2: B9 18 00 00 00                                        	mov	ecx,6*4
0000A9F7: F3 AA                                                 	rep	stos byte [edi]
                                                                      elf_null_section_ok:
0000A9F9: 89 EE                                                 	mov	esi,ebp
0000A9FB: 31 C9                                                 	xor	ecx,ecx
                                                                      make_section_entry:
0000A9FD: 89 FB                                                 	mov	ebx,edi
0000A9FF: 8B 46 04                                              	mov	eax,[esi+4]
0000AA02: 8B 00                                                 	mov	eax,[eax]
0000AA04: AB                                                    	stos	dword [edi]
0000AA05: B8 01 00 00 00                                        	mov	eax,1
0000AA0A: 83 7E 0C 00                                           	cmp	dword [esi+0Ch],0
0000AA0E: 74 06                                                 	je	bss_section
0000AA10: F6 46 14 80                                           	test	byte [esi+14h],80h
0000AA14: 74 02                                                 	jz	section_type_ok
                                                                      bss_section:
0000AA16: B0 08                                                 	mov	al,8
                                                                      section_type_ok:
0000AA18: AB                                                    	stos	dword [edi]
0000AA19: 8B 46 14                                              	mov	eax,[esi+14h]
0000AA1C: 24 3F                                                 	and	al,3Fh
0000AA1E: E8 AE 00 00 00                                        	call	store_elf_machine_word
0000AA23: 31 C0                                                 	xor	eax,eax
0000AA25: E8 A7 00 00 00                                        	call	store_elf_machine_word
0000AA2A: 8B 46 08                                              	mov	eax,[esi+8]
0000AA2D: A3 5C A2 01 00                                        	mov	[image_base],eax
0000AA32: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
0000AA38: E8 94 00 00 00                                        	call	store_elf_machine_word
0000AA3D: 8B 46 0C                                              	mov	eax,[esi+0Ch]
0000AA40: E8 8C 00 00 00                                        	call	store_elf_machine_word
0000AA45: 31 C0                                                 	xor	eax,eax
0000AA47: AB                                                    	stos	dword [edi]
0000AA48: AB                                                    	stos	dword [edi]
0000AA49: 8B 46 10                                              	mov	eax,[esi+10h]
0000AA4C: E8 80 00 00 00                                        	call	store_elf_machine_word
0000AA51: 31 C0                                                 	xor	eax,eax
0000AA53: E8 79 00 00 00                                        	call	store_elf_machine_word
0000AA58: 41                                                    	inc	ecx
0000AA59: 83 C6 20                                              	add	esi,20h
0000AA5C: 87 3C 24                                              	xchg	edi,[esp]
0000AA5F: 89 FD                                                 	mov	ebp,edi
                                                                      convert_relocations:
0000AA61: 3B 35 58 A1 01 00                                     	cmp	esi,[free_additional_memory]
0000AA67: 74 7C                                                 	je	relocations_converted
0000AA69: 8A 06                                                 	mov	al,[esi]
0000AA6B: 08 C0                                                 	or	al,al
0000AA6D: 74 76                                                 	jz	relocations_converted
0000AA6F: 3C 80                                                 	cmp	al,80h
0000AA71: 72 09                                                 	jb	make_relocation_entry
0000AA73: 3C C0                                                 	cmp	al,0C0h
0000AA75: 72 55                                                 	jb	relocation_entry_ok
0000AA77: 83 C6 10                                              	add	esi,10h
0000AA7A: EB E5                                                 	jmp	convert_relocations
                                                                      make_relocation_entry:
0000AA7C: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AA86: 75 0E                                                 	jnz	make_elf64_relocation_entry
0000AA88: 8B 46 04                                              	mov	eax,[esi+4]
0000AA8B: AB                                                    	stos	dword [edi]
0000AA8C: 8B 46 08                                              	mov	eax,[esi+8]
0000AA8F: 8B 00                                                 	mov	eax,[eax]
0000AA91: 8A 06                                                 	mov	al,[esi]
0000AA93: AB                                                    	stos	dword [edi]
0000AA94: EB 36                                                 	jmp	relocation_entry_ok
                                                                      make_elf64_relocation_entry:
0000AA96: 8B 46 04                                              	mov	eax,[esi+4]
0000AA99: AB                                                    	stos	dword [edi]
0000AA9A: 31 C0                                                 	xor	eax,eax
0000AA9C: AB                                                    	stos	dword [edi]
0000AA9D: 0F B6 06                                              	movzx	eax,byte [esi]
0000AAA0: AB                                                    	stos	dword [edi]
0000AAA1: 8B 46 08                                              	mov	eax,[esi+8]
0000AAA4: 8B 00                                                 	mov	eax,[eax]
0000AAA6: C1 E8 08                                              	shr	eax,8
0000AAA9: AB                                                    	stos	dword [edi]
0000AAAA: 31 C0                                                 	xor	eax,eax
0000AAAC: 52                                                    	push	edx
0000AAAD: 8B 56 04                                              	mov	edx,[esi+4]
0000AAB0: 03 15 5C A2 01 00                                     	add	edx,[image_base]
0000AAB6: 87 02                                                 	xchg	eax,[edx]
0000AAB8: AB                                                    	stos	dword [edi]
0000AAB9: 80 3E 01                                              	cmp	byte [esi],1
0000AABC: 74 07                                                 	je	addend_64bit
0000AABE: 5A                                                    	pop	edx
0000AABF: C1 F8 1F                                              	sar	eax,31
0000AAC2: AB                                                    	stos	dword [edi]
0000AAC3: EB 07                                                 	jmp	relocation_entry_ok
                                                                      addend_64bit:
0000AAC5: 31 C0                                                 	xor	eax,eax
0000AAC7: 87 42 04                                              	xchg	eax,[edx+4]
0000AACA: AB                                                    	stos	dword [edi]
0000AACB: 5A                                                    	pop	edx
                                                                      relocation_entry_ok:
0000AACC: 83 C6 0C                                              	add	esi,0Ch
0000AACF: EB 90                                                 	jmp	convert_relocations
                                                                      store_elf_machine_word:
0000AAD1: AB                                                    	stos	dword [edi]
0000AAD2: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AADC: 74 06                                                 	jz	elf_machine_word_ok
0000AADE: 83 27 00                                              	and	dword [edi],0
0000AAE1: 83 C7 04                                              	add	edi,4
                                                                      elf_machine_word_ok:
0000AAE4: C3                                                    	ret
                                                                      relocations_converted:
0000AAE5: 39 EF                                                 	cmp	edi,ebp
0000AAE7: 87 3C 24                                              	xchg	edi,[esp]
0000AAEA: 74 7F                                                 	je	rel_section_ok
0000AAEC: 8B 03                                                 	mov	eax,[ebx]
0000AAEE: 83 E8 04                                              	sub	eax,4
0000AAF1: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AAFB: 74 01                                                 	jz	store_relocations_name_offset
0000AAFD: 48                                                    	dec	eax
                                                                      store_relocations_name_offset:
0000AAFE: AB                                                    	stos	dword [edi]
0000AAFF: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AB09: 75 07                                                 	jnz	rela_section
0000AB0B: B8 09 00 00 00                                        	mov	eax,9
0000AB10: EB 05                                                 	jmp	store_relocations_type
                                                                      rela_section:
0000AB12: B8 04 00 00 00                                        	mov	eax,4
                                                                      store_relocations_type:
0000AB17: AB                                                    	stos	dword [edi]
0000AB18: 30 C0                                                 	xor	al,al
0000AB1A: E8 B2 FF FF FF                                        	call	store_elf_machine_word
0000AB1F: E8 AD FF FF FF                                        	call	store_elf_machine_word
0000AB24: 89 E8                                                 	mov	eax,ebp
0000AB26: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
0000AB2C: E8 A0 FF FF FF                                        	call	store_elf_machine_word
0000AB31: 8B 04 24                                              	mov	eax,[esp]
0000AB34: 29 E8                                                 	sub	eax,ebp
0000AB36: E8 96 FF FF FF                                        	call	store_elf_machine_word
0000AB3B: A1 50 A2 01 00                                        	mov	eax,[current_section]
0000AB40: AB                                                    	stos	dword [edi]
0000AB41: 89 C8                                                 	mov	eax,ecx
0000AB43: AB                                                    	stos	dword [edi]
0000AB44: 41                                                    	inc	ecx
0000AB45: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AB4F: 75 0B                                                 	jnz	finish_elf64_rela_section
0000AB51: B8 04 00 00 00                                        	mov	eax,4
0000AB56: AB                                                    	stos	dword [edi]
0000AB57: B0 08                                                 	mov	al,8
0000AB59: AB                                                    	stos	dword [edi]
0000AB5A: EB 0F                                                 	jmp	rel_section_ok
                                                                      finish_elf64_rela_section:
0000AB5C: B8 08 00 00 00                                        	mov	eax,8
0000AB61: AB                                                    	stos	dword [edi]
0000AB62: 30 C0                                                 	xor	al,al
0000AB64: AB                                                    	stos	dword [edi]
0000AB65: B0 18                                                 	mov	al,24
0000AB67: AB                                                    	stos	dword [edi]
0000AB68: 30 C0                                                 	xor	al,al
0000AB6A: AB                                                    	stos	dword [edi]
                                                                      rel_section_ok:
0000AB6B: 3B 35 58 A1 01 00                                     	cmp	esi,[free_additional_memory]
0000AB71: 0F 85 86 FE FF FF                                     	jne	make_section_entry
0000AB77: 58                                                    	pop	eax
0000AB78: 8B 1D 60 A1 01 00                                     	mov	ebx,[code_start]
0000AB7E: 29 D8                                                 	sub	eax,ebx
0000AB80: A3 64 A1 01 00                                        	mov	[code_size],eax
0000AB85: B9 20 00 00 00                                        	mov	ecx,20h
0000AB8A: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AB94: 74 05                                                 	jz	adjust_elf_section_headers_offset
0000AB96: B9 28 00 00 00                                        	mov	ecx,28h
                                                                      adjust_elf_section_headers_offset:
0000AB9B: 01 04 0B                                              	add	[ebx+ecx],eax
0000AB9E: B8 01 00 00 00                                        	mov	eax,1
0000ABA3: AB                                                    	stos	dword [edi]
0000ABA4: B0 02                                                 	mov	al,2
0000ABA6: AB                                                    	stos	dword [edi]
0000ABA7: 30 C0                                                 	xor	al,al
0000ABA9: E8 23 FF FF FF                                        	call	store_elf_machine_word
0000ABAE: E8 1E FF FF FF                                        	call	store_elf_machine_word
0000ABB3: A1 64 A1 01 00                                        	mov	eax,[code_size]
0000ABB8: E8 14 FF FF FF                                        	call	store_elf_machine_word
0000ABBD: 8B 42 01                                              	mov	eax,[edx+1]
0000ABC0: 2B 05 58 A1 01 00                                     	sub	eax,[free_additional_memory]
0000ABC6: E8 06 FF FF FF                                        	call	store_elf_machine_word
0000ABCB: A1 50 A2 01 00                                        	mov	eax,[current_section]
0000ABD0: 40                                                    	inc	eax
0000ABD1: AB                                                    	stos	dword [edi]
0000ABD2: A1 44 A2 01 00                                        	mov	eax,[number_of_sections]
0000ABD7: 40                                                    	inc	eax
0000ABD8: AB                                                    	stos	dword [edi]
0000ABD9: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000ABE3: 75 0B                                                 	jnz	finish_elf64_sym_section
0000ABE5: B8 04 00 00 00                                        	mov	eax,4
0000ABEA: AB                                                    	stos	dword [edi]
0000ABEB: B0 10                                                 	mov	al,10h
0000ABED: AB                                                    	stos	dword [edi]
0000ABEE: EB 0F                                                 	jmp	sym_section_ok
                                                                      finish_elf64_sym_section:
0000ABF0: B8 08 00 00 00                                        	mov	eax,8
0000ABF5: AB                                                    	stos	dword [edi]
0000ABF6: 30 C0                                                 	xor	al,al
0000ABF8: AB                                                    	stos	dword [edi]
0000ABF9: B0 18                                                 	mov	al,18h
0000ABFB: AB                                                    	stos	dword [edi]
0000ABFC: 30 C0                                                 	xor	al,al
0000ABFE: AB                                                    	stos	dword [edi]
                                                                      sym_section_ok:
0000ABFF: B0 09                                                 	mov	al,1+8
0000AC01: AB                                                    	stos	dword [edi]
0000AC02: B0 03                                                 	mov	al,3
0000AC04: AB                                                    	stos	dword [edi]
0000AC05: 30 C0                                                 	xor	al,al
0000AC07: E8 C5 FE FF FF                                        	call	store_elf_machine_word
0000AC0C: E8 C0 FE FF FF                                        	call	store_elf_machine_word
0000AC11: 8B 42 01                                              	mov	eax,[edx+1]
0000AC14: 2B 05 58 A1 01 00                                     	sub	eax,[free_additional_memory]
0000AC1A: 03 05 64 A1 01 00                                     	add	eax,[code_size]
0000AC20: E8 AC FE FF FF                                        	call	store_elf_machine_word
0000AC25: 8B 42 09                                              	mov	eax,[edx+1+8]
0000AC28: 2B 42 01                                              	sub	eax,[edx+1]
0000AC2B: E8 A1 FE FF FF                                        	call	store_elf_machine_word
0000AC30: 31 C0                                                 	xor	eax,eax
0000AC32: AB                                                    	stos	dword [edi]
0000AC33: AB                                                    	stos	dword [edi]
0000AC34: B0 01                                                 	mov	al,1
0000AC36: E8 96 FE FF FF                                        	call	store_elf_machine_word
0000AC3B: 31 C0                                                 	xor	eax,eax
0000AC3D: E8 8F FE FF FF                                        	call	store_elf_machine_word
0000AC42: B8 74 61 62 00                                        	mov	eax,'tab'
0000AC47: C7 42 01 2E 73 79 6D                                  	mov	dword [edx+1],'.sym'
0000AC4E: 89 42 05                                              	mov	[edx+1+4],eax
0000AC51: C7 42 09 2E 73 74 72                                  	mov	dword [edx+1+8],'.str'
0000AC58: 89 42 0D                                              	mov	[edx+1+8+4],eax
0000AC5B: 89 15 68 A2 01 00                                     	mov	[resource_data],edx
0000AC61: C7 05 6C A1 01 00 00 00 00 00                         	mov	[written_size],0
0000AC6B: 8B 15 48 A1 01 00                                     	mov	edx,[output_file]
0000AC71: E8 24 57 FF FF                                        	call	create
0000AC76: 0F 82 34 5C FF FF                                     	jc	write_failed
0000AC7C: E8 35 D4 FF FF                                        	call	write_code
0000AC81: 89 F9                                                 	mov	ecx,edi
0000AC83: 8B 15 58 A1 01 00                                     	mov	edx,[free_additional_memory]
0000AC89: 29 D1                                                 	sub	ecx,edx
0000AC8B: 01 0D 6C A1 01 00                                     	add	[written_size],ecx
0000AC91: E8 3A 57 FF FF                                        	call	write
0000AC96: 0F 82 14 5C FF FF                                     	jc	write_failed
0000AC9C: E9 02 D4 FF FF                                        	jmp	output_written
                                                                
                                                                format_elf_exe:
0000ACA1: 83 C6 02                                              	add	esi,2
0000ACA4: 83 0D 34 A2 01 00 01                                  	or	[format_flags],1
0000ACAB: 80 3E 28                                              	cmp	byte [esi],'('
0000ACAE: 75 21                                                 	jne	elf_exe_brand_ok
0000ACB0: 46                                                    	inc	esi
0000ACB1: 80 3E 2E                                              	cmp	byte [esi],'.'
0000ACB4: 0F 84 E8 5C FF FF                                     	je	invalid_value
0000ACBA: 52                                                    	push	edx
0000ACBB: E8 ED C5 FF FF                                        	call	get_byte_value
0000ACC0: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000ACC7: 0F 85 83 5D FF FF                                     	jne	invalid_use_of_symbol
0000ACCD: 5A                                                    	pop	edx
0000ACCE: 88 42 07                                              	mov	[edx+7],al
                                                                      elf_exe_brand_ok:
0000ACD1: C7 05 5C A2 01 00 00 80 04 08                         	mov	[image_base],8048000h
0000ACDB: 80 3E 80                                              	cmp	byte [esi],80h
0000ACDE: 75 2D                                                 	jne	elf_exe_base_ok
0000ACE0: 66 AD                                                 	lods	word [esi]
0000ACE2: 80 FC 28                                              	cmp	ah,'('
0000ACE5: 0F 85 35 5C FF FF                                     	jne	invalid_argument
0000ACEB: 80 3E 2E                                              	cmp	byte [esi],'.'
0000ACEE: 0F 84 AE 5C FF FF                                     	je	invalid_value
0000ACF4: 52                                                    	push	edx
0000ACF5: E8 86 C6 FF FF                                        	call	get_dword_value
0000ACFA: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000AD01: 0F 85 49 5D FF FF                                     	jne	invalid_use_of_symbol
0000AD07: A3 5C A2 01 00                                        	mov	[image_base],eax
0000AD0C: 5A                                                    	pop	edx
                                                                      elf_exe_base_ok:
0000AD0D: C6 42 2A 20                                           	mov	byte [edx+2Ah],20h
0000AD11: 89 FB                                                 	mov	ebx,edi
0000AD13: B9 08 00 00 00                                        	mov	ecx,20h shr 2
0000AD18: 66 83 3D 52 A1 01 00 00                               	cmp	[current_pass],0
0000AD20: 74 07                                                 	je	init_elf_segments
0000AD22: 0F AF 0D 44 A2 01 00                                  	imul	ecx,[number_of_sections]
                                                                      init_elf_segments:
0000AD29: 31 C0                                                 	xor	eax,eax
0000AD2B: F3 AB                                                 	rep	stos dword [edi]
0000AD2D: 83 25 44 A2 01 00 00                                  	and	[number_of_sections],0
0000AD34: C6 03 01                                              	mov	byte [ebx],1
0000AD37: 66 C7 43 1C 00 10                                     	mov	word [ebx+1Ch],1000h
0000AD3D: C6 43 18 07                                           	mov	byte [ebx+18h],111b
0000AD41: 8B 2D 5C A2 01 00                                     	mov	ebp,[image_base]
0000AD47: 83 63 04 00                                           	and	dword [ebx+4],0
0000AD4B: 89 6B 08                                              	mov	[ebx+8],ebp
0000AD4E: 89 6B 0C                                              	mov	[ebx+0Ch],ebp
0000AD51: 89 F8                                                 	mov	eax,edi
0000AD53: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
0000AD59: 01 E8                                                 	add	eax,ebp
0000AD5B: 89 42 18                                              	mov	[edx+18h],eax
0000AD5E: 83 25 60 A2 01 00 00                                  	and	[image_base_high],0
                                                                      elf_exe_addressing_setup:
0000AD65: E8 20 9E FF FF                                        	call	init_addressing_space
0000AD6A: E8 0C 01 00 00                                        	call	setup_elf_exe_labels_type
0000AD6F: A1 60 A1 01 00                                        	mov	eax,[code_start]
0000AD74: 31 D2                                                 	xor	edx,edx
0000AD76: 30 C9                                                 	xor	cl,cl
0000AD78: 2B 05 5C A2 01 00                                     	sub	eax,[image_base]
0000AD7E: 1B 15 60 A2 01 00                                     	sbb	edx,[image_base_high]
0000AD84: 80 D9 00                                              	sbb	cl,0
0000AD87: 89 03                                                 	mov	[ebx],eax
0000AD89: 89 53 04                                              	mov	[ebx+4],edx
0000AD8C: 88 4B 08                                              	mov	[ebx+8],cl
0000AD8F: 89 3D 3C A2 01 00                                     	mov	[symbols_stream],edi
0000AD95: E9 B2 D3 FF FF                                        	jmp	format_defined
                                                                      format_elf64_exe:
0000AD9A: 83 C6 02                                              	add	esi,2
0000AD9D: 83 0D 34 A2 01 00 01                                  	or	[format_flags],1
0000ADA4: 80 3E 28                                              	cmp	byte [esi],'('
0000ADA7: 75 21                                                 	jne	elf64_exe_brand_ok
0000ADA9: 46                                                    	inc	esi
0000ADAA: 80 3E 2E                                              	cmp	byte [esi],'.'
0000ADAD: 0F 84 EF 5B FF FF                                     	je	invalid_value
0000ADB3: 52                                                    	push	edx
0000ADB4: E8 F4 C4 FF FF                                        	call	get_byte_value
0000ADB9: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000ADC0: 0F 85 8A 5C FF FF                                     	jne	invalid_use_of_symbol
0000ADC6: 5A                                                    	pop	edx
0000ADC7: 88 42 07                                              	mov	[edx+7],al
                                                                      elf64_exe_brand_ok:
0000ADCA: C7 05 5C A2 01 00 00 00 40 00                         	mov	[image_base],400000h
0000ADD4: 83 25 60 A2 01 00 00                                  	and	[image_base_high],0
0000ADDB: 80 3E 80                                              	cmp	byte [esi],80h
0000ADDE: 75 33                                                 	jne	elf64_exe_base_ok
0000ADE0: 66 AD                                                 	lods	word [esi]
0000ADE2: 80 FC 28                                              	cmp	ah,'('
0000ADE5: 0F 85 35 5B FF FF                                     	jne	invalid_argument
0000ADEB: 80 3E 2E                                              	cmp	byte [esi],'.'
0000ADEE: 0F 84 AE 5B FF FF                                     	je	invalid_value
0000ADF4: 52                                                    	push	edx
0000ADF5: E8 21 C6 FF FF                                        	call	get_qword_value
0000ADFA: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000AE01: 0F 85 49 5C FF FF                                     	jne	invalid_use_of_symbol
0000AE07: A3 5C A2 01 00                                        	mov	[image_base],eax
0000AE0C: 89 15 60 A2 01 00                                     	mov	[image_base_high],edx
0000AE12: 5A                                                    	pop	edx
                                                                      elf64_exe_base_ok:
0000AE13: C6 42 36 38                                           	mov	byte [edx+36h],38h
0000AE17: 89 FB                                                 	mov	ebx,edi
0000AE19: B9 0E 00 00 00                                        	mov	ecx,38h shr 2
0000AE1E: 66 83 3D 52 A1 01 00 00                               	cmp	[current_pass],0
0000AE26: 74 07                                                 	je	init_elf64_segments
0000AE28: 0F AF 0D 44 A2 01 00                                  	imul	ecx,[number_of_sections]
                                                                      init_elf64_segments:
0000AE2F: 31 C0                                                 	xor	eax,eax
0000AE31: F3 AB                                                 	rep	stos dword [edi]
0000AE33: 83 25 44 A2 01 00 00                                  	and	[number_of_sections],0
0000AE3A: C6 03 01                                              	mov	byte [ebx],1
0000AE3D: 66 C7 43 30 00 10                                     	mov	word [ebx+30h],1000h
0000AE43: C6 43 04 07                                           	mov	byte [ebx+4],111b
0000AE47: 8B 2D 5C A2 01 00                                     	mov	ebp,[image_base]
0000AE4D: 8B 0D 60 A2 01 00                                     	mov	ecx,[image_base_high]
0000AE53: 83 63 08 00                                           	and	dword [ebx+8],0
0000AE57: 89 6B 10                                              	mov	[ebx+10h],ebp
0000AE5A: 89 4B 14                                              	mov	[ebx+10h+4],ecx
0000AE5D: 89 6B 18                                              	mov	[ebx+18h],ebp
0000AE60: 89 4B 1C                                              	mov	[ebx+18h+4],ecx
0000AE63: 89 F8                                                 	mov	eax,edi
0000AE65: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
0000AE6B: 01 E8                                                 	add	eax,ebp
0000AE6D: 83 D1 00                                              	adc	ecx,0
0000AE70: 89 42 18                                              	mov	[edx+18h],eax
0000AE73: 89 4A 1C                                              	mov	[edx+18h+4],ecx
0000AE76: E9 EA FE FF FF                                        	jmp	elf_exe_addressing_setup
                                                                      setup_elf_exe_labels_type:
0000AE7B: A1 60 A1 01 00                                        	mov	eax,[code_start]
0000AE80: 80 78 10 03                                           	cmp	byte [eax+10h],3
0000AE84: 75 14                                                 	jne	elf_exe_labels_type_ok
0000AE86: C6 43 09 02                                           	mov	byte [ebx+9],2
0000AE8A: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AE94: 74 04                                                 	jz	elf_exe_labels_type_ok
0000AE96: C6 43 09 04                                           	mov	byte [ebx+9],4
                                                                      elf_exe_labels_type_ok:
0000AE9A: C3                                                    	ret
                                                                elf_entry:
0000AE9B: AC                                                    	lods	byte [esi]
0000AE9C: 3C 28                                                 	cmp	al,'('
0000AE9E: 0F 85 7C 5A FF FF                                     	jne	invalid_argument
0000AEA4: 80 3E 2E                                              	cmp	byte [esi],'.'
0000AEA7: 0F 84 F5 5A FF FF                                     	je	invalid_value
0000AEAD: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AEB7: 75 13                                                 	jnz	elf64_entry
0000AEB9: E8 C2 C4 FF FF                                        	call	get_dword_value
0000AEBE: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
0000AEC4: 89 42 18                                              	mov	[edx+18h],eax
0000AEC7: E9 A4 A0 FF FF                                        	jmp	instruction_assembled
                                                                      elf64_entry:
0000AECC: E8 4A C5 FF FF                                        	call	get_qword_value
0000AED1: 8B 1D 60 A1 01 00                                     	mov	ebx,[code_start]
0000AED7: 89 43 18                                              	mov	[ebx+18h],eax
0000AEDA: 89 53 1C                                              	mov	[ebx+1Ch],edx
0000AEDD: E9 8E A0 FF FF                                        	jmp	instruction_assembled
                                                                elf_segment:
0000AEE2: 0F BA 25 34 A2 01 00 00                               	bt	[format_flags],0
0000AEEA: 0F 83 3A 5A FF FF                                     	jnc	illegal_instruction
0000AEF0: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AEFA: 0F 85 FC 01 00 00                                     	jnz	elf64_segment
0000AF00: E8 54 01 00 00                                        	call	close_elf_segment
0000AF05: 50                                                    	push	eax
0000AF06: E8 63 9C FF FF                                        	call	create_addressing_space
0000AF0B: E8 6B FF FF FF                                        	call	setup_elf_exe_labels_type
0000AF10: 89 DD                                                 	mov	ebp,ebx
0000AF12: 8B 1D 44 A2 01 00                                     	mov	ebx,[number_of_sections]
0000AF18: C1 E3 05                                              	shl	ebx,5
0000AF1B: 03 1D 60 A1 01 00                                     	add	ebx,[code_start]
0000AF21: 83 C3 34                                              	add	ebx,34h
0000AF24: 3B 1D 3C A2 01 00                                     	cmp	ebx,[symbols_stream]
0000AF2A: 72 10                                                 	jb	new_elf_segment
0000AF2C: 8B 1D 3C A2 01 00                                     	mov	ebx,[symbols_stream]
0000AF32: 83 EB 20                                              	sub	ebx,20h
0000AF35: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      new_elf_segment:
0000AF3C: C6 03 01                                              	mov	byte [ebx],1
0000AF3F: 83 63 18 00                                           	and	dword [ebx+18h],0
0000AF43: 66 C7 43 1C 00 10                                     	mov	word [ebx+1Ch],1000h
                                                                      elf_segment_flags:
0000AF49: 80 3E 1E                                              	cmp	byte [esi],1Eh
0000AF4C: 74 36                                                 	je	elf_segment_type
0000AF4E: 80 3E 19                                              	cmp	byte [esi],19h
0000AF51: 75 7A                                                 	jne	elf_segment_flags_ok
0000AF53: 66 AD                                                 	lods	word [esi]
0000AF55: 80 EC 1C                                              	sub	ah,28
0000AF58: 0F 86 C2 59 FF FF                                     	jbe	invalid_argument
0000AF5E: 80 FC 01                                              	cmp	ah,1
0000AF61: 74 13                                                 	je	mark_elf_segment_flag
0000AF63: 80 FC 03                                              	cmp	ah,3
0000AF66: 0F 87 B4 59 FF FF                                     	ja	invalid_argument
0000AF6C: 80 F4 01                                              	xor	ah,1
0000AF6F: 80 FC 02                                              	cmp	ah,2
0000AF72: 74 02                                                 	je	mark_elf_segment_flag
0000AF74: FE C4                                                 	inc	ah
                                                                      mark_elf_segment_flag:
0000AF76: 84 63 18                                              	test	[ebx+18h],ah
0000AF79: 0F 85 17 5B FF FF                                     	jnz	setting_already_specified
0000AF7F: 08 63 18                                              	or	[ebx+18h],ah
0000AF82: EB C5                                                 	jmp	elf_segment_flags
                                                                      elf_segment_type:
0000AF84: 80 3B 01                                              	cmp	byte [ebx],1
0000AF87: 0F 85 09 5B FF FF                                     	jne	setting_already_specified
0000AF8D: 66 AD                                                 	lods	word [esi]
0000AF8F: 8B 0D 44 A2 01 00                                     	mov	ecx,[number_of_sections]
0000AF95: E3 1E                                                 	jecxz	elf_segment_type_ok
0000AF97: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
0000AF9D: 83 C2 34                                              	add	edx,34h
                                                                      scan_elf_segment_types:
0000AFA0: 3B 15 3C A2 01 00                                     	cmp	edx,[symbols_stream]
0000AFA6: 73 0D                                                 	jae	elf_segment_type_ok
0000AFA8: 38 22                                                 	cmp	[edx],ah
0000AFAA: 0F 84 ED 5A FF FF                                     	je	data_already_defined
0000AFB0: 83 C2 20                                              	add	edx,20h
0000AFB3: E2 EB                                                 	loop	scan_elf_segment_types
                                                                      elf_segment_type_ok:
0000AFB5: 88 23                                                 	mov	[ebx],ah
0000AFB7: 66 C7 43 1C 01 00                                     	mov	word [ebx+1Ch],1
0000AFBD: 80 FC 50                                              	cmp	ah,50h
0000AFC0: 72 87                                                 	jb	elf_segment_flags
0000AFC2: 81 0B 00 E5 74 64                                     	or	dword [ebx],6474E500h
0000AFC8: E9 7C FF FF FF                                        	jmp	elf_segment_flags
                                                                      elf_segment_flags_ok:
0000AFCD: 5A                                                    	pop	edx
0000AFCE: 80 3B 01                                              	cmp	byte [ebx],1
0000AFD1: 75 09                                                 	jne	no_elf_segment_merging
0000AFD3: 83 3D 64 A2 01 00 00                                  	cmp	[merge_segment],0
0000AFDA: 75 4A                                                 	jne	merge_elf_segment
                                                                      no_elf_segment_merging:
0000AFDC: 89 F8                                                 	mov	eax,edi
0000AFDE: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
0000AFE4: 89 43 04                                              	mov	[ebx+4],eax
0000AFE7: 25 FF 0F 00 00                                        	and	eax,0FFFh
0000AFEC: 01 D0                                                 	add	eax,edx
0000AFEE: 89 43 08                                              	mov	[ebx+8],eax
0000AFF1: 89 43 0C                                              	mov	[ebx+0Ch],eax
0000AFF4: 31 D2                                                 	xor	edx,edx
                                                                      elf_segment_addressing_setup:
0000AFF6: 30 C9                                                 	xor	cl,cl
0000AFF8: F7 D0                                                 	not	eax
0000AFFA: F7 D2                                                 	not	edx
0000AFFC: F6 D1                                                 	not	cl
0000AFFE: 83 C0 01                                              	add	eax,1
0000B001: 83 D2 00                                              	adc	edx,0
0000B004: 80 D1 00                                              	adc	cl,0
0000B007: 01 F8                                                 	add	eax,edi
0000B009: 83 D2 00                                              	adc	edx,0
0000B00C: 80 D1 00                                              	adc	cl,0
0000B00F: 3E 89 45 00                                           	mov	[ds:ebp],eax
0000B013: 3E 89 55 04                                           	mov	[ds:ebp+4],edx
0000B017: 3E 88 4D 08                                           	mov	[ds:ebp+8],cl
0000B01B: FF 05 44 A2 01 00                                     	inc	[number_of_sections]
0000B021: E9 4A 9F FF FF                                        	jmp	instruction_assembled
                                                                      merge_elf_segment:
0000B026: 31 C9                                                 	xor	ecx,ecx
0000B028: 87 0D 64 A2 01 00                                     	xchg	ecx,[merge_segment]
0000B02E: 83 F9 FF                                              	cmp	ecx,-1
0000B031: 74 1D                                                 	je	merge_elf_header
0000B033: 8B 41 08                                              	mov	eax,[ecx+8]
0000B036: 8B 49 04                                              	mov	ecx,[ecx+4]
                                                                      elf_segment_separated_base:
0000B039: 89 43 08                                              	mov	[ebx+8],eax
0000B03C: 89 43 0C                                              	mov	[ebx+0Ch],eax
0000B03F: 89 4B 04                                              	mov	[ebx+4],ecx
0000B042: 29 C8                                                 	sub	eax,ecx
0000B044: 01 F8                                                 	add	eax,edi
0000B046: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
0000B04C: 31 D2                                                 	xor	edx,edx
0000B04E: EB A6                                                 	jmp	elf_segment_addressing_setup
                                                                      merge_elf_header:
0000B050: A1 5C A2 01 00                                        	mov	eax,[image_base]
0000B055: 31 C9                                                 	xor	ecx,ecx
0000B057: EB E0                                                 	jmp	elf_segment_separated_base
                                                                      close_elf_segment:
0000B059: 83 3D 44 A2 01 00 00                                  	cmp	[number_of_sections],0
0000B060: 75 22                                                 	jne	finish_elf_segment
0000B062: 3B 3D 3C A2 01 00                                     	cmp	edi,[symbols_stream]
0000B068: 75 0D                                                 	jne	first_elf_segment_ok
0000B06A: 83 0D 64 A2 01 00 FF                                  	or	[merge_segment],-1
0000B071: A1 5C A2 01 00                                        	mov	eax,[image_base]
0000B076: C3                                                    	ret
                                                                      first_elf_segment_ok:
0000B077: 83 25 64 A2 01 00 00                                  	and	[merge_segment],0
0000B07E: FF 05 44 A2 01 00                                     	inc	[number_of_sections]
                                                                      finish_elf_segment:
0000B084: 8B 1D 44 A2 01 00                                     	mov	ebx,[number_of_sections]
0000B08A: 4B                                                    	dec	ebx
0000B08B: C1 E3 05                                              	shl	ebx,5
0000B08E: 03 1D 60 A1 01 00                                     	add	ebx,[code_start]
0000B094: 83 C3 34                                              	add	ebx,34h
0000B097: 89 F8                                                 	mov	eax,edi
0000B099: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
0000B09F: 2B 43 04                                              	sub	eax,[ebx+4]
0000B0A2: 89 FA                                                 	mov	edx,edi
0000B0A4: 3B 3D CC A1 01 00                                     	cmp	edi,[undefined_data_end]
0000B0AA: 75 0B                                                 	jne	elf_segment_size_ok
0000B0AC: 80 3B 01                                              	cmp	byte [ebx],1
0000B0AF: 75 06                                                 	jne	elf_segment_size_ok
0000B0B1: 8B 3D C8 A1 01 00                                     	mov	edi,[undefined_data_start]
                                                                      elf_segment_size_ok:
0000B0B7: 89 43 14                                              	mov	[ebx+14h],eax
0000B0BA: 01 F8                                                 	add	eax,edi
0000B0BC: 29 D0                                                 	sub	eax,edx
0000B0BE: 89 43 10                                              	mov	[ebx+10h],eax
0000B0C1: 83 25 CC A1 01 00 00                                  	and	[undefined_data_end],0
0000B0C8: 8B 43 08                                              	mov	eax,[ebx+8]
0000B0CB: 80 3B 01                                              	cmp	byte [ebx],1
0000B0CE: 74 1E                                                 	je	elf_segment_position_move_and_align
0000B0D0: 83 3D 64 A2 01 00 00                                  	cmp	[merge_segment],0
0000B0D7: 75 10                                                 	jne	elf_segment_position_move
0000B0D9: 80 3B 04                                              	cmp	byte [ebx],4
0000B0DC: 74 18                                                 	je	elf_segment_position_ok
0000B0DE: 80 3B 51                                              	cmp	byte [ebx],51h
0000B0E1: 74 13                                                 	je	elf_segment_position_ok
0000B0E3: 89 1D 64 A2 01 00                                     	mov	[merge_segment],ebx
                                                                      elf_segment_position_move:
0000B0E9: 03 43 14                                              	add	eax,[ebx+14h]
0000B0EC: EB 08                                                 	jmp	elf_segment_position_ok
                                                                      elf_segment_position_move_and_align:
0000B0EE: 03 43 14                                              	add	eax,[ebx+14h]
0000B0F1: 05 FF 0F 00 00                                        	add	eax,0FFFh
                                                                      elf_segment_position_ok:
0000B0F6: 25 00 F0 FF FF                                        	and	eax,not 0FFFh
0000B0FB: C3                                                    	ret
                                                                      elf64_segment:
0000B0FC: E8 3F 01 00 00                                        	call	close_elf64_segment
0000B101: 50 52                                                 	push	eax edx
0000B103: E8 66 9A FF FF                                        	call	create_addressing_space
0000B108: E8 6E FD FF FF                                        	call	setup_elf_exe_labels_type
0000B10D: 89 DD                                                 	mov	ebp,ebx
0000B10F: 8B 1D 44 A2 01 00                                     	mov	ebx,[number_of_sections]
0000B115: 6B DB 38                                              	imul	ebx,38h
0000B118: 03 1D 60 A1 01 00                                     	add	ebx,[code_start]
0000B11E: 83 C3 40                                              	add	ebx,40h
0000B121: 3B 1D 3C A2 01 00                                     	cmp	ebx,[symbols_stream]
0000B127: 72 07                                                 	jb	new_elf64_segment
0000B129: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      new_elf64_segment:
0000B130: C6 03 01                                              	mov	byte [ebx],1
0000B133: 83 63 04 00                                           	and	dword [ebx+4],0
0000B137: 66 C7 43 30 00 10                                     	mov	word [ebx+30h],1000h
                                                                      elf64_segment_flags:
0000B13D: 80 3E 1E                                              	cmp	byte [esi],1Eh
0000B140: 74 36                                                 	je	elf64_segment_type
0000B142: 80 3E 19                                              	cmp	byte [esi],19h
0000B145: 75 7A                                                 	jne	elf64_segment_flags_ok
0000B147: 66 AD                                                 	lods	word [esi]
0000B149: 80 EC 1C                                              	sub	ah,28
0000B14C: 0F 86 CE 57 FF FF                                     	jbe	invalid_argument
0000B152: 80 FC 01                                              	cmp	ah,1
0000B155: 74 13                                                 	je	mark_elf64_segment_flag
0000B157: 80 FC 03                                              	cmp	ah,3
0000B15A: 0F 87 C0 57 FF FF                                     	ja	invalid_argument
0000B160: 80 F4 01                                              	xor	ah,1
0000B163: 80 FC 02                                              	cmp	ah,2
0000B166: 74 02                                                 	je	mark_elf64_segment_flag
0000B168: FE C4                                                 	inc	ah
                                                                      mark_elf64_segment_flag:
0000B16A: 84 63 04                                              	test	[ebx+4],ah
0000B16D: 0F 85 23 59 FF FF                                     	jnz	setting_already_specified
0000B173: 08 63 04                                              	or	[ebx+4],ah
0000B176: EB C5                                                 	jmp	elf64_segment_flags
                                                                      elf64_segment_type:
0000B178: 80 3B 01                                              	cmp	byte [ebx],1
0000B17B: 0F 85 15 59 FF FF                                     	jne	setting_already_specified
0000B181: 66 AD                                                 	lods	word [esi]
0000B183: 8B 0D 44 A2 01 00                                     	mov	ecx,[number_of_sections]
0000B189: E3 1E                                                 	jecxz	elf64_segment_type_ok
0000B18B: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
0000B191: 83 C2 40                                              	add	edx,40h
                                                                      scan_elf64_segment_types:
0000B194: 3B 15 3C A2 01 00                                     	cmp	edx,[symbols_stream]
0000B19A: 73 0D                                                 	jae	elf64_segment_type_ok
0000B19C: 38 22                                                 	cmp	[edx],ah
0000B19E: 0F 84 F9 58 FF FF                                     	je	data_already_defined
0000B1A4: 83 C2 38                                              	add	edx,38h
0000B1A7: E2 EB                                                 	loop	scan_elf64_segment_types
                                                                      elf64_segment_type_ok:
0000B1A9: 88 23                                                 	mov	[ebx],ah
0000B1AB: 66 C7 43 30 01 00                                     	mov	word [ebx+30h],1
0000B1B1: 80 FC 50                                              	cmp	ah,50h
0000B1B4: 72 87                                                 	jb	elf64_segment_flags
0000B1B6: 81 0B 00 E5 74 64                                     	or	dword [ebx],6474E500h
0000B1BC: E9 7C FF FF FF                                        	jmp	elf64_segment_flags
                                                                      elf64_segment_flags_ok:
0000B1C1: 5A 58                                                 	pop	edx eax
0000B1C3: 80 3B 01                                              	cmp	byte [ebx],1
0000B1C6: 75 09                                                 	jne	no_elf64_segment_merging
0000B1C8: 83 3D 64 A2 01 00 00                                  	cmp	[merge_segment],0
0000B1CF: 75 27                                                 	jne	merge_elf64_segment
                                                                      no_elf64_segment_merging:
0000B1D1: 89 F9                                                 	mov	ecx,edi
0000B1D3: 2B 0D 60 A1 01 00                                     	sub	ecx,[code_start]
0000B1D9: 89 4B 08                                              	mov	[ebx+8],ecx
0000B1DC: 81 E1 FF 0F 00 00                                     	and	ecx,0FFFh
0000B1E2: 01 C8                                                 	add	eax,ecx
0000B1E4: 83 D2 00                                              	adc	edx,0
0000B1E7: 89 43 10                                              	mov	[ebx+10h],eax
0000B1EA: 89 53 14                                              	mov	[ebx+10h+4],edx
0000B1ED: 89 43 18                                              	mov	[ebx+18h],eax
0000B1F0: 89 53 1C                                              	mov	[ebx+18h+4],edx
0000B1F3: E9 FE FD FF FF                                        	jmp	elf_segment_addressing_setup
                                                                      merge_elf64_segment:
0000B1F8: 31 C9                                                 	xor	ecx,ecx
0000B1FA: 87 0D 64 A2 01 00                                     	xchg	ecx,[merge_segment]
0000B200: 83 F9 FF                                              	cmp	ecx,-1
0000B203: 74 2C                                                 	je	merge_elf64_header
0000B205: 8B 41 10                                              	mov	eax,[ecx+10h]
0000B208: 8B 51 14                                              	mov	edx,[ecx+10h+4]
0000B20B: 8B 49 08                                              	mov	ecx,[ecx+8]
                                                                      elf64_segment_separated_base:
0000B20E: 89 43 10                                              	mov	[ebx+10h],eax
0000B211: 89 53 14                                              	mov	[ebx+10h+4],edx
0000B214: 89 43 18                                              	mov	[ebx+18h],eax
0000B217: 89 53 1C                                              	mov	[ebx+18h+4],edx
0000B21A: 89 4B 08                                              	mov	[ebx+8],ecx
0000B21D: F7 D9                                                 	neg	ecx
0000B21F: 01 F9                                                 	add	ecx,edi
0000B221: 2B 0D 60 A1 01 00                                     	sub	ecx,[code_start]
0000B227: 01 C8                                                 	add	eax,ecx
0000B229: 83 D2 00                                              	adc	edx,0
0000B22C: E9 C5 FD FF FF                                        	jmp	elf_segment_addressing_setup
                                                                      merge_elf64_header:
0000B231: A1 5C A2 01 00                                        	mov	eax,[image_base]
0000B236: 8B 15 60 A2 01 00                                     	mov	edx,[image_base_high]
0000B23C: 31 C9                                                 	xor	ecx,ecx
0000B23E: EB CE                                                 	jmp	elf64_segment_separated_base
                                                                      close_elf64_segment:
0000B240: 83 3D 44 A2 01 00 00                                  	cmp	[number_of_sections],0
0000B247: 75 28                                                 	jne	finish_elf64_segment
0000B249: 3B 3D 3C A2 01 00                                     	cmp	edi,[symbols_stream]
0000B24F: 75 13                                                 	jne	first_elf64_segment_ok
0000B251: 83 0D 64 A2 01 00 FF                                  	or	[merge_segment],-1
0000B258: A1 5C A2 01 00                                        	mov	eax,[image_base]
0000B25D: 8B 15 60 A2 01 00                                     	mov	edx,[image_base_high]
0000B263: C3                                                    	ret
                                                                      first_elf64_segment_ok:
0000B264: 83 25 64 A2 01 00 00                                  	and	[merge_segment],0
0000B26B: FF 05 44 A2 01 00                                     	inc	[number_of_sections]
                                                                      finish_elf64_segment:
0000B271: 8B 1D 44 A2 01 00                                     	mov	ebx,[number_of_sections]
0000B277: 4B                                                    	dec	ebx
0000B278: 6B DB 38                                              	imul	ebx,38h
0000B27B: 03 1D 60 A1 01 00                                     	add	ebx,[code_start]
0000B281: 83 C3 40                                              	add	ebx,40h
0000B284: 89 F8                                                 	mov	eax,edi
0000B286: 2B 05 60 A1 01 00                                     	sub	eax,[code_start]
0000B28C: 2B 43 08                                              	sub	eax,[ebx+8]
0000B28F: 89 FA                                                 	mov	edx,edi
0000B291: 3B 3D CC A1 01 00                                     	cmp	edi,[undefined_data_end]
0000B297: 75 0B                                                 	jne	elf64_segment_size_ok
0000B299: 80 3B 01                                              	cmp	byte [ebx],1
0000B29C: 75 06                                                 	jne	elf64_segment_size_ok
0000B29E: 8B 3D C8 A1 01 00                                     	mov	edi,[undefined_data_start]
                                                                      elf64_segment_size_ok:
0000B2A4: 89 43 28                                              	mov	[ebx+28h],eax
0000B2A7: 01 F8                                                 	add	eax,edi
0000B2A9: 29 D0                                                 	sub	eax,edx
0000B2AB: 89 43 20                                              	mov	[ebx+20h],eax
0000B2AE: 83 25 CC A1 01 00 00                                  	and	[undefined_data_end],0
0000B2B5: 8B 43 10                                              	mov	eax,[ebx+10h]
0000B2B8: 8B 53 14                                              	mov	edx,[ebx+10h+4]
0000B2BB: 80 3B 01                                              	cmp	byte [ebx],1
0000B2BE: 74 21                                                 	je	elf64_segment_position_move_and_align
0000B2C0: 83 3D 64 A2 01 00 00                                  	cmp	[merge_segment],0
0000B2C7: 75 10                                                 	jne	elf64_segment_position_move
0000B2C9: 80 3B 04                                              	cmp	byte [ebx],4
0000B2CC: 74 21                                                 	je	elf64_segment_position_ok
0000B2CE: 80 3B 51                                              	cmp	byte [ebx],51h
0000B2D1: 74 1C                                                 	je	elf64_segment_position_ok
0000B2D3: 89 1D 64 A2 01 00                                     	mov	[merge_segment],ebx
                                                                      elf64_segment_position_move:
0000B2D9: 03 43 28                                              	add	eax,[ebx+28h]
0000B2DC: 83 D2 00                                              	adc	edx,0
0000B2DF: EB 0E                                                 	jmp	elf64_segment_position_ok
                                                                      elf64_segment_position_move_and_align:
0000B2E1: 03 43 28                                              	add	eax,[ebx+28h]
0000B2E4: 83 D2 00                                              	adc	edx,0
0000B2E7: 05 FF 0F 00 00                                        	add	eax,0FFFh
0000B2EC: 83 D2 00                                              	adc	edx,0
                                                                      elf64_segment_position_ok:
0000B2EF: 25 00 F0 FF FF                                        	and	eax,not 0FFFh
0000B2F4: C3                                                    	ret
                                                                close_elf_exe:
0000B2F5: F7 05 34 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000B2FF: 75 30                                                 	jnz	close_elf64_exe
0000B301: E8 53 FD FF FF                                        	call	close_elf_segment
0000B306: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
0000B30C: A1 44 A2 01 00                                        	mov	eax,[number_of_sections]
0000B311: C6 42 1C 34                                           	mov	byte [edx+1Ch],34h
0000B315: 66 89 42 2C                                           	mov	[edx+2Ch],ax
0000B319: C1 E0 05                                              	shl	eax,5
0000B31C: 01 D0                                                 	add	eax,edx
0000B31E: 83 C0 34                                              	add	eax,34h
0000B321: 3B 05 3C A2 01 00                                     	cmp	eax,[symbols_stream]
0000B327: 74 07                                                 	je	elf_exe_ok
0000B329: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      elf_exe_ok:
0000B330: C3                                                    	ret
                                                                      close_elf64_exe:
0000B331: E8 0A FF FF FF                                        	call	close_elf64_segment
0000B336: 8B 15 60 A1 01 00                                     	mov	edx,[code_start]
0000B33C: A1 44 A2 01 00                                        	mov	eax,[number_of_sections]
0000B341: C6 42 20 40                                           	mov	byte [edx+20h],40h
0000B345: 66 89 42 38                                           	mov	[edx+38h],ax
0000B349: 6B C0 38                                              	imul	eax,38h
0000B34C: 01 D0                                                 	add	eax,edx
0000B34E: 83 C0 40                                              	add	eax,40h
0000B351: 3B 05 3C A2 01 00                                     	cmp	eax,[symbols_stream]
0000B357: 74 07                                                 	je	elf64_exe_ok
0000B359: 80 0D BC A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      elf64_exe_ok:
0000B360: C3                                                    	ret
                                                                
                                                                include '..\x86_64.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                simple_instruction_except64:
0000B361: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000B368: 0F 84 BC 55 FF FF                                     	je	illegal_instruction
                                                                simple_instruction:
0000B36E: AA                                                    	stos	byte [edi]
0000B36F: E9 FC 9B FF FF                                        	jmp	instruction_assembled
                                                                simple_instruction_only64:
0000B374: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000B37B: 0F 85 A9 55 FF FF                                     	jne	illegal_instruction
0000B381: EB EB                                                 	jmp	simple_instruction
                                                                simple_instruction_16bit_except64:
0000B383: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000B38A: 0F 84 9A 55 FF FF                                     	je	illegal_instruction
                                                                simple_instruction_16bit:
0000B390: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000B397: 75 06                                                 	jne	size_prefix
0000B399: AA                                                    	stos	byte [edi]
0000B39A: E9 D1 9B FF FF                                        	jmp	instruction_assembled
                                                                      size_prefix:
0000B39F: 88 C4                                                 	mov	ah,al
0000B3A1: B0 66                                                 	mov	al,66h
0000B3A3: 66 AB                                                 	stos	word [edi]
0000B3A5: E9 C6 9B FF FF                                        	jmp	instruction_assembled
                                                                simple_instruction_32bit_except64:
0000B3AA: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000B3B1: 0F 84 73 55 FF FF                                     	je	illegal_instruction
                                                                simple_instruction_32bit:
0000B3B7: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000B3BE: 74 DF                                                 	je	size_prefix
0000B3C0: AA                                                    	stos	byte [edi]
0000B3C1: E9 AA 9B FF FF                                        	jmp	instruction_assembled
                                                                iret_instruction:
0000B3C6: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000B3CD: 75 9F                                                 	jne	simple_instruction
                                                                simple_instruction_64bit:
0000B3CF: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000B3D6: 0F 85 4E 55 FF FF                                     	jne	illegal_instruction
0000B3DC: 88 C4                                                 	mov	ah,al
0000B3DE: B0 48                                                 	mov	al,48h
0000B3E0: 66 AB                                                 	stos	word [edi]
0000B3E2: E9 89 9B FF FF                                        	jmp	instruction_assembled
                                                                simple_extended_instruction_64bit:
0000B3E7: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000B3EE: 0F 85 36 55 FF FF                                     	jne	illegal_instruction
0000B3F4: C6 07 48                                              	mov	byte [edi],48h
0000B3F7: 47                                                    	inc	edi
                                                                simple_extended_instruction:
0000B3F8: 88 C4                                                 	mov	ah,al
0000B3FA: B0 0F                                                 	mov	al,0Fh
0000B3FC: 66 AB                                                 	stos	word [edi]
0000B3FE: E9 6D 9B FF FF                                        	jmp	instruction_assembled
                                                                simple_extended_instruction_f3:
0000B403: C6 07 F3                                              	mov	byte [edi],0F3h
0000B406: 47                                                    	inc	edi
0000B407: EB EF                                                 	jmp	simple_extended_instruction
                                                                prefix_instruction:
0000B409: AA                                                    	stos	byte [edi]
0000B40A: 80 0D C3 A2 01 00 01                                  	or	[prefix_flags],1
0000B411: E9 6A 98 FF FF                                        	jmp	continue_line
                                                                segment_prefix:
0000B416: 88 C4                                                 	mov	ah,al
0000B418: C0 EC 04                                              	shr	ah,4
0000B41B: 80 FC 03                                              	cmp	ah,3
0000B41E: 0F 85 06 55 FF FF                                     	jne	illegal_instruction
0000B424: 24 0F                                                 	and	al,1111b
0000B426: A2 A7 A2 01 00                                        	mov	[segment_register],al
0000B42B: E8 DB 5A 00 00                                        	call	store_segment_prefix
0000B430: 80 0D C3 A2 01 00 01                                  	or	[prefix_flags],1
0000B437: E9 44 98 FF FF                                        	jmp	continue_line
                                                                bnd_prefix_instruction:
0000B43C: AA                                                    	stos	byte [edi]
0000B43D: 80 0D C3 A2 01 00 11                                  	or	[prefix_flags],1 + 10h
0000B444: E9 37 98 FF FF                                        	jmp	continue_line
                                                                int_instruction:
0000B449: AC                                                    	lods	byte [esi]
0000B44A: E8 DB 58 00 00                                        	call	get_size_operator
0000B44F: 80 FC 01                                              	cmp	ah,1
0000B452: 0F 87 E6 54 FF FF                                     	ja	invalid_operand_size
0000B458: 3C 28                                                 	cmp	al,'('
0000B45A: 0F 85 D4 54 FF FF                                     	jne	invalid_operand
0000B460: E8 48 BE FF FF                                        	call	get_byte_value
0000B465: 85 C0                                                 	test	eax,eax
0000B467: 79 05                                                 	jns	int_imm_ok
0000B469: E8 83 BE FF FF                                        	call	recoverable_overflow
                                                                      int_imm_ok:
0000B46E: 88 C4                                                 	mov	ah,al
0000B470: B0 CD                                                 	mov	al,0CDh
0000B472: 66 AB                                                 	stos	word [edi]
0000B474: E9 F7 9A FF FF                                        	jmp	instruction_assembled
                                                                aa_instruction:
0000B479: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000B480: 0F 84 A4 54 FF FF                                     	je	illegal_instruction
0000B486: 50                                                    	push	eax
0000B487: B3 0A                                                 	mov	bl,10
0000B489: 80 3E 28                                              	cmp	byte [esi],'('
0000B48C: 75 18                                                 	jne	aa_store
0000B48E: 46                                                    	inc	esi
0000B48F: 30 C0                                                 	xor	al,al
0000B491: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
0000B497: 3C 01                                                 	cmp	al,1
0000B499: 0F 87 9F 54 FF FF                                     	ja	invalid_operand_size
0000B49F: E8 09 BE FF FF                                        	call	get_byte_value
0000B4A4: 88 C3                                                 	mov	bl,al
                                                                      aa_store:
0000B4A6: 80 3D 98 A2 01 00 00                                  	cmp	[operand_size],0
0000B4AD: 0F 85 81 54 FF FF                                     	jne	invalid_operand
0000B4B3: 58                                                    	pop	eax
0000B4B4: 88 DC                                                 	mov	ah,bl
0000B4B6: 66 AB                                                 	stos	word [edi]
0000B4B8: E9 B3 9A FF FF                                        	jmp	instruction_assembled
                                                                
                                                                basic_instruction:
0000B4BD: A2 A3 A2 01 00                                        	mov	[base_code],al
0000B4C2: AC                                                    	lods	byte [esi]
0000B4C3: E8 62 58 00 00                                        	call	get_size_operator
0000B4C8: 3C 10                                                 	cmp	al,10h
0000B4CA: 0F 84 AE 01 00 00                                     	je	basic_reg
0000B4D0: 3C 5B                                                 	cmp	al,'['
0000B4D2: 0F 85 5C 54 FF FF                                     	jne	invalid_operand
                                                                      basic_mem:
0000B4D8: E8 A9 58 00 00                                        	call	get_address
0000B4DD: 52 53 51                                              	push	edx ebx ecx
0000B4E0: AC                                                    	lods	byte [esi]
0000B4E1: 3C 2C                                                 	cmp	al,','
0000B4E3: 0F 85 4B 54 FF FF                                     	jne	invalid_operand
0000B4E9: AC                                                    	lods	byte [esi]
0000B4EA: E8 3B 58 00 00                                        	call	get_size_operator
0000B4EF: 3C 28                                                 	cmp	al,'('
0000B4F1: 74 31                                                 	je	basic_mem_imm
0000B4F3: 3C 10                                                 	cmp	al,10h
0000B4F5: 0F 85 39 54 FF FF                                     	jne	invalid_operand
                                                                      basic_mem_reg:
0000B4FB: AC                                                    	lods	byte [esi]
0000B4FC: E8 82 57 00 00                                        	call	convert_register
0000B501: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000B506: 59 5B 5A                                              	pop	ecx ebx edx
0000B509: 88 E0                                                 	mov	al,ah
0000B50B: 3C 01                                                 	cmp	al,1
0000B50D: 74 0B                                                 	je	instruction_ready
0000B50F: E8 9F 59 00 00                                        	call	operand_autodetect
0000B514: FE 05 A3 A2 01 00                                     	inc	[base_code]
                                                                      instruction_ready:
0000B51A: E8 D4 5A 00 00                                        	call	store_instruction
0000B51F: E9 4C 9A FF FF                                        	jmp	instruction_assembled
                                                                      basic_mem_imm:
0000B524: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000B529: 3C 01                                                 	cmp	al,1
0000B52B: 72 3F                                                 	jb	basic_mem_imm_nosize
0000B52D: 74 42                                                 	je	basic_mem_imm_8bit
0000B52F: 3C 02                                                 	cmp	al,2
0000B531: 74 69                                                 	je	basic_mem_imm_16bit
0000B533: 3C 04                                                 	cmp	al,4
0000B535: 0F 84 CA 00 00 00                                     	je	basic_mem_imm_32bit
0000B53B: 3C 08                                                 	cmp	al,8
0000B53D: 0F 85 FB 53 FF FF                                     	jne	invalid_operand_size
                                                                      basic_mem_imm_64bit:
0000B543: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000B54A: 0F 85 2A 54 FF FF                                     	jne	long_immediate_not_encodable
0000B550: E8 49 59 00 00                                        	call	operand_64bit
0000B555: E8 02 01 00 00                                        	call	get_simm32
0000B55A: 80 3D B4 A2 01 00 04                                  	cmp	[value_type],4
0000B561: 0F 83 13 54 FF FF                                     	jae	long_immediate_not_encodable
0000B567: E9 A3 00 00 00                                        	jmp	basic_mem_imm_32bit_ok
                                                                      basic_mem_imm_nosize:
0000B56C: E8 F3 02 00 00                                        	call	recoverable_unknown_size
                                                                      basic_mem_imm_8bit:
0000B571: E8 37 BD FF FF                                        	call	get_byte_value
0000B576: A2 F4 A1 01 00                                        	mov	byte [value],al
0000B57B: A0 A3 A2 01 00                                        	mov	al,[base_code]
0000B580: C0 E8 03                                              	shr	al,3
0000B583: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000B588: 59 5B 5A                                              	pop	ecx ebx edx
0000B58B: C6 05 A3 A2 01 00 80                                  	mov	[base_code],80h
0000B592: E8 D2 5F 00 00                                        	call	store_instruction_with_imm8
0000B597: E9 D4 99 FF FF                                        	jmp	instruction_assembled
                                                                      basic_mem_imm_16bit:
0000B59C: E8 DB 58 00 00                                        	call	operand_16bit
0000B5A1: E8 92 BD FF FF                                        	call	get_word_value
0000B5A6: 66 A3 F4 A1 01 00                                     	mov	word [value],ax
0000B5AC: A0 A3 A2 01 00                                        	mov	al,[base_code]
0000B5B1: C0 E8 03                                              	shr	al,3
0000B5B4: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000B5B9: 59 5B 5A                                              	pop	ecx ebx edx
0000B5BC: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000B5C3: 75 1E                                                 	jne	basic_mem_imm_16bit_store
0000B5C5: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000B5CC: 75 15                                                 	jne	basic_mem_imm_16bit_store
0000B5CE: 66 81 3D F4 A1 01 00 80 00                            	cmp	word [value],80h
0000B5D7: 72 1B                                                 	jb	basic_mem_simm_8bit
0000B5D9: 66 83 3D F4 A1 01 00 80                               	cmp	word [value],-80h
0000B5E1: 73 11                                                 	jae	basic_mem_simm_8bit
                                                                      basic_mem_imm_16bit_store:
0000B5E3: C6 05 A3 A2 01 00 81                                  	mov	[base_code],81h
0000B5EA: E8 8D 5F 00 00                                        	call	store_instruction_with_imm16
0000B5EF: E9 7C 99 FF FF                                        	jmp	instruction_assembled
                                                                      basic_mem_simm_8bit:
0000B5F4: C6 05 A3 A2 01 00 83                                  	mov	[base_code],83h
0000B5FB: E8 69 5F 00 00                                        	call	store_instruction_with_imm8
0000B600: E9 6B 99 FF FF                                        	jmp	instruction_assembled
                                                                      basic_mem_imm_32bit:
0000B605: E8 83 58 00 00                                        	call	operand_32bit
0000B60A: E8 71 BD FF FF                                        	call	get_dword_value
                                                                      basic_mem_imm_32bit_ok:
0000B60F: A3 F4 A1 01 00                                        	mov	dword [value],eax
0000B614: A0 A3 A2 01 00                                        	mov	al,[base_code]
0000B619: C0 E8 03                                              	shr	al,3
0000B61C: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000B621: 59 5B 5A                                              	pop	ecx ebx edx
0000B624: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000B62B: 75 1E                                                 	jne	basic_mem_imm_32bit_store
0000B62D: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000B634: 75 15                                                 	jne	basic_mem_imm_32bit_store
0000B636: 81 3D F4 A1 01 00 80 00 00 00                         	cmp	dword [value],80h
0000B640: 72 B2                                                 	jb	basic_mem_simm_8bit
0000B642: 83 3D F4 A1 01 00 80                                  	cmp	dword [value],-80h
0000B649: 73 A9                                                 	jae	basic_mem_simm_8bit
                                                                      basic_mem_imm_32bit_store:
0000B64B: C6 05 A3 A2 01 00 81                                  	mov	[base_code],81h
0000B652: E8 3F 5F 00 00                                        	call	store_instruction_with_imm32
0000B657: E9 14 99 FF FF                                        	jmp	instruction_assembled
                                                                      get_simm32:
0000B65C: E8 BA BD FF FF                                        	call	get_qword_value
0000B661: 89 D1                                                 	mov	ecx,edx
0000B663: 99                                                    	cdq
0000B664: 39 D1                                                 	cmp	ecx,edx
0000B666: 74 05                                                 	je	simm32_range_ok
0000B668: E8 84 BC FF FF                                        	call	recoverable_overflow
                                                                      simm32_range_ok:
0000B66D: 80 3D B4 A2 01 00 04                                  	cmp	[value_type],4
0000B674: 75 07                                                 	jne	get_simm32_ok
0000B676: C6 05 B4 A2 01 00 02                                  	mov	[value_type],2
                                                                      get_simm32_ok:
0000B67D: C3                                                    	ret
                                                                      basic_reg:
0000B67E: AC                                                    	lods	byte [esi]
0000B67F: E8 FF 55 00 00                                        	call	convert_register
0000B684: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000B689: AC                                                    	lods	byte [esi]
0000B68A: 3C 2C                                                 	cmp	al,','
0000B68C: 0F 85 A2 52 FF FF                                     	jne	invalid_operand
0000B692: AC                                                    	lods	byte [esi]
0000B693: E8 92 56 00 00                                        	call	get_size_operator
0000B698: 3C 10                                                 	cmp	al,10h
0000B69A: 74 37                                                 	je	basic_reg_reg
0000B69C: 3C 28                                                 	cmp	al,'('
0000B69E: 74 5F                                                 	je	basic_reg_imm
0000B6A0: 3C 5B                                                 	cmp	al,'['
0000B6A2: 0F 85 8C 52 FF FF                                     	jne	invalid_operand
                                                                      basic_reg_mem:
0000B6A8: E8 D9 56 00 00                                        	call	get_address
0000B6AD: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000B6B2: 3C 01                                                 	cmp	al,1
0000B6B4: 74 11                                                 	je	basic_reg_mem_8bit
0000B6B6: E8 F8 57 00 00                                        	call	operand_autodetect
0000B6BB: 80 05 A3 A2 01 00 03                                  	add	[base_code],3
0000B6C2: E9 53 FE FF FF                                        	jmp	instruction_ready
                                                                      basic_reg_mem_8bit:
0000B6C7: 80 05 A3 A2 01 00 02                                  	add	[base_code],2
0000B6CE: E9 47 FE FF FF                                        	jmp	instruction_ready
                                                                      basic_reg_reg:
0000B6D3: AC                                                    	lods	byte [esi]
0000B6D4: E8 AA 55 00 00                                        	call	convert_register
0000B6D9: 8A 1D A6 A2 01 00                                     	mov	bl,[postbyte_register]
0000B6DF: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000B6E4: 88 E0                                                 	mov	al,ah
0000B6E6: 3C 01                                                 	cmp	al,1
0000B6E8: 74 0B                                                 	je	nomem_instruction_ready
0000B6EA: E8 C4 57 00 00                                        	call	operand_autodetect
0000B6EF: FE 05 A3 A2 01 00                                     	inc	[base_code]
                                                                      nomem_instruction_ready:
0000B6F5: E8 8C 58 00 00                                        	call	store_nomem_instruction
0000B6FA: E9 71 98 FF FF                                        	jmp	instruction_assembled
                                                                      basic_reg_imm:
0000B6FF: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000B704: 3C 01                                                 	cmp	al,1
0000B706: 74 3D                                                 	je	basic_reg_imm_8bit
0000B708: 3C 02                                                 	cmp	al,2
0000B70A: 74 77                                                 	je	basic_reg_imm_16bit
0000B70C: 3C 04                                                 	cmp	al,4
0000B70E: 0F 84 EB 00 00 00                                     	je	basic_reg_imm_32bit
0000B714: 3C 08                                                 	cmp	al,8
0000B716: 0F 85 22 52 FF FF                                     	jne	invalid_operand_size
                                                                      basic_reg_imm_64bit:
0000B71C: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000B723: 0F 85 51 52 FF FF                                     	jne	long_immediate_not_encodable
0000B729: E8 70 57 00 00                                        	call	operand_64bit
0000B72E: E8 29 FF FF FF                                        	call	get_simm32
0000B733: 80 3D B4 A2 01 00 04                                  	cmp	[value_type],4
0000B73A: 0F 83 3A 52 FF FF                                     	jae	long_immediate_not_encodable
0000B740: E9 C4 00 00 00                                        	jmp	basic_reg_imm_32bit_ok
                                                                      basic_reg_imm_8bit:
0000B745: E8 63 BB FF FF                                        	call	get_byte_value
0000B74A: 88 C2                                                 	mov	dl,al
0000B74C: 8A 1D A3 A2 01 00                                     	mov	bl,[base_code]
0000B752: C0 EB 03                                              	shr	bl,3
0000B755: 86 1D A6 A2 01 00                                     	xchg	bl,[postbyte_register]
0000B75B: 08 DB                                                 	or	bl,bl
0000B75D: 74 14                                                 	jz	basic_al_imm
0000B75F: C6 05 A3 A2 01 00 80                                  	mov	[base_code],80h
0000B766: E8 1B 58 00 00                                        	call	store_nomem_instruction
0000B76B: 88 D0                                                 	mov	al,dl
0000B76D: AA                                                    	stos	byte [edi]
0000B76E: E9 FD 97 FF FF                                        	jmp	instruction_assembled
                                                                      basic_al_imm:
0000B773: A0 A3 A2 01 00                                        	mov	al,[base_code]
0000B778: 04 04                                                 	add	al,4
0000B77A: AA                                                    	stos	byte [edi]
0000B77B: 88 D0                                                 	mov	al,dl
0000B77D: AA                                                    	stos	byte [edi]
0000B77E: E9 ED 97 FF FF                                        	jmp	instruction_assembled
                                                                      basic_reg_imm_16bit:
0000B783: E8 F4 56 00 00                                        	call	operand_16bit
0000B788: E8 AB BB FF FF                                        	call	get_word_value
0000B78D: 66 89 C2                                              	mov	dx,ax
0000B790: 8A 1D A3 A2 01 00                                     	mov	bl,[base_code]
0000B796: C0 EB 03                                              	shr	bl,3
0000B799: 86 1D A6 A2 01 00                                     	xchg	bl,[postbyte_register]
0000B79F: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000B7A6: 75 16                                                 	jne	basic_reg_imm_16bit_store
0000B7A8: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000B7AF: 75 0D                                                 	jne	basic_reg_imm_16bit_store
0000B7B1: 66 81 FA 80 00                                        	cmp	dx,80h
0000B7B6: 72 25                                                 	jb	basic_reg_simm_8bit
0000B7B8: 66 83 FA 80                                           	cmp	dx,-80h
0000B7BC: 73 1F                                                 	jae	basic_reg_simm_8bit
                                                                      basic_reg_imm_16bit_store:
0000B7BE: 08 DB                                                 	or	bl,bl
0000B7C0: 74 2F                                                 	jz	basic_ax_imm
0000B7C2: C6 05 A3 A2 01 00 81                                  	mov	[base_code],81h
0000B7C9: E8 B8 57 00 00                                        	call	store_nomem_instruction
                                                                      basic_store_imm_16bit:
0000B7CE: 66 89 D0                                              	mov	ax,dx
0000B7D1: E8 0C CC FF FF                                        	call	mark_relocation
0000B7D6: 66 AB                                                 	stos	word [edi]
0000B7D8: E9 93 97 FF FF                                        	jmp	instruction_assembled
                                                                      basic_reg_simm_8bit:
0000B7DD: C6 05 A3 A2 01 00 83                                  	mov	[base_code],83h
0000B7E4: E8 9D 57 00 00                                        	call	store_nomem_instruction
0000B7E9: 88 D0                                                 	mov	al,dl
0000B7EB: AA                                                    	stos	byte [edi]
0000B7EC: E9 7F 97 FF FF                                        	jmp	instruction_assembled
                                                                      basic_ax_imm:
0000B7F1: 80 05 A3 A2 01 00 05                                  	add	[base_code],5
0000B7F8: E8 36 57 00 00                                        	call	store_classic_instruction_code
0000B7FD: EB CF                                                 	jmp	basic_store_imm_16bit
                                                                      basic_reg_imm_32bit:
0000B7FF: E8 89 56 00 00                                        	call	operand_32bit
0000B804: E8 77 BB FF FF                                        	call	get_dword_value
                                                                      basic_reg_imm_32bit_ok:
0000B809: 89 C2                                                 	mov	edx,eax
0000B80B: 8A 1D A3 A2 01 00                                     	mov	bl,[base_code]
0000B811: C0 EB 03                                              	shr	bl,3
0000B814: 86 1D A6 A2 01 00                                     	xchg	bl,[postbyte_register]
0000B81A: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000B821: 75 16                                                 	jne	basic_reg_imm_32bit_store
0000B823: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000B82A: 75 0D                                                 	jne	basic_reg_imm_32bit_store
0000B82C: 81 FA 80 00 00 00                                     	cmp	edx,80h
0000B832: 72 A9                                                 	jb	basic_reg_simm_8bit
0000B834: 83 FA 80                                              	cmp	edx,-80h
0000B837: 73 A4                                                 	jae	basic_reg_simm_8bit
                                                                      basic_reg_imm_32bit_store:
0000B839: 08 DB                                                 	or	bl,bl
0000B83B: 74 19                                                 	jz	basic_eax_imm
0000B83D: C6 05 A3 A2 01 00 81                                  	mov	[base_code],81h
0000B844: E8 3D 57 00 00                                        	call	store_nomem_instruction
                                                                      basic_store_imm_32bit:
0000B849: 89 D0                                                 	mov	eax,edx
0000B84B: E8 92 CB FF FF                                        	call	mark_relocation
0000B850: AB                                                    	stos	dword [edi]
0000B851: E9 1A 97 FF FF                                        	jmp	instruction_assembled
                                                                      basic_eax_imm:
0000B856: 80 05 A3 A2 01 00 05                                  	add	[base_code],5
0000B85D: E8 D1 56 00 00                                        	call	store_classic_instruction_code
0000B862: EB E5                                                 	jmp	basic_store_imm_32bit
                                                                      recoverable_unknown_size:
0000B864: 83 3D DC A1 01 00 00                                  	cmp	[error_line],0
0000B86B: 75 16                                                 	jne	ignore_unknown_size
0000B86D: FF 35 74 A1 01 00                                     	push	[current_line]
0000B873: 8F 05 DC A1 01 00                                     	pop	[error_line]
0000B879: C7 05 E0 A1 01 00 48 09 00 00                         	mov	[error],operand_size_not_specified
                                                                      ignore_unknown_size:
0000B883: C3                                                    	ret
                                                                single_operand_instruction:
0000B884: C6 05 A3 A2 01 00 F6                                  	mov	[base_code],0F6h
0000B88B: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000B890: AC                                                    	lods	byte [esi]
0000B891: E8 94 54 00 00                                        	call	get_size_operator
0000B896: 3C 10                                                 	cmp	al,10h
0000B898: 74 32                                                 	je	single_reg
0000B89A: 3C 5B                                                 	cmp	al,'['
0000B89C: 0F 85 92 50 FF FF                                     	jne	invalid_operand
                                                                      single_mem:
0000B8A2: E8 DF 54 00 00                                        	call	get_address
0000B8A7: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000B8AC: 3C 01                                                 	cmp	al,1
0000B8AE: 74 17                                                 	je	single_mem_8bit
0000B8B0: 72 10                                                 	jb	single_mem_nosize
0000B8B2: E8 FC 55 00 00                                        	call	operand_autodetect
0000B8B7: FE 05 A3 A2 01 00                                     	inc	[base_code]
0000B8BD: E9 58 FC FF FF                                        	jmp	instruction_ready
                                                                      single_mem_nosize:
0000B8C2: E8 9D FF FF FF                                        	call	recoverable_unknown_size
                                                                      single_mem_8bit:
0000B8C7: E9 4E FC FF FF                                        	jmp	instruction_ready
                                                                      single_reg:
0000B8CC: AC                                                    	lods	byte [esi]
0000B8CD: E8 B1 53 00 00                                        	call	convert_register
0000B8D2: 88 C3                                                 	mov	bl,al
0000B8D4: 88 E0                                                 	mov	al,ah
0000B8D6: 3C 01                                                 	cmp	al,1
0000B8D8: 74 0B                                                 	je	single_reg_8bit
0000B8DA: E8 D4 55 00 00                                        	call	operand_autodetect
0000B8DF: FE 05 A3 A2 01 00                                     	inc	[base_code]
                                                                      single_reg_8bit:
0000B8E5: E9 0B FE FF FF                                        	jmp	nomem_instruction_ready
                                                                mov_instruction:
0000B8EA: C6 05 A3 A2 01 00 88                                  	mov	[base_code],88h
0000B8F1: AC                                                    	lods	byte [esi]
0000B8F2: E8 33 54 00 00                                        	call	get_size_operator
0000B8F7: 3C 10                                                 	cmp	al,10h
0000B8F9: 0F 84 B7 02 00 00                                     	je	mov_reg
0000B8FF: 3C 14                                                 	cmp	al,14h
0000B901: 0F 84 93 06 00 00                                     	je	mov_creg
0000B907: 3C 5B                                                 	cmp	al,'['
0000B909: 0F 85 25 50 FF FF                                     	jne	invalid_operand
                                                                      mov_mem:
0000B90F: E8 72 54 00 00                                        	call	get_address
0000B914: 52 53 51                                              	push	edx ebx ecx
0000B917: AC                                                    	lods	byte [esi]
0000B918: 3C 2C                                                 	cmp	al,','
0000B91A: 0F 85 14 50 FF FF                                     	jne	invalid_operand
0000B920: AC                                                    	lods	byte [esi]
0000B921: E8 04 54 00 00                                        	call	get_size_operator
0000B926: 3C 28                                                 	cmp	al,'('
0000B928: 0F 84 C4 01 00 00                                     	je	mov_mem_imm
0000B92E: 3C 10                                                 	cmp	al,10h
0000B930: 0F 85 FE 4F FF FF                                     	jne	invalid_operand
                                                                      mov_mem_reg:
0000B936: AC                                                    	lods	byte [esi]
0000B937: 3C 30                                                 	cmp	al,30h
0000B939: 72 08                                                 	jb	mov_mem_general_reg
0000B93B: 3C 40                                                 	cmp	al,40h
0000B93D: 0F 82 86 01 00 00                                     	jb	mov_mem_sreg
                                                                      mov_mem_general_reg:
0000B943: E8 3B 53 00 00                                        	call	convert_register
0000B948: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000B94D: 59 5B 5A                                              	pop	ecx ebx edx
0000B950: 80 FC 01                                              	cmp	ah,1
0000B953: 74 21                                                 	je	mov_mem_reg_8bit
0000B955: FE 05 A3 A2 01 00                                     	inc	[base_code]
0000B95B: 88 E0                                                 	mov	al,ah
0000B95D: E8 51 55 00 00                                        	call	operand_autodetect
0000B962: A0 A6 A2 01 00                                        	mov	al,[postbyte_register]
0000B967: 08 D8                                                 	or	al,bl
0000B969: 08 F8                                                 	or	al,bh
0000B96B: 0F 84 EB 00 00 00                                     	jz	mov_mem_ax
0000B971: E9 A4 FB FF FF                                        	jmp	instruction_ready
                                                                      mov_mem_reg_8bit:
0000B976: 08 D8                                                 	or	al,bl
0000B978: 08 F8                                                 	or	al,bh
0000B97A: 0F 85 9A FB FF FF                                     	jnz	instruction_ready
                                                                      mov_mem_al:
0000B980: F6 C5 22                                              	test	ch,22h
0000B983: 75 52                                                 	jnz	mov_mem_address16_al
0000B985: F6 C5 44                                              	test	ch,44h
0000B988: 75 2D                                                 	jnz	mov_mem_address32_al
0000B98A: F6 C5 77                                              	test	ch,not 88h
0000B98D: 0F 85 C9 4F FF FF                                     	jnz	invalid_address_size
0000B993: E8 77 00 00 00                                        	call	check_mov_address64
0000B998: 3C 00                                                 	cmp	al,0
0000B99A: 0F 8F A1 00 00 00                                     	jg	mov_mem_address64_al
0000B9A0: 0F 8C 74 FB FF FF                                     	jl	instruction_ready
0000B9A6: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000B9AD: 75 08                                                 	jne	mov_mem_address32_al
0000B9AF: 81 FA 00 00 01 00                                     	cmp	edx,10000h
0000B9B5: 72 20                                                 	jb	mov_mem_address16_al
                                                                      mov_mem_address32_al:
0000B9B7: E8 08 55 00 00                                        	call	store_segment_prefix_if_necessary
0000B9BC: E8 9B 5B 00 00                                        	call	address_32bit_prefix
0000B9C1: C6 05 A3 A2 01 00 A2                                  	mov	[base_code],0A2h
                                                                      store_mov_address32:
0000B9C8: E8 66 55 00 00                                        	call	store_classic_instruction_code
0000B9CD: E8 FE 59 00 00                                        	call	store_address_32bit_value
0000B9D2: E9 99 95 FF FF                                        	jmp	instruction_assembled
                                                                      mov_mem_address16_al:
0000B9D7: E8 E8 54 00 00                                        	call	store_segment_prefix_if_necessary
0000B9DC: E8 6E 5B 00 00                                        	call	address_16bit_prefix
0000B9E1: C6 05 A3 A2 01 00 A2                                  	mov	[base_code],0A2h
                                                                      store_mov_address16:
0000B9E8: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000B9EF: 0F 84 A3 4F FF FF                                     	je	invalid_address
0000B9F5: E8 39 55 00 00                                        	call	store_classic_instruction_code
0000B9FA: 89 D0                                                 	mov	eax,edx
0000B9FC: 66 AB                                                 	stos	word [edi]
0000B9FE: 81 FA 00 00 01 00                                     	cmp	edx,10000h
0000BA04: 0F 8D A2 4F FF FF                                     	jge	value_out_of_range
0000BA0A: E9 61 95 FF FF                                        	jmp	instruction_assembled
                                                                      check_mov_address64:
0000BA0F: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000BA16: 75 1D                                                 	jne	no_address64
0000BA18: F6 C5 88                                              	test	ch,88h
0000BA1B: 75 12                                                 	jnz	address64_required
0000BA1D: A1 2C A2 01 00                                        	mov	eax,[address_high]
0000BA22: 09 C0                                                 	or	eax,eax
0000BA24: 74 0F                                                 	jz	no_address64
0000BA26: 0F BA E2 1F                                           	bt	edx,31
0000BA2A: 83 D0 00                                              	adc	eax,0
0000BA2D: 74 03                                                 	jz	address64_simm32
                                                                      address64_required:
0000BA2F: B0 01                                                 	mov	al,1
0000BA31: C3                                                    	ret
                                                                      address64_simm32:
0000BA32: B0 FF                                                 	mov	al,-1
0000BA34: C3                                                    	ret
                                                                      no_address64:
0000BA35: F6 C5 08                                              	test	ch,08h
0000BA38: 0F 85 1E 4F FF FF                                     	jnz	invalid_address_size
0000BA3E: 30 C0                                                 	xor	al,al
0000BA40: C3                                                    	ret
                                                                      mov_mem_address64_al:
0000BA41: E8 7E 54 00 00                                        	call	store_segment_prefix_if_necessary
0000BA46: C6 05 A3 A2 01 00 A2                                  	mov	[base_code],0A2h
                                                                      store_mov_address64:
0000BA4D: E8 E1 54 00 00                                        	call	store_classic_instruction_code
0000BA52: E8 AF 59 00 00                                        	call	store_address_64bit_value
0000BA57: E9 14 95 FF FF                                        	jmp	instruction_assembled
                                                                      mov_mem_ax:
0000BA5C: F6 C5 22                                              	test	ch,22h
0000BA5F: 75 44                                                 	jnz	mov_mem_address16_ax
0000BA61: F6 C5 44                                              	test	ch,44h
0000BA64: 75 29                                                 	jnz	mov_mem_address32_ax
0000BA66: F6 C5 77                                              	test	ch,not 88h
0000BA69: 0F 85 ED 4E FF FF                                     	jnz	invalid_address_size
0000BA6F: E8 9B FF FF FF                                        	call	check_mov_address64
0000BA74: 3C 00                                                 	cmp	al,0
0000BA76: 7F 43                                                 	jg	mov_mem_address64_ax
0000BA78: 0F 8C 9C FA FF FF                                     	jl	instruction_ready
0000BA7E: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000BA85: 75 08                                                 	jne	mov_mem_address32_ax
0000BA87: 81 FA 00 00 01 00                                     	cmp	edx,10000h
0000BA8D: 72 16                                                 	jb	mov_mem_address16_ax
                                                                      mov_mem_address32_ax:
0000BA8F: E8 30 54 00 00                                        	call	store_segment_prefix_if_necessary
0000BA94: E8 C3 5A 00 00                                        	call	address_32bit_prefix
0000BA99: C6 05 A3 A2 01 00 A3                                  	mov	[base_code],0A3h
0000BAA0: E9 23 FF FF FF                                        	jmp	store_mov_address32
                                                                      mov_mem_address16_ax:
0000BAA5: E8 1A 54 00 00                                        	call	store_segment_prefix_if_necessary
0000BAAA: E8 A0 5A 00 00                                        	call	address_16bit_prefix
0000BAAF: C6 05 A3 A2 01 00 A3                                  	mov	[base_code],0A3h
0000BAB6: E9 2D FF FF FF                                        	jmp	store_mov_address16
                                                                      mov_mem_address64_ax:
0000BABB: E8 04 54 00 00                                        	call	store_segment_prefix_if_necessary
0000BAC0: C6 05 A3 A2 01 00 A3                                  	mov	[base_code],0A3h
0000BAC7: EB 84                                                 	jmp	store_mov_address64
                                                                      mov_mem_sreg:
0000BAC9: 2C 31                                                 	sub	al,31h
0000BACB: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000BAD0: 59 5B 5A                                              	pop	ecx ebx edx
0000BAD3: 8A 25 98 A2 01 00                                     	mov	ah,[operand_size]
0000BAD9: 08 E4                                                 	or	ah,ah
0000BADB: 74 09                                                 	jz	mov_mem_sreg_store
0000BADD: 80 FC 02                                              	cmp	ah,2
0000BAE0: 0F 85 58 4E FF FF                                     	jne	invalid_operand_size
                                                                      mov_mem_sreg_store:
0000BAE6: C6 05 A3 A2 01 00 8C                                  	mov	[base_code],8Ch
0000BAED: E9 28 FA FF FF                                        	jmp	instruction_ready
                                                                      mov_mem_imm:
0000BAF2: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000BAF7: 3C 01                                                 	cmp	al,1
0000BAF9: 72 3C                                                 	jb	mov_mem_imm_nosize
0000BAFB: 74 3F                                                 	je	mov_mem_imm_8bit
0000BAFD: 3C 02                                                 	cmp	al,2
0000BAFF: 74 60                                                 	je	mov_mem_imm_16bit
0000BB01: 3C 04                                                 	cmp	al,4
0000BB03: 0F 84 83 00 00 00                                     	je	mov_mem_imm_32bit
0000BB09: 3C 08                                                 	cmp	al,8
0000BB0B: 0F 85 2D 4E FF FF                                     	jne	invalid_operand_size
                                                                      mov_mem_imm_64bit:
0000BB11: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000BB18: 0F 85 5C 4E FF FF                                     	jne	long_immediate_not_encodable
0000BB1E: E8 7B 53 00 00                                        	call	operand_64bit
0000BB23: E8 34 FB FF FF                                        	call	get_simm32
0000BB28: 80 3D B4 A2 01 00 04                                  	cmp	[value_type],4
0000BB2F: 0F 83 45 4E FF FF                                     	jae	long_immediate_not_encodable
0000BB35: EB 5F                                                 	jmp	mov_mem_imm_32bit_store
                                                                      mov_mem_imm_nosize:
0000BB37: E8 28 FD FF FF                                        	call	recoverable_unknown_size
                                                                      mov_mem_imm_8bit:
0000BB3C: E8 6C B7 FF FF                                        	call	get_byte_value
0000BB41: A2 F4 A1 01 00                                        	mov	byte [value],al
0000BB46: C6 05 A6 A2 01 00 00                                  	mov	[postbyte_register],0
0000BB4D: C6 05 A3 A2 01 00 C6                                  	mov	[base_code],0C6h
0000BB54: 59 5B 5A                                              	pop	ecx ebx edx
0000BB57: E8 0D 5A 00 00                                        	call	store_instruction_with_imm8
0000BB5C: E9 0F 94 FF FF                                        	jmp	instruction_assembled
                                                                      mov_mem_imm_16bit:
0000BB61: E8 16 53 00 00                                        	call	operand_16bit
0000BB66: E8 CD B7 FF FF                                        	call	get_word_value
0000BB6B: 66 A3 F4 A1 01 00                                     	mov	word [value],ax
0000BB71: C6 05 A6 A2 01 00 00                                  	mov	[postbyte_register],0
0000BB78: C6 05 A3 A2 01 00 C7                                  	mov	[base_code],0C7h
0000BB7F: 59 5B 5A                                              	pop	ecx ebx edx
0000BB82: E8 F5 59 00 00                                        	call	store_instruction_with_imm16
0000BB87: E9 E4 93 FF FF                                        	jmp	instruction_assembled
                                                                      mov_mem_imm_32bit:
0000BB8C: E8 FC 52 00 00                                        	call	operand_32bit
0000BB91: E8 EA B7 FF FF                                        	call	get_dword_value
                                                                      mov_mem_imm_32bit_store:
0000BB96: A3 F4 A1 01 00                                        	mov	dword [value],eax
0000BB9B: C6 05 A6 A2 01 00 00                                  	mov	[postbyte_register],0
0000BBA2: C6 05 A3 A2 01 00 C7                                  	mov	[base_code],0C7h
0000BBA9: 59 5B 5A                                              	pop	ecx ebx edx
0000BBAC: E8 E5 59 00 00                                        	call	store_instruction_with_imm32
0000BBB1: E9 BA 93 FF FF                                        	jmp	instruction_assembled
                                                                      mov_reg:
0000BBB6: AC                                                    	lods	byte [esi]
0000BBB7: 88 C4                                                 	mov	ah,al
0000BBB9: 80 EC 10                                              	sub	ah,10h
0000BBBC: 20 C4                                                 	and	ah,al
0000BBBE: F6 C4 F0                                              	test	ah,0F0h
0000BBC1: 0F 85 52 03 00 00                                     	jnz	mov_sreg
0000BBC7: E8 B7 50 00 00                                        	call	convert_register
0000BBCC: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000BBD1: AC                                                    	lods	byte [esi]
0000BBD2: 3C 2C                                                 	cmp	al,','
0000BBD4: 0F 85 5A 4D FF FF                                     	jne	invalid_operand
0000BBDA: AC                                                    	lods	byte [esi]
0000BBDB: E8 4A 51 00 00                                        	call	get_size_operator
0000BBE0: 3C 5B                                                 	cmp	al,'['
0000BBE2: 0F 84 18 01 00 00                                     	je	mov_reg_mem
0000BBE8: 3C 28                                                 	cmp	al,'('
0000BBEA: 0F 84 34 02 00 00                                     	je	mov_reg_imm
0000BBF0: 3C 14                                                 	cmp	al,14h
0000BBF2: 0F 84 9A 00 00 00                                     	je	mov_reg_creg
0000BBF8: 3C 10                                                 	cmp	al,10h
0000BBFA: 0F 85 34 4D FF FF                                     	jne	invalid_operand
                                                                      mov_reg_reg:
0000BC00: AC                                                    	lods	byte [esi]
0000BC01: 88 C4                                                 	mov	ah,al
0000BC03: 80 EC 10                                              	sub	ah,10h
0000BC06: 20 C4                                                 	and	ah,al
0000BC08: F6 C4 F0                                              	test	ah,0F0h
0000BC0B: 75 26                                                 	jnz	mov_reg_sreg
0000BC0D: E8 71 50 00 00                                        	call	convert_register
0000BC12: 8A 1D A6 A2 01 00                                     	mov	bl,[postbyte_register]
0000BC18: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000BC1D: 88 E0                                                 	mov	al,ah
0000BC1F: 3C 01                                                 	cmp	al,1
0000BC21: 74 0B                                                 	je	mov_reg_reg_8bit
0000BC23: E8 8B 52 00 00                                        	call	operand_autodetect
0000BC28: FE 05 A3 A2 01 00                                     	inc	[base_code]
                                                                      mov_reg_reg_8bit:
0000BC2E: E9 C2 FA FF FF                                        	jmp	nomem_instruction_ready
                                                                      mov_reg_sreg:
0000BC33: 8A 1D A6 A2 01 00                                     	mov	bl,[postbyte_register]
0000BC39: 88 C4                                                 	mov	ah,al
0000BC3B: 24 0F                                                 	and	al,1111b
0000BC3D: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000BC42: C0 EC 04                                              	shr	ah,4
0000BC45: 80 FC 03                                              	cmp	ah,3
0000BC48: 0F 85 E6 4C FF FF                                     	jne	invalid_operand
0000BC4E: FE 0D A6 A2 01 00                                     	dec	[postbyte_register]
0000BC54: 80 3D 98 A2 01 00 08                                  	cmp	[operand_size],8
0000BC5B: 74 1D                                                 	je	mov_reg_sreg64
0000BC5D: 80 3D 98 A2 01 00 04                                  	cmp	[operand_size],4
0000BC64: 74 1B                                                 	je	mov_reg_sreg32
0000BC66: 80 3D 98 A2 01 00 02                                  	cmp	[operand_size],2
0000BC6D: 0F 85 CB 4C FF FF                                     	jne	invalid_operand_size
0000BC73: E8 04 52 00 00                                        	call	operand_16bit
0000BC78: EB 0C                                                 	jmp	mov_reg_sreg_store
                                                                      mov_reg_sreg64:
0000BC7A: E8 1F 52 00 00                                        	call	operand_64bit
0000BC7F: EB 05                                                 	jmp	mov_reg_sreg_store
                                                                      mov_reg_sreg32:
0000BC81: E8 07 52 00 00                                        	call	operand_32bit
                                                                      mov_reg_sreg_store:
0000BC86: C6 05 A3 A2 01 00 8C                                  	mov	[base_code],8Ch
0000BC8D: E9 63 FA FF FF                                        	jmp	nomem_instruction_ready
                                                                      mov_reg_creg:
0000BC92: AC                                                    	lods	byte [esi]
0000BC93: 88 C3                                                 	mov	bl,al
0000BC95: C0 E8 04                                              	shr	al,4
0000BC98: 3C 04                                                 	cmp	al,4
0000BC9A: 0F 87 94 4C FF FF                                     	ja	invalid_operand
0000BCA0: 04 20                                                 	add	al,20h
0000BCA2: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000BCA7: 80 E3 0F                                              	and	bl,1111b
0000BCAA: 86 1D A6 A2 01 00                                     	xchg	bl,[postbyte_register]
0000BCB0: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000BCB7: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000BCBE: 74 2E                                                 	je	mov_reg_creg_64bit
0000BCC0: 80 3D 98 A2 01 00 04                                  	cmp	[operand_size],4
0000BCC7: 0F 85 71 4C FF FF                                     	jne	invalid_operand_size
0000BCCD: 80 3D A6 A2 01 00 08                                  	cmp	[postbyte_register],8
0000BCD4: 75 13                                                 	jne	mov_reg_creg_store
0000BCD6: 80 3D A4 A2 01 00 20                                  	cmp	[extended_code],20h
0000BCDD: 75 0A                                                 	jne	mov_reg_creg_store
0000BCDF: B0 F0                                                 	mov	al,0F0h
0000BCE1: AA                                                    	stos	byte [edi]
0000BCE2: C6 05 A6 A2 01 00 00                                  	mov	[postbyte_register],0
                                                                      mov_reg_creg_store:
0000BCE9: E9 07 FA FF FF                                        	jmp	nomem_instruction_ready
                                                                      mov_reg_creg_64bit:
0000BCEE: 80 3D 98 A2 01 00 08                                  	cmp	[operand_size],8
0000BCF5: 0F 85 43 4C FF FF                                     	jne	invalid_operand_size
0000BCFB: E9 F5 F9 FF FF                                        	jmp	nomem_instruction_ready
                                                                      mov_reg_mem:
0000BD00: 80 05 A3 A2 01 00 02                                  	add	[base_code],2
0000BD07: E8 7A 50 00 00                                        	call	get_address
0000BD0C: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000BD11: 3C 01                                                 	cmp	al,1
0000BD13: 74 1F                                                 	je	mov_reg_mem_8bit
0000BD15: FE 05 A3 A2 01 00                                     	inc	[base_code]
0000BD1B: E8 93 51 00 00                                        	call	operand_autodetect
0000BD20: A0 A6 A2 01 00                                        	mov	al,[postbyte_register]
0000BD25: 08 D8                                                 	or	al,bl
0000BD27: 08 F8                                                 	or	al,bh
0000BD29: 0F 84 85 00 00 00                                     	jz	mov_ax_mem
0000BD2F: E9 E6 F7 FF FF                                        	jmp	instruction_ready
                                                                      mov_reg_mem_8bit:
0000BD34: A0 A6 A2 01 00                                        	mov	al,[postbyte_register]
0000BD39: 08 D8                                                 	or	al,bl
0000BD3B: 08 F8                                                 	or	al,bh
0000BD3D: 74 05                                                 	jz	mov_al_mem
0000BD3F: E9 D6 F7 FF FF                                        	jmp	instruction_ready
                                                                      mov_al_mem:
0000BD44: F6 C5 22                                              	test	ch,22h
0000BD47: 75 44                                                 	jnz	mov_al_mem_address16
0000BD49: F6 C5 44                                              	test	ch,44h
0000BD4C: 75 29                                                 	jnz	mov_al_mem_address32
0000BD4E: F6 C5 77                                              	test	ch,not 88h
0000BD51: 0F 85 05 4C FF FF                                     	jnz	invalid_address_size
0000BD57: E8 B3 FC FF FF                                        	call	check_mov_address64
0000BD5C: 3C 00                                                 	cmp	al,0
0000BD5E: 7F 43                                                 	jg	mov_al_mem_address64
0000BD60: 0F 8C B4 F7 FF FF                                     	jl	instruction_ready
0000BD66: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000BD6D: 75 08                                                 	jne	mov_al_mem_address32
0000BD6F: 81 FA 00 00 01 00                                     	cmp	edx,10000h
0000BD75: 72 16                                                 	jb	mov_al_mem_address16
                                                                      mov_al_mem_address32:
0000BD77: E8 48 51 00 00                                        	call	store_segment_prefix_if_necessary
0000BD7C: E8 DB 57 00 00                                        	call	address_32bit_prefix
0000BD81: C6 05 A3 A2 01 00 A0                                  	mov	[base_code],0A0h
0000BD88: E9 3B FC FF FF                                        	jmp	store_mov_address32
                                                                      mov_al_mem_address16:
0000BD8D: E8 32 51 00 00                                        	call	store_segment_prefix_if_necessary
0000BD92: E8 B8 57 00 00                                        	call	address_16bit_prefix
0000BD97: C6 05 A3 A2 01 00 A0                                  	mov	[base_code],0A0h
0000BD9E: E9 45 FC FF FF                                        	jmp	store_mov_address16
                                                                      mov_al_mem_address64:
0000BDA3: E8 1C 51 00 00                                        	call	store_segment_prefix_if_necessary
0000BDA8: C6 05 A3 A2 01 00 A0                                  	mov	[base_code],0A0h
0000BDAF: E9 99 FC FF FF                                        	jmp	store_mov_address64
                                                                      mov_ax_mem:
0000BDB4: F6 C5 22                                              	test	ch,22h
0000BDB7: 75 44                                                 	jnz	mov_ax_mem_address16
0000BDB9: F6 C5 44                                              	test	ch,44h
0000BDBC: 75 29                                                 	jnz	mov_ax_mem_address32
0000BDBE: F6 C5 77                                              	test	ch,not 88h
0000BDC1: 0F 85 95 4B FF FF                                     	jnz	invalid_address_size
0000BDC7: E8 43 FC FF FF                                        	call	check_mov_address64
0000BDCC: 3C 00                                                 	cmp	al,0
0000BDCE: 7F 43                                                 	jg	mov_ax_mem_address64
0000BDD0: 0F 8C 44 F7 FF FF                                     	jl	instruction_ready
0000BDD6: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000BDDD: 75 08                                                 	jne	mov_ax_mem_address32
0000BDDF: 81 FA 00 00 01 00                                     	cmp	edx,10000h
0000BDE5: 72 16                                                 	jb	mov_ax_mem_address16
                                                                      mov_ax_mem_address32:
0000BDE7: E8 D8 50 00 00                                        	call	store_segment_prefix_if_necessary
0000BDEC: E8 6B 57 00 00                                        	call	address_32bit_prefix
0000BDF1: C6 05 A3 A2 01 00 A1                                  	mov	[base_code],0A1h
0000BDF8: E9 CB FB FF FF                                        	jmp	store_mov_address32
                                                                      mov_ax_mem_address16:
0000BDFD: E8 C2 50 00 00                                        	call	store_segment_prefix_if_necessary
0000BE02: E8 48 57 00 00                                        	call	address_16bit_prefix
0000BE07: C6 05 A3 A2 01 00 A1                                  	mov	[base_code],0A1h
0000BE0E: E9 D5 FB FF FF                                        	jmp	store_mov_address16
                                                                      mov_ax_mem_address64:
0000BE13: E8 AC 50 00 00                                        	call	store_segment_prefix_if_necessary
0000BE18: C6 05 A3 A2 01 00 A1                                  	mov	[base_code],0A1h
0000BE1F: E9 29 FC FF FF                                        	jmp	store_mov_address64
                                                                      mov_reg_imm:
0000BE24: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000BE29: 3C 01                                                 	cmp	al,1
0000BE2B: 74 54                                                 	je	mov_reg_imm_8bit
0000BE2D: 3C 02                                                 	cmp	al,2
0000BE2F: 74 66                                                 	je	mov_reg_imm_16bit
0000BE31: 3C 04                                                 	cmp	al,4
0000BE33: 0F 84 81 00 00 00                                     	je	mov_reg_imm_32bit
0000BE39: 3C 08                                                 	cmp	al,8
0000BE3B: 0F 85 FD 4A FF FF                                     	jne	invalid_operand_size
                                                                      mov_reg_imm_64bit:
0000BE41: E8 58 50 00 00                                        	call	operand_64bit
0000BE46: E8 D0 B5 FF FF                                        	call	get_qword_value
0000BE4B: 89 D1                                                 	mov	ecx,edx
0000BE4D: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000BE54: 75 12                                                 	jne	mov_reg_imm_64bit_store
0000BE56: 80 3D B4 A2 01 00 04                                  	cmp	[value_type],4
0000BE5D: 73 09                                                 	jae	mov_reg_imm_64bit_store
0000BE5F: 99                                                    	cdq
0000BE60: 39 D1                                                 	cmp	ecx,edx
0000BE62: 0F 84 94 00 00 00                                     	je	mov_reg_64bit_imm_32bit
                                                                      mov_reg_imm_64bit_store:
0000BE68: 50 51                                                 	push	eax ecx
0000BE6A: B0 B8                                                 	mov	al,0B8h
0000BE6C: E8 69 00 00 00                                        	call	store_mov_reg_imm_code
0000BE71: 5A 58                                                 	pop	edx eax
0000BE73: E8 6A C5 FF FF                                        	call	mark_relocation
0000BE78: AB                                                    	stos	dword [edi]
0000BE79: 89 D0                                                 	mov	eax,edx
0000BE7B: AB                                                    	stos	dword [edi]
0000BE7C: E9 EF 90 FF FF                                        	jmp	instruction_assembled
                                                                      mov_reg_imm_8bit:
0000BE81: E8 27 B4 FF FF                                        	call	get_byte_value
0000BE86: 88 C2                                                 	mov	dl,al
0000BE88: B0 B0                                                 	mov	al,0B0h
0000BE8A: E8 4B 00 00 00                                        	call	store_mov_reg_imm_code
0000BE8F: 88 D0                                                 	mov	al,dl
0000BE91: AA                                                    	stos	byte [edi]
0000BE92: E9 D9 90 FF FF                                        	jmp	instruction_assembled
                                                                      mov_reg_imm_16bit:
0000BE97: E8 9C B4 FF FF                                        	call	get_word_value
0000BE9C: 66 89 C2                                              	mov	dx,ax
0000BE9F: E8 D8 4F 00 00                                        	call	operand_16bit
0000BEA4: B0 B8                                                 	mov	al,0B8h
0000BEA6: E8 2F 00 00 00                                        	call	store_mov_reg_imm_code
0000BEAB: 66 89 D0                                              	mov	ax,dx
0000BEAE: E8 2F C5 FF FF                                        	call	mark_relocation
0000BEB3: 66 AB                                                 	stos	word [edi]
0000BEB5: E9 B6 90 FF FF                                        	jmp	instruction_assembled
                                                                      mov_reg_imm_32bit:
0000BEBA: E8 CE 4F 00 00                                        	call	operand_32bit
0000BEBF: E8 BC B4 FF FF                                        	call	get_dword_value
0000BEC4: 89 C2                                                 	mov	edx,eax
0000BEC6: B0 B8                                                 	mov	al,0B8h
0000BEC8: E8 0D 00 00 00                                        	call	store_mov_reg_imm_code
                                                                      mov_store_imm_32bit:
0000BECD: 89 D0                                                 	mov	eax,edx
0000BECF: E8 0E C5 FF FF                                        	call	mark_relocation
0000BED4: AB                                                    	stos	dword [edi]
0000BED5: E9 96 90 FF FF                                        	jmp	instruction_assembled
                                                                      store_mov_reg_imm_code:
0000BEDA: 8A 25 A6 A2 01 00                                     	mov	ah,[postbyte_register]
0000BEE0: F6 C4 08                                              	test	ah,1000b
0000BEE3: 74 07                                                 	jz	mov_reg_imm_prefix_ok
0000BEE5: 80 0D 9B A2 01 00 41                                  	or	[rex_prefix],41h
                                                                      mov_reg_imm_prefix_ok:
0000BEEC: 80 E4 07                                              	and	ah,111b
0000BEEF: 00 E0                                                 	add	al,ah
0000BEF1: A2 A3 A2 01 00                                        	mov	[base_code],al
0000BEF6: E8 38 50 00 00                                        	call	store_classic_instruction_code
0000BEFB: C3                                                    	ret
                                                                      mov_reg_64bit_imm_32bit:
0000BEFC: 89 C2                                                 	mov	edx,eax
0000BEFE: 8A 1D A6 A2 01 00                                     	mov	bl,[postbyte_register]
0000BF04: C6 05 A6 A2 01 00 00                                  	mov	[postbyte_register],0
0000BF0B: C6 05 A3 A2 01 00 C7                                  	mov	[base_code],0C7h
0000BF12: E8 6F 50 00 00                                        	call	store_nomem_instruction
0000BF17: EB B4                                                 	jmp	mov_store_imm_32bit
                                                                      mov_sreg:
0000BF19: 88 C4                                                 	mov	ah,al
0000BF1B: 24 0F                                                 	and	al,1111b
0000BF1D: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000BF22: C0 EC 04                                              	shr	ah,4
0000BF25: 80 FC 03                                              	cmp	ah,3
0000BF28: 0F 85 06 4A FF FF                                     	jne	invalid_operand
0000BF2E: 3C 02                                                 	cmp	al,2
0000BF30: 0F 84 F4 49 FF FF                                     	je	illegal_instruction
0000BF36: FE 0D A6 A2 01 00                                     	dec	[postbyte_register]
0000BF3C: AC                                                    	lods	byte [esi]
0000BF3D: 3C 2C                                                 	cmp	al,','
0000BF3F: 0F 85 EF 49 FF FF                                     	jne	invalid_operand
0000BF45: AC                                                    	lods	byte [esi]
0000BF46: E8 DF 4D 00 00                                        	call	get_size_operator
0000BF4B: 3C 5B                                                 	cmp	al,'['
0000BF4D: 74 29                                                 	je	mov_sreg_mem
0000BF4F: 3C 10                                                 	cmp	al,10h
0000BF51: 0F 85 DD 49 FF FF                                     	jne	invalid_operand
                                                                      mov_sreg_reg:
0000BF57: AC                                                    	lods	byte [esi]
0000BF58: E8 26 4D 00 00                                        	call	convert_register
0000BF5D: 08 E4                                                 	or	ah,ah
0000BF5F: 74 0B                                                 	jz	mov_sreg_reg_size_ok
0000BF61: 80 FC 02                                              	cmp	ah,2
0000BF64: 0F 85 D4 49 FF FF                                     	jne	invalid_operand_size
0000BF6A: 88 C3                                                 	mov	bl,al
                                                                      mov_sreg_reg_size_ok:
0000BF6C: C6 05 A3 A2 01 00 8E                                  	mov	[base_code],8Eh
0000BF73: E9 7D F7 FF FF                                        	jmp	nomem_instruction_ready
                                                                      mov_sreg_mem:
0000BF78: E8 09 4E 00 00                                        	call	get_address
0000BF7D: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000BF82: 08 C0                                                 	or	al,al
0000BF84: 74 08                                                 	jz	mov_sreg_mem_size_ok
0000BF86: 3C 02                                                 	cmp	al,2
0000BF88: 0F 85 B0 49 FF FF                                     	jne	invalid_operand_size
                                                                      mov_sreg_mem_size_ok:
0000BF8E: C6 05 A3 A2 01 00 8E                                  	mov	[base_code],8Eh
0000BF95: E9 80 F5 FF FF                                        	jmp	instruction_ready
                                                                      mov_creg:
0000BF9A: AC                                                    	lods	byte [esi]
0000BF9B: 88 C4                                                 	mov	ah,al
0000BF9D: C0 EC 04                                              	shr	ah,4
0000BFA0: 80 FC 04                                              	cmp	ah,4
0000BFA3: 0F 87 8B 49 FF FF                                     	ja	invalid_operand
0000BFA9: 80 C4 22                                              	add	ah,22h
0000BFAC: 88 25 A4 A2 01 00                                     	mov	[extended_code],ah
0000BFB2: 24 0F                                                 	and	al,1111b
0000BFB4: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000BFB9: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000BFC0: AC                                                    	lods	byte [esi]
0000BFC1: 3C 2C                                                 	cmp	al,','
0000BFC3: 0F 85 6B 49 FF FF                                     	jne	invalid_operand
0000BFC9: E8 A6 4C 00 00                                        	call	take_register
0000BFCE: 88 C3                                                 	mov	bl,al
0000BFD0: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000BFD7: 74 2A                                                 	je	mov_creg_64bit
0000BFD9: 80 FC 04                                              	cmp	ah,4
0000BFDC: 0F 85 5C 49 FF FF                                     	jne	invalid_operand_size
0000BFE2: 80 3D A6 A2 01 00 08                                  	cmp	[postbyte_register],8
0000BFE9: 75 13                                                 	jne	mov_creg_store
0000BFEB: 80 3D A4 A2 01 00 22                                  	cmp	[extended_code],22h
0000BFF2: 75 0A                                                 	jne	mov_creg_store
0000BFF4: B0 F0                                                 	mov	al,0F0h
0000BFF6: AA                                                    	stos	byte [edi]
0000BFF7: C6 05 A6 A2 01 00 00                                  	mov	[postbyte_register],0
                                                                      mov_creg_store:
0000BFFE: E9 F2 F6 FF FF                                        	jmp	nomem_instruction_ready
                                                                      mov_creg_64bit:
0000C003: 80 FC 08                                              	cmp	ah,8
0000C006: 74 F6                                                 	je	mov_creg_store
0000C008: E9 31 49 FF FF                                        	jmp	invalid_operand_size
                                                                test_instruction:
0000C00D: C6 05 A3 A2 01 00 84                                  	mov	[base_code],84h
0000C014: AC                                                    	lods	byte [esi]
0000C015: E8 10 4D 00 00                                        	call	get_size_operator
0000C01A: 3C 10                                                 	cmp	al,10h
0000C01C: 0F 84 13 01 00 00                                     	je	test_reg
0000C022: 3C 5B                                                 	cmp	al,'['
0000C024: 0F 85 0A 49 FF FF                                     	jne	invalid_operand
                                                                      test_mem:
0000C02A: E8 57 4D 00 00                                        	call	get_address
0000C02F: 52 53 51                                              	push	edx ebx ecx
0000C032: AC                                                    	lods	byte [esi]
0000C033: 3C 2C                                                 	cmp	al,','
0000C035: 0F 85 F9 48 FF FF                                     	jne	invalid_operand
0000C03B: AC                                                    	lods	byte [esi]
0000C03C: E8 E9 4C 00 00                                        	call	get_size_operator
0000C041: 3C 28                                                 	cmp	al,'('
0000C043: 74 2C                                                 	je	test_mem_imm
0000C045: 3C 10                                                 	cmp	al,10h
0000C047: 0F 85 E7 48 FF FF                                     	jne	invalid_operand
                                                                      test_mem_reg:
0000C04D: AC                                                    	lods	byte [esi]
0000C04E: E8 30 4C 00 00                                        	call	convert_register
0000C053: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000C058: 59 5B 5A                                              	pop	ecx ebx edx
0000C05B: 88 E0                                                 	mov	al,ah
0000C05D: 3C 01                                                 	cmp	al,1
0000C05F: 74 0B                                                 	je	test_mem_reg_8bit
0000C061: E8 4D 4E 00 00                                        	call	operand_autodetect
0000C066: FE 05 A3 A2 01 00                                     	inc	[base_code]
                                                                      test_mem_reg_8bit:
0000C06C: E9 A9 F4 FF FF                                        	jmp	instruction_ready
                                                                      test_mem_imm:
0000C071: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000C076: 3C 01                                                 	cmp	al,1
0000C078: 72 3C                                                 	jb	test_mem_imm_nosize
0000C07A: 74 3F                                                 	je	test_mem_imm_8bit
0000C07C: 3C 02                                                 	cmp	al,2
0000C07E: 74 60                                                 	je	test_mem_imm_16bit
0000C080: 3C 04                                                 	cmp	al,4
0000C082: 0F 84 83 00 00 00                                     	je	test_mem_imm_32bit
0000C088: 3C 08                                                 	cmp	al,8
0000C08A: 0F 85 AE 48 FF FF                                     	jne	invalid_operand_size
                                                                      test_mem_imm_64bit:
0000C090: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000C097: 0F 85 DD 48 FF FF                                     	jne	long_immediate_not_encodable
0000C09D: E8 FC 4D 00 00                                        	call	operand_64bit
0000C0A2: E8 B5 F5 FF FF                                        	call	get_simm32
0000C0A7: 80 3D B4 A2 01 00 04                                  	cmp	[value_type],4
0000C0AE: 0F 83 C6 48 FF FF                                     	jae	long_immediate_not_encodable
0000C0B4: EB 5F                                                 	jmp	test_mem_imm_32bit_store
                                                                      test_mem_imm_nosize:
0000C0B6: E8 A9 F7 FF FF                                        	call	recoverable_unknown_size
                                                                      test_mem_imm_8bit:
0000C0BB: E8 ED B1 FF FF                                        	call	get_byte_value
0000C0C0: A2 F4 A1 01 00                                        	mov	byte [value],al
0000C0C5: C6 05 A6 A2 01 00 00                                  	mov	[postbyte_register],0
0000C0CC: C6 05 A3 A2 01 00 F6                                  	mov	[base_code],0F6h
0000C0D3: 59 5B 5A                                              	pop	ecx ebx edx
0000C0D6: E8 8E 54 00 00                                        	call	store_instruction_with_imm8
0000C0DB: E9 90 8E FF FF                                        	jmp	instruction_assembled
                                                                      test_mem_imm_16bit:
0000C0E0: E8 97 4D 00 00                                        	call	operand_16bit
0000C0E5: E8 4E B2 FF FF                                        	call	get_word_value
0000C0EA: 66 A3 F4 A1 01 00                                     	mov	word [value],ax
0000C0F0: C6 05 A6 A2 01 00 00                                  	mov	[postbyte_register],0
0000C0F7: C6 05 A3 A2 01 00 F7                                  	mov	[base_code],0F7h
0000C0FE: 59 5B 5A                                              	pop	ecx ebx edx
0000C101: E8 76 54 00 00                                        	call	store_instruction_with_imm16
0000C106: E9 65 8E FF FF                                        	jmp	instruction_assembled
                                                                      test_mem_imm_32bit:
0000C10B: E8 7D 4D 00 00                                        	call	operand_32bit
0000C110: E8 6B B2 FF FF                                        	call	get_dword_value
                                                                      test_mem_imm_32bit_store:
0000C115: A3 F4 A1 01 00                                        	mov	dword [value],eax
0000C11A: C6 05 A6 A2 01 00 00                                  	mov	[postbyte_register],0
0000C121: C6 05 A3 A2 01 00 F7                                  	mov	[base_code],0F7h
0000C128: 59 5B 5A                                              	pop	ecx ebx edx
0000C12B: E8 66 54 00 00                                        	call	store_instruction_with_imm32
0000C130: E9 3B 8E FF FF                                        	jmp	instruction_assembled
                                                                      test_reg:
0000C135: AC                                                    	lods	byte [esi]
0000C136: E8 48 4B 00 00                                        	call	convert_register
0000C13B: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000C140: AC                                                    	lods	byte [esi]
0000C141: 3C 2C                                                 	cmp	al,','
0000C143: 0F 85 EB 47 FF FF                                     	jne	invalid_operand
0000C149: AC                                                    	lods	byte [esi]
0000C14A: E8 DB 4B 00 00                                        	call	get_size_operator
0000C14F: 3C 5B                                                 	cmp	al,'['
0000C151: 0F 84 52 01 00 00                                     	je	test_reg_mem
0000C157: 3C 28                                                 	cmp	al,'('
0000C159: 74 2F                                                 	je	test_reg_imm
0000C15B: 3C 10                                                 	cmp	al,10h
0000C15D: 0F 85 D1 47 FF FF                                     	jne	invalid_operand
                                                                      test_reg_reg:
0000C163: AC                                                    	lods	byte [esi]
0000C164: E8 1A 4B 00 00                                        	call	convert_register
0000C169: 8A 1D A6 A2 01 00                                     	mov	bl,[postbyte_register]
0000C16F: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000C174: 88 E0                                                 	mov	al,ah
0000C176: 3C 01                                                 	cmp	al,1
0000C178: 74 0B                                                 	je	test_reg_reg_8bit
0000C17A: E8 34 4D 00 00                                        	call	operand_autodetect
0000C17F: FE 05 A3 A2 01 00                                     	inc	[base_code]
                                                                      test_reg_reg_8bit:
0000C185: E9 6B F5 FF FF                                        	jmp	nomem_instruction_ready
                                                                      test_reg_imm:
0000C18A: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000C18F: 3C 01                                                 	cmp	al,1
0000C191: 74 3D                                                 	je	test_reg_imm_8bit
0000C193: 3C 02                                                 	cmp	al,2
0000C195: 74 79                                                 	je	test_reg_imm_16bit
0000C197: 3C 04                                                 	cmp	al,4
0000C199: 0F 84 C0 00 00 00                                     	je	test_reg_imm_32bit
0000C19F: 3C 08                                                 	cmp	al,8
0000C1A1: 0F 85 97 47 FF FF                                     	jne	invalid_operand_size
                                                                      test_reg_imm_64bit:
0000C1A7: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000C1AE: 0F 85 C6 47 FF FF                                     	jne	long_immediate_not_encodable
0000C1B4: E8 E5 4C 00 00                                        	call	operand_64bit
0000C1B9: E8 9E F4 FF FF                                        	call	get_simm32
0000C1BE: 80 3D B4 A2 01 00 04                                  	cmp	[value_type],4
0000C1C5: 0F 83 AF 47 FF FF                                     	jae	long_immediate_not_encodable
0000C1CB: E9 99 00 00 00                                        	jmp	test_reg_imm_32bit_store
                                                                      test_reg_imm_8bit:
0000C1D0: E8 D8 B0 FF FF                                        	call	get_byte_value
0000C1D5: 88 C2                                                 	mov	dl,al
0000C1D7: 8A 1D A6 A2 01 00                                     	mov	bl,[postbyte_register]
0000C1DD: C6 05 A6 A2 01 00 00                                  	mov	[postbyte_register],0
0000C1E4: C6 05 A3 A2 01 00 F6                                  	mov	[base_code],0F6h
0000C1EB: 08 DB                                                 	or	bl,bl
0000C1ED: 74 0D                                                 	jz	test_al_imm
0000C1EF: E8 92 4D 00 00                                        	call	store_nomem_instruction
0000C1F4: 88 D0                                                 	mov	al,dl
0000C1F6: AA                                                    	stos	byte [edi]
0000C1F7: E9 74 8D FF FF                                        	jmp	instruction_assembled
                                                                      test_al_imm:
0000C1FC: C6 05 A3 A2 01 00 A8                                  	mov	[base_code],0A8h
0000C203: E8 2B 4D 00 00                                        	call	store_classic_instruction_code
0000C208: 88 D0                                                 	mov	al,dl
0000C20A: AA                                                    	stos	byte [edi]
0000C20B: E9 60 8D FF FF                                        	jmp	instruction_assembled
                                                                      test_reg_imm_16bit:
0000C210: E8 67 4C 00 00                                        	call	operand_16bit
0000C215: E8 1E B1 FF FF                                        	call	get_word_value
0000C21A: 66 89 C2                                              	mov	dx,ax
0000C21D: 8A 1D A6 A2 01 00                                     	mov	bl,[postbyte_register]
0000C223: C6 05 A6 A2 01 00 00                                  	mov	[postbyte_register],0
0000C22A: C6 05 A3 A2 01 00 F7                                  	mov	[base_code],0F7h
0000C231: 08 DB                                                 	or	bl,bl
0000C233: 74 14                                                 	jz	test_ax_imm
0000C235: E8 4C 4D 00 00                                        	call	store_nomem_instruction
0000C23A: 66 89 D0                                              	mov	ax,dx
0000C23D: E8 A0 C1 FF FF                                        	call	mark_relocation
0000C242: 66 AB                                                 	stos	word [edi]
0000C244: E9 27 8D FF FF                                        	jmp	instruction_assembled
                                                                      test_ax_imm:
0000C249: C6 05 A3 A2 01 00 A9                                  	mov	[base_code],0A9h
0000C250: E8 DE 4C 00 00                                        	call	store_classic_instruction_code
0000C255: 66 89 D0                                              	mov	ax,dx
0000C258: 66 AB                                                 	stos	word [edi]
0000C25A: E9 11 8D FF FF                                        	jmp	instruction_assembled
                                                                      test_reg_imm_32bit:
0000C25F: E8 29 4C 00 00                                        	call	operand_32bit
0000C264: E8 17 B1 FF FF                                        	call	get_dword_value
                                                                      test_reg_imm_32bit_store:
0000C269: 89 C2                                                 	mov	edx,eax
0000C26B: 8A 1D A6 A2 01 00                                     	mov	bl,[postbyte_register]
0000C271: C6 05 A6 A2 01 00 00                                  	mov	[postbyte_register],0
0000C278: C6 05 A3 A2 01 00 F7                                  	mov	[base_code],0F7h
0000C27F: 08 DB                                                 	or	bl,bl
0000C281: 74 12                                                 	jz	test_eax_imm
0000C283: E8 FE 4C 00 00                                        	call	store_nomem_instruction
0000C288: 89 D0                                                 	mov	eax,edx
0000C28A: E8 53 C1 FF FF                                        	call	mark_relocation
0000C28F: AB                                                    	stos	dword [edi]
0000C290: E9 DB 8C FF FF                                        	jmp	instruction_assembled
                                                                      test_eax_imm:
0000C295: C6 05 A3 A2 01 00 A9                                  	mov	[base_code],0A9h
0000C29C: E8 92 4C 00 00                                        	call	store_classic_instruction_code
0000C2A1: 89 D0                                                 	mov	eax,edx
0000C2A3: AB                                                    	stos	dword [edi]
0000C2A4: E9 C7 8C FF FF                                        	jmp	instruction_assembled
                                                                      test_reg_mem:
0000C2A9: E8 D8 4A 00 00                                        	call	get_address
0000C2AE: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000C2B3: 3C 01                                                 	cmp	al,1
0000C2B5: 74 0B                                                 	je	test_reg_mem_8bit
0000C2B7: E8 F7 4B 00 00                                        	call	operand_autodetect
0000C2BC: FE 05 A3 A2 01 00                                     	inc	[base_code]
                                                                      test_reg_mem_8bit:
0000C2C2: E9 53 F2 FF FF                                        	jmp	instruction_ready
                                                                xchg_instruction:
0000C2C7: C6 05 A3 A2 01 00 86                                  	mov	[base_code],86h
0000C2CE: AC                                                    	lods	byte [esi]
0000C2CF: E8 56 4A 00 00                                        	call	get_size_operator
0000C2D4: 3C 10                                                 	cmp	al,10h
0000C2D6: 74 2C                                                 	je	xchg_reg
0000C2D8: 3C 5B                                                 	cmp	al,'['
0000C2DA: 0F 85 54 46 FF FF                                     	jne	invalid_operand
                                                                      xchg_mem:
0000C2E0: E8 A1 4A 00 00                                        	call	get_address
0000C2E5: 52 53 51                                              	push	edx ebx ecx
0000C2E8: AC                                                    	lods	byte [esi]
0000C2E9: 3C 2C                                                 	cmp	al,','
0000C2EB: 0F 85 43 46 FF FF                                     	jne	invalid_operand
0000C2F1: AC                                                    	lods	byte [esi]
0000C2F2: E8 33 4A 00 00                                        	call	get_size_operator
0000C2F7: 3C 10                                                 	cmp	al,10h
0000C2F9: 0F 84 4E FD FF FF                                     	je	test_mem_reg
0000C2FF: E9 30 46 FF FF                                        	jmp	invalid_operand
                                                                      xchg_reg:
0000C304: AC                                                    	lods	byte [esi]
0000C305: E8 79 49 00 00                                        	call	convert_register
0000C30A: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000C30F: AC                                                    	lods	byte [esi]
0000C310: 3C 2C                                                 	cmp	al,','
0000C312: 0F 85 1C 46 FF FF                                     	jne	invalid_operand
0000C318: AC                                                    	lods	byte [esi]
0000C319: E8 0C 4A 00 00                                        	call	get_size_operator
0000C31E: 3C 5B                                                 	cmp	al,'['
0000C320: 74 87                                                 	je	test_reg_mem
0000C322: 3C 10                                                 	cmp	al,10h
0000C324: 0F 85 0A 46 FF FF                                     	jne	invalid_operand
                                                                      xchg_reg_reg:
0000C32A: AC                                                    	lods	byte [esi]
0000C32B: E8 53 49 00 00                                        	call	convert_register
0000C330: 88 C3                                                 	mov	bl,al
0000C332: 88 E0                                                 	mov	al,ah
0000C334: 3C 01                                                 	cmp	al,1
0000C336: 74 52                                                 	je	xchg_reg_reg_8bit
0000C338: E8 76 4B 00 00                                        	call	operand_autodetect
0000C33D: 80 3D A6 A2 01 00 00                                  	cmp	[postbyte_register],0
0000C344: 74 0A                                                 	je	xchg_ax_reg
0000C346: 08 DB                                                 	or	bl,bl
0000C348: 75 3A                                                 	jnz	xchg_reg_reg_store
0000C34A: 8A 1D A6 A2 01 00                                     	mov	bl,[postbyte_register]
                                                                      xchg_ax_reg:
0000C350: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C357: 75 09                                                 	jne	xchg_ax_reg_ok
0000C359: 80 FC 04                                              	cmp	ah,4
0000C35C: 75 04                                                 	jne	xchg_ax_reg_ok
0000C35E: 08 DB                                                 	or	bl,bl
0000C360: 74 22                                                 	jz	xchg_reg_reg_store
                                                                      xchg_ax_reg_ok:
0000C362: F6 C3 08                                              	test	bl,1000b
0000C365: 74 0A                                                 	jz	xchg_ax_reg_store
0000C367: 80 0D 9B A2 01 00 41                                  	or	[rex_prefix],41h
0000C36E: 80 E3 07                                              	and	bl,111b
                                                                      xchg_ax_reg_store:
0000C371: 80 C3 90                                              	add	bl,90h
0000C374: 88 1D A3 A2 01 00                                     	mov	[base_code],bl
0000C37A: E8 B4 4B 00 00                                        	call	store_classic_instruction_code
0000C37F: E9 EC 8B FF FF                                        	jmp	instruction_assembled
                                                                      xchg_reg_reg_store:
0000C384: FE 05 A3 A2 01 00                                     	inc	[base_code]
                                                                      xchg_reg_reg_8bit:
0000C38A: E9 66 F3 FF FF                                        	jmp	nomem_instruction_ready
                                                                push_instruction:
0000C38F: A2 AB A2 01 00                                        	mov	[push_size],al
                                                                      push_next:
0000C394: AC                                                    	lods	byte [esi]
0000C395: E8 90 49 00 00                                        	call	get_size_operator
0000C39A: 3C 10                                                 	cmp	al,10h
0000C39C: 0F 84 A5 00 00 00                                     	je	push_reg
0000C3A2: 3C 28                                                 	cmp	al,'('
0000C3A4: 0F 84 EB 01 00 00                                     	je	push_imm
0000C3AA: 3C 5B                                                 	cmp	al,'['
0000C3AC: 0F 85 82 45 FF FF                                     	jne	invalid_operand
                                                                      push_mem:
0000C3B2: E8 CF 49 00 00                                        	call	get_address
0000C3B7: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000C3BC: 8A 25 AB A2 01 00                                     	mov	ah,[push_size]
0000C3C2: 3C 02                                                 	cmp	al,2
0000C3C4: 74 26                                                 	je	push_mem_16bit
0000C3C6: 3C 04                                                 	cmp	al,4
0000C3C8: 74 32                                                 	je	push_mem_32bit
0000C3CA: 3C 08                                                 	cmp	al,8
0000C3CC: 74 4B                                                 	je	push_mem_64bit
0000C3CE: 08 C0                                                 	or	al,al
0000C3D0: 0F 85 68 45 FF FF                                     	jnz	invalid_operand_size
0000C3D6: 80 FC 02                                              	cmp	ah,2
0000C3D9: 74 11                                                 	je	push_mem_16bit
0000C3DB: 80 FC 04                                              	cmp	ah,4
0000C3DE: 74 1C                                                 	je	push_mem_32bit
0000C3E0: 80 FC 08                                              	cmp	ah,8
0000C3E3: 74 34                                                 	je	push_mem_64bit
0000C3E5: E8 7A F4 FF FF                                        	call	recoverable_unknown_size
0000C3EA: EB 43                                                 	jmp	push_mem_store
                                                                      push_mem_16bit:
0000C3EC: F6 C4 FD                                              	test	ah,not 2
0000C3EF: 0F 85 49 45 FF FF                                     	jnz	invalid_operand_size
0000C3F5: E8 82 4A 00 00                                        	call	operand_16bit
0000C3FA: EB 33                                                 	jmp	push_mem_store
                                                                      push_mem_32bit:
0000C3FC: F6 C4 FB                                              	test	ah,not 4
0000C3FF: 0F 85 39 45 FF FF                                     	jnz	invalid_operand_size
0000C405: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C40C: 0F 84 18 45 FF FF                                     	je	illegal_instruction
0000C412: E8 76 4A 00 00                                        	call	operand_32bit
0000C417: EB 16                                                 	jmp	push_mem_store
                                                                      push_mem_64bit:
0000C419: F6 C4 F7                                              	test	ah,not 8
0000C41C: 0F 85 1C 45 FF FF                                     	jnz	invalid_operand_size
0000C422: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C429: 0F 85 FB 44 FF FF                                     	jne	illegal_instruction
                                                                      push_mem_store:
0000C42F: C6 05 A3 A2 01 00 FF                                  	mov	[base_code],0FFh
0000C436: C6 05 A6 A2 01 00 06                                  	mov	[postbyte_register],110b
0000C43D: E8 B1 4B 00 00                                        	call	store_instruction
0000C442: E9 BE 02 00 00                                        	jmp	push_done
                                                                      push_reg:
0000C447: AC                                                    	lods	byte [esi]
0000C448: 88 C4                                                 	mov	ah,al
0000C44A: 80 EC 10                                              	sub	ah,10h
0000C44D: 20 C4                                                 	and	ah,al
0000C44F: F6 C4 F0                                              	test	ah,0F0h
0000C452: 75 7E                                                 	jnz	push_sreg
0000C454: E8 2A 48 00 00                                        	call	convert_register
0000C459: A8 08                                                 	test	al,1000b
0000C45B: 74 09                                                 	jz	push_reg_ok
0000C45D: 80 0D 9B A2 01 00 41                                  	or	[rex_prefix],41h
0000C464: 24 07                                                 	and	al,111b
                                                                      push_reg_ok:
0000C466: 04 50                                                 	add	al,50h
0000C468: A2 A3 A2 01 00                                        	mov	[base_code],al
0000C46D: 88 E0                                                 	mov	al,ah
0000C46F: 8A 25 AB A2 01 00                                     	mov	ah,[push_size]
0000C475: 3C 02                                                 	cmp	al,2
0000C477: 74 41                                                 	je	push_reg_16bit
0000C479: 3C 04                                                 	cmp	al,4
0000C47B: 74 20                                                 	je	push_reg_32bit
0000C47D: 3C 08                                                 	cmp	al,8
0000C47F: 0F 85 B9 44 FF FF                                     	jne	invalid_operand_size
                                                                      push_reg_64bit:
0000C485: F6 C4 F7                                              	test	ah,not 8
0000C488: 0F 85 B0 44 FF FF                                     	jnz	invalid_operand_size
0000C48E: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C495: 0F 85 8F 44 FF FF                                     	jne	illegal_instruction
0000C49B: EB 2B                                                 	jmp	push_reg_store
                                                                      push_reg_32bit:
0000C49D: F6 C4 FB                                              	test	ah,not 4
0000C4A0: 0F 85 98 44 FF FF                                     	jnz	invalid_operand_size
0000C4A6: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C4AD: 0F 84 77 44 FF FF                                     	je	illegal_instruction
0000C4B3: E8 D5 49 00 00                                        	call	operand_32bit
0000C4B8: EB 0E                                                 	jmp	push_reg_store
                                                                      push_reg_16bit:
0000C4BA: F6 C4 FD                                              	test	ah,not 2
0000C4BD: 0F 85 7B 44 FF FF                                     	jnz	invalid_operand_size
0000C4C3: E8 B4 49 00 00                                        	call	operand_16bit
                                                                      push_reg_store:
0000C4C8: E8 66 4A 00 00                                        	call	store_classic_instruction_code
0000C4CD: E9 33 02 00 00                                        	jmp	push_done
                                                                      push_sreg:
0000C4D2: 88 C3                                                 	mov	bl,al
0000C4D4: 8A 15 98 A2 01 00                                     	mov	dl,[operand_size]
0000C4DA: 8A 35 AB A2 01 00                                     	mov	dh,[push_size]
0000C4E0: 80 FA 02                                              	cmp	dl,2
0000C4E3: 74 23                                                 	je	push_sreg16
0000C4E5: 80 FA 04                                              	cmp	dl,4
0000C4E8: 74 2E                                                 	je	push_sreg32
0000C4EA: 80 FA 08                                              	cmp	dl,8
0000C4ED: 74 46                                                 	je	push_sreg64
0000C4EF: 08 D2                                                 	or	dl,dl
0000C4F1: 0F 85 47 44 FF FF                                     	jnz	invalid_operand_size
0000C4F7: 80 FE 02                                              	cmp	dh,2
0000C4FA: 74 0C                                                 	je	push_sreg16
0000C4FC: 80 FE 04                                              	cmp	dh,4
0000C4FF: 74 17                                                 	je	push_sreg32
0000C501: 80 FE 08                                              	cmp	dh,8
0000C504: 74 2F                                                 	je	push_sreg64
0000C506: EB 43                                                 	jmp	push_sreg_store
                                                                      push_sreg16:
0000C508: F6 C6 FD                                              	test	dh,not 2
0000C50B: 0F 85 2D 44 FF FF                                     	jnz	invalid_operand_size
0000C511: E8 66 49 00 00                                        	call	operand_16bit
0000C516: EB 33                                                 	jmp	push_sreg_store
                                                                      push_sreg32:
0000C518: F6 C6 FB                                              	test	dh,not 4
0000C51B: 0F 85 1D 44 FF FF                                     	jnz	invalid_operand_size
0000C521: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C528: 0F 84 FC 43 FF FF                                     	je	illegal_instruction
0000C52E: E8 5A 49 00 00                                        	call	operand_32bit
0000C533: EB 16                                                 	jmp	push_sreg_store
                                                                      push_sreg64:
0000C535: F6 C6 F7                                              	test	dh,not 8
0000C538: 0F 85 00 44 FF FF                                     	jnz	invalid_operand_size
0000C53E: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C545: 0F 85 DF 43 FF FF                                     	jne	illegal_instruction
                                                                      push_sreg_store:
0000C54B: 88 D8                                                 	mov	al,bl
0000C54D: 3C 40                                                 	cmp	al,40h
0000C54F: 0F 83 DF 43 FF FF                                     	jae	invalid_operand
0000C555: 2C 31                                                 	sub	al,31h
0000C557: 0F 82 D7 43 FF FF                                     	jc	invalid_operand
0000C55D: 3C 04                                                 	cmp	al,4
0000C55F: 73 1C                                                 	jae	push_sreg_386
0000C561: C0 E0 03                                              	shl	al,3
0000C564: 04 06                                                 	add	al,6
0000C566: A2 A3 A2 01 00                                        	mov	[base_code],al
0000C56B: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C572: 0F 84 B2 43 FF FF                                     	je	illegal_instruction
0000C578: E9 4B FF FF FF                                        	jmp	push_reg_store
                                                                      push_sreg_386:
0000C57D: 2C 04                                                 	sub	al,4
0000C57F: C0 E0 03                                              	shl	al,3
0000C582: 04 A0                                                 	add	al,0A0h
0000C584: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000C589: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000C590: E9 33 FF FF FF                                        	jmp	push_reg_store
                                                                      push_imm:
0000C595: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000C59A: 8A 25 AB A2 01 00                                     	mov	ah,[push_size]
0000C5A0: 08 C0                                                 	or	al,al
0000C5A2: 74 0C                                                 	je	push_imm_size_ok
0000C5A4: 08 E4                                                 	or	ah,ah
0000C5A6: 74 08                                                 	je	push_imm_size_ok
0000C5A8: 38 E0                                                 	cmp	al,ah
0000C5AA: 0F 85 8E 43 FF FF                                     	jne	invalid_operand_size
                                                                      push_imm_size_ok:
0000C5B0: 3C 02                                                 	cmp	al,2
0000C5B2: 0F 84 E5 00 00 00                                     	je	push_imm_16bit
0000C5B8: 3C 04                                                 	cmp	al,4
0000C5BA: 0F 84 18 01 00 00                                     	je	push_imm_32bit
0000C5C0: 3C 08                                                 	cmp	al,8
0000C5C2: 0F 84 FA 00 00 00                                     	je	push_imm_64bit
0000C5C8: 80 FC 02                                              	cmp	ah,2
0000C5CB: 0F 84 97 00 00 00                                     	je	push_imm_optimized_16bit
0000C5D1: 80 FC 04                                              	cmp	ah,4
0000C5D4: 74 56                                                 	je	push_imm_optimized_32bit
0000C5D6: 80 FC 08                                              	cmp	ah,8
0000C5D9: 74 1A                                                 	je	push_imm_optimized_64bit
0000C5DB: 08 C0                                                 	or	al,al
0000C5DD: 0F 85 5B 43 FF FF                                     	jnz	invalid_operand_size
0000C5E3: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000C5EA: 74 7C                                                 	je	push_imm_optimized_16bit
0000C5EC: 80 3D BE A2 01 00 20                                  	cmp	[code_type],32
0000C5F3: 74 37                                                 	je	push_imm_optimized_32bit
                                                                      push_imm_optimized_64bit:
0000C5F5: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C5FC: 0F 85 28 43 FF FF                                     	jne	illegal_instruction
0000C602: E8 55 F0 FF FF                                        	call	get_simm32
0000C607: 89 C2                                                 	mov	edx,eax
0000C609: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000C610: 0F 85 DB 00 00 00                                     	jne	push_imm_32bit_store
0000C616: 83 F8 80                                              	cmp	eax,-80h
0000C619: 0F 8C D2 00 00 00                                     	jl	push_imm_32bit_store
0000C61F: 3D 80 00 00 00                                        	cmp	eax,80h
0000C624: 0F 8D C7 00 00 00                                     	jge	push_imm_32bit_store
0000C62A: EB 5E                                                 	jmp	push_imm_8bit
                                                                      push_imm_optimized_32bit:
0000C62C: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C633: 0F 84 F1 42 FF FF                                     	je	illegal_instruction
0000C639: E8 42 AD FF FF                                        	call	get_dword_value
0000C63E: 89 C2                                                 	mov	edx,eax
0000C640: E8 48 48 00 00                                        	call	operand_32bit
0000C645: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000C64C: 0F 85 9F 00 00 00                                     	jne	push_imm_32bit_store
0000C652: 83 F8 80                                              	cmp	eax,-80h
0000C655: 0F 8C 96 00 00 00                                     	jl	push_imm_32bit_store
0000C65B: 3D 80 00 00 00                                        	cmp	eax,80h
0000C660: 0F 8D 8B 00 00 00                                     	jge	push_imm_32bit_store
0000C666: EB 22                                                 	jmp	push_imm_8bit
                                                                      push_imm_optimized_16bit:
0000C668: E8 CB AC FF FF                                        	call	get_word_value
0000C66D: 66 89 C2                                              	mov	dx,ax
0000C670: E8 07 48 00 00                                        	call	operand_16bit
0000C675: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000C67C: 75 2C                                                 	jne	push_imm_16bit_store
0000C67E: 66 83 F8 80                                           	cmp	ax,-80h
0000C682: 7C 26                                                 	jl	push_imm_16bit_store
0000C684: 66 3D 80 00                                           	cmp	ax,80h
0000C688: 7D 20                                                 	jge	push_imm_16bit_store
                                                                      push_imm_8bit:
0000C68A: 88 C4                                                 	mov	ah,al
0000C68C: C6 05 A3 A2 01 00 6A                                  	mov	[base_code],6Ah
0000C693: E8 9B 48 00 00                                        	call	store_classic_instruction_code
0000C698: 88 E0                                                 	mov	al,ah
0000C69A: AA                                                    	stos	byte [edi]
0000C69B: EB 68                                                 	jmp	push_done
                                                                      push_imm_16bit:
0000C69D: E8 96 AC FF FF                                        	call	get_word_value
0000C6A2: 66 89 C2                                              	mov	dx,ax
0000C6A5: E8 D2 47 00 00                                        	call	operand_16bit
                                                                      push_imm_16bit_store:
0000C6AA: C6 05 A3 A2 01 00 68                                  	mov	[base_code],68h
0000C6B1: E8 7D 48 00 00                                        	call	store_classic_instruction_code
0000C6B6: 66 89 D0                                              	mov	ax,dx
0000C6B9: E8 24 BD FF FF                                        	call	mark_relocation
0000C6BE: 66 AB                                                 	stos	word [edi]
0000C6C0: EB 43                                                 	jmp	push_done
                                                                      push_imm_64bit:
0000C6C2: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C6C9: 0F 85 5B 42 FF FF                                     	jne	illegal_instruction
0000C6CF: E8 88 EF FF FF                                        	call	get_simm32
0000C6D4: 89 C2                                                 	mov	edx,eax
0000C6D6: EB 19                                                 	jmp	push_imm_32bit_store
                                                                      push_imm_32bit:
0000C6D8: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C6DF: 0F 84 45 42 FF FF                                     	je	illegal_instruction
0000C6E5: E8 96 AC FF FF                                        	call	get_dword_value
0000C6EA: 89 C2                                                 	mov	edx,eax
0000C6EC: E8 9C 47 00 00                                        	call	operand_32bit
                                                                      push_imm_32bit_store:
0000C6F1: C6 05 A3 A2 01 00 68                                  	mov	[base_code],68h
0000C6F8: E8 36 48 00 00                                        	call	store_classic_instruction_code
0000C6FD: 89 D0                                                 	mov	eax,edx
0000C6FF: E8 DE BC FF FF                                        	call	mark_relocation
0000C704: AB                                                    	stos	dword [edi]
                                                                      push_done:
0000C705: AC                                                    	lods	byte [esi]
0000C706: 4E                                                    	dec	esi
0000C707: 3C 0F                                                 	cmp	al,0Fh
0000C709: 0F 84 61 88 FF FF                                     	je	instruction_assembled
0000C70F: 08 C0                                                 	or	al,al
0000C711: 0F 84 59 88 FF FF                                     	jz	instruction_assembled
                                                                ;	 mov	 [operand_size],0
                                                                ;	 mov	 [operand_flags],0
                                                                ;	 mov	 [operand_prefix],0
                                                                ;	 mov	 [rex_prefix],0
0000C717: 83 25 98 A2 01 00 00                                  	and	dword [operand_size],0
0000C71E: E9 71 FC FF FF                                        	jmp	push_next
                                                                pop_instruction:
0000C723: A2 AB A2 01 00                                        	mov	[push_size],al
                                                                      pop_next:
0000C728: AC                                                    	lods	byte [esi]
0000C729: E8 FC 45 00 00                                        	call	get_size_operator
0000C72E: 3C 10                                                 	cmp	al,10h
0000C730: 0F 84 9D 00 00 00                                     	je	pop_reg
0000C736: 3C 5B                                                 	cmp	al,'['
0000C738: 0F 85 F6 41 FF FF                                     	jne	invalid_operand
                                                                      pop_mem:
0000C73E: E8 43 46 00 00                                        	call	get_address
0000C743: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000C748: 8A 25 AB A2 01 00                                     	mov	ah,[push_size]
0000C74E: 3C 02                                                 	cmp	al,2
0000C750: 74 26                                                 	je	pop_mem_16bit
0000C752: 3C 04                                                 	cmp	al,4
0000C754: 74 32                                                 	je	pop_mem_32bit
0000C756: 3C 08                                                 	cmp	al,8
0000C758: 74 4B                                                 	je	pop_mem_64bit
0000C75A: 08 C0                                                 	or	al,al
0000C75C: 0F 85 DC 41 FF FF                                     	jnz	invalid_operand_size
0000C762: 80 FC 02                                              	cmp	ah,2
0000C765: 74 11                                                 	je	pop_mem_16bit
0000C767: 80 FC 04                                              	cmp	ah,4
0000C76A: 74 1C                                                 	je	pop_mem_32bit
0000C76C: 80 FC 08                                              	cmp	ah,8
0000C76F: 74 34                                                 	je	pop_mem_64bit
0000C771: E8 EE F0 FF FF                                        	call	recoverable_unknown_size
0000C776: EB 43                                                 	jmp	pop_mem_store
                                                                      pop_mem_16bit:
0000C778: F6 C4 FD                                              	test	ah,not 2
0000C77B: 0F 85 BD 41 FF FF                                     	jnz	invalid_operand_size
0000C781: E8 F6 46 00 00                                        	call	operand_16bit
0000C786: EB 33                                                 	jmp	pop_mem_store
                                                                      pop_mem_32bit:
0000C788: F6 C4 FB                                              	test	ah,not 4
0000C78B: 0F 85 AD 41 FF FF                                     	jnz	invalid_operand_size
0000C791: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C798: 0F 84 8C 41 FF FF                                     	je	illegal_instruction
0000C79E: E8 EA 46 00 00                                        	call	operand_32bit
0000C7A3: EB 16                                                 	jmp	pop_mem_store
                                                                      pop_mem_64bit:
0000C7A5: F6 C4 F7                                              	test	ah,not 8
0000C7A8: 0F 85 90 41 FF FF                                     	jnz	invalid_operand_size
0000C7AE: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C7B5: 0F 85 6F 41 FF FF                                     	jne	illegal_instruction
                                                                      pop_mem_store:
0000C7BB: C6 05 A3 A2 01 00 8F                                  	mov	[base_code],08Fh
0000C7C2: C6 05 A6 A2 01 00 00                                  	mov	[postbyte_register],0
0000C7C9: E8 25 48 00 00                                        	call	store_instruction
0000C7CE: E9 8B 00 00 00                                        	jmp	pop_done
                                                                      pop_reg:
0000C7D3: AC                                                    	lods	byte [esi]
0000C7D4: 88 C4                                                 	mov	ah,al
0000C7D6: 80 EC 10                                              	sub	ah,10h
0000C7D9: 20 C4                                                 	and	ah,al
0000C7DB: F6 C4 F0                                              	test	ah,0F0h
0000C7DE: 0F 85 98 00 00 00                                     	jnz	pop_sreg
0000C7E4: E8 9A 44 00 00                                        	call	convert_register
0000C7E9: A8 08                                                 	test	al,1000b
0000C7EB: 74 09                                                 	jz	pop_reg_ok
0000C7ED: 80 0D 9B A2 01 00 41                                  	or	[rex_prefix],41h
0000C7F4: 24 07                                                 	and	al,111b
                                                                      pop_reg_ok:
0000C7F6: 04 58                                                 	add	al,58h
0000C7F8: A2 A3 A2 01 00                                        	mov	[base_code],al
0000C7FD: 88 E0                                                 	mov	al,ah
0000C7FF: 8A 25 AB A2 01 00                                     	mov	ah,[push_size]
0000C805: 3C 02                                                 	cmp	al,2
0000C807: 74 42                                                 	je	pop_reg_16bit
0000C809: 3C 04                                                 	cmp	al,4
0000C80B: 74 21                                                 	je	pop_reg_32bit
0000C80D: 3C 08                                                 	cmp	al,8
0000C80F: 74 05                                                 	je	pop_reg_64bit
0000C811: E9 28 41 FF FF                                        	jmp	invalid_operand_size
                                                                      pop_reg_64bit:
0000C816: F6 C4 F7                                              	test	ah,not 8
0000C819: 0F 85 1F 41 FF FF                                     	jnz	invalid_operand_size
0000C81F: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C826: 0F 85 FE 40 FF FF                                     	jne	illegal_instruction
0000C82C: EB 2B                                                 	jmp	pop_reg_store
                                                                      pop_reg_32bit:
0000C82E: F6 C4 FB                                              	test	ah,not 4
0000C831: 0F 85 07 41 FF FF                                     	jnz	invalid_operand_size
0000C837: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C83E: 0F 84 E6 40 FF FF                                     	je	illegal_instruction
0000C844: E8 44 46 00 00                                        	call	operand_32bit
0000C849: EB 0E                                                 	jmp	pop_reg_store
                                                                      pop_reg_16bit:
0000C84B: F6 C4 FD                                              	test	ah,not 2
0000C84E: 0F 85 EA 40 FF FF                                     	jnz	invalid_operand_size
0000C854: E8 23 46 00 00                                        	call	operand_16bit
                                                                      pop_reg_store:
0000C859: E8 D5 46 00 00                                        	call	store_classic_instruction_code
                                                                      pop_done:
0000C85E: AC                                                    	lods	byte [esi]
0000C85F: 4E                                                    	dec	esi
0000C860: 3C 0F                                                 	cmp	al,0Fh
0000C862: 0F 84 08 87 FF FF                                     	je	instruction_assembled
0000C868: 08 C0                                                 	or	al,al
0000C86A: 0F 84 00 87 FF FF                                     	jz	instruction_assembled
                                                                ;	 mov	 [operand_size],0
                                                                ;	 mov	 [operand_flags],0
                                                                ;	 mov	 [operand_prefix],0
                                                                ;	 mov	 [rex_prefix],0
0000C870: 83 25 98 A2 01 00 00                                  	and	dword [operand_size],0
0000C877: E9 AC FE FF FF                                        	jmp	pop_next
                                                                      pop_sreg:
0000C87C: 8A 15 98 A2 01 00                                     	mov	dl,[operand_size]
0000C882: 8A 35 AB A2 01 00                                     	mov	dh,[push_size]
0000C888: 3C 32                                                 	cmp	al,32h
0000C88A: 0F 84 9F 00 00 00                                     	je	pop_cs
0000C890: 88 C3                                                 	mov	bl,al
0000C892: 80 FA 02                                              	cmp	dl,2
0000C895: 74 23                                                 	je	pop_sreg16
0000C897: 80 FA 04                                              	cmp	dl,4
0000C89A: 74 2E                                                 	je	pop_sreg32
0000C89C: 80 FA 08                                              	cmp	dl,8
0000C89F: 74 46                                                 	je	pop_sreg64
0000C8A1: 08 D2                                                 	or	dl,dl
0000C8A3: 0F 85 95 40 FF FF                                     	jnz	invalid_operand_size
0000C8A9: 80 FE 02                                              	cmp	dh,2
0000C8AC: 74 0C                                                 	je	pop_sreg16
0000C8AE: 80 FE 04                                              	cmp	dh,4
0000C8B1: 74 17                                                 	je	pop_sreg32
0000C8B3: 80 FE 08                                              	cmp	dh,8
0000C8B6: 74 2F                                                 	je	pop_sreg64
0000C8B8: EB 43                                                 	jmp	pop_sreg_store
                                                                      pop_sreg16:
0000C8BA: F6 C6 FD                                              	test	dh,not 2
0000C8BD: 0F 85 7B 40 FF FF                                     	jnz	invalid_operand_size
0000C8C3: E8 B4 45 00 00                                        	call	operand_16bit
0000C8C8: EB 33                                                 	jmp	pop_sreg_store
                                                                      pop_sreg32:
0000C8CA: F6 C6 FB                                              	test	dh,not 4
0000C8CD: 0F 85 6B 40 FF FF                                     	jnz	invalid_operand_size
0000C8D3: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C8DA: 0F 84 4A 40 FF FF                                     	je	illegal_instruction
0000C8E0: E8 A8 45 00 00                                        	call	operand_32bit
0000C8E5: EB 16                                                 	jmp	pop_sreg_store
                                                                      pop_sreg64:
0000C8E7: F6 C6 F7                                              	test	dh,not 8
0000C8EA: 0F 85 4E 40 FF FF                                     	jnz	invalid_operand_size
0000C8F0: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C8F7: 0F 85 2D 40 FF FF                                     	jne	illegal_instruction
                                                                      pop_sreg_store:
0000C8FD: 88 D8                                                 	mov	al,bl
0000C8FF: 3C 40                                                 	cmp	al,40h
0000C901: 0F 83 2D 40 FF FF                                     	jae	invalid_operand
0000C907: 2C 31                                                 	sub	al,31h
0000C909: 0F 82 25 40 FF FF                                     	jc	invalid_operand
0000C90F: 3C 04                                                 	cmp	al,4
0000C911: 73 54                                                 	jae	pop_sreg_386
0000C913: C0 E0 03                                              	shl	al,3
0000C916: 04 07                                                 	add	al,7
0000C918: A2 A3 A2 01 00                                        	mov	[base_code],al
0000C91D: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C924: 0F 84 00 40 FF FF                                     	je	illegal_instruction
0000C92A: E9 2A FF FF FF                                        	jmp	pop_reg_store
                                                                      pop_cs:
0000C92F: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000C936: 0F 85 EE 3F FF FF                                     	jne	illegal_instruction
0000C93C: 80 FA 02                                              	cmp	dl,2
0000C93F: 74 15                                                 	je	pop_cs_store
0000C941: 08 D2                                                 	or	dl,dl
0000C943: 0F 85 F5 3F FF FF                                     	jnz	invalid_operand_size
0000C949: 80 FE 02                                              	cmp	dh,2
0000C94C: 74 08                                                 	je	pop_cs_store
0000C94E: 08 F6                                                 	or	dh,dh
0000C950: 0F 85 D4 3F FF FF                                     	jnz	illegal_instruction
                                                                      pop_cs_store:
0000C956: F6 C6 FD                                              	test	dh,not 2
0000C959: 0F 85 DF 3F FF FF                                     	jnz	invalid_operand_size
0000C95F: B0 0F                                                 	mov	al,0Fh
0000C961: AA                                                    	stos	byte [edi]
0000C962: E9 F7 FE FF FF                                        	jmp	pop_done
                                                                      pop_sreg_386:
0000C967: 2C 04                                                 	sub	al,4
0000C969: C0 E0 03                                              	shl	al,3
0000C96C: 04 A1                                                 	add	al,0A1h
0000C96E: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000C973: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000C97A: E9 DA FE FF FF                                        	jmp	pop_reg_store
                                                                inc_instruction:
0000C97F: A2 A3 A2 01 00                                        	mov	[base_code],al
0000C984: AC                                                    	lods	byte [esi]
0000C985: E8 A0 43 00 00                                        	call	get_size_operator
0000C98A: 3C 10                                                 	cmp	al,10h
0000C98C: 74 48                                                 	je	inc_reg
0000C98E: 3C 5B                                                 	cmp	al,'['
0000C990: 74 06                                                 	je	inc_mem
0000C992: 0F 85 9C 3F FF FF                                     	jne	invalid_operand
                                                                      inc_mem:
0000C998: E8 E9 43 00 00                                        	call	get_address
0000C99D: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000C9A2: 3C 01                                                 	cmp	al,1
0000C9A4: 74 1E                                                 	je	inc_mem_8bit
0000C9A6: 72 17                                                 	jb	inc_mem_nosize
0000C9A8: E8 06 45 00 00                                        	call	operand_autodetect
0000C9AD: B0 FF                                                 	mov	al,0FFh
0000C9AF: 86 05 A3 A2 01 00                                     	xchg	al,[base_code]
0000C9B5: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000C9BA: E9 5B EB FF FF                                        	jmp	instruction_ready
                                                                      inc_mem_nosize:
0000C9BF: E8 A0 EE FF FF                                        	call	recoverable_unknown_size
                                                                      inc_mem_8bit:
0000C9C4: B0 FE                                                 	mov	al,0FEh
0000C9C6: 86 05 A3 A2 01 00                                     	xchg	al,[base_code]
0000C9CC: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000C9D1: E9 44 EB FF FF                                        	jmp	instruction_ready
                                                                      inc_reg:
0000C9D6: AC                                                    	lods	byte [esi]
0000C9D7: E8 A7 42 00 00                                        	call	convert_register
0000C9DC: 88 C3                                                 	mov	bl,al
0000C9DE: B0 FE                                                 	mov	al,0FEh
0000C9E0: 86 05 A3 A2 01 00                                     	xchg	al,[base_code]
0000C9E6: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000C9EB: 88 E0                                                 	mov	al,ah
0000C9ED: 3C 01                                                 	cmp	al,1
0000C9EF: 74 2F                                                 	je	inc_reg_8bit
0000C9F1: E8 BD 44 00 00                                        	call	operand_autodetect
0000C9F6: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000C9FD: 74 1B                                                 	je	inc_reg_long_form
0000C9FF: A0 A6 A2 01 00                                        	mov	al,[postbyte_register]
0000CA04: C0 E0 03                                              	shl	al,3
0000CA07: 00 D8                                                 	add	al,bl
0000CA09: 04 40                                                 	add	al,40h
0000CA0B: A2 A3 A2 01 00                                        	mov	[base_code],al
0000CA10: E8 1E 45 00 00                                        	call	store_classic_instruction_code
0000CA15: E9 56 85 FF FF                                        	jmp	instruction_assembled
                                                                      inc_reg_long_form:
0000CA1A: FE 05 A3 A2 01 00                                     	inc	[base_code]
                                                                      inc_reg_8bit:
0000CA20: E9 D0 EC FF FF                                        	jmp	nomem_instruction_ready
                                                                set_instruction:
0000CA25: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000CA2C: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000CA31: AC                                                    	lods	byte [esi]
0000CA32: E8 F3 42 00 00                                        	call	get_size_operator
0000CA37: 3C 10                                                 	cmp	al,10h
0000CA39: 74 26                                                 	je	set_reg
0000CA3B: 3C 5B                                                 	cmp	al,'['
0000CA3D: 0F 85 F1 3E FF FF                                     	jne	invalid_operand
                                                                      set_mem:
0000CA43: E8 3E 43 00 00                                        	call	get_address
0000CA48: 80 3D 98 A2 01 00 01                                  	cmp	[operand_size],1
0000CA4F: 0F 87 E9 3E FF FF                                     	ja	invalid_operand_size
0000CA55: C6 05 A6 A2 01 00 00                                  	mov	[postbyte_register],0
0000CA5C: E9 B9 EA FF FF                                        	jmp	instruction_ready
                                                                      set_reg:
0000CA61: AC                                                    	lods	byte [esi]
0000CA62: E8 1C 42 00 00                                        	call	convert_register
0000CA67: 80 FC 01                                              	cmp	ah,1
0000CA6A: 0F 85 CE 3E FF FF                                     	jne	invalid_operand_size
0000CA70: 88 C3                                                 	mov	bl,al
0000CA72: C6 05 A6 A2 01 00 00                                  	mov	[postbyte_register],0
0000CA79: E9 77 EC FF FF                                        	jmp	nomem_instruction_ready
                                                                arpl_instruction:
0000CA7E: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000CA85: 0F 84 9F 3E FF FF                                     	je	illegal_instruction
0000CA8B: C6 05 A3 A2 01 00 63                                  	mov	[base_code],63h
0000CA92: AC                                                    	lods	byte [esi]
0000CA93: E8 92 42 00 00                                        	call	get_size_operator
0000CA98: 3C 10                                                 	cmp	al,10h
0000CA9A: 74 2E                                                 	je	arpl_reg
0000CA9C: 3C 5B                                                 	cmp	al,'['
0000CA9E: 0F 85 90 3E FF FF                                     	jne	invalid_operand
0000CAA4: E8 DD 42 00 00                                        	call	get_address
0000CAA9: AC                                                    	lods	byte [esi]
0000CAAA: 3C 2C                                                 	cmp	al,','
0000CAAC: 0F 85 82 3E FF FF                                     	jne	invalid_operand
0000CAB2: E8 BD 41 00 00                                        	call	take_register
0000CAB7: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000CABC: 80 FC 02                                              	cmp	ah,2
0000CABF: 0F 85 79 3E FF FF                                     	jne	invalid_operand_size
0000CAC5: E9 50 EA FF FF                                        	jmp	instruction_ready
                                                                      arpl_reg:
0000CACA: AC                                                    	lods	byte [esi]
0000CACB: E8 B3 41 00 00                                        	call	convert_register
0000CAD0: 80 FC 02                                              	cmp	ah,2
0000CAD3: 0F 85 65 3E FF FF                                     	jne	invalid_operand_size
0000CAD9: 88 C3                                                 	mov	bl,al
0000CADB: AC                                                    	lods	byte [esi]
0000CADC: 3C 2C                                                 	cmp	al,','
0000CADE: 0F 85 50 3E FF FF                                     	jne	invalid_operand
0000CAE4: E8 8B 41 00 00                                        	call	take_register
0000CAE9: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000CAEE: E9 02 EC FF FF                                        	jmp	nomem_instruction_ready
                                                                bound_instruction:
0000CAF3: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000CAFA: 0F 84 2A 3E FF FF                                     	je	illegal_instruction
0000CB00: E8 6F 41 00 00                                        	call	take_register
0000CB05: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000CB0A: AC                                                    	lods	byte [esi]
0000CB0B: 3C 2C                                                 	cmp	al,','
0000CB0D: 0F 85 21 3E FF FF                                     	jne	invalid_operand
0000CB13: AC                                                    	lods	byte [esi]
0000CB14: E8 11 42 00 00                                        	call	get_size_operator
0000CB19: 3C 5B                                                 	cmp	al,'['
0000CB1B: 0F 85 13 3E FF FF                                     	jne	invalid_operand
0000CB21: E8 60 42 00 00                                        	call	get_address
0000CB26: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000CB2B: 3C 02                                                 	cmp	al,2
0000CB2D: 74 08                                                 	je	bound_store
0000CB2F: 3C 04                                                 	cmp	al,4
0000CB31: 0F 85 07 3E FF FF                                     	jne	invalid_operand_size
                                                                      bound_store:
0000CB37: E8 77 43 00 00                                        	call	operand_autodetect
0000CB3C: C6 05 A3 A2 01 00 62                                  	mov	[base_code],62h
0000CB43: E9 D2 E9 FF FF                                        	jmp	instruction_ready
                                                                enter_instruction:
0000CB48: AC                                                    	lods	byte [esi]
0000CB49: E8 DC 41 00 00                                        	call	get_size_operator
0000CB4E: 80 FC 02                                              	cmp	ah,2
0000CB51: 74 08                                                 	je	enter_imm16_size_ok
0000CB53: 08 E4                                                 	or	ah,ah
0000CB55: 0F 85 E3 3D FF FF                                     	jnz	invalid_operand_size
                                                                      enter_imm16_size_ok:
0000CB5B: 3C 28                                                 	cmp	al,'('
0000CB5D: 0F 85 D1 3D FF FF                                     	jne	invalid_operand
0000CB63: E8 D0 A7 FF FF                                        	call	get_word_value
0000CB68: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
0000CB6F: 75 15                                                 	jne	enter_imm16_ok
0000CB71: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000CB78: 0F 85 D2 3E FF FF                                     	jne	invalid_use_of_symbol
0000CB7E: 85 C0                                                 	test	eax,eax
0000CB80: 0F 88 26 3E FF FF                                     	js	value_out_of_range
                                                                      enter_imm16_ok:
0000CB86: 50                                                    	push	eax
0000CB87: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000CB8E: AC                                                    	lods	byte [esi]
0000CB8F: 3C 2C                                                 	cmp	al,','
0000CB91: 0F 85 9D 3D FF FF                                     	jne	invalid_operand
0000CB97: AC                                                    	lods	byte [esi]
0000CB98: E8 8D 41 00 00                                        	call	get_size_operator
0000CB9D: 80 FC 01                                              	cmp	ah,1
0000CBA0: 74 08                                                 	je	enter_imm8_size_ok
0000CBA2: 08 E4                                                 	or	ah,ah
0000CBA4: 0F 85 94 3D FF FF                                     	jnz	invalid_operand_size
                                                                      enter_imm8_size_ok:
0000CBAA: 3C 28                                                 	cmp	al,'('
0000CBAC: 0F 85 82 3D FF FF                                     	jne	invalid_operand
0000CBB2: E8 F6 A6 FF FF                                        	call	get_byte_value
0000CBB7: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
0000CBBE: 75 08                                                 	jne	enter_imm8_ok
0000CBC0: 85 C0                                                 	test	eax,eax
0000CBC2: 0F 88 E4 3D FF FF                                     	js	value_out_of_range
                                                                      enter_imm8_ok:
0000CBC8: 88 C2                                                 	mov	dl,al
0000CBCA: 5B                                                    	pop	ebx
0000CBCB: B0 C8                                                 	mov	al,0C8h
0000CBCD: AA                                                    	stos	byte [edi]
0000CBCE: 66 89 D8                                              	mov	ax,bx
0000CBD1: 66 AB                                                 	stos	word [edi]
0000CBD3: 88 D0                                                 	mov	al,dl
0000CBD5: AA                                                    	stos	byte [edi]
0000CBD6: E9 95 83 FF FF                                        	jmp	instruction_assembled
                                                                ret_instruction_only64:
0000CBDB: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000CBE2: 0F 85 42 3D FF FF                                     	jne	illegal_instruction
0000CBE8: EB 20                                                 	jmp	ret_instruction
                                                                ret_instruction_32bit_except64:
0000CBEA: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000CBF1: 0F 84 33 3D FF FF                                     	je	illegal_instruction
                                                                ret_instruction_32bit:
0000CBF7: E8 91 42 00 00                                        	call	operand_32bit
0000CBFC: EB 0C                                                 	jmp	ret_instruction
                                                                ret_instruction_16bit:
0000CBFE: E8 79 42 00 00                                        	call	operand_16bit
0000CC03: EB 05                                                 	jmp	ret_instruction
                                                                ret_instruction_64bit:
0000CC05: E8 94 42 00 00                                        	call	operand_64bit
                                                                ret_instruction:
0000CC0A: 80 25 C3 A2 01 00 EF                                  	and	[prefix_flags],not 10h
                                                                      ret_common:
0000CC11: A2 A3 A2 01 00                                        	mov	[base_code],al
0000CC16: AC                                                    	lods	byte [esi]
0000CC17: 4E                                                    	dec	esi
0000CC18: 08 C0                                                 	or	al,al
0000CC1A: 74 63                                                 	jz	simple_ret
0000CC1C: 3C 0F                                                 	cmp	al,0Fh
0000CC1E: 74 5F                                                 	je	simple_ret
0000CC20: AC                                                    	lods	byte [esi]
0000CC21: E8 04 41 00 00                                        	call	get_size_operator
0000CC26: 08 E4                                                 	or	ah,ah
0000CC28: 74 0A                                                 	jz	ret_imm
0000CC2A: 80 FC 02                                              	cmp	ah,2
0000CC2D: 74 05                                                 	je	ret_imm
0000CC2F: E9 0A 3D FF FF                                        	jmp	invalid_operand_size
                                                                      ret_imm:
0000CC34: 3C 28                                                 	cmp	al,'('
0000CC36: 0F 85 F8 3C FF FF                                     	jne	invalid_operand
0000CC3C: E8 F7 A6 FF FF                                        	call	get_word_value
0000CC41: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
0000CC48: 75 15                                                 	jne	ret_imm_ok
0000CC4A: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000CC51: 0F 85 F9 3D FF FF                                     	jne	invalid_use_of_symbol
0000CC57: 85 C0                                                 	test	eax,eax
0000CC59: 0F 88 4D 3D FF FF                                     	js	value_out_of_range
                                                                      ret_imm_ok:
0000CC5F: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000CC66: 75 05                                                 	jne	ret_imm_store
0000CC68: 66 09 C0                                              	or	ax,ax
0000CC6B: 74 12                                                 	jz	simple_ret
                                                                      ret_imm_store:
0000CC6D: 66 89 C2                                              	mov	dx,ax
0000CC70: E8 BE 42 00 00                                        	call	store_classic_instruction_code
0000CC75: 66 89 D0                                              	mov	ax,dx
0000CC78: 66 AB                                                 	stos	word [edi]
0000CC7A: E9 F1 82 FF FF                                        	jmp	instruction_assembled
                                                                      simple_ret:
0000CC7F: FE 05 A3 A2 01 00                                     	inc	[base_code]
0000CC85: E8 A9 42 00 00                                        	call	store_classic_instruction_code
0000CC8A: E9 E1 82 FF FF                                        	jmp	instruction_assembled
                                                                retf_instruction:
0000CC8F: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000CC96: 0F 85 75 FF FF FF                                     	jne	ret_common
                                                                retf_instruction_64bit:
0000CC9C: E8 FD 41 00 00                                        	call	operand_64bit
0000CCA1: E9 6B FF FF FF                                        	jmp	ret_common
                                                                retf_instruction_32bit:
0000CCA6: E8 E2 41 00 00                                        	call	operand_32bit
0000CCAB: E9 61 FF FF FF                                        	jmp	ret_common
                                                                retf_instruction_16bit:
0000CCB0: E8 C7 41 00 00                                        	call	operand_16bit
0000CCB5: E9 57 FF FF FF                                        	jmp	ret_common
                                                                lea_instruction:
0000CCBA: C6 05 A3 A2 01 00 8D                                  	mov	[base_code],8Dh
0000CCC1: E8 AE 3F 00 00                                        	call	take_register
0000CCC6: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000CCCB: AC                                                    	lods	byte [esi]
0000CCCC: 3C 2C                                                 	cmp	al,','
0000CCCE: 0F 85 60 3C FF FF                                     	jne	invalid_operand
0000CCD4: 30 C0                                                 	xor	al,al
0000CCD6: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
0000CCDC: 50                                                    	push	eax
0000CCDD: AC                                                    	lods	byte [esi]
0000CCDE: E8 47 40 00 00                                        	call	get_size_operator
0000CCE3: 3C 5B                                                 	cmp	al,'['
0000CCE5: 0F 85 49 3C FF FF                                     	jne	invalid_operand
0000CCEB: 80 0D 99 A2 01 00 01                                  	or	[operand_flags],1
0000CCF2: E8 8F 40 00 00                                        	call	get_address
0000CCF7: 58                                                    	pop	eax
0000CCF8: A2 98 A2 01 00                                        	mov	[operand_size],al
0000CCFD: E8 B1 41 00 00                                        	call	operand_autodetect
0000CD02: E9 13 E8 FF FF                                        	jmp	instruction_ready
                                                                ls_instruction:
0000CD07: 08 C0                                                 	or	al,al
0000CD09: 74 14                                                 	jz	les_instruction
0000CD0B: 3C 03                                                 	cmp	al,3
0000CD0D: 74 19                                                 	jz	lds_instruction
0000CD0F: 04 B0                                                 	add	al,0B0h
0000CD11: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000CD16: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000CD1D: EB 1D                                                 	jmp	ls_code_ok
                                                                      les_instruction:
0000CD1F: C6 05 A3 A2 01 00 C4                                  	mov	[base_code],0C4h
0000CD26: EB 07                                                 	jmp	ls_short_code
                                                                      lds_instruction:
0000CD28: C6 05 A3 A2 01 00 C5                                  	mov	[base_code],0C5h
                                                                      ls_short_code:
0000CD2F: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000CD36: 0F 84 EE 3B FF FF                                     	je	illegal_instruction
                                                                      ls_code_ok:
0000CD3C: E8 33 3F 00 00                                        	call	take_register
0000CD41: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000CD46: AC                                                    	lods	byte [esi]
0000CD47: 3C 2C                                                 	cmp	al,','
0000CD49: 0F 85 E5 3B FF FF                                     	jne	invalid_operand
0000CD4F: 80 05 98 A2 01 00 02                                  	add	[operand_size],2
0000CD56: AC                                                    	lods	byte [esi]
0000CD57: E8 CE 3F 00 00                                        	call	get_size_operator
0000CD5C: 3C 5B                                                 	cmp	al,'['
0000CD5E: 0F 85 D0 3B FF FF                                     	jne	invalid_operand
0000CD64: E8 1D 40 00 00                                        	call	get_address
0000CD69: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000CD6E: 3C 04                                                 	cmp	al,4
0000CD70: 74 0D                                                 	je	ls_16bit
0000CD72: 3C 06                                                 	cmp	al,6
0000CD74: 74 13                                                 	je	ls_32bit
0000CD76: 3C 0A                                                 	cmp	al,10
0000CD78: 74 19                                                 	je	ls_64bit
0000CD7A: E9 BF 3B FF FF                                        	jmp	invalid_operand_size
                                                                      ls_16bit:
0000CD7F: E8 F8 40 00 00                                        	call	operand_16bit
0000CD84: E9 91 E7 FF FF                                        	jmp	instruction_ready
                                                                      ls_32bit:
0000CD89: E8 FF 40 00 00                                        	call	operand_32bit
0000CD8E: E9 87 E7 FF FF                                        	jmp	instruction_ready
                                                                      ls_64bit:
0000CD93: E8 06 41 00 00                                        	call	operand_64bit
0000CD98: E9 7D E7 FF FF                                        	jmp	instruction_ready
                                                                sh_instruction:
0000CD9D: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000CDA2: AC                                                    	lods	byte [esi]
0000CDA3: E8 82 3F 00 00                                        	call	get_size_operator
0000CDA8: 3C 10                                                 	cmp	al,10h
0000CDAA: 0F 84 E8 00 00 00                                     	je	sh_reg
0000CDB0: 3C 5B                                                 	cmp	al,'['
0000CDB2: 0F 85 7C 3B FF FF                                     	jne	invalid_operand
                                                                      sh_mem:
0000CDB8: E8 C9 3F 00 00                                        	call	get_address
0000CDBD: 52 53 51                                              	push	edx ebx ecx
0000CDC0: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000CDC5: 50                                                    	push	eax
0000CDC6: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000CDCD: AC                                                    	lods	byte [esi]
0000CDCE: 3C 2C                                                 	cmp	al,','
0000CDD0: 0F 85 5E 3B FF FF                                     	jne	invalid_operand
0000CDD6: AC                                                    	lods	byte [esi]
0000CDD7: E8 4E 3F 00 00                                        	call	get_size_operator
0000CDDC: 3C 28                                                 	cmp	al,'('
0000CDDE: 74 3D                                                 	je	sh_mem_imm
0000CDE0: 3C 10                                                 	cmp	al,10h
0000CDE2: 0F 85 4C 3B FF FF                                     	jne	invalid_operand
                                                                      sh_mem_reg:
0000CDE8: AC                                                    	lods	byte [esi]
0000CDE9: 3C 11                                                 	cmp	al,11h
0000CDEB: 0F 85 43 3B FF FF                                     	jne	invalid_operand
0000CDF1: 58 59 5B 5A                                           	pop	eax ecx ebx edx
0000CDF5: 3C 01                                                 	cmp	al,1
0000CDF7: 74 18                                                 	je	sh_mem_cl_8bit
0000CDF9: 72 11                                                 	jb	sh_mem_cl_nosize
0000CDFB: E8 B3 40 00 00                                        	call	operand_autodetect
0000CE00: C6 05 A3 A2 01 00 D3                                  	mov	[base_code],0D3h
0000CE07: E9 0E E7 FF FF                                        	jmp	instruction_ready
                                                                      sh_mem_cl_nosize:
0000CE0C: E8 53 EA FF FF                                        	call	recoverable_unknown_size
                                                                      sh_mem_cl_8bit:
0000CE11: C6 05 A3 A2 01 00 D2                                  	mov	[base_code],0D2h
0000CE18: E9 FD E6 FF FF                                        	jmp	instruction_ready
                                                                      sh_mem_imm:
0000CE1D: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000CE22: 08 C0                                                 	or	al,al
0000CE24: 74 08                                                 	jz	sh_mem_imm_size_ok
0000CE26: 3C 01                                                 	cmp	al,1
0000CE28: 0F 85 10 3B FF FF                                     	jne	invalid_operand_size
                                                                      sh_mem_imm_size_ok:
0000CE2E: E8 7A A4 FF FF                                        	call	get_byte_value
0000CE33: A2 F4 A1 01 00                                        	mov	byte [value],al
0000CE38: 58 59 5B 5A                                           	pop	eax ecx ebx edx
0000CE3C: 3C 01                                                 	cmp	al,1
0000CE3E: 74 32                                                 	je	sh_mem_imm_8bit
0000CE40: 72 2B                                                 	jb	sh_mem_imm_nosize
0000CE42: E8 6C 40 00 00                                        	call	operand_autodetect
0000CE47: 80 3D F4 A1 01 00 01                                  	cmp	byte [value],1
0000CE4E: 74 11                                                 	je	sh_mem_1
0000CE50: C6 05 A3 A2 01 00 C1                                  	mov	[base_code],0C1h
0000CE57: E8 0D 47 00 00                                        	call	store_instruction_with_imm8
0000CE5C: E9 0F 81 FF FF                                        	jmp	instruction_assembled
                                                                      sh_mem_1:
0000CE61: C6 05 A3 A2 01 00 D1                                  	mov	[base_code],0D1h
0000CE68: E9 AD E6 FF FF                                        	jmp	instruction_ready
                                                                      sh_mem_imm_nosize:
0000CE6D: E8 F2 E9 FF FF                                        	call	recoverable_unknown_size
                                                                      sh_mem_imm_8bit:
0000CE72: 80 3D F4 A1 01 00 01                                  	cmp	byte [value],1
0000CE79: 74 11                                                 	je	sh_mem_1_8bit
0000CE7B: C6 05 A3 A2 01 00 C0                                  	mov	[base_code],0C0h
0000CE82: E8 E2 46 00 00                                        	call	store_instruction_with_imm8
0000CE87: E9 E4 80 FF FF                                        	jmp	instruction_assembled
                                                                      sh_mem_1_8bit:
0000CE8C: C6 05 A3 A2 01 00 D0                                  	mov	[base_code],0D0h
0000CE93: E9 82 E6 FF FF                                        	jmp	instruction_ready
                                                                      sh_reg:
0000CE98: AC                                                    	lods	byte [esi]
0000CE99: E8 E5 3D 00 00                                        	call	convert_register
0000CE9E: 66 89 C3                                              	mov	bx,ax
0000CEA1: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000CEA8: AC                                                    	lods	byte [esi]
0000CEA9: 3C 2C                                                 	cmp	al,','
0000CEAB: 0F 85 83 3A FF FF                                     	jne	invalid_operand
0000CEB1: AC                                                    	lods	byte [esi]
0000CEB2: E8 73 3E 00 00                                        	call	get_size_operator
0000CEB7: 3C 28                                                 	cmp	al,'('
0000CEB9: 74 34                                                 	je	sh_reg_imm
0000CEBB: 3C 10                                                 	cmp	al,10h
0000CEBD: 0F 85 71 3A FF FF                                     	jne	invalid_operand
                                                                      sh_reg_reg:
0000CEC3: AC                                                    	lods	byte [esi]
0000CEC4: 3C 11                                                 	cmp	al,11h
0000CEC6: 0F 85 68 3A FF FF                                     	jne	invalid_operand
0000CECC: 88 F8                                                 	mov	al,bh
0000CECE: 3C 01                                                 	cmp	al,1
0000CED0: 74 11                                                 	je	sh_reg_cl_8bit
0000CED2: E8 DC 3F 00 00                                        	call	operand_autodetect
0000CED7: C6 05 A3 A2 01 00 D3                                  	mov	[base_code],0D3h
0000CEDE: E9 12 E8 FF FF                                        	jmp	nomem_instruction_ready
                                                                      sh_reg_cl_8bit:
0000CEE3: C6 05 A3 A2 01 00 D2                                  	mov	[base_code],0D2h
0000CEEA: E9 06 E8 FF FF                                        	jmp	nomem_instruction_ready
                                                                      sh_reg_imm:
0000CEEF: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000CEF4: 08 C0                                                 	or	al,al
0000CEF6: 74 08                                                 	jz	sh_reg_imm_size_ok
0000CEF8: 3C 01                                                 	cmp	al,1
0000CEFA: 0F 85 3E 3A FF FF                                     	jne	invalid_operand_size
                                                                      sh_reg_imm_size_ok:
0000CF00: 53                                                    	push	ebx
0000CF01: E8 A7 A3 FF FF                                        	call	get_byte_value
0000CF06: 88 C2                                                 	mov	dl,al
0000CF08: 5B                                                    	pop	ebx
0000CF09: 88 F8                                                 	mov	al,bh
0000CF0B: 3C 01                                                 	cmp	al,1
0000CF0D: 74 2A                                                 	je	sh_reg_imm_8bit
0000CF0F: E8 9F 3F 00 00                                        	call	operand_autodetect
0000CF14: 80 FA 01                                              	cmp	dl,1
0000CF17: 74 14                                                 	je	sh_reg_1
0000CF19: C6 05 A3 A2 01 00 C1                                  	mov	[base_code],0C1h
0000CF20: E8 61 40 00 00                                        	call	store_nomem_instruction
0000CF25: 88 D0                                                 	mov	al,dl
0000CF27: AA                                                    	stos	byte [edi]
0000CF28: E9 43 80 FF FF                                        	jmp	instruction_assembled
                                                                      sh_reg_1:
0000CF2D: C6 05 A3 A2 01 00 D1                                  	mov	[base_code],0D1h
0000CF34: E9 BC E7 FF FF                                        	jmp	nomem_instruction_ready
                                                                      sh_reg_imm_8bit:
0000CF39: 80 FA 01                                              	cmp	dl,1
0000CF3C: 74 14                                                 	je	sh_reg_1_8bit
0000CF3E: C6 05 A3 A2 01 00 C0                                  	mov	[base_code],0C0h
0000CF45: E8 3C 40 00 00                                        	call	store_nomem_instruction
0000CF4A: 88 D0                                                 	mov	al,dl
0000CF4C: AA                                                    	stos	byte [edi]
0000CF4D: E9 1E 80 FF FF                                        	jmp	instruction_assembled
                                                                      sh_reg_1_8bit:
0000CF52: C6 05 A3 A2 01 00 D0                                  	mov	[base_code],0D0h
0000CF59: E9 97 E7 FF FF                                        	jmp	nomem_instruction_ready
                                                                shd_instruction:
0000CF5E: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000CF65: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000CF6A: AC                                                    	lods	byte [esi]
0000CF6B: E8 BA 3D 00 00                                        	call	get_size_operator
0000CF70: 3C 10                                                 	cmp	al,10h
0000CF72: 0F 84 93 00 00 00                                     	je	shd_reg
0000CF78: 3C 5B                                                 	cmp	al,'['
0000CF7A: 0F 85 B4 39 FF FF                                     	jne	invalid_operand
                                                                      shd_mem:
0000CF80: E8 01 3E 00 00                                        	call	get_address
0000CF85: 52 53 51                                              	push	edx ebx ecx
0000CF88: AC                                                    	lods	byte [esi]
0000CF89: 3C 2C                                                 	cmp	al,','
0000CF8B: 0F 85 A3 39 FF FF                                     	jne	invalid_operand
0000CF91: E8 DE 3C 00 00                                        	call	take_register
0000CF96: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000CF9B: AC                                                    	lods	byte [esi]
0000CF9C: 3C 2C                                                 	cmp	al,','
0000CF9E: 0F 85 90 39 FF FF                                     	jne	invalid_operand
0000CFA4: 88 E0                                                 	mov	al,ah
0000CFA6: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000CFAD: 50                                                    	push	eax
0000CFAE: AC                                                    	lods	byte [esi]
0000CFAF: E8 76 3D 00 00                                        	call	get_size_operator
0000CFB4: 3C 28                                                 	cmp	al,'('
0000CFB6: 74 25                                                 	je	shd_mem_reg_imm
0000CFB8: 3C 10                                                 	cmp	al,10h
0000CFBA: 0F 85 74 39 FF FF                                     	jne	invalid_operand
0000CFC0: AC                                                    	lods	byte [esi]
0000CFC1: 3C 11                                                 	cmp	al,11h
0000CFC3: 0F 85 6B 39 FF FF                                     	jne	invalid_operand
0000CFC9: 58 59 5B 5A                                           	pop	eax ecx ebx edx
0000CFCD: E8 E1 3E 00 00                                        	call	operand_autodetect
0000CFD2: FE 05 A4 A2 01 00                                     	inc	[extended_code]
0000CFD8: E9 3D E5 FF FF                                        	jmp	instruction_ready
                                                                      shd_mem_reg_imm:
0000CFDD: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000CFE2: 08 C0                                                 	or	al,al
0000CFE4: 74 08                                                 	jz	shd_mem_reg_imm_size_ok
0000CFE6: 3C 01                                                 	cmp	al,1
0000CFE8: 0F 85 50 39 FF FF                                     	jne	invalid_operand_size
                                                                      shd_mem_reg_imm_size_ok:
0000CFEE: E8 BA A2 FF FF                                        	call	get_byte_value
0000CFF3: A2 F4 A1 01 00                                        	mov	byte [value],al
0000CFF8: 58 59 5B 5A                                           	pop	eax ecx ebx edx
0000CFFC: E8 B2 3E 00 00                                        	call	operand_autodetect
0000D001: E8 63 45 00 00                                        	call	store_instruction_with_imm8
0000D006: E9 65 7F FF FF                                        	jmp	instruction_assembled
                                                                      shd_reg:
0000D00B: AC                                                    	lods	byte [esi]
0000D00C: E8 72 3C 00 00                                        	call	convert_register
0000D011: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000D016: AC                                                    	lods	byte [esi]
0000D017: 3C 2C                                                 	cmp	al,','
0000D019: 0F 85 15 39 FF FF                                     	jne	invalid_operand
0000D01F: E8 50 3C 00 00                                        	call	take_register
0000D024: 8A 1D A6 A2 01 00                                     	mov	bl,[postbyte_register]
0000D02A: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000D02F: 88 E0                                                 	mov	al,ah
0000D031: 50 53                                                 	push	eax ebx
0000D033: AC                                                    	lods	byte [esi]
0000D034: 3C 2C                                                 	cmp	al,','
0000D036: 0F 85 F8 38 FF FF                                     	jne	invalid_operand
0000D03C: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000D043: AC                                                    	lods	byte [esi]
0000D044: E8 E1 3C 00 00                                        	call	get_size_operator
0000D049: 3C 28                                                 	cmp	al,'('
0000D04B: 74 23                                                 	je	shd_reg_reg_imm
0000D04D: 3C 10                                                 	cmp	al,10h
0000D04F: 0F 85 DF 38 FF FF                                     	jne	invalid_operand
0000D055: AC                                                    	lods	byte [esi]
0000D056: 3C 11                                                 	cmp	al,11h
0000D058: 0F 85 D6 38 FF FF                                     	jne	invalid_operand
0000D05E: 5B 58                                                 	pop	ebx eax
0000D060: E8 4E 3E 00 00                                        	call	operand_autodetect
0000D065: FE 05 A4 A2 01 00                                     	inc	[extended_code]
0000D06B: E9 85 E6 FF FF                                        	jmp	nomem_instruction_ready
                                                                      shd_reg_reg_imm:
0000D070: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000D075: 08 C0                                                 	or	al,al
0000D077: 74 08                                                 	jz	shd_reg_reg_imm_size_ok
0000D079: 3C 01                                                 	cmp	al,1
0000D07B: 0F 85 BD 38 FF FF                                     	jne	invalid_operand_size
                                                                      shd_reg_reg_imm_size_ok:
0000D081: E8 27 A2 FF FF                                        	call	get_byte_value
0000D086: 88 C2                                                 	mov	dl,al
0000D088: 5B 58                                                 	pop	ebx eax
0000D08A: E8 24 3E 00 00                                        	call	operand_autodetect
0000D08F: E8 F2 3E 00 00                                        	call	store_nomem_instruction
0000D094: 88 D0                                                 	mov	al,dl
0000D096: AA                                                    	stos	byte [edi]
0000D097: E9 D4 7E FF FF                                        	jmp	instruction_assembled
                                                                movx_instruction:
0000D09C: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000D0A3: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000D0A8: E8 C7 3B 00 00                                        	call	take_register
0000D0AD: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000D0B2: 88 E0                                                 	mov	al,ah
0000D0B4: 50                                                    	push	eax
0000D0B5: AC                                                    	lods	byte [esi]
0000D0B6: 3C 2C                                                 	cmp	al,','
0000D0B8: 0F 85 76 38 FF FF                                     	jne	invalid_operand
0000D0BE: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000D0C5: AC                                                    	lods	byte [esi]
0000D0C6: E8 5F 3C 00 00                                        	call	get_size_operator
0000D0CB: 3C 10                                                 	cmp	al,10h
0000D0CD: 74 49                                                 	je	movx_reg
0000D0CF: 3C 5B                                                 	cmp	al,'['
0000D0D1: 0F 85 5D 38 FF FF                                     	jne	invalid_operand
0000D0D7: E8 AA 3C 00 00                                        	call	get_address
0000D0DC: 58                                                    	pop	eax
0000D0DD: 8A 25 98 A2 01 00                                     	mov	ah,[operand_size]
0000D0E3: 08 E4                                                 	or	ah,ah
0000D0E5: 74 26                                                 	jz	movx_unknown_size
0000D0E7: 38 C4                                                 	cmp	ah,al
0000D0E9: 0F 83 4F 38 FF FF                                     	jae	invalid_operand_size
0000D0EF: 80 FC 01                                              	cmp	ah,1
0000D0F2: 74 0F                                                 	je	movx_mem_store
0000D0F4: 80 FC 02                                              	cmp	ah,2
0000D0F7: 0F 85 41 38 FF FF                                     	jne	invalid_operand_size
0000D0FD: FE 05 A4 A2 01 00                                     	inc	[extended_code]
                                                                      movx_mem_store:
0000D103: E8 AB 3D 00 00                                        	call	operand_autodetect
0000D108: E9 0D E4 FF FF                                        	jmp	instruction_ready
                                                                      movx_unknown_size:
0000D10D: 3C 02                                                 	cmp	al,2
0000D10F: 74 F2                                                 	je	movx_mem_store
0000D111: E8 4E E7 FF FF                                        	call	recoverable_unknown_size
0000D116: EB EB                                                 	jmp	movx_mem_store
                                                                      movx_reg:
0000D118: AC                                                    	lods	byte [esi]
0000D119: E8 65 3B 00 00                                        	call	convert_register
0000D11E: 5B                                                    	pop	ebx
0000D11F: 86 D8                                                 	xchg	bl,al
0000D121: 38 C4                                                 	cmp	ah,al
0000D123: 0F 83 15 38 FF FF                                     	jae	invalid_operand_size
0000D129: 80 FC 01                                              	cmp	ah,1
0000D12C: 74 0A                                                 	je	movx_reg_8bit
0000D12E: 80 FC 02                                              	cmp	ah,2
0000D131: 74 0F                                                 	je	movx_reg_16bit
0000D133: E9 06 38 FF FF                                        	jmp	invalid_operand_size
                                                                      movx_reg_8bit:
0000D138: E8 76 3D 00 00                                        	call	operand_autodetect
0000D13D: E9 B3 E5 FF FF                                        	jmp	nomem_instruction_ready
                                                                      movx_reg_16bit:
0000D142: E8 6C 3D 00 00                                        	call	operand_autodetect
0000D147: FE 05 A4 A2 01 00                                     	inc	[extended_code]
0000D14D: E9 A3 E5 FF FF                                        	jmp	nomem_instruction_ready
                                                                movsxd_instruction:
0000D152: A2 A3 A2 01 00                                        	mov	[base_code],al
0000D157: E8 18 3B 00 00                                        	call	take_register
0000D15C: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000D161: 80 FC 08                                              	cmp	ah,8
0000D164: 0F 85 D4 37 FF FF                                     	jne	invalid_operand_size
0000D16A: AC                                                    	lods	byte [esi]
0000D16B: 3C 2C                                                 	cmp	al,','
0000D16D: 0F 85 C1 37 FF FF                                     	jne	invalid_operand
0000D173: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000D17A: AC                                                    	lods	byte [esi]
0000D17B: E8 AA 3B 00 00                                        	call	get_size_operator
0000D180: 3C 10                                                 	cmp	al,10h
0000D182: 74 2D                                                 	je	movsxd_reg
0000D184: 3C 5B                                                 	cmp	al,'['
0000D186: 0F 85 A8 37 FF FF                                     	jne	invalid_operand
0000D18C: E8 F5 3B 00 00                                        	call	get_address
0000D191: 80 3D 98 A2 01 00 04                                  	cmp	[operand_size],4
0000D198: 74 0D                                                 	je	movsxd_mem_store
0000D19A: 80 3D 98 A2 01 00 00                                  	cmp	[operand_size],0
0000D1A1: 0F 85 97 37 FF FF                                     	jne	invalid_operand_size
                                                                      movsxd_mem_store:
0000D1A7: E8 F2 3C 00 00                                        	call	operand_64bit
0000D1AC: E9 69 E3 FF FF                                        	jmp	instruction_ready
                                                                      movsxd_reg:
0000D1B1: AC                                                    	lods	byte [esi]
0000D1B2: E8 CC 3A 00 00                                        	call	convert_register
0000D1B7: 80 FC 04                                              	cmp	ah,4
0000D1BA: 0F 85 7E 37 FF FF                                     	jne	invalid_operand_size
0000D1C0: 88 C3                                                 	mov	bl,al
0000D1C2: E8 D7 3C 00 00                                        	call	operand_64bit
0000D1C7: E9 29 E5 FF FF                                        	jmp	nomem_instruction_ready
                                                                bt_instruction:
0000D1CC: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000D1D1: C0 E0 03                                              	shl	al,3
0000D1D4: 04 83                                                 	add	al,83h
0000D1D6: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000D1DB: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000D1E2: AC                                                    	lods	byte [esi]
0000D1E3: E8 42 3B 00 00                                        	call	get_size_operator
0000D1E8: 3C 10                                                 	cmp	al,10h
0000D1EA: 0F 84 99 00 00 00                                     	je	bt_reg
0000D1F0: 3C 5B                                                 	cmp	al,'['
0000D1F2: 0F 85 3C 37 FF FF                                     	jne	invalid_operand
0000D1F8: E8 89 3B 00 00                                        	call	get_address
0000D1FD: 50 53 51                                              	push	eax ebx ecx
0000D200: AC                                                    	lods	byte [esi]
0000D201: 3C 2C                                                 	cmp	al,','
0000D203: 0F 85 2B 37 FF FF                                     	jne	invalid_operand
0000D209: 80 3E 28                                              	cmp	byte [esi],'('
0000D20C: 74 24                                                 	je	bt_mem_imm
0000D20E: 80 3E 11                                              	cmp	byte [esi],11h
0000D211: 75 06                                                 	jne	bt_mem_reg
0000D213: 80 7E 02 28                                           	cmp	byte [esi+2],'('
0000D217: 74 19                                                 	je	bt_mem_imm
                                                                      bt_mem_reg:
0000D219: E8 56 3A 00 00                                        	call	take_register
0000D21E: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000D223: 59 5B 5A                                              	pop	ecx ebx edx
0000D226: 88 E0                                                 	mov	al,ah
0000D228: E8 86 3C 00 00                                        	call	operand_autodetect
0000D22D: E9 E8 E2 FF FF                                        	jmp	instruction_ready
                                                                      bt_mem_imm:
0000D232: 30 C0                                                 	xor	al,al
0000D234: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
0000D23A: 50                                                    	push	eax
0000D23B: AC                                                    	lods	byte [esi]
0000D23C: E8 E9 3A 00 00                                        	call	get_size_operator
0000D241: 3C 28                                                 	cmp	al,'('
0000D243: 0F 85 EB 36 FF FF                                     	jne	invalid_operand
0000D249: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000D24E: 08 C0                                                 	or	al,al
0000D250: 74 08                                                 	jz	bt_mem_imm_size_ok
0000D252: 3C 01                                                 	cmp	al,1
0000D254: 0F 85 E4 36 FF FF                                     	jne	invalid_operand_size
                                                                      bt_mem_imm_size_ok:
0000D25A: E8 4E A0 FF FF                                        	call	get_byte_value
0000D25F: A2 F4 A1 01 00                                        	mov	byte [value],al
0000D264: 58                                                    	pop	eax
0000D265: 08 C0                                                 	or	al,al
0000D267: 74 19                                                 	jz	bt_mem_imm_nosize
0000D269: E8 45 3C 00 00                                        	call	operand_autodetect
                                                                      bt_mem_imm_store:
0000D26E: 59 5B 5A                                              	pop	ecx ebx edx
0000D271: C6 05 A4 A2 01 00 BA                                  	mov	[extended_code],0BAh
0000D278: E8 EC 42 00 00                                        	call	store_instruction_with_imm8
0000D27D: E9 EE 7C FF FF                                        	jmp	instruction_assembled
                                                                      bt_mem_imm_nosize:
0000D282: E8 DD E5 FF FF                                        	call	recoverable_unknown_size
0000D287: EB E5                                                 	jmp	bt_mem_imm_store
                                                                      bt_reg:
0000D289: AC                                                    	lods	byte [esi]
0000D28A: E8 F4 39 00 00                                        	call	convert_register
0000D28F: 88 C3                                                 	mov	bl,al
0000D291: AC                                                    	lods	byte [esi]
0000D292: 3C 2C                                                 	cmp	al,','
0000D294: 0F 85 9A 36 FF FF                                     	jne	invalid_operand
0000D29A: 80 3E 28                                              	cmp	byte [esi],'('
0000D29D: 74 21                                                 	je	bt_reg_imm
0000D29F: 80 3E 11                                              	cmp	byte [esi],11h
0000D2A2: 75 06                                                 	jne	bt_reg_reg
0000D2A4: 80 7E 02 28                                           	cmp	byte [esi+2],'('
0000D2A8: 74 16                                                 	je	bt_reg_imm
                                                                      bt_reg_reg:
0000D2AA: E8 C5 39 00 00                                        	call	take_register
0000D2AF: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000D2B4: 88 E0                                                 	mov	al,ah
0000D2B6: E8 F8 3B 00 00                                        	call	operand_autodetect
0000D2BB: E9 35 E4 FF FF                                        	jmp	nomem_instruction_ready
                                                                      bt_reg_imm:
0000D2C0: 30 C0                                                 	xor	al,al
0000D2C2: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
0000D2C8: 50 53                                                 	push	eax ebx
0000D2CA: AC                                                    	lods	byte [esi]
0000D2CB: E8 5A 3A 00 00                                        	call	get_size_operator
0000D2D0: 3C 28                                                 	cmp	al,'('
0000D2D2: 0F 85 5C 36 FF FF                                     	jne	invalid_operand
0000D2D8: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000D2DD: 08 C0                                                 	or	al,al
0000D2DF: 74 08                                                 	jz	bt_reg_imm_size_ok
0000D2E1: 3C 01                                                 	cmp	al,1
0000D2E3: 0F 85 55 36 FF FF                                     	jne	invalid_operand_size
                                                                      bt_reg_imm_size_ok:
0000D2E9: E8 BF 9F FF FF                                        	call	get_byte_value
0000D2EE: A2 F4 A1 01 00                                        	mov	byte [value],al
0000D2F3: 5B 58                                                 	pop	ebx eax
0000D2F5: E8 B9 3B 00 00                                        	call	operand_autodetect
                                                                      bt_reg_imm_store:
0000D2FA: C6 05 A4 A2 01 00 BA                                  	mov	[extended_code],0BAh
0000D301: E8 80 3C 00 00                                        	call	store_nomem_instruction
0000D306: A0 F4 A1 01 00                                        	mov	al,byte [value]
0000D30B: AA                                                    	stos	byte [edi]
0000D30C: E9 5F 7C FF FF                                        	jmp	instruction_assembled
                                                                bs_instruction:
0000D311: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000D316: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000D31D: E8 1D 00 00 00                                        	call	get_reg_mem
0000D322: 72 0F                                                 	jc	bs_reg_reg
0000D324: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000D329: E8 85 3B 00 00                                        	call	operand_autodetect
0000D32E: E9 E7 E1 FF FF                                        	jmp	instruction_ready
                                                                      bs_reg_reg:
0000D333: 88 E0                                                 	mov	al,ah
0000D335: E8 79 3B 00 00                                        	call	operand_autodetect
0000D33A: E9 B6 E3 FF FF                                        	jmp	nomem_instruction_ready
                                                                      get_reg_mem:
0000D33F: E8 30 39 00 00                                        	call	take_register
0000D344: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000D349: AC                                                    	lods	byte [esi]
0000D34A: 3C 2C                                                 	cmp	al,','
0000D34C: 0F 85 E2 35 FF FF                                     	jne	invalid_operand
0000D352: AC                                                    	lods	byte [esi]
0000D353: E8 D2 39 00 00                                        	call	get_size_operator
0000D358: 3C 10                                                 	cmp	al,10h
0000D35A: 74 0F                                                 	je	get_reg_reg
0000D35C: 3C 5B                                                 	cmp	al,'['
0000D35E: 0F 85 BC 35 FF FF                                     	jne	invalid_argument
0000D364: E8 1D 3A 00 00                                        	call	get_address
0000D369: F8                                                    	clc
0000D36A: C3                                                    	ret
                                                                      get_reg_reg:
0000D36B: AC                                                    	lods	byte [esi]
0000D36C: E8 12 39 00 00                                        	call	convert_register
0000D371: 88 C3                                                 	mov	bl,al
0000D373: F9                                                    	stc
0000D374: C3                                                    	ret
                                                                ud_instruction:
0000D375: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000D37A: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000D381: E8 B9 FF FF FF                                        	call	get_reg_mem
0000D386: 72 12                                                 	jc	ud_reg_reg
0000D388: 80 3D 98 A2 01 00 04                                  	cmp	[operand_size],4
0000D38F: 0F 85 A9 35 FF FF                                     	jne	invalid_operand_size
0000D395: E9 80 E1 FF FF                                        	jmp	instruction_ready
                                                                      ud_reg_reg:
0000D39A: 80 FC 04                                              	cmp	ah,4
0000D39D: 0F 85 9B 35 FF FF                                     	jne	invalid_operand_size
0000D3A3: E9 4D E3 FF FF                                        	jmp	nomem_instruction_ready
                                                                
                                                                imul_instruction:
0000D3A8: C6 05 A3 A2 01 00 F6                                  	mov	[base_code],0F6h
0000D3AF: C6 05 A6 A2 01 00 05                                  	mov	[postbyte_register],5
0000D3B6: AC                                                    	lods	byte [esi]
0000D3B7: E8 6E 39 00 00                                        	call	get_size_operator
0000D3BC: 3C 10                                                 	cmp	al,10h
0000D3BE: 74 32                                                 	je	imul_reg
0000D3C0: 3C 5B                                                 	cmp	al,'['
0000D3C2: 0F 85 6C 35 FF FF                                     	jne	invalid_operand
                                                                      imul_mem:
0000D3C8: E8 B9 39 00 00                                        	call	get_address
0000D3CD: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000D3D2: 3C 01                                                 	cmp	al,1
0000D3D4: 74 17                                                 	je	imul_mem_8bit
0000D3D6: 72 10                                                 	jb	imul_mem_nosize
0000D3D8: E8 D6 3A 00 00                                        	call	operand_autodetect
0000D3DD: FE 05 A3 A2 01 00                                     	inc	[base_code]
0000D3E3: E9 32 E1 FF FF                                        	jmp	instruction_ready
                                                                      imul_mem_nosize:
0000D3E8: E8 77 E4 FF FF                                        	call	recoverable_unknown_size
                                                                      imul_mem_8bit:
0000D3ED: E9 28 E1 FF FF                                        	jmp	instruction_ready
                                                                      imul_reg:
0000D3F2: AC                                                    	lods	byte [esi]
0000D3F3: E8 8B 38 00 00                                        	call	convert_register
0000D3F8: 80 3E 2C                                              	cmp	byte [esi],','
0000D3FB: 74 18                                                 	je	imul_reg_
0000D3FD: 88 C3                                                 	mov	bl,al
0000D3FF: 88 E0                                                 	mov	al,ah
0000D401: 3C 01                                                 	cmp	al,1
0000D403: 74 0B                                                 	je	imul_reg_8bit
0000D405: E8 A9 3A 00 00                                        	call	operand_autodetect
0000D40A: FE 05 A3 A2 01 00                                     	inc	[base_code]
                                                                      imul_reg_8bit:
0000D410: E9 E0 E2 FF FF                                        	jmp	nomem_instruction_ready
                                                                      imul_reg_:
0000D415: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000D41A: 46                                                    	inc	esi
0000D41B: 80 3E 28                                              	cmp	byte [esi],'('
0000D41E: 0F 84 33 01 00 00                                     	je	imul_reg_imm
0000D424: 80 3E 11                                              	cmp	byte [esi],11h
0000D427: 75 0A                                                 	jne	imul_reg_noimm
0000D429: 80 7E 02 28                                           	cmp	byte [esi+2],'('
0000D42D: 0F 84 24 01 00 00                                     	je	imul_reg_imm
                                                                      imul_reg_noimm:
0000D433: AC                                                    	lods	byte [esi]
0000D434: E8 F1 38 00 00                                        	call	get_size_operator
0000D439: 3C 10                                                 	cmp	al,10h
0000D43B: 0F 84 1F 01 00 00                                     	je	imul_reg_reg
0000D441: 3C 5B                                                 	cmp	al,'['
0000D443: 0F 85 EB 34 FF FF                                     	jne	invalid_operand
                                                                      imul_reg_mem:
0000D449: E8 38 39 00 00                                        	call	get_address
0000D44E: 52 53 51                                              	push	edx ebx ecx
0000D451: 80 3E 2C                                              	cmp	byte [esi],','
0000D454: 74 20                                                 	je	imul_reg_mem_imm
0000D456: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000D45B: E8 53 3A 00 00                                        	call	operand_autodetect
0000D460: 59 5B 5A                                              	pop	ecx ebx edx
0000D463: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000D46A: C6 05 A4 A2 01 00 AF                                  	mov	[extended_code],0AFh
0000D471: E9 A4 E0 FF FF                                        	jmp	instruction_ready
                                                                      imul_reg_mem_imm:
0000D476: 46                                                    	inc	esi
0000D477: AC                                                    	lods	byte [esi]
0000D478: E8 AD 38 00 00                                        	call	get_size_operator
0000D47D: 3C 28                                                 	cmp	al,'('
0000D47F: 0F 85 AF 34 FF FF                                     	jne	invalid_operand
0000D485: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000D48A: 3C 02                                                 	cmp	al,2
0000D48C: 74 32                                                 	je	imul_reg_mem_imm_16bit
0000D48E: 3C 04                                                 	cmp	al,4
0000D490: 74 70                                                 	je	imul_reg_mem_imm_32bit
0000D492: 3C 08                                                 	cmp	al,8
0000D494: 0F 85 A4 34 FF FF                                     	jne	invalid_operand_size
                                                                      imul_reg_mem_imm_64bit:
0000D49A: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000D4A1: 0F 85 D3 34 FF FF                                     	jne	long_immediate_not_encodable
0000D4A7: E8 F2 39 00 00                                        	call	operand_64bit
0000D4AC: E8 AB E1 FF FF                                        	call	get_simm32
0000D4B1: 80 3D B4 A2 01 00 04                                  	cmp	[value_type],4
0000D4B8: 0F 83 BC 34 FF FF                                     	jae	long_immediate_not_encodable
0000D4BE: EB 4C                                                 	jmp	imul_reg_mem_imm_32bit_ok
                                                                      imul_reg_mem_imm_16bit:
0000D4C0: E8 B7 39 00 00                                        	call	operand_16bit
0000D4C5: E8 6E 9E FF FF                                        	call	get_word_value
0000D4CA: 66 A3 F4 A1 01 00                                     	mov	word [value],ax
0000D4D0: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000D4D7: 75 15                                                 	jne	imul_reg_mem_imm_16bit_store
0000D4D9: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000D4E0: 75 0C                                                 	jne	imul_reg_mem_imm_16bit_store
0000D4E2: 66 83 F8 80                                           	cmp	ax,-80h
0000D4E6: 7C 06                                                 	jl	imul_reg_mem_imm_16bit_store
0000D4E8: 66 3D 80 00                                           	cmp	ax,80h
0000D4EC: 7C 55                                                 	jl	imul_reg_mem_imm_8bit_store
                                                                      imul_reg_mem_imm_16bit_store:
0000D4EE: 59 5B 5A                                              	pop	ecx ebx edx
0000D4F1: C6 05 A3 A2 01 00 69                                  	mov	[base_code],69h
0000D4F8: E8 7F 40 00 00                                        	call	store_instruction_with_imm16
0000D4FD: E9 6E 7A FF FF                                        	jmp	instruction_assembled
                                                                      imul_reg_mem_imm_32bit:
0000D502: E8 86 39 00 00                                        	call	operand_32bit
0000D507: E8 74 9E FF FF                                        	call	get_dword_value
                                                                      imul_reg_mem_imm_32bit_ok:
0000D50C: A3 F4 A1 01 00                                        	mov	dword [value],eax
0000D511: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000D518: 75 15                                                 	jne	imul_reg_mem_imm_32bit_store
0000D51A: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000D521: 75 0C                                                 	jne	imul_reg_mem_imm_32bit_store
0000D523: 83 F8 80                                              	cmp	eax,-80h
0000D526: 7C 07                                                 	jl	imul_reg_mem_imm_32bit_store
0000D528: 3D 80 00 00 00                                        	cmp	eax,80h
0000D52D: 7C 14                                                 	jl	imul_reg_mem_imm_8bit_store
                                                                      imul_reg_mem_imm_32bit_store:
0000D52F: 59 5B 5A                                              	pop	ecx ebx edx
0000D532: C6 05 A3 A2 01 00 69                                  	mov	[base_code],69h
0000D539: E8 58 40 00 00                                        	call	store_instruction_with_imm32
0000D53E: E9 2D 7A FF FF                                        	jmp	instruction_assembled
                                                                      imul_reg_mem_imm_8bit_store:
0000D543: 59 5B 5A                                              	pop	ecx ebx edx
0000D546: C6 05 A3 A2 01 00 6B                                  	mov	[base_code],6Bh
0000D54D: E8 17 40 00 00                                        	call	store_instruction_with_imm8
0000D552: E9 19 7A FF FF                                        	jmp	instruction_assembled
                                                                      imul_reg_imm:
0000D557: 8A 1D A6 A2 01 00                                     	mov	bl,[postbyte_register]
0000D55D: 4E                                                    	dec	esi
0000D55E: EB 27                                                 	jmp	imul_reg_reg_imm
                                                                      imul_reg_reg:
0000D560: AC                                                    	lods	byte [esi]
0000D561: E8 1D 37 00 00                                        	call	convert_register
0000D566: 88 C3                                                 	mov	bl,al
0000D568: 80 3E 2C                                              	cmp	byte [esi],','
0000D56B: 74 1A                                                 	je	imul_reg_reg_imm
0000D56D: 88 E0                                                 	mov	al,ah
0000D56F: E8 3F 39 00 00                                        	call	operand_autodetect
0000D574: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000D57B: C6 05 A4 A2 01 00 AF                                  	mov	[extended_code],0AFh
0000D582: E9 6E E1 FF FF                                        	jmp	nomem_instruction_ready
                                                                      imul_reg_reg_imm:
0000D587: 46                                                    	inc	esi
0000D588: AC                                                    	lods	byte [esi]
0000D589: E8 9C 37 00 00                                        	call	get_size_operator
0000D58E: 3C 28                                                 	cmp	al,'('
0000D590: 0F 85 9E 33 FF FF                                     	jne	invalid_operand
0000D596: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000D59B: 3C 02                                                 	cmp	al,2
0000D59D: 74 33                                                 	je	imul_reg_reg_imm_16bit
0000D59F: 3C 04                                                 	cmp	al,4
0000D5A1: 74 77                                                 	je	imul_reg_reg_imm_32bit
0000D5A3: 3C 08                                                 	cmp	al,8
0000D5A5: 0F 85 93 33 FF FF                                     	jne	invalid_operand_size
                                                                      imul_reg_reg_imm_64bit:
0000D5AB: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000D5B2: 0F 85 C2 33 FF FF                                     	jne	long_immediate_not_encodable
0000D5B8: E8 E1 38 00 00                                        	call	operand_64bit
0000D5BD: 53                                                    	push	ebx
0000D5BE: E8 99 E0 FF FF                                        	call	get_simm32
0000D5C3: 80 3D B4 A2 01 00 04                                  	cmp	[value_type],4
0000D5CA: 0F 83 AA 33 FF FF                                     	jae	long_immediate_not_encodable
0000D5D0: EB 53                                                 	jmp	imul_reg_reg_imm_32bit_ok
                                                                      imul_reg_reg_imm_16bit:
0000D5D2: E8 A5 38 00 00                                        	call	operand_16bit
0000D5D7: 53                                                    	push	ebx
0000D5D8: E8 5B 9D FF FF                                        	call	get_word_value
0000D5DD: 5B                                                    	pop	ebx
0000D5DE: 66 89 C2                                              	mov	dx,ax
0000D5E1: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000D5E8: 75 15                                                 	jne	imul_reg_reg_imm_16bit_store
0000D5EA: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000D5F1: 75 0C                                                 	jne	imul_reg_reg_imm_16bit_store
0000D5F3: 66 83 F8 80                                           	cmp	ax,-80h
0000D5F7: 7C 06                                                 	jl	imul_reg_reg_imm_16bit_store
0000D5F9: 66 3D 80 00                                           	cmp	ax,80h
0000D5FD: 7C 60                                                 	jl	imul_reg_reg_imm_8bit_store
                                                                      imul_reg_reg_imm_16bit_store:
0000D5FF: C6 05 A3 A2 01 00 69                                  	mov	[base_code],69h
0000D606: E8 7B 39 00 00                                        	call	store_nomem_instruction
0000D60B: 66 89 D0                                              	mov	ax,dx
0000D60E: E8 CF AD FF FF                                        	call	mark_relocation
0000D613: 66 AB                                                 	stos	word [edi]
0000D615: E9 56 79 FF FF                                        	jmp	instruction_assembled
                                                                      imul_reg_reg_imm_32bit:
0000D61A: E8 6E 38 00 00                                        	call	operand_32bit
0000D61F: 53                                                    	push	ebx
0000D620: E8 5B 9D FF FF                                        	call	get_dword_value
                                                                      imul_reg_reg_imm_32bit_ok:
0000D625: 5B                                                    	pop	ebx
0000D626: 89 C2                                                 	mov	edx,eax
0000D628: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000D62F: 75 15                                                 	jne	imul_reg_reg_imm_32bit_store
0000D631: 80 3D AF A2 01 00 00                                  	cmp	[size_declared],0
0000D638: 75 0C                                                 	jne	imul_reg_reg_imm_32bit_store
0000D63A: 83 F8 80                                              	cmp	eax,-80h
0000D63D: 7C 07                                                 	jl	imul_reg_reg_imm_32bit_store
0000D63F: 3D 80 00 00 00                                        	cmp	eax,80h
0000D644: 7C 19                                                 	jl	imul_reg_reg_imm_8bit_store
                                                                      imul_reg_reg_imm_32bit_store:
0000D646: C6 05 A3 A2 01 00 69                                  	mov	[base_code],69h
0000D64D: E8 34 39 00 00                                        	call	store_nomem_instruction
0000D652: 89 D0                                                 	mov	eax,edx
0000D654: E8 89 AD FF FF                                        	call	mark_relocation
0000D659: AB                                                    	stos	dword [edi]
0000D65A: E9 11 79 FF FF                                        	jmp	instruction_assembled
                                                                      imul_reg_reg_imm_8bit_store:
0000D65F: C6 05 A3 A2 01 00 6B                                  	mov	[base_code],6Bh
0000D666: E8 1B 39 00 00                                        	call	store_nomem_instruction
0000D66B: 88 D0                                                 	mov	al,dl
0000D66D: AA                                                    	stos	byte [edi]
0000D66E: E9 FD 78 FF FF                                        	jmp	instruction_assembled
                                                                in_instruction:
0000D673: E8 FC 35 00 00                                        	call	take_register
0000D678: 08 C0                                                 	or	al,al
0000D67A: 0F 85 B4 32 FF FF                                     	jnz	invalid_operand
0000D680: AC                                                    	lods	byte [esi]
0000D681: 3C 2C                                                 	cmp	al,','
0000D683: 0F 85 AB 32 FF FF                                     	jne	invalid_operand
0000D689: 88 E0                                                 	mov	al,ah
0000D68B: 50                                                    	push	eax
0000D68C: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000D693: AC                                                    	lods	byte [esi]
0000D694: E8 91 36 00 00                                        	call	get_size_operator
0000D699: 3C 28                                                 	cmp	al,'('
0000D69B: 74 41                                                 	je	in_imm
0000D69D: 3C 10                                                 	cmp	al,10h
0000D69F: 74 05                                                 	je	in_reg
0000D6A1: E9 8E 32 FF FF                                        	jmp	invalid_operand
                                                                      in_reg:
0000D6A6: AC                                                    	lods	byte [esi]
0000D6A7: 3C 22                                                 	cmp	al,22h
0000D6A9: 0F 85 85 32 FF FF                                     	jne	invalid_operand
0000D6AF: 58                                                    	pop	eax
0000D6B0: 3C 01                                                 	cmp	al,1
0000D6B2: 74 22                                                 	je	in_al_dx
0000D6B4: 3C 02                                                 	cmp	al,2
0000D6B6: 74 08                                                 	je	in_ax_dx
0000D6B8: 3C 04                                                 	cmp	al,4
0000D6BA: 0F 85 7E 32 FF FF                                     	jne	invalid_operand_size
                                                                      in_ax_dx:
0000D6C0: E8 EE 37 00 00                                        	call	operand_autodetect
0000D6C5: C6 05 A3 A2 01 00 ED                                  	mov	[base_code],0EDh
0000D6CC: E8 62 38 00 00                                        	call	store_classic_instruction_code
0000D6D1: E9 9A 78 FF FF                                        	jmp	instruction_assembled
                                                                      in_al_dx:
0000D6D6: B0 EC                                                 	mov	al,0ECh
0000D6D8: AA                                                    	stos	byte [edi]
0000D6D9: E9 92 78 FF FF                                        	jmp	instruction_assembled
                                                                      in_imm:
0000D6DE: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000D6E3: 08 C0                                                 	or	al,al
0000D6E5: 74 08                                                 	jz	in_imm_size_ok
0000D6E7: 3C 01                                                 	cmp	al,1
0000D6E9: 0F 85 4F 32 FF FF                                     	jne	invalid_operand_size
                                                                      in_imm_size_ok:
0000D6EF: E8 B9 9B FF FF                                        	call	get_byte_value
0000D6F4: 88 C2                                                 	mov	dl,al
0000D6F6: 58                                                    	pop	eax
0000D6F7: 3C 01                                                 	cmp	al,1
0000D6F9: 74 25                                                 	je	in_al_imm
0000D6FB: 3C 02                                                 	cmp	al,2
0000D6FD: 74 08                                                 	je	in_ax_imm
0000D6FF: 3C 04                                                 	cmp	al,4
0000D701: 0F 85 37 32 FF FF                                     	jne	invalid_operand_size
                                                                      in_ax_imm:
0000D707: E8 A7 37 00 00                                        	call	operand_autodetect
0000D70C: C6 05 A3 A2 01 00 E5                                  	mov	[base_code],0E5h
0000D713: E8 1B 38 00 00                                        	call	store_classic_instruction_code
0000D718: 88 D0                                                 	mov	al,dl
0000D71A: AA                                                    	stos	byte [edi]
0000D71B: E9 50 78 FF FF                                        	jmp	instruction_assembled
                                                                      in_al_imm:
0000D720: B0 E4                                                 	mov	al,0E4h
0000D722: AA                                                    	stos	byte [edi]
0000D723: 88 D0                                                 	mov	al,dl
0000D725: AA                                                    	stos	byte [edi]
0000D726: E9 45 78 FF FF                                        	jmp	instruction_assembled
                                                                out_instruction:
0000D72B: AC                                                    	lods	byte [esi]
0000D72C: E8 F9 35 00 00                                        	call	get_size_operator
0000D731: 3C 28                                                 	cmp	al,'('
0000D733: 74 5E                                                 	je	out_imm
0000D735: 3C 10                                                 	cmp	al,10h
0000D737: 0F 85 F7 31 FF FF                                     	jne	invalid_operand
0000D73D: AC                                                    	lods	byte [esi]
0000D73E: 3C 22                                                 	cmp	al,22h
0000D740: 0F 85 EE 31 FF FF                                     	jne	invalid_operand
0000D746: AC                                                    	lods	byte [esi]
0000D747: 3C 2C                                                 	cmp	al,','
0000D749: 0F 85 E5 31 FF FF                                     	jne	invalid_operand
0000D74F: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000D756: E8 19 35 00 00                                        	call	take_register
0000D75B: 08 C0                                                 	or	al,al
0000D75D: 0F 85 D1 31 FF FF                                     	jnz	invalid_operand
0000D763: 88 E0                                                 	mov	al,ah
0000D765: 3C 01                                                 	cmp	al,1
0000D767: 74 22                                                 	je	out_dx_al
0000D769: 3C 02                                                 	cmp	al,2
0000D76B: 74 08                                                 	je	out_dx_ax
0000D76D: 3C 04                                                 	cmp	al,4
0000D76F: 0F 85 C9 31 FF FF                                     	jne	invalid_operand_size
                                                                      out_dx_ax:
0000D775: E8 39 37 00 00                                        	call	operand_autodetect
0000D77A: C6 05 A3 A2 01 00 EF                                  	mov	[base_code],0EFh
0000D781: E8 AD 37 00 00                                        	call	store_classic_instruction_code
0000D786: E9 E5 77 FF FF                                        	jmp	instruction_assembled
                                                                      out_dx_al:
0000D78B: B0 EE                                                 	mov	al,0EEh
0000D78D: AA                                                    	stos	byte [edi]
0000D78E: E9 DD 77 FF FF                                        	jmp	instruction_assembled
                                                                      out_imm:
0000D793: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000D798: 08 C0                                                 	or	al,al
0000D79A: 74 08                                                 	jz	out_imm_size_ok
0000D79C: 3C 01                                                 	cmp	al,1
0000D79E: 0F 85 9A 31 FF FF                                     	jne	invalid_operand_size
                                                                      out_imm_size_ok:
0000D7A4: E8 04 9B FF FF                                        	call	get_byte_value
0000D7A9: 88 C2                                                 	mov	dl,al
0000D7AB: AC                                                    	lods	byte [esi]
0000D7AC: 3C 2C                                                 	cmp	al,','
0000D7AE: 0F 85 80 31 FF FF                                     	jne	invalid_operand
0000D7B4: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000D7BB: E8 B4 34 00 00                                        	call	take_register
0000D7C0: 08 C0                                                 	or	al,al
0000D7C2: 0F 85 6C 31 FF FF                                     	jnz	invalid_operand
0000D7C8: 88 E0                                                 	mov	al,ah
0000D7CA: 3C 01                                                 	cmp	al,1
0000D7CC: 74 25                                                 	je	out_imm_al
0000D7CE: 3C 02                                                 	cmp	al,2
0000D7D0: 74 08                                                 	je	out_imm_ax
0000D7D2: 3C 04                                                 	cmp	al,4
0000D7D4: 0F 85 64 31 FF FF                                     	jne	invalid_operand_size
                                                                      out_imm_ax:
0000D7DA: E8 D4 36 00 00                                        	call	operand_autodetect
0000D7DF: C6 05 A3 A2 01 00 E7                                  	mov	[base_code],0E7h
0000D7E6: E8 48 37 00 00                                        	call	store_classic_instruction_code
0000D7EB: 88 D0                                                 	mov	al,dl
0000D7ED: AA                                                    	stos	byte [edi]
0000D7EE: E9 7D 77 FF FF                                        	jmp	instruction_assembled
                                                                      out_imm_al:
0000D7F3: B0 E6                                                 	mov	al,0E6h
0000D7F5: AA                                                    	stos	byte [edi]
0000D7F6: 88 D0                                                 	mov	al,dl
0000D7F8: AA                                                    	stos	byte [edi]
0000D7F9: E9 72 77 FF FF                                        	jmp	instruction_assembled
                                                                
                                                                call_instruction:
0000D7FE: C6 05 A6 A2 01 00 02                                  	mov	[postbyte_register],10b
0000D805: C6 05 A3 A2 01 00 E8                                  	mov	[base_code],0E8h
0000D80C: C6 05 A4 A2 01 00 9A                                  	mov	[extended_code],9Ah
0000D813: EB 15                                                 	jmp	process_jmp
                                                                jmp_instruction:
0000D815: C6 05 A6 A2 01 00 04                                  	mov	[postbyte_register],100b
0000D81C: C6 05 A3 A2 01 00 E9                                  	mov	[base_code],0E9h
0000D823: C6 05 A4 A2 01 00 EA                                  	mov	[extended_code],0EAh
                                                                      process_jmp:
0000D82A: AC                                                    	lods	byte [esi]
0000D82B: E8 41 35 00 00                                        	call	get_jump_operator
0000D830: F6 05 C3 A2 01 00 10                                  	test	[prefix_flags],10h
0000D837: 74 1B                                                 	jz	jmp_type_ok
0000D839: F6 05 AA A2 01 00 FD                                  	test	[jump_type],not 2
0000D840: 0F 85 E4 30 FF FF                                     	jnz	illegal_instruction
0000D846: C6 05 AA A2 01 00 02                                  	mov	[jump_type],2
0000D84D: 80 25 C3 A2 01 00 EF                                  	and	[prefix_flags],not 10h
                                                                      jmp_type_ok:
0000D854: E8 D1 34 00 00                                        	call	get_size_operator
0000D859: 3C 28                                                 	cmp	al,'('
0000D85B: 0F 84 78 01 00 00                                     	je	jmp_imm
0000D861: C6 05 A3 A2 01 00 FF                                  	mov	[base_code],0FFh
0000D868: 3C 10                                                 	cmp	al,10h
0000D86A: 0F 84 0F 01 00 00                                     	je	jmp_reg
0000D870: 3C 5B                                                 	cmp	al,'['
0000D872: 0F 85 BC 30 FF FF                                     	jne	invalid_operand
                                                                      jmp_mem:
0000D878: 80 3D AA A2 01 00 01                                  	cmp	[jump_type],1
0000D87F: 0F 84 A5 30 FF FF                                     	je	illegal_instruction
0000D885: E8 FC 34 00 00                                        	call	get_address
0000D88A: 89 C2                                                 	mov	edx,eax
0000D88C: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000D891: 08 C0                                                 	or	al,al
0000D893: 74 21                                                 	jz	jmp_mem_size_not_specified
0000D895: 3C 02                                                 	cmp	al,2
0000D897: 0F 84 CB 00 00 00                                     	je	jmp_mem_16bit
0000D89D: 3C 04                                                 	cmp	al,4
0000D89F: 0F 84 91 00 00 00                                     	je	jmp_mem_32bit
0000D8A5: 3C 06                                                 	cmp	al,6
0000D8A7: 74 62                                                 	je	jmp_mem_48bit
0000D8A9: 3C 08                                                 	cmp	al,8
0000D8AB: 74 36                                                 	je	jmp_mem_64bit
0000D8AD: 3C 0A                                                 	cmp	al,10
0000D8AF: 74 77                                                 	je	jmp_mem_80bit
0000D8B1: E9 88 30 FF FF                                        	jmp	invalid_operand_size
                                                                      jmp_mem_size_not_specified:
0000D8B6: 80 3D AA A2 01 00 03                                  	cmp	[jump_type],3
0000D8BD: 74 43                                                 	je	jmp_mem_far
0000D8BF: 80 3D AA A2 01 00 02                                  	cmp	[jump_type],2
0000D8C6: 74 05                                                 	je	jmp_mem_near
0000D8C8: E8 97 DF FF FF                                        	call	recoverable_unknown_size
                                                                      jmp_mem_near:
0000D8CD: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000D8D4: 0F 84 8E 00 00 00                                     	je	jmp_mem_16bit
0000D8DA: 80 3D BE A2 01 00 20                                  	cmp	[code_type],32
0000D8E1: 74 6E                                                 	je	jmp_mem_near_32bit
                                                                      jmp_mem_64bit:
0000D8E3: 80 3D AA A2 01 00 03                                  	cmp	[jump_type],3
0000D8EA: 0F 84 4E 30 FF FF                                     	je	invalid_operand_size
0000D8F0: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000D8F7: 0F 85 2D 30 FF FF                                     	jne	illegal_instruction
0000D8FD: E9 18 DC FF FF                                        	jmp	instruction_ready
                                                                      jmp_mem_far:
0000D902: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000D909: 74 24                                                 	je	jmp_mem_far_32bit
                                                                      jmp_mem_48bit:
0000D90B: E8 7D 35 00 00                                        	call	operand_32bit
                                                                      jmp_mem_far_store:
0000D910: 80 3D AA A2 01 00 02                                  	cmp	[jump_type],2
0000D917: 0F 84 21 30 FF FF                                     	je	invalid_operand_size
0000D91D: FE 05 A6 A2 01 00                                     	inc	[postbyte_register]
0000D923: E9 F2 DB FF FF                                        	jmp	instruction_ready
                                                                      jmp_mem_80bit:
0000D928: E8 71 35 00 00                                        	call	operand_64bit
0000D92D: EB E1                                                 	jmp	jmp_mem_far_store
                                                                      jmp_mem_far_32bit:
0000D92F: E8 48 35 00 00                                        	call	operand_16bit
0000D934: EB DA                                                 	jmp	jmp_mem_far_store
                                                                      jmp_mem_32bit:
0000D936: 80 3D AA A2 01 00 03                                  	cmp	[jump_type],3
0000D93D: 74 F0                                                 	je	jmp_mem_far_32bit
0000D93F: 80 3D AA A2 01 00 02                                  	cmp	[jump_type],2
0000D946: 74 09                                                 	je	jmp_mem_near_32bit
0000D948: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000D94F: 74 DE                                                 	je	jmp_mem_far_32bit
                                                                      jmp_mem_near_32bit:
0000D951: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000D958: 0F 84 CC 2F FF FF                                     	je	illegal_instruction
0000D95E: E8 2A 35 00 00                                        	call	operand_32bit
0000D963: E9 B2 DB FF FF                                        	jmp	instruction_ready
                                                                      jmp_mem_16bit:
0000D968: 80 3D AA A2 01 00 03                                  	cmp	[jump_type],3
0000D96F: 0F 84 C9 2F FF FF                                     	je	invalid_operand_size
0000D975: E8 02 35 00 00                                        	call	operand_16bit
0000D97A: E9 9B DB FF FF                                        	jmp	instruction_ready
                                                                      jmp_reg:
0000D97F: F6 05 AA A2 01 00 01                                  	test	[jump_type],1
0000D986: 0F 85 A8 2F FF FF                                     	jnz	invalid_operand
0000D98C: AC                                                    	lods	byte [esi]
0000D98D: E8 F1 32 00 00                                        	call	convert_register
0000D992: 88 C3                                                 	mov	bl,al
0000D994: 88 E0                                                 	mov	al,ah
0000D996: 3C 02                                                 	cmp	al,2
0000D998: 74 35                                                 	je	jmp_reg_16bit
0000D99A: 3C 04                                                 	cmp	al,4
0000D99C: 74 1A                                                 	je	jmp_reg_32bit
0000D99E: 3C 08                                                 	cmp	al,8
0000D9A0: 0F 85 98 2F FF FF                                     	jne	invalid_operand_size
                                                                      jmp_reg_64bit:
0000D9A6: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000D9AD: 0F 85 77 2F FF FF                                     	jne	illegal_instruction
0000D9B3: E9 3D DD FF FF                                        	jmp	nomem_instruction_ready
                                                                      jmp_reg_32bit:
0000D9B8: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000D9BF: 0F 84 65 2F FF FF                                     	je	illegal_instruction
0000D9C5: E8 C3 34 00 00                                        	call	operand_32bit
0000D9CA: E9 26 DD FF FF                                        	jmp	nomem_instruction_ready
                                                                      jmp_reg_16bit:
0000D9CF: E8 A8 34 00 00                                        	call	operand_16bit
0000D9D4: E9 1C DD FF FF                                        	jmp	nomem_instruction_ready
                                                                      jmp_imm:
0000D9D9: 80 3E 2E                                              	cmp	byte [esi],'.'
0000D9DC: 0F 84 C0 2F FF FF                                     	je	invalid_value
0000D9E2: 89 F3                                                 	mov	ebx,esi
0000D9E4: 4E                                                    	dec	esi
0000D9E5: E8 9D A3 FF FF                                        	call	skip_symbol
0000D9EA: 87 F3                                                 	xchg	esi,ebx
0000D9EC: 80 3B 3A                                              	cmp	byte [ebx],':'
0000D9EF: 0F 84 9A 01 00 00                                     	je	jmp_far
0000D9F5: 80 3D AA A2 01 00 03                                  	cmp	[jump_type],3
0000D9FC: 0F 84 32 2F FF FF                                     	je	invalid_operand
                                                                      jmp_near:
0000DA02: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000DA07: 3C 02                                                 	cmp	al,2
0000DA09: 0F 84 AD 00 00 00                                     	je	jmp_imm_16bit
0000DA0F: 3C 04                                                 	cmp	al,4
0000DA11: 74 22                                                 	je	jmp_imm_32bit
0000DA13: 3C 08                                                 	cmp	al,8
0000DA15: 74 71                                                 	je	jmp_imm_64bit
0000DA17: 08 C0                                                 	or	al,al
0000DA19: 0F 85 1F 2F FF FF                                     	jnz	invalid_operand_size
0000DA1F: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000DA26: 0F 84 90 00 00 00                                     	je	jmp_imm_16bit
0000DA2C: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DA33: 74 53                                                 	je	jmp_imm_64bit
                                                                      jmp_imm_32bit:
0000DA35: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DA3C: 0F 84 FC 2E FF FF                                     	je	invalid_operand_size
0000DA42: E8 0C 9B FF FF                                        	call	get_address_dword_value
0000DA47: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000DA4E: 75 04                                                 	jne	jmp_imm_32bit_prefix_ok
0000DA50: C6 07 66                                              	mov	byte [edi],66h
0000DA53: 47                                                    	inc	edi
                                                                      jmp_imm_32bit_prefix_ok:
0000DA54: E8 A2 00 00 00                                        	call	calculate_jump_offset
0000DA59: 99                                                    	cdq
0000DA5A: E8 AE 00 00 00                                        	call	check_for_short_jump
0000DA5F: 72 50                                                 	jc	jmp_short
                                                                      jmp_imm_32bit_store:
0000DA61: 89 C2                                                 	mov	edx,eax
0000DA63: 83 EA 03                                              	sub	edx,3
0000DA66: 71 0D                                                 	jno	jmp_imm_32bit_ok
0000DA68: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DA6F: 0F 84 F4 00 00 00                                     	je	jump_out_of_range
                                                                      jmp_imm_32bit_ok:
0000DA75: A0 A3 A2 01 00                                        	mov	al,[base_code]
0000DA7A: AA                                                    	stos	byte [edi]
0000DA7B: 89 D0                                                 	mov	eax,edx
0000DA7D: E8 60 A9 FF FF                                        	call	mark_relocation
0000DA82: AB                                                    	stos	dword [edi]
0000DA83: E9 E8 74 FF FF                                        	jmp	instruction_assembled
                                                                      jmp_imm_64bit:
0000DA88: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DA8F: 0F 85 A9 2E FF FF                                     	jne	invalid_operand_size
0000DA95: E8 D0 9A FF FF                                        	call	get_address_qword_value
0000DA9A: E8 5C 00 00 00                                        	call	calculate_jump_offset
0000DA9F: 89 D1                                                 	mov	ecx,edx
0000DAA1: 99                                                    	cdq
0000DAA2: 39 CA                                                 	cmp	edx,ecx
0000DAA4: 0F 85 BF 00 00 00                                     	jne	jump_out_of_range
0000DAAA: E8 5E 00 00 00                                        	call	check_for_short_jump
0000DAAF: 73 B0                                                 	jnc	jmp_imm_32bit_store
                                                                      jmp_short:
0000DAB1: 88 C4                                                 	mov	ah,al
0000DAB3: B0 EB                                                 	mov	al,0EBh
0000DAB5: 66 AB                                                 	stos	word [edi]
0000DAB7: E9 B4 74 FF FF                                        	jmp	instruction_assembled
                                                                      jmp_imm_16bit:
0000DABC: E8 7B 9A FF FF                                        	call	get_address_word_value
0000DAC1: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000DAC8: 74 04                                                 	je	jmp_imm_16bit_prefix_ok
0000DACA: C6 07 66                                              	mov	byte [edi],66h
0000DACD: 47                                                    	inc	edi
                                                                      jmp_imm_16bit_prefix_ok:
0000DACE: E8 28 00 00 00                                        	call	calculate_jump_offset
0000DAD3: 98                                                    	cwde
0000DAD4: 99                                                    	cdq
0000DAD5: E8 33 00 00 00                                        	call	check_for_short_jump
0000DADA: 72 D5                                                 	jc	jmp_short
0000DADC: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000DAE3: 0F 85 67 2F FF FF                                     	jne	invalid_use_of_symbol
0000DAE9: 89 C2                                                 	mov	edx,eax
0000DAEB: 4A                                                    	dec	edx
0000DAEC: A0 A3 A2 01 00                                        	mov	al,[base_code]
0000DAF1: AA                                                    	stos	byte [edi]
0000DAF2: 89 D0                                                 	mov	eax,edx
0000DAF4: 66 AB                                                 	stos	word [edi]
0000DAF6: E9 75 74 FF FF                                        	jmp	instruction_assembled
                                                                      calculate_jump_offset:
0000DAFB: 83 C7 02                                              	add	edi,2
0000DAFE: 8B 2D C4 A1 01 00                                     	mov	ebp,[addressing_space]
0000DB04: E8 98 9D FF FF                                        	call	calculate_relative_offset
0000DB09: 83 EF 02                                              	sub	edi,2
0000DB0C: C3                                                    	ret
                                                                      check_for_short_jump:
0000DB0D: 80 3D AA A2 01 00 01                                  	cmp	[jump_type],1
0000DB14: 74 22                                                 	je	forced_short
0000DB16: 77 1E                                                 	ja	no_short_jump
0000DB18: 80 3D A3 A2 01 00 E8                                  	cmp	[base_code],0E8h
0000DB1F: 74 15                                                 	je	no_short_jump
0000DB21: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000DB28: 75 0C                                                 	jne	no_short_jump
0000DB2A: 3D 80 00 00 00                                        	cmp	eax,80h
0000DB2F: 72 36                                                 	jb	short_jump
0000DB31: 83 F8 80                                              	cmp	eax,-80h
0000DB34: 73 31                                                 	jae	short_jump
                                                                      no_short_jump:
0000DB36: F8                                                    	clc
0000DB37: C3                                                    	ret
                                                                      forced_short:
0000DB38: 80 3D A3 A2 01 00 E8                                  	cmp	[base_code],0E8h
0000DB3F: 0F 84 E5 2D FF FF                                     	je	illegal_instruction
0000DB45: 80 3D BC A2 01 00 00                                  	cmp	[next_pass_needed],0
0000DB4C: 75 0D                                                 	jne	jmp_short_value_type_ok
0000DB4E: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000DB55: 0F 85 F5 2E FF FF                                     	jne	invalid_use_of_symbol
                                                                      jmp_short_value_type_ok:
0000DB5B: 83 F8 80                                              	cmp	eax,-80h
0000DB5E: 73 07                                                 	jae	short_jump
0000DB60: 3D 80 00 00 00                                        	cmp	eax,80h
0000DB65: 73 02                                                 	jae	jump_out_of_range
                                                                      short_jump:
0000DB67: F9                                                    	stc
0000DB68: C3                                                    	ret
                                                                      jump_out_of_range:
0000DB69: 83 3D DC A1 01 00 00                                  	cmp	[error_line],0
0000DB70: 0F 85 FA 73 FF FF                                     	jne	instruction_assembled
0000DB76: A1 74 A1 01 00                                        	mov	eax,[current_line]
0000DB7B: A3 DC A1 01 00                                        	mov	[error_line],eax
0000DB80: C7 05 E0 A1 01 00 84 09 00 00                         	mov	[error],relative_jump_out_of_range
0000DB8A: E9 E1 73 FF FF                                        	jmp	instruction_assembled
                                                                      jmp_far:
0000DB8F: 80 3D AA A2 01 00 02                                  	cmp	[jump_type],2
0000DB96: 0F 84 98 2D FF FF                                     	je	invalid_operand
0000DB9C: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DBA3: 0F 84 81 2D FF FF                                     	je	illegal_instruction
0000DBA9: A0 A4 A2 01 00                                        	mov	al,[extended_code]
0000DBAE: A2 A3 A2 01 00                                        	mov	[base_code],al
0000DBB3: E8 80 97 FF FF                                        	call	get_word_value
0000DBB8: 50                                                    	push	eax
0000DBB9: 46                                                    	inc	esi
0000DBBA: AC                                                    	lods	byte [esi]
0000DBBB: 3C 28                                                 	cmp	al,'('
0000DBBD: 0F 85 71 2D FF FF                                     	jne	invalid_operand
0000DBC3: A0 B4 A2 01 00                                        	mov	al,[value_type]
0000DBC8: 50                                                    	push	eax
0000DBC9: FF 35 24 A2 01 00                                     	push	[symbol_identifier]
0000DBCF: 80 3E 2E                                              	cmp	byte [esi],'.'
0000DBD2: 0F 84 CA 2D FF FF                                     	je	invalid_value
0000DBD8: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000DBDD: 3C 04                                                 	cmp	al,4
0000DBDF: 74 15                                                 	je	jmp_far_16bit
0000DBE1: 3C 06                                                 	cmp	al,6
0000DBE3: 74 45                                                 	je	jmp_far_32bit
0000DBE5: 08 C0                                                 	or	al,al
0000DBE7: 0F 85 51 2D FF FF                                     	jnz	invalid_operand_size
0000DBED: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000DBF4: 75 34                                                 	jne	jmp_far_32bit
                                                                      jmp_far_16bit:
0000DBF6: E8 3D 97 FF FF                                        	call	get_word_value
0000DBFB: 89 C3                                                 	mov	ebx,eax
0000DBFD: E8 7A 32 00 00                                        	call	operand_16bit
0000DC02: E8 2C 33 00 00                                        	call	store_classic_instruction_code
0000DC07: 66 89 D8                                              	mov	ax,bx
0000DC0A: E8 D3 A7 FF FF                                        	call	mark_relocation
0000DC0F: 66 AB                                                 	stos	word [edi]
                                                                      jmp_far_segment:
0000DC11: 8F 05 24 A2 01 00                                     	pop	[symbol_identifier]
0000DC17: 58                                                    	pop	eax
0000DC18: A2 B4 A2 01 00                                        	mov	[value_type],al
0000DC1D: 58                                                    	pop	eax
0000DC1E: E8 BF A7 FF FF                                        	call	mark_relocation
0000DC23: 66 AB                                                 	stos	word [edi]
0000DC25: E9 46 73 FF FF                                        	jmp	instruction_assembled
                                                                      jmp_far_32bit:
0000DC2A: E8 51 97 FF FF                                        	call	get_dword_value
0000DC2F: 89 C3                                                 	mov	ebx,eax
0000DC31: E8 57 32 00 00                                        	call	operand_32bit
0000DC36: E8 F8 32 00 00                                        	call	store_classic_instruction_code
0000DC3B: 89 D8                                                 	mov	eax,ebx
0000DC3D: E8 A0 A7 FF FF                                        	call	mark_relocation
0000DC42: AB                                                    	stos	dword [edi]
0000DC43: EB CC                                                 	jmp	jmp_far_segment
                                                                conditional_jump:
0000DC45: A2 A3 A2 01 00                                        	mov	[base_code],al
0000DC4A: 80 25 C3 A2 01 00 EF                                  	and	[prefix_flags],not 10h
0000DC51: AC                                                    	lods	byte [esi]
0000DC52: E8 1A 31 00 00                                        	call	get_jump_operator
0000DC57: 80 3D AA A2 01 00 03                                  	cmp	[jump_type],3
0000DC5E: 0F 84 D0 2C FF FF                                     	je	invalid_operand
0000DC64: E8 C1 30 00 00                                        	call	get_size_operator
0000DC69: 3C 28                                                 	cmp	al,'('
0000DC6B: 0F 85 C3 2C FF FF                                     	jne	invalid_operand
0000DC71: 80 3E 2E                                              	cmp	byte [esi],'.'
0000DC74: 0F 84 28 2D FF FF                                     	je	invalid_value
0000DC7A: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000DC7F: 3C 02                                                 	cmp	al,2
0000DC81: 0F 84 B7 00 00 00                                     	je	conditional_jump_16bit
0000DC87: 3C 04                                                 	cmp	al,4
0000DC89: 74 22                                                 	je	conditional_jump_32bit
0000DC8B: 3C 08                                                 	cmp	al,8
0000DC8D: 74 78                                                 	je	conditional_jump_64bit
0000DC8F: 08 C0                                                 	or	al,al
0000DC91: 0F 85 A7 2C FF FF                                     	jnz	invalid_operand_size
0000DC97: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000DC9E: 0F 84 9A 00 00 00                                     	je	conditional_jump_16bit
0000DCA4: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DCAB: 74 5A                                                 	je	conditional_jump_64bit
                                                                      conditional_jump_32bit:
0000DCAD: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DCB4: 0F 84 84 2C FF FF                                     	je	invalid_operand_size
0000DCBA: E8 94 98 FF FF                                        	call	get_address_dword_value
0000DCBF: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000DCC6: 75 04                                                 	jne	conditional_jump_32bit_prefix_ok
0000DCC8: C6 07 66                                              	mov	byte [edi],66h
0000DCCB: 47                                                    	inc	edi
                                                                      conditional_jump_32bit_prefix_ok:
0000DCCC: E8 2A FE FF FF                                        	call	calculate_jump_offset
0000DCD1: 99                                                    	cdq
0000DCD2: E8 36 FE FF FF                                        	call	check_for_short_jump
0000DCD7: 72 57                                                 	jc	conditional_jump_short
                                                                      conditional_jump_32bit_store:
0000DCD9: 89 C2                                                 	mov	edx,eax
0000DCDB: 83 EA 04                                              	sub	edx,4
0000DCDE: 71 0D                                                 	jno	conditional_jump_32bit_range_ok
0000DCE0: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DCE7: 0F 84 7C FE FF FF                                     	je	jump_out_of_range
                                                                      conditional_jump_32bit_range_ok:
0000DCED: 8A 25 A3 A2 01 00                                     	mov	ah,[base_code]
0000DCF3: 80 C4 10                                              	add	ah,10h
0000DCF6: B0 0F                                                 	mov	al,0Fh
0000DCF8: 66 AB                                                 	stos	word [edi]
0000DCFA: 89 D0                                                 	mov	eax,edx
0000DCFC: E8 E1 A6 FF FF                                        	call	mark_relocation
0000DD01: AB                                                    	stos	dword [edi]
0000DD02: E9 69 72 FF FF                                        	jmp	instruction_assembled
                                                                      conditional_jump_64bit:
0000DD07: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DD0E: 0F 85 2A 2C FF FF                                     	jne	invalid_operand_size
0000DD14: E8 51 98 FF FF                                        	call	get_address_qword_value
0000DD19: E8 DD FD FF FF                                        	call	calculate_jump_offset
0000DD1E: 89 D1                                                 	mov	ecx,edx
0000DD20: 99                                                    	cdq
0000DD21: 39 CA                                                 	cmp	edx,ecx
0000DD23: 0F 85 40 FE FF FF                                     	jne	jump_out_of_range
0000DD29: E8 DF FD FF FF                                        	call	check_for_short_jump
0000DD2E: 73 A9                                                 	jnc	conditional_jump_32bit_store
                                                                      conditional_jump_short:
0000DD30: 88 C4                                                 	mov	ah,al
0000DD32: A0 A3 A2 01 00                                        	mov	al,[base_code]
0000DD37: 66 AB                                                 	stos	word [edi]
0000DD39: E9 32 72 FF FF                                        	jmp	instruction_assembled
                                                                      conditional_jump_16bit:
0000DD3E: E8 F9 97 FF FF                                        	call	get_address_word_value
0000DD43: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000DD4A: 74 04                                                 	je	conditional_jump_16bit_prefix_ok
0000DD4C: C6 07 66                                              	mov	byte [edi],66h
0000DD4F: 47                                                    	inc	edi
                                                                      conditional_jump_16bit_prefix_ok:
0000DD50: E8 A6 FD FF FF                                        	call	calculate_jump_offset
0000DD55: 98                                                    	cwde
0000DD56: 99                                                    	cdq
0000DD57: E8 B1 FD FF FF                                        	call	check_for_short_jump
0000DD5C: 72 D2                                                 	jc	conditional_jump_short
0000DD5E: 80 3D B4 A2 01 00 00                                  	cmp	[value_type],0
0000DD65: 0F 85 E5 2C FF FF                                     	jne	invalid_use_of_symbol
0000DD6B: 89 C2                                                 	mov	edx,eax
0000DD6D: 66 83 EA 02                                           	sub	dx,2
0000DD71: 8A 25 A3 A2 01 00                                     	mov	ah,[base_code]
0000DD77: 80 C4 10                                              	add	ah,10h
0000DD7A: B0 0F                                                 	mov	al,0Fh
0000DD7C: 66 AB                                                 	stos	word [edi]
0000DD7E: 89 D0                                                 	mov	eax,edx
0000DD80: 66 AB                                                 	stos	word [edi]
0000DD82: E9 E9 71 FF FF                                        	jmp	instruction_assembled
                                                                loop_instruction_16bit:
0000DD87: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DD8E: 0F 84 96 2B FF FF                                     	je	illegal_instruction
0000DD94: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000DD9B: 74 28                                                 	je	loop_instruction
0000DD9D: C6 05 9A A2 01 00 67                                  	mov	[operand_prefix],67h
0000DDA4: EB 1F                                                 	jmp	loop_instruction
                                                                loop_instruction_32bit:
0000DDA6: 80 3D BE A2 01 00 20                                  	cmp	[code_type],32
0000DDAD: 74 16                                                 	je	loop_instruction
0000DDAF: C6 05 9A A2 01 00 67                                  	mov	[operand_prefix],67h
0000DDB6: EB 0D                                                       jmp     loop_instruction
                                                                loop_instruction_64bit:
0000DDB8: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DDBF: 0F 85 65 2B FF FF                                     	jne	illegal_instruction
                                                                loop_instruction:
0000DDC5: A2 A3 A2 01 00                                        	mov	[base_code],al
0000DDCA: AC                                                    	lods	byte [esi]
0000DDCB: E8 A1 2F 00 00                                        	call	get_jump_operator
0000DDD0: 80 3D AA A2 01 00 01                                  	cmp	[jump_type],1
0000DDD7: 0F 87 57 2B FF FF                                     	ja	invalid_operand
0000DDDD: E8 48 2F 00 00                                        	call	get_size_operator
0000DDE2: 3C 28                                                 	cmp	al,'('
0000DDE4: 0F 85 4A 2B FF FF                                     	jne	invalid_operand
0000DDEA: 80 3E 2E                                              	cmp	byte [esi],'.'
0000DDED: 0F 84 AF 2B FF FF                                     	je	invalid_value
0000DDF3: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000DDF8: 3C 02                                                 	cmp	al,2
0000DDFA: 0F 84 9D 00 00 00                                     	je	loop_jump_16bit
0000DE00: 3C 04                                                 	cmp	al,4
0000DE02: 74 22                                                 	je	loop_jump_32bit
0000DE04: 3C 08                                                 	cmp	al,8
0000DE06: 74 6C                                                 	je	loop_jump_64bit
0000DE08: 08 C0                                                 	or	al,al
0000DE0A: 0F 85 2E 2B FF FF                                     	jnz	invalid_operand_size
0000DE10: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000DE17: 0F 84 80 00 00 00                                     	je	loop_jump_16bit
0000DE1D: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DE24: 74 4E                                                 	je	loop_jump_64bit
                                                                      loop_jump_32bit:
0000DE26: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DE2D: 0F 84 0B 2B FF FF                                     	je	invalid_operand_size
0000DE33: E8 1B 97 FF FF                                        	call	get_address_dword_value
0000DE38: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000DE3F: 75 04                                                 	jne	loop_jump_32bit_prefix_ok
0000DE41: C6 07 66                                              	mov	byte [edi],66h
0000DE44: 47                                                    	inc	edi
                                                                      loop_jump_32bit_prefix_ok:
0000DE45: E8 18 00 00 00                                        	call	loop_counter_size
0000DE4A: E8 AC FC FF FF                                        	call	calculate_jump_offset
0000DE4F: 99                                                    	cdq
                                                                      make_loop_jump:
0000DE50: E8 B8 FC FF FF                                        	call	check_for_short_jump
0000DE55: 0F 82 D5 FE FF FF                                     	jc	conditional_jump_short
0000DE5B: 66 AF                                                 	scas	word [edi]
0000DE5D: E9 07 FD FF FF                                        	jmp	jump_out_of_range
                                                                      loop_counter_size:
0000DE62: 80 3D 9A A2 01 00 00                                  	cmp	[operand_prefix],0
0000DE69: 74 08                                                 	je	loop_counter_size_ok
0000DE6B: 50                                                    	push	eax
0000DE6C: A0 9A A2 01 00                                        	mov	al,[operand_prefix]
0000DE71: AA                                                    	stos	byte [edi]
0000DE72: 58                                                    	pop	eax
                                                                      loop_counter_size_ok:
0000DE73: C3                                                    	ret
                                                                      loop_jump_64bit:
0000DE74: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DE7B: 0F 85 BD 2A FF FF                                     	jne	invalid_operand_size
0000DE81: E8 E4 96 FF FF                                        	call	get_address_qword_value
0000DE86: E8 D7 FF FF FF                                        	call	loop_counter_size
0000DE8B: E8 6B FC FF FF                                        	call	calculate_jump_offset
0000DE90: 89 D1                                                 	mov	ecx,edx
0000DE92: 99                                                    	cdq
0000DE93: 39 CA                                                 	cmp	edx,ecx
0000DE95: 0F 85 CE FC FF FF                                     	jne	jump_out_of_range
0000DE9B: EB B3                                                 	jmp	make_loop_jump
                                                                      loop_jump_16bit:
0000DE9D: E8 9A 96 FF FF                                        	call	get_address_word_value
0000DEA2: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
0000DEA9: 74 04                                                 	je	loop_jump_16bit_prefix_ok
0000DEAB: C6 07 66                                              	mov	byte [edi],66h
0000DEAE: 47                                                    	inc	edi
                                                                      loop_jump_16bit_prefix_ok:
0000DEAF: E8 AE FF FF FF                                        	call	loop_counter_size
0000DEB4: E8 42 FC FF FF                                        	call	calculate_jump_offset
0000DEB9: 98                                                    	cwde
0000DEBA: 99                                                    	cdq
0000DEBB: EB 93                                                 	jmp	make_loop_jump
                                                                
                                                                movs_instruction:
0000DEBD: AC                                                    	lods	byte [esi]
0000DEBE: E8 67 2E 00 00                                        	call	get_size_operator
0000DEC3: 3C 5B                                                 	cmp	al,'['
0000DEC5: 0F 85 69 2A FF FF                                     	jne	invalid_operand
0000DECB: E8 B6 2E 00 00                                        	call	get_address
0000DED0: 09 C0                                                 	or	eax,eax
0000DED2: 0F 85 C0 2A FF FF                                     	jnz	invalid_address
0000DED8: 08 EB                                                 	or	bl,ch
0000DEDA: 0F 85 B8 2A FF FF                                     	jnz	invalid_address
0000DEE0: 80 3D A7 A2 01 00 01                                  	cmp	[segment_register],1
0000DEE7: 0F 87 AB 2A FF FF                                     	ja	invalid_address
0000DEED: 53                                                    	push	ebx
0000DEEE: AC                                                    	lods	byte [esi]
0000DEEF: 3C 2C                                                 	cmp	al,','
0000DEF1: 0F 85 3D 2A FF FF                                     	jne	invalid_operand
0000DEF7: AC                                                    	lods	byte [esi]
0000DEF8: E8 2D 2E 00 00                                        	call	get_size_operator
0000DEFD: 3C 5B                                                 	cmp	al,'['
0000DEFF: 0F 85 2F 2A FF FF                                     	jne	invalid_operand
0000DF05: E8 7C 2E 00 00                                        	call	get_address
0000DF0A: 5A                                                    	pop	edx
0000DF0B: 09 C0                                                 	or	eax,eax
0000DF0D: 0F 85 85 2A FF FF                                     	jnz	invalid_address
0000DF13: 08 EB                                                 	or	bl,ch
0000DF15: 0F 85 7D 2A FF FF                                     	jnz	invalid_address
0000DF1B: 88 F0                                                 	mov	al,dh
0000DF1D: 88 FC                                                 	mov	ah,bh
0000DF1F: C0 E8 04                                              	shr	al,4
0000DF22: C0 EC 04                                              	shr	ah,4
0000DF25: 38 E0                                                 	cmp	al,ah
0000DF27: 0F 85 39 2A FF FF                                     	jne	address_sizes_do_not_agree
0000DF2D: 80 E7 07                                              	and	bh,111b
0000DF30: 80 E6 07                                              	and	dh,111b
0000DF33: 80 FF 06                                              	cmp	bh,6
0000DF36: 0F 85 5C 2A FF FF                                     	jne	invalid_address
0000DF3C: 80 FE 07                                              	cmp	dh,7
0000DF3F: 0F 85 53 2A FF FF                                     	jne	invalid_address
0000DF45: 3C 02                                                 	cmp	al,2
0000DF47: 74 1A                                                 	je	movs_address_16bit
0000DF49: 3C 04                                                 	cmp	al,4
0000DF4B: 74 0F                                                 	je	movs_address_32bit
0000DF4D: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DF54: 0F 85 02 2A FF FF                                     	jne	invalid_address_size
0000DF5A: EB 19                                                 	jmp	movs_store
                                                                      movs_address_32bit:
0000DF5C: E8 FB 35 00 00                                        	call	address_32bit_prefix
0000DF61: EB 12                                                 	jmp	movs_store
                                                                      movs_address_16bit:
0000DF63: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DF6A: 0F 84 EC 29 FF FF                                     	je	invalid_address_size
0000DF70: E8 DA 35 00 00                                        	call	address_16bit_prefix
                                                                      movs_store:
0000DF75: 31 DB                                                 	xor	ebx,ebx
0000DF77: E8 48 2F 00 00                                        	call	store_segment_prefix_if_necessary
0000DF7C: B0 A4                                                 	mov	al,0A4h
                                                                      movs_check_size:
0000DF7E: 8A 1D 98 A2 01 00                                     	mov	bl,[operand_size]
0000DF84: 80 FB 01                                              	cmp	bl,1
0000DF87: 0F 84 E1 D3 FF FF                                     	je	simple_instruction
0000DF8D: FE C0                                                 	inc	al
0000DF8F: 80 FB 02                                              	cmp	bl,2
0000DF92: 0F 84 F8 D3 FF FF                                     	je	simple_instruction_16bit
0000DF98: 80 FB 04                                              	cmp	bl,4
0000DF9B: 0F 84 16 D4 FF FF                                     	je	simple_instruction_32bit
0000DFA1: 80 FB 08                                              	cmp	bl,8
0000DFA4: 0F 84 25 D4 FF FF                                     	je	simple_instruction_64bit
0000DFAA: 08 DB                                                 	or	bl,bl
0000DFAC: 0F 85 8C 29 FF FF                                     	jnz	invalid_operand_size
0000DFB2: E8 AD D8 FF FF                                        	call	recoverable_unknown_size
0000DFB7: E9 B2 D3 FF FF                                        	jmp	simple_instruction
                                                                lods_instruction:
0000DFBC: AC                                                    	lods	byte [esi]
0000DFBD: E8 68 2D 00 00                                        	call	get_size_operator
0000DFC2: 3C 5B                                                 	cmp	al,'['
0000DFC4: 0F 85 6A 29 FF FF                                     	jne	invalid_operand
0000DFCA: E8 B7 2D 00 00                                        	call	get_address
0000DFCF: 09 C0                                                 	or	eax,eax
0000DFD1: 0F 85 C1 29 FF FF                                     	jnz	invalid_address
0000DFD7: 08 EB                                                 	or	bl,ch
0000DFD9: 0F 85 B9 29 FF FF                                     	jnz	invalid_address
0000DFDF: 80 FF 26                                              	cmp	bh,26h
0000DFE2: 74 24                                                 	je	lods_address_16bit
0000DFE4: 80 FF 46                                              	cmp	bh,46h
0000DFE7: 74 18                                                 	je	lods_address_32bit
0000DFE9: 80 FF 86                                              	cmp	bh,86h
0000DFEC: 0F 85 A6 29 FF FF                                     	jne	invalid_address
0000DFF2: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000DFF9: 0F 85 5D 29 FF FF                                     	jne	invalid_address_size
0000DFFF: EB 19                                                 	jmp	lods_store
                                                                      lods_address_32bit:
0000E001: E8 56 35 00 00                                        	call	address_32bit_prefix
0000E006: EB 12                                                 	jmp	lods_store
                                                                      lods_address_16bit:
0000E008: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000E00F: 0F 84 47 29 FF FF                                     	je	invalid_address_size
0000E015: E8 35 35 00 00                                        	call	address_16bit_prefix
                                                                      lods_store:
0000E01A: 31 DB                                                 	xor	ebx,ebx
0000E01C: E8 A3 2E 00 00                                        	call	store_segment_prefix_if_necessary
0000E021: B0 AC                                                 	mov	al,0ACh
0000E023: E9 56 FF FF FF                                        	jmp	movs_check_size
                                                                stos_instruction:
0000E028: A2 A3 A2 01 00                                        	mov	[base_code],al
0000E02D: AC                                                    	lods	byte [esi]
0000E02E: E8 F7 2C 00 00                                        	call	get_size_operator
0000E033: 3C 5B                                                 	cmp	al,'['
0000E035: 0F 85 F9 28 FF FF                                     	jne	invalid_operand
0000E03B: E8 46 2D 00 00                                        	call	get_address
0000E040: 09 C0                                                 	or	eax,eax
0000E042: 0F 85 50 29 FF FF                                     	jnz	invalid_address
0000E048: 08 EB                                                 	or	bl,ch
0000E04A: 0F 85 48 29 FF FF                                     	jnz	invalid_address
0000E050: 80 FF 27                                              	cmp	bh,27h
0000E053: 74 24                                                 	je	stos_address_16bit
0000E055: 80 FF 47                                              	cmp	bh,47h
0000E058: 74 18                                                 	je	stos_address_32bit
0000E05A: 80 FF 87                                              	cmp	bh,87h
0000E05D: 0F 85 35 29 FF FF                                     	jne	invalid_address
0000E063: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000E06A: 0F 85 EC 28 FF FF                                     	jne	invalid_address_size
0000E070: EB 19                                                 	jmp	stos_store
                                                                      stos_address_32bit:
0000E072: E8 E5 34 00 00                                        	call	address_32bit_prefix
0000E077: EB 12                                                 	jmp	stos_store
                                                                      stos_address_16bit:
0000E079: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000E080: 0F 84 D6 28 FF FF                                     	je	invalid_address_size
0000E086: E8 C4 34 00 00                                        	call	address_16bit_prefix
                                                                      stos_store:
0000E08B: 80 3D A7 A2 01 00 01                                  	cmp	[segment_register],1
0000E092: 0F 87 00 29 FF FF                                     	ja	invalid_address
0000E098: A0 A3 A2 01 00                                        	mov	al,[base_code]
0000E09D: E9 DC FE FF FF                                        	jmp	movs_check_size
                                                                cmps_instruction:
0000E0A2: AC                                                    	lods	byte [esi]
0000E0A3: E8 82 2C 00 00                                        	call	get_size_operator
0000E0A8: 3C 5B                                                 	cmp	al,'['
0000E0AA: 0F 85 84 28 FF FF                                     	jne	invalid_operand
0000E0B0: E8 D1 2C 00 00                                        	call	get_address
0000E0B5: 09 C0                                                 	or	eax,eax
0000E0B7: 0F 85 DB 28 FF FF                                     	jnz	invalid_address
0000E0BD: 08 EB                                                 	or	bl,ch
0000E0BF: 0F 85 D3 28 FF FF                                     	jnz	invalid_address
0000E0C5: A0 A7 A2 01 00                                        	mov	al,[segment_register]
0000E0CA: 50 53                                                 	push	eax ebx
0000E0CC: AC                                                    	lods	byte [esi]
0000E0CD: 3C 2C                                                 	cmp	al,','
0000E0CF: 0F 85 5F 28 FF FF                                     	jne	invalid_operand
0000E0D5: AC                                                    	lods	byte [esi]
0000E0D6: E8 4F 2C 00 00                                        	call	get_size_operator
0000E0DB: 3C 5B                                                 	cmp	al,'['
0000E0DD: 0F 85 51 28 FF FF                                     	jne	invalid_operand
0000E0E3: E8 9E 2C 00 00                                        	call	get_address
0000E0E8: 09 C0                                                 	or	eax,eax
0000E0EA: 0F 85 A8 28 FF FF                                     	jnz	invalid_address
0000E0F0: 08 EB                                                 	or	bl,ch
0000E0F2: 0F 85 A0 28 FF FF                                     	jnz	invalid_address
0000E0F8: 5A 58                                                 	pop	edx eax
0000E0FA: 80 3D A7 A2 01 00 01                                  	cmp	[segment_register],1
0000E101: 0F 87 91 28 FF FF                                     	ja	invalid_address
0000E107: A2 A7 A2 01 00                                        	mov	[segment_register],al
0000E10C: 88 F0                                                 	mov	al,dh
0000E10E: 88 FC                                                 	mov	ah,bh
0000E110: C0 E8 04                                              	shr	al,4
0000E113: C0 EC 04                                              	shr	ah,4
0000E116: 38 E0                                                 	cmp	al,ah
0000E118: 0F 85 48 28 FF FF                                     	jne	address_sizes_do_not_agree
0000E11E: 80 E7 07                                              	and	bh,111b
0000E121: 80 E6 07                                              	and	dh,111b
0000E124: 80 FF 07                                              	cmp	bh,7
0000E127: 0F 85 6B 28 FF FF                                     	jne	invalid_address
0000E12D: 80 FE 06                                              	cmp	dh,6
0000E130: 0F 85 62 28 FF FF                                     	jne	invalid_address
0000E136: 3C 02                                                 	cmp	al,2
0000E138: 74 1A                                                 	je	cmps_address_16bit
0000E13A: 3C 04                                                 	cmp	al,4
0000E13C: 74 0F                                                 	je	cmps_address_32bit
0000E13E: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000E145: 0F 85 11 28 FF FF                                     	jne	invalid_address_size
0000E14B: EB 19                                                 	jmp	cmps_store
                                                                      cmps_address_32bit:
0000E14D: E8 0A 34 00 00                                        	call	address_32bit_prefix
0000E152: EB 12                                                 	jmp	cmps_store
                                                                      cmps_address_16bit:
0000E154: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000E15B: 0F 84 FB 27 FF FF                                     	je	invalid_address_size
0000E161: E8 E9 33 00 00                                        	call	address_16bit_prefix
                                                                      cmps_store:
0000E166: 31 DB                                                 	xor	ebx,ebx
0000E168: E8 57 2D 00 00                                        	call	store_segment_prefix_if_necessary
0000E16D: B0 A6                                                 	mov	al,0A6h
0000E16F: E9 0A FE FF FF                                        	jmp	movs_check_size
                                                                ins_instruction:
0000E174: AC                                                    	lods	byte [esi]
0000E175: E8 B0 2B 00 00                                        	call	get_size_operator
0000E17A: 3C 5B                                                 	cmp	al,'['
0000E17C: 0F 85 B2 27 FF FF                                     	jne	invalid_operand
0000E182: E8 FF 2B 00 00                                        	call	get_address
0000E187: 09 C0                                                 	or	eax,eax
0000E189: 0F 85 09 28 FF FF                                     	jnz	invalid_address
0000E18F: 08 EB                                                 	or	bl,ch
0000E191: 0F 85 01 28 FF FF                                     	jnz	invalid_address
0000E197: 80 FF 27                                              	cmp	bh,27h
0000E19A: 74 24                                                 	je	ins_address_16bit
0000E19C: 80 FF 47                                              	cmp	bh,47h
0000E19F: 74 18                                                 	je	ins_address_32bit
0000E1A1: 80 FF 87                                              	cmp	bh,87h
0000E1A4: 0F 85 EE 27 FF FF                                     	jne	invalid_address
0000E1AA: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000E1B1: 0F 85 A5 27 FF FF                                     	jne	invalid_address_size
0000E1B7: EB 19                                                 	jmp	ins_store
                                                                      ins_address_32bit:
0000E1B9: E8 9E 33 00 00                                        	call	address_32bit_prefix
0000E1BE: EB 12                                                 	jmp	ins_store
                                                                      ins_address_16bit:
0000E1C0: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000E1C7: 0F 84 8F 27 FF FF                                     	je	invalid_address_size
0000E1CD: E8 7D 33 00 00                                        	call	address_16bit_prefix
                                                                      ins_store:
0000E1D2: 80 3D A7 A2 01 00 01                                  	cmp	[segment_register],1
0000E1D9: 0F 87 B9 27 FF FF                                     	ja	invalid_address
0000E1DF: AC                                                    	lods	byte [esi]
0000E1E0: 3C 2C                                                 	cmp	al,','
0000E1E2: 0F 85 4C 27 FF FF                                     	jne	invalid_operand
0000E1E8: AC                                                    	lods	byte [esi]
0000E1E9: 3C 10                                                 	cmp	al,10h
0000E1EB: 0F 85 43 27 FF FF                                     	jne	invalid_operand
0000E1F1: AC                                                    	lods	byte [esi]
0000E1F2: 3C 22                                                 	cmp	al,22h
0000E1F4: 0F 85 3A 27 FF FF                                     	jne	invalid_operand
0000E1FA: B0 6C                                                 	mov	al,6Ch
                                                                      ins_check_size:
0000E1FC: 80 3D 98 A2 01 00 08                                  	cmp	[operand_size],8
0000E203: 0F 85 75 FD FF FF                                     	jne	movs_check_size
0000E209: E9 30 27 FF FF                                        	jmp	invalid_operand_size
                                                                outs_instruction:
0000E20E: AC                                                    	lods	byte [esi]
0000E20F: 3C 10                                                 	cmp	al,10h
0000E211: 0F 85 1D 27 FF FF                                     	jne	invalid_operand
0000E217: AC                                                    	lods	byte [esi]
0000E218: 3C 22                                                 	cmp	al,22h
0000E21A: 0F 85 14 27 FF FF                                     	jne	invalid_operand
0000E220: AC                                                    	lods	byte [esi]
0000E221: 3C 2C                                                 	cmp	al,','
0000E223: 0F 85 0B 27 FF FF                                     	jne	invalid_operand
0000E229: AC                                                    	lods	byte [esi]
0000E22A: E8 FB 2A 00 00                                        	call	get_size_operator
0000E22F: 3C 5B                                                 	cmp	al,'['
0000E231: 0F 85 FD 26 FF FF                                     	jne	invalid_operand
0000E237: E8 4A 2B 00 00                                        	call	get_address
0000E23C: 09 C0                                                 	or	eax,eax
0000E23E: 0F 85 54 27 FF FF                                     	jnz	invalid_address
0000E244: 08 EB                                                 	or	bl,ch
0000E246: 0F 85 4C 27 FF FF                                     	jnz	invalid_address
0000E24C: 80 FF 26                                              	cmp	bh,26h
0000E24F: 74 24                                                 	je	outs_address_16bit
0000E251: 80 FF 46                                              	cmp	bh,46h
0000E254: 74 18                                                 	je	outs_address_32bit
0000E256: 80 FF 86                                              	cmp	bh,86h
0000E259: 0F 85 39 27 FF FF                                     	jne	invalid_address
0000E25F: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000E266: 0F 85 F0 26 FF FF                                     	jne	invalid_address_size
0000E26C: EB 19                                                 	jmp	outs_store
                                                                      outs_address_32bit:
0000E26E: E8 E9 32 00 00                                        	call	address_32bit_prefix
0000E273: EB 12                                                 	jmp	outs_store
                                                                      outs_address_16bit:
0000E275: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000E27C: 0F 84 DA 26 FF FF                                     	je	invalid_address_size
0000E282: E8 C8 32 00 00                                        	call	address_16bit_prefix
                                                                      outs_store:
0000E287: 31 DB                                                 	xor	ebx,ebx
0000E289: E8 36 2C 00 00                                        	call	store_segment_prefix_if_necessary
0000E28E: B0 6E                                                 	mov	al,6Eh
0000E290: E9 67 FF FF FF                                        	jmp	ins_check_size
                                                                xlat_instruction:
0000E295: AC                                                    	lods	byte [esi]
0000E296: E8 8F 2A 00 00                                        	call	get_size_operator
0000E29B: 3C 5B                                                 	cmp	al,'['
0000E29D: 0F 85 91 26 FF FF                                     	jne	invalid_operand
0000E2A3: E8 DE 2A 00 00                                        	call	get_address
0000E2A8: 09 C0                                                 	or	eax,eax
0000E2AA: 0F 85 E8 26 FF FF                                     	jnz	invalid_address
0000E2B0: 08 EB                                                 	or	bl,ch
0000E2B2: 0F 85 E0 26 FF FF                                     	jnz	invalid_address
0000E2B8: 80 FF 23                                              	cmp	bh,23h
0000E2BB: 74 24                                                 	je	xlat_address_16bit
0000E2BD: 80 FF 43                                              	cmp	bh,43h
0000E2C0: 74 18                                                 	je	xlat_address_32bit
0000E2C2: 80 FF 83                                              	cmp	bh,83h
0000E2C5: 0F 85 CD 26 FF FF                                     	jne	invalid_address
0000E2CB: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000E2D2: 0F 85 84 26 FF FF                                     	jne	invalid_address_size
0000E2D8: EB 19                                                 	jmp	xlat_store
                                                                      xlat_address_32bit:
0000E2DA: E8 7D 32 00 00                                        	call	address_32bit_prefix
0000E2DF: EB 12                                                 	jmp	xlat_store
                                                                      xlat_address_16bit:
0000E2E1: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000E2E8: 0F 84 6E 26 FF FF                                     	je	invalid_address_size
0000E2EE: E8 5C 32 00 00                                        	call	address_16bit_prefix
                                                                      xlat_store:
0000E2F3: E8 CC 2B 00 00                                        	call	store_segment_prefix_if_necessary
0000E2F8: B0 D7                                                 	mov	al,0D7h
0000E2FA: 80 3D 98 A2 01 00 01                                  	cmp	[operand_size],1
0000E301: 0F 86 67 D0 FF FF                                     	jbe	simple_instruction
0000E307: E9 32 26 FF FF                                        	jmp	invalid_operand_size
                                                                
                                                                pm_word_instruction:
0000E30C: 88 C4                                                 	mov	ah,al
0000E30E: C0 EC 04                                              	shr	ah,4
0000E311: 24 07                                                 	and	al,111b
0000E313: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000E31A: 88 25 A4 A2 01 00                                     	mov	[extended_code],ah
0000E320: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000E325: AC                                                    	lods	byte [esi]
0000E326: E8 FF 29 00 00                                        	call	get_size_operator
0000E32B: 3C 10                                                 	cmp	al,10h
0000E32D: 74 23                                                 	je	pm_reg
                                                                      pm_mem:
0000E32F: 3C 5B                                                 	cmp	al,'['
0000E331: 0F 85 FD 25 FF FF                                     	jne	invalid_operand
0000E337: E8 4A 2A 00 00                                        	call	get_address
0000E33C: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000E341: 3C 02                                                 	cmp	al,2
0000E343: 74 08                                                 	je	pm_mem_store
0000E345: 08 C0                                                 	or	al,al
0000E347: 0F 85 F1 25 FF FF                                     	jnz	invalid_operand_size
                                                                      pm_mem_store:
0000E34D: E9 C8 D1 FF FF                                        	jmp	instruction_ready
                                                                      pm_reg:
0000E352: AC                                                    	lods	byte [esi]
0000E353: E8 2B 29 00 00                                        	call	convert_register
0000E358: 88 C3                                                 	mov	bl,al
0000E35A: 80 FC 02                                              	cmp	ah,2
0000E35D: 0F 85 DB 25 FF FF                                     	jne	invalid_operand_size
0000E363: E9 8D D3 FF FF                                        	jmp	nomem_instruction_ready
                                                                pm_store_word_instruction:
0000E368: 88 C4                                                 	mov	ah,al
0000E36A: C0 EC 04                                              	shr	ah,4
0000E36D: 24 07                                                 	and	al,111b
0000E36F: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000E376: 88 25 A4 A2 01 00                                     	mov	[extended_code],ah
0000E37C: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000E381: AC                                                    	lods	byte [esi]
0000E382: E8 A3 29 00 00                                        	call	get_size_operator
0000E387: 3C 10                                                 	cmp	al,10h
0000E389: 75 A4                                                 	jne	pm_mem
0000E38B: AC                                                    	lods	byte [esi]
0000E38C: E8 F2 28 00 00                                        	call	convert_register
0000E391: 88 C3                                                 	mov	bl,al
0000E393: 88 E0                                                 	mov	al,ah
0000E395: E8 19 2B 00 00                                        	call	operand_autodetect
0000E39A: E9 56 D3 FF FF                                        	jmp	nomem_instruction_ready
                                                                lgdt_instruction:
0000E39F: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000E3A6: C6 05 A4 A2 01 00 01                                  	mov	[extended_code],1
0000E3AD: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000E3B2: AC                                                    	lods	byte [esi]
0000E3B3: E8 72 29 00 00                                        	call	get_size_operator
0000E3B8: 3C 5B                                                 	cmp	al,'['
0000E3BA: 0F 85 74 25 FF FF                                     	jne	invalid_operand
0000E3C0: E8 C1 29 00 00                                        	call	get_address
0000E3C5: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000E3CA: 3C 06                                                 	cmp	al,6
0000E3CC: 74 1D                                                 	je	lgdt_mem_48bit
0000E3CE: 3C 0A                                                 	cmp	al,10
0000E3D0: 74 0A                                                 	je	lgdt_mem_80bit
0000E3D2: 08 C0                                                 	or	al,al
0000E3D4: 0F 85 64 25 FF FF                                     	jnz	invalid_operand_size
0000E3DA: EB 2A                                                 	jmp	lgdt_mem_store
                                                                      lgdt_mem_80bit:
0000E3DC: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000E3E3: 0F 85 41 25 FF FF                                     	jne	illegal_instruction
0000E3E9: EB 1B                                                 	jmp	lgdt_mem_store
                                                                      lgdt_mem_48bit:
0000E3EB: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000E3F2: 0F 84 32 25 FF FF                                     	je	illegal_instruction
0000E3F8: 80 3D A6 A2 01 00 02                                  	cmp	[postbyte_register],2
0000E3FF: 72 05                                                 	jb	lgdt_mem_store
0000E401: E8 87 2A 00 00                                        	call	operand_32bit
                                                                      lgdt_mem_store:
0000E406: E9 0F D1 FF FF                                        	jmp	instruction_ready
                                                                lar_instruction:
0000E40B: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000E410: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000E417: E8 58 28 00 00                                        	call	take_register
0000E41C: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000E421: AC                                                    	lods	byte [esi]
0000E422: 3C 2C                                                 	cmp	al,','
0000E424: 0F 85 0A 25 FF FF                                     	jne	invalid_operand
0000E42A: 30 C0                                                 	xor	al,al
0000E42C: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
0000E432: E8 7C 2A 00 00                                        	call	operand_autodetect
0000E437: AC                                                    	lods	byte [esi]
0000E438: E8 ED 28 00 00                                        	call	get_size_operator
0000E43D: 3C 10                                                 	cmp	al,10h
0000E43F: 74 23                                                 	je	lar_reg_reg
0000E441: 3C 5B                                                 	cmp	al,'['
0000E443: 0F 85 EB 24 FF FF                                     	jne	invalid_operand
0000E449: E8 38 29 00 00                                        	call	get_address
0000E44E: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000E453: 08 C0                                                 	or	al,al
0000E455: 74 08                                                 	jz	lar_reg_mem
0000E457: 3C 02                                                 	cmp	al,2
0000E459: 0F 85 DF 24 FF FF                                     	jne	invalid_operand_size
                                                                      lar_reg_mem:
0000E45F: E9 B6 D0 FF FF                                        	jmp	instruction_ready
                                                                      lar_reg_reg:
0000E464: AC                                                    	lods	byte [esi]
0000E465: E8 19 28 00 00                                        	call	convert_register
0000E46A: 80 FC 02                                              	cmp	ah,2
0000E46D: 0F 85 CB 24 FF FF                                     	jne	invalid_operand_size
0000E473: 88 C3                                                 	mov	bl,al
0000E475: E9 7B D2 FF FF                                        	jmp	nomem_instruction_ready
                                                                invlpg_instruction:
0000E47A: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000E481: C6 05 A4 A2 01 00 01                                  	mov	[extended_code],1
0000E488: C6 05 A6 A2 01 00 07                                  	mov	[postbyte_register],7
0000E48F: AC                                                    	lods	byte [esi]
0000E490: E8 95 28 00 00                                        	call	get_size_operator
0000E495: 3C 5B                                                 	cmp	al,'['
0000E497: 0F 85 97 24 FF FF                                     	jne	invalid_operand
0000E49D: E8 E4 28 00 00                                        	call	get_address
0000E4A2: E9 73 D0 FF FF                                        	jmp	instruction_ready
                                                                simple_instruction_f2_0f_01:
0000E4A7: C6 07 F2                                              	mov	byte [edi],0F2h
0000E4AA: 47                                                    	inc	edi
0000E4AB: EB 13                                                 	jmp	simple_instruction_0f_01
                                                                simple_instruction_f3_0f_01:
0000E4AD: C6 07 F3                                              	mov	byte [edi],0F3h
0000E4B0: 47                                                    	inc	edi
0000E4B1: EB 0D                                                 	jmp	simple_instruction_0f_01
                                                                swapgs_instruction:
0000E4B3: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000E4BA: 0F 85 6A 24 FF FF                                     	jne	illegal_instruction
                                                                simple_instruction_0f_01:
0000E4C0: 88 C4                                                 	mov	ah,al
0000E4C2: B0 0F                                                 	mov	al,0Fh
0000E4C4: AA                                                    	stos	byte [edi]
0000E4C5: B0 01                                                 	mov	al,1
0000E4C7: 66 AB                                                 	stos	word [edi]
0000E4C9: E9 A2 6A FF FF                                        	jmp	instruction_assembled
                                                                
                                                                basic_486_instruction:
0000E4CE: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000E4D5: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000E4DA: AC                                                    	lods	byte [esi]
0000E4DB: E8 4A 28 00 00                                        	call	get_size_operator
0000E4E0: 3C 10                                                 	cmp	al,10h
0000E4E2: 74 3C                                                 	je	basic_486_reg
0000E4E4: 3C 5B                                                 	cmp	al,'['
0000E4E6: 0F 85 48 24 FF FF                                     	jne	invalid_operand
0000E4EC: E8 95 28 00 00                                        	call	get_address
0000E4F1: 52 53 51                                              	push	edx ebx ecx
0000E4F4: AC                                                    	lods	byte [esi]
0000E4F5: 3C 2C                                                 	cmp	al,','
0000E4F7: 0F 85 37 24 FF FF                                     	jne	invalid_operand
0000E4FD: E8 72 27 00 00                                        	call	take_register
0000E502: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000E507: 59 5B 5A                                              	pop	ecx ebx edx
0000E50A: 88 E0                                                 	mov	al,ah
0000E50C: 3C 01                                                 	cmp	al,1
0000E50E: 74 0B                                                 	je	basic_486_mem_reg_8bit
0000E510: E8 9E 29 00 00                                        	call	operand_autodetect
0000E515: FE 05 A4 A2 01 00                                     	inc	[extended_code]
                                                                      basic_486_mem_reg_8bit:
0000E51B: E9 FA CF FF FF                                        	jmp	instruction_ready
                                                                      basic_486_reg:
0000E520: AC                                                    	lods	byte [esi]
0000E521: E8 5D 27 00 00                                        	call	convert_register
0000E526: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000E52B: AC                                                    	lods	byte [esi]
0000E52C: 3C 2C                                                 	cmp	al,','
0000E52E: 0F 85 00 24 FF FF                                     	jne	invalid_operand
0000E534: E8 3B 27 00 00                                        	call	take_register
0000E539: 88 C3                                                 	mov	bl,al
0000E53B: 86 1D A6 A2 01 00                                     	xchg	bl,[postbyte_register]
0000E541: 88 E0                                                 	mov	al,ah
0000E543: 3C 01                                                 	cmp	al,1
0000E545: 74 0B                                                 	je	basic_486_reg_reg_8bit
0000E547: E8 67 29 00 00                                        	call	operand_autodetect
0000E54C: FE 05 A4 A2 01 00                                     	inc	[extended_code]
                                                                      basic_486_reg_reg_8bit:
0000E552: E9 9E D1 FF FF                                        	jmp	nomem_instruction_ready
                                                                bswap_instruction:
0000E557: E8 18 27 00 00                                        	call	take_register
0000E55C: A8 08                                                 	test	al,1000b
0000E55E: 74 09                                                 	jz	bswap_reg_code_ok
0000E560: 80 0D 9B A2 01 00 41                                  	or	[rex_prefix],41h
0000E567: 24 07                                                 	and	al,111b
                                                                      bswap_reg_code_ok:
0000E569: 04 C8                                                 	add	al,0C8h
0000E56B: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000E570: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000E577: 80 FC 08                                              	cmp	ah,8
0000E57A: 74 18                                                 	je	bswap_reg64
0000E57C: 80 FC 04                                              	cmp	ah,4
0000E57F: 0F 85 B9 23 FF FF                                     	jne	invalid_operand_size
0000E585: E8 03 29 00 00                                        	call	operand_32bit
0000E58A: E8 A4 29 00 00                                        	call	store_classic_instruction_code
0000E58F: E9 DC 69 FF FF                                        	jmp	instruction_assembled
                                                                      bswap_reg64:
0000E594: E8 05 29 00 00                                        	call	operand_64bit
0000E599: E8 95 29 00 00                                        	call	store_classic_instruction_code
0000E59E: E9 CD 69 FF FF                                        	jmp	instruction_assembled
                                                                cmpxchgx_instruction:
0000E5A3: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000E5AA: C6 05 A4 A2 01 00 C7                                  	mov	[extended_code],0C7h
0000E5B1: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000E5B6: AC                                                    	lods	byte [esi]
0000E5B7: E8 6E 27 00 00                                        	call	get_size_operator
0000E5BC: 3C 5B                                                 	cmp	al,'['
0000E5BE: 0F 85 70 23 FF FF                                     	jne	invalid_operand
0000E5C4: E8 BD 27 00 00                                        	call	get_address
0000E5C9: B4 01                                                 	mov	ah,1
0000E5CB: 86 25 A6 A2 01 00                                     	xchg	[postbyte_register],ah
0000E5D1: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000E5D6: 08 C0                                                 	or	al,al
0000E5D8: 74 08                                                 	jz	cmpxchgx_size_ok
0000E5DA: 38 E0                                                 	cmp	al,ah
0000E5DC: 0F 85 5C 23 FF FF                                     	jne	invalid_operand_size
                                                                      cmpxchgx_size_ok:
0000E5E2: 80 FC 10                                              	cmp	ah,16
0000E5E5: 75 05                                                 	jne	cmpxchgx_store
0000E5E7: E8 B2 28 00 00                                        	call	operand_64bit
                                                                      cmpxchgx_store:
0000E5EC: E9 29 CF FF FF                                        	jmp	instruction_ready
                                                                nop_instruction:
0000E5F1: 8A 26                                                 	mov	ah,[esi]
0000E5F3: 80 FC 10                                              	cmp	ah,10h
0000E5F6: 74 10                                                 	je	extended_nop
0000E5F8: 80 FC 11                                              	cmp	ah,11h
0000E5FB: 74 0B                                                 	je	extended_nop
0000E5FD: 80 FC 5B                                              	cmp	ah,'['
0000E600: 74 06                                                 	je	extended_nop
0000E602: AA                                                    	stos	byte [edi]
0000E603: E9 68 69 FF FF                                        	jmp	instruction_assembled
                                                                      extended_nop:
0000E608: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000E60F: C6 05 A4 A2 01 00 1F                                  	mov	[extended_code],1Fh
0000E616: C6 05 A6 A2 01 00 00                                  	mov	[postbyte_register],0
0000E61D: AC                                                    	lods	byte [esi]
0000E61E: E8 07 27 00 00                                        	call	get_size_operator
0000E623: 3C 10                                                 	cmp	al,10h
0000E625: 74 20                                                 	je	extended_nop_reg
0000E627: 3C 5B                                                 	cmp	al,'['
0000E629: 0F 85 05 23 FF FF                                     	jne	invalid_operand
0000E62F: E8 52 27 00 00                                        	call	get_address
0000E634: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000E639: 08 C0                                                 	or	al,al
0000E63B: 74 05                                                 	jz	extended_nop_store
0000E63D: E8 71 28 00 00                                        	call	operand_autodetect
                                                                      extended_nop_store:
0000E642: E9 D3 CE FF FF                                        	jmp	instruction_ready
                                                                      extended_nop_reg:
0000E647: AC                                                    	lods	byte [esi]
0000E648: E8 36 26 00 00                                        	call	convert_register
0000E64D: 88 C3                                                 	mov	bl,al
0000E64F: 88 E0                                                 	mov	al,ah
0000E651: E8 5D 28 00 00                                        	call	operand_autodetect
0000E656: E9 9A D0 FF FF                                        	jmp	nomem_instruction_ready
                                                                
                                                                basic_fpu_instruction:
0000E65B: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000E660: C6 05 A3 A2 01 00 D8                                  	mov	[base_code],0D8h
0000E667: AC                                                    	lods	byte [esi]
0000E668: E8 BD 26 00 00                                        	call	get_size_operator
0000E66D: 3C 10                                                 	cmp	al,10h
0000E66F: 74 54                                                 	je	basic_fpu_streg
0000E671: 3C 5B                                                 	cmp	al,'['
0000E673: 74 20                                                 	je	basic_fpu_mem
0000E675: 4E                                                    	dec	esi
0000E676: 8A 25 A6 A2 01 00                                     	mov	ah,[postbyte_register]
0000E67C: 80 FC 02                                              	cmp	ah,2
0000E67F: 0F 82 AF 22 FF FF                                     	jb	invalid_operand
0000E685: 80 FC 03                                              	cmp	ah,3
0000E688: 0F 87 A6 22 FF FF                                     	ja	invalid_operand
0000E68E: B3 01                                                 	mov	bl,1
0000E690: E9 60 D0 FF FF                                        	jmp	nomem_instruction_ready
                                                                      basic_fpu_mem:
0000E695: E8 EC 26 00 00                                        	call	get_address
0000E69A: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000E69F: 3C 04                                                 	cmp	al,4
0000E6A1: 74 11                                                 	je	basic_fpu_mem_32bit
0000E6A3: 3C 08                                                 	cmp	al,8
0000E6A5: 74 12                                                 	je	basic_fpu_mem_64bit
0000E6A7: 08 C0                                                 	or	al,al
0000E6A9: 0F 85 8F 22 FF FF                                     	jnz	invalid_operand_size
0000E6AF: E8 B0 D1 FF FF                                        	call	recoverable_unknown_size
                                                                      basic_fpu_mem_32bit:
0000E6B4: E9 61 CE FF FF                                        	jmp	instruction_ready
                                                                      basic_fpu_mem_64bit:
0000E6B9: C6 05 A3 A2 01 00 DC                                  	mov	[base_code],0DCh
0000E6C0: E9 55 CE FF FF                                        	jmp	instruction_ready
                                                                      basic_fpu_streg:
0000E6C5: AC                                                    	lods	byte [esi]
0000E6C6: E8 08 26 00 00                                        	call	convert_fpu_register
0000E6CB: 88 C3                                                 	mov	bl,al
0000E6CD: 8A 25 A6 A2 01 00                                     	mov	ah,[postbyte_register]
0000E6D3: 80 FC 02                                              	cmp	ah,2
0000E6D6: 74 65                                                 	je	basic_fpu_single_streg
0000E6D8: 80 FC 03                                              	cmp	ah,3
0000E6DB: 74 60                                                 	je	basic_fpu_single_streg
0000E6DD: 08 C0                                                 	or	al,al
0000E6DF: 74 3D                                                 	jz	basic_fpu_st0
0000E6E1: F6 C4 06                                              	test	ah,110b
0000E6E4: 74 07                                                 	jz	basic_fpu_streg_st0
0000E6E6: 80 35 A6 A2 01 00 01                                  	xor	[postbyte_register],1
                                                                      basic_fpu_streg_st0:
0000E6ED: AC                                                    	lods	byte [esi]
0000E6EE: 3C 2C                                                 	cmp	al,','
0000E6F0: 0F 85 3E 22 FF FF                                     	jne	invalid_operand
0000E6F6: AC                                                    	lods	byte [esi]
0000E6F7: E8 2E 26 00 00                                        	call	get_size_operator
0000E6FC: 3C 10                                                 	cmp	al,10h
0000E6FE: 0F 85 30 22 FF FF                                     	jne	invalid_operand
0000E704: AC                                                    	lods	byte [esi]
0000E705: E8 C9 25 00 00                                        	call	convert_fpu_register
0000E70A: 08 C0                                                 	or	al,al
0000E70C: 0F 85 22 22 FF FF                                     	jnz	invalid_operand
0000E712: C6 05 A3 A2 01 00 DC                                  	mov	[base_code],0DCh
0000E719: E9 D7 CF FF FF                                        	jmp	nomem_instruction_ready
                                                                      basic_fpu_st0:
0000E71E: AC                                                    	lods	byte [esi]
0000E71F: 3C 2C                                                 	cmp	al,','
0000E721: 0F 85 0D 22 FF FF                                     	jne	invalid_operand
0000E727: AC                                                    	lods	byte [esi]
0000E728: E8 FD 25 00 00                                        	call	get_size_operator
0000E72D: 3C 10                                                 	cmp	al,10h
0000E72F: 0F 85 FF 21 FF FF                                     	jne	invalid_operand
0000E735: AC                                                    	lods	byte [esi]
0000E736: E8 98 25 00 00                                        	call	convert_fpu_register
0000E73B: 88 C3                                                 	mov	bl,al
                                                                      basic_fpu_single_streg:
0000E73D: C6 05 A3 A2 01 00 D8                                  	mov	[base_code],0D8h
0000E744: E9 AC CF FF FF                                        	jmp	nomem_instruction_ready
                                                                simple_fpu_instruction:
0000E749: 88 C4                                                 	mov	ah,al
0000E74B: 80 CC C0                                              	or	ah,11000000b
0000E74E: B0 D9                                                 	mov	al,0D9h
0000E750: 66 AB                                                 	stos	word [edi]
0000E752: E9 19 68 FF FF                                        	jmp	instruction_assembled
                                                                fi_instruction:
0000E757: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000E75C: AC                                                    	lods	byte [esi]
0000E75D: E8 C8 25 00 00                                        	call	get_size_operator
0000E762: 3C 5B                                                 	cmp	al,'['
0000E764: 0F 85 CA 21 FF FF                                     	jne	invalid_operand
0000E76A: E8 17 26 00 00                                        	call	get_address
0000E76F: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000E774: 3C 02                                                 	cmp	al,2
0000E776: 74 1D                                                 	je	fi_mem_16bit
0000E778: 3C 04                                                 	cmp	al,4
0000E77A: 74 0D                                                 	je	fi_mem_32bit
0000E77C: 08 C0                                                 	or	al,al
0000E77E: 0F 85 BA 21 FF FF                                     	jnz	invalid_operand_size
0000E784: E8 DB D0 FF FF                                        	call	recoverable_unknown_size
                                                                      fi_mem_32bit:
0000E789: C6 05 A3 A2 01 00 DA                                  	mov	[base_code],0DAh
0000E790: E9 85 CD FF FF                                        	jmp	instruction_ready
                                                                      fi_mem_16bit:
0000E795: C6 05 A3 A2 01 00 DE                                  	mov	[base_code],0DEh
0000E79C: E9 79 CD FF FF                                        	jmp	instruction_ready
                                                                fld_instruction:
0000E7A1: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000E7A6: AC                                                    	lods	byte [esi]
0000E7A7: E8 7E 25 00 00                                        	call	get_size_operator
0000E7AC: 3C 10                                                 	cmp	al,10h
0000E7AE: 74 6E                                                 	je	fld_streg
0000E7B0: 3C 5B                                                 	cmp	al,'['
0000E7B2: 0F 85 7C 21 FF FF                                     	jne	invalid_operand
0000E7B8: E8 C9 25 00 00                                        	call	get_address
0000E7BD: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000E7C2: 3C 04                                                 	cmp	al,4
0000E7C4: 74 15                                                 	je	fld_mem_32bit
0000E7C6: 3C 08                                                 	cmp	al,8
0000E7C8: 74 1D                                                 	je	fld_mem_64bit
0000E7CA: 3C 0A                                                 	cmp	al,10
0000E7CC: 74 25                                                 	je	fld_mem_80bit
0000E7CE: 08 C0                                                 	or	al,al
0000E7D0: 0F 85 68 21 FF FF                                     	jnz	invalid_operand_size
0000E7D6: E8 89 D0 FF FF                                        	call	recoverable_unknown_size
                                                                      fld_mem_32bit:
0000E7DB: C6 05 A3 A2 01 00 D9                                  	mov	[base_code],0D9h
0000E7E2: E9 33 CD FF FF                                        	jmp	instruction_ready
                                                                      fld_mem_64bit:
0000E7E7: C6 05 A3 A2 01 00 DD                                  	mov	[base_code],0DDh
0000E7EE: E9 27 CD FF FF                                        	jmp	instruction_ready
                                                                      fld_mem_80bit:
0000E7F3: A0 A6 A2 01 00                                        	mov	al,[postbyte_register]
0000E7F8: 3C 00                                                 	cmp	al,0
0000E7FA: 74 0F                                                 	je	fld_mem_80bit_store
0000E7FC: FE 0D A6 A2 01 00                                     	dec	[postbyte_register]
0000E802: 3C 03                                                 	cmp	al,3
0000E804: 74 05                                                 	je	fld_mem_80bit_store
0000E806: E9 33 21 FF FF                                        	jmp	invalid_operand_size
                                                                      fld_mem_80bit_store:
0000E80B: 80 05 A6 A2 01 00 05                                  	add	[postbyte_register],5
0000E812: C6 05 A3 A2 01 00 DB                                  	mov	[base_code],0DBh
0000E819: E9 FC CC FF FF                                        	jmp	instruction_ready
                                                                      fld_streg:
0000E81E: AC                                                    	lods	byte [esi]
0000E81F: E8 AF 24 00 00                                        	call	convert_fpu_register
0000E824: 88 C3                                                 	mov	bl,al
0000E826: 80 3D A6 A2 01 00 02                                  	cmp	[postbyte_register],2
0000E82D: 73 0C                                                 	jae	fst_streg
0000E82F: C6 05 A3 A2 01 00 D9                                  	mov	[base_code],0D9h
0000E836: E9 BA CE FF FF                                        	jmp	nomem_instruction_ready
                                                                      fst_streg:
0000E83B: C6 05 A3 A2 01 00 DD                                  	mov	[base_code],0DDh
0000E842: E9 AE CE FF FF                                        	jmp	nomem_instruction_ready
                                                                fild_instruction:
0000E847: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000E84C: AC                                                    	lods	byte [esi]
0000E84D: E8 D8 24 00 00                                        	call	get_size_operator
0000E852: 3C 5B                                                 	cmp	al,'['
0000E854: 0F 85 DA 20 FF FF                                     	jne	invalid_operand
0000E85A: E8 27 25 00 00                                        	call	get_address
0000E85F: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000E864: 3C 02                                                 	cmp	al,2
0000E866: 74 21                                                 	je	fild_mem_16bit
0000E868: 3C 04                                                 	cmp	al,4
0000E86A: 74 11                                                 	je	fild_mem_32bit
0000E86C: 3C 08                                                 	cmp	al,8
0000E86E: 74 25                                                 	je	fild_mem_64bit
0000E870: 08 C0                                                 	or	al,al
0000E872: 0F 85 C6 20 FF FF                                     	jnz	invalid_operand_size
0000E878: E8 E7 CF FF FF                                        	call	recoverable_unknown_size
                                                                      fild_mem_32bit:
0000E87D: C6 05 A3 A2 01 00 DB                                  	mov	[base_code],0DBh
0000E884: E9 91 CC FF FF                                        	jmp	instruction_ready
                                                                      fild_mem_16bit:
0000E889: C6 05 A3 A2 01 00 DF                                  	mov	[base_code],0DFh
0000E890: E9 85 CC FF FF                                        	jmp	instruction_ready
                                                                      fild_mem_64bit:
0000E895: A0 A6 A2 01 00                                        	mov	al,[postbyte_register]
0000E89A: 3C 01                                                 	cmp	al,1
0000E89C: 74 24                                                 	je	fisttp_64bit_store
0000E89E: 72 0F                                                 	jb	fild_mem_64bit_store
0000E8A0: FE 0D A6 A2 01 00                                     	dec	[postbyte_register]
0000E8A6: 3C 03                                                 	cmp	al,3
0000E8A8: 74 05                                                 	je	fild_mem_64bit_store
0000E8AA: E9 8F 20 FF FF                                        	jmp	invalid_operand_size
                                                                      fild_mem_64bit_store:
0000E8AF: 80 05 A6 A2 01 00 05                                  	add	[postbyte_register],5
0000E8B6: C6 05 A3 A2 01 00 DF                                  	mov	[base_code],0DFh
0000E8BD: E9 58 CC FF FF                                        	jmp	instruction_ready
                                                                      fisttp_64bit_store:
0000E8C2: C6 05 A3 A2 01 00 DD                                  	mov	[base_code],0DDh
0000E8C9: E9 4C CC FF FF                                        	jmp	instruction_ready
                                                                fbld_instruction:
0000E8CE: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000E8D3: AC                                                    	lods	byte [esi]
0000E8D4: E8 51 24 00 00                                        	call	get_size_operator
0000E8D9: 3C 5B                                                 	cmp	al,'['
0000E8DB: 0F 85 53 20 FF FF                                     	jne	invalid_operand
0000E8E1: E8 A0 24 00 00                                        	call	get_address
0000E8E6: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000E8EB: 08 C0                                                 	or	al,al
0000E8ED: 74 09                                                 	jz	fbld_mem_80bit
0000E8EF: 3C 0A                                                 	cmp	al,10
0000E8F1: 74 05                                                 	je	fbld_mem_80bit
0000E8F3: E9 46 20 FF FF                                        	jmp	invalid_operand_size
                                                                      fbld_mem_80bit:
0000E8F8: C6 05 A3 A2 01 00 DF                                  	mov	[base_code],0DFh
0000E8FF: E9 16 CC FF FF                                        	jmp	instruction_ready
                                                                faddp_instruction:
0000E904: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000E909: C6 05 A3 A2 01 00 DE                                  	mov	[base_code],0DEh
0000E910: 89 F2                                                 	mov	edx,esi
0000E912: AC                                                    	lods	byte [esi]
0000E913: E8 12 24 00 00                                        	call	get_size_operator
0000E918: 3C 10                                                 	cmp	al,10h
0000E91A: 74 09                                                 	je	faddp_streg
0000E91C: 89 D6                                                 	mov	esi,edx
0000E91E: B3 01                                                 	mov	bl,1
0000E920: E9 D0 CD FF FF                                        	jmp	nomem_instruction_ready
                                                                      faddp_streg:
0000E925: AC                                                    	lods	byte [esi]
0000E926: E8 A8 23 00 00                                        	call	convert_fpu_register
0000E92B: 88 C3                                                 	mov	bl,al
0000E92D: AC                                                    	lods	byte [esi]
0000E92E: 3C 2C                                                 	cmp	al,','
0000E930: 0F 85 FE 1F FF FF                                     	jne	invalid_operand
0000E936: AC                                                    	lods	byte [esi]
0000E937: E8 EE 23 00 00                                        	call	get_size_operator
0000E93C: 3C 10                                                 	cmp	al,10h
0000E93E: 0F 85 F0 1F FF FF                                     	jne	invalid_operand
0000E944: AC                                                    	lods	byte [esi]
0000E945: E8 89 23 00 00                                        	call	convert_fpu_register
0000E94A: 08 C0                                                 	or	al,al
0000E94C: 0F 85 E2 1F FF FF                                     	jnz	invalid_operand
0000E952: E9 9E CD FF FF                                        	jmp	nomem_instruction_ready
                                                                fcompp_instruction:
0000E957: 66 B8 DE D9                                           	mov	ax,0D9DEh
0000E95B: 66 AB                                                 	stos	word [edi]
0000E95D: E9 0E 66 FF FF                                        	jmp	instruction_assembled
                                                                fucompp_instruction:
0000E962: 66 B8 DA E9                                           	mov	ax,0E9DAh
0000E966: 66 AB                                                 	stos	word [edi]
0000E968: E9 03 66 FF FF                                        	jmp	instruction_assembled
                                                                fxch_instruction:
0000E96D: 66 BA D9 01                                           	mov	dx,01D9h
0000E971: EB 0A                                                 	jmp	fpu_single_operand
                                                                ffreep_instruction:
0000E973: 66 BA DF 00                                           	mov	dx,00DFh
0000E977: EB 04                                                 	jmp	fpu_single_operand
                                                                ffree_instruction:
0000E979: B2 DD                                                 	mov	dl,0DDh
0000E97B: 88 C6                                                 	mov	dh,al
                                                                      fpu_single_operand:
0000E97D: 89 F3                                                 	mov	ebx,esi
0000E97F: AC                                                    	lods	byte [esi]
0000E980: E8 A5 23 00 00                                        	call	get_size_operator
0000E985: 3C 10                                                 	cmp	al,10h
0000E987: 74 1A                                                 	je	fpu_streg
0000E989: 08 F6                                                 	or	dh,dh
0000E98B: 0F 84 A3 1F FF FF                                     	jz	invalid_operand
0000E991: 89 DE                                                 	mov	esi,ebx
0000E993: C0 E6 03                                              	shl	dh,3
0000E996: 80 CE C1                                              	or	dh,11000001b
0000E999: 66 89 D0                                              	mov	ax,dx
0000E99C: 66 AB                                                 	stos	word [edi]
0000E99E: E9 CD 65 FF FF                                        	jmp	instruction_assembled
                                                                      fpu_streg:
0000E9A3: AC                                                    	lods	byte [esi]
0000E9A4: E8 2A 23 00 00                                        	call	convert_fpu_register
0000E9A9: C0 E6 03                                              	shl	dh,3
0000E9AC: 08 C6                                                 	or	dh,al
0000E9AE: 80 CE C0                                              	or	dh,11000000b
0000E9B1: 66 89 D0                                              	mov	ax,dx
0000E9B4: 66 AB                                                 	stos	word [edi]
0000E9B6: E9 B5 65 FF FF                                        	jmp	instruction_assembled
                                                                
                                                                fstenv_instruction:
0000E9BB: C6 07 9B                                              	mov	byte [edi],9Bh
0000E9BE: 47                                                    	inc	edi
                                                                fldenv_instruction:
0000E9BF: C6 05 A3 A2 01 00 D9                                  	mov	[base_code],0D9h
0000E9C6: EB 37                                                 	jmp	fpu_mem
                                                                fstenv_instruction_16bit:
0000E9C8: C6 07 9B                                              	mov	byte [edi],9Bh
0000E9CB: 47                                                    	inc	edi
                                                                fldenv_instruction_16bit:
0000E9CC: E8 AB 24 00 00                                        	call	operand_16bit
0000E9D1: EB EC                                                 	jmp	fldenv_instruction
                                                                fstenv_instruction_32bit:
0000E9D3: C6 07 9B                                              	mov	byte [edi],9Bh
0000E9D6: 47                                                    	inc	edi
                                                                fldenv_instruction_32bit:
0000E9D7: E8 B1 24 00 00                                        	call	operand_32bit
0000E9DC: EB E1                                                 	jmp	fldenv_instruction
                                                                fsave_instruction_32bit:
0000E9DE: C6 07 9B                                              	mov	byte [edi],9Bh
0000E9E1: 47                                                    	inc	edi
                                                                fnsave_instruction_32bit:
0000E9E2: E8 A6 24 00 00                                        	call	operand_32bit
0000E9E7: EB 0F                                                 	jmp	fnsave_instruction
                                                                fsave_instruction_16bit:
0000E9E9: C6 07 9B                                              	mov	byte [edi],9Bh
0000E9EC: 47                                                    	inc	edi
                                                                fnsave_instruction_16bit:
0000E9ED: E8 8A 24 00 00                                        	call	operand_16bit
0000E9F2: EB 04                                                 	jmp	fnsave_instruction
                                                                fsave_instruction:
0000E9F4: C6 07 9B                                              	mov	byte [edi],9Bh
0000E9F7: 47                                                    	inc	edi
                                                                fnsave_instruction:
0000E9F8: C6 05 A3 A2 01 00 DD                                  	mov	[base_code],0DDh
                                                                      fpu_mem:
0000E9FF: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000EA04: AC                                                    	lods	byte [esi]
0000EA05: E8 20 23 00 00                                        	call	get_size_operator
0000EA0A: 3C 5B                                                 	cmp	al,'['
0000EA0C: 0F 85 22 1F FF FF                                     	jne	invalid_operand
0000EA12: E8 6F 23 00 00                                        	call	get_address
0000EA17: 80 3D 98 A2 01 00 00                                  	cmp	[operand_size],0
0000EA1E: 0F 85 1A 1F FF FF                                     	jne	invalid_operand_size
0000EA24: E9 F1 CA FF FF                                        	jmp	instruction_ready
                                                                fstcw_instruction:
0000EA29: C6 07 9B                                              	mov	byte [edi],9Bh
0000EA2C: 47                                                    	inc	edi
                                                                fldcw_instruction:
0000EA2D: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000EA32: C6 05 A3 A2 01 00 D9                                  	mov	[base_code],0D9h
0000EA39: AC                                                    	lods	byte [esi]
0000EA3A: E8 EB 22 00 00                                        	call	get_size_operator
0000EA3F: 3C 5B                                                 	cmp	al,'['
0000EA41: 0F 85 ED 1E FF FF                                     	jne	invalid_operand
0000EA47: E8 3A 23 00 00                                        	call	get_address
0000EA4C: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000EA51: 08 C0                                                 	or	al,al
0000EA53: 74 09                                                 	jz	fldcw_mem_16bit
0000EA55: 3C 02                                                 	cmp	al,2
0000EA57: 74 05                                                 	je	fldcw_mem_16bit
0000EA59: E9 E0 1E FF FF                                        	jmp	invalid_operand_size
                                                                      fldcw_mem_16bit:
0000EA5E: E9 B7 CA FF FF                                        	jmp	instruction_ready
                                                                fstsw_instruction:
0000EA63: B0 9B                                                 	mov	al,9Bh
0000EA65: AA                                                    	stos	byte [edi]
                                                                fnstsw_instruction:
0000EA66: C6 05 A3 A2 01 00 DD                                  	mov	[base_code],0DDh
0000EA6D: C6 05 A6 A2 01 00 07                                  	mov	[postbyte_register],7
0000EA74: AC                                                    	lods	byte [esi]
0000EA75: E8 B0 22 00 00                                        	call	get_size_operator
0000EA7A: 3C 10                                                 	cmp	al,10h
0000EA7C: 74 24                                                 	je	fstsw_reg
0000EA7E: 3C 5B                                                 	cmp	al,'['
0000EA80: 0F 85 AE 1E FF FF                                     	jne	invalid_operand
0000EA86: E8 FB 22 00 00                                        	call	get_address
0000EA8B: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000EA90: 08 C0                                                 	or	al,al
0000EA92: 74 09                                                 	jz	fstsw_mem_16bit
0000EA94: 3C 02                                                 	cmp	al,2
0000EA96: 74 05                                                 	je	fstsw_mem_16bit
0000EA98: E9 A1 1E FF FF                                        	jmp	invalid_operand_size
                                                                      fstsw_mem_16bit:
0000EA9D: E9 78 CA FF FF                                        	jmp	instruction_ready
                                                                      fstsw_reg:
0000EAA2: AC                                                    	lods	byte [esi]
0000EAA3: E8 DB 21 00 00                                        	call	convert_register
0000EAA8: 66 3D 00 02                                           	cmp	ax,0200h
0000EAAC: 0F 85 82 1E FF FF                                     	jne	invalid_operand
0000EAB2: 66 B8 DF E0                                           	mov	ax,0E0DFh
0000EAB6: 66 AB                                                 	stos	word [edi]
0000EAB8: E9 B3 64 FF FF                                        	jmp	instruction_assembled
                                                                finit_instruction:
0000EABD: C6 07 9B                                              	mov	byte [edi],9Bh
0000EAC0: 47                                                    	inc	edi
                                                                fninit_instruction:
0000EAC1: 88 C4                                                 	mov	ah,al
0000EAC3: B0 DB                                                 	mov	al,0DBh
0000EAC5: 66 AB                                                 	stos	word [edi]
0000EAC7: E9 A4 64 FF FF                                        	jmp	instruction_assembled
                                                                fcmov_instruction:
0000EACC: B6 DA                                                 	mov	dh,0DAh
0000EACE: EB 06                                                 	jmp	fcomi_streg
                                                                fcomi_instruction:
0000EAD0: B6 DB                                                 	mov	dh,0DBh
0000EAD2: EB 02                                                 	jmp	fcomi_streg
                                                                fcomip_instruction:
0000EAD4: B6 DF                                                 	mov	dh,0DFh
                                                                      fcomi_streg:
0000EAD6: 88 C2                                                 	mov	dl,al
0000EAD8: AC                                                    	lods	byte [esi]
0000EAD9: E8 4C 22 00 00                                        	call	get_size_operator
0000EADE: 3C 10                                                 	cmp	al,10h
0000EAE0: 0F 85 4E 1E FF FF                                     	jne	invalid_operand
0000EAE6: AC                                                    	lods	byte [esi]
0000EAE7: E8 E7 21 00 00                                        	call	convert_fpu_register
0000EAEC: 88 C4                                                 	mov	ah,al
0000EAEE: 80 3E 2C                                              	cmp	byte [esi],','
0000EAF1: 74 0B                                                 	je	fcomi_st0_streg
0000EAF3: 00 D4                                                 	add	ah,dl
0000EAF5: 88 F0                                                 	mov	al,dh
0000EAF7: 66 AB                                                 	stos	word [edi]
0000EAF9: E9 72 64 FF FF                                        	jmp	instruction_assembled
                                                                      fcomi_st0_streg:
0000EAFE: 08 E4                                                 	or	ah,ah
0000EB00: 0F 85 2E 1E FF FF                                     	jnz	invalid_operand
0000EB06: 46                                                    	inc	esi
0000EB07: AC                                                    	lods	byte [esi]
0000EB08: E8 1D 22 00 00                                        	call	get_size_operator
0000EB0D: 3C 10                                                 	cmp	al,10h
0000EB0F: 0F 85 1F 1E FF FF                                     	jne	invalid_operand
0000EB15: AC                                                    	lods	byte [esi]
0000EB16: E8 B8 21 00 00                                        	call	convert_fpu_register
0000EB1B: 88 C4                                                 	mov	ah,al
0000EB1D: 00 D4                                                 	add	ah,dl
0000EB1F: 88 F0                                                 	mov	al,dh
0000EB21: 66 AB                                                 	stos	word [edi]
0000EB23: E9 48 64 FF FF                                        	jmp	instruction_assembled
                                                                
                                                                basic_mmx_instruction:
0000EB28: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000EB2F: A2 A4 A2 01 00                                        	mov	[extended_code],al
                                                                      mmx_instruction:
0000EB34: AC                                                    	lods	byte [esi]
0000EB35: E8 F0 21 00 00                                        	call	get_size_operator
0000EB3A: 3C 10                                                 	cmp	al,10h
0000EB3C: 0F 85 F2 1D FF FF                                     	jne	invalid_operand
0000EB42: AC                                                    	lods	byte [esi]
0000EB43: E8 9D 21 00 00                                        	call	convert_mmx_register
0000EB48: E8 AB 03 00 00                                        	call	make_mmx_prefix
0000EB4D: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000EB52: AC                                                    	lods	byte [esi]
0000EB53: 3C 2C                                                 	cmp	al,','
0000EB55: 0F 85 D9 1D FF FF                                     	jne	invalid_operand
0000EB5B: AC                                                    	lods	byte [esi]
0000EB5C: E8 C9 21 00 00                                        	call	get_size_operator
0000EB61: 3C 10                                                 	cmp	al,10h
0000EB63: 74 12                                                 	je	mmx_mmreg_mmreg
0000EB65: 3C 5B                                                 	cmp	al,'['
0000EB67: 0F 85 C7 1D FF FF                                     	jne	invalid_operand
                                                                      mmx_mmreg_mem:
0000EB6D: E8 14 22 00 00                                        	call	get_address
0000EB72: E9 A3 C9 FF FF                                        	jmp	instruction_ready
                                                                      mmx_mmreg_mmreg:
0000EB77: AC                                                    	lods	byte [esi]
0000EB78: E8 68 21 00 00                                        	call	convert_mmx_register
0000EB7D: 88 C3                                                 	mov	bl,al
0000EB7F: E9 71 CB FF FF                                        	jmp	nomem_instruction_ready
                                                                mmx_bit_shift_instruction:
0000EB84: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000EB8B: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000EB90: AC                                                    	lods	byte [esi]
0000EB91: E8 94 21 00 00                                        	call	get_size_operator
0000EB96: 3C 10                                                 	cmp	al,10h
0000EB98: 0F 85 96 1D FF FF                                     	jne	invalid_operand
0000EB9E: AC                                                    	lods	byte [esi]
0000EB9F: E8 41 21 00 00                                        	call	convert_mmx_register
0000EBA4: E8 4F 03 00 00                                        	call	make_mmx_prefix
0000EBA9: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000EBAE: AC                                                    	lods	byte [esi]
0000EBAF: 3C 2C                                                 	cmp	al,','
0000EBB1: 0F 85 7D 1D FF FF                                     	jne	invalid_operand
0000EBB7: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000EBBE: AC                                                    	lods	byte [esi]
0000EBBF: E8 66 21 00 00                                        	call	get_size_operator
0000EBC4: 3C 10                                                 	cmp	al,10h
0000EBC6: 74 AF                                                 	je	mmx_mmreg_mmreg
0000EBC8: 3C 28                                                 	cmp	al,'('
0000EBCA: 74 09                                                 	je	mmx_ps_mmreg_imm8
0000EBCC: 3C 5B                                                 	cmp	al,'['
0000EBCE: 74 9D                                                 	je	mmx_mmreg_mem
0000EBD0: E9 5F 1D FF FF                                        	jmp	invalid_operand
                                                                      mmx_ps_mmreg_imm8:
0000EBD5: E8 D3 86 FF FF                                        	call	get_byte_value
0000EBDA: A2 F4 A1 01 00                                        	mov	byte [value],al
0000EBDF: F6 05 98 A2 01 00 FE                                  	test	[operand_size],not 1
0000EBE6: 0F 85 B6 1D FF FF                                     	jnz	invalid_value
0000EBEC: 8A 1D A4 A2 01 00                                     	mov	bl,[extended_code]
0000EBF2: 88 D8                                                 	mov	al,bl
0000EBF4: C0 EB 04                                              	shr	bl,4
0000EBF7: 24 0F                                                 	and	al,1111b
0000EBF9: 04 70                                                 	add	al,70h
0000EBFB: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000EC00: 80 EB 0C                                              	sub	bl,0Ch
0000EC03: D0 E3                                                 	shl	bl,1
0000EC05: 86 1D A6 A2 01 00                                     	xchg	bl,[postbyte_register]
0000EC0B: E8 76 23 00 00                                        	call	store_nomem_instruction
0000EC10: A0 F4 A1 01 00                                        	mov	al,byte [value]
0000EC15: AA                                                    	stos	byte [edi]
0000EC16: E9 55 63 FF FF                                        	jmp	instruction_assembled
                                                                pmovmskb_instruction:
0000EC1B: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000EC22: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000EC27: E8 48 20 00 00                                        	call	take_register
0000EC2C: 80 FC 04                                              	cmp	ah,4
0000EC2F: 74 16                                                 	je	pmovmskb_reg_size_ok
0000EC31: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000EC38: 0F 85 00 1D FF FF                                     	jne	invalid_operand_size
0000EC3E: 80 FC 08                                              	cmp	ah,8
0000EC41: 0F 85 F7 1C FF FF                                     	jnz	invalid_operand_size
                                                                      pmovmskb_reg_size_ok:
0000EC47: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000EC4C: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000EC53: AC                                                    	lods	byte [esi]
0000EC54: 3C 2C                                                 	cmp	al,','
0000EC56: 0F 85 D8 1C FF FF                                     	jne	invalid_operand
0000EC5C: AC                                                    	lods	byte [esi]
0000EC5D: E8 C8 20 00 00                                        	call	get_size_operator
0000EC62: 3C 10                                                 	cmp	al,10h
0000EC64: 0F 85 CA 1C FF FF                                     	jne	invalid_operand
0000EC6A: AC                                                    	lods	byte [esi]
0000EC6B: E8 75 20 00 00                                        	call	convert_mmx_register
0000EC70: 88 C3                                                 	mov	bl,al
0000EC72: E8 81 02 00 00                                        	call	make_mmx_prefix
0000EC77: 80 3D A4 A2 01 00 C5                                  	cmp	[extended_code],0C5h
0000EC7E: 74 4D                                                 	je	mmx_nomem_imm8
0000EC80: E9 70 CA FF FF                                        	jmp	nomem_instruction_ready
                                                                      mmx_imm8:
0000EC85: 53 51 52                                              	push	ebx ecx edx
0000EC88: 30 C9                                                 	xor	cl,cl
0000EC8A: 86 0D 98 A2 01 00                                     	xchg	cl,[operand_size]
0000EC90: AC                                                    	lods	byte [esi]
0000EC91: 3C 2C                                                 	cmp	al,','
0000EC93: 0F 85 9B 1C FF FF                                     	jne	invalid_operand
0000EC99: AC                                                    	lods	byte [esi]
0000EC9A: E8 8B 20 00 00                                        	call	get_size_operator
0000EC9F: F6 C4 FE                                              	test	ah,not 1
0000ECA2: 0F 85 96 1C FF FF                                     	jnz	invalid_operand_size
0000ECA8: 88 0D 98 A2 01 00                                     	mov	[operand_size],cl
0000ECAE: 3C 28                                                 	cmp	al,'('
0000ECB0: 0F 85 7E 1C FF FF                                     	jne	invalid_operand
0000ECB6: E8 F2 85 FF FF                                        	call	get_byte_value
0000ECBB: A2 F4 A1 01 00                                        	mov	byte [value],al
0000ECC0: 5A 59 5B                                              	pop	edx ecx ebx
0000ECC3: E8 A1 28 00 00                                        	call	store_instruction_with_imm8
0000ECC8: E9 A3 62 FF FF                                        	jmp	instruction_assembled
                                                                      mmx_nomem_imm8:
0000ECCD: E8 B4 22 00 00                                        	call	store_nomem_instruction
0000ECD2: E8 05 00 00 00                                        	call	append_imm8
0000ECD7: E9 94 62 FF FF                                        	jmp	instruction_assembled
                                                                      append_imm8:
0000ECDC: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000ECE3: AC                                                    	lods	byte [esi]
0000ECE4: 3C 2C                                                 	cmp	al,','
0000ECE6: 0F 85 48 1C FF FF                                     	jne	invalid_operand
0000ECEC: AC                                                    	lods	byte [esi]
0000ECED: E8 38 20 00 00                                        	call	get_size_operator
0000ECF2: F6 C4 FE                                              	test	ah,not 1
0000ECF5: 0F 85 43 1C FF FF                                     	jnz	invalid_operand_size
0000ECFB: 3C 28                                                 	cmp	al,'('
0000ECFD: 0F 85 31 1C FF FF                                     	jne	invalid_operand
0000ED03: E8 A5 85 FF FF                                        	call	get_byte_value
0000ED08: AA                                                    	stosb
0000ED09: C3                                                    	ret
                                                                pinsrw_instruction:
0000ED0A: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000ED0F: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000ED16: AC                                                    	lods	byte [esi]
0000ED17: E8 0E 20 00 00                                        	call	get_size_operator
0000ED1C: 3C 10                                                 	cmp	al,10h
0000ED1E: 0F 85 10 1C FF FF                                     	jne	invalid_operand
0000ED24: AC                                                    	lods	byte [esi]
0000ED25: E8 BB 1F 00 00                                        	call	convert_mmx_register
0000ED2A: E8 C9 01 00 00                                        	call	make_mmx_prefix
0000ED2F: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000ED34: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000ED3B: AC                                                    	lods	byte [esi]
0000ED3C: 3C 2C                                                 	cmp	al,','
0000ED3E: 0F 85 F0 1B FF FF                                     	jne	invalid_operand
0000ED44: AC                                                    	lods	byte [esi]
0000ED45: E8 E0 1F 00 00                                        	call	get_size_operator
0000ED4A: 3C 10                                                 	cmp	al,10h
0000ED4C: 74 2C                                                 	je	pinsrw_mmreg_reg
0000ED4E: 3C 5B                                                 	cmp	al,'['
0000ED50: 0F 85 DE 1B FF FF                                     	jne	invalid_operand
0000ED56: E8 2B 20 00 00                                        	call	get_address
0000ED5B: 80 3D 98 A2 01 00 00                                  	cmp	[operand_size],0
0000ED62: 0F 84 1D FF FF FF                                     	je	mmx_imm8
0000ED68: 80 3D 98 A2 01 00 02                                  	cmp	[operand_size],2
0000ED6F: 0F 85 C9 1B FF FF                                     	jne	invalid_operand_size
0000ED75: E9 0B FF FF FF                                        	jmp	mmx_imm8
                                                                      pinsrw_mmreg_reg:
0000ED7A: AC                                                    	lods	byte [esi]
0000ED7B: E8 03 1F 00 00                                        	call	convert_register
0000ED80: 80 FC 04                                              	cmp	ah,4
0000ED83: 0F 85 B5 1B FF FF                                     	jne	invalid_operand_size
0000ED89: 88 C3                                                 	mov	bl,al
0000ED8B: E9 3D FF FF FF                                        	jmp	mmx_nomem_imm8
                                                                pshufw_instruction:
0000ED90: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
0000ED97: A2 9C A2 01 00                                        	mov	[opcode_prefix],al
0000ED9C: EB 0C                                                 	jmp	pshuf_instruction
                                                                pshufd_instruction:
0000ED9E: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
0000EDA5: A2 9C A2 01 00                                        	mov	[opcode_prefix],al
                                                                      pshuf_instruction:
0000EDAA: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000EDB1: C6 05 A4 A2 01 00 70                                  	mov	[extended_code],70h
0000EDB8: AC                                                    	lods	byte [esi]
0000EDB9: E8 6C 1F 00 00                                        	call	get_size_operator
0000EDBE: 3C 10                                                 	cmp	al,10h
0000EDC0: 0F 85 6E 1B FF FF                                     	jne	invalid_operand
0000EDC6: AC                                                    	lods	byte [esi]
0000EDC7: E8 19 1F 00 00                                        	call	convert_mmx_register
0000EDCC: 3A 25 A9 A2 01 00                                     	cmp	ah,[mmx_size]
0000EDD2: 0F 85 66 1B FF FF                                     	jne	invalid_operand_size
0000EDD8: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000EDDD: AC                                                    	lods	byte [esi]
0000EDDE: 3C 2C                                                 	cmp	al,','
0000EDE0: 0F 85 4E 1B FF FF                                     	jne	invalid_operand
0000EDE6: AC                                                    	lods	byte [esi]
0000EDE7: E8 3E 1F 00 00                                        	call	get_size_operator
0000EDEC: 3C 10                                                 	cmp	al,10h
0000EDEE: 74 12                                                 	je	pshuf_mmreg_mmreg
0000EDF0: 3C 5B                                                 	cmp	al,'['
0000EDF2: 0F 85 3C 1B FF FF                                     	jne	invalid_operand
0000EDF8: E8 89 1F 00 00                                        	call	get_address
0000EDFD: E9 83 FE FF FF                                        	jmp	mmx_imm8
                                                                      pshuf_mmreg_mmreg:
0000EE02: AC                                                    	lods	byte [esi]
0000EE03: E8 DD 1E 00 00                                        	call	convert_mmx_register
0000EE08: 88 C3                                                 	mov	bl,al
0000EE0A: E9 BE FE FF FF                                        	jmp	mmx_nomem_imm8
                                                                movd_instruction:
0000EE0F: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000EE16: C6 05 A4 A2 01 00 7E                                  	mov	[extended_code],7Eh
0000EE1D: AC                                                    	lods	byte [esi]
0000EE1E: E8 07 1F 00 00                                        	call	get_size_operator
0000EE23: 3C 10                                                 	cmp	al,10h
0000EE25: 74 24                                                 	je	movd_reg
0000EE27: 3C 5B                                                 	cmp	al,'['
0000EE29: 0F 85 05 1B FF FF                                     	jne	invalid_operand
0000EE2F: E8 52 1F 00 00                                        	call	get_address
0000EE34: F6 05 98 A2 01 00 FB                                  	test	[operand_size],not 4
0000EE3B: 0F 85 FD 1A FF FF                                     	jnz	invalid_operand_size
0000EE41: E8 89 00 00 00                                        	call	get_mmx_source_register
0000EE46: E9 CF C6 FF FF                                        	jmp	instruction_ready
                                                                      movd_reg:
0000EE4B: AC                                                    	lods	byte [esi]
0000EE4C: 3C B0                                                 	cmp	al,0B0h
0000EE4E: 73 1A                                                 	jae	movd_mmreg
0000EE50: E8 2E 1E 00 00                                        	call	convert_register
0000EE55: 80 FC 04                                              	cmp	ah,4
0000EE58: 0F 85 E0 1A FF FF                                     	jne	invalid_operand_size
0000EE5E: 88 C3                                                 	mov	bl,al
0000EE60: E8 6A 00 00 00                                        	call	get_mmx_source_register
0000EE65: E9 8B C8 FF FF                                        	jmp	nomem_instruction_ready
                                                                      movd_mmreg:
0000EE6A: C6 05 A4 A2 01 00 6E                                  	mov	[extended_code],6Eh
0000EE71: E8 6F 1E 00 00                                        	call	convert_mmx_register
0000EE76: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000EE7B: E8 78 00 00 00                                        	call	make_mmx_prefix
0000EE80: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000EE87: AC                                                    	lods	byte [esi]
0000EE88: 3C 2C                                                 	cmp	al,','
0000EE8A: 0F 85 A4 1A FF FF                                     	jne	invalid_operand
0000EE90: AC                                                    	lods	byte [esi]
0000EE91: E8 94 1E 00 00                                        	call	get_size_operator
0000EE96: 3C 10                                                 	cmp	al,10h
0000EE98: 74 1F                                                 	je	movd_mmreg_reg
0000EE9A: 3C 5B                                                 	cmp	al,'['
0000EE9C: 0F 85 92 1A FF FF                                     	jne	invalid_operand
0000EEA2: E8 DF 1E 00 00                                        	call	get_address
0000EEA7: F6 05 98 A2 01 00 FB                                  	test	[operand_size],not 4
0000EEAE: 0F 85 8A 1A FF FF                                     	jnz	invalid_operand_size
0000EEB4: E9 61 C6 FF FF                                        	jmp	instruction_ready
                                                                      movd_mmreg_reg:
0000EEB9: AC                                                    	lods	byte [esi]
0000EEBA: E8 C4 1D 00 00                                        	call	convert_register
0000EEBF: 80 FC 04                                              	cmp	ah,4
0000EEC2: 0F 85 76 1A FF FF                                     	jne	invalid_operand_size
0000EEC8: 88 C3                                                 	mov	bl,al
0000EECA: E9 26 C8 FF FF                                        	jmp	nomem_instruction_ready
                                                                      get_mmx_source_register:
0000EECF: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000EED6: AC                                                    	lods	byte [esi]
0000EED7: 3C 2C                                                 	cmp	al,','
0000EED9: 0F 85 55 1A FF FF                                     	jne	invalid_operand
0000EEDF: AC                                                    	lods	byte [esi]
0000EEE0: E8 45 1E 00 00                                        	call	get_size_operator
0000EEE5: 3C 10                                                 	cmp	al,10h
0000EEE7: 0F 85 47 1A FF FF                                     	jne	invalid_operand
0000EEED: AC                                                    	lods	byte [esi]
0000EEEE: E8 F2 1D 00 00                                        	call	convert_mmx_register
0000EEF3: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
                                                                      make_mmx_prefix:
0000EEF8: 80 3D 98 A2 01 00 10                                  	cmp	[operand_size],16
0000EEFF: 75 07                                                 	jne	no_mmx_prefix
0000EF01: C6 05 9A A2 01 00 66                                  	mov	[operand_prefix],66h
                                                                      no_mmx_prefix:
0000EF08: C3                                                    	ret
                                                                movq_instruction:
0000EF09: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000EF10: AC                                                    	lods	byte [esi]
0000EF11: E8 14 1E 00 00                                        	call	get_size_operator
0000EF16: 3C 10                                                 	cmp	al,10h
0000EF18: 74 32                                                 	je	movq_reg
0000EF1A: 3C 5B                                                 	cmp	al,'['
0000EF1C: 0F 85 12 1A FF FF                                     	jne	invalid_operand
0000EF22: E8 5F 1E 00 00                                        	call	get_address
0000EF27: F6 05 98 A2 01 00 F7                                  	test	[operand_size],not 8
0000EF2E: 0F 85 0A 1A FF FF                                     	jnz	invalid_operand_size
0000EF34: E8 96 FF FF FF                                        	call	get_mmx_source_register
0000EF39: B0 7F                                                 	mov	al,7Fh
0000EF3B: 80 FC 08                                              	cmp	ah,8
0000EF3E: 74 02                                                 	je	movq_mem_ready
0000EF40: B0 D6                                                 	mov	al,0D6h
                                                                     movq_mem_ready:
0000EF42: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000EF47: E9 CE C5 FF FF                                        	jmp	instruction_ready
                                                                     movq_reg:
0000EF4C: AC                                                    	lods	byte [esi]
0000EF4D: 3C B0                                                 	cmp	al,0B0h
0000EF4F: 73 26                                                 	jae	movq_mmreg
0000EF51: E8 2D 1D 00 00                                        	call	convert_register
0000EF56: 80 FC 08                                              	cmp	ah,8
0000EF59: 0F 85 DF 19 FF FF                                     	jne	invalid_operand_size
0000EF5F: 88 C3                                                 	mov	bl,al
0000EF61: C6 05 A4 A2 01 00 7E                                  	mov	[extended_code],7Eh
0000EF68: E8 31 1F 00 00                                        	call	operand_64bit
0000EF6D: E8 5D FF FF FF                                        	call	get_mmx_source_register
0000EF72: E9 7E C7 FF FF                                        	jmp	nomem_instruction_ready
                                                                     movq_mmreg:
0000EF77: E8 69 1D 00 00                                        	call	convert_mmx_register
0000EF7C: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000EF81: C6 05 A4 A2 01 00 6F                                  	mov	[extended_code],6Fh
0000EF88: 88 25 A9 A2 01 00                                     	mov	[mmx_size],ah
0000EF8E: 80 FC 10                                              	cmp	ah,16
0000EF91: 75 0E                                                 	jne	movq_mmreg_
0000EF93: C6 05 A4 A2 01 00 7E                                  	mov	[extended_code],7Eh
0000EF9A: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
                                                                      movq_mmreg_:
0000EFA1: AC                                                    	lods	byte [esi]
0000EFA2: 3C 2C                                                 	cmp	al,','
0000EFA4: 0F 85 8A 19 FF FF                                     	jne	invalid_operand
0000EFAA: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000EFB1: AC                                                    	lods	byte [esi]
0000EFB2: E8 73 1D 00 00                                        	call	get_size_operator
0000EFB7: 3C 10                                                 	cmp	al,10h
0000EFB9: 74 1F                                                 	je	movq_mmreg_reg
0000EFBB: 3C 5B                                                 	cmp	al,'['
0000EFBD: 0F 85 71 19 FF FF                                     	jne	invalid_operand
0000EFC3: E8 BE 1D 00 00                                        	call	get_address
0000EFC8: F6 05 98 A2 01 00 F7                                  	test	[operand_size],not 8
0000EFCF: 0F 85 69 19 FF FF                                     	jnz	invalid_operand_size
0000EFD5: E9 40 C5 FF FF                                        	jmp	instruction_ready
                                                                      movq_mmreg_reg:
0000EFDA: AC                                                    	lods	byte [esi]
0000EFDB: 3C B0                                                 	cmp	al,0B0h
0000EFDD: 73 3F                                                 	jae	movq_mmreg_mmreg
0000EFDF: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000EFE6: E8 98 1C 00 00                                        	call	convert_register
0000EFEB: 80 FC 08                                              	cmp	ah,8
0000EFEE: 0F 85 4A 19 FF FF                                     	jne	invalid_operand_size
0000EFF4: C6 05 A4 A2 01 00 6E                                  	mov	[extended_code],6Eh
0000EFFB: C6 05 9C A2 01 00 00                                  	mov	[opcode_prefix],0
0000F002: 88 C3                                                 	mov	bl,al
0000F004: 80 3D A9 A2 01 00 10                                  	cmp	[mmx_size],16
0000F00B: 75 07                                                 	jne	movq_mmreg_reg_store
0000F00D: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                      movq_mmreg_reg_store:
0000F014: E8 85 1E 00 00                                        	call	operand_64bit
0000F019: E9 D7 C6 FF FF                                        	jmp	nomem_instruction_ready
                                                                      movq_mmreg_mmreg:
0000F01E: E8 C2 1C 00 00                                        	call	convert_mmx_register
0000F023: 3A 25 A9 A2 01 00                                     	cmp	ah,[mmx_size]
0000F029: 0F 85 0F 19 FF FF                                     	jne	invalid_operand_size
0000F02F: 88 C3                                                 	mov	bl,al
0000F031: E9 BF C6 FF FF                                        	jmp	nomem_instruction_ready
                                                                movdq_instruction:
0000F036: A2 9C A2 01 00                                        	mov	[opcode_prefix],al
0000F03B: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F042: C6 05 A4 A2 01 00 6F                                  	mov	[extended_code],6Fh
0000F049: AC                                                    	lods	byte [esi]
0000F04A: E8 DB 1C 00 00                                        	call	get_size_operator
0000F04F: 3C 10                                                 	cmp	al,10h
0000F051: 74 3B                                                 	je	movdq_mmreg
0000F053: 3C 5B                                                 	cmp	al,'['
0000F055: 0F 85 D9 18 FF FF                                     	jne	invalid_operand
0000F05B: E8 26 1D 00 00                                        	call	get_address
0000F060: AC                                                    	lods	byte [esi]
0000F061: 3C 2C                                                 	cmp	al,','
0000F063: 0F 85 CB 18 FF FF                                     	jne	invalid_operand
0000F069: AC                                                    	lods	byte [esi]
0000F06A: E8 BB 1C 00 00                                        	call	get_size_operator
0000F06F: 3C 10                                                 	cmp	al,10h
0000F071: 0F 85 BD 18 FF FF                                     	jne	invalid_operand
0000F077: AC                                                    	lods	byte [esi]
0000F078: E8 9E 1C 00 00                                        	call	convert_xmm_register
0000F07D: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000F082: C6 05 A4 A2 01 00 7F                                  	mov	[extended_code],7Fh
0000F089: E9 8C C4 FF FF                                        	jmp	instruction_ready
                                                                      movdq_mmreg:
0000F08E: AC                                                    	lods	byte [esi]
0000F08F: E8 87 1C 00 00                                        	call	convert_xmm_register
0000F094: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000F099: AC                                                    	lods	byte [esi]
0000F09A: 3C 2C                                                 	cmp	al,','
0000F09C: 0F 85 92 18 FF FF                                     	jne	invalid_operand
0000F0A2: AC                                                    	lods	byte [esi]
0000F0A3: E8 82 1C 00 00                                        	call	get_size_operator
0000F0A8: 3C 10                                                 	cmp	al,10h
0000F0AA: 74 12                                                 	je	movdq_mmreg_mmreg
0000F0AC: 3C 5B                                                 	cmp	al,'['
0000F0AE: 0F 85 80 18 FF FF                                     	jne	invalid_operand
0000F0B4: E8 CD 1C 00 00                                        	call	get_address
0000F0B9: E9 5C C4 FF FF                                        	jmp	instruction_ready
                                                                      movdq_mmreg_mmreg:
0000F0BE: AC                                                    	lods	byte [esi]
0000F0BF: E8 57 1C 00 00                                        	call	convert_xmm_register
0000F0C4: 88 C3                                                 	mov	bl,al
0000F0C6: E9 2A C6 FF FF                                        	jmp	nomem_instruction_ready
                                                                lddqu_instruction:
0000F0CB: AC                                                    	lods	byte [esi]
0000F0CC: E8 59 1C 00 00                                        	call	get_size_operator
0000F0D1: 3C 10                                                 	cmp	al,10h
0000F0D3: 0F 85 5B 18 FF FF                                     	jne	invalid_operand
0000F0D9: AC                                                    	lods	byte [esi]
0000F0DA: E8 3C 1C 00 00                                        	call	convert_xmm_register
0000F0DF: 50                                                    	push	eax
0000F0E0: AC                                                    	lods	byte [esi]
0000F0E1: 3C 2C                                                 	cmp	al,','
0000F0E3: 0F 85 4B 18 FF FF                                     	jne	invalid_operand
0000F0E9: AC                                                    	lods	byte [esi]
0000F0EA: E8 3B 1C 00 00                                        	call	get_size_operator
0000F0EF: 3C 5B                                                 	cmp	al,'['
0000F0F1: 0F 85 3D 18 FF FF                                     	jne	invalid_operand
0000F0F7: E8 8A 1C 00 00                                        	call	get_address
0000F0FC: 58                                                    	pop	eax
0000F0FD: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000F102: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
0000F109: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F110: C6 05 A4 A2 01 00 F0                                  	mov	[extended_code],0F0h
0000F117: E9 FE C3 FF FF                                        	jmp	instruction_ready
                                                                
                                                                movdq2q_instruction:
0000F11C: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
0000F123: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
0000F12A: EB 0E                                                 	jmp	movq2dq_
                                                                movq2dq_instruction:
0000F12C: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0000F133: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
                                                                      movq2dq_:
0000F13A: AC                                                    	lods	byte [esi]
0000F13B: E8 EA 1B 00 00                                        	call	get_size_operator
0000F140: 3C 10                                                 	cmp	al,10h
0000F142: 0F 85 EC 17 FF FF                                     	jne	invalid_operand
0000F148: AC                                                    	lods	byte [esi]
0000F149: E8 97 1B 00 00                                        	call	convert_mmx_register
0000F14E: 3A 25 A9 A2 01 00                                     	cmp	ah,[mmx_size]
0000F154: 0F 85 E4 17 FF FF                                     	jne	invalid_operand_size
0000F15A: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000F15F: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000F166: AC                                                    	lods	byte [esi]
0000F167: 3C 2C                                                 	cmp	al,','
0000F169: 0F 85 C5 17 FF FF                                     	jne	invalid_operand
0000F16F: AC                                                    	lods	byte [esi]
0000F170: E8 B5 1B 00 00                                        	call	get_size_operator
0000F175: 3C 10                                                 	cmp	al,10h
0000F177: 0F 85 B7 17 FF FF                                     	jne	invalid_operand
0000F17D: AC                                                    	lods	byte [esi]
0000F17E: E8 62 1B 00 00                                        	call	convert_mmx_register
0000F183: 80 35 A9 A2 01 00 18                                  	xor	[mmx_size],8+16
0000F18A: 3A 25 A9 A2 01 00                                     	cmp	ah,[mmx_size]
0000F190: 0F 85 A8 17 FF FF                                     	jne	invalid_operand_size
0000F196: 88 C3                                                 	mov	bl,al
0000F198: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F19F: C6 05 A4 A2 01 00 D6                                  	mov	[extended_code],0D6h
0000F1A6: E9 4A C5 FF FF                                        	jmp	nomem_instruction_ready
                                                                
                                                                sse_ps_instruction_imm8:
0000F1AB: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
                                                                sse_ps_instruction:
0000F1B2: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
0000F1B9: E9 DF 00 00 00                                        	jmp	sse_instruction
                                                                sse_pd_instruction_imm8:
0000F1BE: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
                                                                sse_pd_instruction:
0000F1C5: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
0000F1CC: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
0000F1D3: E9 C5 00 00 00                                        	jmp	sse_instruction
                                                                sse_ss_instruction:
0000F1D8: C6 05 A9 A2 01 00 04                                  	mov	[mmx_size],4
0000F1DF: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0000F1E6: E9 B2 00 00 00                                        	jmp	sse_instruction
                                                                sse_sd_instruction:
0000F1EB: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
0000F1F2: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
0000F1F9: E9 9F 00 00 00                                        	jmp	sse_instruction
                                                                cmp_pd_instruction:
0000F1FE: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                cmp_ps_instruction:
0000F205: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
0000F20C: A2 F4 A1 01 00                                        	mov	byte [value],al
0000F211: B0 C2                                                 	mov	al,0C2h
0000F213: E9 85 00 00 00                                        	jmp	sse_instruction
                                                                cmp_ss_instruction:
0000F218: C6 05 A9 A2 01 00 04                                  	mov	[mmx_size],4
0000F21F: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0000F226: EB 25                                                 	jmp	cmp_sx_instruction
                                                                cmpsd_instruction:
0000F228: B0 A7                                                 	mov	al,0A7h
0000F22A: 8A 26                                                 	mov	ah,[esi]
0000F22C: 08 E4                                                 	or	ah,ah
0000F22E: 0F 84 83 C1 FF FF                                     	jz	simple_instruction_32bit
0000F234: 80 FC 0F                                              	cmp	ah,0Fh
0000F237: 0F 84 7A C1 FF FF                                     	je	simple_instruction_32bit
0000F23D: B0 FF                                                 	mov	al,-1
                                                                cmp_sd_instruction:
0000F23F: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
0000F246: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
                                                                      cmp_sx_instruction:
0000F24D: A2 F4 A1 01 00                                        	mov	byte [value],al
0000F252: B0 C2                                                 	mov	al,0C2h
0000F254: EB 47                                                 	jmp	sse_instruction
                                                                comiss_instruction:
0000F256: C6 05 A9 A2 01 00 04                                  	mov	[mmx_size],4
0000F25D: EB 3E                                                 	jmp	sse_instruction
                                                                comisd_instruction:
0000F25F: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
0000F266: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
0000F26D: EB 2E                                                 	jmp	sse_instruction
                                                                cvtdq2pd_instruction:
0000F26F: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
                                                                cvtps2pd_instruction:
0000F276: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
0000F27D: EB 1E                                                 	jmp	sse_instruction
                                                                cvtpd2dq_instruction:
0000F27F: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
0000F286: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
0000F28D: EB 0E                                                 	jmp	sse_instruction
                                                                movshdup_instruction:
0000F28F: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
0000F296: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
                                                                sse_instruction:
0000F29D: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F2A4: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000F2A9: AC                                                    	lods	byte [esi]
0000F2AA: E8 7B 1A 00 00                                        	call	get_size_operator
0000F2AF: 3C 10                                                 	cmp	al,10h
0000F2B1: 0F 85 7D 16 FF FF                                     	jne	invalid_operand
                                                                      sse_xmmreg:
0000F2B7: AC                                                    	lods	byte [esi]
0000F2B8: E8 5E 1A 00 00                                        	call	convert_xmm_register
                                                                      sse_reg:
0000F2BD: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000F2C2: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000F2C9: AC                                                    	lods	byte [esi]
0000F2CA: 3C 2C                                                 	cmp	al,','
0000F2CC: 0F 85 62 16 FF FF                                     	jne	invalid_operand
0000F2D2: AC                                                    	lods	byte [esi]
0000F2D3: E8 52 1A 00 00                                        	call	get_size_operator
0000F2D8: 3C 10                                                 	cmp	al,10h
0000F2DA: 74 7A                                                 	je	sse_xmmreg_xmmreg
                                                                      sse_reg_mem:
0000F2DC: 3C 5B                                                 	cmp	al,'['
0000F2DE: 0F 85 50 16 FF FF                                     	jne	invalid_operand
0000F2E4: E8 9D 1A 00 00                                        	call	get_address
0000F2E9: 80 3D 98 A2 01 00 00                                  	cmp	[operand_size],0
0000F2F0: 74 11                                                 	je	sse_mem_size_ok
0000F2F2: A0 A9 A2 01 00                                        	mov	al,[mmx_size]
0000F2F7: 38 05 98 A2 01 00                                     	cmp	[operand_size],al
0000F2FD: 0F 85 3B 16 FF FF                                     	jne	invalid_operand_size
                                                                      sse_mem_size_ok:
0000F303: A0 A4 A2 01 00                                        	mov	al,[extended_code]
0000F308: 8A 25 A5 A2 01 00                                     	mov	ah,[supplemental_code]
0000F30E: 3C C2                                                 	cmp	al,0C2h
0000F310: 74 2D                                                 	je	sse_cmp_mem_ok
0000F312: 66 3D 3A 44                                           	cmp	ax,443Ah
0000F316: 74 27                                                 	je	sse_cmp_mem_ok
0000F318: 80 3D 9F A2 01 00 01                                  	cmp	[immediate_size],1
0000F31F: 0F 84 60 F9 FF FF                                     	je	mmx_imm8
0000F325: 80 3D 9F A2 01 00 FF                                  	cmp	[immediate_size],-1
0000F32C: 75 0C                                                 	jne	sse_ok
0000F32E: E8 A7 00 00 00                                        	call	take_additional_xmm0
0000F333: C6 05 9F A2 01 00 00                                  	mov	[immediate_size],0
                                                                      sse_ok:
0000F33A: E9 DB C1 FF FF                                        	jmp	instruction_ready
                                                                      sse_cmp_mem_ok:
0000F33F: 80 3D F4 A1 01 00 FF                                  	cmp	byte [value],-1
0000F346: 0F 84 39 F9 FF FF                                     	je	mmx_imm8
0000F34C: E8 18 22 00 00                                        	call	store_instruction_with_imm8
0000F351: E9 1A 5C FF FF                                        	jmp	instruction_assembled
                                                                      sse_xmmreg_xmmreg:
0000F356: 80 3D 9A A2 01 00 66                                  	cmp	[operand_prefix],66h
0000F35D: 75 1A                                                 	jne	sse_xmmreg_xmmreg_ok
0000F35F: 80 3D A4 A2 01 00 12                                  	cmp	[extended_code],12h
0000F366: 0F 84 C8 15 FF FF                                     	je	invalid_operand
0000F36C: 80 3D A4 A2 01 00 16                                  	cmp	[extended_code],16h
0000F373: 0F 84 BB 15 FF FF                                     	je	invalid_operand
                                                                      sse_xmmreg_xmmreg_ok:
0000F379: AC                                                    	lods	byte [esi]
0000F37A: E8 9C 19 00 00                                        	call	convert_xmm_register
0000F37F: 88 C3                                                 	mov	bl,al
0000F381: A0 A4 A2 01 00                                        	mov	al,[extended_code]
0000F386: 8A 25 A5 A2 01 00                                     	mov	ah,[supplemental_code]
0000F38C: 3C C2                                                 	cmp	al,0C2h
0000F38E: 74 2D                                                 	je	sse_cmp_nomem_ok
0000F390: 66 3D 3A 44                                           	cmp	ax,443Ah
0000F394: 74 27                                                 	je	sse_cmp_nomem_ok
0000F396: 80 3D 9F A2 01 00 01                                  	cmp	[immediate_size],1
0000F39D: 0F 84 2A F9 FF FF                                     	je	mmx_nomem_imm8
0000F3A3: 80 3D 9F A2 01 00 FF                                  	cmp	[immediate_size],-1
0000F3AA: 75 0C                                                 	jne	sse_nomem_ok
0000F3AC: E8 29 00 00 00                                        	call	take_additional_xmm0
0000F3B1: C6 05 9F A2 01 00 00                                  	mov	[immediate_size],0
                                                                      sse_nomem_ok:
0000F3B8: E9 38 C3 FF FF                                        	jmp	nomem_instruction_ready
                                                                      sse_cmp_nomem_ok:
0000F3BD: 80 3D F4 A1 01 00 FF                                  	cmp	byte [value],-1
0000F3C4: 0F 84 03 F9 FF FF                                     	je	mmx_nomem_imm8
0000F3CA: E8 B7 1B 00 00                                        	call	store_nomem_instruction
0000F3CF: A0 F4 A1 01 00                                        	mov	al,byte [value]
0000F3D4: AA                                                    	stosb
0000F3D5: E9 96 5B FF FF                                        	jmp	instruction_assembled
                                                                      take_additional_xmm0:
0000F3DA: 80 3E 2C                                              	cmp	byte [esi],','
0000F3DD: 75 18                                                 	jne	additional_xmm0_ok
0000F3DF: 46                                                    	inc	esi
0000F3E0: AC                                                    	lods	byte [esi]
0000F3E1: 3C 10                                                 	cmp	al,10h
0000F3E3: 0F 85 4B 15 FF FF                                     	jne	invalid_operand
0000F3E9: AC                                                    	lods	byte [esi]
0000F3EA: E8 2C 19 00 00                                        	call	convert_xmm_register
0000F3EF: 84 C0                                                 	test	al,al
0000F3F1: 0F 85 3D 15 FF FF                                     	jnz	invalid_operand
                                                                      additional_xmm0_ok:
0000F3F7: C3                                                    	ret
                                                                
                                                                pslldq_instruction:
0000F3F8: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000F3FD: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
0000F404: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F40B: C6 05 A4 A2 01 00 73                                  	mov	[extended_code],73h
0000F412: AC                                                    	lods	byte [esi]
0000F413: E8 12 19 00 00                                        	call	get_size_operator
0000F418: 3C 10                                                 	cmp	al,10h
0000F41A: 0F 85 14 15 FF FF                                     	jne	invalid_operand
0000F420: AC                                                    	lods	byte [esi]
0000F421: E8 F5 18 00 00                                        	call	convert_xmm_register
0000F426: 88 C3                                                 	mov	bl,al
0000F428: E9 A0 F8 FF FF                                        	jmp	mmx_nomem_imm8
                                                                movpd_instruction:
0000F42D: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                movps_instruction:
0000F434: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F43B: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000F440: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
0000F447: EB 43                                                 	jmp	sse_mov_instruction
                                                                movss_instruction:
0000F449: C6 05 A9 A2 01 00 04                                  	mov	[mmx_size],4
0000F450: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0000F457: EB 23                                                 	jmp	sse_movs
                                                                movsd_instruction:
0000F459: B0 A5                                                 	mov	al,0A5h
0000F45B: 8A 26                                                 	mov	ah,[esi]
0000F45D: 08 E4                                                 	or	ah,ah
0000F45F: 0F 84 52 BF FF FF                                     	jz	simple_instruction_32bit
0000F465: 80 FC 0F                                              	cmp	ah,0Fh
0000F468: 0F 84 49 BF FF FF                                     	je	simple_instruction_32bit
0000F46E: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
0000F475: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
                                                                      sse_movs:
0000F47C: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F483: C6 05 A4 A2 01 00 10                                  	mov	[extended_code],10h
0000F48A: EB 00                                                 	jmp	sse_mov_instruction
                                                                sse_mov_instruction:
0000F48C: AC                                                    	lods	byte [esi]
0000F48D: E8 98 18 00 00                                        	call	get_size_operator
0000F492: 3C 10                                                 	cmp	al,10h
0000F494: 0F 84 1D FE FF FF                                     	je	sse_xmmreg
                                                                      sse_mem:
0000F49A: 3C 5B                                                 	cmp	al,'['
0000F49C: 0F 85 92 14 FF FF                                     	jne	invalid_operand
0000F4A2: FE 05 A4 A2 01 00                                     	inc	[extended_code]
0000F4A8: E8 D9 18 00 00                                        	call	get_address
0000F4AD: 80 3D 98 A2 01 00 00                                  	cmp	[operand_size],0
0000F4B4: 74 18                                                 	je	sse_mem_xmmreg
0000F4B6: A0 A9 A2 01 00                                        	mov	al,[mmx_size]
0000F4BB: 38 05 98 A2 01 00                                     	cmp	[operand_size],al
0000F4C1: 0F 85 77 14 FF FF                                     	jne	invalid_operand_size
0000F4C7: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
                                                                      sse_mem_xmmreg:
0000F4CE: AC                                                    	lods	byte [esi]
0000F4CF: 3C 2C                                                 	cmp	al,','
0000F4D1: 0F 85 5D 14 FF FF                                     	jne	invalid_operand
0000F4D7: AC                                                    	lods	byte [esi]
0000F4D8: E8 4D 18 00 00                                        	call	get_size_operator
0000F4DD: 3C 10                                                 	cmp	al,10h
0000F4DF: 0F 85 4F 14 FF FF                                     	jne	invalid_operand
0000F4E5: AC                                                    	lods	byte [esi]
0000F4E6: E8 30 18 00 00                                        	call	convert_xmm_register
0000F4EB: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000F4F0: E9 25 C0 FF FF                                        	jmp	instruction_ready
                                                                movlpd_instruction:
0000F4F5: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                movlps_instruction:
0000F4FC: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F503: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000F508: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
0000F50F: AC                                                    	lods	byte [esi]
0000F510: E8 15 18 00 00                                        	call	get_size_operator
0000F515: 3C 10                                                 	cmp	al,10h
0000F517: 75 81                                                 	jne	sse_mem
0000F519: AC                                                    	lods	byte [esi]
0000F51A: E8 FC 17 00 00                                        	call	convert_xmm_register
0000F51F: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000F524: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000F52B: AC                                                    	lods	byte [esi]
0000F52C: 3C 2C                                                 	cmp	al,','
0000F52E: 0F 85 00 14 FF FF                                     	jne	invalid_operand
0000F534: AC                                                    	lods	byte [esi]
0000F535: E8 F0 17 00 00                                        	call	get_size_operator
0000F53A: E9 9D FD FF FF                                        	jmp	sse_reg_mem
                                                                movhlps_instruction:
0000F53F: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F546: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000F54B: C6 05 A9 A2 01 00 00                                  	mov	[mmx_size],0
0000F552: AC                                                    	lods	byte [esi]
0000F553: E8 D2 17 00 00                                        	call	get_size_operator
0000F558: 3C 10                                                 	cmp	al,10h
0000F55A: 0F 85 D4 13 FF FF                                     	jne	invalid_operand
0000F560: AC                                                    	lods	byte [esi]
0000F561: E8 B5 17 00 00                                        	call	convert_xmm_register
0000F566: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000F56B: AC                                                    	lods	byte [esi]
0000F56C: 3C 2C                                                 	cmp	al,','
0000F56E: 0F 85 C0 13 FF FF                                     	jne	invalid_operand
0000F574: AC                                                    	lods	byte [esi]
0000F575: E8 B0 17 00 00                                        	call	get_size_operator
0000F57A: 3C 10                                                 	cmp	al,10h
0000F57C: 0F 84 F7 FD FF FF                                     	je	sse_xmmreg_xmmreg_ok
0000F582: E9 AD 13 FF FF                                        	jmp	invalid_operand
                                                                maskmovq_instruction:
0000F587: B1 08                                                 	mov	cl,8
0000F589: EB 09                                                 	jmp	maskmov_instruction
                                                                maskmovdqu_instruction:
0000F58B: B1 10                                                 	mov	cl,16
0000F58D: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                      maskmov_instruction:
0000F594: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F59B: C6 05 A4 A2 01 00 F7                                  	mov	[extended_code],0F7h
0000F5A2: AC                                                    	lods	byte [esi]
0000F5A3: E8 82 17 00 00                                        	call	get_size_operator
0000F5A8: 3C 10                                                 	cmp	al,10h
0000F5AA: 0F 85 84 13 FF FF                                     	jne	invalid_operand
0000F5B0: AC                                                    	lods	byte [esi]
0000F5B1: E8 2F 17 00 00                                        	call	convert_mmx_register
0000F5B6: 38 CC                                                 	cmp	ah,cl
0000F5B8: 0F 85 80 13 FF FF                                     	jne	invalid_operand_size
0000F5BE: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000F5C3: AC                                                    	lods	byte [esi]
0000F5C4: 3C 2C                                                 	cmp	al,','
0000F5C6: 0F 85 68 13 FF FF                                     	jne	invalid_operand
0000F5CC: AC                                                    	lods	byte [esi]
0000F5CD: E8 58 17 00 00                                        	call	get_size_operator
0000F5D2: 3C 10                                                 	cmp	al,10h
0000F5D4: 0F 85 5A 13 FF FF                                     	jne	invalid_operand
0000F5DA: AC                                                    	lods	byte [esi]
0000F5DB: E8 05 17 00 00                                        	call	convert_mmx_register
0000F5E0: 88 C3                                                 	mov	bl,al
0000F5E2: E9 0E C1 FF FF                                        	jmp	nomem_instruction_ready
                                                                movmskpd_instruction:
0000F5E7: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                movmskps_instruction:
0000F5EE: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F5F5: C6 05 A4 A2 01 00 50                                  	mov	[extended_code],50h
0000F5FC: E8 73 16 00 00                                        	call	take_register
0000F601: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000F606: 80 FC 04                                              	cmp	ah,4
0000F609: 74 16                                                 	je	movmskps_reg_ok
0000F60B: 80 FC 08                                              	cmp	ah,8
0000F60E: 0F 85 2A 13 FF FF                                     	jne	invalid_operand_size
0000F614: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000F61B: 0F 85 13 13 FF FF                                     	jne	invalid_operand
                                                                      movmskps_reg_ok:
0000F621: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000F628: AC                                                    	lods	byte [esi]
0000F629: 3C 2C                                                 	cmp	al,','
0000F62B: 0F 85 03 13 FF FF                                     	jne	invalid_operand
0000F631: AC                                                    	lods	byte [esi]
0000F632: E8 F3 16 00 00                                        	call	get_size_operator
0000F637: 3C 10                                                 	cmp	al,10h
0000F639: 0F 84 3A FD FF FF                                     	je	sse_xmmreg_xmmreg_ok
0000F63F: E9 F0 12 FF FF                                        	jmp	invalid_operand
                                                                
                                                                cvtpi2pd_instruction:
0000F644: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                cvtpi2ps_instruction:
0000F64B: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F652: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000F657: AC                                                    	lods	byte [esi]
0000F658: E8 CD 16 00 00                                        	call	get_size_operator
0000F65D: 3C 10                                                 	cmp	al,10h
0000F65F: 0F 85 CF 12 FF FF                                     	jne	invalid_operand
0000F665: AC                                                    	lods	byte [esi]
0000F666: E8 B0 16 00 00                                        	call	convert_xmm_register
0000F66B: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000F670: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000F677: AC                                                    	lods	byte [esi]
0000F678: 3C 2C                                                 	cmp	al,','
0000F67A: 0F 85 B4 12 FF FF                                     	jne	invalid_operand
0000F680: AC                                                    	lods	byte [esi]
0000F681: E8 A4 16 00 00                                        	call	get_size_operator
0000F686: 3C 10                                                 	cmp	al,10h
0000F688: 74 28                                                 	je	cvtpi_xmmreg_xmmreg
0000F68A: 3C 5B                                                 	cmp	al,'['
0000F68C: 0F 85 A2 12 FF FF                                     	jne	invalid_operand
0000F692: E8 EF 16 00 00                                        	call	get_address
0000F697: 80 3D 98 A2 01 00 00                                  	cmp	[operand_size],0
0000F69E: 74 0D                                                 	je	cvtpi_size_ok
0000F6A0: 80 3D 98 A2 01 00 08                                  	cmp	[operand_size],8
0000F6A7: 0F 85 91 12 FF FF                                     	jne	invalid_operand_size
                                                                      cvtpi_size_ok:
0000F6AD: E9 68 BE FF FF                                        	jmp	instruction_ready
                                                                      cvtpi_xmmreg_xmmreg:
0000F6B2: AC                                                    	lods	byte [esi]
0000F6B3: E8 2D 16 00 00                                        	call	convert_mmx_register
0000F6B8: 80 FC 08                                              	cmp	ah,8
0000F6BB: 0F 85 7D 12 FF FF                                     	jne	invalid_operand_size
0000F6C1: 88 C3                                                 	mov	bl,al
0000F6C3: E9 2D C0 FF FF                                        	jmp	nomem_instruction_ready
                                                                cvtsi2ss_instruction:
0000F6C8: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0000F6CF: EB 07                                                 	jmp	cvtsi_instruction
                                                                cvtsi2sd_instruction:
0000F6D1: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
                                                                      cvtsi_instruction:
0000F6D8: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F6DF: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000F6E4: AC                                                    	lods	byte [esi]
0000F6E5: E8 40 16 00 00                                        	call	get_size_operator
0000F6EA: 3C 10                                                 	cmp	al,10h
0000F6EC: 0F 85 42 12 FF FF                                     	jne	invalid_operand
0000F6F2: AC                                                    	lods	byte [esi]
0000F6F3: E8 23 16 00 00                                        	call	convert_xmm_register
0000F6F8: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
                                                                      cvtsi_xmmreg:
0000F6FD: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000F704: AC                                                    	lods	byte [esi]
0000F705: 3C 2C                                                 	cmp	al,','
0000F707: 0F 85 27 12 FF FF                                     	jne	invalid_operand
0000F70D: AC                                                    	lods	byte [esi]
0000F70E: E8 17 16 00 00                                        	call	get_size_operator
0000F713: 3C 10                                                 	cmp	al,10h
0000F715: 74 36                                                 	je	cvtsi_xmmreg_reg
0000F717: 3C 5B                                                 	cmp	al,'['
0000F719: 0F 85 15 12 FF FF                                     	jne	invalid_operand
0000F71F: E8 62 16 00 00                                        	call	get_address
0000F724: 80 3D 98 A2 01 00 00                                  	cmp	[operand_size],0
0000F72B: 74 1B                                                 	je	cvtsi_size_ok
0000F72D: 80 3D 98 A2 01 00 04                                  	cmp	[operand_size],4
0000F734: 74 12                                                 	je	cvtsi_size_ok
0000F736: 80 3D 98 A2 01 00 08                                  	cmp	[operand_size],8
0000F73D: 0F 85 FB 11 FF FF                                     	jne	invalid_operand_size
0000F743: E8 56 17 00 00                                        	call	operand_64bit
                                                                      cvtsi_size_ok:
0000F748: E9 CD BD FF FF                                        	jmp	instruction_ready
                                                                      cvtsi_xmmreg_reg:
0000F74D: AC                                                    	lods	byte [esi]
0000F74E: E8 30 15 00 00                                        	call	convert_register
0000F753: 80 FC 04                                              	cmp	ah,4
0000F756: 74 0E                                                 	je	cvtsi_xmmreg_reg_store
0000F758: 80 FC 08                                              	cmp	ah,8
0000F75B: 0F 85 DD 11 FF FF                                     	jne	invalid_operand_size
0000F761: E8 38 17 00 00                                        	call	operand_64bit
                                                                      cvtsi_xmmreg_reg_store:
0000F766: 88 C3                                                 	mov	bl,al
0000F768: E9 88 BF FF FF                                        	jmp	nomem_instruction_ready
                                                                cvtps2pi_instruction:
0000F76D: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
0000F774: EB 0E                                                 	jmp	cvtpd_instruction
                                                                cvtpd2pi_instruction:
0000F776: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
0000F77D: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
                                                                      cvtpd_instruction:
0000F784: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F78B: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000F790: AC                                                    	lods	byte [esi]
0000F791: E8 94 15 00 00                                        	call	get_size_operator
0000F796: 3C 10                                                 	cmp	al,10h
0000F798: 0F 85 96 11 FF FF                                     	jne	invalid_operand
0000F79E: AC                                                    	lods	byte [esi]
0000F79F: E8 41 15 00 00                                        	call	convert_mmx_register
0000F7A4: 80 FC 08                                              	cmp	ah,8
0000F7A7: 0F 85 91 11 FF FF                                     	jne	invalid_operand_size
0000F7AD: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000F7B4: E9 04 FB FF FF                                        	jmp	sse_reg
                                                                cvtss2si_instruction:
0000F7B9: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0000F7C0: C6 05 A9 A2 01 00 04                                  	mov	[mmx_size],4
0000F7C7: EB 0E                                                 	jmp	cvt2si_instruction
                                                                cvtsd2si_instruction:
0000F7C9: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
0000F7D0: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
                                                                      cvt2si_instruction:
0000F7D7: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000F7DC: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F7E3: E8 8C 14 00 00                                        	call	take_register
0000F7E8: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000F7EF: 80 FC 04                                              	cmp	ah,4
0000F7F2: 0F 84 C5 FA FF FF                                     	je	sse_reg
0000F7F8: 80 FC 08                                              	cmp	ah,8
0000F7FB: 0F 85 3D 11 FF FF                                     	jne	invalid_operand_size
0000F801: E8 98 16 00 00                                        	call	operand_64bit
0000F806: E9 B2 FA FF FF                                        	jmp	sse_reg
                                                                
                                                                ssse3_instruction:
0000F80B: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F812: C6 05 A4 A2 01 00 38                                  	mov	[extended_code],38h
0000F819: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
0000F81E: E9 11 F3 FF FF                                        	jmp	mmx_instruction
                                                                palignr_instruction:
0000F823: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F82A: C6 05 A4 A2 01 00 3A                                  	mov	[extended_code],3Ah
0000F831: C6 05 A5 A2 01 00 0F                                  	mov	[supplemental_code],0Fh
0000F838: AC                                                    	lods	byte [esi]
0000F839: E8 EC 14 00 00                                        	call	get_size_operator
0000F83E: 3C 10                                                 	cmp	al,10h
0000F840: 0F 85 EE 10 FF FF                                     	jne	invalid_operand
0000F846: AC                                                    	lods	byte [esi]
0000F847: E8 99 14 00 00                                        	call	convert_mmx_register
0000F84C: E8 A7 F6 FF FF                                        	call	make_mmx_prefix
0000F851: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000F856: AC                                                    	lods	byte [esi]
0000F857: 3C 2C                                                 	cmp	al,','
0000F859: 0F 85 D5 10 FF FF                                     	jne	invalid_operand
0000F85F: AC                                                    	lods	byte [esi]
0000F860: E8 C5 14 00 00                                        	call	get_size_operator
0000F865: 3C 10                                                 	cmp	al,10h
0000F867: 74 12                                                 	je	palignr_mmreg_mmreg
0000F869: 3C 5B                                                 	cmp	al,'['
0000F86B: 0F 85 C3 10 FF FF                                     	jne	invalid_operand
0000F871: E8 10 15 00 00                                        	call	get_address
0000F876: E9 0A F4 FF FF                                        	jmp	mmx_imm8
                                                                      palignr_mmreg_mmreg:
0000F87B: AC                                                    	lods	byte [esi]
0000F87C: E8 64 14 00 00                                        	call	convert_mmx_register
0000F881: 88 C3                                                 	mov	bl,al
0000F883: E9 45 F4 FF FF                                        	jmp	mmx_nomem_imm8
                                                                amd3dnow_instruction:
0000F888: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000F88F: C6 05 A4 A2 01 00 0F                                  	mov	[extended_code],0Fh
0000F896: A2 F4 A1 01 00                                        	mov	byte [value],al
0000F89B: AC                                                    	lods	byte [esi]
0000F89C: E8 89 14 00 00                                        	call	get_size_operator
0000F8A1: 3C 10                                                 	cmp	al,10h
0000F8A3: 0F 85 8B 10 FF FF                                     	jne	invalid_operand
0000F8A9: AC                                                    	lods	byte [esi]
0000F8AA: E8 36 14 00 00                                        	call	convert_mmx_register
0000F8AF: 80 FC 08                                              	cmp	ah,8
0000F8B2: 0F 85 86 10 FF FF                                     	jne	invalid_operand_size
0000F8B8: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000F8BD: AC                                                    	lods	byte [esi]
0000F8BE: 3C 2C                                                 	cmp	al,','
0000F8C0: 0F 85 6E 10 FF FF                                     	jne	invalid_operand
0000F8C6: AC                                                    	lods	byte [esi]
0000F8C7: E8 5E 14 00 00                                        	call	get_size_operator
0000F8CC: 3C 10                                                 	cmp	al,10h
0000F8CE: 74 17                                                 	je	amd3dnow_mmreg_mmreg
0000F8D0: 3C 5B                                                 	cmp	al,'['
0000F8D2: 0F 85 5C 10 FF FF                                     	jne	invalid_operand
0000F8D8: E8 A9 14 00 00                                        	call	get_address
0000F8DD: E8 87 1C 00 00                                        	call	store_instruction_with_imm8
0000F8E2: E9 89 56 FF FF                                        	jmp	instruction_assembled
                                                                      amd3dnow_mmreg_mmreg:
0000F8E7: AC                                                    	lods	byte [esi]
0000F8E8: E8 F8 13 00 00                                        	call	convert_mmx_register
0000F8ED: 80 FC 08                                              	cmp	ah,8
0000F8F0: 0F 85 48 10 FF FF                                     	jne	invalid_operand_size
0000F8F6: 88 C3                                                 	mov	bl,al
0000F8F8: E8 89 16 00 00                                        	call	store_nomem_instruction
0000F8FD: A0 F4 A1 01 00                                        	mov	al,byte [value]
0000F902: AA                                                    	stos	byte [edi]
0000F903: E9 68 56 FF FF                                        	jmp	instruction_assembled
                                                                
                                                                sse4_instruction_38_xmm0:
0000F908: C6 05 9F A2 01 00 FF                                  	mov	[immediate_size],-1
0000F90F: EB 0E                                                 	jmp	sse4_instruction_38
                                                                sse4_instruction_66_38_xmm0:
0000F911: C6 05 9F A2 01 00 FF                                  	mov	[immediate_size],-1
                                                                sse4_instruction_66_38:
0000F918: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                sse4_instruction_38:
0000F91F: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
0000F926: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
0000F92B: B0 38                                                 	mov	al,38h
0000F92D: E9 6B F9 FF FF                                        	jmp	sse_instruction
                                                                sse4_ss_instruction_66_3a_imm8:
0000F932: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
0000F939: B1 04                                                 	mov	cl,4
0000F93B: EB 14                                                 	jmp	sse4_instruction_66_3a_setup
                                                                sse4_sd_instruction_66_3a_imm8:
0000F93D: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
0000F944: B1 08                                                 	mov	cl,8
0000F946: EB 09                                                 	jmp	sse4_instruction_66_3a_setup
                                                                sse4_instruction_66_3a_imm8:
0000F948: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
0000F94F: B1 10                                                 	mov	cl,16
                                                                      sse4_instruction_66_3a_setup:
0000F951: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                      sse4_instruction_3a_setup:
0000F958: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
0000F95D: B0 3A                                                 	mov	al,3Ah
0000F95F: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
0000F965: E9 33 F9 FF FF                                        	jmp	sse_instruction
                                                                sse4_instruction_3a_imm8:
0000F96A: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
0000F971: B1 10                                                 	mov	cl,16
0000F973: EB E3                                                 	jmp	sse4_instruction_3a_setup
                                                                pclmulqdq_instruction:
0000F975: A2 F4 A1 01 00                                        	mov	byte [value],al
0000F97A: B0 44                                                 	mov	al,44h
0000F97C: B1 10                                                 	mov	cl,16
0000F97E: EB D1                                                 	jmp	sse4_instruction_66_3a_setup
                                                                extractps_instruction:
0000F980: E8 B6 00 00 00                                        	call	setup_66_0f_3a
0000F985: AC                                                    	lods	byte [esi]
0000F986: E8 9F 13 00 00                                        	call	get_size_operator
0000F98B: 3C 10                                                 	cmp	al,10h
0000F98D: 74 57                                                 	je	extractps_reg
0000F98F: 3C 5B                                                 	cmp	al,'['
0000F991: 0F 85 9D 0F FF FF                                     	jne	invalid_operand
0000F997: E8 EA 13 00 00                                        	call	get_address
0000F99C: 80 3D 98 A2 01 00 04                                  	cmp	[operand_size],4
0000F9A3: 74 0D                                                 	je	extractps_size_ok
0000F9A5: 80 3D 98 A2 01 00 00                                  	cmp	[operand_size],0
0000F9AC: 0F 85 8C 0F FF FF                                     	jne	invalid_operand_size
                                                                      extractps_size_ok:
0000F9B2: 52 53 51                                              	push	edx ebx ecx
0000F9B5: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000F9BC: AC                                                    	lods	byte [esi]
0000F9BD: 3C 2C                                                 	cmp	al,','
0000F9BF: 0F 85 6F 0F FF FF                                     	jne	invalid_operand
0000F9C5: AC                                                    	lods	byte [esi]
0000F9C6: E8 5F 13 00 00                                        	call	get_size_operator
0000F9CB: 3C 10                                                 	cmp	al,10h
0000F9CD: 0F 85 61 0F FF FF                                     	jne	invalid_operand
0000F9D3: AC                                                    	lods	byte [esi]
0000F9D4: E8 42 13 00 00                                        	call	convert_xmm_register
0000F9D9: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000F9DE: 59 5B 5A                                              	pop	ecx ebx edx
0000F9E1: E9 9F F2 FF FF                                        	jmp	mmx_imm8
                                                                      extractps_reg:
0000F9E6: AC                                                    	lods	byte [esi]
0000F9E7: E8 97 12 00 00                                        	call	convert_register
0000F9EC: 50                                                    	push	eax
0000F9ED: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000F9F4: AC                                                    	lods	byte [esi]
0000F9F5: 3C 2C                                                 	cmp	al,','
0000F9F7: 0F 85 37 0F FF FF                                     	jne	invalid_operand
0000F9FD: AC                                                    	lods	byte [esi]
0000F9FE: E8 27 13 00 00                                        	call	get_size_operator
0000FA03: 3C 10                                                 	cmp	al,10h
0000FA05: 0F 85 29 0F FF FF                                     	jne	invalid_operand
0000FA0B: AC                                                    	lods	byte [esi]
0000FA0C: E8 0A 13 00 00                                        	call	convert_xmm_register
0000FA11: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000FA16: 5B                                                    	pop	ebx
0000FA17: 88 F8                                                 	mov	al,bh
0000FA19: 3C 04                                                 	cmp	al,4
0000FA1B: 0F 84 AC F2 FF FF                                     	je	mmx_nomem_imm8
0000FA21: 3C 08                                                 	cmp	al,8
0000FA23: 0F 85 15 0F FF FF                                     	jne	invalid_operand_size
0000FA29: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000FA30: 0F 85 F4 0E FF FF                                     	jne	illegal_instruction
0000FA36: E9 92 F2 FF FF                                        	jmp	mmx_nomem_imm8
                                                                      setup_66_0f_3a:
0000FA3B: C6 05 A4 A2 01 00 3A                                  	mov	[extended_code],3Ah
0000FA42: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
0000FA47: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000FA4E: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
0000FA55: C3                                                    	ret
                                                                insertps_instruction:
0000FA56: E8 E0 FF FF FF                                        	call	setup_66_0f_3a
0000FA5B: AC                                                    	lods	byte [esi]
0000FA5C: E8 C9 12 00 00                                        	call	get_size_operator
0000FA61: 3C 10                                                 	cmp	al,10h
0000FA63: 0F 85 CB 0E FF FF                                     	jne	invalid_operand
0000FA69: AC                                                    	lods	byte [esi]
0000FA6A: E8 AC 12 00 00                                        	call	convert_xmm_register
0000FA6F: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000FA74: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000FA7B: AC                                                    	lods	byte [esi]
0000FA7C: 3C 2C                                                 	cmp	al,','
0000FA7E: 0F 85 B0 0E FF FF                                     	jne	invalid_operand
0000FA84: AC                                                    	lods	byte [esi]
0000FA85: E8 A0 12 00 00                                        	call	get_size_operator
0000FA8A: 3C 10                                                 	cmp	al,10h
0000FA8C: 74 28                                                 	je	insertps_xmmreg_reg
0000FA8E: 3C 5B                                                 	cmp	al,'['
0000FA90: 0F 85 9E 0E FF FF                                     	jne	invalid_operand
0000FA96: E8 EB 12 00 00                                        	call	get_address
0000FA9B: 80 3D 98 A2 01 00 04                                  	cmp	[operand_size],4
0000FAA2: 74 0D                                                 	je	insertps_size_ok
0000FAA4: 80 3D 98 A2 01 00 00                                  	cmp	[operand_size],0
0000FAAB: 0F 85 8D 0E FF FF                                     	jne	invalid_operand_size
                                                                      insertps_size_ok:
0000FAB1: E9 CF F1 FF FF                                        	jmp	mmx_imm8
                                                                      insertps_xmmreg_reg:
0000FAB6: AC                                                    	lods	byte [esi]
0000FAB7: E8 29 12 00 00                                        	call	convert_mmx_register
0000FABC: 88 C3                                                 	mov	bl,al
0000FABE: E9 0A F2 FF FF                                        	jmp	mmx_nomem_imm8
                                                                pextrq_instruction:
0000FAC3: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
0000FACA: EB 19                                                 	jmp	pextr_instruction
                                                                pextrd_instruction:
0000FACC: C6 05 A9 A2 01 00 04                                  	mov	[mmx_size],4
0000FAD3: EB 10                                                 	jmp	pextr_instruction
                                                                pextrw_instruction:
0000FAD5: C6 05 A9 A2 01 00 02                                  	mov	[mmx_size],2
0000FADC: EB 07                                                 	jmp	pextr_instruction
                                                                pextrb_instruction:
0000FADE: C6 05 A9 A2 01 00 01                                  	mov	[mmx_size],1
                                                                      pextr_instruction:
0000FAE5: E8 51 FF FF FF                                        	call	setup_66_0f_3a
0000FAEA: AC                                                    	lods	byte [esi]
0000FAEB: E8 3A 12 00 00                                        	call	get_size_operator
0000FAF0: 3C 10                                                 	cmp	al,10h
0000FAF2: 74 64                                                 	je	pextr_reg
0000FAF4: 3C 5B                                                 	cmp	al,'['
0000FAF6: 0F 85 38 0E FF FF                                     	jne	invalid_operand
0000FAFC: E8 85 12 00 00                                        	call	get_address
0000FB01: A0 A9 A2 01 00                                        	mov	al,[mmx_size]
0000FB06: 3A 05 98 A2 01 00                                     	cmp	al,[operand_size]
0000FB0C: 74 0D                                                 	je	pextr_size_ok
0000FB0E: 80 3D 98 A2 01 00 00                                  	cmp	[operand_size],0
0000FB15: 0F 85 23 0E FF FF                                     	jne	invalid_operand_size
                                                                      pextr_size_ok:
0000FB1B: 3C 08                                                 	cmp	al,8
0000FB1D: 75 05                                                 	jne	pextr_prefix_ok
0000FB1F: E8 7A 13 00 00                                        	call	operand_64bit
                                                                      pextr_prefix_ok:
0000FB24: 52 53 51                                              	push	edx ebx ecx
0000FB27: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000FB2E: AC                                                    	lods	byte [esi]
0000FB2F: 3C 2C                                                 	cmp	al,','
0000FB31: 0F 85 FD 0D FF FF                                     	jne	invalid_operand
0000FB37: AC                                                    	lods	byte [esi]
0000FB38: E8 ED 11 00 00                                        	call	get_size_operator
0000FB3D: 3C 10                                                 	cmp	al,10h
0000FB3F: 0F 85 EF 0D FF FF                                     	jne	invalid_operand
0000FB45: AC                                                    	lods	byte [esi]
0000FB46: E8 D0 11 00 00                                        	call	convert_xmm_register
0000FB4B: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000FB50: 59 5B 5A                                              	pop	ecx ebx edx
0000FB53: E9 2D F1 FF FF                                        	jmp	mmx_imm8
                                                                      pextr_reg:
0000FB58: AC                                                    	lods	byte [esi]
0000FB59: E8 25 11 00 00                                        	call	convert_register
0000FB5E: 80 3D A9 A2 01 00 04                                  	cmp	[mmx_size],4
0000FB65: 77 18                                                 	ja	pextrq_reg
0000FB67: 80 FC 04                                              	cmp	ah,4
0000FB6A: 74 1D                                                 	je	pextr_reg_size_ok
0000FB6C: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0000FB73: 75 05                                                 	jne	pextr_invalid_size
0000FB75: 80 FC 08                                              	cmp	ah,8
0000FB78: 74 0F                                                 	je	pextr_reg_size_ok
                                                                      pextr_invalid_size:
0000FB7A: E9 BF 0D FF FF                                        	jmp	invalid_operand_size
                                                                      pextrq_reg:
0000FB7F: 80 FC 08                                              	cmp	ah,8
0000FB82: 75 F6                                                 	jne	pextr_invalid_size
0000FB84: E8 15 13 00 00                                        	call	operand_64bit
                                                                      pextr_reg_size_ok:
0000FB89: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000FB90: 50                                                    	push	eax
0000FB91: AC                                                    	lods	byte [esi]
0000FB92: 3C 2C                                                 	cmp	al,','
0000FB94: 0F 85 9A 0D FF FF                                     	jne	invalid_operand
0000FB9A: AC                                                    	lods	byte [esi]
0000FB9B: E8 8A 11 00 00                                        	call	get_size_operator
0000FBA0: 3C 10                                                 	cmp	al,10h
0000FBA2: 0F 85 8C 0D FF FF                                     	jne	invalid_operand
0000FBA8: AC                                                    	lods	byte [esi]
0000FBA9: E8 37 11 00 00                                        	call	convert_mmx_register
0000FBAE: 89 C3                                                 	mov	ebx,eax
0000FBB0: 58                                                    	pop	eax
0000FBB1: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000FBB6: 88 E0                                                 	mov	al,ah
0000FBB8: 80 3D A9 A2 01 00 02                                  	cmp	[mmx_size],2
0000FBBF: 75 18                                                 	jne	pextr_reg_store
0000FBC1: C6 05 9C A2 01 00 00                                  	mov	[opcode_prefix],0
0000FBC8: C6 05 A4 A2 01 00 C5                                  	mov	[extended_code],0C5h
0000FBCF: E8 24 F3 FF FF                                        	call	make_mmx_prefix
0000FBD4: E9 F4 F0 FF FF                                        	jmp	mmx_nomem_imm8
                                                                      pextr_reg_store:
0000FBD9: 80 FF 10                                              	cmp	bh,16
0000FBDC: 0F 85 5C 0D FF FF                                     	jne	invalid_operand_size
0000FBE2: 86 1D A6 A2 01 00                                     	xchg	bl,[postbyte_register]
0000FBE8: E9 E0 F0 FF FF                                        	jmp	mmx_nomem_imm8
                                                                pinsrb_instruction:
0000FBED: C6 05 A9 A2 01 00 01                                  	mov	[mmx_size],1
0000FBF4: EB 15                                                 	jmp	pinsr_instruction
                                                                pinsrd_instruction:
0000FBF6: C6 05 A9 A2 01 00 04                                  	mov	[mmx_size],4
0000FBFD: EB 0C                                                 	jmp	pinsr_instruction
                                                                pinsrq_instruction:
0000FBFF: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
0000FC06: E8 93 12 00 00                                        	call	operand_64bit
                                                                      pinsr_instruction:
0000FC0B: E8 2B FE FF FF                                        	call	setup_66_0f_3a
0000FC10: AC                                                    	lods	byte [esi]
0000FC11: E8 14 11 00 00                                        	call	get_size_operator
0000FC16: 3C 10                                                 	cmp	al,10h
0000FC18: 0F 85 16 0D FF FF                                     	jne	invalid_operand
0000FC1E: AC                                                    	lods	byte [esi]
0000FC1F: E8 F7 10 00 00                                        	call	convert_xmm_register
0000FC24: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
                                                                      pinsr_xmmreg:
0000FC29: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000FC30: AC                                                    	lods	byte [esi]
0000FC31: 3C 2C                                                 	cmp	al,','
0000FC33: 0F 85 FB 0C FF FF                                     	jne	invalid_operand
0000FC39: AC                                                    	lods	byte [esi]
0000FC3A: E8 EB 10 00 00                                        	call	get_size_operator
0000FC3F: 3C 10                                                 	cmp	al,10h
0000FC41: 74 30                                                 	je	pinsr_xmmreg_reg
0000FC43: 3C 5B                                                 	cmp	al,'['
0000FC45: 0F 85 E9 0C FF FF                                     	jne	invalid_operand
0000FC4B: E8 36 11 00 00                                        	call	get_address
0000FC50: 80 3D 98 A2 01 00 00                                  	cmp	[operand_size],0
0000FC57: 0F 84 28 F0 FF FF                                     	je	mmx_imm8
0000FC5D: A0 A9 A2 01 00                                        	mov	al,[mmx_size]
0000FC62: 3A 05 98 A2 01 00                                     	cmp	al,[operand_size]
0000FC68: 0F 84 17 F0 FF FF                                     	je	mmx_imm8
0000FC6E: E9 CB 0C FF FF                                        	jmp	invalid_operand_size
                                                                      pinsr_xmmreg_reg:
0000FC73: AC                                                    	lods	byte [esi]
0000FC74: E8 0A 10 00 00                                        	call	convert_register
0000FC79: 88 C3                                                 	mov	bl,al
0000FC7B: 80 3D A9 A2 01 00 08                                  	cmp	[mmx_size],8
0000FC82: 74 0E                                                 	je	pinsrq_xmmreg_reg
0000FC84: 80 FC 04                                              	cmp	ah,4
0000FC87: 0F 84 40 F0 FF FF                                     	je	mmx_nomem_imm8
0000FC8D: E9 AC 0C FF FF                                        	jmp	invalid_operand_size
                                                                      pinsrq_xmmreg_reg:
0000FC92: 80 FC 08                                              	cmp	ah,8
0000FC95: 0F 84 32 F0 FF FF                                     	je	mmx_nomem_imm8
0000FC9B: E9 9E 0C FF FF                                        	jmp	invalid_operand_size
                                                                pmovsxbw_instruction:
0000FCA0: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
0000FCA7: EB 2B                                                 	jmp	pmovsx_instruction
                                                                pmovsxbd_instruction:
0000FCA9: C6 05 A9 A2 01 00 04                                  	mov	[mmx_size],4
0000FCB0: EB 22                                                 	jmp	pmovsx_instruction
                                                                pmovsxbq_instruction:
0000FCB2: C6 05 A9 A2 01 00 02                                  	mov	[mmx_size],2
0000FCB9: EB 19                                                 	jmp	pmovsx_instruction
                                                                pmovsxwd_instruction:
0000FCBB: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
0000FCC2: EB 10                                                 	jmp	pmovsx_instruction
                                                                pmovsxwq_instruction:
0000FCC4: C6 05 A9 A2 01 00 04                                  	mov	[mmx_size],4
0000FCCB: EB 07                                                 	jmp	pmovsx_instruction
                                                                pmovsxdq_instruction:
0000FCCD: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
                                                                      pmovsx_instruction:
0000FCD4: E8 70 00 00 00                                        	call	setup_66_0f_38
0000FCD9: AC                                                    	lods	byte [esi]
0000FCDA: E8 4B 10 00 00                                        	call	get_size_operator
0000FCDF: 3C 10                                                 	cmp	al,10h
0000FCE1: 0F 85 4D 0C FF FF                                     	jne	invalid_operand
0000FCE7: AC                                                    	lods	byte [esi]
0000FCE8: E8 2E 10 00 00                                        	call	convert_xmm_register
0000FCED: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000FCF2: AC                                                    	lods	byte [esi]
0000FCF3: 3C 2C                                                 	cmp	al,','
0000FCF5: 0F 85 39 0C FF FF                                     	jne	invalid_operand
0000FCFB: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000FD02: AC                                                    	lods	byte [esi]
0000FD03: E8 22 10 00 00                                        	call	get_size_operator
0000FD08: 3C 10                                                 	cmp	al,10h
0000FD0A: 74 30                                                 	je	pmovsx_xmmreg_reg
0000FD0C: 3C 5B                                                 	cmp	al,'['
0000FD0E: 0F 85 20 0C FF FF                                     	jne	invalid_operand
0000FD14: E8 6D 10 00 00                                        	call	get_address
0000FD19: 80 3D 98 A2 01 00 00                                  	cmp	[operand_size],0
0000FD20: 0F 84 F4 B7 FF FF                                     	je	instruction_ready
0000FD26: A0 A9 A2 01 00                                        	mov	al,[mmx_size]
0000FD2B: 3A 05 98 A2 01 00                                     	cmp	al,[operand_size]
0000FD31: 0F 85 07 0C FF FF                                     	jne	invalid_operand_size
0000FD37: E9 DE B7 FF FF                                        	jmp	instruction_ready
                                                                      pmovsx_xmmreg_reg:
0000FD3C: AC                                                    	lods	byte [esi]
0000FD3D: E8 D9 0F 00 00                                        	call	convert_xmm_register
0000FD42: 88 C3                                                 	mov	bl,al
0000FD44: E9 AC B9 FF FF                                        	jmp	nomem_instruction_ready
                                                                      setup_66_0f_38:
0000FD49: C6 05 A4 A2 01 00 38                                  	mov	[extended_code],38h
0000FD50: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
0000FD55: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000FD5C: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
0000FD63: C3                                                    	ret
                                                                
                                                                xsaves_instruction_64bit:
0000FD64: E8 35 11 00 00                                        	call	operand_64bit
                                                                xsaves_instruction:
0000FD69: B4 C7                                                 	mov	ah,0C7h
0000FD6B: EB 09                                                 	jmp	xsave_common
                                                                fxsave_instruction_64bit:
0000FD6D: E8 2C 11 00 00                                        	call	operand_64bit
                                                                fxsave_instruction:
0000FD72: B4 AE                                                 	mov	ah,0AEh
0000FD74: 30 C9                                                 	xor	cl,cl
                                                                      xsave_common:
0000FD76: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000FD7D: 88 25 A4 A2 01 00                                     	mov	[extended_code],ah
0000FD83: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000FD88: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
0000FD8E: AC                                                    	lods	byte [esi]
0000FD8F: E8 96 0F 00 00                                        	call	get_size_operator
0000FD94: 3C 5B                                                 	cmp	al,'['
0000FD96: 0F 85 98 0B FF FF                                     	jne	invalid_operand
0000FD9C: E8 E5 0F 00 00                                        	call	get_address
0000FDA1: 8A 25 98 A2 01 00                                     	mov	ah,[operand_size]
0000FDA7: 08 E4                                                 	or	ah,ah
0000FDA9: 74 0C                                                 	jz	xsave_size_ok
0000FDAB: 3A 25 A9 A2 01 00                                     	cmp	ah,[mmx_size]
0000FDB1: 0F 85 87 0B FF FF                                     	jne	invalid_operand_size
                                                                      xsave_size_ok:
0000FDB7: E9 5E B7 FF FF                                        	jmp	instruction_ready
                                                                clflush_instruction:
0000FDBC: B4 AE                                                 	mov	ah,0AEh
0000FDBE: B1 01                                                 	mov	cl,1
0000FDC0: EB B4                                                 	jmp	xsave_common
                                                                cldemote_instruction:
0000FDC2: B4 1C                                                 	mov	ah,1Ch
0000FDC4: B1 01                                                 	mov	cl,1
0000FDC6: EB AE                                                 	jmp	xsave_common
                                                                stmxcsr_instruction:
0000FDC8: B4 AE                                                 	mov	ah,0AEh
0000FDCA: B1 04                                                 	mov	cl,4
0000FDCC: EB A8                                                 	jmp	xsave_common
                                                                prefetch_instruction:
0000FDCE: C6 05 A4 A2 01 00 18                                  	mov	[extended_code],18h
                                                                      prefetch_mem_8bit:
0000FDD5: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000FDDC: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000FDE1: AC                                                    	lods	byte [esi]
0000FDE2: E8 43 0F 00 00                                        	call	get_size_operator
0000FDE7: 3C 5B                                                 	cmp	al,'['
0000FDE9: 0F 85 45 0B FF FF                                     	jne	invalid_operand
0000FDEF: 08 E4                                                 	or	ah,ah
0000FDF1: 74 09                                                 	jz	prefetch_size_ok
0000FDF3: 80 FC 01                                              	cmp	ah,1
0000FDF6: 0F 85 42 0B FF FF                                     	jne	invalid_operand_size
                                                                      prefetch_size_ok:
0000FDFC: E8 85 0F 00 00                                        	call	get_address
0000FE01: E9 14 B7 FF FF                                        	jmp	instruction_ready
                                                                amd_prefetch_instruction:
0000FE06: C6 05 A4 A2 01 00 0D                                  	mov	[extended_code],0Dh
0000FE0D: EB C6                                                 	jmp	prefetch_mem_8bit
                                                                clflushopt_instruction:
0000FE0F: C6 05 A4 A2 01 00 AE                                  	mov	[extended_code],0AEh
0000FE16: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
0000FE1D: EB B6                                                 	jmp	prefetch_mem_8bit
                                                                pcommit_instruction:
0000FE1F: C6 07 66                                              	mov	byte [edi],66h
0000FE22: 47                                                    	inc	edi
                                                                fence_instruction:
0000FE23: 88 C3                                                 	mov	bl,al
0000FE25: 66 B8 0F AE                                           	mov	ax,0AE0Fh
0000FE29: 66 AB                                                 	stos	word [edi]
0000FE2B: 88 D8                                                 	mov	al,bl
0000FE2D: AA                                                    	stos	byte [edi]
0000FE2E: E9 3D 51 FF FF                                        	jmp	instruction_assembled
                                                                pause_instruction:
0000FE33: 66 B8 F3 90                                           	mov	ax,90F3h
0000FE37: 66 AB                                                 	stos	word [edi]
0000FE39: E9 32 51 FF FF                                        	jmp	instruction_assembled
                                                                movntq_instruction:
0000FE3E: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
0000FE45: EB 0E                                                 	jmp	movnt_instruction
                                                                movntpd_instruction:
0000FE47: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                movntps_instruction:
0000FE4E: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
                                                                      movnt_instruction:
0000FE55: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000FE5A: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000FE61: AC                                                    	lods	byte [esi]
0000FE62: E8 C3 0E 00 00                                        	call	get_size_operator
0000FE67: 3C 5B                                                 	cmp	al,'['
0000FE69: 0F 85 C5 0A FF FF                                     	jne	invalid_operand
0000FE6F: E8 12 0F 00 00                                        	call	get_address
0000FE74: AC                                                    	lods	byte [esi]
0000FE75: 3C 2C                                                 	cmp	al,','
0000FE77: 0F 85 B7 0A FF FF                                     	jne	invalid_operand
0000FE7D: AC                                                    	lods	byte [esi]
0000FE7E: E8 A7 0E 00 00                                        	call	get_size_operator
0000FE83: 3C 10                                                 	cmp	al,10h
0000FE85: 0F 85 A9 0A FF FF                                     	jne	invalid_operand
0000FE8B: AC                                                    	lods	byte [esi]
0000FE8C: E8 54 0E 00 00                                        	call	convert_mmx_register
0000FE91: 3A 25 A9 A2 01 00                                     	cmp	ah,[mmx_size]
0000FE97: 0F 85 A1 0A FF FF                                     	jne	invalid_operand_size
0000FE9D: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000FEA2: E9 73 B6 FF FF                                        	jmp	instruction_ready
                                                                
                                                                movntsd_instruction:
0000FEA7: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
0000FEAE: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
0000FEB5: EB 0E                                                 	jmp	movnts_instruction
                                                                movntss_instruction:
0000FEB7: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0000FEBE: C6 05 A9 A2 01 00 04                                  	mov	[mmx_size],4
                                                                      movnts_instruction:
0000FEC5: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000FECA: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000FED1: AC                                                    	lods	byte [esi]
0000FED2: E8 53 0E 00 00                                        	call	get_size_operator
0000FED7: 3C 5B                                                 	cmp	al,'['
0000FED9: 0F 85 55 0A FF FF                                     	jne	invalid_operand
0000FEDF: E8 A2 0E 00 00                                        	call	get_address
0000FEE4: A0 98 A2 01 00                                        	mov	al,[operand_size]
0000FEE9: 3A 05 A9 A2 01 00                                     	cmp	al,[mmx_size]
0000FEEF: 74 08                                                 	je	movnts_size_ok
0000FEF1: 84 C0                                                 	test	al,al
0000FEF3: 0F 85 45 0A FF FF                                     	jnz	invalid_operand_size
                                                                      movnts_size_ok:
0000FEF9: AC                                                    	lods	byte [esi]
0000FEFA: 3C 2C                                                 	cmp	al,','
0000FEFC: 0F 85 32 0A FF FF                                     	jne	invalid_operand
0000FF02: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0000FF09: AC                                                    	lods	byte [esi]
0000FF0A: E8 1B 0E 00 00                                        	call	get_size_operator
0000FF0F: 3C 10                                                 	cmp	al,10h
0000FF11: 0F 85 1D 0A FF FF                                     	jne	invalid_operand
0000FF17: AC                                                    	lods	byte [esi]
0000FF18: E8 FE 0D 00 00                                        	call	convert_xmm_register
0000FF1D: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000FF22: E9 F3 B5 FF FF                                        	jmp	instruction_ready
                                                                
                                                                movdiri_instruction:
0000FF27: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
0000FF2C: B0 38                                                 	mov	al,38h
                                                                movnti_instruction:
0000FF2E: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0000FF35: A2 A4 A2 01 00                                        	mov	[extended_code],al
0000FF3A: AC                                                    	lods	byte [esi]
0000FF3B: E8 EA 0D 00 00                                        	call	get_size_operator
0000FF40: 3C 5B                                                 	cmp	al,'['
0000FF42: 0F 85 EC 09 FF FF                                     	jne	invalid_operand
0000FF48: E8 39 0E 00 00                                        	call	get_address
0000FF4D: AC                                                    	lods	byte [esi]
0000FF4E: 3C 2C                                                 	cmp	al,','
0000FF50: 0F 85 DE 09 FF FF                                     	jne	invalid_operand
0000FF56: E8 19 0D 00 00                                        	call	take_register
0000FF5B: 80 FC 04                                              	cmp	ah,4
0000FF5E: 74 0E                                                 	je	movnti_store
0000FF60: 80 FC 08                                              	cmp	ah,8
0000FF63: 0F 85 D5 09 FF FF                                     	jne	invalid_operand_size
0000FF69: E8 30 0F 00 00                                        	call	operand_64bit
                                                                      movnti_store:
0000FF6E: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000FF73: E9 A2 B5 FF FF                                        	jmp	instruction_ready
                                                                monitor_instruction:
0000FF78: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000FF7D: 80 3E 00                                              	cmp	byte [esi],0
0000FF80: 74 4D                                                 	je	monitor_instruction_store
0000FF82: 80 3E 0F                                              	cmp	byte [esi],0Fh
0000FF85: 74 48                                                 	je	monitor_instruction_store
0000FF87: E8 E8 0C 00 00                                        	call	take_register
0000FF8C: 66 3D 00 04                                           	cmp	ax,0400h
0000FF90: 0F 85 9E 09 FF FF                                     	jne	invalid_operand
0000FF96: AC                                                    	lods	byte [esi]
0000FF97: 3C 2C                                                 	cmp	al,','
0000FF99: 0F 85 95 09 FF FF                                     	jne	invalid_operand
0000FF9F: E8 D0 0C 00 00                                        	call	take_register
0000FFA4: 66 3D 01 04                                           	cmp	ax,0401h
0000FFA8: 0F 85 86 09 FF FF                                     	jne	invalid_operand
0000FFAE: 80 3D A6 A2 01 00 C8                                  	cmp	[postbyte_register],0C8h
0000FFB5: 75 18                                                 	jne	monitor_instruction_store
0000FFB7: AC                                                    	lods	byte [esi]
0000FFB8: 3C 2C                                                 	cmp	al,','
0000FFBA: 0F 85 74 09 FF FF                                     	jne	invalid_operand
0000FFC0: E8 AF 0C 00 00                                        	call	take_register
0000FFC5: 66 3D 02 04                                           	cmp	ax,0402h
0000FFC9: 0F 85 65 09 FF FF                                     	jne	invalid_operand
                                                                      monitor_instruction_store:
0000FFCF: 66 B8 0F 01                                           	mov	ax,010Fh
0000FFD3: 66 AB                                                 	stos	word [edi]
0000FFD5: A0 A6 A2 01 00                                        	mov	al,[postbyte_register]
0000FFDA: AA                                                    	stos	byte [edi]
0000FFDB: E9 90 4F FF FF                                        	jmp	instruction_assembled
                                                                pconfig_instruction:
0000FFE0: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0000FFE5: EB E8                                                 	jmp	monitor_instruction_store
                                                                movntdqa_instruction:
0000FFE7: E8 5D FD FF FF                                        	call	setup_66_0f_38
0000FFEC: AC                                                    	lods	byte [esi]
0000FFED: E8 38 0D 00 00                                        	call	get_size_operator
0000FFF2: 3C 10                                                 	cmp	al,10h
0000FFF4: 0F 85 3A 09 FF FF                                     	jne	invalid_operand
0000FFFA: AC                                                    	lods	byte [esi]
0000FFFB: E8 1B 0D 00 00                                        	call	convert_xmm_register
00010000: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00010005: AC                                                    	lods	byte [esi]
00010006: 3C 2C                                                 	cmp	al,','
00010008: 0F 85 26 09 FF FF                                     	jne	invalid_operand
0001000E: AC                                                    	lods	byte [esi]
0001000F: E8 16 0D 00 00                                        	call	get_size_operator
00010014: 3C 5B                                                 	cmp	al,'['
00010016: 0F 85 18 09 FF FF                                     	jne	invalid_operand
0001001C: E8 65 0D 00 00                                        	call	get_address
00010021: E9 F4 B4 FF FF                                        	jmp	instruction_ready
                                                                
                                                                extrq_instruction:
00010026: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
0001002D: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00010034: C6 05 A4 A2 01 00 78                                  	mov	[extended_code],78h
0001003B: AC                                                    	lods	byte [esi]
0001003C: E8 E9 0C 00 00                                        	call	get_size_operator
00010041: 3C 10                                                 	cmp	al,10h
00010043: 0F 85 EB 08 FF FF                                     	jne	invalid_operand
00010049: AC                                                    	lods	byte [esi]
0001004A: E8 CC 0C 00 00                                        	call	convert_xmm_register
0001004F: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00010054: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0001005B: AC                                                    	lods	byte [esi]
0001005C: 3C 2C                                                 	cmp	al,','
0001005E: 0F 85 D0 08 FF FF                                     	jne	invalid_operand
00010064: AC                                                    	lods	byte [esi]
00010065: E8 C0 0C 00 00                                        	call	get_size_operator
0001006A: 3C 10                                                 	cmp	al,10h
0001006C: 74 2E                                                 	je	extrq_xmmreg_xmmreg
0001006E: F6 C4 FE                                              	test	ah,not 1
00010071: 0F 85 C7 08 FF FF                                     	jnz	invalid_operand_size
00010077: 3C 28                                                 	cmp	al,'('
00010079: 0F 85 B5 08 FF FF                                     	jne	invalid_operand
0001007F: 30 DB                                                 	xor	bl,bl
00010081: 86 1D A6 A2 01 00                                     	xchg	bl,[postbyte_register]
00010087: E8 FA 0E 00 00                                        	call	store_nomem_instruction
0001008C: E8 1C 72 FF FF                                        	call	get_byte_value
00010091: AA                                                    	stosb
00010092: E8 45 EC FF FF                                        	call	append_imm8
00010097: E9 D4 4E FF FF                                        	jmp	instruction_assembled
                                                                      extrq_xmmreg_xmmreg:
0001009C: FE 05 A4 A2 01 00                                     	inc	[extended_code]
000100A2: AC                                                    	lods	byte [esi]
000100A3: E8 73 0C 00 00                                        	call	convert_xmm_register
000100A8: 88 C3                                                 	mov	bl,al
000100AA: E9 46 B6 FF FF                                        	jmp	nomem_instruction_ready
                                                                insertq_instruction:
000100AF: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
000100B6: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
000100BD: C6 05 A4 A2 01 00 78                                  	mov	[extended_code],78h
000100C4: AC                                                    	lods	byte [esi]
000100C5: E8 60 0C 00 00                                        	call	get_size_operator
000100CA: 3C 10                                                 	cmp	al,10h
000100CC: 0F 85 62 08 FF FF                                     	jne	invalid_operand
000100D2: AC                                                    	lods	byte [esi]
000100D3: E8 43 0C 00 00                                        	call	convert_xmm_register
000100D8: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000100DD: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
000100E4: AC                                                    	lods	byte [esi]
000100E5: 3C 2C                                                 	cmp	al,','
000100E7: 0F 85 47 08 FF FF                                     	jne	invalid_operand
000100ED: AC                                                    	lods	byte [esi]
000100EE: E8 37 0C 00 00                                        	call	get_size_operator
000100F3: 3C 10                                                 	cmp	al,10h
000100F5: 0F 85 39 08 FF FF                                     	jne	invalid_operand
000100FB: AC                                                    	lods	byte [esi]
000100FC: E8 1A 0C 00 00                                        	call	convert_xmm_register
00010101: 88 C3                                                 	mov	bl,al
00010103: 80 3E 2C                                              	cmp	byte [esi],','
00010106: 74 0B                                                 	je	insertq_with_imm
00010108: FE 05 A4 A2 01 00                                     	inc	[extended_code]
0001010E: E9 E2 B5 FF FF                                        	jmp	nomem_instruction_ready
                                                                      insertq_with_imm:
00010113: E8 6E 0E 00 00                                        	call	store_nomem_instruction
00010118: E8 BF EB FF FF                                        	call	append_imm8
0001011D: E8 BA EB FF FF                                        	call	append_imm8
00010122: E9 49 4E FF FF                                        	jmp	instruction_assembled
                                                                
                                                                crc32_instruction:
00010127: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
0001012E: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00010135: C6 05 A4 A2 01 00 38                                  	mov	[extended_code],38h
0001013C: C6 05 A5 A2 01 00 F0                                  	mov	[supplemental_code],0F0h
00010143: E8 2C 0B 00 00                                        	call	take_register
00010148: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0001014D: 80 FC 04                                              	cmp	ah,4
00010150: 74 16                                                 	je	crc32_reg_size_ok
00010152: 80 FC 08                                              	cmp	ah,8
00010155: 0F 85 D9 07 FF FF                                     	jne	invalid_operand
0001015B: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00010162: 0F 85 C2 07 FF FF                                     	jne	illegal_instruction
                                                                      crc32_reg_size_ok:
00010168: AC                                                    	lods	byte [esi]
00010169: 3C 2C                                                 	cmp	al,','
0001016B: 0F 85 C3 07 FF FF                                     	jne	invalid_operand
00010171: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
00010178: AC                                                    	lods	byte [esi]
00010179: E8 AC 0B 00 00                                        	call	get_size_operator
0001017E: 3C 10                                                 	cmp	al,10h
00010180: 74 31                                                 	je	crc32_reg_reg
00010182: 3C 5B                                                 	cmp	al,'['
00010184: 0F 85 AA 07 FF FF                                     	jne	invalid_operand
0001018A: E8 F7 0B 00 00                                        	call	get_address
0001018F: A0 98 A2 01 00                                        	mov	al,[operand_size]
00010194: 84 C0                                                 	test	al,al
00010196: 74 14                                                 	jz	crc32_unknown_size
00010198: 3C 01                                                 	cmp	al,1
0001019A: 74 0B                                                 	je	crc32_reg_mem_store
0001019C: FE 05 A5 A2 01 00                                     	inc	[supplemental_code]
000101A2: E8 0C 0D 00 00                                        	call	operand_autodetect
                                                                      crc32_reg_mem_store:
000101A7: E9 6E B3 FF FF                                        	jmp	instruction_ready
                                                                      crc32_unknown_size:
000101AC: E8 B3 B6 FF FF                                        	call	recoverable_unknown_size
000101B1: EB F4                                                 	jmp	crc32_reg_mem_store
                                                                      crc32_reg_reg:
000101B3: AC                                                    	lods	byte [esi]
000101B4: E8 CA 0A 00 00                                        	call	convert_register
000101B9: 88 C3                                                 	mov	bl,al
000101BB: 88 E0                                                 	mov	al,ah
000101BD: 3C 01                                                 	cmp	al,1
000101BF: 74 0B                                                 	je	crc32_reg_reg_store
000101C1: FE 05 A5 A2 01 00                                     	inc	[supplemental_code]
000101C7: E8 E7 0C 00 00                                        	call	operand_autodetect
                                                                      crc32_reg_reg_store:
000101CC: E9 24 B5 FF FF                                        	jmp	nomem_instruction_ready
                                                                popcnt_instruction:
000101D1: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
000101D8: E9 34 D1 FF FF                                        	jmp	bs_instruction
                                                                movbe_instruction:
000101DD: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
000101E2: C6 05 A4 A2 01 00 38                                  	mov	[extended_code],38h
000101E9: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
000101F0: AC                                                    	lods	byte [esi]
000101F1: E8 34 0B 00 00                                        	call	get_size_operator
000101F6: 3C 5B                                                 	cmp	al,'['
000101F8: 74 3E                                                 	je	movbe_mem
000101FA: 3C 10                                                 	cmp	al,10h
000101FC: 0F 85 32 07 FF FF                                     	jne	invalid_operand
00010202: AC                                                    	lods	byte [esi]
00010203: E8 7B 0A 00 00                                        	call	convert_register
00010208: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0001020D: AC                                                    	lods	byte [esi]
0001020E: 3C 2C                                                 	cmp	al,','
00010210: 0F 85 1E 07 FF FF                                     	jne	invalid_operand
00010216: AC                                                    	lods	byte [esi]
00010217: E8 0E 0B 00 00                                        	call	get_size_operator
0001021C: 3C 5B                                                 	cmp	al,'['
0001021E: 0F 85 FC 06 FF FF                                     	jne	invalid_argument
00010224: E8 5D 0B 00 00                                        	call	get_address
00010229: A0 98 A2 01 00                                        	mov	al,[operand_size]
0001022E: E8 80 0C 00 00                                        	call	operand_autodetect
00010233: E9 E2 B2 FF FF                                        	jmp	instruction_ready
                                                                      movbe_mem:
00010238: FE 05 A5 A2 01 00                                     	inc	[supplemental_code]
0001023E: E8 43 0B 00 00                                        	call	get_address
00010243: 52 53 51                                              	push	edx ebx ecx
00010246: AC                                                    	lods	byte [esi]
00010247: 3C 2C                                                 	cmp	al,','
00010249: 0F 85 E5 06 FF FF                                     	jne	invalid_operand
0001024F: E8 20 0A 00 00                                        	call	take_register
00010254: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00010259: 59 5B 5A                                              	pop	ecx ebx edx
0001025C: A0 98 A2 01 00                                        	mov	al,[operand_size]
00010261: E8 4D 0C 00 00                                        	call	operand_autodetect
00010266: E9 AF B2 FF FF                                        	jmp	instruction_ready
                                                                adx_instruction:
0001026B: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00010272: C6 05 A4 A2 01 00 38                                  	mov	[extended_code],38h
00010279: C6 05 A5 A2 01 00 F6                                  	mov	[supplemental_code],0F6h
00010280: A2 9A A2 01 00                                        	mov	[operand_prefix],al
00010285: E8 B5 D0 FF FF                                        	call	get_reg_mem
0001028A: 72 1F                                                 	jc	adx_reg_reg
0001028C: A0 98 A2 01 00                                        	mov	al,[operand_size]
00010291: 3C 04                                                 	cmp	al,4
00010293: 0F 84 81 B2 FF FF                                     	je	instruction_ready
00010299: 3C 08                                                 	cmp	al,8
0001029B: 0F 85 9D 06 FF FF                                     	jne	invalid_operand_size
000102A1: E8 F8 0B 00 00                                        	call	operand_64bit
000102A6: E9 6F B2 FF FF                                        	jmp	instruction_ready
                                                                      adx_reg_reg:
000102AB: 80 FC 04                                              	cmp	ah,4
000102AE: 0F 84 41 B4 FF FF                                     	je	nomem_instruction_ready
000102B4: 80 FC 08                                              	cmp	ah,8
000102B7: 0F 85 81 06 FF FF                                     	jne	invalid_operand_size
000102BD: E8 DC 0B 00 00                                        	call	operand_64bit
000102C2: E9 2E B4 FF FF                                        	jmp	nomem_instruction_ready
                                                                rdpid_instruction:
000102C7: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000102CC: C6 05 A4 A2 01 00 C7                                  	mov	[extended_code],0C7h
000102D3: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
000102DA: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
000102E1: E8 8E 09 00 00                                        	call	take_register
000102E6: 88 C3                                                 	mov	bl,al
000102E8: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
000102EF: 74 0E                                                 	je	rdpid_64bit
000102F1: 80 FC 04                                              	cmp	ah,4
000102F4: 0F 85 44 06 FF FF                                     	jne	invalid_operand_size
000102FA: E9 F6 B3 FF FF                                        	jmp	nomem_instruction_ready
                                                                      rdpid_64bit:
000102FF: 80 FC 08                                              	cmp	ah,8
00010302: 0F 85 36 06 FF FF                                     	jne	invalid_operand_size
00010308: E9 E8 B3 FF FF                                        	jmp	nomem_instruction_ready
                                                                ptwrite_instruction:
0001030D: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00010314: C6 05 A4 A2 01 00 AE                                  	mov	[extended_code],0AEh
0001031B: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00010320: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00010327: AC                                                    	lods	byte [esi]
00010328: E8 FD 09 00 00                                        	call	get_size_operator
0001032D: 3C 10                                                 	cmp	al,10h
0001032F: 74 3D                                                 	je	ptwrite_reg
                                                                      ptwrite_mem:
00010331: 3C 5B                                                 	cmp	al,'['
00010333: 0F 85 FB 05 FF FF                                     	jne	invalid_operand
00010339: E8 48 0A 00 00                                        	call	get_address
0001033E: A0 98 A2 01 00                                        	mov	al,[operand_size]
00010343: 3C 04                                                 	cmp	al,4
00010345: 74 18                                                 	je	ptwrite_mem_store
00010347: 3C 08                                                 	cmp	al,8
00010349: 74 0F                                                 	je	ptwrite_mem_64bit
0001034B: 08 C0                                                 	or	al,al
0001034D: 0F 85 EB 05 FF FF                                     	jnz	invalid_operand_size
00010353: E8 0C B5 FF FF                                        	call	recoverable_unknown_size
00010358: EB 05                                                 	jmp	ptwrite_mem_store
                                                                      ptwrite_mem_64bit:
0001035A: E8 3F 0B 00 00                                        	call	operand_64bit
                                                                      ptwrite_mem_store:
0001035F: A0 98 A2 01 00                                        	mov	al,[operand_size]
00010364: E8 4A 0B 00 00                                        	call	operand_autodetect
00010369: E9 AC B1 FF FF                                        	jmp	instruction_ready
                                                                      ptwrite_reg:
0001036E: AC                                                    	lods	byte [esi]
0001036F: E8 0F 09 00 00                                        	call	convert_register
00010374: 88 C3                                                 	mov	bl,al
00010376: 88 E0                                                 	mov	al,ah
00010378: 3C 04                                                 	cmp	al,4
0001037A: 0F 84 75 B3 FF FF                                     	je	nomem_instruction_ready
00010380: 3C 08                                                 	cmp	al,8
00010382: 0F 85 B6 05 FF FF                                     	jne	invalid_operand_size
00010388: E8 11 0B 00 00                                        	call	operand_64bit
0001038D: E9 63 B3 FF FF                                        	jmp	nomem_instruction_ready
                                                                
                                                                vmclear_instruction:
00010392: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00010399: EB 07                                                 	jmp	vmx_instruction
                                                                vmxon_instruction:
0001039B: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
                                                                vmx_instruction:
000103A2: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000103A7: C6 05 A4 A2 01 00 C7                                  	mov	[extended_code],0C7h
000103AE: AC                                                    	lods	byte [esi]
000103AF: E8 76 09 00 00                                        	call	get_size_operator
000103B4: 3C 5B                                                 	cmp	al,'['
000103B6: 0F 85 78 05 FF FF                                     	jne	invalid_operand
000103BC: E8 C5 09 00 00                                        	call	get_address
000103C1: A0 98 A2 01 00                                        	mov	al,[operand_size]
000103C6: 08 C0                                                 	or	al,al
000103C8: 74 08                                                 	jz	vmx_size_ok
000103CA: 3C 08                                                 	cmp	al,8
000103CC: 0F 85 6C 05 FF FF                                     	jne	invalid_operand_size
                                                                      vmx_size_ok:
000103D2: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
000103D9: E9 3C B1 FF FF                                        	jmp	instruction_ready
                                                                vmread_instruction:
000103DE: C6 05 A4 A2 01 00 78                                  	mov	[extended_code],78h
000103E5: AC                                                    	lods	byte [esi]
000103E6: E8 3F 09 00 00                                        	call	get_size_operator
000103EB: 3C 10                                                 	cmp	al,10h
000103ED: 74 27                                                 	je	vmread_nomem
000103EF: 3C 5B                                                 	cmp	al,'['
000103F1: 0F 85 3D 05 FF FF                                     	jne	invalid_operand
000103F7: E8 8A 09 00 00                                        	call	get_address
000103FC: AC                                                    	lods	byte [esi]
000103FD: 3C 2C                                                 	cmp	al,','
000103FF: 0F 85 2F 05 FF FF                                     	jne	invalid_operand
00010405: E8 6A 08 00 00                                        	call	take_register
0001040A: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0001040F: E8 33 00 00 00                                        	call	vmread_check_size
00010414: EB BC                                                 	jmp	vmx_size_ok
                                                                      vmread_nomem:
00010416: AC                                                    	lods	byte [esi]
00010417: E8 67 08 00 00                                        	call	convert_register
0001041C: 50                                                    	push	eax
0001041D: E8 25 00 00 00                                        	call	vmread_check_size
00010422: AC                                                    	lods	byte [esi]
00010423: 3C 2C                                                 	cmp	al,','
00010425: 0F 85 09 05 FF FF                                     	jne	invalid_operand
0001042B: E8 44 08 00 00                                        	call	take_register
00010430: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00010435: E8 0D 00 00 00                                        	call	vmread_check_size
0001043A: 5B                                                    	pop	ebx
0001043B: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00010442: E9 AE B2 FF FF                                        	jmp	nomem_instruction_ready
                                                                      vmread_check_size:
00010447: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0001044E: 74 0E                                                 	je	vmread_long
00010450: 80 3D 98 A2 01 00 04                                  	cmp	[operand_size],4
00010457: 0F 85 E1 04 FF FF                                     	jne	invalid_operand_size
0001045D: C3                                                    	ret
                                                                      vmread_long:
0001045E: 80 3D 98 A2 01 00 08                                  	cmp	[operand_size],8
00010465: 0F 85 D3 04 FF FF                                     	jne	invalid_operand_size
0001046B: C3                                                    	ret
                                                                vmwrite_instruction:
0001046C: C6 05 A4 A2 01 00 79                                  	mov	[extended_code],79h
00010473: E8 FC 07 00 00                                        	call	take_register
00010478: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0001047D: AC                                                    	lods	byte [esi]
0001047E: 3C 2C                                                 	cmp	al,','
00010480: 0F 85 AE 04 FF FF                                     	jne	invalid_operand
00010486: AC                                                    	lods	byte [esi]
00010487: E8 9E 08 00 00                                        	call	get_size_operator
0001048C: 3C 10                                                 	cmp	al,10h
0001048E: 74 17                                                 	je	vmwrite_nomem
00010490: 3C 5B                                                 	cmp	al,'['
00010492: 0F 85 9C 04 FF FF                                     	jne	invalid_operand
00010498: E8 E9 08 00 00                                        	call	get_address
0001049D: E8 A5 FF FF FF                                        	call	vmread_check_size
000104A2: E9 2B FF FF FF                                        	jmp	vmx_size_ok
                                                                      vmwrite_nomem:
000104A7: AC                                                    	lods	byte [esi]
000104A8: E8 D6 07 00 00                                        	call	convert_register
000104AD: 88 C3                                                 	mov	bl,al
000104AF: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
000104B6: E9 3A B2 FF FF                                        	jmp	nomem_instruction_ready
                                                                vmx_inv_instruction:
000104BB: E8 89 F8 FF FF                                        	call	setup_66_0f_38
000104C0: E8 AF 07 00 00                                        	call	take_register
000104C5: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000104CA: E8 78 FF FF FF                                        	call	vmread_check_size
000104CF: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
000104D6: AC                                                    	lods	byte [esi]
000104D7: 3C 2C                                                 	cmp	al,','
000104D9: 0F 85 55 04 FF FF                                     	jne	invalid_operand
000104DF: AC                                                    	lods	byte [esi]
000104E0: E8 45 08 00 00                                        	call	get_size_operator
000104E5: 3C 5B                                                 	cmp	al,'['
000104E7: 0F 85 47 04 FF FF                                     	jne	invalid_operand
000104ED: E8 94 08 00 00                                        	call	get_address
000104F2: A0 98 A2 01 00                                        	mov	al,[operand_size]
000104F7: 08 C0                                                 	or	al,al
000104F9: 0F 84 D3 FE FF FF                                     	jz	vmx_size_ok
000104FF: 3C 10                                                 	cmp	al,16
00010501: 0F 85 37 04 FF FF                                     	jne	invalid_operand_size
00010507: E9 C6 FE FF FF                                        	jmp	vmx_size_ok
                                                                simple_svm_instruction:
0001050C: 50                                                    	push	eax
0001050D: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00010514: C6 05 A4 A2 01 00 01                                  	mov	[extended_code],1
0001051B: E8 54 07 00 00                                        	call	take_register
00010520: 08 C0                                                 	or	al,al
00010522: 0F 85 0C 04 FF FF                                     	jnz	invalid_operand
                                                                      simple_svm_detect_size:
00010528: 80 FC 02                                              	cmp	ah,2
0001052B: 74 14                                                 	je	simple_svm_16bit
0001052D: 80 FC 04                                              	cmp	ah,4
00010530: 74 27                                                 	je	simple_svm_32bit
00010532: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00010539: 0F 85 FF 03 FF FF                                     	jne	invalid_operand_size
0001053F: EB 24                                                 	jmp	simple_svm_store
                                                                      simple_svm_16bit:
00010541: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
00010548: 74 1B                                                 	je	simple_svm_store
0001054A: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00010551: 0F 84 E7 03 FF FF                                     	je	invalid_operand_size
00010557: EB 09                                                 	jmp	prefixed_svm_store
                                                                      simple_svm_32bit:
00010559: 80 3D BE A2 01 00 20                                  	cmp	[code_type],32
00010560: 74 03                                                 	je	simple_svm_store
                                                                      prefixed_svm_store:
00010562: B0 67                                                 	mov	al,67h
00010564: AA                                                    	stos	byte [edi]
                                                                      simple_svm_store:
00010565: E8 C9 09 00 00                                        	call	store_classic_instruction_code
0001056A: 58                                                    	pop	eax
0001056B: AA                                                    	stos	byte [edi]
0001056C: E9 FF 49 FF FF                                        	jmp	instruction_assembled
                                                                skinit_instruction:
00010571: E8 FE 06 00 00                                        	call	take_register
00010576: 66 3D 00 04                                           	cmp	ax,0400h
0001057A: 0F 85 B4 03 FF FF                                     	jne	invalid_operand
00010580: B0 DE                                                 	mov	al,0DEh
00010582: E9 39 DF FF FF                                        	jmp	simple_instruction_0f_01
                                                                clzero_instruction:
00010587: E8 E8 06 00 00                                        	call	take_register
0001058C: 08 C0                                                 	or	al,al
0001058E: 0F 85 A0 03 FF FF                                     	jnz	invalid_operand
00010594: B0 FC                                                 	mov	al,0FCh
00010596: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0001059D: 74 0E                                                 	je	clzero_64bit
0001059F: 80 FC 04                                              	cmp	ah,4
000105A2: 0F 85 8C 03 FF FF                                     	jne	invalid_operand
000105A8: E9 13 DF FF FF                                        	jmp	simple_instruction_0f_01
                                                                      clzero_64bit:
000105AD: 80 FC 08                                              	cmp	ah,8
000105B0: 0F 85 7E 03 FF FF                                     	jne	invalid_operand
000105B6: E9 05 DF FF FF                                        	jmp	simple_instruction_0f_01
                                                                invlpga_instruction:
000105BB: 50                                                    	push	eax
000105BC: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
000105C3: C6 05 A4 A2 01 00 01                                  	mov	[extended_code],1
000105CA: E8 A5 06 00 00                                        	call	take_register
000105CF: 08 C0                                                 	or	al,al
000105D1: 0F 85 5D 03 FF FF                                     	jnz	invalid_operand
000105D7: 88 E3                                                 	mov	bl,ah
000105D9: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
000105E0: AC                                                    	lods	byte [esi]
000105E1: 3C 2C                                                 	cmp	al,','
000105E3: 0F 85 4B 03 FF FF                                     	jne	invalid_operand
000105E9: E8 86 06 00 00                                        	call	take_register
000105EE: 66 3D 01 04                                           	cmp	ax,0401h
000105F2: 0F 85 3C 03 FF FF                                     	jne	invalid_operand
000105F8: 88 DC                                                 	mov	ah,bl
000105FA: E9 29 FF FF FF                                        	jmp	simple_svm_detect_size
                                                                
                                                                rdrand_instruction:
000105FF: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00010606: C6 05 A4 A2 01 00 C7                                  	mov	[extended_code],0C7h
0001060D: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00010612: E8 5D 06 00 00                                        	call	take_register
00010617: 88 C3                                                 	mov	bl,al
00010619: 88 E0                                                 	mov	al,ah
0001061B: E8 93 08 00 00                                        	call	operand_autodetect
00010620: E9 D0 B0 FF FF                                        	jmp	nomem_instruction_ready
                                                                rdfsbase_instruction:
00010625: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0001062C: 0F 85 F8 02 FF FF                                     	jne	illegal_instruction
00010632: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00010639: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00010640: C6 05 A4 A2 01 00 AE                                  	mov	[extended_code],0AEh
00010647: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0001064C: E8 23 06 00 00                                        	call	take_register
00010651: 88 C3                                                 	mov	bl,al
00010653: 88 E0                                                 	mov	al,ah
00010655: 80 FC 02                                              	cmp	ah,2
00010658: 0F 84 E0 02 FF FF                                     	je	invalid_operand_size
0001065E: E8 50 08 00 00                                        	call	operand_autodetect
00010663: E9 8D B0 FF FF                                        	jmp	nomem_instruction_ready
                                                                
                                                                xabort_instruction:
00010668: AC                                                    	lods	byte [esi]
00010669: E8 BC 06 00 00                                        	call	get_size_operator
0001066E: 80 FC 01                                              	cmp	ah,1
00010671: 0F 87 C7 02 FF FF                                     	ja	invalid_operand_size
00010677: 3C 28                                                 	cmp	al,'('
00010679: 0F 85 B5 02 FF FF                                     	jne	invalid_operand
0001067F: E8 29 6C FF FF                                        	call	get_byte_value
00010684: 88 C2                                                 	mov	dl,al
00010686: 66 B8 C6 F8                                           	mov	ax,0F8C6h
0001068A: 66 AB                                                 	stos	word [edi]
0001068C: 88 D0                                                 	mov	al,dl
0001068E: AA                                                    	stos	byte [edi]
0001068F: E9 DC 48 FF FF                                        	jmp	instruction_assembled
                                                                xbegin_instruction:
00010694: AC                                                    	lods	byte [esi]
00010695: 3C 28                                                 	cmp	al,'('
00010697: 0F 85 97 02 FF FF                                     	jne	invalid_operand
0001069D: A0 BE A2 01 00                                        	mov	al,[code_type]
000106A2: 3C 40                                                 	cmp	al,64
000106A4: 74 2E                                                 	je	xbegin_64bit
000106A6: 3C 20                                                 	cmp	al,32
000106A8: 74 23                                                 	je	xbegin_32bit
                                                                      xbegin_16bit:
000106AA: E8 8D 6E FF FF                                        	call	get_address_word_value
000106AF: 83 C7 04                                              	add	edi,4
000106B2: 8B 2D C4 A1 01 00                                     	mov	ebp,[addressing_space]
000106B8: E8 E4 71 FF FF                                        	call	calculate_relative_offset
000106BD: 83 EF 04                                              	sub	edi,4
000106C0: C1 E0 10                                              	shl	eax,16
000106C3: 66 B8 C7 F8                                           	mov	ax,0F8C7h
000106C7: AB                                                    	stos	dword [edi]
000106C8: E9 A3 48 FF FF                                        	jmp	instruction_assembled
                                                                      xbegin_32bit:
000106CD: E8 81 6E FF FF                                        	call	get_address_dword_value
000106D2: EB 05                                                 	jmp	xbegin_address_ok
                                                                      xbegin_64bit:
000106D4: E8 91 6E FF FF                                        	call	get_address_qword_value
                                                                      xbegin_address_ok:
000106D9: 83 C7 05                                              	add	edi,5
000106DC: 8B 2D C4 A1 01 00                                     	mov	ebp,[addressing_space]
000106E2: E8 BA 71 FF FF                                        	call	calculate_relative_offset
000106E7: 83 EF 05                                              	sub	edi,5
000106EA: 89 C2                                                 	mov	edx,eax
000106EC: 98                                                    	cwde
000106ED: 39 D0                                                 	cmp	eax,edx
000106EF: 75 12                                                 	jne	xbegin_rel32
000106F1: B0 66                                                 	mov	al,66h
000106F3: AA                                                    	stos	byte [edi]
000106F4: 89 D0                                                 	mov	eax,edx
000106F6: C1 E0 10                                              	shl	eax,16
000106F9: 66 B8 C7 F8                                           	mov	ax,0F8C7h
000106FD: AB                                                    	stos	dword [edi]
000106FE: E9 6D 48 FF FF                                        	jmp	instruction_assembled
                                                                      xbegin_rel32:
00010703: 83 EA 01                                              	sub	edx,1
00010706: 71 0D                                                 	jno	xbegin_rel32_ok
00010708: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0001070F: 0F 84 54 D4 FF FF                                     	je	jump_out_of_range
                                                                      xbegin_rel32_ok:
00010715: 66 B8 C7 F8                                           	mov	ax,0F8C7h
00010719: 66 AB                                                 	stos	word [edi]
0001071B: 89 D0                                                 	mov	eax,edx
0001071D: AB                                                    	stos	dword [edi]
0001071E: E9 4D 48 FF FF                                        	jmp	instruction_assembled
                                                                
                                                                bndcl_instruction:
00010723: B4 F3                                                 	mov	ah,0F3h
00010725: EB 02                                                 	jmp	bndc_instruction
                                                                bndcu_instruction:
00010727: B4 F2                                                 	mov	ah,0F2h
                                                                      bndc_instruction:
00010729: 88 25 9C A2 01 00                                     	mov	[opcode_prefix],ah
0001072F: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00010736: A2 A4 A2 01 00                                        	mov	[extended_code],al
0001073B: E8 D2 00 00 00                                        	call	take_bnd_register
00010740: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00010745: E8 9E 01 00 00                                        	call	get_bnd_size
0001074A: A2 98 A2 01 00                                        	mov	[operand_size],al
0001074F: AC                                                    	lods	byte [esi]
00010750: 3C 2C                                                 	cmp	al,','
00010752: 0F 85 DC 01 FF FF                                     	jne	invalid_operand
00010758: AC                                                    	lods	byte [esi]
00010759: E8 CC 05 00 00                                        	call	get_size_operator
0001075E: 3C 5B                                                 	cmp	al,'['
00010760: 74 15                                                 	je	bndc_mem
00010762: 3C 10                                                 	cmp	al,10h
00010764: 0F 85 CA 01 FF FF                                     	jne	invalid_operand
0001076A: AC                                                    	lods	byte [esi]
0001076B: E8 13 05 00 00                                        	call	convert_register
00010770: 88 C3                                                 	mov	bl,al
00010772: E9 7E AF FF FF                                        	jmp	nomem_instruction_ready
                                                                      bndc_mem:
00010777: E8 11 06 00 00                                        	call	get_address_of_required_size
0001077C: E9 99 AD FF FF                                        	jmp	instruction_ready
                                                                bndmov_instruction:
00010781: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00010788: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0001078F: A2 A4 A2 01 00                                        	mov	[extended_code],al
00010794: E8 4F 01 00 00                                        	call	get_bnd_size
00010799: D0 E0                                                 	shl	al,1
0001079B: A2 98 A2 01 00                                        	mov	[operand_size],al
000107A0: AC                                                    	lods	byte [esi]
000107A1: 3C 14                                                 	cmp	al,14h
000107A3: 74 30                                                 	je	bndmov_reg
000107A5: E8 80 05 00 00                                        	call	get_size_operator
000107AA: 3C 5B                                                 	cmp	al,'['
000107AC: 0F 85 82 01 FF FF                                     	jne	invalid_operand
000107B2: FE 05 A4 A2 01 00                                     	inc	[extended_code]
000107B8: E8 D0 05 00 00                                        	call	get_address_of_required_size
000107BD: AC                                                    	lods	byte [esi]
000107BE: 3C 2C                                                 	cmp	al,','
000107C0: 0F 85 6E 01 FF FF                                     	jne	invalid_operand
000107C6: E8 47 00 00 00                                        	call	take_bnd_register
000107CB: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000107D0: E9 45 AD FF FF                                        	jmp	instruction_ready
                                                                       bndmov_reg:
000107D5: AC                                                    	lods	byte [esi]
000107D6: E8 41 00 00 00                                        	call	convert_bnd_register
000107DB: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000107E0: AC                                                    	lods	byte [esi]
000107E1: 3C 2C                                                 	cmp	al,','
000107E3: 0F 85 4B 01 FF FF                                     	jne	invalid_operand
000107E9: AC                                                    	lods	byte [esi]
000107EA: 3C 14                                                 	cmp	al,14h
000107EC: 74 17                                                 	je	bndmov_reg_reg
000107EE: E8 37 05 00 00                                        	call	get_size_operator
000107F3: 3C 5B                                                 	cmp	al,'['
000107F5: 0F 85 39 01 FF FF                                     	jne	invalid_operand
000107FB: E8 8D 05 00 00                                        	call	get_address_of_required_size
00010800: E9 15 AD FF FF                                        	jmp	instruction_ready
                                                                      bndmov_reg_reg:
00010805: AC                                                    	lods	byte [esi]
00010806: E8 11 00 00 00                                        	call	convert_bnd_register
0001080B: 88 C3                                                 	mov	bl,al
0001080D: E9 E3 AE FF FF                                        	jmp	nomem_instruction_ready
                                                                    take_bnd_register:
00010812: AC                                                    	lods	byte [esi]
00010813: 3C 14                                                 	cmp	al,14h
00010815: 0F 85 19 01 FF FF                                     	jne	invalid_operand
0001081B: AC                                                    	lods	byte [esi]
                                                                    convert_bnd_register:
0001081C: 88 C4                                                 	mov	ah,al
0001081E: C0 EC 04                                              	shr	ah,4
00010821: 80 FC 06                                              	cmp	ah,6
00010824: 0F 85 0A 01 FF FF                                     	jne	invalid_operand
0001082A: 24 0F                                                 	and	al,1111b
0001082C: C3                                                    	ret
                                                                bndmk_instruction:
0001082D: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00010834: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0001083B: A2 A4 A2 01 00                                        	mov	[extended_code],al
00010840: E8 CD FF FF FF                                        	call	take_bnd_register
00010845: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0001084A: AC                                                    	lods	byte [esi]
0001084B: 3C 2C                                                 	cmp	al,','
0001084D: 0F 85 E1 00 FF FF                                     	jne	invalid_operand
00010853: AC                                                    	lods	byte [esi]
00010854: E8 D1 04 00 00                                        	call	get_size_operator
00010859: 3C 5B                                                 	cmp	al,'['
0001085B: 0F 85 D3 00 FF FF                                     	jne	invalid_operand
00010861: E8 82 00 00 00                                        	call	get_bnd_size
00010866: E8 AC 05 00 00                                        	call	get_address_prefixes
0001086B: E8 8B 00 00 00                                        	call	get_address_component
00010870: 80 7E FF 5D                                           	cmp	byte [esi-1],']'
00010874: 74 54                                                 	je	bndmk_ready
00010876: AC                                                    	lods	byte [esi]
00010877: 3C 2C                                                 	cmp	al,','
00010879: 0F 85 B5 00 FF FF                                     	jne	invalid_operand
0001087F: AC                                                    	lods	byte [esi]
00010880: 3C 28                                                 	cmp	al,'('
00010882: 0F 85 AC 00 FF FF                                     	jne	invalid_operand
00010888: 08 DA                                                 	or	dl,bl
0001088A: 0A 15 B8 A2 01 00                                     	or	dl,[address_sign]
00010890: 0B 15 2C A2 01 00                                     	or	edx,[address_high]
00010896: 0F 85 FC 00 FF FF                                     	jnz	invalid_address
0001089C: 88 3D B9 A2 01 00                                     	mov	[address_register],bh
000108A2: E8 54 00 00 00                                        	call	get_address_component
000108A7: AC                                                    	lods	byte [esi]
000108A8: 3C 5D                                                 	cmp	al,']'
000108AA: 0F 85 84 00 FF FF                                     	jne	invalid_operand
000108B0: 08 FF                                                 	or	bh,bh
000108B2: 74 10                                                 	jz	bndmk_selected_base
000108B4: 38 FB                                                 	cmp	bl,bh
000108B6: 74 0A                                                 	je	bndmk_to_index
000108B8: 08 DB                                                 	or	bl,bl
000108BA: 0F 85 D8 00 FF FF                                     	jnz	invalid_address
000108C0: 88 FB                                                 	mov	bl,bh
                                                                      bndmk_to_index:
000108C2: FE C1                                                 	inc	cl
                                                                      bndmk_selected_base:
000108C4: 8A 3D B9 A2 01 00                                     	mov	bh,[address_register]
                                                                      bndmk_ready:
000108CA: 66 09 DB                                              	or	bx,bx
000108CD: 0F 84 47 AC FF FF                                     	jz	instruction_ready
000108D3: 80 3D B0 A2 01 00 00                                  	cmp	[address_size_declared],0
000108DA: 0F 85 3A AC FF FF                                     	jne	instruction_ready
000108E0: 80 E5 F0                                              	and	ch,not 0Fh
000108E3: E9 32 AC FF FF                                        	jmp	instruction_ready
                                                                    get_bnd_size:
000108E8: B0 04                                                 	mov	al,4
000108EA: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
000108F1: 75 02                                                 	jne	bnd_size_ok
000108F3: 04 04                                                 	add	al,4
                                                                      bnd_size_ok:
000108F5: A2 AD A2 01 00                                        	mov	[address_size],al
000108FA: C3                                                    	ret
                                                                    get_address_component:
000108FB: C6 05 C6 A2 01 00 00                                  	mov	[free_address_range],0
00010902: E8 8F 6C FF FF                                        	call	calculate_address
00010907: 89 15 2C A2 01 00                                     	mov	[address_high],edx
0001090D: 89 C2                                                 	mov	edx,eax
0001090F: 66 09 DB                                              	or	bx,bx
00010912: 74 13                                                 	jz	address_component_ok
00010914: 88 D8                                                 	mov	al,bl
00010916: 08 F8                                                 	or	al,bh
00010918: C0 E8 04                                              	shr	al,4
0001091B: 3A 05 AD A2 01 00                                     	cmp	al,[address_size]
00010921: 0F 85 71 00 FF FF                                     	jne	invalid_address
                                                                      address_component_ok:
00010927: C3                                                    	ret
                                                                bndldx_instruction:
00010928: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0001092F: A2 A4 A2 01 00                                        	mov	[extended_code],al
00010934: E8 D9 FE FF FF                                        	call	take_bnd_register
00010939: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0001093E: AC                                                    	lods	byte [esi]
0001093F: 3C 2C                                                 	cmp	al,','
00010941: 0F 85 ED FF FE FF                                     	jne	invalid_operand
00010947: E8 2E 00 00 00                                        	call	take_bnd_mib
0001094C: E9 79 FF FF FF                                        	jmp	bndmk_ready
                                                                bndstx_instruction:
00010951: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00010958: A2 A4 A2 01 00                                        	mov	[extended_code],al
0001095D: E8 18 00 00 00                                        	call	take_bnd_mib
00010962: AC                                                    	lods	byte [esi]
00010963: 3C 2C                                                 	cmp	al,','
00010965: 0F 85 C9 FF FE FF                                     	jne	invalid_operand
0001096B: E8 A2 FE FF FF                                        	call	take_bnd_register
00010970: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00010975: E9 50 FF FF FF                                        	jmp	bndmk_ready
                                                                    take_bnd_mib:
0001097A: AC                                                    	lods	byte [esi]
0001097B: 3C 5B                                                 	cmp	al,'['
0001097D: 0F 85 B1 FF FE FF                                     	jne	invalid_operand
00010983: E8 60 FF FF FF                                        	call	get_bnd_size
00010988: E8 8A 04 00 00                                        	call	get_address_prefixes
0001098D: E8 69 FF FF FF                                        	call	get_address_component
00010992: 80 7E FF 5D                                           	cmp	byte [esi-1],']'
00010996: 74 7D                                                 	je	bnd_mib_ok
00010998: AC                                                    	lods	byte [esi]
00010999: 3C 2C                                                 	cmp	al,','
0001099B: 0F 85 93 FF FE FF                                     	jne	invalid_operand
000109A1: AC                                                    	lods	byte [esi]
000109A2: 3C 28                                                 	cmp	al,'('
000109A4: 0F 85 8A FF FE FF                                     	jne	invalid_operand
000109AA: A0 B8 A2 01 00                                        	mov	al,[address_sign]
000109AF: 50 53 51 52                                           	push	eax ebx ecx edx
000109B3: FF 35 28 A2 01 00                                     	push	[address_symbol]
000109B9: E8 3D FF FF FF                                        	call	get_address_component
000109BE: AC                                                    	lods	byte [esi]
000109BF: 3C 5D                                                 	cmp	al,']'
000109C1: 0F 85 6D FF FE FF                                     	jne	invalid_operand
000109C7: 08 DA                                                 	or	dl,bl
000109C9: 0A 15 B8 A2 01 00                                     	or	dl,[address_sign]
000109CF: 0B 15 2C A2 01 00                                     	or	edx,[address_high]
000109D5: 0F 85 BD FF FE FF                                     	jnz	invalid_address
000109DB: 88 3D B9 A2 01 00                                     	mov	[address_register],bh
000109E1: 8F 05 28 A2 01 00                                     	pop	[address_symbol]
000109E7: 5A 59 5B 58                                           	pop	edx ecx ebx eax
000109EB: A2 B8 A2 01 00                                        	mov	[address_sign],al
000109F0: 08 DB                                                 	or	bl,bl
000109F2: 74 13                                                 	jz	mib_place_index
000109F4: 08 FF                                                 	or	bh,bh
000109F6: 0F 85 9C FF FE FF                                     	jnz	invalid_address
000109FC: 80 F9 01                                              	cmp	cl,1
000109FF: 0F 85 93 FF FE FF                                     	jne	invalid_address
00010A05: 88 DF                                                 	mov	bh,bl
                                                                      mib_place_index:
00010A07: 8A 1D B9 A2 01 00                                     	mov	bl,[address_register]
00010A0D: 30 C9                                                 	xor	cl,cl
00010A0F: 08 DB                                                 	or	bl,bl
00010A11: 74 02                                                 	jz	bnd_mib_ok
00010A13: FE C1                                                 	inc	cl
                                                                      bnd_mib_ok:
00010A15: C3                                                    	ret
                                                                
                                                                tpause_instruction:
00010A16: C6 05 A6 A2 01 00 06                                  	mov	[postbyte_register],6
00010A1D: C6 05 A4 A2 01 00 AE                                  	mov	[extended_code],0AEh
00010A24: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00010A2B: A2 9C A2 01 00                                        	mov	[opcode_prefix],al
00010A30: E8 3F 02 00 00                                        	call	take_register
00010A35: 80 FC 04                                              	cmp	ah,4
00010A38: 0F 85 00 FF FE FF                                     	jne	invalid_operand_size
00010A3E: 88 C3                                                 	mov	bl,al
00010A40: 80 3E 2C                                              	cmp	byte [esi],','
00010A43: 0F 85 AC AC FF FF                                     	jne	nomem_instruction_ready
00010A49: 46                                                    	inc	esi
00010A4A: E8 25 02 00 00                                        	call	take_register
00010A4F: 66 3D 02 04                                           	cmp	ax,0402h
00010A53: 0F 85 DB FE FE FF                                     	jne	invalid_operand
00010A59: AC                                                    	lods	byte [esi]
00010A5A: 3C 2C                                                 	cmp	al,','
00010A5C: 0F 85 D2 FE FE FF                                     	jne	invalid_operand
00010A62: E8 0D 02 00 00                                        	call	take_register
00010A67: 66 3D 00 04                                           	cmp	ax,0400h
00010A6B: 0F 85 C3 FE FE FF                                     	jne	invalid_operand
00010A71: E9 7F AC FF FF                                        	jmp	nomem_instruction_ready
                                                                umonitor_instruction:
00010A76: C6 05 A6 A2 01 00 06                                  	mov	[postbyte_register],6
00010A7D: C6 05 A4 A2 01 00 AE                                  	mov	[extended_code],0AEh
00010A84: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00010A8B: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00010A92: E8 DD 01 00 00                                        	call	take_register
00010A97: 88 C3                                                 	mov	bl,al
00010A99: 88 E0                                                 	mov	al,ah
00010A9B: E8 13 04 00 00                                        	call	operand_autodetect
00010AA0: E9 50 AC FF FF                                        	jmp	nomem_instruction_ready
                                                                movdir64b_instruction:
00010AA5: E8 9F F2 FF FF                                        	call	setup_66_0f_38
00010AAA: E8 C5 01 00 00                                        	call	take_register
00010AAF: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00010AB4: 30 C0                                                 	xor	al,al
00010AB6: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
00010ABC: 50                                                    	push	eax
00010ABD: AC                                                    	lods	byte [esi]
00010ABE: 3C 2C                                                 	cmp	al,','
00010AC0: 0F 85 6E FE FE FF                                     	jne	invalid_operand
00010AC6: AC                                                    	lods	byte [esi]
00010AC7: E8 5E 02 00 00                                        	call	get_size_operator
00010ACC: 3C 5B                                                 	cmp	al,'['
00010ACE: 0F 85 60 FE FE FF                                     	jne	invalid_operand
00010AD4: E8 AD 02 00 00                                        	call	get_address
00010AD9: A0 98 A2 01 00                                        	mov	al,[operand_size]
00010ADE: 08 C0                                                 	or	al,al
00010AE0: 74 08                                                 	jz	movdir64b_ready
00010AE2: 3C 40                                                 	cmp	al,64
00010AE4: 0F 85 54 FE FE FF                                     	jne	invalid_operand_size
                                                                      movdir64b_ready:
00010AEA: 57                                                    	push	edi
00010AEB: E8 03 05 00 00                                        	call	store_instruction
00010AF0: 5B 58                                                 	pop	ebx eax
00010AF2: 8A 0D BE A2 01 00                                     	mov	cl,[code_type]
00010AF8: 80 3B 67                                              	cmp	byte [ebx],67h
00010AFB: 75 09                                                 	jne	movdir64b_size_check
00010AFD: D0 E9                                                 	shr	cl,1
00010AFF: 80 F9 10                                              	cmp	cl,16
00010B02: 73 02                                                 	jae	movdir64b_size_check
00010B04: B1 20                                                 	mov	cl,32
                                                                      movdir64b_size_check:
00010B06: C0 E0 03                                              	shl	al,3
00010B09: 38 C8                                                 	cmp	al,cl
00010B0B: 0F 85 2D FE FE FF                                     	jne	invalid_operand_size
00010B11: E9 5A 44 FF FF                                        	jmp	instruction_assembled
                                                                
                                                                setssbsy_instruction:
00010B16: C1 E0 18                                              	shl	eax,24
00010B19: 0D F3 0F 01 00                                        	or	eax,010FF3h
00010B1E: AB                                                    	stos	dword [edi]
00010B1F: E9 4C 44 FF FF                                        	jmp	instruction_assembled
                                                                rstorssp_instruction:
00010B24: B4 01                                                 	mov	ah,1
00010B26: EB 02                                                 	jmp	setup_clrssbsy
                                                                clrssbsy_instruction:
00010B28: B4 AE                                                 	mov	ah,0AEh
                                                                      setup_clrssbsy:
00010B2A: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00010B31: 88 25 A4 A2 01 00                                     	mov	[extended_code],ah
00010B37: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00010B3C: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00010B43: AC                                                    	lods	byte [esi]
00010B44: E8 E1 01 00 00                                        	call	get_size_operator
00010B49: 3C 5B                                                 	cmp	al,'['
00010B4B: 0F 85 E3 FD FE FF                                     	jne	invalid_operand
00010B51: E8 30 02 00 00                                        	call	get_address
00010B56: F6 05 98 A2 01 00 F7                                  	test	[operand_size],not 8
00010B5D: 0F 85 DB FD FE FF                                     	jnz	invalid_operand_size
00010B63: E9 B2 A9 FF FF                                        	jmp	instruction_ready
                                                                rdsspq_instruction:
00010B68: C6 05 9B A2 01 00 48                                  	mov	[rex_prefix],48h
                                                                rdsspd_instruction:
00010B6F: B4 1E                                                 	mov	ah,1Eh
00010B71: EB 09                                                 	jmp	setup_incssp
                                                                incsspq_instruction:
00010B73: C6 05 9B A2 01 00 48                                  	mov	[rex_prefix],48h
                                                                incsspd_instruction:
00010B7A: B4 AE                                                 	mov	ah,0AEh
                                                                      setup_incssp:
00010B7C: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00010B83: 88 25 A4 A2 01 00                                     	mov	[extended_code],ah
00010B89: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00010B8E: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00010B95: AC                                                    	lods	byte [esi]
00010B96: E8 8F 01 00 00                                        	call	get_size_operator
00010B9B: 3C 10                                                 	cmp	al,10h
00010B9D: 0F 85 91 FD FE FF                                     	jne	invalid_operand
00010BA3: AC                                                    	lods	byte [esi]
00010BA4: E8 DA 00 00 00                                        	call	convert_register
00010BA9: 88 C3                                                 	mov	bl,al
00010BAB: E8 05 00 00 00                                        	call	cet_size_check
00010BB0: E9 40 AB FF FF                                        	jmp	nomem_instruction_ready
                                                                      cet_size_check:
00010BB5: 80 3D 9B A2 01 00 00                                  	cmp	[rex_prefix],0
00010BBC: 74 0F                                                 	je	cet_dword
00010BBE: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00010BC5: 0F 85 5F FD FE FF                                     	jne	illegal_instruction
00010BCB: D0 EC                                                 	shr	ah,1
                                                                      cet_dword:
00010BCD: 80 FC 04                                              	cmp	ah,4
00010BD0: 0F 85 68 FD FE FF                                     	jne	invalid_operand_size
00010BD6: C3                                                    	ret
                                                                wrussq_instruction:
00010BD7: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                wrssq_instruction:
00010BDE: C6 05 9B A2 01 00 48                                  	mov	[rex_prefix],48h
00010BE5: EB 07                                                 	jmp	wrssd_instruction
                                                                wrussd_instruction:
00010BE7: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                wrssd_instruction:
00010BEE: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00010BF5: C6 05 A4 A2 01 00 38                                  	mov	[extended_code],38h
00010BFC: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00010C01: AC                                                    	lods	byte [esi]
00010C02: E8 23 01 00 00                                        	call	get_size_operator
00010C07: 3C 10                                                 	cmp	al,10h
00010C09: 74 30                                                 	je	wrss_reg
00010C0B: 3C 5B                                                 	cmp	al,'['
00010C0D: 0F 85 21 FD FE FF                                     	jne	invalid_operand
00010C13: E8 6E 01 00 00                                        	call	get_address
00010C18: 52 53 51                                              	push	edx ebx ecx
00010C1B: AC                                                    	lods	byte [esi]
00010C1C: 3C 2C                                                 	cmp	al,','
00010C1E: 0F 85 10 FD FE FF                                     	jne	invalid_operand
00010C24: E8 4B 00 00 00                                        	call	take_register
00010C29: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00010C2E: 59 5B 5A                                              	pop	ecx ebx edx
00010C31: E8 7F FF FF FF                                        	call	cet_size_check
00010C36: E9 DF A8 FF FF                                        	jmp	instruction_ready
                                                                      wrss_reg:
00010C3B: AC                                                    	lods	byte [esi]
00010C3C: E8 42 00 00 00                                        	call	convert_register
00010C41: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00010C46: AC                                                    	lods	byte [esi]
00010C47: 3C 2C                                                 	cmp	al,','
00010C49: 0F 85 E5 FC FE FF                                     	jne	invalid_operand
00010C4F: E8 20 00 00 00                                        	call	take_register
00010C54: 88 C3                                                 	mov	bl,al
00010C56: 86 1D A6 A2 01 00                                     	xchg	bl,[postbyte_register]
00010C5C: E8 54 FF FF FF                                        	call	cet_size_check
00010C61: E9 8F AA FF FF                                        	jmp	nomem_instruction_ready
                                                                endbr_instruction:
00010C66: C1 E0 18                                              	shl	eax,24
00010C69: 0D F3 0F 1E 00                                        	or	eax,1E0FF3h
00010C6E: AB                                                    	stos	dword [edi]
00010C6F: E9 FC 42 FF FF                                        	jmp	instruction_assembled
                                                                
                                                                take_register:
00010C74: AC                                                    	lods	byte [esi]
00010C75: E8 B0 00 00 00                                        	call	get_size_operator
00010C7A: 3C 10                                                 	cmp	al,10h
00010C7C: 0F 85 B2 FC FE FF                                     	jne	invalid_operand
00010C82: AC                                                    	lods	byte [esi]
                                                                convert_register:
00010C83: 88 C4                                                 	mov	ah,al
00010C85: C0 EC 04                                              	shr	ah,4
00010C88: 24 0F                                                 	and	al,0Fh
00010C8A: 80 FC 08                                              	cmp	ah,8
00010C8D: 74 1D                                                 	je	match_register_size
00010C8F: 80 FC 04                                              	cmp	ah,4
00010C92: 0F 87 9C FC FE FF                                     	ja	invalid_operand
00010C98: 80 FC 01                                              	cmp	ah,1
00010C9B: 77 0F                                                 	ja	match_register_size
00010C9D: 3C 04                                                 	cmp	al,4
00010C9F: 72 0B                                                 	jb	match_register_size
00010CA1: 08 E4                                                 	or	ah,ah
00010CA3: 74 23                                                 	jz	high_byte_register
00010CA5: 80 0D 9B A2 01 00 40                                  	or	[rex_prefix],40h
                                                                      match_register_size:
00010CAC: 3A 25 98 A2 01 00                                     	cmp	ah,[operand_size]
00010CB2: 74 13                                                 	je	register_size_ok
00010CB4: 80 3D 98 A2 01 00 00                                  	cmp	[operand_size],0
00010CBB: 0F 85 91 FC FE FF                                     	jne	operand_sizes_do_not_match
00010CC1: 88 25 98 A2 01 00                                     	mov	[operand_size],ah
                                                                      register_size_ok:
00010CC7: C3                                                    	ret
                                                                      high_byte_register:
00010CC8: B4 01                                                 	mov	ah,1
00010CCA: 80 0D 9B A2 01 00 10                                  	or	[rex_prefix],10h
00010CD1: EB D9                                                 	jmp	match_register_size
                                                                convert_fpu_register:
00010CD3: 88 C4                                                 	mov	ah,al
00010CD5: C0 EC 04                                              	shr	ah,4
00010CD8: 24 07                                                 	and	al,111b
00010CDA: 80 FC 0A                                              	cmp	ah,10
00010CDD: 0F 85 51 FC FE FF                                     	jne	invalid_operand
00010CE3: EB C7                                                 	jmp	match_register_size
                                                                convert_mmx_register:
00010CE5: 88 C4                                                 	mov	ah,al
00010CE7: C0 EC 04                                              	shr	ah,4
00010CEA: 80 FC 0C                                              	cmp	ah,0Ch
00010CED: 74 15                                                 	je	xmm_register
00010CEF: 0F 87 3F FC FE FF                                     	ja	invalid_operand
00010CF5: 24 07                                                 	and	al,111b
00010CF7: 80 FC 0B                                              	cmp	ah,0Bh
00010CFA: 0F 85 34 FC FE FF                                     	jne	invalid_operand
00010D00: B4 08                                                 	mov	ah,8
00010D02: EB A8                                                 	jmp	match_register_size
                                                                      xmm_register:
00010D04: 24 0F                                                 	and	al,0Fh
00010D06: B4 10                                                 	mov	ah,16
00010D08: 3C 08                                                 	cmp	al,8
00010D0A: 72 A0                                                 	jb	match_register_size
00010D0C: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00010D13: 0F 85 1B FC FE FF                                     	jne	invalid_operand
00010D19: EB 91                                                 	jmp	match_register_size
                                                                convert_xmm_register:
00010D1B: 88 C4                                                 	mov	ah,al
00010D1D: C0 EC 04                                              	shr	ah,4
00010D20: 80 FC 0C                                              	cmp	ah,0Ch
00010D23: 74 DF                                                 	je	xmm_register
00010D25: E9 0A FC FE FF                                        	jmp	invalid_operand
                                                                get_size_operator:
00010D2A: 30 E4                                                 	xor	ah,ah
00010D2C: 3C 11                                                 	cmp	al,11h
00010D2E: 75 2E                                                 	jne	no_size_operator
00010D30: C6 05 AF A2 01 00 01                                  	mov	[size_declared],1
00010D37: 66 AD                                                 	lods	word [esi]
00010D39: 86 C4                                                 	xchg	al,ah
00010D3B: 80 0D 99 A2 01 00 01                                  	or	[operand_flags],1
00010D42: 3A 25 98 A2 01 00                                     	cmp	ah,[operand_size]
00010D48: 74 13                                                 	je	size_operator_ok
00010D4A: 80 3D 98 A2 01 00 00                                  	cmp	[operand_size],0
00010D51: 0F 85 FB FB FE FF                                     	jne	operand_sizes_do_not_match
00010D57: 88 25 98 A2 01 00                                     	mov	[operand_size],ah
                                                                      size_operator_ok:
00010D5D: C3                                                    	ret
                                                                      no_size_operator:
00010D5E: C6 05 AF A2 01 00 00                                  	mov	[size_declared],0
00010D65: 3C 5B                                                 	cmp	al,'['
00010D67: 75 F4                                                 	jne	size_operator_ok
00010D69: 80 25 99 A2 01 00 FE                                  	and	[operand_flags],not 1
00010D70: C3                                                    	ret
                                                                get_jump_operator:
00010D71: C6 05 AA A2 01 00 00                                  	mov	[jump_type],0
00010D78: 3C 12                                                 	cmp	al,12h
00010D7A: 75 09                                                 	jne	jump_operator_ok
00010D7C: 66 AD                                                 	lods	word [esi]
00010D7E: A2 AA A2 01 00                                        	mov	[jump_type],al
00010D83: 88 E0                                                 	mov	al,ah
                                                                      jump_operator_ok:
00010D85: C3                                                    	ret
                                                                get_address:
00010D86: 80 25 AD A2 01 00 00                                  	and	[address_size],0
                                                                    get_address_of_required_size:
00010D8D: E8 85 00 00 00                                        	call	get_address_prefixes
00010D92: 80 25 C6 A2 01 00 00                                  	and	[free_address_range],0
00010D99: E8 F8 67 FF FF                                        	call	calculate_address
00010D9E: 80 7E FF 5D                                           	cmp	byte [esi-1],']'
00010DA2: 0F 85 F0 FB FE FF                                     	jne	invalid_address
00010DA8: 89 15 2C A2 01 00                                     	mov	[address_high],edx
00010DAE: 89 C2                                                 	mov	edx,eax
00010DB0: 80 3D B0 A2 01 00 00                                  	cmp	[address_size_declared],0
00010DB7: 75 5D                                                 	jne	address_ok
00010DB9: 80 3D A7 A2 01 00 04                                  	cmp	[segment_register],4
00010DC0: 77 54                                                 	ja	address_ok
00010DC2: 66 09 DB                                              	or	bx,bx
00010DC5: 75 4C                                                 	jnz	clear_address_size
00010DC7: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00010DCE: 75 46                                                 	jne	address_ok
                                                                      calculate_relative_address:
00010DD0: 8B 15 28 A2 01 00                                     	mov	edx,[address_symbol]
00010DD6: 89 15 24 A2 01 00                                     	mov	[symbol_identifier],edx
00010DDC: 8B 15 2C A2 01 00                                     	mov	edx,[address_high]
00010DE2: 8B 2D C4 A1 01 00                                     	mov	ebp,[addressing_space]
00010DE8: E8 B4 6A FF FF                                        	call	calculate_relative_offset
00010DED: 89 15 2C A2 01 00                                     	mov	[address_high],edx
00010DF3: 99                                                    	cdq
00010DF4: 3B 15 2C A2 01 00                                     	cmp	edx,[address_high]
00010DFA: 74 05                                                 	je	address_high_ok
00010DFC: E8 F0 64 FF FF                                        	call	recoverable_overflow
                                                                      address_high_ok:
00010E01: 89 C2                                                 	mov	edx,eax
00010E03: C1 C9 10                                              	ror	ecx,16
00010E06: 8A 0D B4 A2 01 00                                     	mov	cl,[value_type]
00010E0C: C1 C1 10                                              	rol	ecx,16
00010E0F: 66 BB 00 99                                           	mov	bx,9900h
                                                                      clear_address_size:
00010E13: 80 E5 F0                                              	and	ch,not 0Fh
                                                                      address_ok:
00010E16: C3                                                    	ret
                                                                get_address_prefixes:
00010E17: 80 25 A7 A2 01 00 00                                  	and	[segment_register],0
00010E1E: 80 25 B0 A2 01 00 00                                  	and	[address_size_declared],0
00010E25: A0 BE A2 01 00                                        	mov	al,[code_type]
00010E2A: C0 E8 03                                              	shr	al,3
00010E2D: A2 AC A2 01 00                                        	mov	[value_size],al
00010E32: 8A 06                                                 	mov	al,[esi]
00010E34: 24 F0                                                 	and	al,11110000b
00010E36: 3C 60                                                 	cmp	al,60h
00010E38: 75 0C                                                 	jne	get_address_size_prefix
00010E3A: AC                                                    	lods	byte [esi]
00010E3B: 2C 60                                                 	sub	al,60h
00010E3D: A2 A7 A2 01 00                                        	mov	[segment_register],al
00010E42: 8A 06                                                 	mov	al,[esi]
00010E44: 24 F0                                                 	and	al,11110000b
                                                                      get_address_size_prefix:
00010E46: 3C 70                                                 	cmp	al,70h
00010E48: 75 31                                                 	jne	address_size_prefix_ok
00010E4A: AC                                                    	lods	byte [esi]
00010E4B: 2C 70                                                 	sub	al,70h
00010E4D: 3C 02                                                 	cmp	al,2
00010E4F: 0F 82 07 FB FE FF                                     	jb	invalid_address_size
00010E55: 3C 08                                                 	cmp	al,8
00010E57: 0F 87 FF FA FE FF                                     	ja	invalid_address_size
00010E5D: A2 AC A2 01 00                                        	mov	[value_size],al
00010E62: 80 0D B0 A2 01 00 01                                  	or	[address_size_declared],1
00010E69: 08 05 AD A2 01 00                                     	or	[address_size],al
00010E6F: 3A 05 AD A2 01 00                                     	cmp	al,[address_size]
00010E75: 0F 85 E1 FA FE FF                                     	jne	invalid_address_size
                                                                      address_size_prefix_ok:
00010E7B: C3                                                    	ret
                                                                operand_16bit:
00010E7C: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
00010E83: 74 18                                                 	je	size_prefix_ok
00010E85: C6 05 9A A2 01 00 66                                  	mov	[operand_prefix],66h
00010E8C: C3                                                    	ret
                                                                operand_32bit:
00010E8D: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
00010E94: 75 07                                                 	jne	size_prefix_ok
00010E96: C6 05 9A A2 01 00 66                                  	mov	[operand_prefix],66h
                                                                      size_prefix_ok:
00010E9D: C3                                                    	ret
                                                                operand_64bit:
00010E9E: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00010EA5: 0F 85 7F FA FE FF                                     	jne	illegal_instruction
00010EAB: 80 0D 9B A2 01 00 48                                  	or	[rex_prefix],48h
00010EB2: C3                                                    	ret
                                                                operand_autodetect:
00010EB3: 3C 02                                                 	cmp	al,2
00010EB5: 74 C5                                                 	je	operand_16bit
00010EB7: 3C 04                                                 	cmp	al,4
00010EB9: 74 D2                                                 	je	operand_32bit
00010EBB: 3C 08                                                 	cmp	al,8
00010EBD: 74 DF                                                 	je	operand_64bit
00010EBF: E9 7A FA FE FF                                        	jmp	invalid_operand_size
                                                                store_segment_prefix_if_necessary:
00010EC4: A0 A7 A2 01 00                                        	mov	al,[segment_register]
00010EC9: 08 C0                                                 	or	al,al
00010ECB: 74 58                                                 	jz	segment_prefix_ok
00010ECD: 3C 04                                                 	cmp	al,4
00010ECF: 77 51                                                 	ja	segment_prefix_386
00010ED1: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00010ED8: 74 4B                                                 	je	segment_prefix_ok
00010EDA: 3C 03                                                 	cmp	al,3
00010EDC: 74 17                                                 	je	ss_prefix
00010EDE: 72 38                                                 	jb	segment_prefix_86
00010EE0: 80 FB 25                                              	cmp	bl,25h
00010EE3: 74 33                                                 	je	segment_prefix_86
00010EE5: 80 FF 25                                              	cmp	bh,25h
00010EE8: 74 2E                                                 	je	segment_prefix_86
00010EEA: 80 FF 45                                              	cmp	bh,45h
00010EED: 74 29                                                 	je	segment_prefix_86
00010EEF: 80 FF 44                                              	cmp	bh,44h
00010EF2: 74 24                                                 	je	segment_prefix_86
00010EF4: C3                                                    	ret
                                                                      ss_prefix:
00010EF5: 80 FB 25                                              	cmp	bl,25h
00010EF8: 74 2B                                                 	je	segment_prefix_ok
00010EFA: 80 FF 25                                              	cmp	bh,25h
00010EFD: 74 26                                                 	je	segment_prefix_ok
00010EFF: 80 FF 45                                              	cmp	bh,45h
00010F02: 74 21                                                 	je	segment_prefix_ok
00010F04: 80 FF 44                                              	cmp	bh,44h
00010F07: 74 1C                                                 	je	segment_prefix_ok
00010F09: EB 0D                                                 	jmp	segment_prefix_86
                                                                store_segment_prefix:
00010F0B: A0 A7 A2 01 00                                        	mov	al,[segment_register]
00010F10: 08 C0                                                 	or	al,al
00010F12: 74 11                                                 	jz	segment_prefix_ok
00010F14: 3C 05                                                 	cmp	al,5
00010F16: 73 0A                                                 	jae	segment_prefix_386
                                                                      segment_prefix_86:
00010F18: FE C8                                                 	dec	al
00010F1A: C0 E0 03                                              	shl	al,3
00010F1D: 04 26                                                 	add	al,26h
00010F1F: AA                                                    	stos	byte [edi]
00010F20: EB 03                                                 	jmp	segment_prefix_ok
                                                                      segment_prefix_386:
00010F22: 04 5F                                                 	add	al,64h-5
00010F24: AA                                                    	stos	byte [edi]
                                                                      segment_prefix_ok:
00010F25: C3                                                    	ret
                                                                store_instruction_code:
00010F26: 80 3D 9D A2 01 00 00                                  	cmp	[vex_required],0
00010F2D: 0F 85 4C 32 00 00                                     	jne	store_vex_instruction_code
                                                                store_classic_instruction_code:
00010F33: A0 9A A2 01 00                                        	mov	al,[operand_prefix]
00010F38: 08 C0                                                 	or	al,al
00010F3A: 74 01                                                 	jz	operand_prefix_ok
00010F3C: AA                                                    	stos	byte [edi]
                                                                      operand_prefix_ok:
00010F3D: A0 9C A2 01 00                                        	mov	al,[opcode_prefix]
00010F42: 08 C0                                                 	or	al,al
00010F44: 74 01                                                 	jz	opcode_prefix_ok
00010F46: AA                                                    	stos	byte [edi]
                                                                      opcode_prefix_ok:
00010F47: A0 9B A2 01 00                                        	mov	al,[rex_prefix]
00010F4C: A8 40                                                 	test	al,40h
00010F4E: 74 16                                                 	jz	rex_prefix_ok
00010F50: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00010F57: 0F 85 D7 F9 FE FF                                     	jne	invalid_operand
00010F5D: A8 B0                                                 	test	al,0B0h
00010F5F: 0F 85 0B FA FE FF                                     	jnz	disallowed_combination_of_registers
00010F65: AA                                                    	stos	byte [edi]
                                                                      rex_prefix_ok:
00010F66: A0 A3 A2 01 00                                        	mov	al,[base_code]
00010F6B: AA                                                    	stos	byte [edi]
00010F6C: 3C 0F                                                 	cmp	al,0Fh
00010F6E: 75 0E                                                 	jne	instruction_code_ok
                                                                      store_extended_code:
00010F70: A0 A4 A2 01 00                                        	mov	al,[extended_code]
00010F75: AA                                                    	stos	byte [edi]
00010F76: 3C 38                                                 	cmp	al,38h
00010F78: 74 05                                                 	je	store_supplemental_code
00010F7A: 3C 3A                                                 	cmp	al,3Ah
00010F7C: 74 01                                                 	je	store_supplemental_code
                                                                      instruction_code_ok:
00010F7E: C3                                                    	ret
                                                                      store_supplemental_code:
00010F7F: A0 A5 A2 01 00                                        	mov	al,[supplemental_code]
00010F84: AA                                                    	stos	byte [edi]
00010F85: C3                                                    	ret
                                                                store_nomem_instruction:
00010F86: F6 05 A6 A2 01 00 10                                  	test	[postbyte_register],10000b
00010F8D: 74 0E                                                 	jz	nomem_reg_high_code_ok
00010F8F: 80 0D 9D A2 01 00 10                                  	or	[vex_required],10h
00010F96: 80 25 A6 A2 01 00 0F                                  	and	[postbyte_register],1111b
                                                                      nomem_reg_high_code_ok:
00010F9D: F6 05 A6 A2 01 00 08                                  	test	[postbyte_register],1000b
00010FA4: 74 0E                                                 	jz	nomem_reg_code_ok
00010FA6: 80 0D 9B A2 01 00 44                                  	or	[rex_prefix],44h
00010FAD: 80 25 A6 A2 01 00 07                                  	and	[postbyte_register],111b
                                                                      nomem_reg_code_ok:
00010FB4: F6 C3 10                                              	test	bl,10000b
00010FB7: 74 11                                                 	jz	nomem_rm_high_code_ok
00010FB9: 80 0D 9B A2 01 00 42                                  	or	[rex_prefix],42h
00010FC0: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00010FC7: 80 E3 0F                                              	and	bl,1111b
                                                                      nomem_rm_high_code_ok:
00010FCA: F6 C3 08                                              	test	bl,1000b
00010FCD: 74 0A                                                 	jz	nomem_rm_code_ok
00010FCF: 80 0D 9B A2 01 00 41                                  	or	[rex_prefix],41h
00010FD6: 80 E3 07                                              	and	bl,111b
                                                                      nomem_rm_code_ok:
00010FD9: 80 25 B1 A2 01 00 00                                  	and	[displacement_compression],0
00010FE0: E8 41 FF FF FF                                        	call	store_instruction_code
00010FE5: A0 A6 A2 01 00                                        	mov	al,[postbyte_register]
00010FEA: C0 E0 03                                              	shl	al,3
00010FED: 08 D8                                                 	or	al,bl
00010FEF: 0C C0                                                 	or	al,11000000b
00010FF1: AA                                                    	stos	byte [edi]
00010FF2: C3                                                    	ret
                                                                store_instruction:
00010FF3: 89 3D F0 A1 01 00                                     	mov	[current_offset],edi
00010FF9: 80 25 B1 A2 01 00 00                                  	and	[displacement_compression],0
00011000: F6 05 A6 A2 01 00 10                                  	test	[postbyte_register],10000b
00011007: 74 0E                                                 	jz	reg_high_code_ok
00011009: 80 0D 9D A2 01 00 10                                  	or	[vex_required],10h
00011010: 80 25 A6 A2 01 00 0F                                  	and	[postbyte_register],1111b
                                                                      reg_high_code_ok:
00011017: F6 05 A6 A2 01 00 08                                  	test	[postbyte_register],1000b
0001101E: 74 0E                                                 	jz	reg_code_ok
00011020: 80 0D 9B A2 01 00 44                                  	or	[rex_prefix],44h
00011027: 80 25 A6 A2 01 00 07                                  	and	[postbyte_register],111b
                                                                      reg_code_ok:
0001102E: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00011035: 75 28                                                 	jne	address_value_ok
00011037: 31 C0                                                 	xor	eax,eax
00011039: 0F BA E2 1F                                           	bt	edx,31
0001103D: 1B 05 2C A2 01 00                                     	sbb	eax,[address_high]
00011043: 74 1A                                                 	jz	address_value_ok
00011045: 83 3D 2C A2 01 00 00                                  	cmp	[address_high],0
0001104C: 75 0C                                                 	jne	address_value_out_of_range
0001104E: F6 C5 44                                              	test	ch,44h
00011051: 75 0C                                                 	jnz	address_value_ok
00011053: 66 F7 C3 80 80                                        	test	bx,8080h
00011058: 74 05                                                 	jz	address_value_ok
                                                                      address_value_out_of_range:
0001105A: E8 92 62 FF FF                                        	call	recoverable_overflow
                                                                      address_value_ok:
0001105F: E8 60 FE FF FF                                        	call	store_segment_prefix_if_necessary
00011064: F6 05 9D A2 01 00 04                                  	test	[vex_required],4
0001106B: 0F 85 41 01 00 00                                     	jnz	address_vsib
00011071: 66 09 DB                                              	or	bx,bx
00011074: 0F 84 0E 03 00 00                                     	jz	address_immediate
0001107A: 66 81 FB 00 98                                        	cmp	bx,9800h
0001107F: 0F 84 0B 04 00 00                                     	je	address_rip_based
00011085: 66 81 FB 00 94                                        	cmp	bx,9400h
0001108A: 0F 84 FD 03 00 00                                     	je	address_eip_based
00011090: 66 81 FB 00 99                                        	cmp	bx,9900h
00011095: 0F 84 0C 04 00 00                                     	je	address_relative
0001109B: 88 D8                                                 	mov	al,bl
0001109D: 08 F8                                                 	or	al,bh
0001109F: 24 F0                                                 	and	al,11110000b
000110A1: 3C 80                                                 	cmp	al,80h
000110A3: 0F 84 4F 01 00 00                                     	je	postbyte_64bit
000110A9: 3C 40                                                 	cmp	al,40h
000110AB: 0F 84 40 01 00 00                                     	je	postbyte_32bit
000110B1: 3C 20                                                 	cmp	al,20h
000110B3: 0F 85 DF F8 FE FF                                     	jne	invalid_address
000110B9: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
000110C0: 0F 84 96 F8 FE FF                                     	je	invalid_address_size
000110C6: E8 84 04 00 00                                        	call	address_16bit_prefix
000110CB: F6 C5 22                                              	test	ch,22h
000110CE: 0F 94 05 B1 A2 01 00                                  	setz	[displacement_compression]
000110D5: E8 4C FE FF FF                                        	call	store_instruction_code
000110DA: 38 FB                                                 	cmp	bl,bh
000110DC: 76 02                                                 	jbe	determine_16bit_address
000110DE: 86 DF                                                 	xchg	bl,bh
                                                                      determine_16bit_address:
000110E0: 66 81 FB 00 26                                        	cmp	bx,2600h
000110E5: 74 45                                                 	je	address_si
000110E7: 66 81 FB 00 27                                        	cmp	bx,2700h
000110EC: 74 42                                                 	je	address_di
000110EE: 66 81 FB 00 23                                        	cmp	bx,2300h
000110F3: 74 3F                                                 	je	address_bx
000110F5: 66 81 FB 00 25                                        	cmp	bx,2500h
000110FA: 74 3C                                                 	je	address_bp
000110FC: 66 81 FB 25 26                                        	cmp	bx,2625h
00011101: 74 21                                                 	je	address_bp_si
00011103: 66 81 FB 25 27                                        	cmp	bx,2725h
00011108: 74 1E                                                 	je	address_bp_di
0001110A: 66 81 FB 23 27                                        	cmp	bx,2723h
0001110F: 74 0F                                                 	je	address_bx_di
00011111: 66 81 FB 23 26                                        	cmp	bx,2623h
00011116: 0F 85 7C F8 FE FF                                     	jne	invalid_address
                                                                      address_bx_si:
0001111C: 30 C0                                                 	xor	al,al
0001111E: EB 1A                                                 	jmp	postbyte_16bit
                                                                      address_bx_di:
00011120: B0 01                                                 	mov	al,1
00011122: EB 16                                                 	jmp	postbyte_16bit
                                                                      address_bp_si:
00011124: B0 02                                                 	mov	al,10b
00011126: EB 12                                                 	jmp	postbyte_16bit
                                                                      address_bp_di:
00011128: B0 03                                                 	mov	al,11b
0001112A: EB 0E                                                 	jmp	postbyte_16bit
                                                                      address_si:
0001112C: B0 04                                                 	mov	al,100b
0001112E: EB 0A                                                 	jmp	postbyte_16bit
                                                                      address_di:
00011130: B0 05                                                 	mov	al,101b
00011132: EB 06                                                 	jmp	postbyte_16bit
                                                                      address_bx:
00011134: B0 07                                                 	mov	al,111b
00011136: EB 02                                                 	jmp	postbyte_16bit
                                                                      address_bp:
00011138: B0 06                                                 	mov	al,110b
                                                                      postbyte_16bit:
0001113A: F6 C5 22                                              	test	ch,22h
0001113D: 75 3D                                                 	jnz	address_16bit_value
0001113F: 08 ED                                                 	or	ch,ch
00011141: 0F 85 1F F8 FE FF                                     	jnz	address_sizes_do_not_agree
00011147: 81 FA 00 00 01 00                                     	cmp	edx,10000h
0001114D: 0F 8D 59 F8 FE FF                                     	jge	value_out_of_range
00011153: 81 FA 00 80 FF FF                                     	cmp	edx,-8000h
00011159: 0F 8C 4D F8 FE FF                                     	jl	value_out_of_range
0001115F: 66 09 D2                                              	or	dx,dx
00011162: 74 3D                                                 	jz	address
00011164: 80 3D B1 A2 01 00 02                                  	cmp	[displacement_compression],2
0001116B: 77 22                                                 	ja	address_8bit_value
0001116D: 74 0D                                                 	je	address_16bit_value
0001116F: 66 81 FA 80 00                                        	cmp	dx,80h
00011174: 72 19                                                 	jb	address_8bit_value
00011176: 66 83 FA 80                                           	cmp	dx,-80h
0001117A: 73 13                                                 	jae	address_8bit_value
                                                                      address_16bit_value:
0001117C: 0C 80                                                 	or	al,10000000b
0001117E: 8A 0D A6 A2 01 00                                     	mov	cl,[postbyte_register]
00011184: C0 E1 03                                              	shl	cl,3
00011187: 08 C8                                                 	or	al,cl
00011189: AA                                                    	stos	byte [edi]
0001118A: 89 D0                                                 	mov	eax,edx
0001118C: 66 AB                                                 	stos	word [edi]
0001118E: C3                                                    	ret
                                                                      address_8bit_value:
0001118F: 0C 40                                                 	or	al,01000000b
00011191: 8A 0D A6 A2 01 00                                     	mov	cl,[postbyte_register]
00011197: C0 E1 03                                              	shl	cl,3
0001119A: 08 C8                                                 	or	al,cl
0001119C: AA                                                    	stos	byte [edi]
0001119D: 88 D0                                                 	mov	al,dl
0001119F: AA                                                    	stos	byte [edi]
000111A0: C3                                                    	ret
                                                                      address:
000111A1: 3C 06                                                 	cmp	al,110b
000111A3: 74 EA                                                 	je	address_8bit_value
000111A5: 8A 0D A6 A2 01 00                                     	mov	cl,[postbyte_register]
000111AB: C0 E1 03                                              	shl	cl,3
000111AE: 08 C8                                                 	or	al,cl
000111B0: AA                                                    	stos	byte [edi]
000111B1: C3                                                    	ret
                                                                      address_vsib:
000111B2: 88 D8                                                 	mov	al,bl
000111B4: C0 E8 04                                              	shr	al,4
000111B7: A8 01                                                 	test	al,1
000111B9: 74 10                                                 	jz	vsib_high_code_ok
000111BB: 80 0D 9E A2 01 00 10                                  	or	[vex_register],10000b
000111C2: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
000111C9: 34 01                                                 	xor	al,1
                                                                      vsib_high_code_ok:
000111CB: 3C 06                                                 	cmp	al,6
000111CD: 74 08                                                 	je	vsib_index_ok
000111CF: 3C 0C                                                 	cmp	al,0Ch
000111D1: 0F 82 C1 F7 FE FF                                     	jb	invalid_address
                                                                      vsib_index_ok:
000111D7: 88 F8                                                 	mov	al,bh
000111D9: C0 E8 04                                              	shr	al,4
000111DC: 3C 04                                                 	cmp	al,4
000111DE: 74 11                                                 	je	postbyte_32bit
000111E0: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
000111E7: 74 1C                                                 	je	address_prefix_ok
000111E9: 84 C0                                                 	test	al,al
000111EB: 0F 85 A7 F7 FE FF                                     	jnz	invalid_address
                                                                      postbyte_32bit:
000111F1: E8 66 03 00 00                                        	call	address_32bit_prefix
000111F6: EB 0D                                                 	jmp	address_prefix_ok
                                                                      postbyte_64bit:
000111F8: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
000111FF: 0F 85 57 F7 FE FF                                     	jne	invalid_address_size
                                                                      address_prefix_ok:
00011205: 80 FB 44                                              	cmp	bl,44h
00011208: 0F 84 8A F7 FE FF                                     	je	invalid_address
0001120E: 80 FB 84                                              	cmp	bl,84h
00011211: 0F 84 81 F7 FE FF                                     	je	invalid_address
00011217: F6 C7 08                                              	test	bh,1000b
0001121A: 74 07                                                 	jz	base_code_ok
0001121C: 80 0D 9B A2 01 00 41                                  	or	[rex_prefix],41h
                                                                      base_code_ok:
00011223: F6 C3 08                                              	test	bl,1000b
00011226: 74 07                                                 	jz	index_code_ok
00011228: 80 0D 9B A2 01 00 42                                  	or	[rex_prefix],42h
                                                                      index_code_ok:
0001122F: F6 C5 CC                                              	test	ch,44h or 88h
00011232: 0F 94 05 B1 A2 01 00                                  	setz	[displacement_compression]
00011239: E8 E8 FC FF FF                                        	call	store_instruction_code
0001123E: 08 C9                                                 	or	cl,cl
00011240: 0F 84 DE 00 00 00                                     	jz	only_base_register
                                                                      base_and_index:
00011246: B0 04                                                 	mov	al,100b
00011248: 30 E4                                                 	xor	ah,ah
0001124A: 80 F9 01                                              	cmp	cl,1
0001124D: 74 17                                                 	je	scale_ok
0001124F: 80 F9 02                                              	cmp	cl,2
00011252: 74 0F                                                 	je	scale_1
00011254: 80 F9 04                                              	cmp	cl,4
00011257: 74 05                                                 	je	scale_2
00011259: 80 CC C0                                              	or	ah,11000000b
0001125C: EB 08                                                 	jmp	scale_ok
                                                                      scale_2:
0001125E: 80 CC 80                                              	or	ah,10000000b
00011261: EB 03                                                 	jmp	scale_ok
                                                                      scale_1:
00011263: 80 CC 40                                              	or	ah,01000000b
                                                                      scale_ok:
00011266: 08 FF                                                 	or	bh,bh
00011268: 74 70                                                 	jz	only_index_register
0001126A: 80 E3 07                                              	and	bl,111b
0001126D: C0 E3 03                                              	shl	bl,3
00011270: 08 DC                                                 	or	ah,bl
00011272: 80 E7 07                                              	and	bh,111b
00011275: 08 FC                                                 	or	ah,bh
                                                                      sib_ready:
00011277: F6 C5 CC                                              	test	ch,44h or 88h
0001127A: 75 29                                                 	jnz	sib_address_32bit_value
0001127C: 08 ED                                                 	or	ch,ch
0001127E: 0F 85 E2 F6 FE FF                                     	jnz	address_sizes_do_not_agree
00011284: 80 FF 05                                              	cmp	bh,5
00011287: 74 04                                                 	je	address_value
00011289: 09 D2                                                 	or	edx,edx
0001128B: 74 3F                                                 	jz	sib_address
                                                                      address_value:
0001128D: 80 3D B1 A2 01 00 02                                  	cmp	[displacement_compression],2
00011294: 77 23                                                 	ja	sib_address_8bit_value
00011296: 74 0D                                                 	je	sib_address_32bit_value
00011298: 81 FA 80 00 00 00                                     	cmp	edx,80h
0001129E: 72 19                                                 	jb	sib_address_8bit_value
000112A0: 83 FA 80                                              	cmp	edx,-80h
000112A3: 73 14                                                 	jnb	sib_address_8bit_value
                                                                      sib_address_32bit_value:
000112A5: 0C 80                                                 	or	al,10000000b
000112A7: 8A 0D A6 A2 01 00                                     	mov	cl,[postbyte_register]
000112AD: C0 E1 03                                              	shl	cl,3
000112B0: 08 C8                                                 	or	al,cl
000112B2: 66 AB                                                 	stos	word [edi]
000112B4: E9 17 01 00 00                                        	jmp	store_address_32bit_value
                                                                      sib_address_8bit_value:
000112B9: 0C 40                                                 	or	al,01000000b
000112BB: 8A 0D A6 A2 01 00                                     	mov	cl,[postbyte_register]
000112C1: C0 E1 03                                              	shl	cl,3
000112C4: 08 C8                                                 	or	al,cl
000112C6: 66 AB                                                 	stos	word [edi]
000112C8: 88 D0                                                 	mov	al,dl
000112CA: AA                                                    	stos	byte [edi]
000112CB: C3                                                    	ret
                                                                      sib_address:
000112CC: 8A 0D A6 A2 01 00                                     	mov	cl,[postbyte_register]
000112D2: C0 E1 03                                              	shl	cl,3
000112D5: 08 C8                                                 	or	al,cl
000112D7: 66 AB                                                 	stos	word [edi]
000112D9: C3                                                    	ret
                                                                      only_index_register:
000112DA: 80 CC 05                                              	or	ah,101b
000112DD: 80 E3 07                                              	and	bl,111b
000112E0: C0 E3 03                                              	shl	bl,3
000112E3: 08 DC                                                 	or	ah,bl
000112E5: 8A 0D A6 A2 01 00                                     	mov	cl,[postbyte_register]
000112EB: C0 E1 03                                              	shl	cl,3
000112EE: 08 C8                                                 	or	al,cl
000112F0: 66 AB                                                 	stos	word [edi]
000112F2: F6 C5 CC                                              	test	ch,44h or 88h
000112F5: 0F 85 D5 00 00 00                                     	jnz	store_address_32bit_value
000112FB: 08 ED                                                 	or	ch,ch
000112FD: 0F 85 59 F6 FE FF                                     	jnz	invalid_address_size
00011303: 80 3D B1 A2 01 00 02                                  	cmp	[displacement_compression],2
0001130A: 0F 86 C0 00 00 00                                     	jbe	store_address_32bit_value
00011310: 8B 15 30 A2 01 00                                     	mov	edx,[uncompressed_displacement]
00011316: E9 B5 00 00 00                                        	jmp	store_address_32bit_value
                                                                      zero_index_register:
0001131B: B3 04                                                 	mov	bl,4
0001131D: B1 01                                                 	mov	cl,1
0001131F: E9 22 FF FF FF                                        	jmp	base_and_index
                                                                      only_base_register:
00011324: 88 F8                                                 	mov	al,bh
00011326: 24 07                                                 	and	al,111b
00011328: 3C 04                                                 	cmp	al,4
0001132A: 74 EF                                                 	je	zero_index_register
0001132C: F6 C5 CC                                              	test	ch,44h or 88h
0001132F: 75 24                                                 	jnz	simple_address_32bit_value
00011331: 08 ED                                                 	or	ch,ch
00011333: 0F 85 2D F6 FE FF                                     	jnz	address_sizes_do_not_agree
00011339: 09 D2                                                 	or	edx,edx
0001133B: 74 3A                                                 	jz	simple_address
0001133D: 80 3D B1 A2 01 00 02                                  	cmp	[displacement_compression],2
00011344: 77 1F                                                 	ja	simple_address_8bit_value
00011346: 74 0D                                                 	je	simple_address_32bit_value
00011348: 81 FA 80 00 00 00                                     	cmp	edx,80h
0001134E: 72 15                                                 	jb	simple_address_8bit_value
00011350: 83 FA 80                                              	cmp	edx,-80h
00011353: 73 10                                                 	jnb	simple_address_8bit_value
                                                                      simple_address_32bit_value:
00011355: 0C 80                                                 	or	al,10000000b
00011357: 8A 0D A6 A2 01 00                                     	mov	cl,[postbyte_register]
0001135D: C0 E1 03                                              	shl	cl,3
00011360: 08 C8                                                 	or	al,cl
00011362: AA                                                    	stos	byte [edi]
00011363: EB 6B                                                 	jmp	store_address_32bit_value
                                                                      simple_address_8bit_value:
00011365: 0C 40                                                 	or	al,01000000b
00011367: 8A 0D A6 A2 01 00                                     	mov	cl,[postbyte_register]
0001136D: C0 E1 03                                              	shl	cl,3
00011370: 08 C8                                                 	or	al,cl
00011372: AA                                                    	stos	byte [edi]
00011373: 88 D0                                                 	mov	al,dl
00011375: AA                                                    	stos	byte [edi]
00011376: C3                                                    	ret
                                                                      simple_address:
00011377: 3C 05                                                 	cmp	al,5
00011379: 74 EA                                                 	je	simple_address_8bit_value
0001137B: 8A 0D A6 A2 01 00                                     	mov	cl,[postbyte_register]
00011381: C0 E1 03                                              	shl	cl,3
00011384: 08 C8                                                 	or	al,cl
00011386: AA                                                    	stos	byte [edi]
00011387: C3                                                    	ret
                                                                      address_immediate:
00011388: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0001138F: 0F 84 A7 00 00 00                                     	je	address_immediate_sib
00011395: F6 C5 CC                                              	test	ch,44h or 88h
00011398: 75 1E                                                 	jnz	address_immediate_32bit
0001139A: F6 C5 22                                              	test	ch,22h
0001139D: 0F 85 77 01 00 00                                     	jnz	address_immediate_16bit
000113A3: 08 ED                                                 	or	ch,ch
000113A5: 0F 85 B1 F5 FE FF                                     	jnz	invalid_address_size
000113AB: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
000113B2: 0F 84 47 01 00 00                                     	je	addressing_16bit
                                                                      address_immediate_32bit:
000113B8: E8 9F 01 00 00                                        	call	address_32bit_prefix
000113BD: E8 64 FB FF FF                                        	call	store_instruction_code
                                                                      store_immediate_address:
000113C2: B0 05                                                 	mov	al,101b
000113C4: 8A 0D A6 A2 01 00                                     	mov	cl,[postbyte_register]
000113CA: C0 E1 03                                              	shl	cl,3
000113CD: 08 C8                                                 	or	al,cl
000113CF: AA                                                    	stos	byte [edi]
                                                                      store_address_32bit_value:
000113D0: F6 C5 F0                                              	test	ch,0F0h
000113D3: 74 2D                                                 	jz	address_32bit_relocation_ok
000113D5: 89 C8                                                 	mov	eax,ecx
000113D7: C1 E8 10                                              	shr	eax,16
000113DA: 3C 04                                                 	cmp	al,4
000113DC: 75 02                                                 	jne	address_32bit_relocation
000113DE: B0 02                                                 	mov	al,2
                                                                      address_32bit_relocation:
000113E0: 86 05 B4 A2 01 00                                     	xchg	[value_type],al
000113E6: 8B 1D 28 A2 01 00                                     	mov	ebx,[address_symbol]
000113EC: 87 1D 24 A2 01 00                                     	xchg	ebx,[symbol_identifier]
000113F2: E8 EB 6F FF FF                                        	call	mark_relocation
000113F7: A2 B4 A2 01 00                                        	mov	[value_type],al
000113FC: 89 1D 24 A2 01 00                                     	mov	[symbol_identifier],ebx
                                                                      address_32bit_relocation_ok:
00011402: 89 D0                                                 	mov	eax,edx
00011404: AB                                                    	stos	dword [edi]
00011405: C3                                                    	ret
                                                                      store_address_64bit_value:
00011406: F6 C5 F0                                              	test	ch,0F0h
00011409: 74 27                                                 	jz	address_64bit_relocation_ok
0001140B: 89 C8                                                 	mov	eax,ecx
0001140D: C1 E8 10                                              	shr	eax,16
00011410: 86 05 B4 A2 01 00                                     	xchg	[value_type],al
00011416: 8B 1D 28 A2 01 00                                     	mov	ebx,[address_symbol]
0001141C: 87 1D 24 A2 01 00                                     	xchg	ebx,[symbol_identifier]
00011422: E8 BB 6F FF FF                                        	call	mark_relocation
00011427: A2 B4 A2 01 00                                        	mov	[value_type],al
0001142C: 89 1D 24 A2 01 00                                     	mov	[symbol_identifier],ebx
                                                                      address_64bit_relocation_ok:
00011432: 89 D0                                                 	mov	eax,edx
00011434: AB                                                    	stos	dword [edi]
00011435: A1 2C A2 01 00                                        	mov	eax,[address_high]
0001143A: AB                                                    	stos	dword [edi]
0001143B: C3                                                    	ret
                                                                      address_immediate_sib:
0001143C: F6 C5 44                                              	test	ch,44h
0001143F: 75 35                                                 	jnz	address_immediate_sib_32bit
00011441: F6 C5 77                                              	test	ch,not 88h
00011444: 0F 85 12 F5 FE FF                                     	jnz	invalid_address_size
0001144A: F7 C2 00 00 00 80                                     	test	edx,80000000h
00011450: 74 09                                                 	jz	address_immediate_sib_store
00011452: 83 3D 2C A2 01 00 00                                  	cmp	[address_high],0
00011459: 74 2B                                                 	je	address_immediate_sib_nosignextend
                                                                      address_immediate_sib_store:
0001145B: E8 C6 FA FF FF                                        	call	store_instruction_code
00011460: B0 04                                                 	mov	al,100b
00011462: B4 25                                                 	mov	ah,100101b
00011464: 8A 0D A6 A2 01 00                                     	mov	cl,[postbyte_register]
0001146A: C0 E1 03                                              	shl	cl,3
0001146D: 08 C8                                                 	or	al,cl
0001146F: 66 AB                                                 	stos	word [edi]
00011471: E9 5A FF FF FF                                        	jmp	store_address_32bit_value
                                                                      address_immediate_sib_32bit:
00011476: F7 C1 00 00 FF 00                                     	test	ecx,0FF0000h
0001147C: 75 08                                                 	jnz	address_immediate_sib_nosignextend
0001147E: F7 C2 00 00 00 80                                     	test	edx,80000000h
00011484: 74 D5                                                 	jz	address_immediate_sib_store
                                                                      address_immediate_sib_nosignextend:
00011486: E8 D1 00 00 00                                        	call	address_32bit_prefix
0001148B: EB CE                                                 	jmp	address_immediate_sib_store
                                                                      address_eip_based:
0001148D: B0 67                                                 	mov	al,67h
0001148F: AA                                                    	stos	byte [edi]
                                                                      address_rip_based:
00011490: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00011497: 0F 85 FB F4 FE FF                                     	jne	invalid_address
0001149D: E8 84 FA FF FF                                        	call	store_instruction_code
000114A2: E9 1B FF FF FF                                        	jmp	store_immediate_address
                                                                      address_relative:
000114A7: E8 7A FA FF FF                                        	call	store_instruction_code
000114AC: 0F B6 05 9F A2 01 00                                  	movzx	eax,[immediate_size]
000114B3: 01 F8                                                 	add	eax,edi
000114B5: 2B 05 F0 A1 01 00                                     	sub	eax,[current_offset]
000114BB: 83 C0 05                                              	add	eax,5
000114BE: 29 C2                                                 	sub	edx,eax
000114C0: 71 05                                                 	jno	address_relative_ok
000114C2: E8 2A 5E FF FF                                        	call	recoverable_overflow
                                                                      address_relative_ok:
000114C7: B0 05                                                 	mov	al,101b
000114C9: 8A 0D A6 A2 01 00                                     	mov	cl,[postbyte_register]
000114CF: C0 E1 03                                              	shl	cl,3
000114D2: 08 C8                                                 	or	al,cl
000114D4: AA                                                    	stos	byte [edi]
000114D5: C1 E9 10                                              	shr	ecx,16
000114D8: 86 0D B4 A2 01 00                                     	xchg	[value_type],cl
000114DE: 8B 1D 28 A2 01 00                                     	mov	ebx,[address_symbol]
000114E4: 87 1D 24 A2 01 00                                     	xchg	ebx,[symbol_identifier]
000114EA: 89 D0                                                 	mov	eax,edx
000114EC: E8 F1 6E FF FF                                        	call	mark_relocation
000114F1: 88 0D B4 A2 01 00                                     	mov	[value_type],cl
000114F7: 89 1D 24 A2 01 00                                     	mov	[symbol_identifier],ebx
000114FD: AB                                                    	stos	dword [edi]
000114FE: C3                                                    	ret
                                                                      addressing_16bit:
000114FF: 81 FA 00 00 01 00                                     	cmp	edx,10000h
00011505: 0F 8D AD FE FF FF                                     	jge	address_immediate_32bit
0001150B: 81 FA 00 80 FF FF                                     	cmp	edx,-8000h
00011511: 0F 8C A1 FE FF FF                                     	jl	address_immediate_32bit
00011517: 0F B7 D2                                              	movzx	edx,dx
                                                                      address_immediate_16bit:
0001151A: E8 30 00 00 00                                        	call	address_16bit_prefix
0001151F: E8 02 FA FF FF                                        	call	store_instruction_code
00011524: B0 06                                                 	mov	al,110b
00011526: 8A 0D A6 A2 01 00                                     	mov	cl,[postbyte_register]
0001152C: C0 E1 03                                              	shl	cl,3
0001152F: 08 C8                                                 	or	al,cl
00011531: AA                                                    	stos	byte [edi]
00011532: 89 D0                                                 	mov	eax,edx
00011534: 66 AB                                                 	stos	word [edi]
00011536: 81 FA 00 00 01 00                                     	cmp	edx,10000h
0001153C: 0F 8D 6A F4 FE FF                                     	jge	value_out_of_range
00011542: 81 FA 00 80 FF FF                                     	cmp	edx,-8000h
00011548: 0F 8C 5E F4 FE FF                                     	jl	value_out_of_range
0001154E: C3                                                    	ret
                                                                      address_16bit_prefix:
0001154F: 80 3D BE A2 01 00 10                                  	cmp	[code_type],16
00011556: 74 10                                                 	je	instruction_prefix_ok
00011558: B0 67                                                 	mov	al,67h
0001155A: AA                                                    	stos	byte [edi]
0001155B: C3                                                    	ret
                                                                      address_32bit_prefix:
0001155C: 80 3D BE A2 01 00 20                                  	cmp	[code_type],32
00011563: 74 03                                                 	je	instruction_prefix_ok
00011565: B0 67                                                 	mov	al,67h
00011567: AA                                                    	stos	byte [edi]
                                                                      instruction_prefix_ok:
00011568: C3                                                    	ret
                                                                store_instruction_with_imm8:
00011569: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
00011570: E8 7E FA FF FF                                        	call	store_instruction
00011575: A0 F4 A1 01 00                                        	mov	al,byte [value]
0001157A: AA                                                    	stos	byte [edi]
0001157B: C3                                                    	ret
                                                                store_instruction_with_imm16:
0001157C: C6 05 9F A2 01 00 02                                  	mov	[immediate_size],2
00011583: E8 6B FA FF FF                                        	call	store_instruction
00011588: 66 A1 F4 A1 01 00                                     	mov	ax,word [value]
0001158E: E8 4F 6E FF FF                                        	call	mark_relocation
00011593: 66 AB                                                 	stos	word [edi]
00011595: C3                                                    	ret
                                                                store_instruction_with_imm32:
00011596: C6 05 9F A2 01 00 04                                  	mov	[immediate_size],4
0001159D: E8 51 FA FF FF                                        	call	store_instruction
000115A2: A1 F4 A1 01 00                                        	mov	eax,dword [value]
000115A7: E8 36 6E FF FF                                        	call	mark_relocation
000115AC: AB                                                    	stos	dword [edi]
000115AD: C3                                                    	ret
                                                                
                                                                include '..\avx.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                avx_single_source_pd_instruction_er_evex:
000115AE: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
                                                                avx_single_source_pd_instruction_er:
000115B5: 80 0D 99 A2 01 00 0E                                  	or	[operand_flags],2+4+8
000115BC: EB 27                                                 	jmp	avx_pd_instruction
                                                                avx_single_source_pd_instruction_sae_evex:
000115BE: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
000115C5: 80 0D 99 A2 01 00 06                                  	or	[operand_flags],2+4
000115CC: EB 17                                                 	jmp	avx_pd_instruction
                                                                avx_pd_instruction_imm8:
000115CE: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
000115D5: EB 0E                                                 	jmp	avx_pd_instruction
                                                                avx_pd_instruction_er:
000115D7: 80 0D 99 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_pd_instruction_sae:
000115DE: 80 0D 99 A2 01 00 04                                  	or	[operand_flags],4
                                                                avx_pd_instruction:
000115E5: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
000115EC: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
000115F3: 66 B9 00 08                                           	mov	cx,0800h
000115F7: E9 E3 01 00 00                                        	jmp	avx_instruction_with_broadcast
                                                                avx_pd_instruction_38_evex:
000115FC: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00011603: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00011608: B0 38                                                 	mov	al,38h
0001160A: EB D9                                                 	jmp	avx_pd_instruction
                                                                avx_cvtps2dq_instruction:
0001160C: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00011613: EB 0E                                                 	jmp	avx_single_source_ps_instruction_er
                                                                avx_cvtudq2ps_instruction:
00011615: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
                                                                avx_single_source_ps_instruction_er_evex:
0001161C: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
                                                                avx_single_source_ps_instruction_er:
00011623: 80 0D 99 A2 01 00 0E                                  	or	[operand_flags],2+4+8
0001162A: EB 27                                                 	jmp	avx_ps_instruction
                                                                avx_single_source_ps_instruction_noevex:
0001162C: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
00011633: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
0001163A: EB 17                                                 	jmp	avx_ps_instruction
                                                                avx_ps_instruction_imm8:
0001163C: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
00011643: EB 0E                                                 	jmp	avx_ps_instruction
                                                                avx_ps_instruction_er:
00011645: 80 0D 99 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_ps_instruction_sae:
0001164C: 80 0D 99 A2 01 00 04                                  	or	[operand_flags],4
                                                                avx_ps_instruction:
00011653: 66 B9 00 04                                           	mov	cx,0400h
00011657: E9 83 01 00 00                                        	jmp	avx_instruction_with_broadcast
                                                                avx_ps_instruction_66_38_evex:
0001165C: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00011663: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
0001166A: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
0001166F: B0 38                                                 	mov	al,38h
00011671: EB E0                                                 	jmp	avx_ps_instruction
                                                                avx_sd_instruction_er:
00011673: 80 0D 99 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_sd_instruction_sae:
0001167A: 80 0D 99 A2 01 00 04                                  	or	[operand_flags],4
                                                                avx_sd_instruction:
00011681: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
00011688: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
0001168F: B1 08                                                 	mov	cl,8
00011691: E9 47 01 00 00                                        	jmp	avx_instruction
                                                                avx_ss_instruction_er:
00011696: 80 0D 99 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_ss_instruction_sae:
0001169D: 80 0D 99 A2 01 00 04                                  	or	[operand_flags],4
                                                                avx_ss_instruction:
000116A4: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
000116AB: B1 04                                                 	mov	cl,4
000116AD: E9 2B 01 00 00                                        	jmp	avx_instruction
                                                                avx_ss_instruction_noevex:
000116B2: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
000116B9: EB E9                                                 	jmp	avx_ss_instruction
                                                                avx_single_source_q_instruction_38_evex:
000116BB: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx_q_instruction_38_evex:
000116C2: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
                                                                avx_q_instruction_38:
000116C9: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
000116CE: B0 38                                                 	mov	al,38h
000116D0: EB 37                                                 	jmp	avx_q_instruction
                                                                avx_q_instruction_38_w1_evex:
000116D2: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
                                                                avx_q_instruction_38_w1:
000116D9: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
000116E0: EB E7                                                 	jmp	avx_q_instruction_38
                                                                avx_q_instruction_3a_imm8_w1:
000116E2: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
000116E9: EB 07                                                 	jmp	avx_q_instruction_3a_imm8
                                                                avx_q_instruction_3a_imm8_evex:
000116EB: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
                                                                avx_q_instruction_3a_imm8:
000116F2: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
000116F9: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
000116FE: B0 3A                                                 	mov	al,3Ah
00011700: EB 07                                                 	jmp	avx_q_instruction
                                                                avx_q_instruction_evex:
00011702: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
                                                                avx_q_instruction:
00011709: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
00011710: B5 08                                                 	mov	ch,8
00011712: E9 87 00 00 00                                        	jmp	avx_pi_instruction
                                                                avx_single_source_d_instruction_38_evex_w1:
00011717: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx_single_source_d_instruction_38_evex:
0001171E: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
                                                                avx_single_source_d_instruction_38:
00011725: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
0001172C: EB 07                                                 	jmp	avx_d_instruction_38
                                                                avx_d_instruction_38_evex:
0001172E: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
                                                                avx_d_instruction_38:
00011735: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
0001173A: B0 38                                                 	mov	al,38h
0001173C: EB 2E                                                 	jmp	avx_d_instruction
                                                                avx_d_instruction_3a_imm8_evex:
0001173E: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
00011745: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
0001174C: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00011751: B0 3A                                                 	mov	al,3Ah
00011753: EB 17                                                 	jmp	avx_d_instruction
                                                                avx_single_source_d_instruction_imm8:
00011755: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
0001175C: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
00011763: EB 07                                                 	jmp	avx_d_instruction
                                                                avx_d_instruction_evex:
00011765: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
                                                                avx_d_instruction:
0001176C: B5 04                                                 	mov	ch,4
0001176E: EB 2E                                                 	jmp	avx_pi_instruction
                                                                avx_bw_instruction_3a_imm8_w1_evex:
00011770: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx_bw_instruction_3a_imm8_evex:
00011777: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
0001177E: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00011785: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
0001178A: B0 3A                                                 	mov	al,3Ah
0001178C: EB 0E                                                 	jmp	avx_bw_instruction
                                                                avx_single_source_bw_instruction_38:
0001178E: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx_bw_instruction_38:
00011795: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
0001179A: B0 38                                                 	mov	al,38h
                                                                avx_bw_instruction:
0001179C: 30 ED                                                 	xor	ch,ch
                                                                      avx_pi_instruction:
0001179E: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
000117A5: 30 C9                                                 	xor	cl,cl
000117A7: EB 36                                                 	jmp	avx_instruction_with_broadcast
                                                                avx_bw_instruction_38_w1_evex:
000117A9: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx_bw_instruction_38_evex:
000117B0: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
000117B7: EB DC                                                 	jmp	avx_bw_instruction_38
                                                                avx_pd_instruction_noevex:
000117B9: 30 C9                                                 	xor	cl,cl
000117BB: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
000117C2: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
000117C9: EB 12                                                 	jmp	avx_instruction
                                                                avx_ps_instruction_noevex:
000117CB: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
000117D2: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
000117D9: 30 C9                                                 	xor	cl,cl
000117DB: EB 00                                                 	jmp	avx_instruction
                                                                avx_instruction:
000117DD: 30 ED                                                 	xor	ch,ch
                                                                      avx_instruction_with_broadcast:
000117DF: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
000117E5: 88 2D A1 A2 01 00                                     	mov	[broadcast_size],ch
000117EB: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
000117F2: A2 A4 A2 01 00                                        	mov	[extended_code],al
                                                                      avx_xop_common:
000117F7: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
000117FE: AC                                                    	lods	byte [esi]
000117FF: E8 26 F5 FF FF                                        	call	get_size_operator
00011804: 3C 10                                                 	cmp	al,10h
00011806: 0F 85 28 F1 FE FF                                     	jne	invalid_operand
                                                                      avx_reg:
0001180C: AC                                                    	lods	byte [esi]
0001180D: E8 30 29 00 00                                        	call	convert_avx_register
00011812: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00011817: E8 B6 02 00 00                                        	call	take_avx512_mask
                                                                      avx_vex_reg:
0001181C: F6 05 99 A2 01 00 02                                  	test	[operand_flags],2
00011823: 75 13                                                 	jnz	avx_vex_reg_ok
00011825: AC                                                    	lods	byte [esi]
00011826: 3C 2C                                                 	cmp	al,','
00011828: 0F 85 06 F1 FE FF                                     	jne	invalid_operand
0001182E: E8 00 29 00 00                                        	call	take_avx_register
00011833: A2 9E A2 01 00                                        	mov	[vex_register],al
                                                                      avx_vex_reg_ok:
00011838: A0 A9 A2 01 00                                        	mov	al,[mmx_size]
0001183D: 08 C0                                                 	or	al,al
0001183F: 74 1D                                                 	jz	avx_regs_size_ok
00011841: 8A 25 98 A2 01 00                                     	mov	ah,[operand_size]
00011847: 08 E4                                                 	or	ah,ah
00011849: 74 13                                                 	jz	avx_regs_size_ok
0001184B: 38 E0                                                 	cmp	al,ah
0001184D: 74 0F                                                 	je	avx_regs_size_ok
0001184F: 0F 87 E9 F0 FE FF                                     	ja	invalid_operand_size
00011855: 80 FC 10                                              	cmp	ah,16
00011858: 0F 85 E0 F0 FE FF                                     	jne	invalid_operand_size
                                                                      avx_regs_size_ok:
0001185E: AC                                                    	lods	byte [esi]
0001185F: 3C 2C                                                 	cmp	al,','
00011861: 0F 85 CD F0 FE FF                                     	jne	invalid_operand
                                                                      avx_regs_rm:
00011867: E8 FD 00 00 00                                        	call	take_avx_rm
0001186C: 72 59                                                 	jc	avx_regs_reg
0001186E: A0 9F A2 01 00                                        	mov	al,[immediate_size]
00011873: 3C 01                                                 	cmp	al,1
00011875: 0F 84 0A D4 FF FF                                     	je	mmx_imm8
0001187B: 0F 82 99 9C FF FF                                     	jb	instruction_ready
00011881: 3C FC                                                 	cmp	al,-4
00011883: 0F 84 B6 DA FF FF                                     	je	sse_cmp_mem_ok
00011889: 80 3E 2C                                              	cmp	byte [esi],','
0001188C: 0F 85 A2 F0 FE FF                                     	jne	invalid_operand
00011892: 46                                                    	inc	esi
00011893: E8 9B 28 00 00                                        	call	take_avx_register
00011898: C0 E0 04                                              	shl	al,4
0001189B: 0F 82 93 F0 FE FF                                     	jc	invalid_operand
000118A1: 08 05 F4 A1 01 00                                     	or	byte [value],al
000118A7: A8 80                                                 	test	al,80h
000118A9: 74 0D                                                 	jz	avx_regs_mem_reg_store
000118AB: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
000118B2: 0F 85 7C F0 FE FF                                     	jne	invalid_operand
                                                                      avx_regs_mem_reg_store:
000118B8: E8 E0 01 00 00                                        	call	take_imm4_if_needed
000118BD: E8 A7 FC FF FF                                        	call	store_instruction_with_imm8
000118C2: E9 A9 36 FF FF                                        	jmp	instruction_assembled
                                                                      avx_regs_reg:
000118C7: 88 C3                                                 	mov	bl,al
000118C9: E8 84 02 00 00                                        	call	take_avx512_rounding
000118CE: A0 9F A2 01 00                                        	mov	al,[immediate_size]
000118D3: 3C 01                                                 	cmp	al,1
000118D5: 0F 84 F2 D3 FF FF                                     	je	mmx_nomem_imm8
000118DB: 0F 82 14 9E FF FF                                     	jb	nomem_instruction_ready
000118E1: 3C FC                                                 	cmp	al,-4
000118E3: 0F 84 D4 DA FF FF                                     	je	sse_cmp_nomem_ok
000118E9: AC                                                    	lods	byte [esi]
000118EA: 3C 2C                                                 	cmp	al,','
000118EC: 0F 85 42 F0 FE FF                                     	jne	invalid_operand
000118F2: 88 D8                                                 	mov	al,bl
000118F4: C0 E0 04                                              	shl	al,4
000118F7: 0F 82 37 F0 FE FF                                     	jc	invalid_operand
000118FD: 08 05 F4 A1 01 00                                     	or	byte [value],al
00011903: A8 80                                                 	test	al,80h
00011905: 74 0D                                                 	jz	avx_regs_reg_
00011907: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0001190E: 0F 85 20 F0 FE FF                                     	jne	invalid_operand
                                                                      avx_regs_reg_:
00011914: E8 50 00 00 00                                        	call	take_avx_rm
00011919: 72 23                                                 	jc	avx_regs_reg_reg
0001191B: 80 3D 9F A2 01 00 FE                                  	cmp	[immediate_size],-2
00011922: 0F 8F 0C F0 FE FF                                     	jg	invalid_operand
00011928: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
0001192F: E8 69 01 00 00                                        	call	take_imm4_if_needed
00011934: E8 30 FC FF FF                                        	call	store_instruction_with_imm8
00011939: E9 32 36 FF FF                                        	jmp	instruction_assembled
                                                                      avx_regs_reg_reg:
0001193E: C0 E0 04                                              	shl	al,4
00011941: 0F 82 ED EF FE FF                                     	jc	invalid_operand
00011947: 80 25 F4 A1 01 00 0F                                  	and	byte [value],1111b
0001194E: 08 05 F4 A1 01 00                                     	or	byte [value],al
00011954: E8 44 01 00 00                                        	call	take_imm4_if_needed
00011959: E8 28 F6 FF FF                                        	call	store_nomem_instruction
0001195E: A0 F4 A1 01 00                                        	mov	al,byte [value]
00011963: AA                                                    	stos	byte [edi]
00011964: E9 07 36 FF FF                                        	jmp	instruction_assembled
                                                                      take_avx_rm:
00011969: 30 C9                                                 	xor	cl,cl
0001196B: 86 0D 98 A2 01 00                                     	xchg	cl,[operand_size]
00011971: AC                                                    	lods	byte [esi]
00011972: E8 B3 F3 FF FF                                        	call	get_size_operator
00011977: 3C 5B                                                 	cmp	al,'['
00011979: 74 35                                                 	je	take_avx_mem
0001197B: 3C 10                                                 	cmp	al,10h
0001197D: 0F 85 B1 EF FE FF                                     	jne	invalid_operand
00011983: 88 0D 98 A2 01 00                                     	mov	[operand_size],cl
00011989: AC                                                    	lods	byte [esi]
0001198A: E8 B3 27 00 00                                        	call	convert_avx_register
0001198F: 08 C9                                                 	or	cl,cl
00011991: 75 1B                                                 	jnz	avx_reg_ok
00011993: 0A 0D A9 A2 01 00                                     	or	cl,[mmx_size]
00011999: 74 13                                                 	jz	avx_reg_ok
0001199B: 38 CC                                                 	cmp	ah,cl
0001199D: 74 0F                                                 	je	avx_reg_ok
0001199F: 0F 82 99 EF FE FF                                     	jb	invalid_operand_size
000119A5: 80 FC 10                                              	cmp	ah,16
000119A8: 0F 85 90 EF FE FF                                     	jne	invalid_operand_size
                                                                      avx_reg_ok:
000119AE: F9                                                    	stc
000119AF: C3                                                    	ret
                                                                      take_avx_mem:
000119B0: 51                                                    	push	ecx
000119B1: E8 D0 F3 FF FF                                        	call	get_address
000119B6: 80 3E 7B                                              	cmp	byte [esi],'{'
000119B9: 0F 85 80 00 00 00                                     	jne	avx_mem_ok
000119BF: 46                                                    	inc	esi
000119C0: AC                                                    	lods	byte [esi]
000119C1: 3C 1F                                                 	cmp	al,1Fh
000119C3: 0F 85 6B EF FE FF                                     	jne	invalid_operand
000119C9: 8A 06                                                 	mov	al,[esi]
000119CB: C0 E8 04                                              	shr	al,4
000119CE: 3C 01                                                 	cmp	al,1
000119D0: 0F 85 5E EF FE FF                                     	jne	invalid_operand
000119D6: A0 A9 A2 01 00                                        	mov	al,[mmx_size]
000119DB: 08 C0                                                 	or	al,al
000119DD: 75 26                                                 	jnz	avx_mem_broadcast_check
000119DF: 8B 04 24                                              	mov	eax,[esp]
000119E2: 08 C0                                                 	or	al,al
000119E4: 75 1F                                                 	jnz	avx_mem_broadcast_check
000119E6: A0 A1 A2 01 00                                        	mov	al,[broadcast_size]
000119EB: A2 A9 A2 01 00                                        	mov	[mmx_size],al
000119F0: 88 CC                                                 	mov	ah,cl
000119F2: AC                                                    	lods	byte [esi]
000119F3: 24 0F                                                 	and	al,1111b
000119F5: 88 C1                                                 	mov	cl,al
000119F7: A0 A1 A2 01 00                                        	mov	al,[broadcast_size]
000119FC: D2 E0                                                 	shl	al,cl
000119FE: 88 04 24                                              	mov	[esp],al
00011A01: 88 E1                                                 	mov	cl,ah
00011A03: EB 2A                                                 	jmp	avx_mem_broadcast_ok
                                                                      avx_mem_broadcast_check:
00011A05: 0F BC C0                                              	bsf	eax,eax
00011A08: 86 05 A1 A2 01 00                                     	xchg	al,[broadcast_size]
00011A0E: A2 A9 A2 01 00                                        	mov	[mmx_size],al
00011A13: 0F BC C0                                              	bsf	eax,eax
00011A16: 0F 84 18 EF FE FF                                     	jz	invalid_operand
00011A1C: 8A 25 A1 A2 01 00                                     	mov	ah,[broadcast_size]
00011A22: 28 C4                                                 	sub	ah,al
00011A24: AC                                                    	lods	byte [esi]
00011A25: 24 0F                                                 	and	al,1111b
00011A27: 38 E0                                                 	cmp	al,ah
00011A29: 0F 85 0F EF FE FF                                     	jne	invalid_operand_size
                                                                      avx_mem_broadcast_ok:
00011A2F: 80 0D 9D A2 01 00 40                                  	or	[vex_required],40h
00011A36: AC                                                    	lods	byte [esi]
00011A37: 3C 7D                                                 	cmp	al,'}'
00011A39: 0F 85 F5 EE FE FF                                     	jne	invalid_operand
                                                                      avx_mem_ok:
00011A3F: 58                                                    	pop	eax
00011A40: 08 C0                                                 	or	al,al
00011A42: 74 21                                                 	jz	avx_mem_size_deciding
00011A44: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
00011A4A: 80 3D A9 A2 01 00 00                                  	cmp	[mmx_size],0
00011A51: 75 39                                                 	jne	avx_mem_size_enforced
00011A53: 08 C0                                                 	or	al,al
00011A55: 74 0C                                                 	jz	avx_mem_size_ok
00011A57: 3A 05 98 A2 01 00                                     	cmp	al,[operand_size]
00011A5D: 0F 85 EF EE FE FF                                     	jne	operand_sizes_do_not_match
                                                                      avx_mem_size_ok:
00011A63: F8                                                    	clc
00011A64: C3                                                    	ret
                                                                      avx_mem_size_deciding:
00011A65: A0 98 A2 01 00                                        	mov	al,[operand_size]
00011A6A: 80 3D A9 A2 01 00 00                                  	cmp	[mmx_size],0
00011A71: 75 19                                                 	jne	avx_mem_size_enforced
00011A73: 3C 10                                                 	cmp	al,16
00011A75: 74 EC                                                 	je	avx_mem_size_ok
00011A77: 3C 20                                                 	cmp	al,32
00011A79: 74 E8                                                 	je	avx_mem_size_ok
00011A7B: 3C 40                                                 	cmp	al,64
00011A7D: 74 E4                                                 	je	avx_mem_size_ok
00011A7F: 08 C0                                                 	or	al,al
00011A81: 0F 85 B7 EE FE FF                                     	jnz	invalid_operand_size
00011A87: E8 D8 9D FF FF                                        	call	recoverable_unknown_size
                                                                      avx_mem_size_enforced:
00011A8C: 08 C0                                                 	or	al,al
00011A8E: 74 D3                                                 	jz	avx_mem_size_ok
00011A90: 3A 05 A9 A2 01 00                                     	cmp	al,[mmx_size]
00011A96: 74 CB                                                 	je	avx_mem_size_ok
00011A98: E9 A1 EE FE FF                                        	jmp	invalid_operand_size
                                                                      take_imm4_if_needed:
00011A9D: 80 3D 9F A2 01 00 FD                                  	cmp	[immediate_size],-3
00011AA4: 75 2B                                                 	jne	imm4_ok
00011AA6: 53 51 52                                              	push	ebx ecx edx
00011AA9: AC                                                    	lods	byte [esi]
00011AAA: 3C 2C                                                 	cmp	al,','
00011AAC: 0F 85 82 EE FE FF                                     	jne	invalid_operand
00011AB2: AC                                                    	lods	byte [esi]
00011AB3: 3C 28                                                 	cmp	al,'('
00011AB5: 0F 85 79 EE FE FF                                     	jne	invalid_operand
00011ABB: E8 ED 57 FF FF                                        	call	get_byte_value
00011AC0: A8 F0                                                 	test	al,11110000b
00011AC2: 0F 85 E4 EE FE FF                                     	jnz	value_out_of_range
00011AC8: 08 05 F4 A1 01 00                                     	or	byte [value],al
00011ACE: 5A 59 5B                                              	pop	edx ecx ebx
                                                                      imm4_ok:
00011AD1: C3                                                    	ret
                                                                      take_avx512_mask:
00011AD2: 80 3E 7B                                              	cmp	byte [esi],'{'
00011AD5: 75 7A                                                 	jne	avx512_masking_ok
00011AD7: F6 05 99 A2 01 00 10                                  	test	[operand_flags],10h
00011ADE: 0F 85 50 EE FE FF                                     	jnz	invalid_operand
00011AE4: 46                                                    	inc	esi
00011AE5: AC                                                    	lods	byte [esi]
00011AE6: 3C 14                                                 	cmp	al,14h
00011AE8: 0F 85 46 EE FE FF                                     	jne	invalid_operand
00011AEE: AC                                                    	lods	byte [esi]
00011AEF: 88 C4                                                 	mov	ah,al
00011AF1: C0 EC 04                                              	shr	ah,4
00011AF4: 80 FC 05                                              	cmp	ah,5
00011AF7: 0F 85 37 EE FE FF                                     	jne	invalid_operand
00011AFD: 24 07                                                 	and	al,111b
00011AFF: 08 C0                                                 	or	al,al
00011B01: 0F 84 2D EE FE FF                                     	jz	invalid_operand
00011B07: A2 A0 A2 01 00                                        	mov	[mask_register],al
00011B0C: 80 0D 9D A2 01 00 20                                  	or	[vex_required],20h
00011B13: AC                                                    	lods	byte [esi]
00011B14: 3C 7D                                                 	cmp	al,'}'
00011B16: 0F 85 18 EE FE FF                                     	jne	invalid_operand
00011B1C: 80 3E 7B                                              	cmp	byte [esi],'{'
00011B1F: 75 30                                                 	jne	avx512_masking_ok
00011B21: F6 05 99 A2 01 00 20                                  	test	[operand_flags],20h
00011B28: 0F 85 06 EE FE FF                                     	jnz	invalid_operand
00011B2E: 46                                                    	inc	esi
00011B2F: AC                                                    	lods	byte [esi]
00011B30: 3C 1F                                                 	cmp	al,1Fh
00011B32: 0F 85 FC ED FE FF                                     	jne	invalid_operand
00011B38: AC                                                    	lods	byte [esi]
00011B39: 08 C0                                                 	or	al,al
00011B3B: 0F 85 F3 ED FE FF                                     	jnz	invalid_operand
00011B41: 80 0D A0 A2 01 00 80                                  	or	[mask_register],80h
00011B48: AC                                                    	lods	byte [esi]
00011B49: 3C 7D                                                 	cmp	al,'}'
00011B4B: 0F 85 E3 ED FE FF                                     	jne	invalid_operand
                                                                      avx512_masking_ok:
00011B51: C3                                                    	retn
                                                                      take_avx512_rounding:
00011B52: F6 05 99 A2 01 00 0C                                  	test	[operand_flags],4+8
00011B59: 0F 84 8A 00 00 00                                     	jz	avx512_rounding_done
00011B5F: F6 05 99 A2 01 00 08                                  	test	[operand_flags],8
00011B66: 74 12                                                 	jz	avx512_rounding_allowed
00011B68: 80 3D A9 A2 01 00 00                                  	cmp	[mmx_size],0
00011B6F: 75 09                                                 	jne	avx512_rounding_allowed
00011B71: 80 3D 98 A2 01 00 40                                  	cmp	[operand_size],64
00011B78: 75 6F                                                 	jne	avx512_rounding_done
                                                                      avx512_rounding_allowed:
00011B7A: 80 3E 2C                                              	cmp	byte [esi],','
00011B7D: 75 6A                                                 	jne	avx512_rounding_done
00011B7F: 80 7E 01 7B                                           	cmp	byte [esi+1],'{'
00011B83: 75 64                                                 	jne	avx512_rounding_done
00011B85: 83 C6 02                                              	add	esi,2
00011B88: C6 05 A2 A2 01 00 00                                  	mov	[rounding_mode],0
00011B8F: 80 0D 9D A2 01 00 40                                  	or	[vex_required],40h
00011B96: F6 05 99 A2 01 00 08                                  	test	[operand_flags],8
00011B9D: 74 2F                                                 	jz	take_sae
00011B9F: 80 0D 9D A2 01 00 80                                  	or	[vex_required],80h
00011BA6: AC                                                    	lods	byte [esi]
00011BA7: 3C 1F                                                 	cmp	al,1Fh
00011BA9: 0F 85 85 ED FE FF                                     	jne	invalid_operand
00011BAF: AC                                                    	lods	byte [esi]
00011BB0: 88 C4                                                 	mov	ah,al
00011BB2: C0 EC 04                                              	shr	ah,4
00011BB5: 80 FC 02                                              	cmp	ah,2
00011BB8: 0F 85 76 ED FE FF                                     	jne	invalid_operand
00011BBE: 24 03                                                 	and	al,11b
00011BC0: A2 A2 A2 01 00                                        	mov	[rounding_mode],al
00011BC5: AC                                                    	lods	byte [esi]
00011BC6: 3C 2D                                                 	cmp	al,'-'
00011BC8: 0F 85 66 ED FE FF                                     	jne	invalid_operand
                                                                      take_sae:
00011BCE: AC                                                    	lods	byte [esi]
00011BCF: 3C 1F                                                 	cmp	al,1Fh
00011BD1: 0F 85 5D ED FE FF                                     	jne	invalid_operand
00011BD7: AC                                                    	lods	byte [esi]
00011BD8: 3C 30                                                 	cmp	al,30h
00011BDA: 0F 85 54 ED FE FF                                     	jne	invalid_operand
00011BE0: AC                                                    	lods	byte [esi]
00011BE1: 3C 7D                                                 	cmp	al,'}'
00011BE3: 0F 85 4B ED FE FF                                     	jne	invalid_operand
                                                                      avx512_rounding_done:
00011BE9: C3                                                    	retn
                                                                
                                                                avx_movdqu_instruction:
00011BEA: B4 F3                                                 	mov	ah,0F3h
00011BEC: EB 02                                                 	jmp	avx_movdq_instruction
                                                                avx_movdqa_instruction:
00011BEE: B4 66                                                 	mov	ah,66h
                                                                      avx_movdq_instruction:
00011BF0: 88 25 9C A2 01 00                                     	mov	[opcode_prefix],ah
00011BF6: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00011BFD: EB 3C                                                 	jmp	avx_movps_instruction
                                                                avx512_movdqu16_instruction:
00011BFF: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_movdqu8_instruction:
00011C06: B4 F2                                                 	mov	ah,0F2h
00011C08: EB 14                                                 	jmp	avx_movdq_instruction_evex
                                                                avx512_movdqu64_instruction:
00011C0A: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_movdqu32_instruction:
00011C11: B4 F3                                                 	mov	ah,0F3h
00011C13: EB 09                                                 	jmp	avx_movdq_instruction_evex
                                                                avx512_movdqa64_instruction:
00011C15: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_movdqa32_instruction:
00011C1C: B4 66                                                 	mov	ah,66h
                                                                      avx_movdq_instruction_evex:
00011C1E: 88 25 9C A2 01 00                                     	mov	[opcode_prefix],ah
00011C24: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00011C2B: EB 0E                                                 	jmp	avx_movps_instruction
                                                                avx_movpd_instruction:
00011C2D: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00011C34: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
                                                                avx_movps_instruction:
00011C3B: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
00011C42: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00011C49: A2 A4 A2 01 00                                        	mov	[extended_code],al
00011C4E: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
00011C55: 30 C0                                                 	xor	al,al
00011C57: A2 A9 A2 01 00                                        	mov	[mmx_size],al
00011C5C: A2 A1 A2 01 00                                        	mov	[broadcast_size],al
00011C61: AC                                                    	lods	byte [esi]
00011C62: E8 C3 F0 FF FF                                        	call	get_size_operator
00011C67: 3C 10                                                 	cmp	al,10h
00011C69: 0F 84 9D FB FF FF                                     	je	avx_reg
00011C6F: FE 05 A4 A2 01 00                                     	inc	[extended_code]
00011C75: F6 05 A4 A2 01 00 01                                  	test	[extended_code],1
00011C7C: 75 07                                                 	jnz	avx_mem
00011C7E: 80 05 A4 A2 01 00 0F                                  	add	[extended_code],-1+10h
                                                                      avx_mem:
00011C85: 3C 5B                                                 	cmp	al,'['
00011C87: 0F 85 A7 EC FE FF                                     	jne	invalid_operand
00011C8D: E8 F4 F0 FF FF                                        	call	get_address
00011C92: 80 0D 99 A2 01 00 20                                  	or	[operand_flags],20h
00011C99: E8 34 FE FF FF                                        	call	take_avx512_mask
00011C9E: AC                                                    	lods	byte [esi]
00011C9F: 3C 2C                                                 	cmp	al,','
00011CA1: 0F 85 8D EC FE FF                                     	jne	invalid_operand
00011CA7: E8 87 24 00 00                                        	call	take_avx_register
00011CAC: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00011CB1: E9 64 98 FF FF                                        	jmp	instruction_ready
                                                                avx_movntpd_instruction:
00011CB6: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
                                                                avx_movntdq_instruction:
00011CBD: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                avx_movntps_instruction:
00011CC4: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00011CCB: A2 A4 A2 01 00                                        	mov	[extended_code],al
00011CD0: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
00011CD7: 80 0D 99 A2 01 00 10                                  	or	[operand_flags],10h
00011CDE: C6 05 A9 A2 01 00 00                                  	mov	[mmx_size],0
00011CE5: AC                                                    	lods	byte [esi]
00011CE6: E8 3F F0 FF FF                                        	call	get_size_operator
00011CEB: EB 98                                                 	jmp	avx_mem
                                                                avx_compress_q_instruction:
00011CED: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx_compress_d_instruction:
00011CF4: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00011CFB: C6 05 A9 A2 01 00 00                                  	mov	[mmx_size],0
00011D02: E8 42 E0 FF FF                                        	call	setup_66_0f_38
00011D07: AC                                                    	lods	byte [esi]
00011D08: E8 1D F0 FF FF                                        	call	get_size_operator
00011D0D: 3C 10                                                 	cmp	al,10h
00011D0F: 0F 85 70 FF FF FF                                     	jne	avx_mem
00011D15: AC                                                    	lods	byte [esi]
00011D16: E8 27 24 00 00                                        	call	convert_avx_register
00011D1B: 88 C3                                                 	mov	bl,al
00011D1D: E8 B0 FD FF FF                                        	call	take_avx512_mask
00011D22: AC                                                    	lods	byte [esi]
00011D23: 3C 2C                                                 	cmp	al,','
00011D25: 0F 85 09 EC FE FF                                     	jne	invalid_operand
00011D2B: E8 03 24 00 00                                        	call	take_avx_register
00011D30: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00011D35: E9 BB 99 FF FF                                        	jmp	nomem_instruction_ready
                                                                avx_lddqu_instruction:
00011D3A: B4 F2                                                 	mov	ah,0F2h
00011D3C: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
                                                                      avx_load_instruction:
00011D43: 88 25 9C A2 01 00                                     	mov	[opcode_prefix],ah
00011D49: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00011D50: A2 A4 A2 01 00                                        	mov	[extended_code],al
00011D55: C6 05 A9 A2 01 00 00                                  	mov	[mmx_size],0
00011D5C: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
00011D63: E8 CB 23 00 00                                        	call	take_avx_register
00011D68: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00011D6D: AC                                                    	lods	byte [esi]
00011D6E: 3C 2C                                                 	cmp	al,','
00011D70: 0F 85 BE EB FE FF                                     	jne	invalid_operand
00011D76: AC                                                    	lods	byte [esi]
00011D77: E8 AE EF FF FF                                        	call	get_size_operator
00011D7C: 3C 5B                                                 	cmp	al,'['
00011D7E: 0F 85 B0 EB FE FF                                     	jne	invalid_operand
00011D84: E8 FD EF FF FF                                        	call	get_address
00011D89: E9 8C 97 FF FF                                        	jmp	instruction_ready
                                                                avx_movntdqa_instruction:
00011D8E: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00011D93: B0 38                                                 	mov	al,38h
00011D95: B4 66                                                 	mov	ah,66h
00011D97: EB AA                                                 	jmp	avx_load_instruction
                                                                avx_movq_instruction:
00011D99: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
00011DA0: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
00011DA7: EB 07                                                 	jmp	avx_mov_instruction
                                                                avx_movd_instruction:
00011DA9: C6 05 A9 A2 01 00 04                                  	mov	[mmx_size],4
                                                                      avx_mov_instruction:
00011DB0: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
00011DB7: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00011DBE: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00011DC5: C6 05 A4 A2 01 00 7E                                  	mov	[extended_code],7Eh
00011DCC: AC                                                    	lods	byte [esi]
00011DCD: E8 58 EF FF FF                                        	call	get_size_operator
00011DD2: 3C 10                                                 	cmp	al,10h
00011DD4: 74 72                                                 	je	avx_movd_reg
00011DD6: 3C 5B                                                 	cmp	al,'['
00011DD8: 0F 85 56 EB FE FF                                     	jne	invalid_operand
00011DDE: E8 A3 EF FF FF                                        	call	get_address
00011DE3: A0 A9 A2 01 00                                        	mov	al,[mmx_size]
00011DE8: F6 D0                                                 	not	al
00011DEA: 20 05 98 A2 01 00                                     	and	[operand_size],al
00011DF0: 0F 85 48 EB FE FF                                     	jnz	invalid_operand_size
00011DF6: AC                                                    	lods	byte [esi]
00011DF7: 3C 2C                                                 	cmp	al,','
00011DF9: 0F 85 35 EB FE FF                                     	jne	invalid_operand
00011DFF: AC                                                    	lods	byte [esi]
00011E00: E8 25 EF FF FF                                        	call	get_size_operator
00011E05: 3C 10                                                 	cmp	al,10h
00011E07: 0F 85 27 EB FE FF                                     	jne	invalid_operand
00011E0D: AC                                                    	lods	byte [esi]
00011E0E: E8 2F 23 00 00                                        	call	convert_avx_register
00011E13: 80 FC 10                                              	cmp	ah,16
00011E16: 0F 85 22 EB FE FF                                     	jne	invalid_operand_size
00011E1C: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00011E21: 80 3D A9 A2 01 00 08                                  	cmp	[mmx_size],8
00011E28: 0F 85 EC 96 FF FF                                     	jne	instruction_ready
00011E2E: 80 25 9B A2 01 00 F7                                  	and	[rex_prefix],not 8
00011E35: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
00011E3C: C6 05 A4 A2 01 00 D6                                  	mov	[extended_code],0D6h
00011E43: E9 D2 96 FF FF                                        	jmp	instruction_ready
                                                                      avx_movd_reg:
00011E48: AC                                                    	lods	byte [esi]
00011E49: 3C C0                                                 	cmp	al,0C0h
00011E4B: 73 64                                                 	jae	avx_movd_xmmreg
00011E4D: E8 31 EE FF FF                                        	call	convert_register
00011E52: 3A 25 A9 A2 01 00                                     	cmp	ah,[mmx_size]
00011E58: 0F 85 E0 EA FE FF                                     	jne	invalid_operand_size
00011E5E: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
00011E65: 88 C3                                                 	mov	bl,al
00011E67: AC                                                    	lods	byte [esi]
00011E68: 3C 2C                                                 	cmp	al,','
00011E6A: 0F 85 C4 EA FE FF                                     	jne	invalid_operand
00011E70: AC                                                    	lods	byte [esi]
00011E71: E8 B4 EE FF FF                                        	call	get_size_operator
00011E76: 3C 10                                                 	cmp	al,10h
00011E78: 0F 85 B6 EA FE FF                                     	jne	invalid_operand
00011E7E: AC                                                    	lods	byte [esi]
00011E7F: E8 BE 22 00 00                                        	call	convert_avx_register
00011E84: 80 FC 10                                              	cmp	ah,16
00011E87: 0F 85 B1 EA FE FF                                     	jne	invalid_operand_size
00011E8D: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
                                                                      avx_movd_reg_ready:
00011E92: F6 05 9B A2 01 00 08                                  	test	[rex_prefix],8
00011E99: 0F 84 56 98 FF FF                                     	jz	nomem_instruction_ready
00011E9F: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00011EA6: 0F 85 7E EA FE FF                                     	jne	illegal_instruction
00011EAC: E9 44 98 FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_movd_xmmreg:
00011EB1: 80 2D A4 A2 01 00 10                                  	sub	[extended_code],10h
00011EB8: E8 85 22 00 00                                        	call	convert_avx_register
00011EBD: 80 FC 10                                              	cmp	ah,16
00011EC0: 0F 85 78 EA FE FF                                     	jne	invalid_operand_size
00011EC6: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00011ECB: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
00011ED2: AC                                                    	lods	byte [esi]
00011ED3: 3C 2C                                                 	cmp	al,','
00011ED5: 0F 85 59 EA FE FF                                     	jne	invalid_operand
00011EDB: AC                                                    	lods	byte [esi]
00011EDC: E8 49 EE FF FF                                        	call	get_size_operator
00011EE1: 3C 10                                                 	cmp	al,10h
00011EE3: 74 2E                                                 	je	avx_movd_xmmreg_reg
00011EE5: 3C 5B                                                 	cmp	al,'['
00011EE7: 0F 85 47 EA FE FF                                     	jne	invalid_operand
00011EED: E8 94 EE FF FF                                        	call	get_address
00011EF2: A0 A9 A2 01 00                                        	mov	al,[mmx_size]
00011EF7: 3C 08                                                 	cmp	al,8
00011EF9: 75 05                                                 	jne	avx_movd_xmmreg_mem_ready
00011EFB: E8 57 00 00 00                                        	call	avx_movq_xmmreg_xmmreg_opcode
                                                                      avx_movd_xmmreg_mem_ready:
00011F00: F6 D0                                                 	not	al
00011F02: 84 05 98 A2 01 00                                     	test	[operand_size],al
00011F08: 0F 85 30 EA FE FF                                     	jnz	invalid_operand_size
00011F0E: E9 07 96 FF FF                                        	jmp	instruction_ready
                                                                      avx_movd_xmmreg_reg:
00011F13: AC                                                    	lods	byte [esi]
00011F14: 3C C0                                                 	cmp	al,0C0h
00011F16: 73 18                                                 	jae	avx_movq_xmmreg_xmmreg
00011F18: E8 66 ED FF FF                                        	call	convert_register
00011F1D: 3A 25 A9 A2 01 00                                     	cmp	ah,[mmx_size]
00011F23: 0F 85 15 EA FE FF                                     	jne	invalid_operand_size
00011F29: 88 C3                                                 	mov	bl,al
00011F2B: E9 62 FF FF FF                                        	jmp	avx_movd_reg_ready
                                                                      avx_movq_xmmreg_xmmreg:
00011F30: 80 3D A9 A2 01 00 08                                  	cmp	[mmx_size],8
00011F37: 0F 85 F7 E9 FE FF                                     	jne	invalid_operand
00011F3D: E8 15 00 00 00                                        	call	avx_movq_xmmreg_xmmreg_opcode
00011F42: E8 FB 21 00 00                                        	call	convert_avx_register
00011F47: 80 FC 10                                              	cmp	ah,16
00011F4A: 0F 85 EE E9 FE FF                                     	jne	invalid_operand_size
00011F50: 88 C3                                                 	mov	bl,al
00011F52: E9 9E 97 FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_movq_xmmreg_xmmreg_opcode:
00011F57: 80 25 9B A2 01 00 F7                                  	and	[rex_prefix],not 8
00011F5E: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
00011F65: 80 05 A4 A2 01 00 10                                  	add	[extended_code],10h
00011F6C: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00011F73: C3                                                    	ret
                                                                avx_movddup_instruction:
00011F74: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
00011F7B: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
00011F82: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00011F89: A2 A4 A2 01 00                                        	mov	[extended_code],al
00011F8E: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
00011F95: 30 C0                                                 	xor	al,al
00011F97: A2 A9 A2 01 00                                        	mov	[mmx_size],al
00011F9C: A2 A1 A2 01 00                                        	mov	[broadcast_size],al
00011FA1: AC                                                    	lods	byte [esi]
00011FA2: E8 83 ED FF FF                                        	call	get_size_operator
00011FA7: 3C 10                                                 	cmp	al,10h
00011FA9: 0F 85 85 E9 FE FF                                     	jne	invalid_operand
00011FAF: AC                                                    	lods	byte [esi]
00011FB0: E8 8D 21 00 00                                        	call	convert_avx_register
00011FB5: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00011FBA: 80 FC 10                                              	cmp	ah,16
00011FBD: 77 07                                                 	ja	avx_movddup_size_ok
00011FBF: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
                                                                      avx_movddup_size_ok:
00011FC6: E8 07 FB FF FF                                        	call	take_avx512_mask
00011FCB: E9 68 F8 FF FF                                        	jmp	avx_vex_reg_ok
                                                                avx_movlpd_instruction:
00011FD0: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00011FD7: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
                                                                avx_movlps_instruction:
00011FDE: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00011FE5: A2 A4 A2 01 00                                        	mov	[extended_code],al
00011FEA: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
00011FF1: C6 05 A1 A2 01 00 00                                  	mov	[broadcast_size],0
00011FF8: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
00011FFF: AC                                                    	lods	byte [esi]
00012000: E8 25 ED FF FF                                        	call	get_size_operator
00012005: 3C 10                                                 	cmp	al,10h
00012007: 75 4B                                                 	jne	avx_movlps_mem
00012009: AC                                                    	lods	byte [esi]
0001200A: E8 33 21 00 00                                        	call	convert_avx_register
0001200F: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00012014: AC                                                    	lods	byte [esi]
00012015: 3C 2C                                                 	cmp	al,','
00012017: 0F 85 17 E9 FE FF                                     	jne	invalid_operand
0001201D: E8 11 21 00 00                                        	call	take_avx_register
00012022: A2 9E A2 01 00                                        	mov	[vex_register],al
00012027: 80 3D 98 A2 01 00 10                                  	cmp	[operand_size],16
0001202E: 0F 85 00 E9 FE FF                                     	jne	invalid_operand
00012034: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0001203B: AC                                                    	lods	byte [esi]
0001203C: 3C 2C                                                 	cmp	al,','
0001203E: 0F 85 F0 E8 FE FF                                     	jne	invalid_operand
00012044: E8 20 F9 FF FF                                        	call	take_avx_rm
00012049: 0F 82 E5 E8 FE FF                                     	jc	invalid_operand
0001204F: E9 C6 94 FF FF                                        	jmp	instruction_ready
                                                                      avx_movlps_mem:
00012054: 3C 5B                                                 	cmp	al,'['
00012056: 0F 85 D8 E8 FE FF                                     	jne	invalid_operand
0001205C: E8 25 ED FF FF                                        	call	get_address
                                                                      avx_movlps_mem_:
00012061: A0 98 A2 01 00                                        	mov	al,[operand_size]
00012066: 08 C0                                                 	or	al,al
00012068: 74 13                                                 	jz	avx_movlps_mem_size_ok
0001206A: 3A 05 A9 A2 01 00                                     	cmp	al,[mmx_size]
00012070: 0F 85 C8 E8 FE FF                                     	jne	invalid_operand_size
00012076: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
                                                                      avx_movlps_mem_size_ok:
0001207D: AC                                                    	lods	byte [esi]
0001207E: 3C 2C                                                 	cmp	al,','
00012080: 0F 85 AE E8 FE FF                                     	jne	invalid_operand
00012086: E8 A8 20 00 00                                        	call	take_avx_register
0001208B: 80 FC 10                                              	cmp	ah,16
0001208E: 0F 85 A0 E8 FE FF                                     	jne	invalid_operand
00012094: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00012099: FE 05 A4 A2 01 00                                     	inc	[extended_code]
0001209F: E9 76 94 FF FF                                        	jmp	instruction_ready
                                                                avx_movhlps_instruction:
000120A4: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
000120AB: A2 A4 A2 01 00                                        	mov	[extended_code],al
000120B0: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
000120B7: E8 77 20 00 00                                        	call	take_avx_register
000120BC: 80 FC 10                                              	cmp	ah,16
000120BF: 0F 85 6F E8 FE FF                                     	jne	invalid_operand
000120C5: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000120CA: AC                                                    	lods	byte [esi]
000120CB: 3C 2C                                                 	cmp	al,','
000120CD: 0F 85 61 E8 FE FF                                     	jne	invalid_operand
000120D3: E8 5B 20 00 00                                        	call	take_avx_register
000120D8: A2 9E A2 01 00                                        	mov	[vex_register],al
000120DD: AC                                                    	lods	byte [esi]
000120DE: 3C 2C                                                 	cmp	al,','
000120E0: 0F 85 4E E8 FE FF                                     	jne	invalid_operand
000120E6: E8 48 20 00 00                                        	call	take_avx_register
000120EB: 88 C3                                                 	mov	bl,al
000120ED: E9 03 96 FF FF                                        	jmp	nomem_instruction_ready
                                                                avx_movsd_instruction:
000120F2: B0 F2                                                 	mov	al,0F2h
000120F4: B1 08                                                 	mov	cl,8
000120F6: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
000120FD: EB 04                                                 	jmp	avx_movs_instruction
                                                                avx_movss_instruction:
000120FF: B0 F3                                                 	mov	al,0F3h
00012101: B1 04                                                 	mov	cl,4
                                                                      avx_movs_instruction:
00012103: A2 9C A2 01 00                                        	mov	[opcode_prefix],al
00012108: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
0001210E: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
00012115: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0001211C: C6 05 A4 A2 01 00 10                                  	mov	[extended_code],10h
00012123: AC                                                    	lods	byte [esi]
00012124: E8 01 EC FF FF                                        	call	get_size_operator
00012129: 3C 10                                                 	cmp	al,10h
0001212B: 0F 85 96 00 00 00                                     	jne	avx_movs_mem
00012131: AC                                                    	lods	byte [esi]
00012132: E8 0B 20 00 00                                        	call	convert_avx_register
00012137: 80 FC 10                                              	cmp	ah,16
0001213A: 0F 85 F4 E7 FE FF                                     	jne	invalid_operand
00012140: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00012145: E8 88 F9 FF FF                                        	call	take_avx512_mask
0001214A: 30 C9                                                 	xor	cl,cl
0001214C: 86 0D 98 A2 01 00                                     	xchg	cl,[operand_size]
00012152: AC                                                    	lods	byte [esi]
00012153: 3C 2C                                                 	cmp	al,','
00012155: 0F 85 D9 E7 FE FF                                     	jne	invalid_operand
0001215B: AC                                                    	lods	byte [esi]
0001215C: E8 C9 EB FF FF                                        	call	get_size_operator
00012161: 3C 10                                                 	cmp	al,10h
00012163: 75 3B                                                 	jne	avx_movs_reg_mem
00012165: 88 0D 98 A2 01 00                                     	mov	[operand_size],cl
0001216B: AC                                                    	lods	byte [esi]
0001216C: E8 D1 1F 00 00                                        	call	convert_avx_register
00012171: A2 9E A2 01 00                                        	mov	[vex_register],al
00012176: AC                                                    	lods	byte [esi]
00012177: 3C 2C                                                 	cmp	al,','
00012179: 0F 85 B5 E7 FE FF                                     	jne	invalid_operand
0001217F: E8 AF 1F 00 00                                        	call	take_avx_register
00012184: 88 C3                                                 	mov	bl,al
00012186: 80 FB 08                                              	cmp	bl,8
00012189: 0F 82 66 95 FF FF                                     	jb	nomem_instruction_ready
0001218F: FE 05 A4 A2 01 00                                     	inc	[extended_code]
00012195: 86 1D A6 A2 01 00                                     	xchg	bl,[postbyte_register]
0001219B: E9 55 95 FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_movs_reg_mem:
000121A0: 3C 5B                                                 	cmp	al,'['
000121A2: 0F 85 8C E7 FE FF                                     	jne	invalid_operand
000121A8: E8 D9 EB FF FF                                        	call	get_address
000121AD: A0 98 A2 01 00                                        	mov	al,[operand_size]
000121B2: 08 C0                                                 	or	al,al
000121B4: 74 0C                                                 	jz	avx_movs_reg_mem_ok
000121B6: 3A 05 A9 A2 01 00                                     	cmp	al,[mmx_size]
000121BC: 0F 85 7C E7 FE FF                                     	jne	invalid_operand_size
                                                                      avx_movs_reg_mem_ok:
000121C2: E9 53 93 FF FF                                        	jmp	instruction_ready
                                                                      avx_movs_mem:
000121C7: 3C 5B                                                 	cmp	al,'['
000121C9: 0F 85 65 E7 FE FF                                     	jne	invalid_operand
000121CF: E8 B2 EB FF FF                                        	call	get_address
000121D4: 80 0D 99 A2 01 00 20                                  	or	[operand_flags],20h
000121DB: E8 F2 F8 FF FF                                        	call	take_avx512_mask
000121E0: E9 7C FE FF FF                                        	jmp	avx_movlps_mem_
                                                                
                                                                avx_comiss_instruction:
000121E5: 80 0D 99 A2 01 00 16                                  	or	[operand_flags],2+4+10h
000121EC: B1 04                                                 	mov	cl,4
000121EE: E9 EA F5 FF FF                                        	jmp	avx_instruction
                                                                avx_comisd_instruction:
000121F3: 80 0D 99 A2 01 00 16                                  	or	[operand_flags],2+4+10h
000121FA: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00012201: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
00012208: B1 08                                                 	mov	cl,8
0001220A: E9 CE F5 FF FF                                        	jmp	avx_instruction
                                                                avx_movshdup_instruction:
0001220F: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
00012216: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0001221D: 30 C9                                                 	xor	cl,cl
0001221F: E9 B9 F5 FF FF                                        	jmp	avx_instruction
                                                                avx_cvtqq2pd_instruction:
00012224: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0001222B: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00012232: 80 0D 99 A2 01 00 0E                                  	or	[operand_flags],2+4+8
00012239: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
00012240: 66 B9 00 08                                           	mov	cx,0800h
00012244: E9 96 F5 FF FF                                        	jmp	avx_instruction_with_broadcast
                                                                avx_pshuf_w_instruction:
00012249: A2 9C A2 01 00                                        	mov	[opcode_prefix],al
0001224E: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
00012255: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
0001225C: B0 70                                                 	mov	al,70h
0001225E: 30 C9                                                 	xor	cl,cl
00012260: E9 78 F5 FF FF                                        	jmp	avx_instruction
                                                                avx_single_source_128bit_instruction_38_noevex:
00012265: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx_128bit_instruction_38_noevex:
0001226C: B1 10                                                 	mov	cl,16
0001226E: EB 0B                                                 	jmp	avx_instruction_38_noevex
                                                                avx_single_source_instruction_38_noevex:
00012270: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
00012277: EB 00                                                 	jmp	avx_pi_instruction_38_noevex
                                                                avx_pi_instruction_38_noevex:
00012279: 30 C9                                                 	xor	cl,cl
                                                                      avx_instruction_38_noevex:
0001227B: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
                                                                      avx_instruction_38:
00012282: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00012289: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
0001228E: B0 38                                                 	mov	al,38h
00012290: E9 48 F5 FF FF                                        	jmp	avx_instruction
                                                                avx_ss_instruction_3a_imm8_noevex:
00012295: B1 04                                                 	mov	cl,4
00012297: EB 2A                                                 	jmp	avx_instruction_3a_imm8_noevex
                                                                avx_sd_instruction_3a_imm8_noevex:
00012299: B1 08                                                 	mov	cl,8
0001229B: EB 26                                                 	jmp	avx_instruction_3a_imm8_noevex
                                                                avx_single_source_128bit_instruction_3a_imm8_noevex:
0001229D: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx_128bit_instruction_3a_imm8_noevex:
000122A4: B1 10                                                 	mov	cl,16
000122A6: EB 1B                                                 	jmp	avx_instruction_3a_imm8_noevex
                                                                avx_triple_source_instruction_3a_noevex:
000122A8: 30 C9                                                 	xor	cl,cl
000122AA: C6 05 9F A2 01 00 FF                                  	mov	[immediate_size],-1
000122B1: C6 05 F4 A1 01 00 00                                  	mov	byte [value],0
000122B8: EB 10                                                 	jmp	avx_instruction_3a_noevex
                                                                avx_single_source_instruction_3a_imm8_noevex:
000122BA: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx_pi_instruction_3a_imm8_noevex:
000122C1: 30 C9                                                 	xor	cl,cl
                                                                      avx_instruction_3a_imm8_noevex:
000122C3: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
                                                                      avx_instruction_3a_noevex:
000122CA: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
                                                                      avx_instruction_3a:
000122D1: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
000122D8: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
000122DD: B0 3A                                                 	mov	al,3Ah
000122DF: E9 F9 F4 FF FF                                        	jmp	avx_instruction
                                                                avx_pi_instruction_3a_imm8:
000122E4: 30 C9                                                 	xor	cl,cl
000122E6: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
000122ED: EB E2                                                 	jmp	avx_instruction_3a
                                                                avx_pclmulqdq_instruction:
000122EF: A2 F4 A1 01 00                                        	mov	byte [value],al
000122F4: C6 05 9F A2 01 00 FC                                  	mov	[immediate_size],-4
000122FB: 30 C9                                                 	xor	cl,cl
000122FD: B0 44                                                 	mov	al,44h
000122FF: 80 0D 99 A2 01 00 10                                  	or	[operand_flags],10h
00012306: EB C9                                                 	jmp	avx_instruction_3a
                                                                avx_instruction_38_nomask:
00012308: 80 0D 99 A2 01 00 10                                  	or	[operand_flags],10h
0001230F: 30 C9                                                 	xor	cl,cl
00012311: E9 6C FF FF FF                                        	jmp	avx_instruction_38
                                                                
                                                                avx512_single_source_pd_instruction_sae_imm8:
00012316: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx512_pd_instruction_sae_imm8:
0001231D: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
00012324: 66 B9 00 08                                           	mov	cx,0800h
00012328: EB 1E                                                 	jmp	avx512_instruction_sae_imm8
                                                                avx512_single_source_ps_instruction_sae_imm8:
0001232A: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx512_ps_instruction_sae_imm8:
00012331: 66 B9 00 04                                           	mov	cx,0400h
00012335: EB 11                                                 	jmp	avx512_instruction_sae_imm8
                                                                avx512_sd_instruction_sae_imm8:
00012337: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
0001233E: 66 B9 08 00                                           	mov	cx,0008h
00012342: EB 04                                                 	jmp	avx512_instruction_sae_imm8
                                                                avx512_ss_instruction_sae_imm8:
00012344: 66 B9 04 00                                           	mov	cx,0004h
                                                                      avx512_instruction_sae_imm8:
00012348: 80 0D 99 A2 01 00 04                                  	or	[operand_flags],4
                                                                      avx512_instruction_imm8:
0001234F: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00012356: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
0001235D: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
00012364: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00012369: B0 3A                                                 	mov	al,3Ah
0001236B: E9 6F F4 FF FF                                        	jmp	avx_instruction_with_broadcast
                                                                avx512_pd_instruction_er:
00012370: 80 0D 99 A2 01 00 0C                                  	or	[operand_flags],4+8
00012377: EB 0E                                                 	jmp	avx512_pd_instruction
                                                                avx512_single_source_pd_instruction_sae:
00012379: 80 0D 99 A2 01 00 04                                  	or	[operand_flags],4
                                                                avx512_single_source_pd_instruction:
00012380: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx512_pd_instruction:
00012387: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
0001238E: 66 B9 00 08                                           	mov	cx,0800h
00012392: EB 4A                                                 	jmp	avx512_instruction
                                                                avx512_ps_instruction_er:
00012394: 80 0D 99 A2 01 00 0C                                  	or	[operand_flags],4+8
0001239B: EB 0E                                                 	jmp	avx512_ps_instruction
                                                                avx512_single_source_ps_instruction_sae:
0001239D: 80 0D 99 A2 01 00 04                                  	or	[operand_flags],4
                                                                avx512_single_source_ps_instruction:
000123A4: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx512_ps_instruction:
000123AB: 66 B9 00 04                                           	mov	cx,0400h
000123AF: EB 2D                                                 	jmp	avx512_instruction
                                                                avx512_sd_instruction_er:
000123B1: 80 0D 99 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx512_sd_instruction_sae:
000123B8: 80 0D 99 A2 01 00 04                                  	or	[operand_flags],4
                                                                avx512_sd_instruction:
000123BF: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
000123C6: 66 B9 08 00                                           	mov	cx,0008h
000123CA: EB 12                                                 	jmp	avx512_instruction
                                                                avx512_ss_instruction_er:
000123CC: 80 0D 99 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx512_ss_instruction_sae:
000123D3: 80 0D 99 A2 01 00 04                                  	or	[operand_flags],4
                                                                avx512_ss_instruction:
000123DA: 66 B9 04 00                                           	mov	cx,0004h
                                                                      avx512_instruction:
000123DE: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
000123E5: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
000123EC: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
000123F1: B0 38                                                 	mov	al,38h
000123F3: E9 E7 F3 FF FF                                        	jmp	avx_instruction_with_broadcast
                                                                avx512_exp2pd_instruction:
000123F8: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
000123FF: 80 0D 99 A2 01 00 06                                  	or	[operand_flags],2+4
00012406: 66 B9 40 08                                           	mov	cx,0840h
0001240A: EB D2                                                 	jmp	avx512_instruction
                                                                avx512_exp2ps_instruction:
0001240C: 80 0D 99 A2 01 00 06                                  	or	[operand_flags],2+4
00012413: 66 B9 40 04                                           	mov	cx,0440h
00012417: EB C5                                                 	jmp	avx512_instruction
                                                                
                                                                fma_instruction_pd:
00012419: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
00012420: 66 B9 00 08                                           	mov	cx,0800h
00012424: EB 17                                                 	jmp	fma_instruction
                                                                fma_instruction_ps:
00012426: 66 B9 00 04                                           	mov	cx,0400h
0001242A: EB 11                                                 	jmp	fma_instruction
                                                                fma_instruction_sd:
0001242C: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
00012433: 66 B9 08 00                                           	mov	cx,0008h
00012437: EB 04                                                 	jmp	fma_instruction
                                                                fma_instruction_ss:
00012439: 66 B9 04 00                                           	mov	cx,0004h
                                                                      fma_instruction:
0001243D: 80 0D 99 A2 01 00 0C                                  	or	[operand_flags],4+8
00012444: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
0001244B: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00012450: B0 38                                                 	mov	al,38h
00012452: E9 88 F3 FF FF                                        	jmp	avx_instruction_with_broadcast
                                                                
                                                                fma4_instruction_p:
00012457: 30 C9                                                 	xor	cl,cl
00012459: EB 06                                                 	jmp	fma4_instruction
                                                                fma4_instruction_sd:
0001245B: B1 08                                                 	mov	cl,8
0001245D: EB 02                                                 	jmp	fma4_instruction
                                                                fma4_instruction_ss:
0001245F: B1 04                                                 	mov	cl,4
                                                                      fma4_instruction:
00012461: C6 05 9F A2 01 00 FE                                  	mov	[immediate_size],-2
00012468: C6 05 F4 A1 01 00 00                                  	mov	byte [value],0
0001246F: E9 56 FE FF FF                                        	jmp	avx_instruction_3a_noevex
                                                                
                                                                avx_cmp_pd_instruction:
00012474: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
0001247B: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
00012482: 66 B9 00 08                                           	mov	cx,0800h
00012486: EB 25                                                 	jmp	avx_cmp_instruction
                                                                avx_cmp_ps_instruction:
00012488: 66 B9 00 04                                           	mov	cx,0400h
0001248C: EB 1F                                                 	jmp	avx_cmp_instruction
                                                                avx_cmp_sd_instruction:
0001248E: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
00012495: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
0001249C: 66 B9 08 00                                           	mov	cx,0008h
000124A0: EB 0B                                                 	jmp	avx_cmp_instruction
                                                                avx_cmp_ss_instruction:
000124A2: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
000124A9: 66 B9 04 00                                           	mov	cx,0004h
                                                                      avx_cmp_instruction:
000124AD: A2 F4 A1 01 00                                        	mov	byte [value],al
000124B2: C6 05 9F A2 01 00 FC                                  	mov	[immediate_size],-4
000124B9: 80 0D 99 A2 01 00 24                                  	or	[operand_flags],4+20h
000124C0: B0 C2                                                 	mov	al,0C2h
000124C2: E9 83 00 00 00                                        	jmp	avx_cmp_common
                                                                avx_cmpeqq_instruction:
000124C7: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
000124CE: B5 08                                                 	mov	ch,8
000124D0: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
000124D5: B0 38                                                 	mov	al,38h
000124D7: EB 61                                                 	jmp	avx_cmp_pi_instruction
                                                                avx_cmpeqd_instruction:
000124D9: B5 04                                                 	mov	ch,4
000124DB: EB 5D                                                 	jmp	avx_cmp_pi_instruction
                                                                avx_cmpeqb_instruction:
000124DD: 30 ED                                                 	xor	ch,ch
000124DF: EB 59                                                 	jmp	avx_cmp_pi_instruction
                                                                avx512_cmp_uq_instruction:
000124E1: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
000124E8: B5 08                                                 	mov	ch,8
000124EA: B4 1E                                                 	mov	ah,1Eh
000124EC: EB 31                                                 	jmp	avx_cmp_pi_instruction_evex
                                                                avx512_cmp_ud_instruction:
000124EE: B5 04                                                 	mov	ch,4
000124F0: B4 1E                                                 	mov	ah,1Eh
000124F2: EB 2B                                                 	jmp	avx_cmp_pi_instruction_evex
                                                                avx512_cmp_q_instruction:
000124F4: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
000124FB: B5 08                                                 	mov	ch,8
000124FD: B4 1F                                                 	mov	ah,1Fh
000124FF: EB 1E                                                 	jmp	avx_cmp_pi_instruction_evex
                                                                avx512_cmp_d_instruction:
00012501: B5 04                                                 	mov	ch,4
00012503: B4 1F                                                 	mov	ah,1Fh
00012505: EB 18                                                 	jmp	avx_cmp_pi_instruction_evex
                                                                avx512_cmp_uw_instruction:
00012507: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_cmp_ub_instruction:
0001250E: 30 ED                                                 	xor	ch,ch
00012510: B4 3E                                                 	mov	ah,3Eh
00012512: EB 0B                                                 	jmp	avx_cmp_pi_instruction_evex
                                                                avx512_cmp_w_instruction:
00012514: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_cmp_b_instruction:
0001251B: 30 ED                                                 	xor	ch,ch
0001251D: B4 3F                                                 	mov	ah,3Fh
                                                                      avx_cmp_pi_instruction_evex:
0001251F: A2 F4 A1 01 00                                        	mov	byte [value],al
00012524: C6 05 9F A2 01 00 FC                                  	mov	[immediate_size],-4
0001252B: 88 25 A5 A2 01 00                                     	mov	[supplemental_code],ah
00012531: B0 3A                                                 	mov	al,3Ah
00012533: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
                                                                      avx_cmp_pi_instruction:
0001253A: 30 C9                                                 	xor	cl,cl
0001253C: 80 0D 99 A2 01 00 20                                  	or	[operand_flags],20h
00012543: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                      avx_cmp_common:
0001254A: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
00012550: 88 2D A1 A2 01 00                                     	mov	[broadcast_size],ch
00012556: A2 A4 A2 01 00                                        	mov	[extended_code],al
0001255B: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00012562: AC                                                    	lods	byte [esi]
00012563: E8 C2 E7 FF FF                                        	call	get_size_operator
00012568: 3C 14                                                 	cmp	al,14h
0001256A: 74 14                                                 	je	avx_maskreg
0001256C: 3C 10                                                 	cmp	al,10h
0001256E: 0F 85 C0 E3 FE FF                                     	jne	invalid_operand
00012574: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
0001257B: E9 8C F2 FF FF                                        	jmp	avx_reg
                                                                      avx_maskreg:
00012580: 80 3D 98 A2 01 00 00                                  	cmp	[operand_size],0
00012587: 0F 85 B1 E3 FE FF                                     	jne	invalid_operand_size
0001258D: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00012594: AC                                                    	lods	byte [esi]
00012595: E8 75 01 00 00                                        	call	convert_mask_register
0001259A: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0001259F: E8 2E F5 FF FF                                        	call	take_avx512_mask
000125A4: E9 73 F2 FF FF                                        	jmp	avx_vex_reg
                                                                avx512_fpclasspd_instruction:
000125A9: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
000125B0: 66 B9 00 08                                           	mov	cx,0800h
000125B4: EB 17                                                 	jmp	avx_fpclass_instruction
                                                                avx512_fpclassps_instruction:
000125B6: 66 B9 00 04                                           	mov	cx,0400h
000125BA: EB 11                                                 	jmp	avx_fpclass_instruction
                                                                avx512_fpclasssd_instruction:
000125BC: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
000125C3: 66 B9 08 00                                           	mov	cx,0008h
000125C7: EB 04                                                 	jmp	avx_fpclass_instruction
                                                                avx512_fpclassss_instruction:
000125C9: 66 B9 04 00                                           	mov	cx,0004h
                                                                      avx_fpclass_instruction:
000125CD: 88 2D A1 A2 01 00                                     	mov	[broadcast_size],ch
000125D3: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
000125D9: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
000125E0: E8 56 D4 FF FF                                        	call	setup_66_0f_3a
000125E5: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
000125EC: AC                                                    	lods	byte [esi]
000125ED: 3C 14                                                 	cmp	al,14h
000125EF: 74 8F                                                 	je	avx_maskreg
000125F1: E9 3E E3 FE FF                                        	jmp	invalid_operand
                                                                avx512_ptestnmd_instruction:
000125F6: B5 04                                                 	mov	ch,4
000125F8: EB 14                                                 	jmp	avx512_ptestnm_instruction
                                                                avx512_ptestnmq_instruction:
000125FA: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
00012601: B5 08                                                 	mov	ch,8
00012603: EB 09                                                 	jmp	avx512_ptestnm_instruction
                                                                avx512_ptestnmw_instruction:
00012605: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_ptestnmb_instruction:
0001260C: 30 ED                                                 	xor	ch,ch
                                                                      avx512_ptestnm_instruction:
0001260E: B4 F3                                                 	mov	ah,0F3h
00012610: EB 1A                                                 	jmp	avx512_ptest_instruction
                                                                avx512_ptestmd_instruction:
00012612: B5 04                                                 	mov	ch,4
00012614: EB 14                                                 	jmp	avx512_ptestm_instruction
                                                                avx512_ptestmq_instruction:
00012616: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
0001261D: B5 08                                                 	mov	ch,8
0001261F: EB 09                                                 	jmp	avx512_ptestm_instruction
                                                                avx512_ptestmw_instruction:
00012621: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_ptestmb_instruction:
00012628: 30 ED                                                 	xor	ch,ch
                                                                      avx512_ptestm_instruction:
0001262A: B4 66                                                 	mov	ah,66h
                                                                      avx512_ptest_instruction:
0001262C: 30 C9                                                 	xor	cl,cl
0001262E: 88 25 9C A2 01 00                                     	mov	[opcode_prefix],ah
00012634: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00012639: B0 38                                                 	mov	al,38h
0001263B: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00012642: E9 03 FF FF FF                                        	jmp	avx_cmp_common
                                                                
                                                                mask_shift_instruction_q:
00012647: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                mask_shift_instruction_d:
0001264E: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
00012655: 80 0D 9F A2 01 00 01                                  	or	[immediate_size],1
0001265C: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00012663: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00012668: B0 3A                                                 	mov	al,3Ah
0001266A: EB 3E                                                 	jmp	mask_instruction
                                                                mask_instruction_single_source_b:
0001266C: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00012673: EB 0E                                                 	jmp	mask_instruction_single_source_w
                                                                mask_instruction_single_source_d:
00012675: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                mask_instruction_single_source_q:
0001267C: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                mask_instruction_single_source_w:
00012683: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
0001268A: EB 1E                                                 	jmp	mask_instruction
                                                                mask_instruction_b:
0001268C: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00012693: EB 0E                                                 	jmp	mask_instruction_w
                                                                mask_instruction_d:
00012695: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                mask_instruction_q:
0001269C: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                mask_instruction_w:
000126A3: C6 05 98 A2 01 00 20                                  	mov	[operand_size],32
                                                                mask_instruction:
000126AA: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
000126B1: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
000126B8: A2 A4 A2 01 00                                        	mov	[extended_code],al
000126BD: E8 43 00 00 00                                        	call	take_mask_register
000126C2: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000126C7: F6 05 99 A2 01 00 02                                  	test	[operand_flags],2
000126CE: 75 13                                                 	jnz	mask_instruction_nds_ok
000126D0: AC                                                    	lods	byte [esi]
000126D1: 3C 2C                                                 	cmp	al,','
000126D3: 0F 85 5B E2 FE FF                                     	jne	invalid_operand
000126D9: E8 27 00 00 00                                        	call	take_mask_register
000126DE: A2 9E A2 01 00                                        	mov	[vex_register],al
                                                                      mask_instruction_nds_ok:
000126E3: AC                                                    	lods	byte [esi]
000126E4: 3C 2C                                                 	cmp	al,','
000126E6: 0F 85 48 E2 FE FF                                     	jne	invalid_operand
000126EC: E8 14 00 00 00                                        	call	take_mask_register
000126F1: 88 C3                                                 	mov	bl,al
000126F3: 80 3D 9F A2 01 00 00                                  	cmp	[immediate_size],0
000126FA: 0F 85 CD C5 FF FF                                     	jne	mmx_nomem_imm8
00012700: E9 F0 8F FF FF                                        	jmp	nomem_instruction_ready
                                                                take_mask_register:
00012705: AC                                                    	lods	byte [esi]
00012706: 3C 14                                                 	cmp	al,14h
00012708: 0F 85 26 E2 FE FF                                     	jne	invalid_operand
0001270E: AC                                                    	lods	byte [esi]
                                                                convert_mask_register:
0001270F: 88 C4                                                 	mov	ah,al
00012711: C0 EC 04                                              	shr	ah,4
00012714: 80 FC 05                                              	cmp	ah,5
00012717: 0F 85 17 E2 FE FF                                     	jne	invalid_operand
0001271D: 24 0F                                                 	and	al,1111b
0001271F: C3                                                    	ret
                                                                kmov_instruction:
00012720: A2 A9 A2 01 00                                        	mov	[mmx_size],al
00012725: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
0001272C: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00012733: C6 05 A4 A2 01 00 90                                  	mov	[extended_code],90h
0001273A: AC                                                    	lods	byte [esi]
0001273B: 3C 14                                                 	cmp	al,14h
0001273D: 74 6D                                                 	je	kmov_maskreg
0001273F: 3C 10                                                 	cmp	al,10h
00012741: 0F 84 10 01 00 00                                     	je	kmov_reg
00012747: E8 DE E5 FF FF                                        	call	get_size_operator
0001274C: FE 05 A4 A2 01 00                                     	inc	[extended_code]
00012752: 3C 5B                                                 	cmp	al,'['
00012754: 0F 85 C6 E1 FE FF                                     	jne	invalid_argument
0001275A: E8 27 E6 FF FF                                        	call	get_address
0001275F: AC                                                    	lods	byte [esi]
00012760: 3C 2C                                                 	cmp	al,','
00012762: 0F 85 CC E1 FE FF                                     	jne	invalid_operand
00012768: E8 98 FF FF FF                                        	call	take_mask_register
0001276D: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
                                                                      kmov_with_mem:
00012772: 8A 25 A9 A2 01 00                                     	mov	ah,[mmx_size]
00012778: A0 98 A2 01 00                                        	mov	al,[operand_size]
0001277D: 08 C0                                                 	or	al,al
0001277F: 74 08                                                 	jz	kmov_mem_size_ok
00012781: 38 E0                                                 	cmp	al,ah
00012783: 0F 85 B5 E1 FE FF                                     	jne	invalid_operand_size
                                                                      kmov_mem_size_ok:
00012789: E8 05 00 00 00                                        	call	setup_kmov_prefix
0001278E: E9 87 8D FF FF                                        	jmp	instruction_ready
                                                                      setup_kmov_prefix:
00012793: 80 FC 04                                              	cmp	ah,4
00012796: 72 07                                                 	jb	kmov_w_ok
00012798: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                      kmov_w_ok:
0001279F: F6 C4 05                                              	test	ah,1 or 4
000127A2: 74 07                                                 	jz	kmov_prefix_ok
000127A4: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                      kmov_prefix_ok:
000127AB: C3                                                    	ret
                                                                      kmov_maskreg:
000127AC: AC                                                    	lods	byte [esi]
000127AD: E8 5D FF FF FF                                        	call	convert_mask_register
000127B2: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000127B7: AC                                                    	lods	byte [esi]
000127B8: 3C 2C                                                 	cmp	al,','
000127BA: 0F 85 74 E1 FE FF                                     	jne	invalid_operand
000127C0: AC                                                    	lods	byte [esi]
000127C1: 3C 14                                                 	cmp	al,14h
000127C3: 74 18                                                 	je	kmov_maskreg_maskreg
000127C5: 3C 10                                                 	cmp	al,10h
000127C7: 74 2C                                                 	je	kmov_maskreg_reg
000127C9: E8 5C E5 FF FF                                        	call	get_size_operator
000127CE: 3C 5B                                                 	cmp	al,'['
000127D0: 0F 85 4A E1 FE FF                                     	jne	invalid_argument
000127D6: E8 AB E5 FF FF                                        	call	get_address
000127DB: EB 95                                                 	jmp	kmov_with_mem
                                                                      kmov_maskreg_maskreg:
000127DD: AC                                                    	lods	byte [esi]
000127DE: E8 2C FF FF FF                                        	call	convert_mask_register
000127E3: 88 C3                                                 	mov	bl,al
000127E5: 8A 25 A9 A2 01 00                                     	mov	ah,[mmx_size]
000127EB: E8 A3 FF FF FF                                        	call	setup_kmov_prefix
000127F0: E9 00 8F FF FF                                        	jmp	nomem_instruction_ready
                                                                      kmov_maskreg_reg:
000127F5: 80 05 A4 A2 01 00 02                                  	add	[extended_code],2
000127FC: AC                                                    	lods	byte [esi]
000127FD: E8 81 E4 FF FF                                        	call	convert_register
                                                                      kmov_with_reg:
00012802: 88 C3                                                 	mov	bl,al
00012804: A0 A9 A2 01 00                                        	mov	al,[mmx_size]
00012809: B4 04                                                 	mov	ah,4
0001280B: 38 E0                                                 	cmp	al,ah
0001280D: 76 02                                                 	jbe	kmov_reg_size_check
0001280F: 88 C4                                                 	mov	ah,al
                                                                      kmov_reg_size_check:
00012811: 3A 25 98 A2 01 00                                     	cmp	ah,[operand_size]
00012817: 0F 85 21 E1 FE FF                                     	jne	invalid_operand_size
0001281D: 3C 08                                                 	cmp	al,8
0001281F: 74 16                                                 	je	kmov_f2_w1
00012821: 3C 02                                                 	cmp	al,2
00012823: 77 26                                                 	ja	kmov_f2
00012825: 0F 84 CA 8E FF FF                                     	je	nomem_instruction_ready
0001282B: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00012832: E9 BE 8E FF FF                                        	jmp	nomem_instruction_ready
                                                                      kmov_f2_w1:
00012837: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
0001283E: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00012845: 0F 85 DF E0 FE FF                                     	jne	illegal_instruction
                                                                      kmov_f2:
0001284B: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
00012852: E9 9E 8E FF FF                                        	jmp	nomem_instruction_ready
                                                                      kmov_reg:
00012857: 80 05 A4 A2 01 00 03                                  	add	[extended_code],3
0001285E: AC                                                    	lods	byte [esi]
0001285F: E8 1F E4 FF FF                                        	call	convert_register
00012864: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00012869: AC                                                    	lods	byte [esi]
0001286A: 3C 2C                                                 	cmp	al,','
0001286C: 0F 85 C2 E0 FE FF                                     	jne	invalid_operand
00012872: E8 8E FE FF FF                                        	call	take_mask_register
00012877: EB 89                                                 	jmp	kmov_with_reg
                                                                avx512_pmov_m2_instruction_w1:
00012879: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_pmov_m2_instruction:
00012880: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00012887: E8 51 00 00 00                                        	call	setup_f3_0f_38
0001288C: E8 A2 18 00 00                                        	call	take_avx_register
00012891: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00012896: AC                                                    	lods	byte [esi]
00012897: 3C 2C                                                 	cmp	al,','
00012899: 0F 85 95 E0 FE FF                                     	jne	invalid_operand
0001289F: E8 61 FE FF FF                                        	call	take_mask_register
000128A4: 88 C3                                                 	mov	bl,al
000128A6: E9 4A 8E FF FF                                        	jmp	nomem_instruction_ready
                                                                avx512_pmov_2m_instruction_w1:
000128AB: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_pmov_2m_instruction:
000128B2: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
000128B9: E8 1F 00 00 00                                        	call	setup_f3_0f_38
000128BE: E8 42 FE FF FF                                        	call	take_mask_register
000128C3: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000128C8: AC                                                    	lods	byte [esi]
000128C9: 3C 2C                                                 	cmp	al,','
000128CB: 0F 85 63 E0 FE FF                                     	jne	invalid_operand
000128D1: E8 5D 18 00 00                                        	call	take_avx_register
000128D6: 88 C3                                                 	mov	bl,al
000128D8: E9 18 8E FF FF                                        	jmp	nomem_instruction_ready
                                                                      setup_f3_0f_38:
000128DD: C6 05 A4 A2 01 00 38                                  	mov	[extended_code],38h
000128E4: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
000128E9: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
000128F0: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
000128F7: C3                                                    	ret
                                                                
                                                                vzeroall_instruction:
000128F8: C6 05 98 A2 01 00 20                                  	mov	[operand_size],32
                                                                vzeroupper_instruction:
000128FF: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00012906: A2 A4 A2 01 00                                        	mov	[extended_code],al
0001290B: 80 25 B1 A2 01 00 00                                  	and	[displacement_compression],0
00012912: E8 68 18 00 00                                        	call	store_vex_instruction_code
00012917: E9 54 26 FF FF                                        	jmp	instruction_assembled
                                                                vstmxcsr_instruction:
0001291C: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00012923: E9 A0 D4 FF FF                                        	jmp	stmxcsr_instruction
                                                                
                                                                avx_perm2f128_instruction:
00012928: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
0001292F: 30 ED                                                 	xor	ch,ch
                                                                      avx_instruction_imm8_without_128bit:
00012931: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
00012938: B4 3A                                                 	mov	ah,3Ah
0001293A: EB 21                                                 	jmp	avx_instruction_without_128bit
                                                                avx512_shuf_q_instruction:
0001293C: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
00012943: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
0001294A: B5 08                                                 	mov	ch,8
0001294C: EB E3                                                 	jmp	avx_instruction_imm8_without_128bit
                                                                avx512_shuf_d_instruction:
0001294E: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00012955: B5 04                                                 	mov	ch,4
00012957: EB D8                                                 	jmp	avx_instruction_imm8_without_128bit
                                                                avx_permd_instruction:
00012959: B4 38                                                 	mov	ah,38h
0001295B: B5 04                                                 	mov	ch,4
                                                                      avx_instruction_without_128bit:
0001295D: 30 C9                                                 	xor	cl,cl
0001295F: E8 1D 00 00 00                                        	call	setup_avx_66_supplemental
00012964: E8 CA 17 00 00                                        	call	take_avx_register
00012969: 80 FC 20                                              	cmp	ah,32
0001296C: 0F 82 CC DF FE FF                                     	jb	invalid_operand_size
00012972: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00012977: E8 56 F1 FF FF                                        	call	take_avx512_mask
0001297C: E9 9B EE FF FF                                        	jmp	avx_vex_reg
                                                                      setup_avx_66_supplemental:
00012981: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00012988: 88 2D A1 A2 01 00                                     	mov	[broadcast_size],ch
0001298E: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
00012994: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0001299B: 88 25 A4 A2 01 00                                     	mov	[extended_code],ah
000129A1: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
000129A6: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
000129AD: C3                                                    	ret
                                                                avx_permq_instruction:
000129AE: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
000129B5: B5 08                                                 	mov	ch,8
000129B7: EB 0D                                                 	jmp	avx_permil_instruction
                                                                avx_permilpd_instruction:
000129B9: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
000129C0: B5 08                                                 	mov	ch,8
000129C2: EB 02                                                 	jmp	avx_permil_instruction
                                                                avx_permilps_instruction:
000129C4: B5 04                                                 	mov	ch,4
                                                                      avx_permil_instruction:
000129C6: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
000129CD: 30 C9                                                 	xor	cl,cl
000129CF: B4 3A                                                 	mov	ah,3Ah
000129D1: E8 AB FF FF FF                                        	call	setup_avx_66_supplemental
000129D6: E8 58 17 00 00                                        	call	take_avx_register
000129DB: 80 3D A5 A2 01 00 04                                  	cmp	[supplemental_code],4
000129E2: 73 09                                                 	jae	avx_permil_size_ok
000129E4: 80 FC 20                                              	cmp	ah,32
000129E7: 0F 82 51 DF FE FF                                     	jb	invalid_operand_size
                                                                      avx_permil_size_ok:
000129ED: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000129F2: E8 DB F0 FF FF                                        	call	take_avx512_mask
000129F7: AC                                                    	lods	byte [esi]
000129F8: 3C 2C                                                 	cmp	al,','
000129FA: 0F 85 34 DF FE FF                                     	jne	invalid_operand
00012A00: E8 64 EF FF FF                                        	call	take_avx_rm
00012A05: 0F 83 7A C2 FF FF                                     	jnc	mmx_imm8
00012A0B: 88 C3                                                 	mov	bl,al
00012A0D: 80 3E 2C                                              	cmp	byte [esi],','
00012A10: 0F 85 1E DF FE FF                                     	jne	invalid_operand
00012A16: 8A 46 01                                              	mov	al,[esi+1]
00012A19: 3C 11                                                 	cmp	al,11h
00012A1B: 75 03                                                 	jne	avx_permil_rm_or_imm8
00012A1D: 8A 46 03                                              	mov	al,[esi+3]
                                                                      avx_permil_rm_or_imm8:
00012A20: 3C 28                                                 	cmp	al,'('
00012A22: 0F 84 A5 C2 FF FF                                     	je	mmx_nomem_imm8
00012A28: 88 1D 9E A2 01 00                                     	mov	[vex_register],bl
00012A2E: 46                                                    	inc	esi
00012A2F: C6 05 A4 A2 01 00 38                                  	mov	[extended_code],38h
00012A36: A0 A5 A2 01 00                                        	mov	al,[supplemental_code]
00012A3B: 3C 04                                                 	cmp	al,4
00012A3D: 72 0C                                                 	jb	avx_permq_rm
00012A3F: 80 05 A5 A2 01 00 08                                  	add	[supplemental_code],8
00012A46: E9 1C EE FF FF                                        	jmp	avx_regs_rm
                                                                      avx_permq_rm:
00012A4B: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00012A52: C0 E0 05                                              	shl	al,5
00012A55: F6 D8                                                 	neg	al
00012A57: 04 36                                                 	add	al,36h
00012A59: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00012A5E: E9 04 EE FF FF                                        	jmp	avx_regs_rm
                                                                vpermil_2pd_instruction:
00012A63: C6 05 9F A2 01 00 FE                                  	mov	[immediate_size],-2
00012A6A: A2 F4 A1 01 00                                        	mov	byte [value],al
00012A6F: B0 49                                                 	mov	al,49h
00012A71: EB 1E                                                 	jmp	vpermil2_instruction_setup
                                                                vpermil_2ps_instruction:
00012A73: C6 05 9F A2 01 00 FE                                  	mov	[immediate_size],-2
00012A7A: A2 F4 A1 01 00                                        	mov	byte [value],al
00012A7F: B0 48                                                 	mov	al,48h
00012A81: EB 0E                                                 	jmp	vpermil2_instruction_setup
                                                                vpermil2_instruction:
00012A83: C6 05 9F A2 01 00 FD                                  	mov	[immediate_size],-3
00012A8A: C6 05 F4 A1 01 00 00                                  	mov	byte [value],0
                                                                      vpermil2_instruction_setup:
00012A91: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00012A98: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00012A9F: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00012AA4: B0 3A                                                 	mov	al,3Ah
00012AA6: 30 C9                                                 	xor	cl,cl
00012AA8: E9 30 ED FF FF                                        	jmp	avx_instruction
                                                                
                                                                avx_shift_q_instruction_evex:
00012AAD: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
                                                                avx_shift_q_instruction:
00012AB4: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
00012ABB: B1 08                                                 	mov	cl,8
00012ABD: EB 06                                                 	jmp	avx_shift_instruction
                                                                avx_shift_d_instruction:
00012ABF: B1 04                                                 	mov	cl,4
00012AC1: EB 02                                                 	jmp	avx_shift_instruction
                                                                avx_shift_bw_instruction:
00012AC3: 30 C9                                                 	xor	cl,cl
                                                                       avx_shift_instruction:
00012AC5: 88 0D A1 A2 01 00                                     	mov	[broadcast_size],cl
00012ACB: C6 05 A9 A2 01 00 00                                  	mov	[mmx_size],0
00012AD2: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00012AD9: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00012AE0: A2 A4 A2 01 00                                        	mov	[extended_code],al
00012AE5: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
00012AEC: E8 42 16 00 00                                        	call	take_avx_register
00012AF1: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00012AF6: E8 D7 EF FF FF                                        	call	take_avx512_mask
00012AFB: AC                                                    	lods	byte [esi]
00012AFC: 3C 2C                                                 	cmp	al,','
00012AFE: 0F 85 30 DE FE FF                                     	jne	invalid_operand
00012B04: 30 C9                                                 	xor	cl,cl
00012B06: 86 0D 98 A2 01 00                                     	xchg	cl,[operand_size]
00012B0C: AC                                                    	lods	byte [esi]
00012B0D: E8 18 E2 FF FF                                        	call	get_size_operator
00012B12: 3C 5B                                                 	cmp	al,'['
00012B14: 0F 84 C0 00 00 00                                     	je	avx_shift_reg_mem
00012B1A: 88 0D 98 A2 01 00                                     	mov	[operand_size],cl
00012B20: 3C 10                                                 	cmp	al,10h
00012B22: 0F 85 0C DE FE FF                                     	jne	invalid_operand
00012B28: AC                                                    	lods	byte [esi]
00012B29: E8 14 16 00 00                                        	call	convert_avx_register
00012B2E: A2 9E A2 01 00                                        	mov	[vex_register],al
00012B33: AC                                                    	lods	byte [esi]
00012B34: 3C 2C                                                 	cmp	al,','
00012B36: 0F 85 F8 DD FE FF                                     	jne	invalid_operand
00012B3C: 56                                                    	push	esi
00012B3D: 30 C9                                                 	xor	cl,cl
00012B3F: 86 0D 98 A2 01 00                                     	xchg	cl,[operand_size]
00012B45: AC                                                    	lods	byte [esi]
00012B46: E8 DF E1 FF FF                                        	call	get_size_operator
00012B4B: 3C 10                                                 	cmp	al,10h
00012B4D: 74 48                                                 	je	avx_shift_reg_reg_reg
00012B4F: 5E                                                    	pop	esi
00012B50: 3C 5B                                                 	cmp	al,'['
00012B52: 74 57                                                 	je	avx_shift_reg_reg_mem
00012B54: 86 0D 98 A2 01 00                                     	xchg	cl,[operand_size]
00012B5A: F6 C1 FE                                              	test	cl,not 1
00012B5D: 0F 85 DB DD FE FF                                     	jnz	invalid_operand_size
00012B63: 4E                                                    	dec	esi
00012B64: E8 07 00 00 00                                        	call	convert_avx_shift_opcode
00012B69: 88 C3                                                 	mov	bl,al
00012B6B: E9 5D C1 FF FF                                        	jmp	mmx_nomem_imm8
                                                                      convert_avx_shift_opcode:
00012B70: A0 A4 A2 01 00                                        	mov	al,[extended_code]
00012B75: 88 C4                                                 	mov	ah,al
00012B77: 80 E4 0F                                              	and	ah,1111b
00012B7A: 80 C4 70                                              	add	ah,70h
00012B7D: 88 25 A4 A2 01 00                                     	mov	[extended_code],ah
00012B83: C0 E8 04                                              	shr	al,4
00012B86: 2C 0C                                                 	sub	al,0Ch
00012B88: D0 E0                                                 	shl	al,1
00012B8A: 86 05 A6 A2 01 00                                     	xchg	al,[postbyte_register]
00012B90: 86 05 9E A2 01 00                                     	xchg	al,[vex_register]
00012B96: C3                                                    	ret
                                                                      avx_shift_reg_reg_reg:
00012B97: 58                                                    	pop	eax
00012B98: AC                                                    	lods	byte [esi]
00012B99: E8 7D E1 FF FF                                        	call	convert_xmm_register
00012B9E: 86 0D 98 A2 01 00                                     	xchg	cl,[operand_size]
00012BA4: 88 C3                                                 	mov	bl,al
00012BA6: E9 4A 8B FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_shift_reg_reg_mem:
00012BAB: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
00012BB2: 51                                                    	push	ecx
00012BB3: AC                                                    	lods	byte [esi]
00012BB4: E8 71 E1 FF FF                                        	call	get_size_operator
00012BB9: E8 C8 E1 FF FF                                        	call	get_address
00012BBE: 58                                                    	pop	eax
00012BBF: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
00012BC5: 84 C0                                                 	test	al,al
00012BC7: 0F 84 4D 89 FF FF                                     	jz	instruction_ready
00012BCD: 3C 10                                                 	cmp	al,16
00012BCF: 0F 85 69 DD FE FF                                     	jne	invalid_operand_size
00012BD5: E9 40 89 FF FF                                        	jmp	instruction_ready
                                                                      avx_shift_reg_mem:
00012BDA: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00012BE1: E8 CA ED FF FF                                        	call	take_avx_mem
00012BE6: E8 85 FF FF FF                                        	call	convert_avx_shift_opcode
00012BEB: E9 95 C0 FF FF                                        	jmp	mmx_imm8
                                                                avx_shift_dq_instruction:
00012BF0: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00012BF5: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00012BFC: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00012C03: C6 05 A4 A2 01 00 73                                  	mov	[extended_code],73h
00012C0A: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
00012C11: C6 05 A9 A2 01 00 00                                  	mov	[mmx_size],0
00012C18: E8 16 15 00 00                                        	call	take_avx_register
00012C1D: A2 9E A2 01 00                                        	mov	[vex_register],al
00012C22: AC                                                    	lods	byte [esi]
00012C23: 3C 2C                                                 	cmp	al,','
00012C25: 0F 85 09 DD FE FF                                     	jne	invalid_operand
00012C2B: AC                                                    	lods	byte [esi]
00012C2C: E8 F9 E0 FF FF                                        	call	get_size_operator
00012C31: 3C 5B                                                 	cmp	al,'['
00012C33: 74 15                                                 	je	avx_shift_dq_reg_mem
00012C35: 3C 10                                                 	cmp	al,10h
00012C37: 0F 85 F7 DC FE FF                                     	jne	invalid_operand
00012C3D: AC                                                    	lods	byte [esi]
00012C3E: E8 FF 14 00 00                                        	call	convert_avx_register
00012C43: 88 C3                                                 	mov	bl,al
00012C45: E9 83 C0 FF FF                                        	jmp	mmx_nomem_imm8
                                                                      avx_shift_dq_reg_mem:
00012C4A: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00012C51: E8 30 E1 FF FF                                        	call	get_address
00012C56: E9 2A C0 FF FF                                        	jmp	mmx_imm8
                                                                avx512_rotate_q_instruction:
00012C5B: B1 08                                                 	mov	cl,8
00012C5D: 08 0D 9B A2 01 00                                     	or	[rex_prefix],cl
00012C63: EB 02                                                 	jmp	avx512_rotate_instruction
                                                                avx512_rotate_d_instruction:
00012C65: B1 04                                                 	mov	cl,4
                                                                      avx512_rotate_instruction:
00012C67: 88 0D A1 A2 01 00                                     	mov	[broadcast_size],cl
00012C6D: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00012C72: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00012C79: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00012C80: C6 05 A4 A2 01 00 72                                  	mov	[extended_code],72h
00012C87: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00012C8E: C6 05 A9 A2 01 00 00                                  	mov	[mmx_size],0
00012C95: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
00012C9C: E8 92 14 00 00                                        	call	take_avx_register
00012CA1: A2 9E A2 01 00                                        	mov	[vex_register],al
00012CA6: E8 27 EE FF FF                                        	call	take_avx512_mask
00012CAB: E9 88 EB FF FF                                        	jmp	avx_vex_reg_ok
                                                                
                                                                avx_pmovsxbq_instruction:
00012CB0: B1 02                                                 	mov	cl,2
00012CB2: EB 06                                                 	jmp	avx_pmovsx_instruction
                                                                avx_pmovsxbd_instruction:
00012CB4: B1 04                                                 	mov	cl,4
00012CB6: EB 02                                                 	jmp	avx_pmovsx_instruction
                                                                avx_pmovsxbw_instruction:
00012CB8: B1 08                                                 	mov	cl,8
                                                                      avx_pmovsx_instruction:
00012CBA: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
00012CC0: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
00012CC7: E8 7D D0 FF FF                                        	call	setup_66_0f_38
00012CCC: E8 62 14 00 00                                        	call	take_avx_register
00012CD1: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00012CD6: E8 F7 ED FF FF                                        	call	take_avx512_mask
00012CDB: AC                                                    	lods	byte [esi]
00012CDC: 3C 2C                                                 	cmp	al,','
00012CDE: 0F 85 50 DC FE FF                                     	jne	invalid_operand
00012CE4: 30 C0                                                 	xor	al,al
00012CE6: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
00012CEC: 0F BC C8                                              	bsf	ecx,eax
00012CEF: 80 E9 04                                              	sub	cl,4
00012CF2: D2 25 A9 A2 01 00                                     	shl	[mmx_size],cl
00012CF8: 50                                                    	push	eax
00012CF9: AC                                                    	lods	byte [esi]
00012CFA: E8 2B E0 FF FF                                        	call	get_size_operator
00012CFF: 3C 10                                                 	cmp	al,10h
00012D01: 74 2D                                                 	je	avx_pmovsx_reg_reg
00012D03: 3C 5B                                                 	cmp	al,'['
00012D05: 0F 85 29 DC FE FF                                     	jne	invalid_operand
00012D0B: E8 76 E0 FF FF                                        	call	get_address
00012D10: 58                                                    	pop	eax
00012D11: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
00012D17: 08 C0                                                 	or	al,al
00012D19: 0F 84 FB 87 FF FF                                     	jz	instruction_ready
00012D1F: 3A 05 A9 A2 01 00                                     	cmp	al,[mmx_size]
00012D25: 0F 85 13 DC FE FF                                     	jne	invalid_operand_size
00012D2B: E9 EA 87 FF FF                                        	jmp	instruction_ready
                                                                      avx_pmovsx_reg_reg:
00012D30: AC                                                    	lods	byte [esi]
00012D31: E8 0C 14 00 00                                        	call	convert_avx_register
00012D36: 88 C3                                                 	mov	bl,al
00012D38: 3A 25 A9 A2 01 00                                     	cmp	ah,[mmx_size]
00012D3E: 74 0F                                                 	je	avx_pmovsx_xmmreg_reg_size_ok
00012D40: 0F 82 F8 DB FE FF                                     	jb	invalid_operand_size
00012D46: 80 FC 10                                              	cmp	ah,16
00012D49: 0F 85 EF DB FE FF                                     	jne	invalid_operand_size
                                                                      avx_pmovsx_xmmreg_reg_size_ok:
00012D4F: 58                                                    	pop	eax
00012D50: A2 98 A2 01 00                                        	mov	[operand_size],al
00012D55: E9 9B 89 FF FF                                        	jmp	nomem_instruction_ready
                                                                avx512_pmovqb_instruction:
00012D5A: B1 02                                                 	mov	cl,2
00012D5C: EB 06                                                 	jmp	avx512_pmov_instruction
                                                                avx512_pmovdb_instruction:
00012D5E: B1 04                                                 	mov	cl,4
00012D60: EB 02                                                 	jmp	avx512_pmov_instruction
                                                                avx512_pmovwb_instruction:
00012D62: B1 08                                                 	mov	cl,8
                                                                      avx512_pmov_instruction:
00012D64: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
00012D6A: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00012D71: C6 05 A4 A2 01 00 38                                  	mov	[extended_code],38h
00012D78: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00012D7D: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00012D84: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00012D8B: AC                                                    	lods	byte [esi]
00012D8C: E8 99 DF FF FF                                        	call	get_size_operator
00012D91: 3C 10                                                 	cmp	al,10h
00012D93: 74 67                                                 	je	avx512_pmov_reg
00012D95: 3C 5B                                                 	cmp	al,'['
00012D97: 0F 85 97 DB FE FF                                     	jne	invalid_operand
00012D9D: E8 E4 DF FF FF                                        	call	get_address
00012DA2: 80 0D 99 A2 01 00 20                                  	or	[operand_flags],20h
00012DA9: E8 19 00 00 00                                        	call	avx512_pmov_common
00012DAE: 08 C0                                                 	or	al,al
00012DB0: 0F 84 64 87 FF FF                                     	jz	instruction_ready
00012DB6: 3A 05 A9 A2 01 00                                     	cmp	al,[mmx_size]
00012DBC: 0F 85 7C DB FE FF                                     	jne	invalid_operand_size
00012DC2: E9 53 87 FF FF                                        	jmp	instruction_ready
                                                                      avx512_pmov_common:
00012DC7: E8 06 ED FF FF                                        	call	take_avx512_mask
00012DCC: 30 C0                                                 	xor	al,al
00012DCE: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
00012DD4: 50                                                    	push	eax
00012DD5: AC                                                    	lods	byte [esi]
00012DD6: 3C 2C                                                 	cmp	al,','
00012DD8: 0F 85 56 DB FE FF                                     	jne	invalid_operand
00012DDE: E8 50 13 00 00                                        	call	take_avx_register
00012DE3: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00012DE8: 88 E0                                                 	mov	al,ah
00012DEA: 88 CC                                                 	mov	ah,cl
00012DEC: 0F BC C8                                              	bsf	ecx,eax
00012DEF: 80 E9 04                                              	sub	cl,4
00012DF2: D2 25 A9 A2 01 00                                     	shl	[mmx_size],cl
00012DF8: 88 E1                                                 	mov	cl,ah
00012DFA: 58                                                    	pop	eax
00012DFB: C3                                                    	ret
                                                                      avx512_pmov_reg:
00012DFC: AC                                                    	lods	byte [esi]
00012DFD: E8 40 13 00 00                                        	call	convert_avx_register
00012E02: 88 C3                                                 	mov	bl,al
00012E04: E8 BE FF FF FF                                        	call	avx512_pmov_common
00012E09: 3A 05 A9 A2 01 00                                     	cmp	al,[mmx_size]
00012E0F: 0F 84 E0 88 FF FF                                     	je	nomem_instruction_ready
00012E15: 0F 82 23 DB FE FF                                     	jb	invalid_operand_size
00012E1B: 3C 10                                                 	cmp	al,16
00012E1D: 0F 85 1B DB FE FF                                     	jne	invalid_operand_size
00012E23: E9 CD 88 FF FF                                        	jmp	nomem_instruction_ready
                                                                
                                                                avx_broadcast_128_instruction_noevex:
00012E28: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00012E2F: B1 10                                                 	mov	cl,10h
00012E31: EB 4D                                                 	jmp	avx_broadcast_instruction
                                                                avx512_broadcast_32x2_instruction:
00012E33: B1 08                                                 	mov	cl,08h
00012E35: EB 15                                                 	jmp	avx_broadcast_instruction_evex
                                                                avx512_broadcast_32x4_instruction:
00012E37: B1 10                                                 	mov	cl,10h
00012E39: EB 11                                                 	jmp	avx_broadcast_instruction_evex
                                                                avx512_broadcast_32x8_instruction:
00012E3B: B1 20                                                 	mov	cl,20h
00012E3D: EB 0D                                                 	jmp	avx_broadcast_instruction_evex
                                                                avx512_broadcast_64x2_instruction:
00012E3F: B1 10                                                 	mov	cl,10h
00012E41: EB 02                                                 	jmp	avx_broadcast_instruction_w1_evex
                                                                avx512_broadcast_64x4_instruction:
00012E43: B1 20                                                 	mov	cl,20h
                                                                      avx_broadcast_instruction_w1_evex:
00012E45: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                      avx_broadcast_instruction_evex:
00012E4C: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00012E53: EB 2B                                                 	jmp	avx_broadcast_instruction
                                                                avx_broadcastss_instruction:
00012E55: B1 04                                                 	mov	cl,4
00012E57: EB 27                                                 	jmp	avx_broadcast_instruction
                                                                avx_broadcastsd_instruction:
00012E59: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
00012E60: B1 08                                                 	mov	cl,8
00012E62: EB 1C                                                 	jmp	avx_broadcast_instruction
                                                                avx_pbroadcastb_instruction:
00012E64: B1 01                                                 	mov	cl,1
00012E66: EB 11                                                 	jmp	avx_broadcast_pi_instruction
                                                                avx_pbroadcastw_instruction:
00012E68: B1 02                                                 	mov	cl,2
00012E6A: EB 0D                                                 	jmp	avx_broadcast_pi_instruction
                                                                avx_pbroadcastd_instruction:
00012E6C: B1 04                                                 	mov	cl,4
00012E6E: EB 09                                                 	jmp	avx_broadcast_pi_instruction
                                                                avx_pbroadcastq_instruction:
00012E70: B1 08                                                 	mov	cl,8
00012E72: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
                                                                      avx_broadcast_pi_instruction:
00012E79: 80 0D 99 A2 01 00 40                                  	or	[operand_flags],40h
                                                                      avx_broadcast_instruction:
00012E80: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00012E87: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00012E8C: B0 38                                                 	mov	al,38h
00012E8E: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
00012E94: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00012E9B: A2 A4 A2 01 00                                        	mov	[extended_code],al
00012EA0: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
00012EA7: E8 87 12 00 00                                        	call	take_avx_register
00012EAC: 3A 25 A9 A2 01 00                                     	cmp	ah,[mmx_size]
00012EB2: 0F 84 86 DA FE FF                                     	je	invalid_operand_size
00012EB8: F6 05 99 A2 01 00 40                                  	test	[operand_flags],40h
00012EBF: 75 1B                                                 	jnz	avx_broadcast_destination_size_ok
00012EC1: 80 3D A9 A2 01 00 04                                  	cmp	[mmx_size],4
00012EC8: 74 12                                                 	je	avx_broadcast_destination_size_ok
00012ECA: 80 3D A5 A2 01 00 59                                  	cmp	[supplemental_code],59h
00012ED1: 74 09                                                 	je	avx_broadcast_destination_size_ok
00012ED3: 80 FC 10                                              	cmp	ah,16
00012ED6: 0F 84 62 DA FE FF                                     	je	invalid_operand_size
                                                                      avx_broadcast_destination_size_ok:
00012EDC: 30 E4                                                 	xor	ah,ah
00012EDE: 86 25 98 A2 01 00                                     	xchg	ah,[operand_size]
00012EE4: 50                                                    	push	eax
00012EE5: E8 E8 EB FF FF                                        	call	take_avx512_mask
00012EEA: AC                                                    	lods	byte [esi]
00012EEB: 3C 2C                                                 	cmp	al,','
00012EED: 0F 85 41 DA FE FF                                     	jne	invalid_operand
00012EF3: AC                                                    	lods	byte [esi]
00012EF4: E8 31 DE FF FF                                        	call	get_size_operator
00012EF9: 3C 10                                                 	cmp	al,10h
00012EFB: 74 40                                                 	je	avx_broadcast_reg_reg
00012EFD: 3C 5B                                                 	cmp	al,'['
00012EFF: 0F 85 2F DA FE FF                                     	jne	invalid_operand
00012F05: E8 7C DE FF FF                                        	call	get_address
00012F0A: 58                                                    	pop	eax
00012F0B: 86 25 98 A2 01 00                                     	xchg	ah,[operand_size]
00012F11: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00012F16: A0 A1 A2 01 00                                        	mov	al,[broadcast_size]
00012F1B: A0 A9 A2 01 00                                        	mov	al,[mmx_size]
00012F20: 38 E0                                                 	cmp	al,ah
00012F22: 0F 84 F2 85 FF FF                                     	je	instruction_ready
00012F28: 08 C0                                                 	or	al,al
00012F2A: 0F 84 EA 85 FF FF                                     	jz	instruction_ready
00012F30: 08 E4                                                 	or	ah,ah
00012F32: 0F 84 E2 85 FF FF                                     	jz	instruction_ready
00012F38: E9 01 DA FE FF                                        	jmp	invalid_operand_size
                                                                      avx_broadcast_reg_reg:
00012F3D: AC                                                    	lods	byte [esi]
00012F3E: F6 05 99 A2 01 00 40                                  	test	[operand_flags],40h
00012F45: 74 0C                                                 	jz	avx_broadcast_reg_avx_reg
00012F47: 3C 60                                                 	cmp	al,60h
00012F49: 72 47                                                 	jb	avx_broadcast_reg_general_reg
00012F4B: 3C 80                                                 	cmp	al,80h
00012F4D: 72 04                                                 	jb	avx_broadcast_reg_avx_reg
00012F4F: 3C C0                                                 	cmp	al,0C0h
00012F51: 72 3F                                                 	jb	avx_broadcast_reg_general_reg
                                                                      avx_broadcast_reg_avx_reg:
00012F53: E8 EA 11 00 00                                        	call	convert_avx_register
00012F58: 88 C3                                                 	mov	bl,al
00012F5A: A0 A9 A2 01 00                                        	mov	al,[mmx_size]
00012F5F: 08 C0                                                 	or	al,al
00012F61: 74 11                                                 	jz	avx_broadcast_reg_avx_reg_size_ok
00012F63: 80 FC 10                                              	cmp	ah,16
00012F66: 0F 85 D2 D9 FE FF                                     	jne	invalid_operand_size
00012F6C: 38 E0                                                 	cmp	al,ah
00012F6E: 0F 83 C0 D9 FE FF                                     	jae	invalid_operand
                                                                      avx_broadcast_reg_avx_reg_size_ok:
00012F74: 58                                                    	pop	eax
00012F75: 86 25 98 A2 01 00                                     	xchg	ah,[operand_size]
00012F7B: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00012F80: F6 05 9D A2 01 00 02                                  	test	[vex_required],2
00012F87: 0F 85 A7 D9 FE FF                                     	jnz	invalid_operand
00012F8D: E9 63 87 FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_broadcast_reg_general_reg:
00012F92: E8 EC DC FF FF                                        	call	convert_register
00012F97: 88 C3                                                 	mov	bl,al
00012F99: A0 A9 A2 01 00                                        	mov	al,[mmx_size]
00012F9E: 08 C0                                                 	or	al,al
00012FA0: 74 13                                                 	jz	avx_broadcast_reg_general_reg_size_ok
00012FA2: 38 E0                                                 	cmp	al,ah
00012FA4: 74 0F                                                 	je	avx_broadcast_reg_general_reg_size_ok
00012FA6: 0F 87 92 D9 FE FF                                     	ja	invalid_operand_size
00012FAC: 80 FC 04                                              	cmp	ah,4
00012FAF: 0F 85 89 D9 FE FF                                     	jne	invalid_operand_size
                                                                      avx_broadcast_reg_general_reg_size_ok:
00012FB5: 3C 04                                                 	cmp	al,4
00012FB7: 72 0D                                                 	jb	avx_broadcast_reg_general_reg_ready
00012FB9: 3C 08                                                 	cmp	al,8
00012FBB: B0 03                                                 	mov	al,3
00012FBD: 75 07                                                 	jne	avx_broadcast_reg_general_reg_ready
00012FBF: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                      avx_broadcast_reg_general_reg_ready:
00012FC6: 04 79                                                 	add	al,7Ah-1
00012FC8: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00012FCD: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00012FD4: 58                                                    	pop	eax
00012FD5: 86 25 98 A2 01 00                                     	xchg	ah,[operand_size]
00012FDB: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00012FE0: E9 10 87 FF FF                                        	jmp	nomem_instruction_ready
                                                                
                                                                avx512_extract_64x4_instruction:
00012FE5: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_extract_32x8_instruction:
00012FEC: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00012FF3: B1 20                                                 	mov	cl,32
00012FF5: EB 1B                                                 	jmp	avx_extractf_instruction
                                                                avx512_extract_64x2_instruction:
00012FF7: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_extract_32x4_instruction:
00012FFE: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
00013005: B1 10                                                 	mov	cl,16
00013007: EB 09                                                 	jmp	avx_extractf_instruction
                                                                avx_extractf128_instruction:
00013009: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00013010: B1 10                                                 	mov	cl,16
                                                                      avx_extractf_instruction:
00013012: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
00013018: E8 1E CA FF FF                                        	call	setup_66_0f_3a
0001301D: AC                                                    	lods	byte [esi]
0001301E: E8 07 DD FF FF                                        	call	get_size_operator
00013023: 3C 10                                                 	cmp	al,10h
00013025: 74 4E                                                 	je	avx_extractf_reg
00013027: 3C 5B                                                 	cmp	al,'['
00013029: 0F 85 05 D9 FE FF                                     	jne	invalid_operand
0001302F: E8 52 DD FF FF                                        	call	get_address
00013034: 30 C0                                                 	xor	al,al
00013036: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
0001303C: 08 C0                                                 	or	al,al
0001303E: 74 0C                                                 	jz	avx_extractf_mem_size_ok
00013040: 3A 05 A9 A2 01 00                                     	cmp	al,[mmx_size]
00013046: 0F 85 F2 D8 FE FF                                     	jne	invalid_operand_size
                                                                      avx_extractf_mem_size_ok:
0001304C: E8 81 EA FF FF                                        	call	take_avx512_mask
00013051: AC                                                    	lods	byte [esi]
00013052: 3C 2C                                                 	cmp	al,','
00013054: 0F 85 DA D8 FE FF                                     	jne	invalid_operand
0001305A: E8 D4 10 00 00                                        	call	take_avx_register
0001305F: 3A 25 A9 A2 01 00                                     	cmp	ah,[mmx_size]
00013065: 0F 86 D3 D8 FE FF                                     	jbe	invalid_operand_size
0001306B: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00013070: E9 10 BC FF FF                                        	jmp	mmx_imm8
                                                                      avx_extractf_reg:
00013075: AC                                                    	lods	byte [esi]
00013076: E8 C7 10 00 00                                        	call	convert_avx_register
0001307B: 3A 25 A9 A2 01 00                                     	cmp	ah,[mmx_size]
00013081: 0F 85 B7 D8 FE FF                                     	jne	invalid_operand_size
00013087: 50                                                    	push	eax
00013088: E8 45 EA FF FF                                        	call	take_avx512_mask
0001308D: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
00013094: AC                                                    	lods	byte [esi]
00013095: 3C 2C                                                 	cmp	al,','
00013097: 0F 85 97 D8 FE FF                                     	jne	invalid_operand
0001309D: E8 91 10 00 00                                        	call	take_avx_register
000130A2: 3A 25 A9 A2 01 00                                     	cmp	ah,[mmx_size]
000130A8: 0F 86 90 D8 FE FF                                     	jbe	invalid_operand_size
000130AE: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000130B3: 5B                                                    	pop	ebx
000130B4: E9 14 BC FF FF                                        	jmp	mmx_nomem_imm8
                                                                avx512_insert_64x4_instruction:
000130B9: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_insert_32x8_instruction:
000130C0: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
000130C7: B1 20                                                 	mov	cl,32
000130C9: EB 1B                                                 	jmp	avx_insertf_instruction
                                                                avx512_insert_64x2_instruction:
000130CB: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_insert_32x4_instruction:
000130D2: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
000130D9: B1 10                                                 	mov	cl,16
000130DB: EB 09                                                 	jmp	avx_insertf_instruction
                                                                avx_insertf128_instruction:
000130DD: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
000130E4: B1 10                                                 	mov	cl,16
                                                                      avx_insertf_instruction:
000130E6: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
000130EC: C6 05 A1 A2 01 00 00                                  	mov	[broadcast_size],0
000130F3: E8 43 C9 FF FF                                        	call	setup_66_0f_3a
000130F8: E8 36 10 00 00                                        	call	take_avx_register
000130FD: 3A 25 A9 A2 01 00                                     	cmp	ah,[mmx_size]
00013103: 0F 86 2B D8 FE FF                                     	jbe	invalid_operand
00013109: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0001310E: E8 BF E9 FF FF                                        	call	take_avx512_mask
00013113: AC                                                    	lods	byte [esi]
00013114: 3C 2C                                                 	cmp	al,','
00013116: 0F 85 18 D8 FE FF                                     	jne	invalid_operand
0001311C: E8 12 10 00 00                                        	call	take_avx_register
00013121: A2 9E A2 01 00                                        	mov	[vex_register],al
00013126: A0 A9 A2 01 00                                        	mov	al,[mmx_size]
0001312B: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
00013131: 50                                                    	push	eax
00013132: AC                                                    	lods	byte [esi]
00013133: 3C 2C                                                 	cmp	al,','
00013135: 0F 85 F9 D7 FE FF                                     	jne	invalid_operand
0001313B: AC                                                    	lods	byte [esi]
0001313C: E8 E9 DB FF FF                                        	call	get_size_operator
00013141: 3C 10                                                 	cmp	al,10h
00013143: 74 18                                                 	je	avx_insertf_reg_reg_reg
00013145: 3C 5B                                                 	cmp	al,'['
00013147: 0F 85 E7 D7 FE FF                                     	jne	invalid_operand
0001314D: E8 34 DC FF FF                                        	call	get_address
00013152: 58                                                    	pop	eax
00013153: A2 98 A2 01 00                                        	mov	[operand_size],al
00013158: E9 28 BB FF FF                                        	jmp	mmx_imm8
                                                                      avx_insertf_reg_reg_reg:
0001315D: AC                                                    	lods	byte [esi]
0001315E: E8 DF 0F 00 00                                        	call	convert_avx_register
00013163: 88 C3                                                 	mov	bl,al
00013165: 58                                                    	pop	eax
00013166: A2 98 A2 01 00                                        	mov	[operand_size],al
0001316B: E9 5D BB FF FF                                        	jmp	mmx_nomem_imm8
                                                                avx_extract_b_instruction:
00013170: B1 01                                                 	mov	cl,1
00013172: EB 11                                                 	jmp	avx_extract_instruction
                                                                avx_extract_w_instruction:
00013174: B1 02                                                 	mov	cl,2
00013176: EB 0D                                                 	jmp	avx_extract_instruction
                                                                avx_extract_q_instruction:
00013178: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
0001317F: B1 08                                                 	mov	cl,8
00013181: EB 02                                                 	jmp	avx_extract_instruction
                                                                avx_extract_d_instruction:
00013183: B1 04                                                 	mov	cl,4
                                                                      avx_extract_instruction:
00013185: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
0001318B: E8 AB C8 FF FF                                        	call	setup_66_0f_3a
00013190: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
00013197: AC                                                    	lods	byte [esi]
00013198: E8 8D DB FF FF                                        	call	get_size_operator
0001319D: 3C 10                                                 	cmp	al,10h
0001319F: 74 50                                                 	je	avx_extractps_reg
000131A1: 3C 5B                                                 	cmp	al,'['
000131A3: 0F 85 8B D7 FE FF                                     	jne	invalid_operand
000131A9: E8 D8 DB FF FF                                        	call	get_address
000131AE: A0 A9 A2 01 00                                        	mov	al,[mmx_size]
000131B3: F6 D0                                                 	not	al
000131B5: 20 05 98 A2 01 00                                     	and	[operand_size],al
000131BB: 0F 85 7D D7 FE FF                                     	jnz	invalid_operand_size
000131C1: AC                                                    	lods	byte [esi]
000131C2: 3C 2C                                                 	cmp	al,','
000131C4: 0F 85 6A D7 FE FF                                     	jne	invalid_operand
000131CA: AC                                                    	lods	byte [esi]
000131CB: E8 5A DB FF FF                                        	call	get_size_operator
000131D0: 3C 10                                                 	cmp	al,10h
000131D2: 0F 85 5C D7 FE FF                                     	jne	invalid_operand
000131D8: AC                                                    	lods	byte [esi]
000131D9: E8 64 0F 00 00                                        	call	convert_avx_register
000131DE: 80 FC 10                                              	cmp	ah,16
000131E1: 0F 85 57 D7 FE FF                                     	jne	invalid_operand_size
000131E7: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000131EC: E9 94 BA FF FF                                        	jmp	mmx_imm8
                                                                      avx_extractps_reg:
000131F1: AC                                                    	lods	byte [esi]
000131F2: E8 8C DA FF FF                                        	call	convert_register
000131F7: 88 C3                                                 	mov	bl,al
000131F9: A0 A9 A2 01 00                                        	mov	al,[mmx_size]
000131FE: 38 C4                                                 	cmp	ah,al
00013200: 0F 82 38 D7 FE FF                                     	jb	invalid_operand_size
00013206: 80 FC 04                                              	cmp	ah,4
00013209: 74 21                                                 	je	avx_extractps_reg_size_ok
0001320B: 80 FC 08                                              	cmp	ah,8
0001320E: 0F 85 2A D7 FE FF                                     	jne	invalid_operand_size
00013214: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0001321B: 0F 85 13 D7 FE FF                                     	jne	invalid_operand
00013221: 3C 04                                                 	cmp	al,4
00013223: 73 07                                                 	jae	avx_extractps_reg_size_ok
00013225: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                      avx_extractps_reg_size_ok:
0001322C: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
00013233: AC                                                    	lods	byte [esi]
00013234: 3C 2C                                                 	cmp	al,','
00013236: 0F 85 F8 D6 FE FF                                     	jne	invalid_operand
0001323C: AC                                                    	lods	byte [esi]
0001323D: E8 E8 DA FF FF                                        	call	get_size_operator
00013242: 3C 10                                                 	cmp	al,10h
00013244: 0F 85 EA D6 FE FF                                     	jne	invalid_operand
0001324A: AC                                                    	lods	byte [esi]
0001324B: E8 F2 0E 00 00                                        	call	convert_avx_register
00013250: 80 FC 10                                              	cmp	ah,16
00013253: 0F 85 E5 D6 FE FF                                     	jne	invalid_operand_size
00013259: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0001325E: 80 3D A5 A2 01 00 15                                  	cmp	[supplemental_code],15h
00013265: 0F 85 62 BA FF FF                                     	jne	mmx_nomem_imm8
0001326B: C6 05 A4 A2 01 00 C5                                  	mov	[extended_code],0C5h
00013272: 86 1D A6 A2 01 00                                     	xchg	bl,[postbyte_register]
00013278: E9 50 BA FF FF                                        	jmp	mmx_nomem_imm8
                                                                avx_insertps_instruction:
0001327D: C6 05 9F A2 01 00 01                                  	mov	[immediate_size],1
00013284: 80 0D 99 A2 01 00 10                                  	or	[operand_flags],10h
0001328B: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00013292: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00013297: B0 3A                                                 	mov	al,3Ah
00013299: B1 04                                                 	mov	cl,4
0001329B: E9 3D E5 FF FF                                        	jmp	avx_instruction
                                                                avx_pinsrb_instruction:
000132A0: B1 01                                                 	mov	cl,1
000132A2: EB 1E                                                 	jmp	avx_pinsr_instruction_3a
                                                                avx_pinsrw_instruction:
000132A4: B1 02                                                 	mov	cl,2
000132A6: EB 21                                                 	jmp	avx_pinsr_instruction
                                                                avx_pinsrd_instruction:
000132A8: B1 04                                                 	mov	cl,4
000132AA: EB 16                                                 	jmp	avx_pinsr_instruction_3a
                                                                avx_pinsrq_instruction:
000132AC: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
000132B3: 0F 85 71 D6 FE FF                                     	jne	illegal_instruction
000132B9: B1 08                                                 	mov	cl,8
000132BB: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                      avx_pinsr_instruction_3a:
000132C2: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
000132C7: B0 3A                                                 	mov	al,3Ah
                                                                      avx_pinsr_instruction:
000132C9: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
000132D0: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
000132D7: A2 A4 A2 01 00                                        	mov	[extended_code],al
000132DC: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
000132E2: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
000132E9: E8 45 0E 00 00                                        	call	take_avx_register
000132EE: 80 FC 10                                              	cmp	ah,16
000132F1: 0F 85 47 D6 FE FF                                     	jne	invalid_operand_size
000132F7: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000132FC: AC                                                    	lods	byte [esi]
000132FD: 3C 2C                                                 	cmp	al,','
000132FF: 0F 85 2F D6 FE FF                                     	jne	invalid_operand
00013305: E8 29 0E 00 00                                        	call	take_avx_register
0001330A: A2 9E A2 01 00                                        	mov	[vex_register],al
0001330F: E9 15 C9 FF FF                                        	jmp	pinsr_xmmreg
                                                                
                                                                avx_cvtudq2pd_instruction:
00013314: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
                                                                avx_cvtdq2pd_instruction:
0001331B: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00013322: B1 04                                                 	mov	cl,4
00013324: EB 29                                                 	jmp	avx_cvt_d_instruction
                                                                avx_cvtps2qq_instruction:
00013326: 80 0D 99 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_cvttps2qq_instruction:
0001332D: 80 0D 99 A2 01 00 04                                  	or	[operand_flags],4
00013334: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
0001333B: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
00013342: B1 04                                                 	mov	cl,4
00013344: EB 09                                                 	jmp	avx_cvt_d_instruction
                                                                avx_cvtps2pd_instruction:
00013346: 80 0D 99 A2 01 00 04                                  	or	[operand_flags],4
0001334D: B1 04                                                 	mov	cl,4
                                                                      avx_cvt_d_instruction:
0001334F: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00013356: A2 A4 A2 01 00                                        	mov	[extended_code],al
0001335B: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
00013362: 88 0D A1 A2 01 00                                     	mov	[broadcast_size],cl
00013368: E8 C6 0D 00 00                                        	call	take_avx_register
0001336D: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00013372: E8 5B E7 FF FF                                        	call	take_avx512_mask
00013377: AC                                                    	lods	byte [esi]
00013378: 3C 2C                                                 	cmp	al,','
0001337A: 0F 85 B4 D5 FE FF                                     	jne	invalid_operand
00013380: 31 C9                                                 	xor	ecx,ecx
00013382: 86 0D 98 A2 01 00                                     	xchg	cl,[operand_size]
00013388: 88 C8                                                 	mov	al,cl
0001338A: D0 E8                                                 	shr	al,1
0001338C: A2 A9 A2 01 00                                        	mov	[mmx_size],al
00013391: AC                                                    	lods	byte [esi]
00013392: E8 93 D9 FF FF                                        	call	get_size_operator
00013397: 3C 5B                                                 	cmp	al,'['
00013399: 74 3E                                                 	je	avx_cvt_d_reg_mem
0001339B: 3C 10                                                 	cmp	al,10h
0001339D: 0F 85 91 D5 FE FF                                     	jne	invalid_operand
000133A3: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
000133AA: AC                                                    	lods	byte [esi]
000133AB: E8 92 0D 00 00                                        	call	convert_avx_register
000133B0: 3A 25 A9 A2 01 00                                     	cmp	ah,[mmx_size]
000133B6: 74 0F                                                 	je	avx_cvt_d_reg_reg_size_ok
000133B8: 0F 82 80 D5 FE FF                                     	jb	invalid_operand_size
000133BE: 80 FC 10                                              	cmp	ah,16
000133C1: 0F 85 77 D5 FE FF                                     	jne	invalid_operand_size
                                                                      avx_cvt_d_reg_reg_size_ok:
000133C7: 88 C3                                                 	mov	bl,al
000133C9: 88 0D 98 A2 01 00                                     	mov	[operand_size],cl
000133CF: E8 7E E7 FF FF                                        	call	take_avx512_rounding
000133D4: E9 1C 83 FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_cvt_d_reg_mem:
000133D9: E8 D2 E5 FF FF                                        	call	take_avx_mem
000133DE: E9 37 81 FF FF                                        	jmp	instruction_ready
                                                                avx_cvtpd2dq_instruction:
000133E3: 80 0D 99 A2 01 00 0C                                  	or	[operand_flags],4+8
000133EA: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
000133F1: EB 33                                                 	jmp	avx_cvt_q_instruction
                                                                avx_cvtuqq2ps_instruction:
000133F3: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
                                                                avx_cvtpd2udq_instruction:
000133FA: 80 0D 99 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_cvttpd2udq_instruction:
00013401: 80 0D 99 A2 01 00 04                                  	or	[operand_flags],4
00013408: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
0001340F: EB 15                                                 	jmp	avx_cvt_q_instruction
                                                                avx_cvtpd2ps_instruction:
00013411: 80 0D 99 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_cvttpd2dq_instruction:
00013418: 80 0D 99 A2 01 00 04                                  	or	[operand_flags],4
0001341F: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                      avx_cvt_q_instruction:
00013426: C6 05 A1 A2 01 00 08                                  	mov	[broadcast_size],8
0001342D: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00013434: A2 A4 A2 01 00                                        	mov	[extended_code],al
00013439: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
00013440: 80 0D 9B A2 01 00 80                                  	or	[rex_prefix],80h
00013447: E8 E7 0C 00 00                                        	call	take_avx_register
0001344C: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00013451: 50                                                    	push	eax
00013452: E8 7B E6 FF FF                                        	call	take_avx512_mask
00013457: AC                                                    	lods	byte [esi]
00013458: 3C 2C                                                 	cmp	al,','
0001345A: 0F 85 D4 D4 FE FF                                     	jne	invalid_operand
00013460: 30 C0                                                 	xor	al,al
00013462: A2 98 A2 01 00                                        	mov	[operand_size],al
00013467: A2 A9 A2 01 00                                        	mov	[mmx_size],al
0001346C: E8 F8 E4 FF FF                                        	call	take_avx_rm
00013471: 73 12                                                 	jnc	avx_cvt_q_reg_mem
00013473: 88 C3                                                 	mov	bl,al
00013475: 58                                                    	pop	eax
00013476: E8 15 00 00 00                                        	call	avx_cvt_q_check_size
0001347B: E8 D2 E6 FF FF                                        	call	take_avx512_rounding
00013480: E9 70 82 FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_cvt_q_reg_mem:
00013485: 58                                                    	pop	eax
00013486: E8 05 00 00 00                                        	call	avx_cvt_q_check_size
0001348B: E9 8A 80 FF FF                                        	jmp	instruction_ready
                                                                      avx_cvt_q_check_size:
00013490: A0 98 A2 01 00                                        	mov	al,[operand_size]
00013495: 08 C0                                                 	or	al,al
00013497: 74 1E                                                 	jz	avx_cvt_q_size_not_specified
00013499: 3C 40                                                 	cmp	al,64
0001349B: 0F 87 9D D4 FE FF                                     	ja	invalid_operand_size
000134A1: D0 E8                                                 	shr	al,1
000134A3: 38 E0                                                 	cmp	al,ah
000134A5: 74 0F                                                 	je	avx_cvt_q_size_ok
000134A7: 0F 87 91 D4 FE FF                                     	ja	invalid_operand_size
000134AD: 80 FC 10                                              	cmp	ah,16
000134B0: 0F 85 88 D4 FE FF                                     	jne	invalid_operand_size
                                                                      avx_cvt_q_size_ok:
000134B6: C3                                                    	ret
                                                                      avx_cvt_q_size_not_specified:
000134B7: 80 FC 20                                              	cmp	ah,64 shr 1
000134BA: 0F 85 A4 83 FF FF                                     	jne	recoverable_unknown_size
000134C0: C6 05 98 A2 01 00 40                                  	mov	[operand_size],64
000134C7: C3                                                    	ret
                                                                avx_cvttps2udq_instruction:
000134C8: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
000134CF: 80 0D 99 A2 01 00 06                                  	or	[operand_flags],2+4
000134D6: 66 B9 00 04                                           	mov	cx,0400h
000134DA: E9 00 E3 FF FF                                        	jmp	avx_instruction_with_broadcast
                                                                avx_cvttps2dq_instruction:
000134DF: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
000134E6: 80 0D 99 A2 01 00 06                                  	or	[operand_flags],2+4
000134ED: 66 B9 00 04                                           	mov	cx,0400h
000134F1: E9 E9 E2 FF FF                                        	jmp	avx_instruction_with_broadcast
                                                                avx_cvtph2ps_instruction:
000134F6: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
000134FD: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00013502: 80 0D 99 A2 01 00 04                                  	or	[operand_flags],4
00013509: B0 38                                                 	mov	al,38h
0001350B: 30 C9                                                 	xor	cl,cl
0001350D: E9 3D FE FF FF                                        	jmp	avx_cvt_d_instruction
                                                                avx_cvtps2ph_instruction:
00013512: E8 24 C5 FF FF                                        	call	setup_66_0f_3a
00013517: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
0001351E: 80 0D 99 A2 01 00 04                                  	or	[operand_flags],4
00013525: AC                                                    	lods	byte [esi]
00013526: E8 FF D7 FF FF                                        	call	get_size_operator
0001352B: 3C 10                                                 	cmp	al,10h
0001352D: 74 38                                                 	je	vcvtps2ph_reg
0001352F: 3C 5B                                                 	cmp	al,'['
00013531: 0F 85 FD D3 FE FF                                     	jne	invalid_operand
00013537: E8 4A D8 FF FF                                        	call	get_address
0001353C: E8 91 E5 FF FF                                        	call	take_avx512_mask
00013541: AC                                                    	lods	byte [esi]
00013542: 3C 2C                                                 	cmp	al,','
00013544: 0F 85 EA D3 FE FF                                     	jne	invalid_operand
0001354A: D0 25 98 A2 01 00                                     	shl	[operand_size],1
00013550: E8 DE 0B 00 00                                        	call	take_avx_register
00013555: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0001355A: D0 EC                                                 	shr	ah,1
0001355C: 88 25 A9 A2 01 00                                     	mov	[mmx_size],ah
00013562: E9 1E B7 FF FF                                        	jmp	mmx_imm8
                                                                      vcvtps2ph_reg:
00013567: AC                                                    	lods	byte [esi]
00013568: E8 D5 0B 00 00                                        	call	convert_avx_register
0001356D: 88 C3                                                 	mov	bl,al
0001356F: E8 5E E5 FF FF                                        	call	take_avx512_mask
00013574: 30 C9                                                 	xor	cl,cl
00013576: 86 0D 98 A2 01 00                                     	xchg	cl,[operand_size]
0001357C: D0 E1                                                 	shl	cl,1
0001357E: AC                                                    	lods	byte [esi]
0001357F: 3C 2C                                                 	cmp	al,','
00013581: 0F 85 AD D3 FE FF                                     	jne	invalid_operand
00013587: E8 A7 0B 00 00                                        	call	take_avx_register
0001358C: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00013591: 08 C9                                                 	or	cl,cl
00013593: 74 13                                                 	jz	vcvtps2ph_reg_size_ok
00013595: 38 E1                                                 	cmp	cl,ah
00013597: 74 0F                                                 	je	vcvtps2ph_reg_size_ok
00013599: 0F 82 9F D3 FE FF                                     	jb	invalid_operand_size
0001359F: 80 FC 10                                              	cmp	ah,16
000135A2: 0F 85 96 D3 FE FF                                     	jne	invalid_operand_size
                                                                      vcvtps2ph_reg_size_ok:
000135A8: E8 A5 E5 FF FF                                        	call	take_avx512_rounding
000135AD: E9 1B B7 FF FF                                        	jmp	mmx_nomem_imm8
                                                                
                                                                avx_cvtsd2usi_instruction:
000135B2: 80 0D 99 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_cvttsd2usi_instruction:
000135B9: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
000135C0: EB 07                                                 	jmp	avx_cvttsd2si_instruction
                                                                avx_cvtsd2si_instruction:
000135C2: 80 0D 99 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_cvttsd2si_instruction:
000135C9: B4 F2                                                 	mov	ah,0F2h
000135CB: B1 08                                                 	mov	cl,8
000135CD: EB 1B                                                 	jmp	avx_cvt_2si_instruction
                                                                avx_cvtss2usi_instruction:
000135CF: 80 0D 99 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_cvttss2usi_instruction:
000135D6: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
000135DD: EB 07                                                 	jmp	avx_cvttss2si_instruction
                                                                avx_cvtss2si_instruction:
000135DF: 80 0D 99 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_cvttss2si_instruction:
000135E6: B4 F3                                                 	mov	ah,0F3h
000135E8: B1 04                                                 	mov	cl,4
                                                                      avx_cvt_2si_instruction:
000135EA: 80 0D 99 A2 01 00 06                                  	or	[operand_flags],2+4
000135F1: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
000135F7: C6 05 A1 A2 01 00 00                                  	mov	[broadcast_size],0
000135FE: 88 25 9C A2 01 00                                     	mov	[opcode_prefix],ah
00013604: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0001360B: A2 A4 A2 01 00                                        	mov	[extended_code],al
00013610: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
00013617: AC                                                    	lods	byte [esi]
00013618: E8 0D D7 FF FF                                        	call	get_size_operator
0001361D: 3C 10                                                 	cmp	al,10h
0001361F: 0F 85 0F D3 FE FF                                     	jne	invalid_operand
00013625: AC                                                    	lods	byte [esi]
00013626: E8 58 D6 FF FF                                        	call	convert_register
0001362B: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00013630: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
00013637: 80 FC 04                                              	cmp	ah,4
0001363A: 74 0E                                                 	je	avx_cvt_2si_reg
0001363C: 80 FC 08                                              	cmp	ah,8
0001363F: 0F 85 F9 D2 FE FF                                     	jne	invalid_operand_size
00013645: E8 54 D8 FF FF                                        	call	operand_64bit
                                                                      avx_cvt_2si_reg:
0001364A: AC                                                    	lods	byte [esi]
0001364B: 3C 2C                                                 	cmp	al,','
0001364D: 0F 85 E1 D2 FE FF                                     	jne	invalid_operand
00013653: E8 11 E3 FF FF                                        	call	take_avx_rm
00013658: 0F 83 BC 7E FF FF                                     	jnc	instruction_ready
0001365E: 88 C3                                                 	mov	bl,al
00013660: E8 ED E4 FF FF                                        	call	take_avx512_rounding
00013665: E9 8B 80 FF FF                                        	jmp	nomem_instruction_ready
                                                                avx_cvtusi2sd_instruction:
0001366A: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
                                                                avx_cvtsi2sd_instruction:
00013671: B4 F2                                                 	mov	ah,0F2h
00013673: B1 08                                                 	mov	cl,8
00013675: EB 0B                                                 	jmp	avx_cvtsi_instruction
                                                                avx_cvtusi2ss_instruction:
00013677: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
                                                                avx_cvtsi2ss_instruction:
0001367E: B4 F3                                                 	mov	ah,0F3h
00013680: B1 04                                                 	mov	cl,4
                                                                      avx_cvtsi_instruction:
00013682: 80 0D 99 A2 01 00 0E                                  	or	[operand_flags],2+4+8
00013689: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
0001368F: 88 25 9C A2 01 00                                     	mov	[opcode_prefix],ah
00013695: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0001369C: A2 A4 A2 01 00                                        	mov	[extended_code],al
000136A1: 80 0D 9D A2 01 00 01                                  	or	[vex_required],1
000136A8: E8 86 0A 00 00                                        	call	take_avx_register
000136AD: 80 FC 10                                              	cmp	ah,16
000136B0: 0F 85 88 D2 FE FF                                     	jne	invalid_operand_size
000136B6: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000136BB: AC                                                    	lods	byte [esi]
000136BC: 3C 2C                                                 	cmp	al,','
000136BE: 0F 85 70 D2 FE FF                                     	jne	invalid_operand
000136C4: E8 6A 0A 00 00                                        	call	take_avx_register
000136C9: A2 9E A2 01 00                                        	mov	[vex_register],al
000136CE: AC                                                    	lods	byte [esi]
000136CF: 3C 2C                                                 	cmp	al,','
000136D1: 0F 85 5D D2 FE FF                                     	jne	invalid_operand
000136D7: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
000136DE: AC                                                    	lods	byte [esi]
000136DF: E8 46 D6 FF FF                                        	call	get_size_operator
000136E4: 3C 5B                                                 	cmp	al,'['
000136E6: 74 3B                                                 	je	avx_cvtsi_reg_reg_mem
000136E8: 3C 10                                                 	cmp	al,10h
000136EA: 0F 85 44 D2 FE FF                                     	jne	invalid_operand
000136F0: AC                                                    	lods	byte [esi]
000136F1: E8 8D D5 FF FF                                        	call	convert_register
000136F6: 88 C3                                                 	mov	bl,al
000136F8: 80 FC 04                                              	cmp	ah,4
000136FB: 74 18                                                 	je	avx_cvtsi_reg_reg_reg32
000136FD: 80 FC 08                                              	cmp	ah,8
00013700: 0F 85 38 D2 FE FF                                     	jne	invalid_operand_size
00013706: E8 93 D7 FF FF                                        	call	operand_64bit
                                                                      avx_cvtsi_rounding:
0001370B: E8 42 E4 FF FF                                        	call	take_avx512_rounding
00013710: E9 E0 7F FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_cvtsi_reg_reg_reg32:
00013715: 80 3D A9 A2 01 00 08                                  	cmp	[mmx_size],8
0001371C: 75 ED                                                 	jne	avx_cvtsi_rounding
0001371E: E9 D2 7F FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_cvtsi_reg_reg_mem:
00013723: E8 5E D6 FF FF                                        	call	get_address
00013728: A0 98 A2 01 00                                        	mov	al,[operand_size]
0001372D: A2 A9 A2 01 00                                        	mov	[mmx_size],al
00013732: 08 C0                                                 	or	al,al
00013734: 0F 84 88 81 FF FF                                     	jz	single_mem_nosize
0001373A: 3C 04                                                 	cmp	al,4
0001373C: 0F 84 D8 7D FF FF                                     	je	instruction_ready
00013742: 3C 08                                                 	cmp	al,8
00013744: 0F 85 F4 D1 FE FF                                     	jne	invalid_operand_size
0001374A: E8 4F D7 FF FF                                        	call	operand_64bit
0001374F: E9 C6 7D FF FF                                        	jmp	instruction_ready
                                                                
                                                                avx_maskmov_w1_instruction:
00013754: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx_maskmov_instruction:
0001375B: E8 E9 C5 FF FF                                        	call	setup_66_0f_38
00013760: C6 05 A9 A2 01 00 00                                  	mov	[mmx_size],0
00013767: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
0001376E: AC                                                    	lods	byte [esi]
0001376F: E8 B6 D5 FF FF                                        	call	get_size_operator
00013774: 3C 10                                                 	cmp	al,10h
00013776: 75 3F                                                 	jne	avx_maskmov_mem
00013778: AC                                                    	lods	byte [esi]
00013779: E8 C4 09 00 00                                        	call	convert_avx_register
0001377E: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00013783: AC                                                    	lods	byte [esi]
00013784: 3C 2C                                                 	cmp	al,','
00013786: 0F 85 A8 D1 FE FF                                     	jne	invalid_operand
0001378C: E8 A2 09 00 00                                        	call	take_avx_register
00013791: A2 9E A2 01 00                                        	mov	[vex_register],al
00013796: AC                                                    	lods	byte [esi]
00013797: 3C 2C                                                 	cmp	al,','
00013799: 0F 85 95 D1 FE FF                                     	jne	invalid_operand
0001379F: AC                                                    	lods	byte [esi]
000137A0: E8 85 D5 FF FF                                        	call	get_size_operator
000137A5: 3C 5B                                                 	cmp	al,'['
000137A7: 0F 85 87 D1 FE FF                                     	jne	invalid_operand
000137AD: E8 D4 D5 FF FF                                        	call	get_address
000137B2: E9 63 7D FF FF                                        	jmp	instruction_ready
                                                                      avx_maskmov_mem:
000137B7: 3C 5B                                                 	cmp	al,'['
000137B9: 0F 85 75 D1 FE FF                                     	jne	invalid_operand
000137BF: E8 C2 D5 FF FF                                        	call	get_address
000137C4: AC                                                    	lods	byte [esi]
000137C5: 3C 2C                                                 	cmp	al,','
000137C7: 0F 85 67 D1 FE FF                                     	jne	invalid_operand
000137CD: E8 61 09 00 00                                        	call	take_avx_register
000137D2: A2 9E A2 01 00                                        	mov	[vex_register],al
000137D7: AC                                                    	lods	byte [esi]
000137D8: 3C 2C                                                 	cmp	al,','
000137DA: 0F 85 54 D1 FE FF                                     	jne	invalid_operand
000137E0: E8 4E 09 00 00                                        	call	take_avx_register
000137E5: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000137EA: 80 05 A5 A2 01 00 02                                  	add	[supplemental_code],2
000137F1: E9 24 7D FF FF                                        	jmp	instruction_ready
                                                                avx_movmskpd_instruction:
000137F6: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                avx_movmskps_instruction:
000137FD: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00013804: C6 05 A4 A2 01 00 50                                  	mov	[extended_code],50h
0001380B: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00013812: AC                                                    	lods	byte [esi]
00013813: E8 12 D5 FF FF                                        	call	get_size_operator
00013818: 3C 10                                                 	cmp	al,10h
0001381A: 0F 85 14 D1 FE FF                                     	jne	invalid_operand
00013820: AC                                                    	lods	byte [esi]
00013821: E8 5D D4 FF FF                                        	call	convert_register
00013826: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
0001382B: 80 FC 04                                              	cmp	ah,4
0001382E: 74 16                                                 	je	avx_movmskps_reg_ok
00013830: 80 FC 08                                              	cmp	ah,8
00013833: 0F 85 05 D1 FE FF                                     	jne	invalid_operand_size
00013839: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00013840: 0F 85 EE D0 FE FF                                     	jne	invalid_operand
                                                                      avx_movmskps_reg_ok:
00013846: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
0001384D: AC                                                    	lods	byte [esi]
0001384E: 3C 2C                                                 	cmp	al,','
00013850: 0F 85 DE D0 FE FF                                     	jne	invalid_operand
00013856: E8 D8 08 00 00                                        	call	take_avx_register
0001385B: 88 C3                                                 	mov	bl,al
0001385D: E9 93 7E FF FF                                        	jmp	nomem_instruction_ready
                                                                avx_maskmovdqu_instruction:
00013862: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00013869: E9 1D BD FF FF                                        	jmp	maskmovdqu_instruction
                                                                avx_pmovmskb_instruction:
0001386E: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00013875: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
0001387C: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00013883: A2 A4 A2 01 00                                        	mov	[extended_code],al
00013888: AC                                                    	lods	byte [esi]
00013889: E8 9C D4 FF FF                                        	call	get_size_operator
0001388E: 3C 10                                                 	cmp	al,10h
00013890: 0F 85 9E D0 FE FF                                     	jne	invalid_operand
00013896: AC                                                    	lods	byte [esi]
00013897: E8 E7 D3 FF FF                                        	call	convert_register
0001389C: 80 FC 04                                              	cmp	ah,4
0001389F: 74 16                                                 	je	avx_pmovmskb_reg_size_ok
000138A1: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
000138A8: 0F 85 90 D0 FE FF                                     	jne	invalid_operand_size
000138AE: 80 FC 08                                              	cmp	ah,8
000138B1: 0F 85 87 D0 FE FF                                     	jnz	invalid_operand_size
                                                                      avx_pmovmskb_reg_size_ok:
000138B7: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000138BC: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
000138C3: AC                                                    	lods	byte [esi]
000138C4: 3C 2C                                                 	cmp	al,','
000138C6: 0F 85 68 D0 FE FF                                     	jne	invalid_operand
000138CC: E8 62 08 00 00                                        	call	take_avx_register
000138D1: 88 C3                                                 	mov	bl,al
000138D3: E9 1D 7E FF FF                                        	jmp	nomem_instruction_ready
                                                                
                                                                gather_pd_instruction:
000138D8: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                gather_ps_instruction:
000138DF: E8 65 C4 FF FF                                        	call	setup_66_0f_38
000138E4: 80 0D 9D A2 01 00 04                                  	or	[vex_required],4
000138EB: 80 0D 99 A2 01 00 20                                  	or	[operand_flags],20h
000138F2: E8 3C 08 00 00                                        	call	take_avx_register
000138F7: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000138FC: E8 D1 E1 FF FF                                        	call	take_avx512_mask
00013901: AC                                                    	lods	byte [esi]
00013902: 3C 2C                                                 	cmp	al,','
00013904: 0F 85 2A D0 FE FF                                     	jne	invalid_operand
0001390A: 30 C9                                                 	xor	cl,cl
0001390C: 86 0D 98 A2 01 00                                     	xchg	cl,[operand_size]
00013912: 51                                                    	push	ecx
00013913: AC                                                    	lods	byte [esi]
00013914: E8 11 D4 FF FF                                        	call	get_size_operator
00013919: 3C 5B                                                 	cmp	al,'['
0001391B: 0F 85 FF CF FE FF                                     	jne	invalid_argument
00013921: E8 60 D4 FF FF                                        	call	get_address
00013926: 58                                                    	pop	eax
00013927: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
                                                                      gather_mem_size_check:
0001392D: B4 04                                                 	mov	ah,4
0001392F: F6 05 9B A2 01 00 08                                  	test	[rex_prefix],8
00013936: 74 02                                                 	jz	gather_elements_size_ok
00013938: 00 E4                                                 	add	ah,ah
                                                                      gather_elements_size_ok:
0001393A: 88 25 A9 A2 01 00                                     	mov	[mmx_size],ah
00013940: 84 C0                                                 	test	al,al
00013942: 74 08                                                 	jz	gather_mem_size_ok
00013944: 38 E0                                                 	cmp	al,ah
00013946: 0F 85 F2 CF FE FF                                     	jne	invalid_operand_size
                                                                      gather_mem_size_ok:
0001394C: 80 3E 2C                                              	cmp	byte [esi],','
0001394F: 74 17                                                 	je	gather_reg_mem_reg
00013951: F6 05 9D A2 01 00 20                                  	test	[vex_required],20h
00013958: 0F 84 D6 CF FE FF                                     	jz	invalid_operand
0001395E: 8A 25 98 A2 01 00                                     	mov	ah,[operand_size]
00013964: B0 80                                                 	mov	al,80h
00013966: EB 0D                                                 	jmp	gather_arguments_ok
                                                                      gather_reg_mem_reg:
00013968: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
0001396F: 46                                                    	inc	esi
00013970: E8 BE 07 00 00                                        	call	take_avx_register
                                                                      gather_arguments_ok:
00013975: A2 9E A2 01 00                                        	mov	[vex_register],al
0001397A: 3A 05 A6 A2 01 00                                     	cmp	al,[postbyte_register]
00013980: 0F 84 EA CF FE FF                                     	je	disallowed_combination_of_registers
00013986: 88 D8                                                 	mov	al,bl
00013988: 24 1F                                                 	and	al,11111b
0001398A: 3A 05 A6 A2 01 00                                     	cmp	al,[postbyte_register]
00013990: 0F 84 DA CF FE FF                                     	je	disallowed_combination_of_registers
00013996: 3A 05 9E A2 01 00                                     	cmp	al,[vex_register]
0001399C: 0F 84 CE CF FE FF                                     	je	disallowed_combination_of_registers
000139A2: 88 D8                                                 	mov	al,bl
000139A4: C0 E8 05                                              	shr	al,5
000139A7: 3C 06                                                 	cmp	al,0Ch shr 1
000139A9: 74 4D                                                 	je	gather_vr128
000139AB: B4 20                                                 	mov	ah,32
000139AD: 3C 03                                                 	cmp	al,6 shr 1
000139AF: 75 02                                                 	jne	gather_regular
000139B1: 00 E4                                                 	add	ah,ah
                                                                      gather_regular:
000139B3: A0 9B A2 01 00                                        	mov	al,[rex_prefix]
000139B8: C0 E8 03                                              	shr	al,3
000139BB: 32 05 A5 A2 01 00                                     	xor	al,[supplemental_code]
000139C1: A8 01                                                 	test	al,1
000139C3: 74 22                                                 	jz	gather_uniform
000139C5: F6 05 A5 A2 01 00 01                                  	test	[supplemental_code],1
000139CC: 74 17                                                 	jz	gather_double
000139CE: 88 E0                                                 	mov	al,ah
000139D0: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
000139D6: 00 C0                                                 	add	al,al
000139D8: 38 E0                                                 	cmp	al,ah
000139DA: 0F 85 5E CF FE FF                                     	jne	invalid_operand_size
000139E0: E9 35 7B FF FF                                        	jmp	instruction_ready
                                                                      gather_double:
000139E5: 00 E4                                                 	add	ah,ah
                                                                      gather_uniform:
000139E7: 3A 25 98 A2 01 00                                     	cmp	ah,[operand_size]
000139ED: 0F 85 4B CF FE FF                                     	jne	invalid_operand_size
000139F3: E9 22 7B FF FF                                        	jmp	instruction_ready
                                                                      gather_vr128:
000139F8: 80 FC 10                                              	cmp	ah,16
000139FB: 0F 84 19 7B FF FF                                     	je	instruction_ready
00013A01: 80 FC 20                                              	cmp	ah,32
00013A04: 0F 85 34 CF FE FF                                     	jne	invalid_operand_size
00013A0A: F6 05 A5 A2 01 00 01                                  	test	[supplemental_code],1
00013A11: 0F 85 27 CF FE FF                                     	jnz	invalid_operand_size
00013A17: F6 05 9B A2 01 00 08                                  	test	[rex_prefix],8
00013A1E: 0F 84 1A CF FE FF                                     	jz	invalid_operand_size
00013A24: E9 F1 7A FF FF                                        	jmp	instruction_ready
                                                                scatter_pd_instruction:
00013A29: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                scatter_ps_instruction:
00013A30: E8 14 C3 FF FF                                        	call	setup_66_0f_38
00013A35: 80 0D 9D A2 01 00 0C                                  	or	[vex_required],4+8
00013A3C: 80 0D 99 A2 01 00 20                                  	or	[operand_flags],20h
00013A43: AC                                                    	lods	byte [esi]
00013A44: E8 E1 D2 FF FF                                        	call	get_size_operator
00013A49: 3C 5B                                                 	cmp	al,'['
00013A4B: 0F 85 CF CE FE FF                                     	jne	invalid_argument
00013A51: E8 30 D3 FF FF                                        	call	get_address
00013A56: E8 77 E0 FF FF                                        	call	take_avx512_mask
00013A5B: AC                                                    	lods	byte [esi]
00013A5C: 3C 2C                                                 	cmp	al,','
00013A5E: 0F 85 D0 CE FE FF                                     	jne	invalid_operand
00013A64: 30 C0                                                 	xor	al,al
00013A66: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
00013A6C: 50                                                    	push	eax
00013A6D: E8 C1 06 00 00                                        	call	take_avx_register
00013A72: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00013A77: 58                                                    	pop	eax
00013A78: E9 B0 FE FF FF                                        	jmp	gather_mem_size_check
                                                                gatherpf_qpd_instruction:
00013A7D: B4 C7                                                 	mov	ah,0C7h
00013A7F: EB 02                                                 	jmp	gatherpf_pd_instruction
                                                                gatherpf_dpd_instruction:
00013A81: B4 C6                                                 	mov	ah,0C6h
                                                                      gatherpf_pd_instruction:
00013A83: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
00013A8A: B1 08                                                 	mov	cl,8
00013A8C: EB 08                                                 	jmp	gatherpf_instruction
                                                                gatherpf_qps_instruction:
00013A8E: B4 C7                                                 	mov	ah,0C7h
00013A90: EB 02                                                 	jmp	gatherpf_ps_instruction
                                                                gatherpf_dps_instruction:
00013A92: B4 C6                                                 	mov	ah,0C6h
                                                                      gatherpf_ps_instruction:
00013A94: B1 04                                                 	mov	cl,4
                                                                      gatherpf_instruction:
00013A96: 88 0D A9 A2 01 00                                     	mov	[mmx_size],cl
00013A9C: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00013AA1: 88 E0                                                 	mov	al,ah
00013AA3: E8 A1 C2 FF FF                                        	call	setup_66_0f_38
00013AA8: 80 0D 9D A2 01 00 0C                                  	or	[vex_required],4+8
00013AAF: 80 0D 99 A2 01 00 20                                  	or	[operand_flags],20h
00013AB6: AC                                                    	lods	byte [esi]
00013AB7: E8 6E D2 FF FF                                        	call	get_size_operator
00013ABC: 3C 5B                                                 	cmp	al,'['
00013ABE: 0F 85 5C CE FE FF                                     	jne	invalid_argument
00013AC4: E8 BD D2 FF FF                                        	call	get_address
00013AC9: E8 04 E0 FF FF                                        	call	take_avx512_mask
00013ACE: 8A 25 A9 A2 01 00                                     	mov	ah,[mmx_size]
00013AD4: A0 98 A2 01 00                                        	mov	al,[operand_size]
00013AD9: 08 C0                                                 	or	al,al
00013ADB: 74 08                                                 	jz	gatherpf_mem_size_ok
00013ADD: 38 E0                                                 	cmp	al,ah
00013ADF: 0F 85 59 CE FE FF                                     	jne	invalid_operand_size
                                                                      gatherpf_mem_size_ok:
00013AE5: C6 05 98 A2 01 00 40                                  	mov	[operand_size],64
00013AEC: B0 03                                                 	mov	al,6 shr 1
00013AEE: 80 FC 04                                              	cmp	ah,4
00013AF1: 74 0B                                                 	je	gatherpf_check_vsib
00013AF3: 80 3D A5 A2 01 00 C6                                  	cmp	[supplemental_code],0C6h
00013AFA: 75 02                                                 	jne	gatherpf_check_vsib
00013AFC: B0 07                                                 	mov	al,0Eh shr 1
                                                                      gatherpf_check_vsib:
00013AFE: 88 DC                                                 	mov	ah,bl
00013B00: C0 EC 05                                              	shr	ah,5
00013B03: 38 E0                                                 	cmp	al,ah
00013B05: 0F 85 29 CE FE FF                                     	jne	invalid_operand
00013B0B: E9 0A 7A FF FF                                        	jmp	instruction_ready
                                                                
                                                                bmi_instruction:
00013B10: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00013B17: C6 05 A4 A2 01 00 38                                  	mov	[extended_code],38h
00013B1E: C6 05 A5 A2 01 00 F3                                  	mov	[supplemental_code],0F3h
00013B25: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
                                                                      bmi_reg:
00013B2A: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00013B31: AC                                                    	lods	byte [esi]
00013B32: E8 F3 D1 FF FF                                        	call	get_size_operator
00013B37: 3C 10                                                 	cmp	al,10h
00013B39: 0F 85 F5 CD FE FF                                     	jne	invalid_operand
00013B3F: AC                                                    	lods	byte [esi]
00013B40: E8 3E D1 FF FF                                        	call	convert_register
00013B45: A2 9E A2 01 00                                        	mov	[vex_register],al
00013B4A: AC                                                    	lods	byte [esi]
00013B4B: 3C 2C                                                 	cmp	al,','
00013B4D: 0F 85 E1 CD FE FF                                     	jne	invalid_operand
00013B53: AC                                                    	lods	byte [esi]
00013B54: E8 D1 D1 FF FF                                        	call	get_size_operator
00013B59: 3C 10                                                 	cmp	al,10h
00013B5B: 74 17                                                 	je	bmi_reg_reg
00013B5D: 3C 5B                                                 	cmp	al,'['
00013B5F: 0F 85 BB CD FE FF                                     	jne	invalid_argument
00013B65: E8 1C D2 FF FF                                        	call	get_address
00013B6A: E8 17 00 00 00                                        	call	operand_32or64
00013B6F: E9 A6 79 FF FF                                        	jmp	instruction_ready
                                                                      bmi_reg_reg:
00013B74: AC                                                    	lods	byte [esi]
00013B75: E8 09 D1 FF FF                                        	call	convert_register
00013B7A: 88 C3                                                 	mov	bl,al
00013B7C: E8 05 00 00 00                                        	call	operand_32or64
00013B81: E9 6F 7B FF FF                                        	jmp	nomem_instruction_ready
                                                                      operand_32or64:
00013B86: A0 98 A2 01 00                                        	mov	al,[operand_size]
00013B8B: 3C 04                                                 	cmp	al,4
00013B8D: 74 1C                                                 	je	operand_32or64_ok
00013B8F: 3C 08                                                 	cmp	al,8
00013B91: 0F 85 A7 CD FE FF                                     	jne	invalid_operand_size
00013B97: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00013B9E: 0F 85 90 CD FE FF                                     	jne	invalid_operand
00013BA4: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
                                                                      operand_32or64_ok:
00013BAB: C3                                                    	ret
                                                                pdep_instruction:
00013BAC: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
00013BB3: EB 07                                                 	jmp	andn_instruction
                                                                pext_instruction:
00013BB5: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
                                                                andn_instruction:
00013BBC: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00013BC3: C6 05 A4 A2 01 00 38                                  	mov	[extended_code],38h
00013BCA: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00013BCF: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00013BD6: AC                                                    	lods	byte [esi]
00013BD7: E8 4E D1 FF FF                                        	call	get_size_operator
00013BDC: 3C 10                                                 	cmp	al,10h
00013BDE: 0F 85 50 CD FE FF                                     	jne	invalid_operand
00013BE4: AC                                                    	lods	byte [esi]
00013BE5: E8 99 D0 FF FF                                        	call	convert_register
00013BEA: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00013BEF: AC                                                    	lods	byte [esi]
00013BF0: 3C 2C                                                 	cmp	al,','
00013BF2: 0F 85 3C CD FE FF                                     	jne	invalid_operand
00013BF8: E9 2D FF FF FF                                        	jmp	bmi_reg
                                                                sarx_instruction:
00013BFD: C6 05 9C A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00013C04: EB 10                                                 	jmp	bzhi_instruction
                                                                shrx_instruction:
00013C06: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
00013C0D: EB 07                                                 	jmp	bzhi_instruction
                                                                shlx_instruction:
00013C0F: C6 05 9C A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                bzhi_instruction:
00013C16: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00013C1D: C6 05 A4 A2 01 00 38                                  	mov	[extended_code],38h
00013C24: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00013C29: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00013C30: E8 0A 97 FF FF                                        	call	get_reg_mem
00013C35: 72 15                                                 	jc	bzhi_reg_reg
00013C37: E8 25 00 00 00                                        	call	get_vex_source_register
00013C3C: 0F 82 F2 CC FE FF                                     	jc	invalid_operand
00013C42: E8 3F FF FF FF                                        	call	operand_32or64
00013C47: E9 CE 78 FF FF                                        	jmp	instruction_ready
                                                                      bzhi_reg_reg:
00013C4C: E8 10 00 00 00                                        	call	get_vex_source_register
00013C51: 0F 82 DD CC FE FF                                     	jc	invalid_operand
00013C57: E8 2A FF FF FF                                        	call	operand_32or64
00013C5C: E9 94 7A FF FF                                        	jmp	nomem_instruction_ready
                                                                      get_vex_source_register:
00013C61: AC                                                    	lods	byte [esi]
00013C62: 3C 2C                                                 	cmp	al,','
00013C64: 0F 85 CA CC FE FF                                     	jne	invalid_operand
00013C6A: AC                                                    	lods	byte [esi]
00013C6B: E8 BA D0 FF FF                                        	call	get_size_operator
00013C70: 3C 10                                                 	cmp	al,10h
00013C72: 75 0D                                                 	jne	no_vex_source_register
00013C74: AC                                                    	lods	byte [esi]
00013C75: E8 09 D0 FF FF                                        	call	convert_register
00013C7A: A2 9E A2 01 00                                        	mov	[vex_register],al
00013C7F: F8                                                    	clc
00013C80: C3                                                    	ret
                                                                      no_vex_source_register:
00013C81: F9                                                    	stc
00013C82: C3                                                    	ret
                                                                bextr_instruction:
00013C83: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00013C8A: C6 05 A4 A2 01 00 38                                  	mov	[extended_code],38h
00013C91: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00013C96: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00013C9D: E8 9D 96 FF FF                                        	call	get_reg_mem
00013CA2: 72 11                                                 	jc	bextr_reg_reg
00013CA4: E8 B8 FF FF FF                                        	call	get_vex_source_register
00013CA9: 72 2F                                                 	jc	bextr_reg_mem_imm32
00013CAB: E8 D6 FE FF FF                                        	call	operand_32or64
00013CB0: E9 65 78 FF FF                                        	jmp	instruction_ready
                                                                      bextr_reg_reg:
00013CB5: E8 A7 FF FF FF                                        	call	get_vex_source_register
00013CBA: 72 2D                                                 	jc	bextr_reg_reg_imm32
00013CBC: E8 C5 FE FF FF                                        	call	operand_32or64
00013CC1: E9 2F 7A FF FF                                        	jmp	nomem_instruction_ready
                                                                      setup_bextr_imm_opcode:
00013CC6: C6 05 A8 A2 01 00 0A                                  	mov	[xop_opcode_map],0Ah
00013CCD: C6 05 A3 A2 01 00 10                                  	mov	[base_code],10h
00013CD4: E8 AD FE FF FF                                        	call	operand_32or64
00013CD9: C3                                                    	ret
                                                                      bextr_reg_mem_imm32:
00013CDA: E8 29 00 00 00                                        	call	get_imm32
00013CDF: E8 E2 FF FF FF                                        	call	setup_bextr_imm_opcode
00013CE4: E9 AD D8 FF FF                                        	jmp	store_instruction_with_imm32
                                                                      bextr_reg_reg_imm32:
00013CE9: E8 1A 00 00 00                                        	call	get_imm32
00013CEE: E8 D3 FF FF FF                                        	call	setup_bextr_imm_opcode
                                                                      store_nomem_instruction_with_imm32:
00013CF3: E8 8E D2 FF FF                                        	call	store_nomem_instruction
00013CF8: A1 F4 A1 01 00                                        	mov	eax,dword [value]
00013CFD: E8 E0 46 FF FF                                        	call	mark_relocation
00013D02: AB                                                    	stos	dword [edi]
00013D03: E9 68 12 FF FF                                        	jmp	instruction_assembled
                                                                      get_imm32:
00013D08: 3C 28                                                 	cmp	al,'('
00013D0A: 0F 85 24 CC FE FF                                     	jne	invalid_operand
00013D10: 52 53 51                                              	push	edx ebx ecx
00013D13: E8 68 36 FF FF                                        	call	get_dword_value
00013D18: A3 F4 A1 01 00                                        	mov	dword [value],eax
00013D1D: 59 5B 5A                                              	pop	ecx ebx edx
00013D20: C3                                                    	ret
                                                                rorx_instruction:
00013D21: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
00013D28: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
00013D2F: C6 05 A4 A2 01 00 3A                                  	mov	[extended_code],3Ah
00013D36: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
00013D3B: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00013D42: E8 F8 95 FF FF                                        	call	get_reg_mem
00013D47: 72 0A                                                 	jc	rorx_reg_reg
00013D49: E8 38 FE FF FF                                        	call	operand_32or64
00013D4E: E9 32 AF FF FF                                        	jmp	mmx_imm8
                                                                      rorx_reg_reg:
00013D53: E8 2E FE FF FF                                        	call	operand_32or64
00013D58: E9 70 AF FF FF                                        	jmp	mmx_nomem_imm8
                                                                
                                                                tbm_instruction:
00013D5D: C6 05 A8 A2 01 00 09                                  	mov	[xop_opcode_map],9
00013D64: 88 C4                                                 	mov	ah,al
00013D66: C0 EC 04                                              	shr	ah,4
00013D69: 24 07                                                 	and	al,111b
00013D6B: 88 25 A3 A2 01 00                                     	mov	[base_code],ah
00013D71: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00013D76: E9 AF FD FF FF                                        	jmp	bmi_reg
                                                                
                                                                llwpcb_instruction:
00013D7B: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00013D82: C6 05 A8 A2 01 00 09                                  	mov	[xop_opcode_map],9
00013D89: C6 05 A3 A2 01 00 12                                  	mov	[base_code],12h
00013D90: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00013D95: AC                                                    	lods	byte [esi]
00013D96: E8 8F CF FF FF                                        	call	get_size_operator
00013D9B: 3C 10                                                 	cmp	al,10h
00013D9D: 0F 85 91 CB FE FF                                     	jne	invalid_operand
00013DA3: AC                                                    	lods	byte [esi]
00013DA4: E8 DA CE FF FF                                        	call	convert_register
00013DA9: 88 C3                                                 	mov	bl,al
00013DAB: E8 D6 FD FF FF                                        	call	operand_32or64
00013DB0: E9 40 79 FF FF                                        	jmp	nomem_instruction_ready
                                                                lwpins_instruction:
00013DB5: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00013DBC: C6 05 A8 A2 01 00 0A                                  	mov	[xop_opcode_map],0Ah
00013DC3: C6 05 A3 A2 01 00 12                                  	mov	[base_code],12h
00013DCA: A2 9E A2 01 00                                        	mov	[vex_register],al
00013DCF: AC                                                    	lods	byte [esi]
00013DD0: E8 55 CF FF FF                                        	call	get_size_operator
00013DD5: 3C 10                                                 	cmp	al,10h
00013DD7: 0F 85 57 CB FE FF                                     	jne	invalid_operand
00013DDD: AC                                                    	lods	byte [esi]
00013DDE: E8 A0 CE FF FF                                        	call	convert_register
00013DE3: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00013DE8: AC                                                    	lods	byte [esi]
00013DE9: 3C 2C                                                 	cmp	al,','
00013DEB: 0F 85 43 CB FE FF                                     	jne	invalid_operand
00013DF1: 30 C9                                                 	xor	cl,cl
00013DF3: 86 0D 98 A2 01 00                                     	xchg	cl,[operand_size]
00013DF9: AC                                                    	lods	byte [esi]
00013DFA: E8 2B CF FF FF                                        	call	get_size_operator
00013DFF: 3C 10                                                 	cmp	al,10h
00013E01: 74 2B                                                 	je	lwpins_reg_reg
00013E03: 3C 5B                                                 	cmp	al,'['
00013E05: 0F 85 15 CB FE FF                                     	jne	invalid_argument
00013E0B: 51                                                    	push	ecx
00013E0C: E8 75 CF FF FF                                        	call	get_address
00013E11: 58                                                    	pop	eax
00013E12: 86 05 98 A2 01 00                                     	xchg	al,[operand_size]
00013E18: 84 C0                                                 	test	al,al
00013E1A: 74 08                                                 	jz	lwpins_reg_mem_size_ok
00013E1C: 3C 04                                                 	cmp	al,4
00013E1E: 0F 85 1A CB FE FF                                     	jne	invalid_operand_size
                                                                      lwpins_reg_mem_size_ok:
00013E24: E8 26 00 00 00                                        	call	prepare_lwpins
00013E29: E9 68 D7 FF FF                                        	jmp	store_instruction_with_imm32
                                                                      lwpins_reg_reg:
00013E2E: AC                                                    	lods	byte [esi]
00013E2F: E8 4F CE FF FF                                        	call	convert_register
00013E34: 80 FC 04                                              	cmp	ah,4
00013E37: 0F 85 01 CB FE FF                                     	jne	invalid_operand_size
00013E3D: 88 0D 98 A2 01 00                                     	mov	[operand_size],cl
00013E43: 88 C3                                                 	mov	bl,al
00013E45: E8 05 00 00 00                                        	call	prepare_lwpins
00013E4A: E9 A4 FE FF FF                                        	jmp	store_nomem_instruction_with_imm32
                                                                      prepare_lwpins:
00013E4F: AC                                                    	lods	byte [esi]
00013E50: 3C 2C                                                 	cmp	al,','
00013E52: 0F 85 DC CA FE FF                                     	jne	invalid_operand
00013E58: AC                                                    	lods	byte [esi]
00013E59: E8 AA FE FF FF                                        	call	get_imm32
00013E5E: E8 23 FD FF FF                                        	call	operand_32or64
00013E63: A0 9E A2 01 00                                        	mov	al,[vex_register]
00013E68: 86 05 A6 A2 01 00                                     	xchg	al,[postbyte_register]
00013E6E: A2 9E A2 01 00                                        	mov	[vex_register],al
00013E73: C3                                                    	ret
                                                                
                                                                xop_single_source_sd_instruction:
00013E74: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
00013E7B: C6 05 A9 A2 01 00 08                                  	mov	[mmx_size],8
00013E82: EB 1E                                                 	jmp	xop_instruction_9
                                                                xop_single_source_ss_instruction:
00013E84: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
00013E8B: C6 05 A9 A2 01 00 04                                  	mov	[mmx_size],4
00013E92: EB 0E                                                 	jmp	xop_instruction_9
                                                                xop_single_source_instruction:
00013E94: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
00013E9B: C6 05 A9 A2 01 00 00                                  	mov	[mmx_size],0
                                                                      xop_instruction_9:
00013EA2: A2 A3 A2 01 00                                        	mov	[base_code],al
00013EA7: C6 05 A8 A2 01 00 09                                  	mov	[xop_opcode_map],9
00013EAE: E9 44 D9 FF FF                                        	jmp	avx_xop_common
                                                                xop_single_source_128bit_instruction:
00013EB3: 80 0D 99 A2 01 00 02                                  	or	[operand_flags],2
00013EBA: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
00013EC1: EB DF                                                 	jmp	xop_instruction_9
                                                                xop_triple_source_128bit_instruction:
00013EC3: C6 05 9F A2 01 00 FF                                  	mov	[immediate_size],-1
00013ECA: C6 05 F4 A1 01 00 00                                  	mov	byte [value],0
00013ED1: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
00013ED8: EB 15                                                 	jmp	xop_instruction_8
                                                                xop_128bit_instruction:
00013EDA: C6 05 9F A2 01 00 FE                                  	mov	[immediate_size],-2
00013EE1: C6 05 F4 A1 01 00 00                                  	mov	byte [value],0
00013EE8: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
                                                                      xop_instruction_8:
00013EEF: A2 A3 A2 01 00                                        	mov	[base_code],al
00013EF4: C6 05 A8 A2 01 00 08                                  	mov	[xop_opcode_map],8
00013EFB: E9 F7 D8 FF FF                                        	jmp	avx_xop_common
                                                                xop_pcom_b_instruction:
00013F00: B4 CC                                                 	mov	ah,0CCh
00013F02: EB 1A                                                 	jmp	xop_pcom_instruction
                                                                xop_pcom_d_instruction:
00013F04: B4 CE                                                 	mov	ah,0CEh
00013F06: EB 16                                                 	jmp	xop_pcom_instruction
                                                                xop_pcom_q_instruction:
00013F08: B4 CF                                                 	mov	ah,0CFh
00013F0A: EB 12                                                 	jmp	xop_pcom_instruction
                                                                xop_pcom_w_instruction:
00013F0C: B4 CD                                                 	mov	ah,0CDh
00013F0E: EB 0E                                                 	jmp	xop_pcom_instruction
                                                                xop_pcom_ub_instruction:
00013F10: B4 EC                                                 	mov	ah,0ECh
00013F12: EB 0A                                                 	jmp	xop_pcom_instruction
                                                                xop_pcom_ud_instruction:
00013F14: B4 EE                                                 	mov	ah,0EEh
00013F16: EB 06                                                 	jmp	xop_pcom_instruction
                                                                xop_pcom_uq_instruction:
00013F18: B4 EF                                                 	mov	ah,0EFh
00013F1A: EB 02                                                 	jmp	xop_pcom_instruction
                                                                xop_pcom_uw_instruction:
00013F1C: B4 ED                                                 	mov	ah,0EDh
                                                                      xop_pcom_instruction:
00013F1E: A2 F4 A1 01 00                                        	mov	byte [value],al
00013F23: C6 05 9F A2 01 00 FC                                  	mov	[immediate_size],-4
00013F2A: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
00013F31: 88 25 A3 A2 01 00                                     	mov	[base_code],ah
00013F37: C6 05 A8 A2 01 00 08                                  	mov	[xop_opcode_map],8
00013F3E: E9 B4 D8 FF FF                                        	jmp	avx_xop_common
                                                                vpcmov_instruction:
00013F43: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00013F4A: C6 05 9F A2 01 00 FE                                  	mov	[immediate_size],-2
00013F51: C6 05 F4 A1 01 00 00                                  	mov	byte [value],0
00013F58: C6 05 A9 A2 01 00 00                                  	mov	[mmx_size],0
00013F5F: A2 A3 A2 01 00                                        	mov	[base_code],al
00013F64: C6 05 A8 A2 01 00 08                                  	mov	[xop_opcode_map],8
00013F6B: E9 87 D8 FF FF                                        	jmp	avx_xop_common
                                                                xop_shift_instruction:
00013F70: A2 A3 A2 01 00                                        	mov	[base_code],al
00013F75: 80 0D 9D A2 01 00 02                                  	or	[vex_required],2
00013F7C: C6 05 A8 A2 01 00 09                                  	mov	[xop_opcode_map],9
00013F83: E8 AB 01 00 00                                        	call	take_avx_register
00013F88: 80 FC 10                                              	cmp	ah,16
00013F8B: 0F 85 A3 C9 FE FF                                     	jne	invalid_operand
00013F91: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
00013F96: AC                                                    	lods	byte [esi]
00013F97: 3C 2C                                                 	cmp	al,','
00013F99: 0F 85 95 C9 FE FF                                     	jne	invalid_operand
00013F9F: AC                                                    	lods	byte [esi]
00013FA0: E8 85 CD FF FF                                        	call	get_size_operator
00013FA5: 3C 5B                                                 	cmp	al,'['
00013FA7: 0F 84 8C 00 00 00                                     	je	xop_shift_reg_mem
00013FAD: 3C 10                                                 	cmp	al,10h
00013FAF: 0F 85 7F C9 FE FF                                     	jne	invalid_operand
00013FB5: AC                                                    	lods	byte [esi]
00013FB6: E8 60 CD FF FF                                        	call	convert_xmm_register
00013FBB: A2 9E A2 01 00                                        	mov	[vex_register],al
00013FC0: AC                                                    	lods	byte [esi]
00013FC1: 3C 2C                                                 	cmp	al,','
00013FC3: 0F 85 6B C9 FE FF                                     	jne	invalid_operand
00013FC9: 56                                                    	push	esi
00013FCA: 30 C9                                                 	xor	cl,cl
00013FCC: 86 0D 98 A2 01 00                                     	xchg	cl,[operand_size]
00013FD2: AC                                                    	lods	byte [esi]
00013FD3: E8 52 CD FF FF                                        	call	get_size_operator
00013FD8: 5E                                                    	pop	esi
00013FD9: 86 0D 98 A2 01 00                                     	xchg	cl,[operand_size]
00013FDF: 3C 5B                                                 	cmp	al,'['
00013FE1: 74 16                                                 	je	xop_shift_reg_reg_mem
00013FE3: 3C 10                                                 	cmp	al,10h
00013FE5: 75 29                                                 	jne	xop_shift_reg_reg_imm
00013FE7: E8 47 01 00 00                                        	call	take_avx_register
00013FEC: 88 C3                                                 	mov	bl,al
00013FEE: 86 1D 9E A2 01 00                                     	xchg	bl,[vex_register]
00013FF4: E9 FC 76 FF FF                                        	jmp	nomem_instruction_ready
                                                                      xop_shift_reg_reg_mem:
00013FF9: 80 0D 9B A2 01 00 08                                  	or	[rex_prefix],8
00014000: AC                                                    	lods	byte [esi]
00014001: E8 24 CD FF FF                                        	call	get_size_operator
00014006: E8 7B CD FF FF                                        	call	get_address
0001400B: E9 0A 75 FF FF                                        	jmp	instruction_ready
                                                                      xop_shift_reg_reg_imm:
00014010: 30 DB                                                 	xor	bl,bl
00014012: 86 1D 9E A2 01 00                                     	xchg	bl,[vex_register]
00014018: 80 3D A3 A2 01 00 94                                  	cmp	[base_code],94h
0001401F: 0F 83 0F C9 FE FF                                     	jae	invalid_operand
00014025: 80 05 A3 A2 01 00 30                                  	add	[base_code],30h
0001402C: C6 05 A8 A2 01 00 08                                  	mov	[xop_opcode_map],8
00014033: 4E                                                    	dec	esi
00014034: E9 94 AC FF FF                                        	jmp	mmx_nomem_imm8
                                                                      xop_shift_reg_mem:
00014039: E8 48 CD FF FF                                        	call	get_address
0001403E: AC                                                    	lods	byte [esi]
0001403F: 3C 2C                                                 	cmp	al,','
00014041: 0F 85 ED C8 FE FF                                     	jne	invalid_operand
00014047: 56                                                    	push	esi
00014048: 30 C9                                                 	xor	cl,cl
0001404A: 86 0D 98 A2 01 00                                     	xchg	cl,[operand_size]
00014050: AC                                                    	lods	byte [esi]
00014051: E8 D4 CC FF FF                                        	call	get_size_operator
00014056: 5E                                                    	pop	esi
00014057: 86 0D 98 A2 01 00                                     	xchg	cl,[operand_size]
0001405D: 3C 10                                                 	cmp	al,10h
0001405F: 75 0F                                                 	jne	xop_shift_reg_mem_imm
00014061: E8 CD 00 00 00                                        	call	take_avx_register
00014066: A2 9E A2 01 00                                        	mov	[vex_register],al
0001406B: E9 AA 74 FF FF                                        	jmp	instruction_ready
                                                                      xop_shift_reg_mem_imm:
00014070: 80 3D A3 A2 01 00 94                                  	cmp	[base_code],94h
00014077: 0F 83 B7 C8 FE FF                                     	jae	invalid_operand
0001407D: 80 05 A3 A2 01 00 30                                  	add	[base_code],30h
00014084: C6 05 A8 A2 01 00 08                                  	mov	[xop_opcode_map],8
0001408B: 4E                                                    	dec	esi
0001408C: E9 F4 AB FF FF                                        	jmp	mmx_imm8
                                                                
                                                                avx512_4vnniw_instruction:
00014091: C6 05 9C A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
00014098: C6 05 A3 A2 01 00 0F                                  	mov	[base_code],0Fh
0001409F: C6 05 A4 A2 01 00 38                                  	mov	[extended_code],38h
000140A6: A2 A5 A2 01 00                                        	mov	[supplemental_code],al
000140AB: C6 05 A9 A2 01 00 10                                  	mov	[mmx_size],16
000140B2: C6 05 A1 A2 01 00 00                                  	mov	[broadcast_size],0
000140B9: 80 0D 9D A2 01 00 08                                  	or	[vex_required],8
000140C0: E8 6E 00 00 00                                        	call	take_avx_register
000140C5: A2 A6 A2 01 00                                        	mov	[postbyte_register],al
000140CA: E8 03 DA FF FF                                        	call	take_avx512_mask
000140CF: AC                                                    	lods	byte [esi]
000140D0: 3C 2C                                                 	cmp	al,','
000140D2: 0F 85 5C C8 FE FF                                     	jne	invalid_operand
000140D8: E8 56 00 00 00                                        	call	take_avx_register
000140DD: A2 9E A2 01 00                                        	mov	[vex_register],al
000140E2: 80 3E 2B                                              	cmp	byte [esi],'+'
000140E5: 75 0E                                                 	jne	reg4_ok
000140E7: 46                                                    	inc	esi
000140E8: 81 3E 28 01 03 29                                     	cmp	dword [esi],29030128h
000140EE: 0F 85 40 C8 FE FF                                     	jne	invalid_operand
000140F4: AD                                                    	lods	dword [esi]
                                                                      reg4_ok:
000140F5: 80 3D 98 A2 01 00 40                                  	cmp	[operand_size],64
000140FC: 0F 85 3C C8 FE FF                                     	jne	invalid_operand_size
00014102: C6 05 98 A2 01 00 00                                  	mov	[operand_size],0
00014109: AC                                                    	lods	byte [esi]
0001410A: 3C 2C                                                 	cmp	al,','
0001410C: 0F 85 22 C8 FE FF                                     	jne	invalid_operand
00014112: E8 52 D8 FF FF                                        	call	take_avx_rm
00014117: 0F 82 17 C8 FE FF                                     	jc	invalid_operand
0001411D: C6 05 98 A2 01 00 40                                  	mov	[operand_size],64
00014124: E9 F1 73 FF FF                                        	jmp	instruction_ready
                                                                
                                                                set_evex_mode:
00014129: A2 C0 A2 01 00                                        	mov	[evex_mode],al
0001412E: E9 3D 0E FF FF                                        	jmp	instruction_assembled
                                                                
                                                                take_avx_register:
00014133: AC                                                    	lods	byte [esi]
00014134: E8 F1 CB FF FF                                        	call	get_size_operator
00014139: 3C 10                                                 	cmp	al,10h
0001413B: 0F 85 F3 C7 FE FF                                     	jne	invalid_operand
00014141: AC                                                    	lods	byte [esi]
                                                                convert_avx_register:
00014142: 88 C4                                                 	mov	ah,al
00014144: 24 1F                                                 	and	al,1Fh
00014146: 80 E4 E0                                              	and	ah,0E0h
00014149: 80 EC 60                                              	sub	ah,60h
0001414C: 0F 82 E2 C7 FE FF                                     	jb	invalid_operand
00014152: 74 0F                                                 	jz	avx512_register_size
00014154: 80 EC 60                                              	sub	ah,60h
00014157: 0F 82 D7 C7 FE FF                                     	jb	invalid_operand
0001415D: 75 06                                                 	jnz	avx_register_size_ok
0001415F: B4 10                                                 	mov	ah,16
00014161: EB 02                                                 	jmp	avx_register_size_ok
                                                                      avx512_register_size:
00014163: B4 40                                                 	mov	ah,64
                                                                      avx_register_size_ok:
00014165: 3C 08                                                 	cmp	al,8
00014167: 0F 82 3F CB FF FF                                     	jb	match_register_size
0001416D: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
00014174: 0F 85 BA C7 FE FF                                     	jne	invalid_operand
0001417A: E9 2D CB FF FF                                        	jmp	match_register_size
                                                                store_vex_instruction_code:
0001417F: F6 05 9B A2 01 00 10                                  	test	[rex_prefix],10h
00014186: 0F 85 A8 C7 FE FF                                     	jnz	invalid_operand
0001418C: F6 05 9D A2 01 00 F8                                  	test	[vex_required],0F8h
00014193: 0F 85 B9 01 00 00                                     	jnz	store_evex_instruction_code
00014199: F6 05 9E A2 01 00 10                                  	test	[vex_register],10000b
000141A0: 0F 85 AC 01 00 00                                     	jnz	store_evex_instruction_code
000141A6: 80 3D 98 A2 01 00 40                                  	cmp	[operand_size],64
000141AD: 0F 84 9F 01 00 00                                     	je	store_evex_instruction_code
000141B3: A0 A3 A2 01 00                                        	mov	al,[base_code]
000141B8: 3C 0F                                                 	cmp	al,0Fh
000141BA: 0F 85 41 01 00 00                                     	jne	store_xop_instruction_code
000141C0: F6 05 9D A2 01 00 02                                  	test	[vex_required],2
000141C7: 75 4A                                                 	jnz	prepare_vex
000141C9: 80 3D C0 A2 01 00 00                                  	cmp	[evex_mode],0
000141D0: 74 41                                                 	je	prepare_vex
000141D2: 80 3D B1 A2 01 00 01                                  	cmp	[displacement_compression],1
000141D9: 75 38                                                 	jne	prepare_vex
000141DB: 81 FA 80 00 00 00                                     	cmp	edx,80h
000141E1: 72 30                                                 	jb	prepare_vex
000141E3: 83 FA 80                                              	cmp	edx,-80h
000141E6: 73 2B                                                 	jae	prepare_vex
000141E8: 88 D8                                                 	mov	al,bl
000141EA: 08 F8                                                 	or	al,bh
000141EC: C0 E8 04                                              	shr	al,4
000141EF: 3C 02                                                 	cmp	al,2
000141F1: 74 20                                                 	je	prepare_vex
000141F3: E8 53 02 00 00                                        	call	compress_displacement
000141F8: 80 3D B1 A2 01 00 02                                  	cmp	[displacement_compression],2
000141FF: 0F 87 75 01 00 00                                     	ja	prepare_evex
00014205: 72 0C                                                 	jb	prepare_vex
00014207: FE 0D B1 A2 01 00                                     	dec	[displacement_compression]
0001420D: 8B 15 30 A2 01 00                                     	mov	edx,[uncompressed_displacement]
                                                                      prepare_vex:
00014213: 8A 25 A4 A2 01 00                                     	mov	ah,[extended_code]
00014219: 80 FC 38                                              	cmp	ah,38h
0001421C: 74 6F                                                 	je	store_vex_0f38_instruction_code
0001421E: 80 FC 3A                                              	cmp	ah,3Ah
00014221: 74 74                                                 	je	store_vex_0f3a_instruction_code
00014223: F6 05 9B A2 01 00 0B                                  	test	[rex_prefix],1011b
0001422A: 75 75                                                 	jnz	store_vex_0f_instruction_code
0001422C: 88 67 02                                              	mov	[edi+2],ah
0001422F: C6 07 C5                                              	mov	byte [edi],0C5h
00014232: A0 9E A2 01 00                                        	mov	al,[vex_register]
00014237: F6 D0                                                 	not	al
00014239: C0 E0 03                                              	shl	al,3
0001423C: 8A 25 9B A2 01 00                                     	mov	ah,[rex_prefix]
00014242: C0 E4 05                                              	shl	ah,5
00014245: 80 E4 80                                              	and	ah,80h
00014248: 30 E0                                                 	xor	al,ah
0001424A: E8 0C 00 00 00                                        	call	get_vex_lpp_bits
0001424F: 88 47 01                                              	mov	[edi+1],al
00014252: E8 89 00 00 00                                        	call	check_vex
00014257: 83 C7 03                                              	add	edi,3
0001425A: C3                                                    	ret
                                                                      get_vex_lpp_bits:
0001425B: 80 3D 98 A2 01 00 20                                  	cmp	[operand_size],32
00014262: 75 02                                                 	jne	get_vex_pp_bits
00014264: 0C 04                                                 	or	al,100b
                                                                      get_vex_pp_bits:
00014266: 8A 25 9C A2 01 00                                     	mov	ah,[opcode_prefix]
0001426C: 80 FC 66                                              	cmp	ah,66h
0001426F: 74 19                                                 	je	vex_66
00014271: 80 FC F3                                              	cmp	ah,0F3h
00014274: 74 11                                                 	je	vex_f3
00014276: 80 FC F2                                              	cmp	ah,0F2h
00014279: 74 09                                                 	je	vex_f2
0001427B: 84 E4                                                 	test	ah,ah
0001427D: 0F 85 ED C6 FE FF                                     	jnz	disallowed_combination_of_registers
00014283: C3                                                    	ret
                                                                      vex_f2:
00014284: 0C 03                                                 	or	al,11b
00014286: C3                                                    	ret
                                                                      vex_f3:
00014287: 0C 02                                                 	or	al,10b
00014289: C3                                                    	ret
                                                                      vex_66:
0001428A: 0C 01                                                 	or	al,1
0001428C: C3                                                    	ret
                                                                      store_vex_0f38_instruction_code:
0001428D: B0 E2                                                 	mov	al,11100010b
0001428F: 8A 25 A5 A2 01 00                                     	mov	ah,[supplemental_code]
00014295: EB 0C                                                 	jmp	make_c4_vex
                                                                      store_vex_0f3a_instruction_code:
00014297: B0 E3                                                 	mov	al,11100011b
00014299: 8A 25 A5 A2 01 00                                     	mov	ah,[supplemental_code]
0001429F: EB 02                                                 	jmp	make_c4_vex
                                                                      store_vex_0f_instruction_code:
000142A1: B0 E1                                                 	mov	al,11100001b
                                                                      make_c4_vex:
000142A3: 88 67 03                                              	mov	[edi+3],ah
000142A6: C6 07 C4                                              	mov	byte [edi],0C4h
000142A9: 8A 25 9B A2 01 00                                     	mov	ah,[rex_prefix]
000142AF: C0 E4 05                                              	shl	ah,5
000142B2: 30 E0                                                 	xor	al,ah
000142B4: 88 47 01                                              	mov	[edi+1],al
000142B7: E8 24 00 00 00                                        	call	check_vex
000142BC: A0 9E A2 01 00                                        	mov	al,[vex_register]
000142C1: 34 0F                                                 	xor	al,1111b
000142C3: C0 E0 03                                              	shl	al,3
000142C6: 8A 25 9B A2 01 00                                     	mov	ah,[rex_prefix]
000142CC: C0 E4 04                                              	shl	ah,4
000142CF: 80 E4 80                                              	and	ah,80h
000142D2: 08 E0                                                 	or	al,ah
000142D4: E8 82 FF FF FF                                        	call	get_vex_lpp_bits
000142D9: 88 47 02                                              	mov	[edi+2],al
000142DC: 83 C7 04                                              	add	edi,4
000142DF: C3                                                    	ret
                                                                      check_vex:
000142E0: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
000142E7: 74 17                                                 	je	vex_ok
000142E9: F6 D0                                                 	not	al
000142EB: A8 C0                                                 	test	al,11000000b
000142ED: 0F 85 41 C6 FE FF                                     	jnz	invalid_operand
000142F3: F6 05 9B A2 01 00 40                                  	test	[rex_prefix],40h
000142FA: 0F 85 34 C6 FE FF                                     	jnz	invalid_operand
                                                                      vex_ok:
00014300: C3                                                    	ret
                                                                store_xop_instruction_code:
00014301: 88 47 03                                              	mov	[edi+3],al
00014304: C6 07 8F                                              	mov	byte [edi],8Fh
00014307: A0 A8 A2 01 00                                        	mov	al,[xop_opcode_map]
0001430C: 8A 25 9B A2 01 00                                     	mov	ah,[rex_prefix]
00014312: F6 C4 40                                              	test	ah,40h
00014315: 74 0D                                                 	jz	xop_ok
00014317: 80 3D BE A2 01 00 40                                  	cmp	[code_type],64
0001431E: 0F 85 10 C6 FE FF                                     	jne	invalid_operand
                                                                      xop_ok:
00014324: F6 D4                                                 	not	ah
00014326: C0 E4 05                                              	shl	ah,5
00014329: 30 E0                                                 	xor	al,ah
0001432B: 88 47 01                                              	mov	[edi+1],al
0001432E: A0 9E A2 01 00                                        	mov	al,[vex_register]
00014333: 34 0F                                                 	xor	al,1111b
00014335: C0 E0 03                                              	shl	al,3
00014338: 8A 25 9B A2 01 00                                     	mov	ah,[rex_prefix]
0001433E: C0 E4 04                                              	shl	ah,4
00014341: 80 E4 80                                              	and	ah,80h
00014344: 08 E0                                                 	or	al,ah
00014346: E8 10 FF FF FF                                        	call	get_vex_lpp_bits
0001434B: 88 47 02                                              	mov	[edi+2],al
0001434E: 83 C7 04                                              	add	edi,4
00014351: C3                                                    	ret
                                                                store_evex_instruction_code:
00014352: F6 05 9D A2 01 00 02                                  	test	[vex_required],2
00014359: 0F 85 D5 C5 FE FF                                     	jnz	invalid_operand
0001435F: 80 3D A3 A2 01 00 0F                                  	cmp	[base_code],0Fh
00014366: 0F 85 C8 C5 FE FF                                     	jne	invalid_operand
0001436C: 80 3D B1 A2 01 00 01                                  	cmp	[displacement_compression],1
00014373: 75 05                                                 	jne	prepare_evex
00014375: E8 D1 00 00 00                                        	call	compress_displacement
                                                                      prepare_evex:
0001437A: 8A 25 A4 A2 01 00                                     	mov	ah,[extended_code]
00014380: 80 FC 38                                              	cmp	ah,38h
00014383: 0F 84 A8 00 00 00                                     	je	store_evex_0f38_instruction_code
00014389: 80 FC 3A                                              	cmp	ah,3Ah
0001438C: 0F 84 AC 00 00 00                                     	je	store_evex_0f3a_instruction_code
00014392: B0 F1                                                 	mov	al,11110001b
                                                                      make_evex:
00014394: 88 67 04                                              	mov	[edi+4],ah
00014397: C6 07 62                                              	mov	byte [edi],62h
0001439A: 8A 25 9B A2 01 00                                     	mov	ah,[rex_prefix]
000143A0: C0 E4 05                                              	shl	ah,5
000143A3: 30 E0                                                 	xor	al,ah
000143A5: 8A 25 9D A2 01 00                                     	mov	ah,[vex_required]
000143AB: 80 E4 10                                              	and	ah,10h
000143AE: 30 E0                                                 	xor	al,ah
000143B0: 88 47 01                                              	mov	[edi+1],al
000143B3: E8 28 FF FF FF                                        	call	check_vex
000143B8: A0 9E A2 01 00                                        	mov	al,[vex_register]
000143BD: F6 D0                                                 	not	al
000143BF: 24 0F                                                 	and	al,1111b
000143C1: C0 E0 03                                              	shl	al,3
000143C4: 8A 25 9B A2 01 00                                     	mov	ah,[rex_prefix]
000143CA: C0 E4 04                                              	shl	ah,4
000143CD: 0A 25 9B A2 01 00                                     	or	ah,[rex_prefix]
000143D3: 80 E4 80                                              	and	ah,80h
000143D6: 08 E0                                                 	or	al,ah
000143D8: 0C 04                                                 	or	al,100b
000143DA: E8 87 FE FF FF                                        	call	get_vex_pp_bits
000143DF: 88 47 02                                              	mov	[edi+2],al
000143E2: A0 9E A2 01 00                                        	mov	al,[vex_register]
000143E7: F6 D0                                                 	not	al
000143E9: D0 E8                                                 	shr	al,1
000143EB: 24 08                                                 	and	al,1000b
000143ED: F6 05 9D A2 01 00 80                                  	test	[vex_required],80h
000143F4: 75 0F                                                 	jne	evex_rounding
000143F6: 8A 25 98 A2 01 00                                     	mov	ah,[operand_size]
000143FC: 80 FC 10                                              	cmp	ah,16
000143FF: 76 0F                                                 	jbe	evex_l_ok
00014401: 08 E0                                                 	or	al,ah
00014403: EB 0B                                                 	jmp	evex_l_ok
                                                                      evex_rounding:
00014405: 8A 25 A2 A2 01 00                                     	mov	ah,[rounding_mode]
0001440B: C0 E4 05                                              	shl	ah,5
0001440E: 08 E0                                                 	or	al,ah
                                                                      evex_l_ok:
00014410: F6 05 9D A2 01 00 20                                  	test	[vex_required],20h
00014417: 74 06                                                 	jz	evex_zaaa_ok
00014419: 0A 05 A0 A2 01 00                                     	or	al,[mask_register]
                                                                      evex_zaaa_ok:
0001441F: F6 05 9D A2 01 00 40                                  	test	[vex_required],40h
00014426: 74 02                                                 	jz	evex_b_ok
00014428: 0C 10                                                 	or	al,10h
                                                                      evex_b_ok:
0001442A: 88 47 03                                              	mov	[edi+3],al
0001442D: 83 C7 05                                              	add	edi,5
00014430: C3                                                    	ret
                                                                      store_evex_0f38_instruction_code:
00014431: B0 F2                                                 	mov	al,11110010b
00014433: 8A 25 A5 A2 01 00                                     	mov	ah,[supplemental_code]
00014439: E9 56 FF FF FF                                        	jmp	make_evex
                                                                      store_evex_0f3a_instruction_code:
0001443E: B0 F3                                                 	mov	al,11110011b
00014440: 8A 25 A5 A2 01 00                                     	mov	ah,[supplemental_code]
00014446: E9 49 FF FF FF                                        	jmp	make_evex
                                                                compress_displacement:
0001444B: 89 CD                                                 	mov	ebp,ecx
0001444D: 89 15 30 A2 01 00                                     	mov	[uncompressed_displacement],edx
00014453: 09 D2                                                 	or	edx,edx
00014455: 74 37                                                 	jz	displacement_compressed
00014457: 31 C9                                                 	xor	ecx,ecx
00014459: 8A 0D A9 A2 01 00                                     	mov	cl,[mmx_size]
0001445F: 84 C9                                                 	test	cl,cl
00014461: 75 06                                                 	jnz	calculate_displacement_scale
00014463: 8A 0D 98 A2 01 00                                     	mov	cl,[operand_size]
                                                                      calculate_displacement_scale:
00014469: 0F BC C9                                              	bsf	ecx,ecx
0001446C: 74 27                                                 	jz	displacement_compression_ok
0001446E: 31 C0                                                 	xor	eax,eax
00014470: 0F AD D0                                              	shrd	eax,edx,cl
00014473: 75 11                                                 	jnz	displacement_not_compressed
00014475: D3 FA                                                 	sar	edx,cl
00014477: 81 FA 80 00 00 00                                     	cmp	edx,80h
0001447D: 72 0F                                                 	jb	displacement_compressed
0001447F: 83 FA 80                                              	cmp	edx,-80h
00014482: 73 0A                                                 	jnb	displacement_compressed
00014484: D3 E2                                                 	shl	edx,cl
                                                                      displacement_not_compressed:
00014486: FE 05 B1 A2 01 00                                     	inc	[displacement_compression]
0001448C: EB 07                                                 	jmp	displacement_compression_ok
                                                                      displacement_compressed:
0001448E: 80 05 B1 A2 01 00 02                                  	add	[displacement_compression],2
                                                                      displacement_compression_ok:
00014495: 89 E9                                                 	mov	ecx,ebp
00014497: C3                                                    	ret
                                                                
                                                                
                                                                include '..\tables.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
00014498: 49 4E 43 4C 55 44 45 00                               include_variable db 'INCLUDE',0
                                                                
000144A0: 1B                                                    symbol_characters db 27
000144A1: 09 0A 0D 1A 20 2B 2D 2F 2A 3D 3C 3E 28 29 5B 5D        db 9,0Ah,0Dh,1Ah,20h,'+-/*=<>()[]{}:,|&~#`;\'
          7B 7D 3A 2C 7C 26 7E 23 60 3B 5C                      
                                                                
                                                                preprocessor_directives:
000144BC: 06 64 65 66 69 6E 65                                   db 6,'define'
000144C3: 8E 04                                                  dw define_symbolic_constant-directive_handler
000144C5: 07 69 6E 63 6C 75 64 65                                db 7,'include'
000144CD: A6 17                                                  dw include_file-directive_handler
000144CF: 03 69 72 70                                            db 3,'irp'
000144D3: F0 06                                                  dw irp_directive-directive_handler
000144D5: 04 69 72 70 73                                         db 4,'irps'
000144DA: F9 06                                                  dw irps_directive-directive_handler
000144DC: 04 69 72 70 76                                         db 4,'irpv'
000144E1: 02 07                                                  dw irpv_directive-directive_handler
000144E3: 05 6D 61 63 72 6F                                      db 5,'macro'
000144E9: BB 04                                                  dw define_macro-directive_handler
000144EB: 05 6D 61 74 63 68                                      db 5,'match'
000144F1: 0B 07                                                  dw match_directive-directive_handler
000144F3: 08 70 6F 73 74 70 6F 6E 65                             db 8,'postpone'
000144FC: A8 06                                                  dw postpone_directive-directive_handler
000144FE: 05 70 75 72 67 65                                      db 5,'purge'
00014504: BB 07                                                  dw purge_macro-directive_handler
00014506: 04 72 65 70 74                                         db 4,'rept'
0001450B: E7 06                                                  dw rept_directive-directive_handler
0001450D: 07 72 65 73 74 6F 72 65                                db 7,'restore'
00014515: C3 07                                                  dw restore_equ_constant-directive_handler
00014517: 07 72 65 73 74 72 75 63                                db 7,'restruc'
0001451F: BF 07                                                  dw purge_struc-directive_handler
00014521: 05 73 74 72 75 63                                      db 5,'struc'
00014527: B7 04                                                  dw define_struc-directive_handler
00014529: 00                                                     db 0
                                                                
                                                                macro_directives:
0001452A: 06 63 6F 6D 6D 6F 6E                                   db 6,'common'
00014531: 23 16                                                  dw common_block-directive_handler
00014533: 07 66 6F 72 77 61 72 64                                db 7,'forward'
0001453B: 3A 16                                                  dw forward_block-directive_handler
0001453D: 05 6C 6F 63 61 6C                                      db 5,'local'
00014543: 51 15                                                  dw local_symbols-directive_handler
00014545: 07 72 65 76 65 72 73 65                                db 7,'reverse'
0001454D: 5A 16                                                  dw reverse_block-directive_handler
0001454F: 00                                                     db 0
                                                                
                                                                preprocessor_special_symbols:
00014550: 04 66 69 6C 65                                         db 4,'file'
00014555: FC 08                                                  dw preprocessed_file_value-directive_handler
00014557: 04 6C 69 6E 65                                         db 4,'line'
0001455C: 3A 09                                                  dw preprocessed_line_value-directive_handler
0001455E: 00                                                     db 0
                                                                
                                                                operators:
0001455F: 01 2B 80                                               db 1,'+',80h
00014562: 01 2D 81                                               db 1,'-',81h
00014565: 01 2A 90                                               db 1,'*',90h
00014568: 01 2F 91                                               db 1,'/',91h
0001456B: 03 61 6E 64 B0                                         db 3,'and',0B0h
00014570: 03 6D 6F 64 A0                                         db 3,'mod',0A0h
00014575: 02 6F 72 B1                                            db 2,'or',0B1h
00014579: 03 73 68 6C C0                                         db 3,'shl',0C0h
0001457E: 03 73 68 72 C1                                         db 3,'shr',0C1h
00014583: 03 78 6F 72 B2                                         db 3,'xor',0B2h
00014588: 00                                                     db 0
                                                                
                                                                single_operand_operators:
00014589: 01 2B 82                                               db 1,'+',82h
0001458C: 01 2D 83                                               db 1,'-',83h
0001458F: 03 62 73 66 E0                                         db 3,'bsf',0E0h
00014594: 03 62 73 72 E1                                         db 3,'bsr',0E1h
00014599: 03 6E 6F 74 D0                                         db 3,'not',0D0h
0001459E: 03 70 6C 74 F1                                         db 3,'plt',0F1h
000145A3: 03 72 76 61 F0                                         db 3,'rva',0F0h
000145A8: 00                                                     db 0
                                                                
                                                                directive_operators:
000145A9: 05 61 6C 69 67 6E 8C                                   db 5,'align',8Ch
000145B0: 02 61 73 86                                            db 2,'as',86h
000145B4: 02 61 74 80                                            db 2,'at',80h
000145B8: 07 64 65 66 69 6E 65 64 88                             db 7,'defined',88h
000145C1: 08 64 65 66 69 6E 69 74 65 8A                          db 8,'definite',8Ah
000145CB: 03 64 75 70 81                                         db 3,'dup',81h
000145D0: 02 65 71 F0                                            db 2,'eq',0F0h
000145D4: 06 65 71 74 79 70 65 F7                                db 6,'eqtype',0F7h
000145DC: 04 66 72 6F 6D 82                                      db 4,'from',82h
000145E2: 02 69 6E F6                                            db 2,'in',0F6h
000145E6: 02 6F 6E 84                                            db 2,'on',84h
000145EA: 03 70 74 72 85                                         db 3,'ptr',85h
000145EF: 0A 72 65 6C 61 74 69 76 65 74 6F F8                    db 10,'relativeto',0F8h
000145FB: 04 75 73 65 64 89                                      db 4,'used',89h
00014601: 00                                                     db 0
                                                                
                                                                address_sizes:
00014602: 04 62 79 74 65 01                                      db 4,'byte',1
00014608: 05 64 77 6F 72 64 04                                   db 5,'dword',4
0001460F: 05 71 77 6F 72 64 08                                   db 5,'qword',8
00014616: 04 77 6F 72 64 02                                      db 4,'word',2
0001461C: 00                                                     db 0
                                                                
                                                                symbols:
0001461D: 2C 00 01 00                                            dw symbols_1-symbols,(symbols_2-symbols_1)/(1+2)
00014621: 2F 00 29 00                                            dw symbols_2-symbols,(symbols_3-symbols_2)/(2+2)
00014625: D3 00 57 00                                            dw symbols_3-symbols,(symbols_4-symbols_3)/(3+2)
00014629: 86 02 52 00                                            dw symbols_4-symbols,(symbols_5-symbols_4)/(4+2)
0001462D: 72 04 52 00                                            dw symbols_5-symbols,(symbols_6-symbols_5)/(5+2)
00014631: B0 06 08 00                                            dw symbols_6-symbols,(symbols_7-symbols_6)/(6+2)
00014635: F0 06 04 00                                            dw symbols_7-symbols,(symbols_8-symbols_7)/(7+2)
00014639: 14 07 06 00                                            dw symbols_8-symbols,(symbols_9-symbols_8)/(8+2)
0001463D: 50 07 02 00                                            dw symbols_9-symbols,(symbols_10-symbols_9)/(9+2)
00014641: 66 07 04 00                                            dw symbols_10-symbols,(symbols_11-symbols_10)/(10+2)
00014645: 96 07 03 00                                            dw symbols_11-symbols,(symbols_end-symbols_11)/(11+2)
                                                                
                                                                symbols_1:
00014649: 7A 1F 00                                               db 'z',1Fh,0
                                                                symbols_2:
0001464C: 61 68 10 04                                            db 'ah',10h,04h
00014650: 61 6C 10 10                                            db 'al',10h,10h
00014654: 61 78 10 20                                            db 'ax',10h,20h
00014658: 62 68 10 07                                            db 'bh',10h,07h
0001465C: 62 6C 10 13                                            db 'bl',10h,13h
00014660: 62 70 10 25                                            db 'bp',10h,25h
00014664: 62 78 10 23                                            db 'bx',10h,23h
00014668: 63 68 10 05                                            db 'ch',10h,05h
0001466C: 63 6C 10 11                                            db 'cl',10h,11h
00014670: 63 73 10 32                                            db 'cs',10h,32h
00014674: 63 78 10 21                                            db 'cx',10h,21h
00014678: 64 68 10 06                                            db 'dh',10h,06h
0001467C: 64 69 10 27                                            db 'di',10h,27h
00014680: 64 6C 10 12                                            db 'dl',10h,12h
00014684: 64 73 10 34                                            db 'ds',10h,34h
00014688: 64 78 10 22                                            db 'dx',10h,22h
0001468C: 65 73 10 31                                            db 'es',10h,31h
00014690: 66 73 10 35                                            db 'fs',10h,35h
00014694: 67 73 10 36                                            db 'gs',10h,36h
00014698: 6B 30 14 50                                            db 'k0',14h,50h
0001469C: 6B 31 14 51                                            db 'k1',14h,51h
000146A0: 6B 32 14 52                                            db 'k2',14h,52h
000146A4: 6B 33 14 53                                            db 'k3',14h,53h
000146A8: 6B 34 14 54                                            db 'k4',14h,54h
000146AC: 6B 35 14 55                                            db 'k5',14h,55h
000146B0: 6B 36 14 56                                            db 'k6',14h,56h
000146B4: 6B 37 14 57                                            db 'k7',14h,57h
000146B8: 6D 73 1C 41                                            db 'ms',1Ch,41h
000146BC: 6D 7A 18 20                                            db 'mz',18h,20h
000146C0: 6E 78 1B 83                                            db 'nx',1Bh,83h
000146C4: 70 65 18 30                                            db 'pe',18h,30h
000146C8: 72 38 10 88                                            db 'r8',10h,88h
000146CC: 72 39 10 89                                            db 'r9',10h,89h
000146D0: 72 64 1F 21                                            db 'rd',1Fh,21h
000146D4: 72 6E 1F 20                                            db 'rn',1Fh,20h
000146D8: 72 75 1F 22                                            db 'ru',1Fh,22h
000146DC: 72 7A 1F 23                                            db 'rz',1Fh,23h
000146E0: 73 69 10 26                                            db 'si',10h,26h
000146E4: 73 70 10 24                                            db 'sp',10h,24h
000146E8: 73 73 10 33                                            db 'ss',10h,33h
000146EC: 73 74 10 A0                                            db 'st',10h,0A0h
                                                                symbols_3:
000146F0: 62 70 6C 10 15                                         db 'bpl',10h,15h
000146F5: 63 72 30 14 00                                         db 'cr0',14h,00h
000146FA: 63 72 31 14 01                                         db 'cr1',14h,01h
000146FF: 63 72 32 14 02                                         db 'cr2',14h,02h
00014704: 63 72 33 14 03                                         db 'cr3',14h,03h
00014709: 63 72 34 14 04                                         db 'cr4',14h,04h
0001470E: 63 72 35 14 05                                         db 'cr5',14h,05h
00014713: 63 72 36 14 06                                         db 'cr6',14h,06h
00014718: 63 72 37 14 07                                         db 'cr7',14h,07h
0001471D: 63 72 38 14 08                                         db 'cr8',14h,08h
00014722: 63 72 39 14 09                                         db 'cr9',14h,09h
00014727: 64 69 6C 10 17                                         db 'dil',10h,17h
0001472C: 64 6C 6C 1B 80                                         db 'dll',1Bh,80h
00014731: 64 72 30 14 10                                         db 'dr0',14h,10h
00014736: 64 72 31 14 11                                         db 'dr1',14h,11h
0001473B: 64 72 32 14 12                                         db 'dr2',14h,12h
00014740: 64 72 33 14 13                                         db 'dr3',14h,13h
00014745: 64 72 34 14 14                                         db 'dr4',14h,14h
0001474A: 64 72 35 14 15                                         db 'dr5',14h,15h
0001474F: 64 72 36 14 16                                         db 'dr6',14h,16h
00014754: 64 72 37 14 17                                         db 'dr7',14h,17h
00014759: 64 72 38 14 18                                         db 'dr8',14h,18h
0001475E: 64 72 39 14 19                                         db 'dr9',14h,19h
00014763: 65 61 78 10 40                                         db 'eax',10h,40h
00014768: 65 62 70 10 45                                         db 'ebp',10h,45h
0001476D: 65 62 78 10 43                                         db 'ebx',10h,43h
00014772: 65 63 78 10 41                                         db 'ecx',10h,41h
00014777: 65 64 69 10 47                                         db 'edi',10h,47h
0001477C: 65 64 78 10 42                                         db 'edx',10h,42h
00014781: 65 66 69 1B 0A                                         db 'efi',1Bh,10
00014786: 65 69 70 10 94                                         db 'eip',10h,94h
0001478B: 65 6C 66 18 50                                         db 'elf',18h,50h
00014790: 65 73 69 10 46                                         db 'esi',10h,46h
00014795: 65 73 70 10 44                                         db 'esp',10h,44h
0001479A: 66 61 72 12 03                                         db 'far',12h,3
0001479F: 67 75 69 1B 02                                         db 'gui',1Bh,2
000147A4: 6D 6D 30 10 B0                                         db 'mm0',10h,0B0h
000147A9: 6D 6D 31 10 B1                                         db 'mm1',10h,0B1h
000147AE: 6D 6D 32 10 B2                                         db 'mm2',10h,0B2h
000147B3: 6D 6D 33 10 B3                                         db 'mm3',10h,0B3h
000147B8: 6D 6D 34 10 B4                                         db 'mm4',10h,0B4h
000147BD: 6D 6D 35 10 B5                                         db 'mm5',10h,0B5h
000147C2: 6D 6D 36 10 B6                                         db 'mm6',10h,0B6h
000147C7: 6D 6D 37 10 B7                                         db 'mm7',10h,0B7h
000147CC: 72 31 30 10 8A                                         db 'r10',10h,8Ah
000147D1: 72 31 31 10 8B                                         db 'r11',10h,8Bh
000147D6: 72 31 32 10 8C                                         db 'r12',10h,8Ch
000147DB: 72 31 33 10 8D                                         db 'r13',10h,8Dh
000147E0: 72 31 34 10 8E                                         db 'r14',10h,8Eh
000147E5: 72 31 35 10 8F                                         db 'r15',10h,8Fh
000147EA: 72 38 62 10 18                                         db 'r8b',10h,18h
000147EF: 72 38 64 10 48                                         db 'r8d',10h,48h
000147F4: 72 38 6C 10 18                                         db 'r8l',10h,18h
000147F9: 72 38 77 10 28                                         db 'r8w',10h,28h
000147FE: 72 39 62 10 19                                         db 'r9b',10h,19h
00014803: 72 39 64 10 49                                         db 'r9d',10h,49h
00014808: 72 39 6C 10 19                                         db 'r9l',10h,19h
0001480D: 72 39 77 10 29                                         db 'r9w',10h,29h
00014812: 72 61 78 10 80                                         db 'rax',10h,80h
00014817: 72 62 70 10 85                                         db 'rbp',10h,85h
0001481C: 72 62 78 10 83                                         db 'rbx',10h,83h
00014821: 72 63 78 10 81                                         db 'rcx',10h,81h
00014826: 72 64 69 10 87                                         db 'rdi',10h,87h
0001482B: 72 64 78 10 82                                         db 'rdx',10h,82h
00014830: 72 69 70 10 98                                         db 'rip',10h,98h
00014835: 72 73 69 10 86                                         db 'rsi',10h,86h
0001483A: 72 73 70 10 84                                         db 'rsp',10h,84h
0001483F: 73 61 65 1F 30                                         db 'sae',1Fh,30h
00014844: 73 69 6C 10 16                                         db 'sil',10h,16h
00014849: 73 70 6C 10 14                                         db 'spl',10h,14h
0001484E: 73 74 30 10 A0                                         db 'st0',10h,0A0h
00014853: 73 74 31 10 A1                                         db 'st1',10h,0A1h
00014858: 73 74 32 10 A2                                         db 'st2',10h,0A2h
0001485D: 73 74 33 10 A3                                         db 'st3',10h,0A3h
00014862: 73 74 34 10 A4                                         db 'st4',10h,0A4h
00014867: 73 74 35 10 A5                                         db 'st5',10h,0A5h
0001486C: 73 74 36 10 A6                                         db 'st6',10h,0A6h
00014871: 73 74 37 10 A7                                         db 'st7',10h,0A7h
00014876: 74 72 30 14 40                                         db 'tr0',14h,40h
0001487B: 74 72 31 14 41                                         db 'tr1',14h,41h
00014880: 74 72 32 14 42                                         db 'tr2',14h,42h
00014885: 74 72 33 14 43                                         db 'tr3',14h,43h
0001488A: 74 72 34 14 44                                         db 'tr4',14h,44h
0001488F: 74 72 35 14 45                                         db 'tr5',14h,45h
00014894: 74 72 36 14 46                                         db 'tr6',14h,46h
00014899: 74 72 37 14 47                                         db 'tr7',14h,47h
0001489E: 77 64 6D 1B 81                                         db 'wdm',1Bh,81h
                                                                symbols_4:
000148A3: 31 74 6F 32 1F 11                                      db '1to2',1Fh,11h
000148A9: 31 74 6F 34 1F 12                                      db '1to4',1Fh,12h
000148AF: 31 74 6F 38 1F 13                                      db '1to8',1Fh,13h
000148B5: 62 6E 64 30 14 60                                      db 'bnd0',14h,60h
000148BB: 62 6E 64 31 14 61                                      db 'bnd1',14h,61h
000148C1: 62 6E 64 32 14 62                                      db 'bnd2',14h,62h
000148C7: 62 6E 64 33 14 63                                      db 'bnd3',14h,63h
000148CD: 62 79 74 65 11 01                                      db 'byte',11h,1
000148D3: 63 6F 64 65 19 05                                      db 'code',19h,5
000148D9: 63 6F 66 66 18 40                                      db 'coff',18h,40h
000148DF: 63 72 31 30 14 0A                                      db 'cr10',14h,0Ah
000148E5: 63 72 31 31 14 0B                                      db 'cr11',14h,0Bh
000148EB: 63 72 31 32 14 0C                                      db 'cr12',14h,0Ch
000148F1: 63 72 31 33 14 0D                                      db 'cr13',14h,0Dh
000148F7: 63 72 31 34 14 0E                                      db 'cr14',14h,0Eh
000148FD: 63 72 31 35 14 0F                                      db 'cr15',14h,0Fh
00014903: 64 61 74 61 19 06                                      db 'data',19h,6
00014909: 64 72 31 30 14 1A                                      db 'dr10',14h,1Ah
0001490F: 64 72 31 31 14 1B                                      db 'dr11',14h,1Bh
00014915: 64 72 31 32 14 1C                                      db 'dr12',14h,1Ch
0001491B: 64 72 31 33 14 1D                                      db 'dr13',14h,1Dh
00014921: 64 72 31 34 14 1E                                      db 'dr14',14h,1Eh
00014927: 64 72 31 35 14 1F                                      db 'dr15',14h,1Fh
0001492D: 6D 73 36 34 1C 49                                      db 'ms64',1Ch,49h
00014933: 6E 65 61 72 12 02                                      db 'near',12h,2
00014939: 6E 6F 74 65 1E 04                                      db 'note',1Eh,4
0001493F: 70 65 36 34 18 3C                                      db 'pe64',18h,3Ch
00014945: 72 31 30 62 10 1A                                      db 'r10b',10h,1Ah
0001494B: 72 31 30 64 10 4A                                      db 'r10d',10h,4Ah
00014951: 72 31 30 6C 10 1A                                      db 'r10l',10h,1Ah
00014957: 72 31 30 77 10 2A                                      db 'r10w',10h,2Ah
0001495D: 72 31 31 62 10 1B                                      db 'r11b',10h,1Bh
00014963: 72 31 31 64 10 4B                                      db 'r11d',10h,4Bh
00014969: 72 31 31 6C 10 1B                                      db 'r11l',10h,1Bh
0001496F: 72 31 31 77 10 2B                                      db 'r11w',10h,2Bh
00014975: 72 31 32 62 10 1C                                      db 'r12b',10h,1Ch
0001497B: 72 31 32 64 10 4C                                      db 'r12d',10h,4Ch
00014981: 72 31 32 6C 10 1C                                      db 'r12l',10h,1Ch
00014987: 72 31 32 77 10 2C                                      db 'r12w',10h,2Ch
0001498D: 72 31 33 62 10 1D                                      db 'r13b',10h,1Dh
00014993: 72 31 33 64 10 4D                                      db 'r13d',10h,4Dh
00014999: 72 31 33 6C 10 1D                                      db 'r13l',10h,1Dh
0001499F: 72 31 33 77 10 2D                                      db 'r13w',10h,2Dh
000149A5: 72 31 34 62 10 1E                                      db 'r14b',10h,1Eh
000149AB: 72 31 34 64 10 4E                                      db 'r14d',10h,4Eh
000149B1: 72 31 34 6C 10 1E                                      db 'r14l',10h,1Eh
000149B7: 72 31 34 77 10 2E                                      db 'r14w',10h,2Eh
000149BD: 72 31 35 62 10 1F                                      db 'r15b',10h,1Fh
000149C3: 72 31 35 64 10 4F                                      db 'r15d',10h,4Fh
000149C9: 72 31 35 6C 10 1F                                      db 'r15l',10h,1Fh
000149CF: 72 31 35 77 10 2F                                      db 'r15w',10h,2Fh
000149D5: 77 6F 72 64 11 02                                      db 'word',11h,2
000149DB: 78 6D 6D 30 10 C0                                      db 'xmm0',10h,0C0h
000149E1: 78 6D 6D 31 10 C1                                      db 'xmm1',10h,0C1h
000149E7: 78 6D 6D 32 10 C2                                      db 'xmm2',10h,0C2h
000149ED: 78 6D 6D 33 10 C3                                      db 'xmm3',10h,0C3h
000149F3: 78 6D 6D 34 10 C4                                      db 'xmm4',10h,0C4h
000149F9: 78 6D 6D 35 10 C5                                      db 'xmm5',10h,0C5h
000149FF: 78 6D 6D 36 10 C6                                      db 'xmm6',10h,0C6h
00014A05: 78 6D 6D 37 10 C7                                      db 'xmm7',10h,0C7h
00014A0B: 78 6D 6D 38 10 C8                                      db 'xmm8',10h,0C8h
00014A11: 78 6D 6D 39 10 C9                                      db 'xmm9',10h,0C9h
00014A17: 79 6D 6D 30 10 E0                                      db 'ymm0',10h,0E0h
00014A1D: 79 6D 6D 31 10 E1                                      db 'ymm1',10h,0E1h
00014A23: 79 6D 6D 32 10 E2                                      db 'ymm2',10h,0E2h
00014A29: 79 6D 6D 33 10 E3                                      db 'ymm3',10h,0E3h
00014A2F: 79 6D 6D 34 10 E4                                      db 'ymm4',10h,0E4h
00014A35: 79 6D 6D 35 10 E5                                      db 'ymm5',10h,0E5h
00014A3B: 79 6D 6D 36 10 E6                                      db 'ymm6',10h,0E6h
00014A41: 79 6D 6D 37 10 E7                                      db 'ymm7',10h,0E7h
00014A47: 79 6D 6D 38 10 E8                                      db 'ymm8',10h,0E8h
00014A4D: 79 6D 6D 39 10 E9                                      db 'ymm9',10h,0E9h
00014A53: 7A 6D 6D 30 10 60                                      db 'zmm0',10h,60h
00014A59: 7A 6D 6D 31 10 61                                      db 'zmm1',10h,61h
00014A5F: 7A 6D 6D 32 10 62                                      db 'zmm2',10h,62h
00014A65: 7A 6D 6D 33 10 63                                      db 'zmm3',10h,63h
00014A6B: 7A 6D 6D 34 10 64                                      db 'zmm4',10h,64h
00014A71: 7A 6D 6D 35 10 65                                      db 'zmm5',10h,65h
00014A77: 7A 6D 6D 36 10 66                                      db 'zmm6',10h,66h
00014A7D: 7A 6D 6D 37 10 67                                      db 'zmm7',10h,67h
00014A83: 7A 6D 6D 38 10 68                                      db 'zmm8',10h,68h
00014A89: 7A 6D 6D 39 10 69                                      db 'zmm9',10h,69h
                                                                symbols_5:
00014A8F: 31 74 6F 31 36 1F 14                                   db '1to16',1Fh,14h
00014A96: 64 77 6F 72 64 11 04                                   db 'dword',11h,4
00014A9D: 65 6C 66 36 34 18 58                                   db 'elf64',18h,58h
00014AA4: 66 77 6F 72 64 11 06                                   db 'fword',11h,6
00014AAB: 6C 61 72 67 65 1B 82                                   db 'large',1Bh,82h
00014AB2: 70 77 6F 72 64 11 06                                   db 'pword',11h,6
00014AB9: 71 77 6F 72 64 11 08                                   db 'qword',11h,8
00014AC0: 73 68 6F 72 74 12 01                                   db 'short',12h,1
00014AC7: 74 62 79 74 65 11 0A                                   db 'tbyte',11h,0Ah
00014ACE: 74 77 6F 72 64 11 0A                                   db 'tword',11h,0Ah
00014AD5: 75 73 65 31 36 13 10                                   db 'use16',13h,16
00014ADC: 75 73 65 33 32 13 20                                   db 'use32',13h,32
00014AE3: 75 73 65 36 34 13 40                                   db 'use64',13h,64
00014AEA: 78 6D 6D 31 30 10 CA                                   db 'xmm10',10h,0CAh
00014AF1: 78 6D 6D 31 31 10 CB                                   db 'xmm11',10h,0CBh
00014AF8: 78 6D 6D 31 32 10 CC                                   db 'xmm12',10h,0CCh
00014AFF: 78 6D 6D 31 33 10 CD                                   db 'xmm13',10h,0CDh
00014B06: 78 6D 6D 31 34 10 CE                                   db 'xmm14',10h,0CEh
00014B0D: 78 6D 6D 31 35 10 CF                                   db 'xmm15',10h,0CFh
00014B14: 78 6D 6D 31 36 10 D0                                   db 'xmm16',10h,0D0h
00014B1B: 78 6D 6D 31 37 10 D1                                   db 'xmm17',10h,0D1h
00014B22: 78 6D 6D 31 38 10 D2                                   db 'xmm18',10h,0D2h
00014B29: 78 6D 6D 31 39 10 D3                                   db 'xmm19',10h,0D3h
00014B30: 78 6D 6D 32 30 10 D4                                   db 'xmm20',10h,0D4h
00014B37: 78 6D 6D 32 31 10 D5                                   db 'xmm21',10h,0D5h
00014B3E: 78 6D 6D 32 32 10 D6                                   db 'xmm22',10h,0D6h
00014B45: 78 6D 6D 32 33 10 D7                                   db 'xmm23',10h,0D7h
00014B4C: 78 6D 6D 32 34 10 D8                                   db 'xmm24',10h,0D8h
00014B53: 78 6D 6D 32 35 10 D9                                   db 'xmm25',10h,0D9h
00014B5A: 78 6D 6D 32 36 10 DA                                   db 'xmm26',10h,0DAh
00014B61: 78 6D 6D 32 37 10 DB                                   db 'xmm27',10h,0DBh
00014B68: 78 6D 6D 32 38 10 DC                                   db 'xmm28',10h,0DCh
00014B6F: 78 6D 6D 32 39 10 DD                                   db 'xmm29',10h,0DDh
00014B76: 78 6D 6D 33 30 10 DE                                   db 'xmm30',10h,0DEh
00014B7D: 78 6D 6D 33 31 10 DF                                   db 'xmm31',10h,0DFh
00014B84: 78 77 6F 72 64 11 10                                   db 'xword',11h,16
00014B8B: 79 6D 6D 31 30 10 EA                                   db 'ymm10',10h,0EAh
00014B92: 79 6D 6D 31 31 10 EB                                   db 'ymm11',10h,0EBh
00014B99: 79 6D 6D 31 32 10 EC                                   db 'ymm12',10h,0ECh
00014BA0: 79 6D 6D 31 33 10 ED                                   db 'ymm13',10h,0EDh
00014BA7: 79 6D 6D 31 34 10 EE                                   db 'ymm14',10h,0EEh
00014BAE: 79 6D 6D 31 35 10 EF                                   db 'ymm15',10h,0EFh
00014BB5: 79 6D 6D 31 36 10 F0                                   db 'ymm16',10h,0F0h
00014BBC: 79 6D 6D 31 37 10 F1                                   db 'ymm17',10h,0F1h
00014BC3: 79 6D 6D 31 38 10 F2                                   db 'ymm18',10h,0F2h
00014BCA: 79 6D 6D 31 39 10 F3                                   db 'ymm19',10h,0F3h
00014BD1: 79 6D 6D 32 30 10 F4                                   db 'ymm20',10h,0F4h
00014BD8: 79 6D 6D 32 31 10 F5                                   db 'ymm21',10h,0F5h
00014BDF: 79 6D 6D 32 32 10 F6                                   db 'ymm22',10h,0F6h
00014BE6: 79 6D 6D 32 33 10 F7                                   db 'ymm23',10h,0F7h
00014BED: 79 6D 6D 32 34 10 F8                                   db 'ymm24',10h,0F8h
00014BF4: 79 6D 6D 32 35 10 F9                                   db 'ymm25',10h,0F9h
00014BFB: 79 6D 6D 32 36 10 FA                                   db 'ymm26',10h,0FAh
00014C02: 79 6D 6D 32 37 10 FB                                   db 'ymm27',10h,0FBh
00014C09: 79 6D 6D 32 38 10 FC                                   db 'ymm28',10h,0FCh
00014C10: 79 6D 6D 32 39 10 FD                                   db 'ymm29',10h,0FDh
00014C17: 79 6D 6D 33 30 10 FE                                   db 'ymm30',10h,0FEh
00014C1E: 79 6D 6D 33 31 10 FF                                   db 'ymm31',10h,0FFh
00014C25: 79 77 6F 72 64 11 20                                   db 'yword',11h,32
00014C2C: 7A 6D 6D 31 30 10 6A                                   db 'zmm10',10h,6Ah
00014C33: 7A 6D 6D 31 31 10 6B                                   db 'zmm11',10h,6Bh
00014C3A: 7A 6D 6D 31 32 10 6C                                   db 'zmm12',10h,6Ch
00014C41: 7A 6D 6D 31 33 10 6D                                   db 'zmm13',10h,6Dh
00014C48: 7A 6D 6D 31 34 10 6E                                   db 'zmm14',10h,6Eh
00014C4F: 7A 6D 6D 31 35 10 6F                                   db 'zmm15',10h,6Fh
00014C56: 7A 6D 6D 31 36 10 70                                   db 'zmm16',10h,70h
00014C5D: 7A 6D 6D 31 37 10 71                                   db 'zmm17',10h,71h
00014C64: 7A 6D 6D 31 38 10 72                                   db 'zmm18',10h,72h
00014C6B: 7A 6D 6D 31 39 10 73                                   db 'zmm19',10h,73h
00014C72: 7A 6D 6D 32 30 10 74                                   db 'zmm20',10h,74h
00014C79: 7A 6D 6D 32 31 10 75                                   db 'zmm21',10h,75h
00014C80: 7A 6D 6D 32 32 10 76                                   db 'zmm22',10h,76h
00014C87: 7A 6D 6D 32 33 10 77                                   db 'zmm23',10h,77h
00014C8E: 7A 6D 6D 32 34 10 78                                   db 'zmm24',10h,78h
00014C95: 7A 6D 6D 32 35 10 79                                   db 'zmm25',10h,79h
00014C9C: 7A 6D 6D 32 36 10 7A                                   db 'zmm26',10h,7Ah
00014CA3: 7A 6D 6D 32 37 10 7B                                   db 'zmm27',10h,7Bh
00014CAA: 7A 6D 6D 32 38 10 7C                                   db 'zmm28',10h,7Ch
00014CB1: 7A 6D 6D 32 39 10 7D                                   db 'zmm29',10h,7Dh
00014CB8: 7A 6D 6D 33 30 10 7E                                   db 'zmm30',10h,7Eh
00014CBF: 7A 6D 6D 33 31 10 7F                                   db 'zmm31',10h,7Fh
00014CC6: 7A 77 6F 72 64 11 40                                   db 'zword',11h,64
                                                                symbols_6:
00014CCD: 62 69 6E 61 72 79 18 10                                db 'binary',18h,10h
00014CD5: 64 71 77 6F 72 64 11 10                                db 'dqword',11h,16
00014CDD: 65 78 70 6F 72 74 1A 00                                db 'export',1Ah,0
00014CE5: 66 69 78 75 70 73 1A 05                                db 'fixups',1Ah,5
00014CED: 69 6D 70 6F 72 74 1A 01                                db 'import',1Ah,1
00014CF5: 6E 61 74 69 76 65 1B 01                                db 'native',1Bh,1
00014CFD: 71 71 77 6F 72 64 11 20                                db 'qqword',11h,32
00014D05: 73 74 61 74 69 63 1D 01                                db 'static',1Dh,1
                                                                symbols_7:
00014D0D: 63 6F 6E 73 6F 6C 65 1B 03                             db 'console',1Bh,3
00014D16: 64 71 71 77 6F 72 64 11 40                             db 'dqqword',11h,64
00014D1F: 64 79 6E 61 6D 69 63 1E 02                             db 'dynamic',1Eh,2
00014D28: 65 66 69 62 6F 6F 74 1B 0B                             db 'efiboot',1Bh,11
                                                                symbols_8:
00014D31: 67 6E 75 72 65 6C 72 6F 1E 52                          db 'gnurelro',1Eh,52h
00014D3B: 67 6E 75 73 74 61 63 6B 1E 51                          db 'gnustack',1Eh,51h
00014D45: 6C 69 6E 6B 69 6E 66 6F 19 09                          db 'linkinfo',19h,9
00014D4F: 72 65 61 64 61 62 6C 65 19 1E                          db 'readable',19h,30
00014D59: 72 65 73 6F 75 72 63 65 1A 02                          db 'resource',1Ah,2
00014D63: 77 72 69 74 61 62 6C 65 19 1F                          db 'writable',19h,31
                                                                symbols_9:
00014D6D: 73 68 61 72 65 61 62 6C 65 19 1C                       db 'shareable',19h,28
00014D78: 77 72 69 74 65 61 62 6C 65 19 1F                       db 'writeable',19h,31
                                                                symbols_10:
00014D83: 65 66 69 72 75 6E 74 69 6D 65 1B 0C                    db 'efiruntime',1Bh,12
00014D8F: 65 78 65 63 75 74 61 62 6C 65 19 1D                    db 'executable',19h,29
00014D9B: 67 6E 75 65 68 66 72 61 6D 65 1E 50                    db 'gnuehframe',1Eh,50h
00014DA7: 6C 69 6E 6B 72 65 6D 6F 76 65 19 0B                    db 'linkremove',19h,11
                                                                symbols_11:
00014DB3: 64 69 73 63 61 72 64 61 62 6C 65 19 19                 db 'discardable',19h,25
00014DC0: 69 6E 74 65 72 70 72 65 74 65 72 1E 03                 db 'interpreter',1Eh,3
00014DCD: 6E 6F 74 70 61 67 65 61 62 6C 65 19 1B                 db 'notpageable',19h,27
                                                                symbols_end:
                                                                
                                                                instructions:
00014DDA: 40 00 0E 00                                            dw instructions_2-instructions,(instructions_3-instructions_2)/(2+3)
00014DDE: 86 00 5A 00                                            dw instructions_3-instructions,(instructions_4-instructions_3)/(3+3)
00014DE2: A2 02 82 00                                            dw instructions_4-instructions,(instructions_5-instructions_4)/(4+3)
00014DE6: 30 06 FE 00                                            dw instructions_5-instructions,(instructions_6-instructions_5)/(5+3)
00014DEA: 20 0E 31 01                                            dw instructions_6-instructions,(instructions_7-instructions_6)/(6+3)
00014DEE: D9 18 F8 00                                            dw instructions_7-instructions,(instructions_8-instructions_7)/(7+3)
00014DF2: 89 22 13 01                                            dw instructions_8-instructions,(instructions_9-instructions_8)/(8+3)
00014DF6: 5A 2E DC 00                                            dw instructions_9-instructions,(instructions_10-instructions_9)/(9+3)
00014DFA: AA 38 77 00                                            dw instructions_10-instructions,(instructions_11-instructions_10)/(10+3)
00014DFE: B5 3E 7A 00                                            dw instructions_11-instructions,(instructions_12-instructions_11)/(11+3)
00014E02: 61 45 55 00                                            dw instructions_12-instructions,(instructions_13-instructions_12)/(12+3)
00014E06: 5C 4A 1B 00                                            dw instructions_13-instructions,(instructions_14-instructions_13)/(13+3)
00014E0A: 0C 4C 1C 00                                            dw instructions_14-instructions,(instructions_15-instructions_14)/(14+3)
00014E0E: E8 4D 0D 00                                            dw instructions_15-instructions,(instructions_16-instructions_15)/(15+3)
00014E12: D2 4E 02 00                                            dw instructions_16-instructions,(instructions_17-instructions_16)/(16+3)
00014E16: F8 4E 01 00                                            dw instructions_17-instructions,(instructions_end-instructions_17)/(17+3)
                                                                
                                                                instructions_2:
00014E1A: 62 74 04                                               db 'bt',4
00014E1D: 69 82                                                  dw bt_instruction-instruction_handler
00014E1F: 69 66 00                                               db 'if',0
00014E22: 51 0A                                                  dw if_directive-instruction_handler
00014E24: 69 6E 00                                               db 'in',0
00014E27: 10 87                                                  dw in_instruction-instruction_handler
00014E29: 6A 61 77                                               db 'ja',77h
00014E2C: E2 8C                                                  dw conditional_jump-instruction_handler
00014E2E: 6A 62 72                                               db 'jb',72h
00014E31: E2 8C                                                  dw conditional_jump-instruction_handler
00014E33: 6A 63 72                                               db 'jc',72h
00014E36: E2 8C                                                  dw conditional_jump-instruction_handler
00014E38: 6A 65 74                                               db 'je',74h
00014E3B: E2 8C                                                  dw conditional_jump-instruction_handler
00014E3D: 6A 67 7F                                               db 'jg',7Fh
00014E40: E2 8C                                                  dw conditional_jump-instruction_handler
00014E42: 6A 6C 7C                                               db 'jl',7Ch
00014E45: E2 8C                                                  dw conditional_jump-instruction_handler
00014E47: 6A 6F 70                                               db 'jo',70h
00014E4A: E2 8C                                                  dw conditional_jump-instruction_handler
00014E4C: 6A 70 7A                                               db 'jp',7Ah
00014E4F: E2 8C                                                  dw conditional_jump-instruction_handler
00014E51: 6A 73 78                                               db 'js',78h
00014E54: E2 8C                                                  dw conditional_jump-instruction_handler
00014E56: 6A 7A 74                                               db 'jz',74h
00014E59: E2 8C                                                  dw conditional_jump-instruction_handler
00014E5B: 6F 72 08                                               db 'or',08h
00014E5E: 5A 65                                                  dw basic_instruction-instruction_handler
                                                                instructions_3:
00014E60: 61 61 61 37                                            db 'aaa',37h
00014E64: FE 63                                                  dw simple_instruction_except64-instruction_handler
00014E66: 61 61 64 D5                                            db 'aad',0D5h
00014E6A: 16 65                                                  dw aa_instruction-instruction_handler
00014E6C: 61 61 6D D4                                            db 'aam',0D4h
00014E70: 16 65                                                  dw aa_instruction-instruction_handler
00014E72: 61 61 73 3F                                            db 'aas',3Fh
00014E76: FE 63                                                  dw simple_instruction_except64-instruction_handler
00014E78: 61 64 63 10                                            db 'adc',10h
00014E7C: 5A 65                                                  dw basic_instruction-instruction_handler
00014E7E: 61 64 64 00                                            db 'add',00h
00014E82: 5A 65                                                  dw basic_instruction-instruction_handler
00014E84: 61 6E 64 20                                            db 'and',20h
00014E88: 5A 65                                                  dw basic_instruction-instruction_handler
00014E8A: 62 6E 64 F2                                            db 'bnd',0F2h
00014E8E: D9 64                                                  dw bnd_prefix_instruction-instruction_handler
00014E90: 62 73 66 BC                                            db 'bsf',0BCh
00014E94: AE 83                                                  dw bs_instruction-instruction_handler
00014E96: 62 73 72 BD                                            db 'bsr',0BDh
00014E9A: AE 83                                                  dw bs_instruction-instruction_handler
00014E9C: 62 74 63 07                                            db 'btc',7
00014EA0: 69 82                                                  dw bt_instruction-instruction_handler
00014EA2: 62 74 72 06                                            db 'btr',6
00014EA6: 69 82                                                  dw bt_instruction-instruction_handler
00014EA8: 62 74 73 05                                            db 'bts',5
00014EAC: 69 82                                                  dw bt_instruction-instruction_handler
00014EAE: 63 62 77 98                                            db 'cbw',98h
00014EB2: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
00014EB4: 63 64 71 99                                            db 'cdq',99h
00014EB8: 54 64                                                  dw simple_instruction_32bit-instruction_handler
00014EBA: 63 6C 63 F8                                            db 'clc',0F8h
00014EBE: 0B 64                                                  dw simple_instruction-instruction_handler
00014EC0: 63 6C 64 FC                                            db 'cld',0FCh
00014EC4: 0B 64                                                  dw simple_instruction-instruction_handler
00014EC6: 63 6C 69 FA                                            db 'cli',0FAh
00014ECA: 0B 64                                                  dw simple_instruction-instruction_handler
00014ECC: 63 6D 63 F5                                            db 'cmc',0F5h
00014ED0: 0B 64                                                  dw simple_instruction-instruction_handler
00014ED2: 63 6D 70 38                                            db 'cmp',38h
00014ED6: 5A 65                                                  dw basic_instruction-instruction_handler
00014ED8: 63 71 6F 99                                            db 'cqo',99h
00014EDC: 6C 64                                                  dw simple_instruction_64bit-instruction_handler
00014EDE: 63 77 64 99                                            db 'cwd',99h
00014EE2: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
00014EE4: 64 61 61 27                                            db 'daa',27h
00014EE8: FE 63                                                  dw simple_instruction_except64-instruction_handler
00014EEA: 64 61 73 2F                                            db 'das',2Fh
00014EEE: FE 63                                                  dw simple_instruction_except64-instruction_handler
00014EF0: 64 65 63 01                                            db 'dec',1
00014EF4: 1C 7A                                                  dw inc_instruction-instruction_handler
00014EF6: 64 69 76 06                                            db 'div',6
00014EFA: 21 69                                                  dw single_operand_instruction-instruction_handler
00014EFC: 65 6E 64 00                                            db 'end',0
00014F00: 48 0C                                                  dw end_directive-instruction_handler
00014F02: 65 72 72 00                                            db 'err',0
00014F06: 31 15                                                  dw err_directive-instruction_handler
00014F08: 66 6C 64 00                                            db 'fld',0
00014F0C: 3E 98                                                  dw fld_instruction-instruction_handler
00014F0E: 66 73 74 02                                            db 'fst',2
00014F12: 3E 98                                                  dw fld_instruction-instruction_handler
00014F14: 68 6C 74 F4                                            db 'hlt',0F4h
00014F18: 0B 64                                                  dw simple_instruction-instruction_handler
00014F1A: 69 6E 63 00                                            db 'inc',0
00014F1E: 1C 7A                                                  dw inc_instruction-instruction_handler
00014F20: 69 6E 73 6C                                            db 'ins',6Ch
00014F24: 11 92                                                  dw ins_instruction-instruction_handler
00014F26: 69 6E 74 CD                                            db 'int',0CDh
00014F2A: E6 64                                                  dw int_instruction-instruction_handler
00014F2C: 6A 61 65 73                                            db 'jae',73h
00014F30: E2 8C                                                  dw conditional_jump-instruction_handler
00014F32: 6A 62 65 76                                            db 'jbe',76h
00014F36: E2 8C                                                  dw conditional_jump-instruction_handler
00014F38: 6A 67 65 7D                                            db 'jge',7Dh
00014F3C: E2 8C                                                  dw conditional_jump-instruction_handler
00014F3E: 6A 6C 65 7E                                            db 'jle',7Eh
00014F42: E2 8C                                                  dw conditional_jump-instruction_handler
00014F44: 6A 6D 70 00                                            db 'jmp',0
00014F48: B2 88                                                  dw jmp_instruction-instruction_handler
00014F4A: 6A 6E 61 76                                            db 'jna',76h
00014F4E: E2 8C                                                  dw conditional_jump-instruction_handler
00014F50: 6A 6E 62 73                                            db 'jnb',73h
00014F54: E2 8C                                                  dw conditional_jump-instruction_handler
00014F56: 6A 6E 63 73                                            db 'jnc',73h
00014F5A: E2 8C                                                  dw conditional_jump-instruction_handler
00014F5C: 6A 6E 65 75                                            db 'jne',75h
00014F60: E2 8C                                                  dw conditional_jump-instruction_handler
00014F62: 6A 6E 67 7E                                            db 'jng',7Eh
00014F66: E2 8C                                                  dw conditional_jump-instruction_handler
00014F68: 6A 6E 6C 7D                                            db 'jnl',7Dh
00014F6C: E2 8C                                                  dw conditional_jump-instruction_handler
00014F6E: 6A 6E 6F 71                                            db 'jno',71h
00014F72: E2 8C                                                  dw conditional_jump-instruction_handler
00014F74: 6A 6E 70 7B                                            db 'jnp',7Bh
00014F78: E2 8C                                                  dw conditional_jump-instruction_handler
00014F7A: 6A 6E 73 79                                            db 'jns',79h
00014F7E: E2 8C                                                  dw conditional_jump-instruction_handler
00014F80: 6A 6E 7A 75                                            db 'jnz',75h
00014F84: E2 8C                                                  dw conditional_jump-instruction_handler
00014F86: 6A 70 65 7A                                            db 'jpe',7Ah
00014F8A: E2 8C                                                  dw conditional_jump-instruction_handler
00014F8C: 6A 70 6F 7B                                            db 'jpo',7Bh
00014F90: E2 8C                                                  dw conditional_jump-instruction_handler
00014F92: 6C 61 72 02                                            db 'lar',2
00014F96: A8 94                                                  dw lar_instruction-instruction_handler
00014F98: 6C 64 73 03                                            db 'lds',3
00014F9C: A4 7D                                                  dw ls_instruction-instruction_handler
00014F9E: 6C 65 61 00                                            db 'lea',0
00014FA2: 57 7D                                                  dw lea_instruction-instruction_handler
00014FA4: 6C 65 73 00                                            db 'les',0
00014FA8: A4 7D                                                  dw ls_instruction-instruction_handler
00014FAA: 6C 66 73 04                                            db 'lfs',4
00014FAE: A4 7D                                                  dw ls_instruction-instruction_handler
00014FB0: 6C 67 73 05                                            db 'lgs',5
00014FB4: A4 7D                                                  dw ls_instruction-instruction_handler
00014FB6: 6C 73 6C 03                                            db 'lsl',3
00014FBA: A8 94                                                  dw lar_instruction-instruction_handler
00014FBC: 6C 73 73 02                                            db 'lss',2
00014FC0: A4 7D                                                  dw ls_instruction-instruction_handler
00014FC2: 6C 74 72 03                                            db 'ltr',3
00014FC6: A9 93                                                  dw pm_word_instruction-instruction_handler
00014FC8: 6D 6F 76 00                                            db 'mov',0
00014FCC: 87 69                                                  dw mov_instruction-instruction_handler
00014FCE: 6D 75 6C 04                                            db 'mul',4
00014FD2: 21 69                                                  dw single_operand_instruction-instruction_handler
00014FD4: 6E 65 67 03                                            db 'neg',3
00014FD8: 21 69                                                  dw single_operand_instruction-instruction_handler
00014FDA: 6E 6F 70 90                                            db 'nop',90h
00014FDE: 8E 96                                                  dw nop_instruction-instruction_handler
00014FE0: 6E 6F 74 02                                            db 'not',2
00014FE4: 21 69                                                  dw single_operand_instruction-instruction_handler
00014FE6: 6F 72 67 00                                            db 'org',0
00014FEA: 2D 00                                                  dw org_directive-instruction_handler
00014FEC: 6F 75 74 00                                            db 'out',0
00014FF0: C8 87                                                  dw out_instruction-instruction_handler
00014FF2: 70 6F 70 00                                            db 'pop',0
00014FF6: C0 77                                                  dw pop_instruction-instruction_handler
00014FF8: 70 6F 72 EB                                            db 'por',0EBh
00014FFC: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00014FFE: 72 63 6C 02                                            db 'rcl',2
00015002: 3A 7E                                                  dw sh_instruction-instruction_handler
00015004: 72 63 72 03                                            db 'rcr',3
00015008: 3A 7E                                                  dw sh_instruction-instruction_handler
0001500A: 72 65 70 F3                                            db 'rep',0F3h
0001500E: A6 64                                                  dw prefix_instruction-instruction_handler
00015010: 72 65 74 C2                                            db 'ret',0C2h
00015014: A7 7C                                                  dw ret_instruction-instruction_handler
00015016: 72 6F 6C 00                                            db 'rol',0
0001501A: 3A 7E                                                  dw sh_instruction-instruction_handler
0001501C: 72 6F 72 01                                            db 'ror',1
00015020: 3A 7E                                                  dw sh_instruction-instruction_handler
00015022: 72 73 6D AA                                            db 'rsm',0AAh
00015026: 95 64                                                  dw simple_extended_instruction-instruction_handler
00015028: 73 61 6C 04                                            db 'sal',4
0001502C: 3A 7E                                                  dw sh_instruction-instruction_handler
0001502E: 73 61 72 07                                            db 'sar',7
00015032: 3A 7E                                                  dw sh_instruction-instruction_handler
00015034: 73 62 62 18                                            db 'sbb',18h
00015038: 5A 65                                                  dw basic_instruction-instruction_handler
0001503A: 73 68 6C 04                                            db 'shl',4
0001503E: 3A 7E                                                  dw sh_instruction-instruction_handler
00015040: 73 68 72 05                                            db 'shr',5
00015044: 3A 7E                                                  dw sh_instruction-instruction_handler
00015046: 73 74 63 F9                                            db 'stc',0F9h
0001504A: 0B 64                                                  dw simple_instruction-instruction_handler
0001504C: 73 74 64 FD                                            db 'std',0FDh
00015050: 0B 64                                                  dw simple_instruction-instruction_handler
00015052: 73 74 69 FB                                            db 'sti',0FBh
00015056: 0B 64                                                  dw simple_instruction-instruction_handler
00015058: 73 74 72 01                                            db 'str',1
0001505C: 05 94                                                  dw pm_store_word_instruction-instruction_handler
0001505E: 73 75 62 28                                            db 'sub',28h
00015062: 5A 65                                                  dw basic_instruction-instruction_handler
00015064: 75 64 30 FF                                            db 'ud0',0FFh
00015068: 12 84                                                  dw ud_instruction-instruction_handler
0001506A: 75 64 31 B9                                            db 'ud1',0B9h
0001506E: 12 84                                                  dw ud_instruction-instruction_handler
00015070: 75 64 32 0B                                            db 'ud2',0Bh
00015074: 95 64                                                  dw simple_extended_instruction-instruction_handler
00015076: 78 6F 72 30                                            db 'xor',30h
0001507A: 5A 65                                                  dw basic_instruction-instruction_handler
                                                                instructions_4:
0001507C: 61 64 63 78 66                                         db 'adcx',66h
00015081: 08 B3                                                  dw adx_instruction-instruction_handler
00015083: 61 64 6F 78 F3                                         db 'adox',0F3h
00015088: 08 B3                                                  dw adx_instruction-instruction_handler
0001508A: 61 6E 64 6E F2                                         db 'andn',0F2h
0001508F: 59 EC                                                  dw andn_instruction-instruction_handler
00015091: 61 72 70 6C 00                                         db 'arpl',0
00015096: 1B 7B                                                  dw arpl_instruction-instruction_handler
00015098: 62 6C 63 69 26                                         db 'blci',26h
0001509D: FA ED                                                  dw tbm_instruction-instruction_handler
0001509F: 62 6C 63 73 13                                         db 'blcs',13h
000150A4: FA ED                                                  dw tbm_instruction-instruction_handler
000150A6: 62 6C 73 69 03                                         db 'blsi',3
000150AB: AD EB                                                  dw bmi_instruction-instruction_handler
000150AD: 62 6C 73 72 01                                         db 'blsr',1
000150B2: AD EB                                                  dw bmi_instruction-instruction_handler
000150B4: 62 7A 68 69 F5                                         db 'bzhi',0F5h
000150B9: B3 EC                                                  dw bzhi_instruction-instruction_handler
000150BB: 63 61 6C 6C 00                                         db 'call',0
000150C0: 9B 88                                                  dw call_instruction-instruction_handler
000150C2: 63 64 71 65 98                                         db 'cdqe',98h
000150C7: 6C 64                                                  dw simple_instruction_64bit-instruction_handler
000150C9: 63 6C 61 63 CA                                         db 'clac',0CAh
000150CE: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
000150D0: 63 6C 67 69 DD                                         db 'clgi',0DDh
000150D5: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
000150D7: 63 6C 74 73 06                                         db 'clts',6
000150DC: 95 64                                                  dw simple_extended_instruction-instruction_handler
000150DE: 63 6C 77 62 06                                         db 'clwb',6
000150E3: AC AE                                                  dw clflushopt_instruction-instruction_handler
000150E5: 63 6D 70 73 A6                                         db 'cmps',0A6h
000150EA: 3F 91                                                  dw cmps_instruction-instruction_handler
000150EC: 63 77 64 65 98                                         db 'cwde',98h
000150F1: 54 64                                                  dw simple_instruction_32bit-instruction_handler
000150F3: 64 61 74 61 00                                         db 'data',0
000150F8: E4 40                                                  dw data_directive-instruction_handler
000150FA: 64 70 70 64 41                                         db 'dppd',41h
000150FF: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00015101: 64 70 70 73 40                                         db 'dpps',40h
00015106: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00015108: 65 6C 73 65 00                                         db 'else',0
0001510D: C9 0A                                                  dw else_directive-instruction_handler
0001510F: 65 6D 6D 73 77                                         db 'emms',77h
00015114: 95 64                                                  dw simple_extended_instruction-instruction_handler
00015116: 66 61 62 73 21                                         db 'fabs',100001b
0001511B: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001511D: 66 61 64 64 00                                         db 'fadd',0
00015122: F8 96                                                  dw basic_fpu_instruction-instruction_handler
00015124: 66 62 6C 64 04                                         db 'fbld',4
00015129: 6B 99                                                  dw fbld_instruction-instruction_handler
0001512B: 66 63 68 73 20                                         db 'fchs',100000b
00015130: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015132: 66 63 6F 6D 02                                         db 'fcom',2
00015137: F8 96                                                  dw basic_fpu_instruction-instruction_handler
00015139: 66 63 6F 73 3F                                         db 'fcos',111111b
0001513E: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015140: 66 64 69 76 06                                         db 'fdiv',6
00015145: F8 96                                                  dw basic_fpu_instruction-instruction_handler
00015147: 66 65 6E 69 E0                                         db 'feni',0E0h
0001514C: 5A 9B                                                  dw finit_instruction-instruction_handler
0001514E: 66 69 6C 64 00                                         db 'fild',0
00015153: E4 98                                                  dw fild_instruction-instruction_handler
00015155: 66 69 73 74 02                                         db 'fist',2
0001515A: E4 98                                                  dw fild_instruction-instruction_handler
0001515C: 66 6C 64 31 28                                         db 'fld1',101000b
00015161: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015163: 66 6C 64 7A 2E                                         db 'fldz',101110b
00015168: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001516A: 66 6D 75 6C 01                                         db 'fmul',1
0001516F: F8 96                                                  dw basic_fpu_instruction-instruction_handler
00015171: 66 6E 6F 70 10                                         db 'fnop',010000b
00015176: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015178: 66 73 69 6E 3E                                         db 'fsin',111110b
0001517D: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001517F: 66 73 74 70 03                                         db 'fstp',3
00015184: 3E 98                                                  dw fld_instruction-instruction_handler
00015186: 66 73 75 62 04                                         db 'fsub',4
0001518B: F8 96                                                  dw basic_fpu_instruction-instruction_handler
0001518D: 66 74 73 74 24                                         db 'ftst',100100b
00015192: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015194: 66 78 61 6D 25                                         db 'fxam',100101b
00015199: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001519B: 66 78 63 68 00                                         db 'fxch',0
000151A0: 0A 9A                                                  dw fxch_instruction-instruction_handler
000151A2: 68 65 61 70 00                                         db 'heap',0
000151A7: 99 32                                                  dw heap_directive-instruction_handler
000151A9: 69 64 69 76 07                                         db 'idiv',7
000151AE: 21 69                                                  dw single_operand_instruction-instruction_handler
000151B0: 69 6D 75 6C 00                                         db 'imul',0
000151B5: 45 84                                                  dw imul_instruction-instruction_handler
000151B7: 69 6E 73 62 6C                                         db 'insb',6Ch
000151BC: 0B 64                                                  dw simple_instruction-instruction_handler
000151BE: 69 6E 73 64 6D                                         db 'insd',6Dh
000151C3: 54 64                                                  dw simple_instruction_32bit-instruction_handler
000151C5: 69 6E 73 77 6D                                         db 'insw',6Dh
000151CA: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
000151CC: 69 6E 74 31 F1                                         db 'int1',0F1h
000151D1: 0B 64                                                  dw simple_instruction-instruction_handler
000151D3: 69 6E 74 33 CC                                         db 'int3',0CCh
000151D8: 0B 64                                                  dw simple_instruction-instruction_handler
000151DA: 69 6E 74 6F CE                                         db 'into',0CEh
000151DF: FE 63                                                  dw simple_instruction_except64-instruction_handler
000151E1: 69 6E 76 64 08                                         db 'invd',8
000151E6: 95 64                                                  dw simple_extended_instruction-instruction_handler
000151E8: 69 72 65 74 CF                                         db 'iret',0CFh
000151ED: 63 64                                                  dw iret_instruction-instruction_handler
000151EF: 6A 63 78 7A E3                                         db 'jcxz',0E3h
000151F4: 24 8E                                                  dw loop_instruction_16bit-instruction_handler
000151F6: 6A 6E 61 65 72                                         db 'jnae',72h
000151FB: E2 8C                                                  dw conditional_jump-instruction_handler
000151FD: 6A 6E 62 65 77                                         db 'jnbe',77h
00015202: E2 8C                                                  dw conditional_jump-instruction_handler
00015204: 6A 6E 67 65 7C                                         db 'jnge',7Ch
00015209: E2 8C                                                  dw conditional_jump-instruction_handler
0001520B: 6A 6E 6C 65 7F                                         db 'jnle',7Fh
00015210: E2 8C                                                  dw conditional_jump-instruction_handler
00015212: 6B 6F 72 62 45                                         db 'korb',45h
00015217: 29 D7                                                  dw mask_instruction_b-instruction_handler
00015219: 6B 6F 72 64 45                                         db 'kord',45h
0001521E: 32 D7                                                  dw mask_instruction_d-instruction_handler
00015220: 6B 6F 72 71 45                                         db 'korq',45h
00015225: 39 D7                                                  dw mask_instruction_q-instruction_handler
00015227: 6B 6F 72 77 45                                         db 'korw',45h
0001522C: 40 D7                                                  dw mask_instruction_w-instruction_handler
0001522E: 6C 61 68 66 9F                                         db 'lahf',9Fh
00015233: 0B 64                                                  dw simple_instruction-instruction_handler
00015235: 6C 67 64 74 02                                         db 'lgdt',2
0001523A: 3C 94                                                  dw lgdt_instruction-instruction_handler
0001523C: 6C 69 64 74 03                                         db 'lidt',3
00015241: 3C 94                                                  dw lgdt_instruction-instruction_handler
00015243: 6C 6C 64 74 02                                         db 'lldt',2
00015248: A9 93                                                  dw pm_word_instruction-instruction_handler
0001524A: 6C 6D 73 77 16                                         db 'lmsw',16h
0001524F: A9 93                                                  dw pm_word_instruction-instruction_handler
00015251: 6C 6F 61 64 00                                         db 'load',0
00015256: 8D 01                                                  dw load_directive-instruction_handler
00015258: 6C 6F 63 6B F0                                         db 'lock',0F0h
0001525D: A6 64                                                  dw prefix_instruction-instruction_handler
0001525F: 6C 6F 64 73 AC                                         db 'lods',0ACh
00015264: 59 90                                                  dw lods_instruction-instruction_handler
00015266: 6C 6F 6F 70 E2                                         db 'loop',0E2h
0001526B: 62 8E                                                  dw loop_instruction-instruction_handler
0001526D: 6D 6F 76 64 00                                         db 'movd',0
00015272: AC 9E                                                  dw movd_instruction-instruction_handler
00015274: 6D 6F 76 71 00                                         db 'movq',0
00015279: A6 9F                                                  dw movq_instruction-instruction_handler
0001527B: 6D 6F 76 73 A4                                         db 'movs',0A4h
00015280: 5A 8F                                                  dw movs_instruction-instruction_handler
00015282: 6D 75 6C 78 F6                                         db 'mulx',0F6h
00015287: 49 EC                                                  dw pdep_instruction-instruction_handler
00015289: 6F 72 70 64 56                                         db 'orpd',56h
0001528E: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00015290: 6F 72 70 73 56                                         db 'orps',56h
00015295: 4F A2                                                  dw sse_ps_instruction-instruction_handler
00015297: 6F 75 74 73 6E                                         db 'outs',6Eh
0001529C: AB 92                                                  dw outs_instruction-instruction_handler
0001529E: 70 61 6E 64 DB                                         db 'pand',0DBh
000152A3: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000152A5: 70 64 65 70 F5                                         db 'pdep',0F5h
000152AA: 49 EC                                                  dw pdep_instruction-instruction_handler
000152AC: 70 65 78 74 F5                                         db 'pext',0F5h
000152B1: 52 EC                                                  dw pext_instruction-instruction_handler
000152B3: 70 6F 70 61 61                                         db 'popa',61h
000152B8: FE 63                                                  dw simple_instruction_except64-instruction_handler
000152BA: 70 6F 70 64 04                                         db 'popd',4
000152BF: C0 77                                                  dw pop_instruction-instruction_handler
000152C1: 70 6F 70 66 9D                                         db 'popf',9Dh
000152C6: 0B 64                                                  dw simple_instruction-instruction_handler
000152C8: 70 6F 70 71 08                                         db 'popq',8
000152CD: C0 77                                                  dw pop_instruction-instruction_handler
000152CF: 70 6F 70 77 02                                         db 'popw',2
000152D4: C0 77                                                  dw pop_instruction-instruction_handler
000152D6: 70 75 73 68 00                                         db 'push',0
000152DB: 2C 74                                                  dw push_instruction-instruction_handler
000152DD: 70 78 6F 72 EF                                         db 'pxor',0EFh
000152E2: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000152E4: 72 65 70 65 F3                                         db 'repe',0F3h
000152E9: A6 64                                                  dw prefix_instruction-instruction_handler
000152EB: 72 65 70 7A F3                                         db 'repz',0F3h
000152F0: A6 64                                                  dw prefix_instruction-instruction_handler
000152F2: 72 65 74 64 C2                                         db 'retd',0C2h
000152F7: 87 7C                                                  dw ret_instruction_32bit_except64-instruction_handler
000152F9: 72 65 74 66 CA                                         db 'retf',0CAh
000152FE: 2C 7D                                                  dw retf_instruction-instruction_handler
00015300: 72 65 74 6E C2                                         db 'retn',0C2h
00015305: A7 7C                                                  dw ret_instruction-instruction_handler
00015307: 72 65 74 71 C2                                         db 'retq',0C2h
0001530C: 78 7C                                                  dw ret_instruction_only64-instruction_handler
0001530E: 72 65 74 77 C2                                         db 'retw',0C2h
00015313: 9B 7C                                                  dw ret_instruction_16bit-instruction_handler
00015315: 72 6F 72 78 F0                                         db 'rorx',0F0h
0001531A: BE ED                                                  dw rorx_instruction-instruction_handler
0001531C: 73 61 68 66 9E                                         db 'sahf',9Eh
00015321: 0B 64                                                  dw simple_instruction-instruction_handler
00015323: 73 61 6C 63 D6                                         db 'salc',0D6h
00015328: FE 63                                                  dw simple_instruction_except64-instruction_handler
0001532A: 73 61 72 78 F7                                         db 'sarx',0F7h
0001532F: 9A EC                                                  dw sarx_instruction-instruction_handler
00015331: 73 63 61 73 AE                                         db 'scas',0AEh
00015336: C5 90                                                  dw stos_instruction-instruction_handler
00015338: 73 65 74 61 97                                         db 'seta',97h
0001533D: C2 7A                                                  dw set_instruction-instruction_handler
0001533F: 73 65 74 62 92                                         db 'setb',92h
00015344: C2 7A                                                  dw set_instruction-instruction_handler
00015346: 73 65 74 63 92                                         db 'setc',92h
0001534B: C2 7A                                                  dw set_instruction-instruction_handler
0001534D: 73 65 74 65 94                                         db 'sete',94h
00015352: C2 7A                                                  dw set_instruction-instruction_handler
00015354: 73 65 74 67 9F                                         db 'setg',9Fh
00015359: C2 7A                                                  dw set_instruction-instruction_handler
0001535B: 73 65 74 6C 9C                                         db 'setl',9Ch
00015360: C2 7A                                                  dw set_instruction-instruction_handler
00015362: 73 65 74 6F 90                                         db 'seto',90h
00015367: C2 7A                                                  dw set_instruction-instruction_handler
00015369: 73 65 74 70 9A                                         db 'setp',9Ah
0001536E: C2 7A                                                  dw set_instruction-instruction_handler
00015370: 73 65 74 73 98                                         db 'sets',98h
00015375: C2 7A                                                  dw set_instruction-instruction_handler
00015377: 73 65 74 7A 94                                         db 'setz',94h
0001537C: C2 7A                                                  dw set_instruction-instruction_handler
0001537E: 73 67 64 74 00                                         db 'sgdt',0
00015383: 3C 94                                                  dw lgdt_instruction-instruction_handler
00015385: 73 68 6C 64 A4                                         db 'shld',0A4h
0001538A: FB 7F                                                  dw shd_instruction-instruction_handler
0001538C: 73 68 6C 78 F7                                         db 'shlx',0F7h
00015391: AC EC                                                  dw shlx_instruction-instruction_handler
00015393: 73 68 72 64 AC                                         db 'shrd',0ACh
00015398: FB 7F                                                  dw shd_instruction-instruction_handler
0001539A: 73 68 72 78 F7                                         db 'shrx',0F7h
0001539F: A3 EC                                                  dw shrx_instruction-instruction_handler
000153A1: 73 69 64 74 01                                         db 'sidt',1
000153A6: 3C 94                                                  dw lgdt_instruction-instruction_handler
000153A8: 73 6C 64 74 00                                         db 'sldt',0
000153AD: 05 94                                                  dw pm_store_word_instruction-instruction_handler
000153AF: 73 6D 73 77 14                                         db 'smsw',14h
000153B4: 05 94                                                  dw pm_store_word_instruction-instruction_handler
000153B6: 73 74 61 63 CB                                         db 'stac',0CBh
000153BB: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
000153BD: 73 74 67 69 DC                                         db 'stgi',0DCh
000153C2: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
000153C4: 73 74 6F 73 AA                                         db 'stos',0AAh
000153C9: C5 90                                                  dw stos_instruction-instruction_handler
000153CB: 74 65 73 74 00                                         db 'test',0
000153D0: AA 70                                                  dw test_instruction-instruction_handler
000153D2: 76 65 72 72 04                                         db 'verr',4
000153D7: A9 93                                                  dw pm_word_instruction-instruction_handler
000153D9: 76 65 72 77 05                                         db 'verw',5
000153DE: A9 93                                                  dw pm_word_instruction-instruction_handler
000153E0: 76 70 6F 72 EB                                         db 'vpor',0EBh
000153E5: 56 C8                                                  dw avx_pd_instruction_noevex-instruction_handler
000153E7: 77 61 69 74 9B                                         db 'wait',9Bh
000153EC: 0B 64                                                  dw simple_instruction-instruction_handler
000153EE: 78 61 64 64 C0                                         db 'xadd',0C0h
000153F3: 6B 95                                                  dw basic_486_instruction-instruction_handler
000153F5: 78 63 68 67 00                                         db 'xchg',0
000153FA: 64 73                                                  dw xchg_instruction-instruction_handler
000153FC: 78 65 6E 64 D5                                         db 'xend',0D5h
00015401: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
00015403: 78 6C 61 74 D7                                         db 'xlat',0D7h
00015408: 32 93                                                  dw xlat_instruction-instruction_handler
                                                                instructions_5:
0001540A: 61 64 64 70 64 58                                      db 'addpd',58h
00015410: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00015412: 61 64 64 70 73 58                                      db 'addps',58h
00015418: 4F A2                                                  dw sse_ps_instruction-instruction_handler
0001541A: 61 64 64 73 64 58                                      db 'addsd',58h
00015420: 88 A2                                                  dw sse_sd_instruction-instruction_handler
00015422: 61 64 64 73 73 58                                      db 'addss',58h
00015428: 75 A2                                                  dw sse_ss_instruction-instruction_handler
0001542A: 61 6C 69 67 6E 00                                      db 'align',0
00015430: 2E 14                                                  dw align_directive-instruction_handler
00015432: 61 6E 64 70 64 54                                      db 'andpd',54h
00015438: 62 A2                                                  dw sse_pd_instruction-instruction_handler
0001543A: 61 6E 64 70 73 54                                      db 'andps',54h
00015440: 4F A2                                                  dw sse_ps_instruction-instruction_handler
00015442: 62 65 78 74 72 F7                                      db 'bextr',0F7h
00015448: 20 ED                                                  dw bextr_instruction-instruction_handler
0001544A: 62 6C 63 69 63 15                                      db 'blcic',15h
00015450: FA ED                                                  dw tbm_instruction-instruction_handler
00015452: 62 6C 73 69 63 16                                      db 'blsic',16h
00015458: FA ED                                                  dw tbm_instruction-instruction_handler
0001545A: 62 6E 64 63 6C 1A                                      db 'bndcl',1Ah
00015460: C0 B7                                                  dw bndcl_instruction-instruction_handler
00015462: 62 6E 64 63 6E 1B                                      db 'bndcn',1Bh
00015468: C4 B7                                                  dw bndcu_instruction-instruction_handler
0001546A: 62 6E 64 63 75 1A                                      db 'bndcu',1Ah
00015470: C4 B7                                                  dw bndcu_instruction-instruction_handler
00015472: 62 6E 64 6D 6B 1B                                      db 'bndmk',1Bh
00015478: CA B8                                                  dw bndmk_instruction-instruction_handler
0001547A: 62 6F 75 6E 64 00                                      db 'bound',0
00015480: 90 7B                                                  dw bound_instruction-instruction_handler
00015482: 62 72 65 61 6B 00                                      db 'break',0
00015488: 8B 0C                                                  dw break_directive-instruction_handler
0001548A: 62 73 77 61 70 00                                      db 'bswap',0
00015490: F4 95                                                  dw bswap_instruction-instruction_handler
00015492: 63 6D 6F 76 61 47                                      db 'cmova',47h
00015498: AE 83                                                  dw bs_instruction-instruction_handler
0001549A: 63 6D 6F 76 62 42                                      db 'cmovb',42h
000154A0: AE 83                                                  dw bs_instruction-instruction_handler
000154A2: 63 6D 6F 76 63 42                                      db 'cmovc',42h
000154A8: AE 83                                                  dw bs_instruction-instruction_handler
000154AA: 63 6D 6F 76 65 44                                      db 'cmove',44h
000154B0: AE 83                                                  dw bs_instruction-instruction_handler
000154B2: 63 6D 6F 76 67 4F                                      db 'cmovg',4Fh
000154B8: AE 83                                                  dw bs_instruction-instruction_handler
000154BA: 63 6D 6F 76 6C 4C                                      db 'cmovl',4Ch
000154C0: AE 83                                                  dw bs_instruction-instruction_handler
000154C2: 63 6D 6F 76 6F 40                                      db 'cmovo',40h
000154C8: AE 83                                                  dw bs_instruction-instruction_handler
000154CA: 63 6D 6F 76 70 4A                                      db 'cmovp',4Ah
000154D0: AE 83                                                  dw bs_instruction-instruction_handler
000154D2: 63 6D 6F 76 73 48                                      db 'cmovs',48h
000154D8: AE 83                                                  dw bs_instruction-instruction_handler
000154DA: 63 6D 6F 76 7A 44                                      db 'cmovz',44h
000154E0: AE 83                                                  dw bs_instruction-instruction_handler
000154E2: 63 6D 70 70 64 FF                                      db 'cmppd',-1
000154E8: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
000154EA: 63 6D 70 70 73 FF                                      db 'cmpps',-1
000154F0: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
000154F2: 63 6D 70 73 62 A6                                      db 'cmpsb',0A6h
000154F8: 0B 64                                                  dw simple_instruction-instruction_handler
000154FA: 63 6D 70 73 64 FF                                      db 'cmpsd',-1
00015500: C5 A2                                                  dw cmpsd_instruction-instruction_handler
00015502: 63 6D 70 73 71 A7                                      db 'cmpsq',0A7h
00015508: 6C 64                                                  dw simple_instruction_64bit-instruction_handler
0001550A: 63 6D 70 73 73 FF                                      db 'cmpss',-1
00015510: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
00015512: 63 6D 70 73 77 A7                                      db 'cmpsw',0A7h
00015518: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
0001551A: 63 70 75 69 64 A2                                      db 'cpuid',0A2h
00015520: 95 64                                                  dw simple_extended_instruction-instruction_handler
00015522: 63 72 63 33 32 00                                      db 'crc32',0
00015528: C4 B1                                                  dw crc32_instruction-instruction_handler
0001552A: 64 69 76 70 64 5E                                      db 'divpd',5Eh
00015530: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00015532: 64 69 76 70 73 5E                                      db 'divps',5Eh
00015538: 4F A2                                                  dw sse_ps_instruction-instruction_handler
0001553A: 64 69 76 73 64 5E                                      db 'divsd',5Eh
00015540: 88 A2                                                  dw sse_sd_instruction-instruction_handler
00015542: 64 69 76 73 73 5E                                      db 'divss',5Eh
00015548: 75 A2                                                  dw sse_ss_instruction-instruction_handler
0001554A: 65 6E 74 65 72 00                                      db 'enter',0
00015550: E5 7B                                                  dw enter_instruction-instruction_handler
00015552: 65 6E 74 72 79 00                                      db 'entry',0
00015558: 33 32                                                  dw entry_directive-instruction_handler
0001555A: 65 78 74 72 6E 00                                      db 'extrn',0
00015560: BA 33                                                  dw extrn_directive-instruction_handler
00015562: 65 78 74 72 71 00                                      db 'extrq',0
00015568: C3 B0                                                  dw extrq_instruction-instruction_handler
0001556A: 66 32 78 6D 31 30                                      db 'f2xm1',110000b
00015570: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015572: 66 61 64 64 70 00                                      db 'faddp',0
00015578: A1 99                                                  dw faddp_instruction-instruction_handler
0001557A: 66 62 73 74 70 06                                      db 'fbstp',6
00015580: 6B 99                                                  dw fbld_instruction-instruction_handler
00015582: 66 63 6C 65 78 E2                                      db 'fclex',0E2h
00015588: 5A 9B                                                  dw finit_instruction-instruction_handler
0001558A: 66 63 6F 6D 69 F0                                      db 'fcomi',0F0h
00015590: 6D 9B                                                  dw fcomi_instruction-instruction_handler
00015592: 66 63 6F 6D 70 03                                      db 'fcomp',3
00015598: F8 96                                                  dw basic_fpu_instruction-instruction_handler
0001559A: 66 64 69 73 69 E1                                      db 'fdisi',0E1h
000155A0: 5A 9B                                                  dw finit_instruction-instruction_handler
000155A2: 66 64 69 76 70 07                                      db 'fdivp',7
000155A8: A1 99                                                  dw faddp_instruction-instruction_handler
000155AA: 66 64 69 76 72 07                                      db 'fdivr',7
000155B0: F8 96                                                  dw basic_fpu_instruction-instruction_handler
000155B2: 66 65 6D 6D 73 0E                                      db 'femms',0Eh
000155B8: 95 64                                                  dw simple_extended_instruction-instruction_handler
000155BA: 66 66 72 65 65 00                                      db 'ffree',0
000155C0: 16 9A                                                  dw ffree_instruction-instruction_handler
000155C2: 66 69 61 64 64 00                                      db 'fiadd',0
000155C8: F4 97                                                  dw fi_instruction-instruction_handler
000155CA: 66 69 63 6F 6D 02                                      db 'ficom',2
000155D0: F4 97                                                  dw fi_instruction-instruction_handler
000155D2: 66 69 64 69 76 06                                      db 'fidiv',6
000155D8: F4 97                                                  dw fi_instruction-instruction_handler
000155DA: 66 69 6D 75 6C 01                                      db 'fimul',1
000155E0: F4 97                                                  dw fi_instruction-instruction_handler
000155E2: 66 69 6E 69 74 E3                                      db 'finit',0E3h
000155E8: 5A 9B                                                  dw finit_instruction-instruction_handler
000155EA: 66 69 73 74 70 03                                      db 'fistp',3
000155F0: E4 98                                                  dw fild_instruction-instruction_handler
000155F2: 66 69 73 75 62 04                                      db 'fisub',4
000155F8: F4 97                                                  dw fi_instruction-instruction_handler
000155FA: 66 6C 64 63 77 05                                      db 'fldcw',5
00015600: CA 9A                                                  dw fldcw_instruction-instruction_handler
00015602: 66 6C 64 70 69 2B                                      db 'fldpi',101011b
00015608: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001560A: 66 6D 75 6C 70 01                                      db 'fmulp',1
00015610: A1 99                                                  dw faddp_instruction-instruction_handler
00015612: 66 6E 65 6E 69 E0                                      db 'fneni',0E0h
00015618: 5E 9B                                                  dw fninit_instruction-instruction_handler
0001561A: 66 70 72 65 6D 38                                      db 'fprem',111000b
00015620: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015622: 66 70 74 61 6E 32                                      db 'fptan',110010b
00015628: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001562A: 66 73 61 76 65 06                                      db 'fsave',6
00015630: 91 9A                                                  dw fsave_instruction-instruction_handler
00015632: 66 73 71 72 74 3A                                      db 'fsqrt',111010b
00015638: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001563A: 66 73 74 63 77 07                                      db 'fstcw',7
00015640: C6 9A                                                  dw fstcw_instruction-instruction_handler
00015642: 66 73 74 73 77 00                                      db 'fstsw',0
00015648: 00 9B                                                  dw fstsw_instruction-instruction_handler
0001564A: 66 73 75 62 70 05                                      db 'fsubp',5
00015650: A1 99                                                  dw faddp_instruction-instruction_handler
00015652: 66 73 75 62 72 05                                      db 'fsubr',5
00015658: F8 96                                                  dw basic_fpu_instruction-instruction_handler
0001565A: 66 75 63 6F 6D 04                                      db 'fucom',4
00015660: 16 9A                                                  dw ffree_instruction-instruction_handler
00015662: 66 77 61 69 74 9B                                      db 'fwait',9Bh
00015668: 0B 64                                                  dw simple_instruction-instruction_handler
0001566A: 66 79 6C 32 78 31                                      db 'fyl2x',110001b
00015670: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015672: 69 63 65 62 70 F1                                      db 'icebp',0F1h
00015678: 0B 64                                                  dw simple_instruction-instruction_handler
0001567A: 69 72 65 74 64 CF                                      db 'iretd',0CFh
00015680: 54 64                                                  dw simple_instruction_32bit-instruction_handler
00015682: 69 72 65 74 71 CF                                      db 'iretq',0CFh
00015688: 6C 64                                                  dw simple_instruction_64bit-instruction_handler
0001568A: 69 72 65 74 77 CF                                      db 'iretw',0CFh
00015690: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
00015692: 6A 65 63 78 7A E3                                      db 'jecxz',0E3h
00015698: 43 8E                                                  dw loop_instruction_32bit-instruction_handler
0001569A: 6A 72 63 78 7A E3                                      db 'jrcxz',0E3h
000156A0: 55 8E                                                  dw loop_instruction_64bit-instruction_handler
000156A2: 6B 61 64 64 62 4A                                      db 'kaddb',4Ah
000156A8: 29 D7                                                  dw mask_instruction_b-instruction_handler
000156AA: 6B 61 64 64 64 4A                                      db 'kaddd',4Ah
000156B0: 32 D7                                                  dw mask_instruction_d-instruction_handler
000156B2: 6B 61 64 64 71 4A                                      db 'kaddq',4Ah
000156B8: 39 D7                                                  dw mask_instruction_q-instruction_handler
000156BA: 6B 61 64 64 77 4A                                      db 'kaddw',4Ah
000156C0: 40 D7                                                  dw mask_instruction_w-instruction_handler
000156C2: 6B 61 6E 64 62 41                                      db 'kandb',41h
000156C8: 29 D7                                                  dw mask_instruction_b-instruction_handler
000156CA: 6B 61 6E 64 64 41                                      db 'kandd',41h
000156D0: 32 D7                                                  dw mask_instruction_d-instruction_handler
000156D2: 6B 61 6E 64 71 41                                      db 'kandq',41h
000156D8: 39 D7                                                  dw mask_instruction_q-instruction_handler
000156DA: 6B 61 6E 64 77 41                                      db 'kandw',41h
000156E0: 40 D7                                                  dw mask_instruction_w-instruction_handler
000156E2: 6B 6D 6F 76 62 01                                      db 'kmovb',1
000156E8: BD D7                                                  dw kmov_instruction-instruction_handler
000156EA: 6B 6D 6F 76 64 04                                      db 'kmovd',4
000156F0: BD D7                                                  dw kmov_instruction-instruction_handler
000156F2: 6B 6D 6F 76 71 08                                      db 'kmovq',8
000156F8: BD D7                                                  dw kmov_instruction-instruction_handler
000156FA: 6B 6D 6F 76 77 02                                      db 'kmovw',2
00015700: BD D7                                                  dw kmov_instruction-instruction_handler
00015702: 6B 6E 6F 74 62 44                                      db 'knotb',44h
00015708: 09 D7                                                  dw mask_instruction_single_source_b-instruction_handler
0001570A: 6B 6E 6F 74 64 44                                      db 'knotd',44h
00015710: 12 D7                                                  dw mask_instruction_single_source_d-instruction_handler
00015712: 6B 6E 6F 74 71 44                                      db 'knotq',44h
00015718: 19 D7                                                  dw mask_instruction_single_source_q-instruction_handler
0001571A: 6B 6E 6F 74 77 44                                      db 'knotw',44h
00015720: 20 D7                                                  dw mask_instruction_single_source_w-instruction_handler
00015722: 6B 78 6F 72 62 47                                      db 'kxorb',47h
00015728: 29 D7                                                  dw mask_instruction_b-instruction_handler
0001572A: 6B 78 6F 72 64 47                                      db 'kxord',47h
00015730: 32 D7                                                  dw mask_instruction_d-instruction_handler
00015732: 6B 78 6F 72 71 47                                      db 'kxorq',47h
00015738: 39 D7                                                  dw mask_instruction_q-instruction_handler
0001573A: 6B 78 6F 72 77 47                                      db 'kxorw',47h
00015740: 40 D7                                                  dw mask_instruction_w-instruction_handler
00015742: 6C 61 62 65 6C 00                                      db 'label',0
00015748: D0 00                                                  dw label_directive-instruction_handler
0001574A: 6C 64 64 71 75 00                                      db 'lddqu',0
00015750: 68 A1                                                  dw lddqu_instruction-instruction_handler
00015752: 6C 65 61 76 65 C9                                      db 'leave',0C9h
00015758: 0B 64                                                  dw simple_instruction-instruction_handler
0001575A: 6C 6F 64 73 62 AC                                      db 'lodsb',0ACh
00015760: 0B 64                                                  dw simple_instruction-instruction_handler
00015762: 6C 6F 64 73 64 AD                                      db 'lodsd',0ADh
00015768: 54 64                                                  dw simple_instruction_32bit-instruction_handler
0001576A: 6C 6F 64 73 71 AD                                      db 'lodsq',0ADh
00015770: 6C 64                                                  dw simple_instruction_64bit-instruction_handler
00015772: 6C 6F 64 73 77 AD                                      db 'lodsw',0ADh
00015778: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
0001577A: 6C 6F 6F 70 64 E2                                      db 'loopd',0E2h
00015780: 43 8E                                                  dw loop_instruction_32bit-instruction_handler
00015782: 6C 6F 6F 70 65 E1                                      db 'loope',0E1h
00015788: 62 8E                                                  dw loop_instruction-instruction_handler
0001578A: 6C 6F 6F 70 71 E2                                      db 'loopq',0E2h
00015790: 55 8E                                                  dw loop_instruction_64bit-instruction_handler
00015792: 6C 6F 6F 70 77 E2                                      db 'loopw',0E2h
00015798: 24 8E                                                  dw loop_instruction_16bit-instruction_handler
0001579A: 6C 6F 6F 70 7A E1                                      db 'loopz',0E1h
000157A0: 62 8E                                                  dw loop_instruction-instruction_handler
000157A2: 6C 7A 63 6E 74 BD                                      db 'lzcnt',0BDh
000157A8: 6E B2                                                  dw popcnt_instruction-instruction_handler
000157AA: 6D 61 78 70 64 5F                                      db 'maxpd',5Fh
000157B0: 62 A2                                                  dw sse_pd_instruction-instruction_handler
000157B2: 6D 61 78 70 73 5F                                      db 'maxps',5Fh
000157B8: 4F A2                                                  dw sse_ps_instruction-instruction_handler
000157BA: 6D 61 78 73 64 5F                                      db 'maxsd',5Fh
000157C0: 88 A2                                                  dw sse_sd_instruction-instruction_handler
000157C2: 6D 61 78 73 73 5F                                      db 'maxss',5Fh
000157C8: 75 A2                                                  dw sse_ss_instruction-instruction_handler
000157CA: 6D 69 6E 70 64 5D                                      db 'minpd',5Dh
000157D0: 62 A2                                                  dw sse_pd_instruction-instruction_handler
000157D2: 6D 69 6E 70 73 5D                                      db 'minps',5Dh
000157D8: 4F A2                                                  dw sse_ps_instruction-instruction_handler
000157DA: 6D 69 6E 73 64 5D                                      db 'minsd',5Dh
000157E0: 88 A2                                                  dw sse_sd_instruction-instruction_handler
000157E2: 6D 69 6E 73 73 5D                                      db 'minss',5Dh
000157E8: 75 A2                                                  dw sse_ss_instruction-instruction_handler
000157EA: 6D 6F 76 62 65 F0                                      db 'movbe',0F0h
000157F0: 7A B2                                                  dw movbe_instruction-instruction_handler
000157F2: 6D 6F 76 73 62 A4                                      db 'movsb',0A4h
000157F8: 0B 64                                                  dw simple_instruction-instruction_handler
000157FA: 6D 6F 76 73 64 00                                      db 'movsd',0
00015800: F6 A4                                                  dw movsd_instruction-instruction_handler
00015802: 6D 6F 76 73 71 A5                                      db 'movsq',0A5h
00015808: 6C 64                                                  dw simple_instruction_64bit-instruction_handler
0001580A: 6D 6F 76 73 73 00                                      db 'movss',0
00015810: E6 A4                                                  dw movss_instruction-instruction_handler
00015812: 6D 6F 76 73 77 A5                                      db 'movsw',0A5h
00015818: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
0001581A: 6D 6F 76 73 78 BE                                      db 'movsx',0BEh
00015820: 39 81                                                  dw movx_instruction-instruction_handler
00015822: 6D 6F 76 7A 78 B6                                      db 'movzx',0B6h
00015828: 39 81                                                  dw movx_instruction-instruction_handler
0001582A: 6D 75 6C 70 64 59                                      db 'mulpd',59h
00015830: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00015832: 6D 75 6C 70 73 59                                      db 'mulps',59h
00015838: 4F A2                                                  dw sse_ps_instruction-instruction_handler
0001583A: 6D 75 6C 73 64 59                                      db 'mulsd',59h
00015840: 88 A2                                                  dw sse_sd_instruction-instruction_handler
00015842: 6D 75 6C 73 73 59                                      db 'mulss',59h
00015848: 75 A2                                                  dw sse_ss_instruction-instruction_handler
0001584A: 6D 77 61 69 74 C9                                      db 'mwait',0C9h
00015850: 15 B0                                                  dw monitor_instruction-instruction_handler
00015852: 6F 75 74 73 62 6E                                      db 'outsb',6Eh
00015858: 0B 64                                                  dw simple_instruction-instruction_handler
0001585A: 6F 75 74 73 64 6F                                      db 'outsd',6Fh
00015860: 54 64                                                  dw simple_instruction_32bit-instruction_handler
00015862: 6F 75 74 73 77 6F                                      db 'outsw',6Fh
00015868: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
0001586A: 70 61 62 73 62 1C                                      db 'pabsb',1Ch
00015870: A8 A8                                                  dw ssse3_instruction-instruction_handler
00015872: 70 61 62 73 64 1E                                      db 'pabsd',1Eh
00015878: A8 A8                                                  dw ssse3_instruction-instruction_handler
0001587A: 70 61 62 73 77 1D                                      db 'pabsw',1Dh
00015880: A8 A8                                                  dw ssse3_instruction-instruction_handler
00015882: 70 61 64 64 62 FC                                      db 'paddb',0FCh
00015888: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
0001588A: 70 61 64 64 64 FE                                      db 'paddd',0FEh
00015890: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00015892: 70 61 64 64 71 D4                                      db 'paddq',0D4h
00015898: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
0001589A: 70 61 64 64 77 FD                                      db 'paddw',0FDh
000158A0: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000158A2: 70 61 6E 64 6E DF                                      db 'pandn',0DFh
000158A8: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000158AA: 70 61 75 73 65 00                                      db 'pause',0
000158B0: D0 AE                                                  dw pause_instruction-instruction_handler
000158B2: 70 61 76 67 62 E0                                      db 'pavgb',0E0h
000158B8: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000158BA: 70 61 76 67 77 E3                                      db 'pavgw',0E3h
000158C0: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000158C2: 70 66 32 69 64 1D                                      db 'pf2id',1Dh
000158C8: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
000158CA: 70 66 32 69 77 1C                                      db 'pf2iw',1Ch
000158D0: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
000158D2: 70 66 61 63 63 AE                                      db 'pfacc',0AEh
000158D8: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
000158DA: 70 66 61 64 64 9E                                      db 'pfadd',9Eh
000158E0: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
000158E2: 70 66 6D 61 78 A4                                      db 'pfmax',0A4h
000158E8: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
000158EA: 70 66 6D 69 6E 94                                      db 'pfmin',94h
000158F0: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
000158F2: 70 66 6D 75 6C B4                                      db 'pfmul',0B4h
000158F8: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
000158FA: 70 66 72 63 70 96                                      db 'pfrcp',96h
00015900: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00015902: 70 66 73 75 62 9A                                      db 'pfsub',9Ah
00015908: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
0001590A: 70 69 32 66 64 0D                                      db 'pi2fd',0Dh
00015910: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00015912: 70 69 32 66 77 0C                                      db 'pi2fw',0Ch
00015918: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
0001591A: 70 6F 70 61 64 61                                      db 'popad',61h
00015920: 47 64                                                  dw simple_instruction_32bit_except64-instruction_handler
00015922: 70 6F 70 61 77 61                                      db 'popaw',61h
00015928: 20 64                                                  dw simple_instruction_16bit_except64-instruction_handler
0001592A: 70 6F 70 66 64 9D                                      db 'popfd',9Dh
00015930: 47 64                                                  dw simple_instruction_32bit_except64-instruction_handler
00015932: 70 6F 70 66 71 9D                                      db 'popfq',9Dh
00015938: 11 64                                                  dw simple_instruction_only64-instruction_handler
0001593A: 70 6F 70 66 77 9D                                      db 'popfw',9Dh
00015940: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
00015942: 70 73 6C 6C 64 F2                                      db 'pslld',0F2h
00015948: 21 9C                                                  dw mmx_bit_shift_instruction-instruction_handler
0001594A: 70 73 6C 6C 71 F3                                      db 'psllq',0F3h
00015950: 21 9C                                                  dw mmx_bit_shift_instruction-instruction_handler
00015952: 70 73 6C 6C 77 F1                                      db 'psllw',0F1h
00015958: 21 9C                                                  dw mmx_bit_shift_instruction-instruction_handler
0001595A: 70 73 72 61 64 E2                                      db 'psrad',0E2h
00015960: 21 9C                                                  dw mmx_bit_shift_instruction-instruction_handler
00015962: 70 73 72 61 77 E1                                      db 'psraw',0E1h
00015968: 21 9C                                                  dw mmx_bit_shift_instruction-instruction_handler
0001596A: 70 73 72 6C 64 D2                                      db 'psrld',0D2h
00015970: 21 9C                                                  dw mmx_bit_shift_instruction-instruction_handler
00015972: 70 73 72 6C 71 D3                                      db 'psrlq',0D3h
00015978: 21 9C                                                  dw mmx_bit_shift_instruction-instruction_handler
0001597A: 70 73 72 6C 77 D1                                      db 'psrlw',0D1h
00015980: 21 9C                                                  dw mmx_bit_shift_instruction-instruction_handler
00015982: 70 73 75 62 62 F8                                      db 'psubb',0F8h
00015988: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
0001598A: 70 73 75 62 64 FA                                      db 'psubd',0FAh
00015990: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00015992: 70 73 75 62 71 FB                                      db 'psubq',0FBh
00015998: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
0001599A: 70 73 75 62 77 F9                                      db 'psubw',0F9h
000159A0: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000159A2: 70 74 65 73 74 17                                      db 'ptest',17h
000159A8: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000159AA: 70 75 73 68 61 60                                      db 'pusha',60h
000159B0: FE 63                                                  dw simple_instruction_except64-instruction_handler
000159B2: 70 75 73 68 64 04                                      db 'pushd',4
000159B8: 2C 74                                                  dw push_instruction-instruction_handler
000159BA: 70 75 73 68 66 9C                                      db 'pushf',9Ch
000159C0: 0B 64                                                  dw simple_instruction-instruction_handler
000159C2: 70 75 73 68 71 08                                      db 'pushq',8
000159C8: 2C 74                                                  dw push_instruction-instruction_handler
000159CA: 70 75 73 68 77 02                                      db 'pushw',2
000159D0: 2C 74                                                  dw push_instruction-instruction_handler
000159D2: 72 63 70 70 73 53                                      db 'rcpps',53h
000159D8: 4F A2                                                  dw sse_ps_instruction-instruction_handler
000159DA: 72 63 70 73 73 53                                      db 'rcpss',53h
000159E0: 75 A2                                                  dw sse_ss_instruction-instruction_handler
000159E2: 72 64 6D 73 72 32                                      db 'rdmsr',32h
000159E8: 95 64                                                  dw simple_extended_instruction-instruction_handler
000159EA: 72 64 70 69 64 07                                      db 'rdpid',7
000159F0: 64 B3                                                  dw rdpid_instruction-instruction_handler
000159F2: 72 64 70 6D 63 33                                      db 'rdpmc',33h
000159F8: 95 64                                                  dw simple_extended_instruction-instruction_handler
000159FA: 72 64 70 72 75 FD                                      db 'rdpru',0FDh
00015A00: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
00015A02: 72 64 74 73 63 31                                      db 'rdtsc',31h
00015A08: 95 64                                                  dw simple_extended_instruction-instruction_handler
00015A0A: 72 65 70 6E 65 F2                                      db 'repne',0F2h
00015A10: A6 64                                                  dw prefix_instruction-instruction_handler
00015A12: 72 65 70 6E 7A F2                                      db 'repnz',0F2h
00015A18: A6 64                                                  dw prefix_instruction-instruction_handler
00015A1A: 72 65 74 66 64 CA                                      db 'retfd',0CAh
00015A20: 43 7D                                                  dw retf_instruction_32bit-instruction_handler
00015A22: 72 65 74 66 71 CA                                      db 'retfq',0CAh
00015A28: 39 7D                                                  dw retf_instruction_64bit-instruction_handler
00015A2A: 72 65 74 66 77 CA                                      db 'retfw',0CAh
00015A30: 4D 7D                                                  dw retf_instruction_16bit-instruction_handler
00015A32: 72 65 74 6E 64 C2                                      db 'retnd',0C2h
00015A38: 87 7C                                                  dw ret_instruction_32bit_except64-instruction_handler
00015A3A: 72 65 74 6E 71 C2                                      db 'retnq',0C2h
00015A40: 78 7C                                                  dw ret_instruction_only64-instruction_handler
00015A42: 72 65 74 6E 77 C2                                      db 'retnw',0C2h
00015A48: 9B 7C                                                  dw ret_instruction_16bit-instruction_handler
00015A4A: 73 63 61 73 62 AE                                      db 'scasb',0AEh
00015A50: 0B 64                                                  dw simple_instruction-instruction_handler
00015A52: 73 63 61 73 64 AF                                      db 'scasd',0AFh
00015A58: 54 64                                                  dw simple_instruction_32bit-instruction_handler
00015A5A: 73 63 61 73 71 AF                                      db 'scasq',0AFh
00015A60: 6C 64                                                  dw simple_instruction_64bit-instruction_handler
00015A62: 73 63 61 73 77 AF                                      db 'scasw',0AFh
00015A68: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
00015A6A: 73 65 74 61 65 93                                      db 'setae',93h
00015A70: C2 7A                                                  dw set_instruction-instruction_handler
00015A72: 73 65 74 62 65 96                                      db 'setbe',96h
00015A78: C2 7A                                                  dw set_instruction-instruction_handler
00015A7A: 73 65 74 67 65 9D                                      db 'setge',9Dh
00015A80: C2 7A                                                  dw set_instruction-instruction_handler
00015A82: 73 65 74 6C 65 9E                                      db 'setle',9Eh
00015A88: C2 7A                                                  dw set_instruction-instruction_handler
00015A8A: 73 65 74 6E 61 96                                      db 'setna',96h
00015A90: C2 7A                                                  dw set_instruction-instruction_handler
00015A92: 73 65 74 6E 62 93                                      db 'setnb',93h
00015A98: C2 7A                                                  dw set_instruction-instruction_handler
00015A9A: 73 65 74 6E 63 93                                      db 'setnc',93h
00015AA0: C2 7A                                                  dw set_instruction-instruction_handler
00015AA2: 73 65 74 6E 65 95                                      db 'setne',95h
00015AA8: C2 7A                                                  dw set_instruction-instruction_handler
00015AAA: 73 65 74 6E 67 9E                                      db 'setng',9Eh
00015AB0: C2 7A                                                  dw set_instruction-instruction_handler
00015AB2: 73 65 74 6E 6C 9D                                      db 'setnl',9Dh
00015AB8: C2 7A                                                  dw set_instruction-instruction_handler
00015ABA: 73 65 74 6E 6F 91                                      db 'setno',91h
00015AC0: C2 7A                                                  dw set_instruction-instruction_handler
00015AC2: 73 65 74 6E 70 9B                                      db 'setnp',9Bh
00015AC8: C2 7A                                                  dw set_instruction-instruction_handler
00015ACA: 73 65 74 6E 73 99                                      db 'setns',99h
00015AD0: C2 7A                                                  dw set_instruction-instruction_handler
00015AD2: 73 65 74 6E 7A 95                                      db 'setnz',95h
00015AD8: C2 7A                                                  dw set_instruction-instruction_handler
00015ADA: 73 65 74 70 65 9A                                      db 'setpe',9Ah
00015AE0: C2 7A                                                  dw set_instruction-instruction_handler
00015AE2: 73 65 74 70 6F 9B                                      db 'setpo',9Bh
00015AE8: C2 7A                                                  dw set_instruction-instruction_handler
00015AEA: 73 74 61 63 6B 00                                      db 'stack',0
00015AF0: 71 32                                                  dw stack_directive-instruction_handler
00015AF2: 73 74 6F 72 65 00                                      db 'store',0
00015AF8: 6A 03                                                  dw store_directive-instruction_handler
00015AFA: 73 74 6F 73 62 AA                                      db 'stosb',0AAh
00015B00: 0B 64                                                  dw simple_instruction-instruction_handler
00015B02: 73 74 6F 73 64 AB                                      db 'stosd',0ABh
00015B08: 54 64                                                  dw simple_instruction_32bit-instruction_handler
00015B0A: 73 74 6F 73 71 AB                                      db 'stosq',0ABh
00015B10: 6C 64                                                  dw simple_instruction_64bit-instruction_handler
00015B12: 73 74 6F 73 77 AB                                      db 'stosw',0ABh
00015B18: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
00015B1A: 73 75 62 70 64 5C                                      db 'subpd',5Ch
00015B20: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00015B22: 73 75 62 70 73 5C                                      db 'subps',5Ch
00015B28: 4F A2                                                  dw sse_ps_instruction-instruction_handler
00015B2A: 73 75 62 73 64 5C                                      db 'subsd',5Ch
00015B30: 88 A2                                                  dw sse_sd_instruction-instruction_handler
00015B32: 73 75 62 73 73 5C                                      db 'subss',5Ch
00015B38: 75 A2                                                  dw sse_ss_instruction-instruction_handler
00015B3A: 74 69 6D 65 73 00                                      db 'times',0
00015B40: 2D 05                                                  dw times_directive-instruction_handler
00015B42: 74 7A 63 6E 74 BC                                      db 'tzcnt',0BCh
00015B48: 6E B2                                                  dw popcnt_instruction-instruction_handler
00015B4A: 74 7A 6D 73 6B 14                                      db 'tzmsk',14h
00015B50: FA ED                                                  dw tbm_instruction-instruction_handler
00015B52: 76 64 70 70 64 41                                      db 'vdppd',41h
00015B58: 41 D3                                                  dw avx_128bit_instruction_3a_imm8_noevex-instruction_handler
00015B5A: 76 64 70 70 73 40                                      db 'vdpps',40h
00015B60: 5E D3                                                  dw avx_pi_instruction_3a_imm8_noevex-instruction_handler
00015B62: 76 6D 6F 76 64 00                                      db 'vmovd',0
00015B68: 46 CE                                                  dw avx_movd_instruction-instruction_handler
00015B6A: 76 6D 6F 76 71 00                                      db 'vmovq',0
00015B70: 36 CE                                                  dw avx_movq_instruction-instruction_handler
00015B72: 76 6D 72 75 6E D8                                      db 'vmrun',0D8h
00015B78: A9 B5                                                  dw simple_svm_instruction-instruction_handler
00015B7A: 76 6D 78 6F 6E 06                                      db 'vmxon',6
00015B80: 38 B4                                                  dw vmxon_instruction-instruction_handler
00015B82: 76 6F 72 70 64 56                                      db 'vorpd',56h
00015B88: 82 C6                                                  dw avx_pd_instruction-instruction_handler
00015B8A: 76 6F 72 70 73 56                                      db 'vorps',56h
00015B90: F0 C6                                                  dw avx_ps_instruction-instruction_handler
00015B92: 76 70 61 6E 64 DB                                      db 'vpand',0DBh
00015B98: 56 C8                                                  dw avx_pd_instruction_noevex-instruction_handler
00015B9A: 76 70 6F 72 64 EB                                      db 'vpord',0EBh
00015BA0: 02 C8                                                  dw avx_d_instruction_evex-instruction_handler
00015BA2: 76 70 6F 72 71 EB                                      db 'vporq',0EBh
00015BA8: 9F C7                                                  dw avx_q_instruction_evex-instruction_handler
00015BAA: 76 70 78 6F 72 EF                                      db 'vpxor',0EFh
00015BB0: 56 C8                                                  dw avx_pd_instruction_noevex-instruction_handler
00015BB2: 77 68 69 6C 65 00                                      db 'while',0
00015BB8: A6 09                                                  dw while_directive-instruction_handler
00015BBA: 77 72 6D 73 72 30                                      db 'wrmsr',30h
00015BC0: 95 64                                                  dw simple_extended_instruction-instruction_handler
00015BC2: 77 72 73 73 64 F6                                      db 'wrssd',0F6h
00015BC8: 8B BC                                                  dw wrssd_instruction-instruction_handler
00015BCA: 77 72 73 73 71 F6                                      db 'wrssq',0F6h
00015BD0: 7B BC                                                  dw wrssq_instruction-instruction_handler
00015BD2: 78 6C 61 74 62 D7                                      db 'xlatb',0D7h
00015BD8: 0B 64                                                  dw simple_instruction-instruction_handler
00015BDA: 78 6F 72 70 64 57                                      db 'xorpd',57h
00015BE0: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00015BE2: 78 6F 72 70 73 57                                      db 'xorps',57h
00015BE8: 4F A2                                                  dw sse_ps_instruction-instruction_handler
00015BEA: 78 73 61 76 65 04                                      db 'xsave',100b
00015BF0: 0F AE                                                  dw fxsave_instruction-instruction_handler
00015BF2: 78 74 65 73 74 D6                                      db 'xtest',0D6h
00015BF8: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
                                                                instructions_6:
00015BFA: 61 65 73 64 65 63 DE                                   db 'aesdec',0DEh
00015C01: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
00015C03: 61 65 73 65 6E 63 DC                                   db 'aesenc',0DCh
00015C0A: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
00015C0C: 61 65 73 69 6D 63 DB                                   db 'aesimc',0DBh
00015C13: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
00015C15: 61 6E 64 6E 70 64 55                                   db 'andnpd',55h
00015C1C: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00015C1E: 61 6E 64 6E 70 73 55                                   db 'andnps',55h
00015C25: 4F A2                                                  dw sse_ps_instruction-instruction_handler
00015C27: 61 73 73 65 72 74 00                                   db 'assert',0
00015C2E: 48 15                                                  dw assert_directive-instruction_handler
00015C30: 62 6C 63 6D 73 6B 21                                   db 'blcmsk',21h
00015C37: FA ED                                                  dw tbm_instruction-instruction_handler
00015C39: 62 6C 73 6D 73 6B 02                                   db 'blsmsk',2
00015C40: AD EB                                                  dw bmi_instruction-instruction_handler
00015C42: 62 6E 64 6C 64 78 1A                                   db 'bndldx',1Ah
00015C49: C5 B9                                                  dw bndldx_instruction-instruction_handler
00015C4B: 62 6E 64 6D 6F 76 1A                                   db 'bndmov',1Ah
00015C52: 1E B8                                                  dw bndmov_instruction-instruction_handler
00015C54: 62 6E 64 73 74 78 1B                                   db 'bndstx',1Bh
00015C5B: EE B9                                                  dw bndstx_instruction-instruction_handler
00015C5D: 63 6C 7A 65 72 6F 00                                   db 'clzero',0
00015C64: 24 B6                                                  dw clzero_instruction-instruction_handler
00015C66: 63 6D 6F 76 61 65 43                                   db 'cmovae',43h
00015C6D: AE 83                                                  dw bs_instruction-instruction_handler
00015C6F: 63 6D 6F 76 62 65 46                                   db 'cmovbe',46h
00015C76: AE 83                                                  dw bs_instruction-instruction_handler
00015C78: 63 6D 6F 76 67 65 4D                                   db 'cmovge',4Dh
00015C7F: AE 83                                                  dw bs_instruction-instruction_handler
00015C81: 63 6D 6F 76 6C 65 4E                                   db 'cmovle',4Eh
00015C88: AE 83                                                  dw bs_instruction-instruction_handler
00015C8A: 63 6D 6F 76 6E 61 46                                   db 'cmovna',46h
00015C91: AE 83                                                  dw bs_instruction-instruction_handler
00015C93: 63 6D 6F 76 6E 62 43                                   db 'cmovnb',43h
00015C9A: AE 83                                                  dw bs_instruction-instruction_handler
00015C9C: 63 6D 6F 76 6E 63 43                                   db 'cmovnc',43h
00015CA3: AE 83                                                  dw bs_instruction-instruction_handler
00015CA5: 63 6D 6F 76 6E 65 45                                   db 'cmovne',45h
00015CAC: AE 83                                                  dw bs_instruction-instruction_handler
00015CAE: 63 6D 6F 76 6E 67 4E                                   db 'cmovng',4Eh
00015CB5: AE 83                                                  dw bs_instruction-instruction_handler
00015CB7: 63 6D 6F 76 6E 6C 4D                                   db 'cmovnl',4Dh
00015CBE: AE 83                                                  dw bs_instruction-instruction_handler
00015CC0: 63 6D 6F 76 6E 6F 41                                   db 'cmovno',41h
00015CC7: AE 83                                                  dw bs_instruction-instruction_handler
00015CC9: 63 6D 6F 76 6E 70 4B                                   db 'cmovnp',4Bh
00015CD0: AE 83                                                  dw bs_instruction-instruction_handler
00015CD2: 63 6D 6F 76 6E 73 49                                   db 'cmovns',49h
00015CD9: AE 83                                                  dw bs_instruction-instruction_handler
00015CDB: 63 6D 6F 76 6E 7A 45                                   db 'cmovnz',45h
00015CE2: AE 83                                                  dw bs_instruction-instruction_handler
00015CE4: 63 6D 6F 76 70 65 4A                                   db 'cmovpe',4Ah
00015CEB: AE 83                                                  dw bs_instruction-instruction_handler
00015CED: 63 6D 6F 76 70 6F 4B                                   db 'cmovpo',4Bh
00015CF4: AE 83                                                  dw bs_instruction-instruction_handler
00015CF6: 63 6F 6D 69 73 64 2F                                   db 'comisd',2Fh
00015CFD: FC A2                                                  dw comisd_instruction-instruction_handler
00015CFF: 63 6F 6D 69 73 73 2F                                   db 'comiss',2Fh
00015D06: F3 A2                                                  dw comiss_instruction-instruction_handler
00015D08: 66 63 6D 6F 76 62 C0                                   db 'fcmovb',0C0h
00015D0F: 69 9B                                                  dw fcmov_instruction-instruction_handler
00015D11: 66 63 6D 6F 76 65 C8                                   db 'fcmove',0C8h
00015D18: 69 9B                                                  dw fcmov_instruction-instruction_handler
00015D1A: 66 63 6D 6F 76 75 D8                                   db 'fcmovu',0D8h
00015D21: 69 9B                                                  dw fcmov_instruction-instruction_handler
00015D23: 66 63 6F 6D 69 70 F0                                   db 'fcomip',0F0h
00015D2A: 71 9B                                                  dw fcomip_instruction-instruction_handler
00015D2C: 66 63 6F 6D 70 70 00                                   db 'fcompp',0
00015D33: F4 99                                                  dw fcompp_instruction-instruction_handler
00015D35: 66 64 69 76 72 70 06                                   db 'fdivrp',6
00015D3C: A1 99                                                  dw faddp_instruction-instruction_handler
00015D3E: 66 66 72 65 65 70 00                                   db 'ffreep',0
00015D45: 10 9A                                                  dw ffreep_instruction-instruction_handler
00015D47: 66 69 63 6F 6D 70 03                                   db 'ficomp',3
00015D4E: F4 97                                                  dw fi_instruction-instruction_handler
00015D50: 66 69 64 69 76 72 07                                   db 'fidivr',7
00015D57: F4 97                                                  dw fi_instruction-instruction_handler
00015D59: 66 69 73 74 74 70 01                                   db 'fisttp',1
00015D60: E4 98                                                  dw fild_instruction-instruction_handler
00015D62: 66 69 73 75 62 72 05                                   db 'fisubr',5
00015D69: F4 97                                                  dw fi_instruction-instruction_handler
00015D6B: 66 6C 64 65 6E 76 04                                   db 'fldenv',4
00015D72: 5C 9A                                                  dw fldenv_instruction-instruction_handler
00015D74: 66 6C 64 6C 32 65 2A                                   db 'fldl2e',101010b
00015D7B: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015D7D: 66 6C 64 6C 32 74 29                                   db 'fldl2t',101001b
00015D84: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015D86: 66 6C 64 6C 67 32 2C                                   db 'fldlg2',101100b
00015D8D: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015D8F: 66 6C 64 6C 6E 32 2D                                   db 'fldln2',101101b
00015D96: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015D98: 66 6E 63 6C 65 78 E2                                   db 'fnclex',0E2h
00015D9F: 5E 9B                                                  dw fninit_instruction-instruction_handler
00015DA1: 66 6E 64 69 73 69 E1                                   db 'fndisi',0E1h
00015DA8: 5E 9B                                                  dw fninit_instruction-instruction_handler
00015DAA: 66 6E 69 6E 69 74 E3                                   db 'fninit',0E3h
00015DB1: 5E 9B                                                  dw fninit_instruction-instruction_handler
00015DB3: 66 6E 73 61 76 65 06                                   db 'fnsave',6
00015DBA: 95 9A                                                  dw fnsave_instruction-instruction_handler
00015DBC: 66 6E 73 74 63 77 07                                   db 'fnstcw',7
00015DC3: CA 9A                                                  dw fldcw_instruction-instruction_handler
00015DC5: 66 6E 73 74 73 77 00                                   db 'fnstsw',0
00015DCC: 03 9B                                                  dw fnstsw_instruction-instruction_handler
00015DCE: 66 6F 72 6D 61 74 00                                   db 'format',0
00015DD5: 7E 31                                                  dw format_directive-instruction_handler
00015DD7: 66 70 61 74 61 6E 33                                   db 'fpatan',110011b
00015DDE: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015DE0: 66 70 72 65 6D 31 35                                   db 'fprem1',110101b
00015DE7: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015DE9: 66 72 73 74 6F 72 04                                   db 'frstor',4
00015DF0: 95 9A                                                  dw fnsave_instruction-instruction_handler
00015DF2: 66 72 73 74 70 6D E5                                   db 'frstpm',0E5h
00015DF9: 5E 9B                                                  dw fninit_instruction-instruction_handler
00015DFB: 66 73 61 76 65 64 06                                   db 'fsaved',6
00015E02: 7B 9A                                                  dw fsave_instruction_32bit-instruction_handler
00015E04: 66 73 61 76 65 77 06                                   db 'fsavew',6
00015E0B: 86 9A                                                  dw fsave_instruction_16bit-instruction_handler
00015E0D: 66 73 63 61 6C 65 3D                                   db 'fscale',111101b
00015E14: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015E16: 66 73 65 74 70 6D E4                                   db 'fsetpm',0E4h
00015E1D: 5E 9B                                                  dw fninit_instruction-instruction_handler
00015E1F: 66 73 74 65 6E 76 06                                   db 'fstenv',6
00015E26: 58 9A                                                  dw fstenv_instruction-instruction_handler
00015E28: 66 73 75 62 72 70 04                                   db 'fsubrp',4
00015E2F: A1 99                                                  dw faddp_instruction-instruction_handler
00015E31: 66 75 63 6F 6D 69 E8                                   db 'fucomi',0E8h
00015E38: 6D 9B                                                  dw fcomi_instruction-instruction_handler
00015E3A: 66 75 63 6F 6D 70 05                                   db 'fucomp',5
00015E41: 16 9A                                                  dw ffree_instruction-instruction_handler
00015E43: 66 78 73 61 76 65 00                                   db 'fxsave',0
00015E4A: 0F AE                                                  dw fxsave_instruction-instruction_handler
00015E4C: 67 65 74 73 65 63 37                                   db 'getsec',37h
00015E53: 95 64                                                  dw simple_extended_instruction-instruction_handler
00015E55: 68 61 64 64 70 64 7C                                   db 'haddpd',07Ch
00015E5C: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00015E5E: 68 61 64 64 70 73 7C                                   db 'haddps',07Ch
00015E65: 1C A3                                                  dw cvtpd2dq_instruction-instruction_handler
00015E67: 68 73 75 62 70 64 7D                                   db 'hsubpd',07Dh
00015E6E: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00015E70: 68 73 75 62 70 73 7D                                   db 'hsubps',07Dh
00015E77: 1C A3                                                  dw cvtpd2dq_instruction-instruction_handler
00015E79: 69 6E 76 65 70 74 80                                   db 'invept',80h
00015E80: 58 B5                                                  dw vmx_inv_instruction-instruction_handler
00015E82: 69 6E 76 6C 70 67 00                                   db 'invlpg',0
00015E89: 17 95                                                  dw invlpg_instruction-instruction_handler
00015E8B: 6B 61 6E 64 6E 62 42                                   db 'kandnb',42h
00015E92: 29 D7                                                  dw mask_instruction_b-instruction_handler
00015E94: 6B 61 6E 64 6E 64 42                                   db 'kandnd',42h
00015E9B: 32 D7                                                  dw mask_instruction_d-instruction_handler
00015E9D: 6B 61 6E 64 6E 71 42                                   db 'kandnq',42h
00015EA4: 39 D7                                                  dw mask_instruction_q-instruction_handler
00015EA6: 6B 61 6E 64 6E 77 42                                   db 'kandnw',42h
00015EAD: 40 D7                                                  dw mask_instruction_w-instruction_handler
00015EAF: 6B 74 65 73 74 62 99                                   db 'ktestb',99h
00015EB6: 09 D7                                                  dw mask_instruction_single_source_b-instruction_handler
00015EB8: 6B 74 65 73 74 64 99                                   db 'ktestd',99h
00015EBF: 12 D7                                                  dw mask_instruction_single_source_d-instruction_handler
00015EC1: 6B 74 65 73 74 71 99                                   db 'ktestq',99h
00015EC8: 19 D7                                                  dw mask_instruction_single_source_q-instruction_handler
00015ECA: 6B 74 65 73 74 77 99                                   db 'ktestw',99h
00015ED1: 20 D7                                                  dw mask_instruction_single_source_w-instruction_handler
00015ED3: 6B 78 6E 6F 72 62 46                                   db 'kxnorb',46h
00015EDA: 29 D7                                                  dw mask_instruction_b-instruction_handler
00015EDC: 6B 78 6E 6F 72 64 46                                   db 'kxnord',46h
00015EE3: 32 D7                                                  dw mask_instruction_d-instruction_handler
00015EE5: 6B 78 6E 6F 72 71 46                                   db 'kxnorq',46h
00015EEC: 39 D7                                                  dw mask_instruction_q-instruction_handler
00015EEE: 6B 78 6E 6F 72 77 46                                   db 'kxnorw',46h
00015EF5: 40 D7                                                  dw mask_instruction_w-instruction_handler
00015EF7: 6C 66 65 6E 63 65 E8                                   db 'lfence',0E8h
00015EFE: C0 AE                                                  dw fence_instruction-instruction_handler
00015F00: 6C 6C 77 70 63 62 00                                   db 'llwpcb',0
00015F07: 18 EE                                                  dw llwpcb_instruction-instruction_handler
00015F09: 6C 6F 6F 70 65 64 E1                                   db 'looped',0E1h
00015F10: 43 8E                                                  dw loop_instruction_32bit-instruction_handler
00015F12: 6C 6F 6F 70 65 71 E1                                   db 'loopeq',0E1h
00015F19: 55 8E                                                  dw loop_instruction_64bit-instruction_handler
00015F1B: 6C 6F 6F 70 65 77 E1                                   db 'loopew',0E1h
00015F22: 24 8E                                                  dw loop_instruction_16bit-instruction_handler
00015F24: 6C 6F 6F 70 6E 65 E0                                   db 'loopne',0E0h
00015F2B: 62 8E                                                  dw loop_instruction-instruction_handler
00015F2D: 6C 6F 6F 70 6E 7A E0                                   db 'loopnz',0E0h
00015F34: 62 8E                                                  dw loop_instruction-instruction_handler
00015F36: 6C 6F 6F 70 7A 64 E1                                   db 'loopzd',0E1h
00015F3D: 43 8E                                                  dw loop_instruction_32bit-instruction_handler
00015F3F: 6C 6F 6F 70 7A 71 E1                                   db 'loopzq',0E1h
00015F46: 55 8E                                                  dw loop_instruction_64bit-instruction_handler
00015F48: 6C 6F 6F 70 7A 77 E1                                   db 'loopzw',0E1h
00015F4F: 24 8E                                                  dw loop_instruction_16bit-instruction_handler
00015F51: 6C 77 70 69 6E 73 00                                   db 'lwpins',0
00015F58: 52 EE                                                  dw lwpins_instruction-instruction_handler
00015F5A: 6C 77 70 76 61 6C 01                                   db 'lwpval',1
00015F61: 52 EE                                                  dw lwpins_instruction-instruction_handler
00015F63: 6D 66 65 6E 63 65 F0                                   db 'mfence',0F0h
00015F6A: C0 AE                                                  dw fence_instruction-instruction_handler
00015F6C: 6D 6F 76 61 70 64 28                                   db 'movapd',28h
00015F73: CA A4                                                  dw movpd_instruction-instruction_handler
00015F75: 6D 6F 76 61 70 73 28                                   db 'movaps',28h
00015F7C: D1 A4                                                  dw movps_instruction-instruction_handler
00015F7E: 6D 6F 76 64 71 61 66                                   db 'movdqa',66h
00015F85: D3 A0                                                  dw movdq_instruction-instruction_handler
00015F87: 6D 6F 76 64 71 75 F3                                   db 'movdqu',0F3h
00015F8E: D3 A0                                                  dw movdq_instruction-instruction_handler
00015F90: 6D 6F 76 68 70 64 16                                   db 'movhpd',16h
00015F97: 92 A5                                                  dw movlpd_instruction-instruction_handler
00015F99: 6D 6F 76 68 70 73 16                                   db 'movhps',16h
00015FA0: 99 A5                                                  dw movlps_instruction-instruction_handler
00015FA2: 6D 6F 76 6C 70 64 12                                   db 'movlpd',12h
00015FA9: 92 A5                                                  dw movlpd_instruction-instruction_handler
00015FAB: 6D 6F 76 6C 70 73 12                                   db 'movlps',12h
00015FB2: 99 A5                                                  dw movlps_instruction-instruction_handler
00015FB4: 6D 6F 76 6E 74 69 C3                                   db 'movnti',0C3h
00015FBB: CB AF                                                  dw movnti_instruction-instruction_handler
00015FBD: 6D 6F 76 6E 74 71 E7                                   db 'movntq',0E7h
00015FC4: DB AE                                                  dw movntq_instruction-instruction_handler
00015FC6: 6D 6F 76 73 78 64 63                                   db 'movsxd',63h
00015FCD: EF 81                                                  dw movsxd_instruction-instruction_handler
00015FCF: 6D 6F 76 75 70 64 10                                   db 'movupd',10h
00015FD6: CA A4                                                  dw movpd_instruction-instruction_handler
00015FD8: 6D 6F 76 75 70 73 10                                   db 'movups',10h
00015FDF: D1 A4                                                  dw movps_instruction-instruction_handler
00015FE1: 6D 77 61 69 74 78 FB                                   db 'mwaitx',0FBh
00015FE8: 15 B0                                                  dw monitor_instruction-instruction_handler
00015FEA: 70 61 64 64 73 62 EC                                   db 'paddsb',0ECh
00015FF1: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00015FF3: 70 61 64 64 73 77 ED                                   db 'paddsw',0EDh
00015FFA: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00015FFC: 70 65 78 74 72 62 14                                   db 'pextrb',14h
00016003: 7B AB                                                  dw pextrb_instruction-instruction_handler
00016005: 70 65 78 74 72 64 16                                   db 'pextrd',16h
0001600C: 69 AB                                                  dw pextrd_instruction-instruction_handler
0001600E: 70 65 78 74 72 71 16                                   db 'pextrq',16h
00016015: 60 AB                                                  dw pextrq_instruction-instruction_handler
00016017: 70 65 78 74 72 77 15                                   db 'pextrw',15h
0001601E: 72 AB                                                  dw pextrw_instruction-instruction_handler
00016020: 70 66 6E 61 63 63 8A                                   db 'pfnacc',8Ah
00016027: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016029: 70 66 73 75 62 72 AA                                   db 'pfsubr',0AAh
00016030: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016032: 70 68 61 64 64 64 02                                   db 'phaddd',2
00016039: A8 A8                                                  dw ssse3_instruction-instruction_handler
0001603B: 70 68 61 64 64 77 01                                   db 'phaddw',1
00016042: A8 A8                                                  dw ssse3_instruction-instruction_handler
00016044: 70 68 73 75 62 64 06                                   db 'phsubd',6
0001604B: A8 A8                                                  dw ssse3_instruction-instruction_handler
0001604D: 70 68 73 75 62 77 05                                   db 'phsubw',5
00016054: A8 A8                                                  dw ssse3_instruction-instruction_handler
00016056: 70 69 6E 73 72 62 20                                   db 'pinsrb',20h
0001605D: 8A AC                                                  dw pinsrb_instruction-instruction_handler
0001605F: 70 69 6E 73 72 64 22                                   db 'pinsrd',22h
00016066: 93 AC                                                  dw pinsrd_instruction-instruction_handler
00016068: 70 69 6E 73 72 71 22                                   db 'pinsrq',22h
0001606F: 9C AC                                                  dw pinsrq_instruction-instruction_handler
00016071: 70 69 6E 73 72 77 C4                                   db 'pinsrw',0C4h
00016078: A7 9D                                                  dw pinsrw_instruction-instruction_handler
0001607A: 70 6D 61 78 73 62 3C                                   db 'pmaxsb',3Ch
00016081: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
00016083: 70 6D 61 78 73 64 3D                                   db 'pmaxsd',3Dh
0001608A: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
0001608C: 70 6D 61 78 73 77 EE                                   db 'pmaxsw',0EEh
00016093: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016095: 70 6D 61 78 75 62 DE                                   db 'pmaxub',0DEh
0001609C: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
0001609E: 70 6D 61 78 75 64 3F                                   db 'pmaxud',3Fh
000160A5: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000160A7: 70 6D 61 78 75 77 3E                                   db 'pmaxuw',3Eh
000160AE: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000160B0: 70 6D 69 6E 73 62 38                                   db 'pminsb',38h
000160B7: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000160B9: 70 6D 69 6E 73 64 39                                   db 'pminsd',39h
000160C0: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000160C2: 70 6D 69 6E 73 77 EA                                   db 'pminsw',0EAh
000160C9: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000160CB: 70 6D 69 6E 75 62 DA                                   db 'pminub',0DAh
000160D2: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000160D4: 70 6D 69 6E 75 64 3B                                   db 'pminud',3Bh
000160DB: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000160DD: 70 6D 69 6E 75 77 3A                                   db 'pminuw',3Ah
000160E4: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000160E6: 70 6D 75 6C 64 71 28                                   db 'pmuldq',28h
000160ED: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000160EF: 70 6D 75 6C 68 77 E5                                   db 'pmulhw',0E5h
000160F6: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000160F8: 70 6D 75 6C 6C 64 40                                   db 'pmulld',40h
000160FF: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
00016101: 70 6D 75 6C 6C 77 D5                                   db 'pmullw',0D5h
00016108: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
0001610A: 70 6F 70 63 6E 74 B8                                   db 'popcnt',0B8h
00016111: 6E B2                                                  dw popcnt_instruction-instruction_handler
00016113: 70 73 61 64 62 77 F6                                   db 'psadbw',0F6h
0001611A: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
0001611C: 70 73 68 75 66 62 00                                   db 'pshufb',0
00016123: A8 A8                                                  dw ssse3_instruction-instruction_handler
00016125: 70 73 68 75 66 64 66                                   db 'pshufd',66h
0001612C: 3B 9E                                                  dw pshufd_instruction-instruction_handler
0001612E: 70 73 68 75 66 77 00                                   db 'pshufw',0
00016135: 2D 9E                                                  dw pshufw_instruction-instruction_handler
00016137: 70 73 69 67 6E 62 08                                   db 'psignb',8
0001613E: A8 A8                                                  dw ssse3_instruction-instruction_handler
00016140: 70 73 69 67 6E 64 0A                                   db 'psignd',0Ah
00016147: A8 A8                                                  dw ssse3_instruction-instruction_handler
00016149: 70 73 69 67 6E 77 09                                   db 'psignw',9
00016150: A8 A8                                                  dw ssse3_instruction-instruction_handler
00016152: 70 73 6C 6C 64 71 07                                   db 'pslldq',111b
00016159: 95 A4                                                  dw pslldq_instruction-instruction_handler
0001615B: 70 73 6D 61 73 68 FF                                   db 'psmash',0FFh
00016162: 4A 95                                                  dw simple_instruction_f3_0f_01-instruction_handler
00016164: 70 73 72 6C 64 71 03                                   db 'psrldq',011b
0001616B: 95 A4                                                  dw pslldq_instruction-instruction_handler
0001616D: 70 73 75 62 73 62 E8                                   db 'psubsb',0E8h
00016174: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016176: 70 73 75 62 73 77 E9                                   db 'psubsw',0E9h
0001617D: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
0001617F: 70 73 77 61 70 64 BB                                   db 'pswapd',0BBh
00016186: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016188: 70 75 62 6C 69 63 00                                   db 'public',0
0001618F: FD 32                                                  dw public_directive-instruction_handler
00016191: 70 75 73 68 61 64 60                                   db 'pushad',60h
00016198: 47 64                                                  dw simple_instruction_32bit_except64-instruction_handler
0001619A: 70 75 73 68 61 77 60                                   db 'pushaw',60h
000161A1: 20 64                                                  dw simple_instruction_16bit_except64-instruction_handler
000161A3: 70 75 73 68 66 64 9C                                   db 'pushfd',9Ch
000161AA: 47 64                                                  dw simple_instruction_32bit_except64-instruction_handler
000161AC: 70 75 73 68 66 71 9C                                   db 'pushfq',9Ch
000161B3: 11 64                                                  dw simple_instruction_only64-instruction_handler
000161B5: 70 75 73 68 66 77 9C                                   db 'pushfw',9Ch
000161BC: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
000161BE: 72 64 6D 73 72 71 32                                   db 'rdmsrq',32h
000161C5: 84 64                                                  dw simple_extended_instruction_64bit-instruction_handler
000161C7: 72 64 70 6B 72 75 EE                                   db 'rdpkru',0EEh
000161CE: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
000161D0: 72 64 72 61 6E 64 06                                   db 'rdrand',110b
000161D7: 9C B6                                                  dw rdrand_instruction-instruction_handler
000161D9: 72 64 73 65 65 64 07                                   db 'rdseed',111b
000161E0: 9C B6                                                  dw rdrand_instruction-instruction_handler
000161E2: 72 64 73 73 70 64 01                                   db 'rdsspd',1
000161E9: 0C BC                                                  dw rdsspd_instruction-instruction_handler
000161EB: 72 64 73 73 70 71 01                                   db 'rdsspq',1
000161F2: 05 BC                                                  dw rdsspq_instruction-instruction_handler
000161F4: 72 64 74 73 63 70 F9                                   db 'rdtscp',0F9h
000161FB: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
000161FD: 72 65 70 65 61 74 00                                   db 'repeat',0
00016204: D3 08                                                  dw repeat_directive-instruction_handler
00016206: 73 65 74 61 6C 63 D6                                   db 'setalc',0D6h
0001620D: FE 63                                                  dw simple_instruction_except64-instruction_handler
0001620F: 73 65 74 6E 61 65 92                                   db 'setnae',92h
00016216: C2 7A                                                  dw set_instruction-instruction_handler
00016218: 73 65 74 6E 62 65 97                                   db 'setnbe',97h
0001621F: C2 7A                                                  dw set_instruction-instruction_handler
00016221: 73 65 74 6E 67 65 9C                                   db 'setnge',9Ch
00016228: C2 7A                                                  dw set_instruction-instruction_handler
0001622A: 73 65 74 6E 6C 65 9F                                   db 'setnle',9Fh
00016231: C2 7A                                                  dw set_instruction-instruction_handler
00016233: 73 66 65 6E 63 65 F8                                   db 'sfence',0F8h
0001623A: C0 AE                                                  dw fence_instruction-instruction_handler
0001623C: 73 68 75 66 70 64 C6                                   db 'shufpd',0C6h
00016243: 5B A2                                                  dw sse_pd_instruction_imm8-instruction_handler
00016245: 73 68 75 66 70 73 C6                                   db 'shufps',0C6h
0001624C: 48 A2                                                  dw sse_ps_instruction_imm8-instruction_handler
0001624E: 73 6B 69 6E 69 74 00                                   db 'skinit',0
00016255: 0E B6                                                  dw skinit_instruction-instruction_handler
00016257: 73 6C 77 70 63 62 01                                   db 'slwpcb',1
0001625E: 18 EE                                                  dw llwpcb_instruction-instruction_handler
00016260: 73 71 72 74 70 64 51                                   db 'sqrtpd',51h
00016267: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00016269: 73 71 72 74 70 73 51                                   db 'sqrtps',51h
00016270: 4F A2                                                  dw sse_ps_instruction-instruction_handler
00016272: 73 71 72 74 73 64 51                                   db 'sqrtsd',51h
00016279: 88 A2                                                  dw sse_sd_instruction-instruction_handler
0001627B: 73 71 72 74 73 73 51                                   db 'sqrtss',51h
00016282: 75 A2                                                  dw sse_ss_instruction-instruction_handler
00016284: 73 77 61 70 67 73 F8                                   db 'swapgs',0F8h
0001628B: 50 95                                                  dw swapgs_instruction-instruction_handler
0001628D: 73 79 73 72 65 74 07                                   db 'sysret',07h
00016294: 95 64                                                  dw simple_extended_instruction-instruction_handler
00016296: 74 31 6D 73 6B 63 17                                   db 't1mskc',17h
0001629D: FA ED                                                  dw tbm_instruction-instruction_handler
0001629F: 74 70 61 75 73 65 66                                   db 'tpause',66h
000162A6: B3 BA                                                  dw tpause_instruction-instruction_handler
000162A8: 75 6D 77 61 69 74 F2                                   db 'umwait',0F2h
000162AF: B3 BA                                                  dw tpause_instruction-instruction_handler
000162B1: 76 61 64 64 70 64 58                                   db 'vaddpd',58h
000162B8: 74 C6                                                  dw avx_pd_instruction_er-instruction_handler
000162BA: 76 61 64 64 70 73 58                                   db 'vaddps',58h
000162C1: E2 C6                                                  dw avx_ps_instruction_er-instruction_handler
000162C3: 76 61 64 64 73 64 58                                   db 'vaddsd',58h
000162CA: 10 C7                                                  dw avx_sd_instruction_er-instruction_handler
000162CC: 76 61 64 64 73 73 58                                   db 'vaddss',58h
000162D3: 33 C7                                                  dw avx_ss_instruction_er-instruction_handler
000162D5: 76 61 6E 64 70 64 54                                   db 'vandpd',54h
000162DC: 82 C6                                                  dw avx_pd_instruction-instruction_handler
000162DE: 76 61 6E 64 70 73 54                                   db 'vandps',54h
000162E5: F0 C6                                                  dw avx_ps_instruction-instruction_handler
000162E7: 76 63 6D 70 70 64 FF                                   db 'vcmppd',-1
000162EE: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
000162F0: 76 63 6D 70 70 73 FF                                   db 'vcmpps',-1
000162F7: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
000162F9: 76 63 6D 70 73 64 FF                                   db 'vcmpsd',-1
00016300: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00016302: 76 63 6D 70 73 73 FF                                   db 'vcmpss',-1
00016309: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
0001630B: 76 64 69 76 70 64 5E                                   db 'vdivpd',5Eh
00016312: 74 C6                                                  dw avx_pd_instruction_er-instruction_handler
00016314: 76 64 69 76 70 73 5E                                   db 'vdivps',5Eh
0001631B: E2 C6                                                  dw avx_ps_instruction_er-instruction_handler
0001631D: 76 64 69 76 73 64 5E                                   db 'vdivsd',5Eh
00016324: 10 C7                                                  dw avx_sd_instruction_er-instruction_handler
00016326: 76 64 69 76 73 73 5E                                   db 'vdivss',5Eh
0001632D: 33 C7                                                  dw avx_ss_instruction_er-instruction_handler
0001632F: 76 6C 64 64 71 75 F0                                   db 'vlddqu',0F0h
00016336: D7 CD                                                  dw avx_lddqu_instruction-instruction_handler
00016338: 76 6D 61 78 70 64 5F                                   db 'vmaxpd',5Fh
0001633F: 7B C6                                                  dw avx_pd_instruction_sae-instruction_handler
00016341: 76 6D 61 78 70 73 5F                                   db 'vmaxps',5Fh
00016348: E9 C6                                                  dw avx_ps_instruction_sae-instruction_handler
0001634A: 76 6D 61 78 73 64 5F                                   db 'vmaxsd',5Fh
00016351: 17 C7                                                  dw avx_sd_instruction_sae-instruction_handler
00016353: 76 6D 61 78 73 73 5F                                   db 'vmaxss',5Fh
0001635A: 3A C7                                                  dw avx_ss_instruction_sae-instruction_handler
0001635C: 76 6D 63 61 6C 6C C1                                   db 'vmcall',0C1h
00016363: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
00016365: 76 6D 66 75 6E 63 D4                                   db 'vmfunc',0D4h
0001636C: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
0001636E: 76 6D 69 6E 70 64 5D                                   db 'vminpd',5Dh
00016375: 7B C6                                                  dw avx_pd_instruction_sae-instruction_handler
00016377: 76 6D 69 6E 70 73 5D                                   db 'vminps',5Dh
0001637E: E9 C6                                                  dw avx_ps_instruction_sae-instruction_handler
00016380: 76 6D 69 6E 73 64 5D                                   db 'vminsd',5Dh
00016387: 17 C7                                                  dw avx_sd_instruction_sae-instruction_handler
00016389: 76 6D 69 6E 73 73 5D                                   db 'vminss',5Dh
00016390: 3A C7                                                  dw avx_ss_instruction_sae-instruction_handler
00016392: 76 6D 6C 6F 61 64 DA                                   db 'vmload',0DAh
00016399: A9 B5                                                  dw simple_svm_instruction-instruction_handler
0001639B: 76 6D 6F 76 73 64 00                                   db 'vmovsd',0
000163A2: 8F D1                                                  dw avx_movsd_instruction-instruction_handler
000163A4: 76 6D 6F 76 73 73 00                                   db 'vmovss',0
000163AB: 9C D1                                                  dw avx_movss_instruction-instruction_handler
000163AD: 76 6D 72 65 61 64 00                                   db 'vmread',0
000163B4: 7B B4                                                  dw vmread_instruction-instruction_handler
000163B6: 76 6D 73 61 76 65 DB                                   db 'vmsave',0DBh
000163BD: A9 B5                                                  dw simple_svm_instruction-instruction_handler
000163BF: 76 6D 75 6C 70 64 59                                   db 'vmulpd',59h
000163C6: 74 C6                                                  dw avx_pd_instruction_er-instruction_handler
000163C8: 76 6D 75 6C 70 73 59                                   db 'vmulps',59h
000163CF: E2 C6                                                  dw avx_ps_instruction_er-instruction_handler
000163D1: 76 6D 75 6C 73 64 59                                   db 'vmulsd',59h
000163D8: 10 C7                                                  dw avx_sd_instruction_er-instruction_handler
000163DA: 76 6D 75 6C 73 73 59                                   db 'vmulss',59h
000163E1: 33 C7                                                  dw avx_ss_instruction_er-instruction_handler
000163E3: 76 6D 78 6F 66 66 C4                                   db 'vmxoff',0C4h
000163EA: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
000163EC: 76 70 61 62 73 62 1C                                   db 'vpabsb',1Ch
000163F3: 2B C8                                                  dw avx_single_source_bw_instruction_38-instruction_handler
000163F5: 76 70 61 62 73 64 1E                                   db 'vpabsd',1Eh
000163FC: C2 C7                                                  dw avx_single_source_d_instruction_38-instruction_handler
000163FE: 76 70 61 62 73 71 1F                                   db 'vpabsq',1Fh
00016405: 58 C7                                                  dw avx_single_source_q_instruction_38_evex-instruction_handler
00016407: 76 70 61 62 73 77 1D                                   db 'vpabsw',1Dh
0001640E: 2B C8                                                  dw avx_single_source_bw_instruction_38-instruction_handler
00016410: 76 70 61 64 64 62 FC                                   db 'vpaddb',0FCh
00016417: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016419: 76 70 61 64 64 64 FE                                   db 'vpaddd',0FEh
00016420: 09 C8                                                  dw avx_d_instruction-instruction_handler
00016422: 76 70 61 64 64 71 D4                                   db 'vpaddq',0D4h
00016429: A6 C7                                                  dw avx_q_instruction-instruction_handler
0001642B: 76 70 61 64 64 77 FD                                   db 'vpaddw',0FDh
00016432: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016434: 76 70 61 6E 64 64 DB                                   db 'vpandd',0DBh
0001643B: 02 C8                                                  dw avx_d_instruction_evex-instruction_handler
0001643D: 76 70 61 6E 64 6E DF                                   db 'vpandn',0DFh
00016444: 56 C8                                                  dw avx_pd_instruction_noevex-instruction_handler
00016446: 76 70 61 6E 64 71 DB                                   db 'vpandq',0DBh
0001644D: 9F C7                                                  dw avx_q_instruction_evex-instruction_handler
0001644F: 76 70 61 76 67 62 E0                                   db 'vpavgb',0E0h
00016456: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016458: 76 70 61 76 67 77 E3                                   db 'vpavgw',0E3h
0001645F: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016461: 76 70 63 6D 6F 76 A2                                   db 'vpcmov',0A2h
00016468: E0 EF                                                  dw vpcmov_instruction-instruction_handler
0001646A: 76 70 63 6D 70 62 FF                                   db 'vpcmpb',-1
00016471: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
00016473: 76 70 63 6D 70 64 FF                                   db 'vpcmpd',-1
0001647A: 9E D5                                                  dw avx512_cmp_d_instruction-instruction_handler
0001647C: 76 70 63 6D 70 71 FF                                   db 'vpcmpq',-1
00016483: 91 D5                                                  dw avx512_cmp_q_instruction-instruction_handler
00016485: 76 70 63 6D 70 77 FF                                   db 'vpcmpw',-1
0001648C: B1 D5                                                  dw avx512_cmp_w_instruction-instruction_handler
0001648E: 76 70 63 6F 6D 62 FF                                   db 'vpcomb',-1
00016495: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
00016497: 76 70 63 6F 6D 64 FF                                   db 'vpcomd',-1
0001649E: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
000164A0: 76 70 63 6F 6D 71 FF                                   db 'vpcomq',-1
000164A7: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
000164A9: 76 70 63 6F 6D 77 FF                                   db 'vpcomw',-1
000164B0: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
000164B2: 76 70 65 72 6D 62 8D                                   db 'vpermb',8Dh
000164B9: 4D C8                                                  dw avx_bw_instruction_38_evex-instruction_handler
000164BB: 76 70 65 72 6D 64 36                                   db 'vpermd',36h
000164C2: F6 D9                                                  dw avx_permd_instruction-instruction_handler
000164C4: 76 70 65 72 6D 71 00                                   db 'vpermq',0
000164CB: 4B DA                                                  dw avx_permq_instruction-instruction_handler
000164CD: 76 70 65 72 6D 77 8D                                   db 'vpermw',8Dh
000164D4: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
000164D6: 76 70 70 65 72 6D A3                                   db 'vpperm',0A3h
000164DD: 77 EF                                                  dw xop_128bit_instruction-instruction_handler
000164DF: 76 70 72 6F 6C 64 01                                   db 'vprold',1
000164E6: 02 DD                                                  dw avx512_rotate_d_instruction-instruction_handler
000164E8: 76 70 72 6F 6C 71 01                                   db 'vprolq',1
000164EF: F8 DC                                                  dw avx512_rotate_q_instruction-instruction_handler
000164F1: 76 70 72 6F 72 64 00                                   db 'vprord',0
000164F8: 02 DD                                                  dw avx512_rotate_d_instruction-instruction_handler
000164FA: 76 70 72 6F 72 71 00                                   db 'vprorq',0
00016501: F8 DC                                                  dw avx512_rotate_q_instruction-instruction_handler
00016503: 76 70 72 6F 74 62 90                                   db 'vprotb',90h
0001650A: 0D F0                                                  dw xop_shift_instruction-instruction_handler
0001650C: 76 70 72 6F 74 64 92                                   db 'vprotd',92h
00016513: 0D F0                                                  dw xop_shift_instruction-instruction_handler
00016515: 76 70 72 6F 74 71 93                                   db 'vprotq',93h
0001651C: 0D F0                                                  dw xop_shift_instruction-instruction_handler
0001651E: 76 70 72 6F 74 77 91                                   db 'vprotw',91h
00016525: 0D F0                                                  dw xop_shift_instruction-instruction_handler
00016527: 76 70 73 68 61 62 98                                   db 'vpshab',98h
0001652E: 0D F0                                                  dw xop_shift_instruction-instruction_handler
00016530: 76 70 73 68 61 64 9A                                   db 'vpshad',9Ah
00016537: 0D F0                                                  dw xop_shift_instruction-instruction_handler
00016539: 76 70 73 68 61 71 9B                                   db 'vpshaq',9Bh
00016540: 0D F0                                                  dw xop_shift_instruction-instruction_handler
00016542: 76 70 73 68 61 77 99                                   db 'vpshaw',99h
00016549: 0D F0                                                  dw xop_shift_instruction-instruction_handler
0001654B: 76 70 73 68 6C 62 94                                   db 'vpshlb',94h
00016552: 0D F0                                                  dw xop_shift_instruction-instruction_handler
00016554: 76 70 73 68 6C 64 96                                   db 'vpshld',96h
0001655B: 0D F0                                                  dw xop_shift_instruction-instruction_handler
0001655D: 76 70 73 68 6C 71 97                                   db 'vpshlq',97h
00016564: 0D F0                                                  dw xop_shift_instruction-instruction_handler
00016566: 76 70 73 68 6C 77 95                                   db 'vpshlw',95h
0001656D: 0D F0                                                  dw xop_shift_instruction-instruction_handler
0001656F: 76 70 73 6C 6C 64 F2                                   db 'vpslld',0F2h
00016576: 5C DB                                                  dw avx_shift_d_instruction-instruction_handler
00016578: 76 70 73 6C 6C 71 F3                                   db 'vpsllq',0F3h
0001657F: 51 DB                                                  dw avx_shift_q_instruction-instruction_handler
00016581: 76 70 73 6C 6C 77 F1                                   db 'vpsllw',0F1h
00016588: 60 DB                                                  dw avx_shift_bw_instruction-instruction_handler
0001658A: 76 70 73 72 61 64 E2                                   db 'vpsrad',0E2h
00016591: 5C DB                                                  dw avx_shift_d_instruction-instruction_handler
00016593: 76 70 73 72 61 71 E2                                   db 'vpsraq',0E2h
0001659A: 4A DB                                                  dw avx_shift_q_instruction_evex-instruction_handler
0001659C: 76 70 73 72 61 77 E1                                   db 'vpsraw',0E1h
000165A3: 60 DB                                                  dw avx_shift_bw_instruction-instruction_handler
000165A5: 76 70 73 72 6C 64 D2                                   db 'vpsrld',0D2h
000165AC: 5C DB                                                  dw avx_shift_d_instruction-instruction_handler
000165AE: 76 70 73 72 6C 71 D3                                   db 'vpsrlq',0D3h
000165B5: 51 DB                                                  dw avx_shift_q_instruction-instruction_handler
000165B7: 76 70 73 72 6C 77 D1                                   db 'vpsrlw',0D1h
000165BE: 60 DB                                                  dw avx_shift_bw_instruction-instruction_handler
000165C0: 76 70 73 75 62 62 F8                                   db 'vpsubb',0F8h
000165C7: 39 C8                                                  dw avx_bw_instruction-instruction_handler
000165C9: 76 70 73 75 62 64 FA                                   db 'vpsubd',0FAh
000165D0: 09 C8                                                  dw avx_d_instruction-instruction_handler
000165D2: 76 70 73 75 62 71 FB                                   db 'vpsubq',0FBh
000165D9: A6 C7                                                  dw avx_q_instruction-instruction_handler
000165DB: 76 70 73 75 62 77 F9                                   db 'vpsubw',0F9h
000165E2: 39 C8                                                  dw avx_bw_instruction-instruction_handler
000165E4: 76 70 74 65 73 74 17                                   db 'vptest',17h
000165EB: 0D D3                                                  dw avx_single_source_instruction_38_noevex-instruction_handler
000165ED: 76 70 78 6F 72 64 EF                                   db 'vpxord',0EFh
000165F4: 02 C8                                                  dw avx_d_instruction_evex-instruction_handler
000165F6: 76 70 78 6F 72 71 EF                                   db 'vpxorq',0EFh
000165FD: 9F C7                                                  dw avx_q_instruction_evex-instruction_handler
000165FF: 76 72 63 70 70 73 53                                   db 'vrcpps',53h
00016606: C9 C6                                                  dw avx_single_source_ps_instruction_noevex-instruction_handler
00016608: 76 72 63 70 73 73 53                                   db 'vrcpss',53h
0001660F: 4F C7                                                  dw avx_ss_instruction_noevex-instruction_handler
00016611: 76 73 75 62 70 64 5C                                   db 'vsubpd',5Ch
00016618: 74 C6                                                  dw avx_pd_instruction_er-instruction_handler
0001661A: 76 73 75 62 70 73 5C                                   db 'vsubps',5Ch
00016621: E2 C6                                                  dw avx_ps_instruction_er-instruction_handler
00016623: 76 73 75 62 73 64 5C                                   db 'vsubsd',5Ch
0001662A: 10 C7                                                  dw avx_sd_instruction_er-instruction_handler
0001662C: 76 73 75 62 73 73 5C                                   db 'vsubss',5Ch
00016633: 33 C7                                                  dw avx_ss_instruction_er-instruction_handler
00016635: 76 78 6F 72 70 64 57                                   db 'vxorpd',57h
0001663C: 82 C6                                                  dw avx_pd_instruction-instruction_handler
0001663E: 76 78 6F 72 70 73 57                                   db 'vxorps',57h
00016645: F0 C6                                                  dw avx_ps_instruction-instruction_handler
00016647: 77 62 69 6E 76 64 09                                   db 'wbinvd',9
0001664E: 95 64                                                  dw simple_extended_instruction-instruction_handler
00016650: 77 72 6D 73 72 71 30                                   db 'wrmsrq',30h
00016657: 84 64                                                  dw simple_extended_instruction_64bit-instruction_handler
00016659: 77 72 70 6B 72 75 EF                                   db 'wrpkru',0EFh
00016660: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
00016662: 77 72 75 73 73 64 F5                                   db 'wrussd',0F5h
00016669: 84 BC                                                  dw wrussd_instruction-instruction_handler
0001666B: 77 72 75 73 73 71 F5                                   db 'wrussq',0F5h
00016672: 74 BC                                                  dw wrussq_instruction-instruction_handler
00016674: 78 61 62 6F 72 74 00                                   db 'xabort',0
0001667B: 05 B7                                                  dw xabort_instruction-instruction_handler
0001667D: 78 62 65 67 69 6E 00                                   db 'xbegin',0
00016684: 31 B7                                                  dw xbegin_instruction-instruction_handler
00016686: 78 67 65 74 62 76 D0                                   db 'xgetbv',0D0h
0001668D: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
0001668F: 78 72 73 74 6F 72 05                                   db 'xrstor',101b
00016696: 0F AE                                                  dw fxsave_instruction-instruction_handler
00016698: 78 73 61 76 65 63 04                                   db 'xsavec',4
0001669F: 06 AE                                                  dw xsaves_instruction-instruction_handler
000166A1: 78 73 61 76 65 73 05                                   db 'xsaves',5
000166A8: 06 AE                                                  dw xsaves_instruction-instruction_handler
000166AA: 78 73 65 74 62 76 D1                                   db 'xsetbv',0D1h
000166B1: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
                                                                instructions_7:
000166B3: 62 6C 63 66 69 6C 6C 11                                db 'blcfill',11h
000166BB: FA ED                                                  dw tbm_instruction-instruction_handler
000166BD: 62 6C 65 6E 64 70 64 0D                                db 'blendpd',0Dh
000166C5: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
000166C7: 62 6C 65 6E 64 70 73 0C                                db 'blendps',0Ch
000166CF: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
000166D1: 62 6C 73 66 69 6C 6C 12                                db 'blsfill',12h
000166D9: FA ED                                                  dw tbm_instruction-instruction_handler
000166DB: 63 6C 66 6C 75 73 68 07                                db 'clflush',111b
000166E3: 59 AE                                                  dw clflush_instruction-instruction_handler
000166E5: 63 6D 6F 76 6E 61 65 42                                db 'cmovnae',42h
000166ED: AE 83                                                  dw bs_instruction-instruction_handler
000166EF: 63 6D 6F 76 6E 62 65 47                                db 'cmovnbe',47h
000166F7: AE 83                                                  dw bs_instruction-instruction_handler
000166F9: 63 6D 6F 76 6E 67 65 4C                                db 'cmovnge',4Ch
00016701: AE 83                                                  dw bs_instruction-instruction_handler
00016703: 63 6D 6F 76 6E 6C 65 4F                                db 'cmovnle',4Fh
0001670B: AE 83                                                  dw bs_instruction-instruction_handler
0001670D: 63 6D 70 65 71 70 64 00                                db 'cmpeqpd',0
00016715: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
00016717: 63 6D 70 65 71 70 73 00                                db 'cmpeqps',0
0001671F: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
00016721: 63 6D 70 65 71 73 64 00                                db 'cmpeqsd',0
00016729: DC A2                                                  dw cmp_sd_instruction-instruction_handler
0001672B: 63 6D 70 65 71 73 73 00                                db 'cmpeqss',0
00016733: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
00016735: 63 6D 70 6C 65 70 64 02                                db 'cmplepd',2
0001673D: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
0001673F: 63 6D 70 6C 65 70 73 02                                db 'cmpleps',2
00016747: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
00016749: 63 6D 70 6C 65 73 64 02                                db 'cmplesd',2
00016751: DC A2                                                  dw cmp_sd_instruction-instruction_handler
00016753: 63 6D 70 6C 65 73 73 02                                db 'cmpless',2
0001675B: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
0001675D: 63 6D 70 6C 74 70 64 01                                db 'cmpltpd',1
00016765: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
00016767: 63 6D 70 6C 74 70 73 01                                db 'cmpltps',1
0001676F: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
00016771: 63 6D 70 6C 74 73 64 01                                db 'cmpltsd',1
00016779: DC A2                                                  dw cmp_sd_instruction-instruction_handler
0001677B: 63 6D 70 6C 74 73 73 01                                db 'cmpltss',1
00016783: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
00016785: 63 6D 70 78 63 68 67 B0                                db 'cmpxchg',0B0h
0001678D: 6B 95                                                  dw basic_486_instruction-instruction_handler
0001678F: 64 69 73 70 6C 61 79 00                                db 'display',0
00016797: F4 03                                                  dw display_directive-instruction_handler
00016799: 65 6E 64 62 72 33 32 FB                                db 'endbr32',0FBh
000167A1: 03 BD                                                  dw endbr_instruction-instruction_handler
000167A3: 65 6E 64 62 72 36 34 FA                                db 'endbr64',0FAh
000167AB: 03 BD                                                  dw endbr_instruction-instruction_handler
000167AD: 66 63 6D 6F 76 62 65 D0                                db 'fcmovbe',0D0h
000167B5: 69 9B                                                  dw fcmov_instruction-instruction_handler
000167B7: 66 63 6D 6F 76 6E 62 C0                                db 'fcmovnb',0C0h
000167BF: 6D 9B                                                  dw fcomi_instruction-instruction_handler
000167C1: 66 63 6D 6F 76 6E 65 C8                                db 'fcmovne',0C8h
000167C9: 6D 9B                                                  dw fcomi_instruction-instruction_handler
000167CB: 66 63 6D 6F 76 6E 75 D8                                db 'fcmovnu',0D8h
000167D3: 6D 9B                                                  dw fcomi_instruction-instruction_handler
000167D5: 66 64 65 63 73 74 70 36                                db 'fdecstp',110110b
000167DD: E6 97                                                  dw simple_fpu_instruction-instruction_handler
000167DF: 66 69 6E 63 73 74 70 37                                db 'fincstp',110111b
000167E7: E6 97                                                  dw simple_fpu_instruction-instruction_handler
000167E9: 66 6C 64 65 6E 76 64 04                                db 'fldenvd',4
000167F1: 74 9A                                                  dw fldenv_instruction_32bit-instruction_handler
000167F3: 66 6C 64 65 6E 76 77 04                                db 'fldenvw',4
000167FB: 69 9A                                                  dw fldenv_instruction_16bit-instruction_handler
000167FD: 66 6E 73 61 76 65 64 06                                db 'fnsaved',6
00016805: 7F 9A                                                  dw fnsave_instruction_32bit-instruction_handler
00016807: 66 6E 73 61 76 65 77 06                                db 'fnsavew',6
0001680F: 8A 9A                                                  dw fnsave_instruction_16bit-instruction_handler
00016811: 66 6E 73 74 65 6E 76 06                                db 'fnstenv',6
00016819: 5C 9A                                                  dw fldenv_instruction-instruction_handler
0001681B: 66 72 6E 64 69 6E 74 3C                                db 'frndint',111100b
00016823: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00016825: 66 72 73 74 6F 72 64 04                                db 'frstord',4
0001682D: 7F 9A                                                  dw fnsave_instruction_32bit-instruction_handler
0001682F: 66 72 73 74 6F 72 77 04                                db 'frstorw',4
00016837: 8A 9A                                                  dw fnsave_instruction_16bit-instruction_handler
00016839: 66 73 69 6E 63 6F 73 3B                                db 'fsincos',111011b
00016841: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00016843: 66 73 74 65 6E 76 64 06                                db 'fstenvd',6
0001684B: 70 9A                                                  dw fstenv_instruction_32bit-instruction_handler
0001684D: 66 73 74 65 6E 76 77 06                                db 'fstenvw',6
00016855: 65 9A                                                  dw fstenv_instruction_16bit-instruction_handler
00016857: 66 75 63 6F 6D 69 70 E8                                db 'fucomip',0E8h
0001685F: 71 9B                                                  dw fcomip_instruction-instruction_handler
00016861: 66 75 63 6F 6D 70 70 00                                db 'fucompp',0
00016869: FF 99                                                  dw fucompp_instruction-instruction_handler
0001686B: 66 78 72 73 74 6F 72 01                                db 'fxrstor',1
00016873: 0F AE                                                  dw fxsave_instruction-instruction_handler
00016875: 66 78 74 72 61 63 74 34                                db 'fxtract',110100b
0001687D: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001687F: 66 79 6C 32 78 70 31 39                                db 'fyl2xp1',111001b
00016887: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00016889: 69 6E 63 73 73 70 64 05                                db 'incsspd',5
00016891: 17 BC                                                  dw incsspd_instruction-instruction_handler
00016893: 69 6E 63 73 73 70 71 05                                db 'incsspq',5
0001689B: 10 BC                                                  dw incsspq_instruction-instruction_handler
0001689D: 69 6E 73 65 72 74 71 00                                db 'insertq',0
000168A5: 4C B1                                                  dw insertq_instruction-instruction_handler
000168A7: 69 6E 76 6C 70 67 61 DF                                db 'invlpga',0DFh
000168AF: 58 B6                                                  dw invlpga_instruction-instruction_handler
000168B1: 69 6E 76 6C 70 67 62 FE                                db 'invlpgb',0FEh
000168B9: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
000168BB: 69 6E 76 70 63 69 64 82                                db 'invpcid',82h
000168C3: 58 B5                                                  dw vmx_inv_instruction-instruction_handler
000168C5: 69 6E 76 76 70 69 64 81                                db 'invvpid',81h
000168CD: 58 B5                                                  dw vmx_inv_instruction-instruction_handler
000168CF: 6C 64 6D 78 63 73 72 02                                db 'ldmxcsr',10b
000168D7: 65 AE                                                  dw stmxcsr_instruction-instruction_handler
000168D9: 6C 6F 6F 70 6E 65 64 E0                                db 'loopned',0E0h
000168E1: 43 8E                                                  dw loop_instruction_32bit-instruction_handler
000168E3: 6C 6F 6F 70 6E 65 71 E0                                db 'loopneq',0E0h
000168EB: 55 8E                                                  dw loop_instruction_64bit-instruction_handler
000168ED: 6C 6F 6F 70 6E 65 77 E0                                db 'loopnew',0E0h
000168F5: 24 8E                                                  dw loop_instruction_16bit-instruction_handler
000168F7: 6C 6F 6F 70 6E 7A 64 E0                                db 'loopnzd',0E0h
000168FF: 43 8E                                                  dw loop_instruction_32bit-instruction_handler
00016901: 6C 6F 6F 70 6E 7A 71 E0                                db 'loopnzq',0E0h
00016909: 55 8E                                                  dw loop_instruction_64bit-instruction_handler
0001690B: 6C 6F 6F 70 6E 7A 77 E0                                db 'loopnzw',0E0h
00016913: 24 8E                                                  dw loop_instruction_16bit-instruction_handler
00016915: 6D 63 6F 6D 6D 69 74 FA                                db 'mcommit',0FAh
0001691D: 4A 95                                                  dw simple_instruction_f3_0f_01-instruction_handler
0001691F: 6D 6F 6E 69 74 6F 72 C8                                db 'monitor',0C8h
00016927: 15 B0                                                  dw monitor_instruction-instruction_handler
00016929: 6D 6F 76 64 64 75 70 12                                db 'movddup',12h
00016931: 88 A2                                                  dw sse_sd_instruction-instruction_handler
00016933: 6D 6F 76 64 69 72 69 F9                                db 'movdiri',0F9h
0001693B: C4 AF                                                  dw movdiri_instruction-instruction_handler
0001693D: 6D 6F 76 64 71 32 71 00                                db 'movdq2q',0
00016945: B9 A1                                                  dw movdq2q_instruction-instruction_handler
00016947: 6D 6F 76 68 6C 70 73 12                                db 'movhlps',12h
0001694F: DC A5                                                  dw movhlps_instruction-instruction_handler
00016951: 6D 6F 76 6C 68 70 73 16                                db 'movlhps',16h
00016959: DC A5                                                  dw movhlps_instruction-instruction_handler
0001695B: 6D 6F 76 6E 74 64 71 E7                                db 'movntdq',0E7h
00016963: E4 AE                                                  dw movntpd_instruction-instruction_handler
00016965: 6D 6F 76 6E 74 70 64 2B                                db 'movntpd',2Bh
0001696D: E4 AE                                                  dw movntpd_instruction-instruction_handler
0001696F: 6D 6F 76 6E 74 70 73 2B                                db 'movntps',2Bh
00016977: EB AE                                                  dw movntps_instruction-instruction_handler
00016979: 6D 6F 76 6E 74 73 64 2B                                db 'movntsd',2Bh
00016981: 44 AF                                                  dw movntsd_instruction-instruction_handler
00016983: 6D 6F 76 6E 74 73 73 2B                                db 'movntss',2Bh
0001698B: 54 AF                                                  dw movntss_instruction-instruction_handler
0001698D: 6D 6F 76 71 32 64 71 00                                db 'movq2dq',0
00016995: C9 A1                                                  dw movq2dq_instruction-instruction_handler
00016997: 6D 70 73 61 64 62 77 42                                db 'mpsadbw',42h
0001699F: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
000169A1: 70 61 64 64 75 73 62 DC                                db 'paddusb',0DCh
000169A9: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000169AB: 70 61 64 64 75 73 77 DD                                db 'paddusw',0DDh
000169B3: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000169B5: 70 61 6C 69 67 6E 72 00                                db 'palignr',0
000169BD: C0 A8                                                  dw palignr_instruction-instruction_handler
000169BF: 70 61 76 67 75 73 62 BF                                db 'pavgusb',0BFh
000169C7: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
000169C9: 70 62 6C 65 6E 64 77 0E                                db 'pblendw',0Eh
000169D1: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
000169D3: 70 63 6D 70 65 71 62 74                                db 'pcmpeqb',74h
000169DB: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000169DD: 70 63 6D 70 65 71 64 76                                db 'pcmpeqd',76h
000169E5: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000169E7: 70 63 6D 70 65 71 71 29                                db 'pcmpeqq',29h
000169EF: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000169F1: 70 63 6D 70 65 71 77 75                                db 'pcmpeqw',75h
000169F9: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000169FB: 70 63 6D 70 67 74 62 64                                db 'pcmpgtb',64h
00016A03: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016A05: 70 63 6D 70 67 74 64 66                                db 'pcmpgtd',66h
00016A0D: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016A0F: 70 63 6D 70 67 74 71 37                                db 'pcmpgtq',37h
00016A17: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
00016A19: 70 63 6D 70 67 74 77 65                                db 'pcmpgtw',65h
00016A21: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016A23: 70 63 6F 6D 6D 69 74 F8                                db 'pcommit',0F8h
00016A2B: BC AE                                                  dw pcommit_instruction-instruction_handler
00016A2D: 70 63 6F 6E 66 69 67 C5                                db 'pconfig',0C5h
00016A35: 7D B0                                                  dw pconfig_instruction-instruction_handler
00016A37: 70 66 63 6D 70 65 71 B0                                db 'pfcmpeq',0B0h
00016A3F: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016A41: 70 66 63 6D 70 67 65 90                                db 'pfcmpge',90h
00016A49: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016A4B: 70 66 63 6D 70 67 74 A0                                db 'pfcmpgt',0A0h
00016A53: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016A55: 70 66 70 6E 61 63 63 8E                                db 'pfpnacc',8Eh
00016A5D: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016A5F: 70 66 72 73 71 72 74 97                                db 'pfrsqrt',97h
00016A67: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016A69: 70 68 61 64 64 73 77 03                                db 'phaddsw',3
00016A71: A8 A8                                                  dw ssse3_instruction-instruction_handler
00016A73: 70 68 73 75 62 73 77 07                                db 'phsubsw',7
00016A7B: A8 A8                                                  dw ssse3_instruction-instruction_handler
00016A7D: 70 6D 61 64 64 77 64 F5                                db 'pmaddwd',0F5h
00016A85: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016A87: 70 6D 75 6C 68 72 77 B7                                db 'pmulhrw',0B7h
00016A8F: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016A91: 70 6D 75 6C 68 75 77 E4                                db 'pmulhuw',0E4h
00016A99: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016A9B: 70 6D 75 6C 75 64 71 F4                                db 'pmuludq',0F4h
00016AA3: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016AA5: 70 73 68 75 66 68 77 F3                                db 'pshufhw',0F3h
00016AAD: 3B 9E                                                  dw pshufd_instruction-instruction_handler
00016AAF: 70 73 68 75 66 6C 77 F2                                db 'pshuflw',0F2h
00016AB7: 3B 9E                                                  dw pshufd_instruction-instruction_handler
00016AB9: 70 73 75 62 75 73 62 D8                                db 'psubusb',0D8h
00016AC1: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016AC3: 70 73 75 62 75 73 77 D9                                db 'psubusw',0D9h
00016ACB: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016ACD: 70 74 77 72 69 74 65 04                                db 'ptwrite',4
00016AD5: AA B3                                                  dw ptwrite_instruction-instruction_handler
00016AD7: 72 6F 75 6E 64 70 64 09                                db 'roundpd',9
00016ADF: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00016AE1: 72 6F 75 6E 64 70 73 08                                db 'roundps',8
00016AE9: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00016AEB: 72 6F 75 6E 64 73 64 0B                                db 'roundsd',0Bh
00016AF3: DA A9                                                  dw sse4_sd_instruction_66_3a_imm8-instruction_handler
00016AF5: 72 6F 75 6E 64 73 73 0A                                db 'roundss',0Ah
00016AFD: CF A9                                                  dw sse4_ss_instruction_66_3a_imm8-instruction_handler
00016AFF: 72 73 71 72 74 70 73 52                                db 'rsqrtps',52h
00016B07: 4F A2                                                  dw sse_ps_instruction-instruction_handler
00016B09: 72 73 71 72 74 73 73 52                                db 'rsqrtss',52h
00016B11: 75 A2                                                  dw sse_ss_instruction-instruction_handler
00016B13: 73 65 63 74 69 6F 6E 00                                db 'section',0
00016B1B: DB 32                                                  dw section_directive-instruction_handler
00016B1D: 73 65 67 6D 65 6E 74 00                                db 'segment',0
00016B25: C1 32                                                  dw segment_directive-instruction_handler
00016B27: 73 74 6D 78 63 73 72 03                                db 'stmxcsr',11b
00016B2F: 65 AE                                                  dw stmxcsr_instruction-instruction_handler
00016B31: 73 79 73 63 61 6C 6C 05                                db 'syscall',05h
00016B39: 95 64                                                  dw simple_extended_instruction-instruction_handler
00016B3B: 73 79 73 65 78 69 74 35                                db 'sysexit',35h
00016B43: 95 64                                                  dw simple_extended_instruction-instruction_handler
00016B45: 73 79 73 72 65 74 71 07                                db 'sysretq',07h
00016B4D: 84 64                                                  dw simple_extended_instruction_64bit-instruction_handler
00016B4F: 74 6C 62 73 79 6E 63 FF                                db 'tlbsync',0FFh
00016B57: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
00016B59: 75 63 6F 6D 69 73 64 2E                                db 'ucomisd',2Eh
00016B61: FC A2                                                  dw comisd_instruction-instruction_handler
00016B63: 75 63 6F 6D 69 73 73 2E                                db 'ucomiss',2Eh
00016B6B: F3 A2                                                  dw comiss_instruction-instruction_handler
00016B6D: 76 61 65 73 64 65 63 DE                                db 'vaesdec',0DEh
00016B75: A5 D3                                                  dw avx_instruction_38_nomask-instruction_handler
00016B77: 76 61 65 73 65 6E 63 DC                                db 'vaesenc',0DCh
00016B7F: A5 D3                                                  dw avx_instruction_38_nomask-instruction_handler
00016B81: 76 61 65 73 69 6D 63 DB                                db 'vaesimc',0DBh
00016B89: 02 D3                                                  dw avx_single_source_128bit_instruction_38_noevex-instruction_handler
00016B8B: 76 61 6C 69 67 6E 64 03                                db 'valignd',3
00016B93: DB C7                                                  dw avx_d_instruction_3a_imm8_evex-instruction_handler
00016B95: 76 61 6C 69 67 6E 71 03                                db 'valignq',3
00016B9D: 88 C7                                                  dw avx_q_instruction_3a_imm8_evex-instruction_handler
00016B9F: 76 61 6E 64 6E 70 64 55                                db 'vandnpd',55h
00016BA7: 82 C6                                                  dw avx_pd_instruction-instruction_handler
00016BA9: 76 61 6E 64 6E 70 73 55                                db 'vandnps',55h
00016BB1: F0 C6                                                  dw avx_ps_instruction-instruction_handler
00016BB3: 76 63 6F 6D 69 73 64 2F                                db 'vcomisd',2Fh
00016BBB: 90 D2                                                  dw avx_comisd_instruction-instruction_handler
00016BBD: 76 63 6F 6D 69 73 73 2F                                db 'vcomiss',2Fh
00016BC5: 82 D2                                                  dw avx_comiss_instruction-instruction_handler
00016BC7: 76 65 78 70 32 70 64 C8                                db 'vexp2pd',0C8h
00016BCF: 95 D4                                                  dw avx512_exp2pd_instruction-instruction_handler
00016BD1: 76 65 78 70 32 70 73 C8                                db 'vexp2ps',0C8h
00016BD9: A9 D4                                                  dw avx512_exp2ps_instruction-instruction_handler
00016BDB: 76 66 72 63 7A 70 64 81                                db 'vfrczpd',81h
00016BE3: 31 EF                                                  dw xop_single_source_instruction-instruction_handler
00016BE5: 76 66 72 63 7A 70 73 80                                db 'vfrczps',80h
00016BED: 31 EF                                                  dw xop_single_source_instruction-instruction_handler
00016BEF: 76 66 72 63 7A 73 64 83                                db 'vfrczsd',83h
00016BF7: 11 EF                                                  dw xop_single_source_sd_instruction-instruction_handler
00016BF9: 76 66 72 63 7A 73 73 82                                db 'vfrczss',82h
00016C01: 21 EF                                                  dw xop_single_source_ss_instruction-instruction_handler
00016C03: 76 68 61 64 64 70 64 7C                                db 'vhaddpd',07Ch
00016C0B: 56 C8                                                  dw avx_pd_instruction_noevex-instruction_handler
00016C0D: 76 68 61 64 64 70 73 7C                                db 'vhaddps',07Ch
00016C15: 68 C8                                                  dw avx_ps_instruction_noevex-instruction_handler
00016C17: 76 68 73 75 62 70 64 7D                                db 'vhsubpd',07Dh
00016C1F: 56 C8                                                  dw avx_pd_instruction_noevex-instruction_handler
00016C21: 76 68 73 75 62 70 73 7D                                db 'vhsubps',07Dh
00016C29: 68 C8                                                  dw avx_ps_instruction_noevex-instruction_handler
00016C2B: 76 69 72 74 75 61 6C 00                                db 'virtual',0
00016C33: BE 05                                                  dw virtual_directive-instruction_handler
00016C35: 76 6D 63 6C 65 61 72 06                                db 'vmclear',6
00016C3D: 2F B4                                                  dw vmclear_instruction-instruction_handler
00016C3F: 76 6D 6D 63 61 6C 6C D9                                db 'vmmcall',0D9h
00016C47: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
00016C49: 76 6D 6F 76 61 70 64 28                                db 'vmovapd',28h
00016C51: CA CC                                                  dw avx_movpd_instruction-instruction_handler
00016C53: 76 6D 6F 76 61 70 73 28                                db 'vmovaps',28h
00016C5B: D8 CC                                                  dw avx_movps_instruction-instruction_handler
00016C5D: 76 6D 6F 76 64 71 61 6F                                db 'vmovdqa',6Fh
00016C65: 8B CC                                                  dw avx_movdqa_instruction-instruction_handler
00016C67: 76 6D 6F 76 64 71 75 6F                                db 'vmovdqu',6Fh
00016C6F: 87 CC                                                  dw avx_movdqu_instruction-instruction_handler
00016C71: 76 6D 6F 76 68 70 64 16                                db 'vmovhpd',16h
00016C79: 6D D0                                                  dw avx_movlpd_instruction-instruction_handler
00016C7B: 76 6D 6F 76 68 70 73 16                                db 'vmovhps',16h
00016C83: 7B D0                                                  dw avx_movlps_instruction-instruction_handler
00016C85: 76 6D 6F 76 6C 70 64 12                                db 'vmovlpd',12h
00016C8D: 6D D0                                                  dw avx_movlpd_instruction-instruction_handler
00016C8F: 76 6D 6F 76 6C 70 73 12                                db 'vmovlps',12h
00016C97: 7B D0                                                  dw avx_movlps_instruction-instruction_handler
00016C99: 76 6D 6F 76 75 70 64 10                                db 'vmovupd',10h
00016CA1: CA CC                                                  dw avx_movpd_instruction-instruction_handler
00016CA3: 76 6D 6F 76 75 70 73 10                                db 'vmovups',10h
00016CAB: D8 CC                                                  dw avx_movps_instruction-instruction_handler
00016CAD: 76 6D 70 74 72 6C 64 06                                db 'vmptrld',6
00016CB5: 3F B4                                                  dw vmx_instruction-instruction_handler
00016CB7: 76 6D 70 74 72 73 74 07                                db 'vmptrst',7
00016CBF: 3F B4                                                  dw vmx_instruction-instruction_handler
00016CC1: 76 6D 77 72 69 74 65 00                                db 'vmwrite',0
00016CC9: 09 B5                                                  dw vmwrite_instruction-instruction_handler
00016CCB: 76 70 61 64 64 73 62 EC                                db 'vpaddsb',0ECh
00016CD3: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016CD5: 76 70 61 64 64 73 77 ED                                db 'vpaddsw',0EDh
00016CDD: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016CDF: 76 70 61 6E 64 6E 64 DF                                db 'vpandnd',0DFh
00016CE7: 02 C8                                                  dw avx_d_instruction_evex-instruction_handler
00016CE9: 76 70 61 6E 64 6E 71 DF                                db 'vpandnq',0DFh
00016CF1: 9F C7                                                  dw avx_q_instruction_evex-instruction_handler
00016CF3: 76 70 63 6D 70 75 62 FF                                db 'vpcmpub',-1
00016CFB: AB D5                                                  dw avx512_cmp_ub_instruction-instruction_handler
00016CFD: 76 70 63 6D 70 75 64 FF                                db 'vpcmpud',-1
00016D05: 8B D5                                                  dw avx512_cmp_ud_instruction-instruction_handler
00016D07: 76 70 63 6D 70 75 71 FF                                db 'vpcmpuq',-1
00016D0F: 7E D5                                                  dw avx512_cmp_uq_instruction-instruction_handler
00016D11: 76 70 63 6D 70 75 77 FF                                db 'vpcmpuw',-1
00016D19: A4 D5                                                  dw avx512_cmp_uw_instruction-instruction_handler
00016D1B: 76 70 63 6F 6D 75 62 FF                                db 'vpcomub',-1
00016D23: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
00016D25: 76 70 63 6F 6D 75 64 FF                                db 'vpcomud',-1
00016D2D: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
00016D2F: 76 70 63 6F 6D 75 71 FF                                db 'vpcomuq',-1
00016D37: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
00016D39: 76 70 63 6F 6D 75 77 FF                                db 'vpcomuw',-1
00016D41: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
00016D43: 76 70 65 72 6D 70 64 01                                db 'vpermpd',1
00016D4B: 4B DA                                                  dw avx_permq_instruction-instruction_handler
00016D4D: 76 70 65 72 6D 70 73 16                                db 'vpermps',16h
00016D55: F6 D9                                                  dw avx_permd_instruction-instruction_handler
00016D57: 76 70 65 78 74 72 62 14                                db 'vpextrb',14h
00016D5F: 0D E2                                                  dw avx_extract_b_instruction-instruction_handler
00016D61: 76 70 65 78 74 72 64 16                                db 'vpextrd',16h
00016D69: 20 E2                                                  dw avx_extract_d_instruction-instruction_handler
00016D6B: 76 70 65 78 74 72 71 16                                db 'vpextrq',16h
00016D73: 15 E2                                                  dw avx_extract_q_instruction-instruction_handler
00016D75: 76 70 65 78 74 72 77 15                                db 'vpextrw',15h
00016D7D: 11 E2                                                  dw avx_extract_w_instruction-instruction_handler
00016D7F: 76 70 68 61 64 64 64 02                                db 'vphaddd',2
00016D87: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
00016D89: 76 70 68 61 64 64 77 01                                db 'vphaddw',1
00016D91: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
00016D93: 76 70 68 73 75 62 64 06                                db 'vphsubd',6
00016D9B: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
00016D9D: 76 70 68 73 75 62 77 05                                db 'vphsubw',5
00016DA5: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
00016DA7: 76 70 69 6E 73 72 62 20                                db 'vpinsrb',20h
00016DAF: 3D E3                                                  dw avx_pinsrb_instruction-instruction_handler
00016DB1: 76 70 69 6E 73 72 64 22                                db 'vpinsrd',22h
00016DB9: 45 E3                                                  dw avx_pinsrd_instruction-instruction_handler
00016DBB: 76 70 69 6E 73 72 71 22                                db 'vpinsrq',22h
00016DC3: 49 E3                                                  dw avx_pinsrq_instruction-instruction_handler
00016DC5: 76 70 69 6E 73 72 77 C4                                db 'vpinsrw',0C4h
00016DCD: 41 E3                                                  dw avx_pinsrw_instruction-instruction_handler
00016DCF: 76 70 6D 61 78 73 62 3C                                db 'vpmaxsb',3Ch
00016DD7: 32 C8                                                  dw avx_bw_instruction_38-instruction_handler
00016DD9: 76 70 6D 61 78 73 64 3D                                db 'vpmaxsd',3Dh
00016DE1: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00016DE3: 76 70 6D 61 78 73 71 3D                                db 'vpmaxsq',3Dh
00016DEB: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00016DED: 76 70 6D 61 78 73 77 EE                                db 'vpmaxsw',0EEh
00016DF5: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016DF7: 76 70 6D 61 78 75 62 DE                                db 'vpmaxub',0DEh
00016DFF: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016E01: 76 70 6D 61 78 75 64 3F                                db 'vpmaxud',3Fh
00016E09: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00016E0B: 76 70 6D 61 78 75 71 3F                                db 'vpmaxuq',3Fh
00016E13: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00016E15: 76 70 6D 61 78 75 77 3E                                db 'vpmaxuw',3Eh
00016E1D: 32 C8                                                  dw avx_bw_instruction_38-instruction_handler
00016E1F: 76 70 6D 69 6E 73 62 38                                db 'vpminsb',38h
00016E27: 32 C8                                                  dw avx_bw_instruction_38-instruction_handler
00016E29: 76 70 6D 69 6E 73 64 39                                db 'vpminsd',39h
00016E31: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00016E33: 76 70 6D 69 6E 73 71 39                                db 'vpminsq',39h
00016E3B: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00016E3D: 76 70 6D 69 6E 73 77 EA                                db 'vpminsw',0EAh
00016E45: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016E47: 76 70 6D 69 6E 75 62 DA                                db 'vpminub',0DAh
00016E4F: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016E51: 76 70 6D 69 6E 75 64 3B                                db 'vpminud',3Bh
00016E59: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00016E5B: 76 70 6D 69 6E 75 71 3B                                db 'vpminuq',3Bh
00016E63: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00016E65: 76 70 6D 69 6E 75 77 3A                                db 'vpminuw',3Ah
00016E6D: 32 C8                                                  dw avx_bw_instruction_38-instruction_handler
00016E6F: 76 70 6D 6F 76 64 62 31                                db 'vpmovdb',31h
00016E77: FB DD                                                  dw avx512_pmovdb_instruction-instruction_handler
00016E79: 76 70 6D 6F 76 64 77 33                                db 'vpmovdw',33h
00016E81: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
00016E83: 76 70 6D 6F 76 71 62 32                                db 'vpmovqb',32h
00016E8B: F7 DD                                                  dw avx512_pmovqb_instruction-instruction_handler
00016E8D: 76 70 6D 6F 76 71 64 35                                db 'vpmovqd',35h
00016E95: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
00016E97: 76 70 6D 6F 76 71 77 34                                db 'vpmovqw',34h
00016E9F: FB DD                                                  dw avx512_pmovdb_instruction-instruction_handler
00016EA1: 76 70 6D 6F 76 77 62 30                                db 'vpmovwb',30h
00016EA9: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
00016EAB: 76 70 6D 75 6C 64 71 28                                db 'vpmuldq',28h
00016EB3: 66 C7                                                  dw avx_q_instruction_38-instruction_handler
00016EB5: 76 70 6D 75 6C 68 77 E5                                db 'vpmulhw',0E5h
00016EBD: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016EBF: 76 70 6D 75 6C 6C 64 40                                db 'vpmulld',40h
00016EC7: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00016EC9: 76 70 6D 75 6C 6C 71 40                                db 'vpmullq',40h
00016ED1: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00016ED3: 76 70 6D 75 6C 6C 77 D5                                db 'vpmullw',0D5h
00016EDB: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016EDD: 76 70 72 6F 6C 76 64 15                                db 'vprolvd',15h
00016EE5: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
00016EE7: 76 70 72 6F 6C 76 71 15                                db 'vprolvq',15h
00016EEF: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00016EF1: 76 70 72 6F 72 76 64 14                                db 'vprorvd',14h
00016EF9: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
00016EFB: 76 70 72 6F 72 76 71 14                                db 'vprorvq',14h
00016F03: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00016F05: 76 70 73 61 64 62 77 F6                                db 'vpsadbw',0F6h
00016F0D: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016F0F: 76 70 73 68 6C 64 64 71                                db 'vpshldd',71h
00016F17: DB C7                                                  dw avx_d_instruction_3a_imm8_evex-instruction_handler
00016F19: 76 70 73 68 6C 64 71 71                                db 'vpshldq',71h
00016F21: 88 C7                                                  dw avx_q_instruction_3a_imm8_evex-instruction_handler
00016F23: 76 70 73 68 6C 64 77 70                                db 'vpshldw',70h
00016F2B: 0D C8                                                  dw avx_bw_instruction_3a_imm8_w1_evex-instruction_handler
00016F2D: 76 70 73 68 72 64 64 73                                db 'vpshrdd',73h
00016F35: DB C7                                                  dw avx_d_instruction_3a_imm8_evex-instruction_handler
00016F37: 76 70 73 68 72 64 71 73                                db 'vpshrdq',73h
00016F3F: 88 C7                                                  dw avx_q_instruction_3a_imm8_evex-instruction_handler
00016F41: 76 70 73 68 72 64 77 72                                db 'vpshrdw',72h
00016F49: 0D C8                                                  dw avx_bw_instruction_3a_imm8_w1_evex-instruction_handler
00016F4B: 76 70 73 68 75 66 62 00                                db 'vpshufb',0
00016F53: 32 C8                                                  dw avx_bw_instruction_38-instruction_handler
00016F55: 76 70 73 68 75 66 64 70                                db 'vpshufd',70h
00016F5D: F2 C7                                                  dw avx_single_source_d_instruction_imm8-instruction_handler
00016F5F: 76 70 73 69 67 6E 62 08                                db 'vpsignb',8
00016F67: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
00016F69: 76 70 73 69 67 6E 64 0A                                db 'vpsignd',0Ah
00016F71: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
00016F73: 76 70 73 69 67 6E 77 09                                db 'vpsignw',9
00016F7B: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
00016F7D: 76 70 73 6C 6C 64 71 07                                db 'vpslldq',111b
00016F85: 8D DC                                                  dw avx_shift_dq_instruction-instruction_handler
00016F87: 76 70 73 6C 6C 76 64 47                                db 'vpsllvd',47h
00016F8F: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00016F91: 76 70 73 6C 6C 76 71 47                                db 'vpsllvq',47h
00016F99: 76 C7                                                  dw avx_q_instruction_38_w1-instruction_handler
00016F9B: 76 70 73 6C 6C 76 77 12                                db 'vpsllvw',12h
00016FA3: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
00016FA5: 76 70 73 72 61 76 64 46                                db 'vpsravd',46h
00016FAD: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00016FAF: 76 70 73 72 61 76 71 46                                db 'vpsravq',46h
00016FB7: 6F C7                                                  dw avx_q_instruction_38_w1_evex-instruction_handler
00016FB9: 76 70 73 72 61 76 77 11                                db 'vpsravw',11h
00016FC1: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
00016FC3: 76 70 73 72 6C 64 71 03                                db 'vpsrldq',011b
00016FCB: 8D DC                                                  dw avx_shift_dq_instruction-instruction_handler
00016FCD: 76 70 73 72 6C 76 64 45                                db 'vpsrlvd',45h
00016FD5: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00016FD7: 76 70 73 72 6C 76 71 45                                db 'vpsrlvq',45h
00016FDF: 76 C7                                                  dw avx_q_instruction_38_w1-instruction_handler
00016FE1: 76 70 73 72 6C 76 77 10                                db 'vpsrlvw',10h
00016FE9: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
00016FEB: 76 70 73 75 62 73 62 E8                                db 'vpsubsb',0E8h
00016FF3: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016FF5: 76 70 73 75 62 73 77 E9                                db 'vpsubsw',0E9h
00016FFD: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016FFF: 76 73 68 75 66 70 64 C6                                db 'vshufpd',0C6h
00017007: 6B C6                                                  dw avx_pd_instruction_imm8-instruction_handler
00017009: 76 73 68 75 66 70 73 C6                                db 'vshufps',0C6h
00017011: D9 C6                                                  dw avx_ps_instruction_imm8-instruction_handler
00017013: 76 73 71 72 74 70 64 51                                db 'vsqrtpd',51h
0001701B: 52 C6                                                  dw avx_single_source_pd_instruction_er-instruction_handler
0001701D: 76 73 71 72 74 70 73 51                                db 'vsqrtps',51h
00017025: C0 C6                                                  dw avx_single_source_ps_instruction_er-instruction_handler
00017027: 76 73 71 72 74 73 64 51                                db 'vsqrtsd',51h
0001702F: 10 C7                                                  dw avx_sd_instruction_er-instruction_handler
00017031: 76 73 71 72 74 73 73 51                                db 'vsqrtss',51h
00017039: 33 C7                                                  dw avx_ss_instruction_er-instruction_handler
0001703B: 76 74 65 73 74 70 64 0F                                db 'vtestpd',0Fh
00017043: 0D D3                                                  dw avx_single_source_instruction_38_noevex-instruction_handler
00017045: 76 74 65 73 74 70 73 0E                                db 'vtestps',0Eh
0001704D: 0D D3                                                  dw avx_single_source_instruction_38_noevex-instruction_handler
0001704F: 78 72 73 74 6F 72 73 03                                db 'xrstors',3
00017057: 06 AE                                                  dw xsaves_instruction-instruction_handler
00017059: 78 73 61 76 65 36 34 04                                db 'xsave64',100b
00017061: 0A AE                                                  dw fxsave_instruction_64bit-instruction_handler
                                                                instructions_8:
00017063: 61 64 64 73 75 62 70 64 D0                             db 'addsubpd',0D0h
0001706C: 62 A2                                                  dw sse_pd_instruction-instruction_handler
0001706E: 61 64 64 73 75 62 70 73 D0                             db 'addsubps',0D0h
00017077: 1C A3                                                  dw cvtpd2dq_instruction-instruction_handler
00017079: 62 6C 65 6E 64 76 70 64 15                             db 'blendvpd',15h
00017082: AE A9                                                  dw sse4_instruction_66_38_xmm0-instruction_handler
00017084: 62 6C 65 6E 64 76 70 73 14                             db 'blendvps',14h
0001708D: AE A9                                                  dw sse4_instruction_66_38_xmm0-instruction_handler
0001708F: 63 6C 64 65 6D 6F 74 65 00                             db 'cldemote',0
00017098: 5F AE                                                  dw cldemote_instruction-instruction_handler
0001709A: 63 6C 72 73 73 62 73 79 06                             db 'clrssbsy',6
000170A3: C5 BB                                                  dw clrssbsy_instruction-instruction_handler
000170A5: 63 6D 70 6E 65 71 70 64 04                             db 'cmpneqpd',4
000170AE: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
000170B0: 63 6D 70 6E 65 71 70 73 04                             db 'cmpneqps',4
000170B9: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
000170BB: 63 6D 70 6E 65 71 73 64 04                             db 'cmpneqsd',4
000170C4: DC A2                                                  dw cmp_sd_instruction-instruction_handler
000170C6: 63 6D 70 6E 65 71 73 73 04                             db 'cmpneqss',4
000170CF: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
000170D1: 63 6D 70 6E 6C 65 70 64 06                             db 'cmpnlepd',6
000170DA: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
000170DC: 63 6D 70 6E 6C 65 70 73 06                             db 'cmpnleps',6
000170E5: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
000170E7: 63 6D 70 6E 6C 65 73 64 06                             db 'cmpnlesd',6
000170F0: DC A2                                                  dw cmp_sd_instruction-instruction_handler
000170F2: 63 6D 70 6E 6C 65 73 73 06                             db 'cmpnless',6
000170FB: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
000170FD: 63 6D 70 6E 6C 74 70 64 05                             db 'cmpnltpd',5
00017106: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
00017108: 63 6D 70 6E 6C 74 70 73 05                             db 'cmpnltps',5
00017111: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
00017113: 63 6D 70 6E 6C 74 73 64 05                             db 'cmpnltsd',5
0001711C: DC A2                                                  dw cmp_sd_instruction-instruction_handler
0001711E: 63 6D 70 6E 6C 74 73 73 05                             db 'cmpnltss',5
00017127: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
00017129: 63 6D 70 6F 72 64 70 64 07                             db 'cmpordpd',7
00017132: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
00017134: 63 6D 70 6F 72 64 70 73 07                             db 'cmpordps',7
0001713D: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
0001713F: 63 6D 70 6F 72 64 73 64 07                             db 'cmpordsd',7
00017148: DC A2                                                  dw cmp_sd_instruction-instruction_handler
0001714A: 63 6D 70 6F 72 64 73 73 07                             db 'cmpordss',7
00017153: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
00017155: 63 76 74 64 71 32 70 64 E6                             db 'cvtdq2pd',0E6h
0001715E: 0C A3                                                  dw cvtdq2pd_instruction-instruction_handler
00017160: 63 76 74 64 71 32 70 73 5B                             db 'cvtdq2ps',5Bh
00017169: 4F A2                                                  dw sse_ps_instruction-instruction_handler
0001716B: 63 76 74 70 64 32 64 71 E6                             db 'cvtpd2dq',0E6h
00017174: 1C A3                                                  dw cvtpd2dq_instruction-instruction_handler
00017176: 63 76 74 70 64 32 70 69 2D                             db 'cvtpd2pi',2Dh
0001717F: 13 A8                                                  dw cvtpd2pi_instruction-instruction_handler
00017181: 63 76 74 70 64 32 70 73 5A                             db 'cvtpd2ps',5Ah
0001718A: 62 A2                                                  dw sse_pd_instruction-instruction_handler
0001718C: 63 76 74 70 69 32 70 64 2A                             db 'cvtpi2pd',2Ah
00017195: E1 A6                                                  dw cvtpi2pd_instruction-instruction_handler
00017197: 63 76 74 70 69 32 70 73 2A                             db 'cvtpi2ps',2Ah
000171A0: E8 A6                                                  dw cvtpi2ps_instruction-instruction_handler
000171A2: 63 76 74 70 73 32 64 71 5B                             db 'cvtps2dq',5Bh
000171AB: 62 A2                                                  dw sse_pd_instruction-instruction_handler
000171AD: 63 76 74 70 73 32 70 64 5A                             db 'cvtps2pd',5Ah
000171B6: 13 A3                                                  dw cvtps2pd_instruction-instruction_handler
000171B8: 63 76 74 70 73 32 70 69 2D                             db 'cvtps2pi',2Dh
000171C1: 0A A8                                                  dw cvtps2pi_instruction-instruction_handler
000171C3: 63 76 74 73 64 32 73 69 2D                             db 'cvtsd2si',2Dh
000171CC: 66 A8                                                  dw cvtsd2si_instruction-instruction_handler
000171CE: 63 76 74 73 64 32 73 73 5A                             db 'cvtsd2ss',5Ah
000171D7: 88 A2                                                  dw sse_sd_instruction-instruction_handler
000171D9: 63 76 74 73 69 32 73 64 2A                             db 'cvtsi2sd',2Ah
000171E2: 6E A7                                                  dw cvtsi2sd_instruction-instruction_handler
000171E4: 63 76 74 73 69 32 73 73 2A                             db 'cvtsi2ss',2Ah
000171ED: 65 A7                                                  dw cvtsi2ss_instruction-instruction_handler
000171EF: 63 76 74 73 73 32 73 64 5A                             db 'cvtss2sd',5Ah
000171F8: 75 A2                                                  dw sse_ss_instruction-instruction_handler
000171FA: 63 76 74 73 73 32 73 69 2D                             db 'cvtss2si',2Dh
00017203: 56 A8                                                  dw cvtss2si_instruction-instruction_handler
00017205: 66 63 6D 6F 76 6E 62 65 D0                             db 'fcmovnbe',0D0h
0001720E: 6D 9B                                                  dw fcomi_instruction-instruction_handler
00017210: 66 6E 73 74 65 6E 76 64 06                             db 'fnstenvd',6
00017219: 74 9A                                                  dw fldenv_instruction_32bit-instruction_handler
0001721B: 66 6E 73 74 65 6E 76 77 06                             db 'fnstenvw',6
00017224: 69 9A                                                  dw fldenv_instruction_16bit-instruction_handler
00017226: 66 78 73 61 76 65 36 34 00                             db 'fxsave64',0
0001722F: 0A AE                                                  dw fxsave_instruction_64bit-instruction_handler
00017231: 69 6E 73 65 72 74 70 73 21                             db 'insertps',21h
0001723A: F3 AA                                                  dw insertps_instruction-instruction_handler
0001723C: 6B 6F 72 74 65 73 74 62 98                             db 'kortestb',98h
00017245: 09 D7                                                  dw mask_instruction_single_source_b-instruction_handler
00017247: 6B 6F 72 74 65 73 74 64 98                             db 'kortestd',98h
00017250: 12 D7                                                  dw mask_instruction_single_source_d-instruction_handler
00017252: 6B 6F 72 74 65 73 74 71 98                             db 'kortestq',98h
0001725B: 19 D7                                                  dw mask_instruction_single_source_q-instruction_handler
0001725D: 6B 6F 72 74 65 73 74 77 98                             db 'kortestw',98h
00017266: 20 D7                                                  dw mask_instruction_single_source_w-instruction_handler
00017268: 6B 73 68 69 66 74 6C 62 32                             db 'kshiftlb',32h
00017271: EB D6                                                  dw mask_shift_instruction_d-instruction_handler
00017273: 6B 73 68 69 66 74 6C 64 33                             db 'kshiftld',33h
0001727C: EB D6                                                  dw mask_shift_instruction_d-instruction_handler
0001727E: 6B 73 68 69 66 74 6C 71 33                             db 'kshiftlq',33h
00017287: E4 D6                                                  dw mask_shift_instruction_q-instruction_handler
00017289: 6B 73 68 69 66 74 6C 77 32                             db 'kshiftlw',32h
00017292: E4 D6                                                  dw mask_shift_instruction_q-instruction_handler
00017294: 6B 73 68 69 66 74 72 62 30                             db 'kshiftrb',30h
0001729D: EB D6                                                  dw mask_shift_instruction_d-instruction_handler
0001729F: 6B 73 68 69 66 74 72 64 31                             db 'kshiftrd',31h
000172A8: EB D6                                                  dw mask_shift_instruction_d-instruction_handler
000172AA: 6B 73 68 69 66 74 72 71 31                             db 'kshiftrq',31h
000172B3: E4 D6                                                  dw mask_shift_instruction_q-instruction_handler
000172B5: 6B 73 68 69 66 74 72 77 30                             db 'kshiftrw',30h
000172BE: E4 D6                                                  dw mask_shift_instruction_q-instruction_handler
000172C0: 6B 75 6E 70 63 6B 62 77 4B                             db 'kunpckbw',4Bh
000172C9: 29 D7                                                  dw mask_instruction_b-instruction_handler
000172CB: 6B 75 6E 70 63 6B 64 71 4B                             db 'kunpckdq',4Bh
000172D4: 39 D7                                                  dw mask_instruction_q-instruction_handler
000172D6: 6B 75 6E 70 63 6B 77 64 4B                             db 'kunpckwd',4Bh
000172DF: 40 D7                                                  dw mask_instruction_w-instruction_handler
000172E1: 6D 61 73 6B 6D 6F 76 71 00                             db 'maskmovq',0
000172EA: 24 A6                                                  dw maskmovq_instruction-instruction_handler
000172EC: 6D 6F 6E 69 74 6F 72 78 FA                             db 'monitorx',0FAh
000172F5: 15 B0                                                  dw monitor_instruction-instruction_handler
000172F7: 6D 6F 76 6D 73 6B 70 64 00                             db 'movmskpd',0
00017300: 84 A6                                                  dw movmskpd_instruction-instruction_handler
00017302: 6D 6F 76 6D 73 6B 70 73 00                             db 'movmskps',0
0001730B: 8B A6                                                  dw movmskps_instruction-instruction_handler
0001730D: 6D 6F 76 6E 74 64 71 61 2A                             db 'movntdqa',2Ah
00017316: 84 B0                                                  dw movntdqa_instruction-instruction_handler
00017318: 6D 6F 76 73 68 64 75 70 16                             db 'movshdup',16h
00017321: 2C A3                                                  dw movshdup_instruction-instruction_handler
00017323: 6D 6F 76 73 6C 64 75 70 12                             db 'movsldup',12h
0001732C: 2C A3                                                  dw movshdup_instruction-instruction_handler
0001732E: 70 61 63 6B 73 73 64 77 6B                             db 'packssdw',6Bh
00017337: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00017339: 70 61 63 6B 73 73 77 62 63                             db 'packsswb',63h
00017342: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00017344: 70 61 63 6B 75 73 64 77 2B                             db 'packusdw',2Bh
0001734D: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
0001734F: 70 61 63 6B 75 73 77 62 67                             db 'packuswb',67h
00017358: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
0001735A: 70 62 6C 65 6E 64 76 62 10                             db 'pblendvb',10h
00017363: AE A9                                                  dw sse4_instruction_66_38_xmm0-instruction_handler
00017365: 70 66 72 63 70 69 74 31 A6                             db 'pfrcpit1',0A6h
0001736E: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00017370: 70 66 72 63 70 69 74 32 B6                             db 'pfrcpit2',0B6h
00017379: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
0001737B: 70 66 72 73 71 69 74 31 A7                             db 'pfrsqit1',0A7h
00017384: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00017386: 70 6D 6F 76 6D 73 6B 62 D7                             db 'pmovmskb',0D7h
0001738F: B8 9C                                                  dw pmovmskb_instruction-instruction_handler
00017391: 70 6D 6F 76 73 78 62 64 21                             db 'pmovsxbd',21h
0001739A: 46 AD                                                  dw pmovsxbd_instruction-instruction_handler
0001739C: 70 6D 6F 76 73 78 62 71 22                             db 'pmovsxbq',22h
000173A5: 4F AD                                                  dw pmovsxbq_instruction-instruction_handler
000173A7: 70 6D 6F 76 73 78 62 77 20                             db 'pmovsxbw',20h
000173B0: 3D AD                                                  dw pmovsxbw_instruction-instruction_handler
000173B2: 70 6D 6F 76 73 78 64 71 25                             db 'pmovsxdq',25h
000173BB: 6A AD                                                  dw pmovsxdq_instruction-instruction_handler
000173BD: 70 6D 6F 76 73 78 77 64 23                             db 'pmovsxwd',23h
000173C6: 58 AD                                                  dw pmovsxwd_instruction-instruction_handler
000173C8: 70 6D 6F 76 73 78 77 71 24                             db 'pmovsxwq',24h
000173D1: 61 AD                                                  dw pmovsxwq_instruction-instruction_handler
000173D3: 70 6D 6F 76 7A 78 62 64 31                             db 'pmovzxbd',31h
000173DC: 46 AD                                                  dw pmovsxbd_instruction-instruction_handler
000173DE: 70 6D 6F 76 7A 78 62 71 32                             db 'pmovzxbq',32h
000173E7: 4F AD                                                  dw pmovsxbq_instruction-instruction_handler
000173E9: 70 6D 6F 76 7A 78 62 77 30                             db 'pmovzxbw',30h
000173F2: 3D AD                                                  dw pmovsxbw_instruction-instruction_handler
000173F4: 70 6D 6F 76 7A 78 64 71 35                             db 'pmovzxdq',35h
000173FD: 6A AD                                                  dw pmovsxdq_instruction-instruction_handler
000173FF: 70 6D 6F 76 7A 78 77 64 33                             db 'pmovzxwd',33h
00017408: 58 AD                                                  dw pmovsxwd_instruction-instruction_handler
0001740A: 70 6D 6F 76 7A 78 77 71 34                             db 'pmovzxwq',34h
00017413: 61 AD                                                  dw pmovsxwq_instruction-instruction_handler
00017415: 70 6D 75 6C 68 72 73 77 0B                             db 'pmulhrsw',0Bh
0001741E: A8 A8                                                  dw ssse3_instruction-instruction_handler
00017420: 70 72 65 66 65 74 63 68 00                             db 'prefetch',0
00017429: A3 AE                                                  dw amd_prefetch_instruction-instruction_handler
0001742B: 72 64 66 73 62 61 73 65 00                             db 'rdfsbase',0
00017434: C2 B6                                                  dw rdfsbase_instruction-instruction_handler
00017436: 72 64 67 73 62 61 73 65 01                             db 'rdgsbase',1
0001743F: C2 B6                                                  dw rdfsbase_instruction-instruction_handler
00017441: 72 73 74 6F 72 73 73 70 05                             db 'rstorssp',5
0001744A: C1 BB                                                  dw rstorssp_instruction-instruction_handler
0001744C: 73 65 74 73 73 62 73 79 E8                             db 'setssbsy',0E8h
00017455: B3 BB                                                  dw setssbsy_instruction-instruction_handler
00017457: 73 68 61 31 6D 73 67 31 C9                             db 'sha1msg1',0C9h
00017460: BC A9                                                  dw sse4_instruction_38-instruction_handler
00017462: 73 68 61 31 6D 73 67 32 CA                             db 'sha1msg2',0CAh
0001746B: BC A9                                                  dw sse4_instruction_38-instruction_handler
0001746D: 73 79 73 65 6E 74 65 72 34                             db 'sysenter',34h
00017476: 95 64                                                  dw simple_extended_instruction-instruction_handler
00017478: 73 79 73 65 78 69 74 71 35                             db 'sysexitq',35h
00017481: 84 64                                                  dw simple_extended_instruction_64bit-instruction_handler
00017483: 75 6D 6F 6E 69 74 6F 72 00                             db 'umonitor',0
0001748C: 13 BB                                                  dw umonitor_instruction-instruction_handler
0001748E: 75 6E 70 63 6B 68 70 64 15                             db 'unpckhpd',15h
00017497: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00017499: 75 6E 70 63 6B 68 70 73 15                             db 'unpckhps',15h
000174A2: 4F A2                                                  dw sse_ps_instruction-instruction_handler
000174A4: 75 6E 70 63 6B 6C 70 64 14                             db 'unpcklpd',14h
000174AD: 62 A2                                                  dw sse_pd_instruction-instruction_handler
000174AF: 75 6E 70 63 6B 6C 70 73 14                             db 'unpcklps',14h
000174B8: 4F A2                                                  dw sse_ps_instruction-instruction_handler
000174BA: 76 62 6C 65 6E 64 70 64 0D                             db 'vblendpd',0Dh
000174C3: 5E D3                                                  dw avx_pi_instruction_3a_imm8_noevex-instruction_handler
000174C5: 76 62 6C 65 6E 64 70 73 0C                             db 'vblendps',0Ch
000174CE: 5E D3                                                  dw avx_pi_instruction_3a_imm8_noevex-instruction_handler
000174D0: 76 63 6D 70 65 71 70 64 00                             db 'vcmpeqpd',0
000174D9: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
000174DB: 76 63 6D 70 65 71 70 73 00                             db 'vcmpeqps',0
000174E4: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
000174E6: 76 63 6D 70 65 71 73 64 00                             db 'vcmpeqsd',0
000174EF: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
000174F1: 76 63 6D 70 65 71 73 73 00                             db 'vcmpeqss',0
000174FA: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
000174FC: 76 63 6D 70 67 65 70 64 0D                             db 'vcmpgepd',0Dh
00017505: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017507: 76 63 6D 70 67 65 70 73 0D                             db 'vcmpgeps',0Dh
00017510: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00017512: 76 63 6D 70 67 65 73 64 0D                             db 'vcmpgesd',0Dh
0001751B: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
0001751D: 76 63 6D 70 67 65 73 73 0D                             db 'vcmpgess',0Dh
00017526: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017528: 76 63 6D 70 67 74 70 64 0E                             db 'vcmpgtpd',0Eh
00017531: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017533: 76 63 6D 70 67 74 70 73 0E                             db 'vcmpgtps',0Eh
0001753C: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
0001753E: 76 63 6D 70 67 74 73 64 0E                             db 'vcmpgtsd',0Eh
00017547: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00017549: 76 63 6D 70 67 74 73 73 0E                             db 'vcmpgtss',0Eh
00017552: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017554: 76 63 6D 70 6C 65 70 64 02                             db 'vcmplepd',2
0001755D: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
0001755F: 76 63 6D 70 6C 65 70 73 02                             db 'vcmpleps',2
00017568: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
0001756A: 76 63 6D 70 6C 65 73 64 02                             db 'vcmplesd',2
00017573: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00017575: 76 63 6D 70 6C 65 73 73 02                             db 'vcmpless',2
0001757E: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017580: 76 63 6D 70 6C 74 70 64 01                             db 'vcmpltpd',1
00017589: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
0001758B: 76 63 6D 70 6C 74 70 73 01                             db 'vcmpltps',1
00017594: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00017596: 76 63 6D 70 6C 74 73 64 01                             db 'vcmpltsd',1
0001759F: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
000175A1: 76 63 6D 70 6C 74 73 73 01                             db 'vcmpltss',1
000175AA: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
000175AC: 76 66 6D 61 64 64 70 64 69                             db 'vfmaddpd',69h
000175B5: F4 D4                                                  dw fma4_instruction_p-instruction_handler
000175B7: 76 66 6D 61 64 64 70 73 68                             db 'vfmaddps',68h
000175C0: F4 D4                                                  dw fma4_instruction_p-instruction_handler
000175C2: 76 66 6D 61 64 64 73 64 6B                             db 'vfmaddsd',6Bh
000175CB: F8 D4                                                  dw fma4_instruction_sd-instruction_handler
000175CD: 76 66 6D 61 64 64 73 73 6A                             db 'vfmaddss',6Ah
000175D6: FC D4                                                  dw fma4_instruction_ss-instruction_handler
000175D8: 76 66 6D 73 75 62 70 64 6D                             db 'vfmsubpd',6Dh
000175E1: F4 D4                                                  dw fma4_instruction_p-instruction_handler
000175E3: 76 66 6D 73 75 62 70 73 6C                             db 'vfmsubps',6Ch
000175EC: F4 D4                                                  dw fma4_instruction_p-instruction_handler
000175EE: 76 66 6D 73 75 62 73 64 6F                             db 'vfmsubsd',6Fh
000175F7: F8 D4                                                  dw fma4_instruction_sd-instruction_handler
000175F9: 76 66 6D 73 75 62 73 73 6E                             db 'vfmsubss',6Eh
00017602: FC D4                                                  dw fma4_instruction_ss-instruction_handler
00017604: 76 6C 64 6D 78 63 73 72 02                             db 'vldmxcsr',10b
0001760D: B9 D9                                                  dw vstmxcsr_instruction-instruction_handler
0001760F: 76 6D 6C 61 75 6E 63 68 C2                             db 'vmlaunch',0C2h
00017618: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
0001761A: 76 6D 6F 76 64 64 75 70 12                             db 'vmovddup',12h
00017623: 11 D0                                                  dw avx_movddup_instruction-instruction_handler
00017625: 76 6D 6F 76 64 71 75 38 6F                             db 'vmovdqu8',6Fh
0001762E: A3 CC                                                  dw avx512_movdqu8_instruction-instruction_handler
00017630: 76 6D 6F 76 68 6C 70 73 12                             db 'vmovhlps',12h
00017639: 41 D1                                                  dw avx_movhlps_instruction-instruction_handler
0001763B: 76 6D 6F 76 6C 68 70 73 16                             db 'vmovlhps',16h
00017644: 41 D1                                                  dw avx_movhlps_instruction-instruction_handler
00017646: 76 6D 6F 76 6E 74 64 71 E7                             db 'vmovntdq',0E7h
0001764F: 5A CD                                                  dw avx_movntdq_instruction-instruction_handler
00017651: 76 6D 6F 76 6E 74 70 64 2B                             db 'vmovntpd',2Bh
0001765A: 53 CD                                                  dw avx_movntpd_instruction-instruction_handler
0001765C: 76 6D 6F 76 6E 74 70 73 2B                             db 'vmovntps',2Bh
00017665: 61 CD                                                  dw avx_movntps_instruction-instruction_handler
00017667: 76 6D 70 73 61 64 62 77 42                             db 'vmpsadbw',42h
00017670: 5E D3                                                  dw avx_pi_instruction_3a_imm8_noevex-instruction_handler
00017672: 76 6D 72 65 73 75 6D 65 C3                             db 'vmresume',0C3h
0001767B: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
0001767D: 76 70 61 64 64 75 73 62 DC                             db 'vpaddusb',0DCh
00017686: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00017688: 76 70 61 64 64 75 73 77 DD                             db 'vpaddusw',0DDh
00017691: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00017693: 76 70 61 6C 69 67 6E 72 0F                             db 'vpalignr',0Fh
0001769C: 81 D3                                                  dw avx_pi_instruction_3a_imm8-instruction_handler
0001769E: 76 70 62 6C 65 6E 64 64 02                             db 'vpblendd',2
000176A7: 5E D3                                                  dw avx_pi_instruction_3a_imm8_noevex-instruction_handler
000176A9: 76 70 62 6C 65 6E 64 77 0E                             db 'vpblendw',0Eh
000176B2: 5E D3                                                  dw avx_pi_instruction_3a_imm8_noevex-instruction_handler
000176B4: 76 70 63 6D 70 65 71 62 74                             db 'vpcmpeqb',74h
000176BD: 7A D5                                                  dw avx_cmpeqb_instruction-instruction_handler
000176BF: 76 70 63 6D 70 65 71 64 76                             db 'vpcmpeqd',76h
000176C8: 76 D5                                                  dw avx_cmpeqd_instruction-instruction_handler
000176CA: 76 70 63 6D 70 65 71 71 29                             db 'vpcmpeqq',29h
000176D3: 64 D5                                                  dw avx_cmpeqq_instruction-instruction_handler
000176D5: 76 70 63 6D 70 65 71 77 75                             db 'vpcmpeqw',75h
000176DE: 7A D5                                                  dw avx_cmpeqb_instruction-instruction_handler
000176E0: 76 70 63 6D 70 67 74 62 64                             db 'vpcmpgtb',64h
000176E9: 7A D5                                                  dw avx_cmpeqb_instruction-instruction_handler
000176EB: 76 70 63 6D 70 67 74 64 66                             db 'vpcmpgtd',66h
000176F4: 76 D5                                                  dw avx_cmpeqd_instruction-instruction_handler
000176F6: 76 70 63 6D 70 67 74 71 37                             db 'vpcmpgtq',37h
000176FF: 64 D5                                                  dw avx_cmpeqq_instruction-instruction_handler
00017701: 76 70 63 6D 70 67 74 77 65                             db 'vpcmpgtw',65h
0001770A: 7A D5                                                  dw avx_cmpeqb_instruction-instruction_handler
0001770C: 76 70 63 6D 70 6C 65 62 02                             db 'vpcmpleb',2
00017715: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
00017717: 76 70 63 6D 70 6C 65 64 02                             db 'vpcmpled',2
00017720: 9E D5                                                  dw avx512_cmp_d_instruction-instruction_handler
00017722: 76 70 63 6D 70 6C 65 71 02                             db 'vpcmpleq',2
0001772B: 91 D5                                                  dw avx512_cmp_q_instruction-instruction_handler
0001772D: 76 70 63 6D 70 6C 65 77 02                             db 'vpcmplew',2
00017736: B1 D5                                                  dw avx512_cmp_w_instruction-instruction_handler
00017738: 76 70 63 6D 70 6C 74 62 01                             db 'vpcmpltb',1
00017741: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
00017743: 76 70 63 6D 70 6C 74 64 01                             db 'vpcmpltd',1
0001774C: 9E D5                                                  dw avx512_cmp_d_instruction-instruction_handler
0001774E: 76 70 63 6D 70 6C 74 71 01                             db 'vpcmpltq',1
00017757: 91 D5                                                  dw avx512_cmp_q_instruction-instruction_handler
00017759: 76 70 63 6D 70 6C 74 77 01                             db 'vpcmpltw',1
00017762: B1 D5                                                  dw avx512_cmp_w_instruction-instruction_handler
00017764: 76 70 63 6F 6D 65 71 62 04                             db 'vpcomeqb',4
0001776D: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
0001776F: 76 70 63 6F 6D 65 71 64 04                             db 'vpcomeqd',4
00017778: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
0001777A: 76 70 63 6F 6D 65 71 71 04                             db 'vpcomeqq',4
00017783: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
00017785: 76 70 63 6F 6D 65 71 77 04                             db 'vpcomeqw',4
0001778E: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
00017790: 76 70 63 6F 6D 67 65 62 03                             db 'vpcomgeb',3
00017799: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
0001779B: 76 70 63 6F 6D 67 65 64 03                             db 'vpcomged',3
000177A4: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
000177A6: 76 70 63 6F 6D 67 65 71 03                             db 'vpcomgeq',3
000177AF: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
000177B1: 76 70 63 6F 6D 67 65 77 03                             db 'vpcomgew',3
000177BA: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
000177BC: 76 70 63 6F 6D 67 74 62 02                             db 'vpcomgtb',2
000177C5: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
000177C7: 76 70 63 6F 6D 67 74 64 02                             db 'vpcomgtd',2
000177D0: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
000177D2: 76 70 63 6F 6D 67 74 71 02                             db 'vpcomgtq',2
000177DB: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
000177DD: 76 70 63 6F 6D 67 74 77 02                             db 'vpcomgtw',2
000177E6: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
000177E8: 76 70 63 6F 6D 6C 65 62 01                             db 'vpcomleb',1
000177F1: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
000177F3: 76 70 63 6F 6D 6C 65 64 01                             db 'vpcomled',1
000177FC: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
000177FE: 76 70 63 6F 6D 6C 65 71 01                             db 'vpcomleq',1
00017807: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
00017809: 76 70 63 6F 6D 6C 65 77 01                             db 'vpcomlew',1
00017812: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
00017814: 76 70 63 6F 6D 6C 74 62 00                             db 'vpcomltb',0
0001781D: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
0001781F: 76 70 63 6F 6D 6C 74 64 00                             db 'vpcomltd',0
00017828: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
0001782A: 76 70 63 6F 6D 6C 74 71 00                             db 'vpcomltq',0
00017833: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
00017835: 76 70 63 6F 6D 6C 74 77 00                             db 'vpcomltw',0
0001783E: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
00017840: 76 70 64 70 62 75 73 64 50                             db 'vpdpbusd',50h
00017849: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
0001784B: 76 70 64 70 77 73 73 64 52                             db 'vpdpwssd',52h
00017854: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
00017856: 76 70 65 72 6D 69 32 62 75                             db 'vpermi2b',75h
0001785F: 4D C8                                                  dw avx_bw_instruction_38_evex-instruction_handler
00017861: 76 70 65 72 6D 69 32 64 76                             db 'vpermi2d',76h
0001786A: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
0001786C: 76 70 65 72 6D 69 32 71 76                             db 'vpermi2q',76h
00017875: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00017877: 76 70 65 72 6D 69 32 77 75                             db 'vpermi2w',75h
00017880: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
00017882: 76 70 65 72 6D 74 32 62 7D                             db 'vpermt2b',7Dh
0001788B: 4D C8                                                  dw avx_bw_instruction_38_evex-instruction_handler
0001788D: 76 70 65 72 6D 74 32 64 7E                             db 'vpermt2d',7Eh
00017896: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
00017898: 76 70 65 72 6D 74 32 71 7E                             db 'vpermt2q',7Eh
000178A1: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
000178A3: 76 70 65 72 6D 74 32 77 7D                             db 'vpermt2w',7Dh
000178AC: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
000178AE: 76 70 68 61 64 64 62 64 C2                             db 'vphaddbd',0C2h
000178B7: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
000178B9: 76 70 68 61 64 64 62 71 C3                             db 'vphaddbq',0C3h
000178C2: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
000178C4: 76 70 68 61 64 64 62 77 C1                             db 'vphaddbw',0C1h
000178CD: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
000178CF: 76 70 68 61 64 64 64 71 CB                             db 'vphadddq',0CBh
000178D8: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
000178DA: 76 70 68 61 64 64 73 77 03                             db 'vphaddsw',3
000178E3: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
000178E5: 76 70 68 61 64 64 77 64 C6                             db 'vphaddwd',0C6h
000178EE: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
000178F0: 76 70 68 61 64 64 77 71 C7                             db 'vphaddwq',0C7h
000178F9: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
000178FB: 76 70 68 73 75 62 62 77 E1                             db 'vphsubbw',0E1h
00017904: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
00017906: 76 70 68 73 75 62 64 71 E3                             db 'vphsubdq',0E3h
0001790F: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
00017911: 76 70 68 73 75 62 73 77 07                             db 'vphsubsw',7
0001791A: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
0001791C: 76 70 68 73 75 62 77 64 E2                             db 'vphsubwd',0E2h
00017925: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
00017927: 76 70 6C 7A 63 6E 74 64 44                             db 'vplzcntd',44h
00017930: BB C7                                                  dw avx_single_source_d_instruction_38_evex-instruction_handler
00017932: 76 70 6C 7A 63 6E 74 71 44                             db 'vplzcntq',44h
0001793B: 58 C7                                                  dw avx_single_source_q_instruction_38_evex-instruction_handler
0001793D: 76 70 6D 61 63 73 64 64 9E                             db 'vpmacsdd',9Eh
00017946: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
00017948: 76 70 6D 61 63 73 77 64 96                             db 'vpmacswd',96h
00017951: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
00017953: 76 70 6D 61 63 73 77 77 95                             db 'vpmacsww',95h
0001795C: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
0001795E: 76 70 6D 61 64 64 77 64 F5                             db 'vpmaddwd',0F5h
00017967: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00017969: 76 70 6D 6F 76 62 32 6D 29                             db 'vpmovb2m',29h
00017972: 4F D9                                                  dw avx512_pmov_2m_instruction-instruction_handler
00017974: 76 70 6D 6F 76 64 32 6D 39                             db 'vpmovd2m',39h
0001797D: 4F D9                                                  dw avx512_pmov_2m_instruction-instruction_handler
0001797F: 76 70 6D 6F 76 6D 32 62 28                             db 'vpmovm2b',28h
00017988: 1D D9                                                  dw avx512_pmov_m2_instruction-instruction_handler
0001798A: 76 70 6D 6F 76 6D 32 64 38                             db 'vpmovm2d',38h
00017993: 1D D9                                                  dw avx512_pmov_m2_instruction-instruction_handler
00017995: 76 70 6D 6F 76 6D 32 71 38                             db 'vpmovm2q',38h
0001799E: 16 D9                                                  dw avx512_pmov_m2_instruction_w1-instruction_handler
000179A0: 76 70 6D 6F 76 6D 32 77 28                             db 'vpmovm2w',28h
000179A9: 16 D9                                                  dw avx512_pmov_m2_instruction_w1-instruction_handler
000179AB: 76 70 6D 6F 76 71 32 6D 39                             db 'vpmovq2m',39h
000179B4: 48 D9                                                  dw avx512_pmov_2m_instruction_w1-instruction_handler
000179B6: 76 70 6D 6F 76 73 64 62 21                             db 'vpmovsdb',21h
000179BF: FB DD                                                  dw avx512_pmovdb_instruction-instruction_handler
000179C1: 76 70 6D 6F 76 73 64 77 23                             db 'vpmovsdw',23h
000179CA: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
000179CC: 76 70 6D 6F 76 73 71 62 22                             db 'vpmovsqb',22h
000179D5: F7 DD                                                  dw avx512_pmovqb_instruction-instruction_handler
000179D7: 76 70 6D 6F 76 73 71 64 25                             db 'vpmovsqd',25h
000179E0: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
000179E2: 76 70 6D 6F 76 73 71 77 24                             db 'vpmovsqw',24h
000179EB: FB DD                                                  dw avx512_pmovdb_instruction-instruction_handler
000179ED: 76 70 6D 6F 76 73 77 62 20                             db 'vpmovswb',20h
000179F6: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
000179F8: 76 70 6D 6F 76 77 32 6D 29                             db 'vpmovw2m',29h
00017A01: 48 D9                                                  dw avx512_pmov_2m_instruction_w1-instruction_handler
00017A03: 76 70 6D 75 6C 68 75 77 E4                             db 'vpmulhuw',0E4h
00017A0C: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00017A0E: 76 70 6D 75 6C 75 64 71 F4                             db 'vpmuludq',0F4h
00017A17: A6 C7                                                  dw avx_q_instruction-instruction_handler
00017A19: 76 70 6F 70 63 6E 74 62 54                             db 'vpopcntb',54h
00017A22: BB C7                                                  dw avx_single_source_d_instruction_38_evex-instruction_handler
00017A24: 76 70 6F 70 63 6E 74 64 55                             db 'vpopcntd',55h
00017A2D: 41 D4                                                  dw avx512_single_source_ps_instruction-instruction_handler
00017A2F: 76 70 6F 70 63 6E 74 71 55                             db 'vpopcntq',55h
00017A38: 1D D4                                                  dw avx512_single_source_pd_instruction-instruction_handler
00017A3A: 76 70 6F 70 63 6E 74 77 54                             db 'vpopcntw',54h
00017A43: B4 C7                                                  dw avx_single_source_d_instruction_38_evex_w1-instruction_handler
00017A45: 76 70 73 68 6C 64 76 64 71                             db 'vpshldvd',71h
00017A4E: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
00017A50: 76 70 73 68 6C 64 76 71 71                             db 'vpshldvq',71h
00017A59: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00017A5B: 76 70 73 68 6C 64 76 77 70                             db 'vpshldvw',70h
00017A64: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
00017A66: 76 70 73 68 72 64 76 64 73                             db 'vpshrdvd',73h
00017A6F: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
00017A71: 76 70 73 68 72 64 76 71 73                             db 'vpshrdvq',73h
00017A7A: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00017A7C: 76 70 73 68 72 64 76 77 48                             db 'vpshrdvw',72
00017A85: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
00017A87: 76 70 73 68 75 66 68 77 F3                             db 'vpshufhw',0F3h
00017A90: E6 D2                                                  dw avx_pshuf_w_instruction-instruction_handler
00017A92: 76 70 73 68 75 66 6C 77 F2                             db 'vpshuflw',0F2h
00017A9B: E6 D2                                                  dw avx_pshuf_w_instruction-instruction_handler
00017A9D: 76 70 73 75 62 75 73 62 D8                             db 'vpsubusb',0D8h
00017AA6: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00017AA8: 76 70 73 75 62 75 73 77 D9                             db 'vpsubusw',0D9h
00017AB1: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00017AB3: 76 70 74 65 73 74 6D 62 26                             db 'vptestmb',26h
00017ABC: C5 D6                                                  dw avx512_ptestmb_instruction-instruction_handler
00017ABE: 76 70 74 65 73 74 6D 64 27                             db 'vptestmd',27h
00017AC7: AF D6                                                  dw avx512_ptestmd_instruction-instruction_handler
00017AC9: 76 70 74 65 73 74 6D 71 27                             db 'vptestmq',27h
00017AD2: B3 D6                                                  dw avx512_ptestmq_instruction-instruction_handler
00017AD4: 76 70 74 65 73 74 6D 77 26                             db 'vptestmw',26h
00017ADD: BE D6                                                  dw avx512_ptestmw_instruction-instruction_handler
00017ADF: 76 72 61 6E 67 65 70 64 50                             db 'vrangepd',50h
00017AE8: BA D3                                                  dw avx512_pd_instruction_sae_imm8-instruction_handler
00017AEA: 76 72 61 6E 67 65 70 73 50                             db 'vrangeps',50h
00017AF3: CE D3                                                  dw avx512_ps_instruction_sae_imm8-instruction_handler
00017AF5: 76 72 61 6E 67 65 73 64 51                             db 'vrangesd',51h
00017AFE: D4 D3                                                  dw avx512_sd_instruction_sae_imm8-instruction_handler
00017B00: 76 72 61 6E 67 65 73 73 51                             db 'vrangess',51h
00017B09: E1 D3                                                  dw avx512_ss_instruction_sae_imm8-instruction_handler
00017B0B: 76 72 63 70 31 34 70 64 4C                             db 'vrcp14pd',4Ch
00017B14: 1D D4                                                  dw avx512_single_source_pd_instruction-instruction_handler
00017B16: 76 72 63 70 31 34 70 73 4C                             db 'vrcp14ps',4Ch
00017B1F: 41 D4                                                  dw avx512_single_source_ps_instruction-instruction_handler
00017B21: 76 72 63 70 31 34 73 64 4D                             db 'vrcp14sd',4Dh
00017B2A: 5C D4                                                  dw avx512_sd_instruction-instruction_handler
00017B2C: 76 72 63 70 31 34 73 73 4D                             db 'vrcp14ss',4Dh
00017B35: 77 D4                                                  dw avx512_ss_instruction-instruction_handler
00017B37: 76 72 63 70 32 38 70 64 CA                             db 'vrcp28pd',0CAh
00017B40: 95 D4                                                  dw avx512_exp2pd_instruction-instruction_handler
00017B42: 76 72 63 70 32 38 70 73 CA                             db 'vrcp28ps',0CAh
00017B4B: A9 D4                                                  dw avx512_exp2ps_instruction-instruction_handler
00017B4D: 76 72 63 70 32 38 73 64 CB                             db 'vrcp28sd',0CBh
00017B56: 55 D4                                                  dw avx512_sd_instruction_sae-instruction_handler
00017B58: 76 72 63 70 32 38 73 73 CB                             db 'vrcp28ss',0CBh
00017B61: 70 D4                                                  dw avx512_ss_instruction_sae-instruction_handler
00017B63: 76 72 6F 75 6E 64 70 64 09                             db 'vroundpd',9
00017B6C: 57 D3                                                  dw avx_single_source_instruction_3a_imm8_noevex-instruction_handler
00017B6E: 76 72 6F 75 6E 64 70 73 08                             db 'vroundps',8
00017B77: 57 D3                                                  dw avx_single_source_instruction_3a_imm8_noevex-instruction_handler
00017B79: 76 72 6F 75 6E 64 73 64 0B                             db 'vroundsd',0Bh
00017B82: 36 D3                                                  dw avx_sd_instruction_3a_imm8_noevex-instruction_handler
00017B84: 76 72 6F 75 6E 64 73 73 0A                             db 'vroundss',0Ah
00017B8D: 32 D3                                                  dw avx_ss_instruction_3a_imm8_noevex-instruction_handler
00017B8F: 76 72 73 71 72 74 70 73 52                             db 'vrsqrtps',52h
00017B98: C9 C6                                                  dw avx_single_source_ps_instruction_noevex-instruction_handler
00017B9A: 76 72 73 71 72 74 73 73 52                             db 'vrsqrtss',52h
00017BA3: 4F C7                                                  dw avx_ss_instruction_noevex-instruction_handler
00017BA5: 76 73 74 6D 78 63 73 72 03                             db 'vstmxcsr',11b
00017BAE: B9 D9                                                  dw vstmxcsr_instruction-instruction_handler
00017BB0: 76 75 63 6F 6D 69 73 64 2E                             db 'vucomisd',2Eh
00017BB9: 90 D2                                                  dw avx_comisd_instruction-instruction_handler
00017BBB: 76 75 63 6F 6D 69 73 73 2E                             db 'vucomiss',2Eh
00017BC4: 82 D2                                                  dw avx_comiss_instruction-instruction_handler
00017BC6: 76 7A 65 72 6F 61 6C 6C 77                             db 'vzeroall',77h
00017BCF: 95 D9                                                  dw vzeroall_instruction-instruction_handler
00017BD1: 77 62 6E 6F 69 6E 76 64 09                             db 'wbnoinvd',9
00017BDA: A0 64                                                  dw simple_extended_instruction_f3-instruction_handler
00017BDC: 77 72 66 73 62 61 73 65 02                             db 'wrfsbase',2
00017BE5: C2 B6                                                  dw rdfsbase_instruction-instruction_handler
00017BE7: 77 72 67 73 62 61 73 65 03                             db 'wrgsbase',3
00017BF0: C2 B6                                                  dw rdfsbase_instruction-instruction_handler
00017BF2: 78 61 63 71 75 69 72 65 F2                             db 'xacquire',0F2h
00017BFB: A6 64                                                  dw prefix_instruction-instruction_handler
00017BFD: 78 72 65 6C 65 61 73 65 F3                             db 'xrelease',0F3h
00017C06: A6 64                                                  dw prefix_instruction-instruction_handler
00017C08: 78 72 73 74 6F 72 36 34 05                             db 'xrstor64',101b
00017C11: 0A AE                                                  dw fxsave_instruction_64bit-instruction_handler
00017C13: 78 73 61 76 65 63 36 34 04                             db 'xsavec64',4
00017C1C: 01 AE                                                  dw xsaves_instruction_64bit-instruction_handler
00017C1E: 78 73 61 76 65 6F 70 74 06                             db 'xsaveopt',110b
00017C27: 0F AE                                                  dw fxsave_instruction-instruction_handler
00017C29: 78 73 61 76 65 73 36 34 05                             db 'xsaves64',5
00017C32: 01 AE                                                  dw xsaves_instruction_64bit-instruction_handler
                                                                instructions_9:
00017C34: 63 6D 70 78 63 68 67 38 62 08                          db 'cmpxchg8b',8
00017C3E: 40 96                                                  dw cmpxchgx_instruction-instruction_handler
00017C40: 63 76 74 74 70 64 32 64 71 E6                          db 'cvttpd2dq',0E6h
00017C4A: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00017C4C: 63 76 74 74 70 64 32 70 69 2C                          db 'cvttpd2pi',2Ch
00017C56: 13 A8                                                  dw cvtpd2pi_instruction-instruction_handler
00017C58: 63 76 74 74 70 73 32 64 71 5B                          db 'cvttps2dq',5Bh
00017C62: 2C A3                                                  dw movshdup_instruction-instruction_handler
00017C64: 63 76 74 74 70 73 32 70 69 2C                          db 'cvttps2pi',2Ch
00017C6E: 0A A8                                                  dw cvtps2pi_instruction-instruction_handler
00017C70: 63 76 74 74 73 64 32 73 69 2C                          db 'cvttsd2si',2Ch
00017C7A: 66 A8                                                  dw cvtsd2si_instruction-instruction_handler
00017C7C: 63 76 74 74 73 73 32 73 69 2C                          db 'cvttss2si',2Ch
00017C86: 56 A8                                                  dw cvtss2si_instruction-instruction_handler
00017C88: 65 78 74 72 61 63 74 70 73 17                          db 'extractps',17h
00017C92: 1D AA                                                  dw extractps_instruction-instruction_handler
00017C94: 66 78 72 73 74 6F 72 36 34 01                          db 'fxrstor64',1
00017C9E: 0A AE                                                  dw fxsave_instruction_64bit-instruction_handler
00017CA0: 67 66 32 70 38 6D 75 6C 62 CF                          db 'gf2p8mulb',0CFh
00017CAA: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
00017CAC: 6D 6F 76 64 69 72 36 34 62 F8                          db 'movdir64b',0F8h
00017CB6: 42 BB                                                  dw movdir64b_instruction-instruction_handler
00017CB8: 70 63 6C 6D 75 6C 71 64 71 FF                          db 'pclmulqdq',-1
00017CC2: 12 AA                                                  dw pclmulqdq_instruction-instruction_handler
00017CC4: 70 63 6D 70 65 73 74 72 69 61                          db 'pcmpestri',61h
00017CCE: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00017CD0: 70 63 6D 70 65 73 74 72 6D 60                          db 'pcmpestrm',60h
00017CDA: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00017CDC: 70 63 6D 70 69 73 74 72 69 63                          db 'pcmpistri',63h
00017CE6: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00017CE8: 70 63 6D 70 69 73 74 72 6D 62                          db 'pcmpistrm',62h
00017CF2: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00017CF4: 70 6D 61 64 64 75 62 73 77 04                          db 'pmaddubsw',4
00017CFE: A8 A8                                                  dw ssse3_instruction-instruction_handler
00017D00: 70 72 65 66 65 74 63 68 77 01                          db 'prefetchw',1
00017D0A: A3 AE                                                  dw amd_prefetch_instruction-instruction_handler
00017D0C: 70 75 6E 70 63 6B 68 62 77 68                          db 'punpckhbw',68h
00017D16: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00017D18: 70 75 6E 70 63 6B 68 64 71 6A                          db 'punpckhdq',6Ah
00017D22: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00017D24: 70 75 6E 70 63 6B 68 77 64 69                          db 'punpckhwd',69h
00017D2E: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00017D30: 70 75 6E 70 63 6B 6C 62 77 60                          db 'punpcklbw',60h
00017D3A: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00017D3C: 70 75 6E 70 63 6B 6C 64 71 62                          db 'punpckldq',62h
00017D46: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00017D48: 70 75 6E 70 63 6B 6C 77 64 61                          db 'punpcklwd',61h
00017D52: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00017D54: 70 76 61 6C 69 64 61 74 65 FF                          db 'pvalidate',0FFh
00017D5E: 44 95                                                  dw simple_instruction_f2_0f_01-instruction_handler
00017D60: 72 6D 70 61 64 6A 75 73 74 FE                          db 'rmpadjust',0FEh
00017D6A: 4A 95                                                  dw simple_instruction_f3_0f_01-instruction_handler
00017D6C: 72 6D 70 75 70 64 61 74 65 FE                          db 'rmpupdate',0FEh
00017D76: 44 95                                                  dw simple_instruction_f2_0f_01-instruction_handler
00017D78: 73 68 61 31 6E 65 78 74 65 C8                          db 'sha1nexte',0C8h
00017D82: BC A9                                                  dw sse4_instruction_38-instruction_handler
00017D84: 73 68 61 31 72 6E 64 73 34 CC                          db 'sha1rnds4',0CCh
00017D8E: 07 AA                                                  dw sse4_instruction_3a_imm8-instruction_handler
00017D90: 75 73 65 61 76 78 32 35 36 00                          db 'useavx256',0
00017D9A: C6 F1                                                  dw set_evex_mode-instruction_handler
00017D9C: 75 73 65 61 76 78 35 31 32 01                          db 'useavx512',1
00017DA6: C6 F1                                                  dw set_evex_mode-instruction_handler
00017DA8: 76 61 64 64 73 75 62 70 64 D0                          db 'vaddsubpd',0D0h
00017DB2: 56 C8                                                  dw avx_pd_instruction_noevex-instruction_handler
00017DB4: 76 61 64 64 73 75 62 70 73 D0                          db 'vaddsubps',0D0h
00017DBE: 68 C8                                                  dw avx_ps_instruction_noevex-instruction_handler
00017DC0: 76 62 6C 65 6E 64 6D 70 64 65                          db 'vblendmpd',65h
00017DCA: 99 C6                                                  dw avx_pd_instruction_38_evex-instruction_handler
00017DCC: 76 62 6C 65 6E 64 6D 70 73 65                          db 'vblendmps',65h
00017DD6: F9 C6                                                  dw avx_ps_instruction_66_38_evex-instruction_handler
00017DD8: 76 62 6C 65 6E 64 76 70 64 4B                          db 'vblendvpd',4Bh
00017DE2: 45 D3                                                  dw avx_triple_source_instruction_3a_noevex-instruction_handler
00017DE4: 76 62 6C 65 6E 64 76 70 73 4A                          db 'vblendvps',4Ah
00017DEE: 45 D3                                                  dw avx_triple_source_instruction_3a_noevex-instruction_handler
00017DF0: 76 63 6D 70 6E 65 71 70 64 04                          db 'vcmpneqpd',4
00017DFA: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017DFC: 76 63 6D 70 6E 65 71 70 73 04                          db 'vcmpneqps',4
00017E06: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00017E08: 76 63 6D 70 6E 65 71 73 64 04                          db 'vcmpneqsd',4
00017E12: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00017E14: 76 63 6D 70 6E 65 71 73 73 04                          db 'vcmpneqss',4
00017E1E: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017E20: 76 63 6D 70 6E 67 65 70 64 09                          db 'vcmpngepd',9
00017E2A: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017E2C: 76 63 6D 70 6E 67 65 70 73 09                          db 'vcmpngeps',9
00017E36: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00017E38: 76 63 6D 70 6E 67 65 73 64 09                          db 'vcmpngesd',9
00017E42: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00017E44: 76 63 6D 70 6E 67 65 73 73 09                          db 'vcmpngess',9
00017E4E: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017E50: 76 63 6D 70 6E 67 74 70 64 0A                          db 'vcmpngtpd',0Ah
00017E5A: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017E5C: 76 63 6D 70 6E 67 74 70 73 0A                          db 'vcmpngtps',0Ah
00017E66: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00017E68: 76 63 6D 70 6E 67 74 73 64 0A                          db 'vcmpngtsd',0Ah
00017E72: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00017E74: 76 63 6D 70 6E 67 74 73 73 0A                          db 'vcmpngtss',0Ah
00017E7E: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017E80: 76 63 6D 70 6E 6C 65 70 64 06                          db 'vcmpnlepd',6
00017E8A: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017E8C: 76 63 6D 70 6E 6C 65 70 73 06                          db 'vcmpnleps',6
00017E96: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00017E98: 76 63 6D 70 6E 6C 65 73 64 06                          db 'vcmpnlesd',6
00017EA2: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00017EA4: 76 63 6D 70 6E 6C 65 73 73 06                          db 'vcmpnless',6
00017EAE: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017EB0: 76 63 6D 70 6E 6C 74 70 64 05                          db 'vcmpnltpd',5
00017EBA: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017EBC: 76 63 6D 70 6E 6C 74 70 73 05                          db 'vcmpnltps',5
00017EC6: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00017EC8: 76 63 6D 70 6E 6C 74 73 64 05                          db 'vcmpnltsd',5
00017ED2: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00017ED4: 76 63 6D 70 6E 6C 74 73 73 05                          db 'vcmpnltss',5
00017EDE: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017EE0: 76 63 6D 70 6F 72 64 70 64 07                          db 'vcmpordpd',7
00017EEA: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017EEC: 76 63 6D 70 6F 72 64 70 73 07                          db 'vcmpordps',7
00017EF6: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00017EF8: 76 63 6D 70 6F 72 64 73 64 07                          db 'vcmpordsd',7
00017F02: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00017F04: 76 63 6D 70 6F 72 64 73 73 07                          db 'vcmpordss',7
00017F0E: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017F10: 76 63 76 74 64 71 32 70 64 E6                          db 'vcvtdq2pd',0E6h
00017F1A: B8 E3                                                  dw avx_cvtdq2pd_instruction-instruction_handler
00017F1C: 76 63 76 74 64 71 32 70 73 5B                          db 'vcvtdq2ps',5Bh
00017F26: C0 C6                                                  dw avx_single_source_ps_instruction_er-instruction_handler
00017F28: 76 63 76 74 70 64 32 64 71 E6                          db 'vcvtpd2dq',0E6h
00017F32: 80 E4                                                  dw avx_cvtpd2dq_instruction-instruction_handler
00017F34: 76 63 76 74 70 64 32 70 73 5A                          db 'vcvtpd2ps',5Ah
00017F3E: AE E4                                                  dw avx_cvtpd2ps_instruction-instruction_handler
00017F40: 76 63 76 74 70 64 32 71 71 7B                          db 'vcvtpd2qq',7Bh
00017F4A: 4B C6                                                  dw avx_single_source_pd_instruction_er_evex-instruction_handler
00017F4C: 76 63 76 74 70 68 32 70 73 13                          db 'vcvtph2ps',13h
00017F56: 93 E5                                                  dw avx_cvtph2ps_instruction-instruction_handler
00017F58: 76 63 76 74 70 73 32 64 71 5B                          db 'vcvtps2dq',5Bh
00017F62: A9 C6                                                  dw avx_cvtps2dq_instruction-instruction_handler
00017F64: 76 63 76 74 70 73 32 70 64 5A                          db 'vcvtps2pd',5Ah
00017F6E: E3 E3                                                  dw avx_cvtps2pd_instruction-instruction_handler
00017F70: 76 63 76 74 70 73 32 70 68 1D                          db 'vcvtps2ph',1Dh
00017F7A: AF E5                                                  dw avx_cvtps2ph_instruction-instruction_handler
00017F7C: 76 63 76 74 70 73 32 71 71 7B                          db 'vcvtps2qq',7Bh
00017F86: C3 E3                                                  dw avx_cvtps2qq_instruction-instruction_handler
00017F88: 76 63 76 74 71 71 32 70 64 E6                          db 'vcvtqq2pd',0E6h
00017F92: C1 D2                                                  dw avx_cvtqq2pd_instruction-instruction_handler
00017F94: 76 63 76 74 71 71 32 70 73 5B                          db 'vcvtqq2ps',5Bh
00017F9E: 97 E4                                                  dw avx_cvtpd2udq_instruction-instruction_handler
00017FA0: 76 63 76 74 73 64 32 73 69 2D                          db 'vcvtsd2si',2Dh
00017FAA: 5F E6                                                  dw avx_cvtsd2si_instruction-instruction_handler
00017FAC: 76 63 76 74 73 64 32 73 73 5A                          db 'vcvtsd2ss',5Ah
00017FB6: 10 C7                                                  dw avx_sd_instruction_er-instruction_handler
00017FB8: 76 63 76 74 73 69 32 73 64 2A                          db 'vcvtsi2sd',2Ah
00017FC2: 0E E7                                                  dw avx_cvtsi2sd_instruction-instruction_handler
00017FC4: 76 63 76 74 73 69 32 73 73 2A                          db 'vcvtsi2ss',2Ah
00017FCE: 1B E7                                                  dw avx_cvtsi2ss_instruction-instruction_handler
00017FD0: 76 63 76 74 73 73 32 73 64 5A                          db 'vcvtss2sd',5Ah
00017FDA: 3A C7                                                  dw avx_ss_instruction_sae-instruction_handler
00017FDC: 76 63 76 74 73 73 32 73 69 2D                          db 'vcvtss2si',2Dh
00017FE6: 7C E6                                                  dw avx_cvtss2si_instruction-instruction_handler
00017FE8: 76 64 62 70 73 61 64 62 77 42                          db 'vdbpsadbw',42h
00017FF2: 14 C8                                                  dw avx_bw_instruction_3a_imm8_evex-instruction_handler
00017FF4: 76 65 78 70 61 6E 64 70 64 88                          db 'vexpandpd',88h
00017FFE: 58 C7                                                  dw avx_single_source_q_instruction_38_evex-instruction_handler
00018000: 76 65 78 70 61 6E 64 70 73 88                          db 'vexpandps',88h
0001800A: BB C7                                                  dw avx_single_source_d_instruction_38_evex-instruction_handler
0001800C: 76 66 6E 6D 61 64 64 70 64 79                          db 'vfnmaddpd',79h
00018016: F4 D4                                                  dw fma4_instruction_p-instruction_handler
00018018: 76 66 6E 6D 61 64 64 70 73 78                          db 'vfnmaddps',78h
00018022: F4 D4                                                  dw fma4_instruction_p-instruction_handler
00018024: 76 66 6E 6D 61 64 64 73 64 7B                          db 'vfnmaddsd',7Bh
0001802E: F8 D4                                                  dw fma4_instruction_sd-instruction_handler
00018030: 76 66 6E 6D 61 64 64 73 73 7A                          db 'vfnmaddss',7Ah
0001803A: FC D4                                                  dw fma4_instruction_ss-instruction_handler
0001803C: 76 66 6E 6D 73 75 62 70 64 7D                          db 'vfnmsubpd',7Dh
00018046: F4 D4                                                  dw fma4_instruction_p-instruction_handler
00018048: 76 66 6E 6D 73 75 62 70 73 7C                          db 'vfnmsubps',7Ch
00018052: F4 D4                                                  dw fma4_instruction_p-instruction_handler
00018054: 76 66 6E 6D 73 75 62 73 64 7F                          db 'vfnmsubsd',7Fh
0001805E: F8 D4                                                  dw fma4_instruction_sd-instruction_handler
00018060: 76 66 6E 6D 73 75 62 73 73 7E                          db 'vfnmsubss',7Eh
0001806A: FC D4                                                  dw fma4_instruction_ss-instruction_handler
0001806C: 76 67 65 74 65 78 70 70 64 42                          db 'vgetexppd',42h
00018076: 16 D4                                                  dw avx512_single_source_pd_instruction_sae-instruction_handler
00018078: 76 67 65 74 65 78 70 70 73 42                          db 'vgetexpps',42h
00018082: 3A D4                                                  dw avx512_single_source_ps_instruction_sae-instruction_handler
00018084: 76 67 65 74 65 78 70 73 64 43                          db 'vgetexpsd',43h
0001808E: 55 D4                                                  dw avx512_sd_instruction_sae-instruction_handler
00018090: 76 67 65 74 65 78 70 73 73 43                          db 'vgetexpss',43h
0001809A: 70 D4                                                  dw avx512_ss_instruction_sae-instruction_handler
0001809C: 76 69 6E 73 65 72 74 70 73 21                          db 'vinsertps',21h
000180A6: 1A E3                                                  dw avx_insertps_instruction-instruction_handler
000180A8: 76 6D 6F 76 64 71 61 33 32 6F                          db 'vmovdqa32',6Fh
000180B2: B9 CC                                                  dw avx512_movdqa32_instruction-instruction_handler
000180B4: 76 6D 6F 76 64 71 61 36 34 6F                          db 'vmovdqa64',6Fh
000180BE: B2 CC                                                  dw avx512_movdqa64_instruction-instruction_handler
000180C0: 76 6D 6F 76 64 71 75 31 36 6F                          db 'vmovdqu16',6Fh
000180CA: 9C CC                                                  dw avx512_movdqu16_instruction-instruction_handler
000180CC: 76 6D 6F 76 64 71 75 33 32 6F                          db 'vmovdqu32',6Fh
000180D6: AE CC                                                  dw avx512_movdqu32_instruction-instruction_handler
000180D8: 76 6D 6F 76 64 71 75 36 34 6F                          db 'vmovdqu64',6Fh
000180E2: A7 CC                                                  dw avx512_movdqu64_instruction-instruction_handler
000180E4: 76 6D 6F 76 6D 73 6B 70 64 00                          db 'vmovmskpd',0
000180EE: 93 E8                                                  dw avx_movmskpd_instruction-instruction_handler
000180F0: 76 6D 6F 76 6D 73 6B 70 73 00                          db 'vmovmskps',0
000180FA: 9A E8                                                  dw avx_movmskps_instruction-instruction_handler
000180FC: 76 6D 6F 76 6E 74 64 71 61 2A                          db 'vmovntdqa',2Ah
00018106: 2B CE                                                  dw avx_movntdqa_instruction-instruction_handler
00018108: 76 6D 6F 76 73 68 64 75 70 16                          db 'vmovshdup',16h
00018112: AC D2                                                  dw avx_movshdup_instruction-instruction_handler
00018114: 76 6D 6F 76 73 6C 64 75 70 12                          db 'vmovsldup',12h
0001811E: AC D2                                                  dw avx_movshdup_instruction-instruction_handler
00018120: 76 70 34 64 70 77 73 73 64 52                          db 'vp4dpwssd',52h
0001812A: 2E F1                                                  dw avx512_4vnniw_instruction-instruction_handler
0001812C: 76 70 61 63 6B 73 73 64 77 6B                          db 'vpackssdw',6Bh
00018136: 09 C8                                                  dw avx_d_instruction-instruction_handler
00018138: 76 70 61 63 6B 73 73 77 62 63                          db 'vpacksswb',63h
00018142: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00018144: 76 70 61 63 6B 75 73 64 77 2B                          db 'vpackusdw',2Bh
0001814E: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00018150: 76 70 61 63 6B 75 73 77 62 67                          db 'vpackuswb',67h
0001815A: 39 C8                                                  dw avx_bw_instruction-instruction_handler
0001815C: 76 70 62 6C 65 6E 64 6D 62 66                          db 'vpblendmb',66h
00018166: 4D C8                                                  dw avx_bw_instruction_38_evex-instruction_handler
00018168: 76 70 62 6C 65 6E 64 6D 64 64                          db 'vpblendmd',64h
00018172: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
00018174: 76 70 62 6C 65 6E 64 6D 71 64                          db 'vpblendmq',64h
0001817E: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00018180: 76 70 62 6C 65 6E 64 6D 77 66                          db 'vpblendmw',66h
0001818A: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
0001818C: 76 70 62 6C 65 6E 64 76 62 4C                          db 'vpblendvb',4Ch
00018196: 45 D3                                                  dw avx_triple_source_instruction_3a_noevex-instruction_handler
00018198: 76 70 63 6D 70 6C 65 75 62 02                          db 'vpcmpleub',2
000181A2: AB D5                                                  dw avx512_cmp_ub_instruction-instruction_handler
000181A4: 76 70 63 6D 70 6C 65 75 64 02                          db 'vpcmpleud',2
000181AE: 8B D5                                                  dw avx512_cmp_ud_instruction-instruction_handler
000181B0: 76 70 63 6D 70 6C 65 75 71 02                          db 'vpcmpleuq',2
000181BA: 7E D5                                                  dw avx512_cmp_uq_instruction-instruction_handler
000181BC: 76 70 63 6D 70 6C 65 75 77 02                          db 'vpcmpleuw',2
000181C6: A4 D5                                                  dw avx512_cmp_uw_instruction-instruction_handler
000181C8: 76 70 63 6D 70 6C 74 75 62 01                          db 'vpcmpltub',1
000181D2: AB D5                                                  dw avx512_cmp_ub_instruction-instruction_handler
000181D4: 76 70 63 6D 70 6C 74 75 64 01                          db 'vpcmpltud',1
000181DE: 8B D5                                                  dw avx512_cmp_ud_instruction-instruction_handler
000181E0: 76 70 63 6D 70 6C 74 75 71 01                          db 'vpcmpltuq',1
000181EA: 7E D5                                                  dw avx512_cmp_uq_instruction-instruction_handler
000181EC: 76 70 63 6D 70 6C 74 75 77 01                          db 'vpcmpltuw',1
000181F6: A4 D5                                                  dw avx512_cmp_uw_instruction-instruction_handler
000181F8: 76 70 63 6D 70 6E 65 71 62 04                          db 'vpcmpneqb',4
00018202: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
00018204: 76 70 63 6D 70 6E 65 71 64 04                          db 'vpcmpneqd',4
0001820E: 9E D5                                                  dw avx512_cmp_d_instruction-instruction_handler
00018210: 76 70 63 6D 70 6E 65 71 71 04                          db 'vpcmpneqq',4
0001821A: 91 D5                                                  dw avx512_cmp_q_instruction-instruction_handler
0001821C: 76 70 63 6D 70 6E 65 71 77 04                          db 'vpcmpneqw',4
00018226: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
00018228: 76 70 63 6D 70 6E 6C 65 62 06                          db 'vpcmpnleb',6
00018232: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
00018234: 76 70 63 6D 70 6E 6C 65 64 06                          db 'vpcmpnled',6
0001823E: 9E D5                                                  dw avx512_cmp_d_instruction-instruction_handler
00018240: 76 70 63 6D 70 6E 6C 65 71 06                          db 'vpcmpnleq',6
0001824A: 91 D5                                                  dw avx512_cmp_q_instruction-instruction_handler
0001824C: 76 70 63 6D 70 6E 6C 65 77 06                          db 'vpcmpnlew',6
00018256: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
00018258: 76 70 63 6D 70 6E 6C 74 62 05                          db 'vpcmpnltb',5
00018262: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
00018264: 76 70 63 6D 70 6E 6C 74 64 05                          db 'vpcmpnltd',5
0001826E: 9E D5                                                  dw avx512_cmp_d_instruction-instruction_handler
00018270: 76 70 63 6D 70 6E 6C 74 71 05                          db 'vpcmpnltq',5
0001827A: 91 D5                                                  dw avx512_cmp_q_instruction-instruction_handler
0001827C: 76 70 63 6D 70 6E 6C 74 77 05                          db 'vpcmpnltw',5
00018286: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
00018288: 76 70 63 6F 6D 65 71 75 62 04                          db 'vpcomequb',4
00018292: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
00018294: 76 70 63 6F 6D 65 71 75 64 04                          db 'vpcomequd',4
0001829E: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
000182A0: 76 70 63 6F 6D 65 71 75 71 04                          db 'vpcomequq',4
000182AA: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
000182AC: 76 70 63 6F 6D 65 71 75 77 04                          db 'vpcomequw',4
000182B6: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
000182B8: 76 70 63 6F 6D 67 65 75 62 03                          db 'vpcomgeub',3
000182C2: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
000182C4: 76 70 63 6F 6D 67 65 75 64 03                          db 'vpcomgeud',3
000182CE: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
000182D0: 76 70 63 6F 6D 67 65 75 71 03                          db 'vpcomgeuq',3
000182DA: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
000182DC: 76 70 63 6F 6D 67 65 75 77 03                          db 'vpcomgeuw',3
000182E6: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
000182E8: 76 70 63 6F 6D 67 74 75 62 02                          db 'vpcomgtub',2
000182F2: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
000182F4: 76 70 63 6F 6D 67 74 75 64 02                          db 'vpcomgtud',2
000182FE: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
00018300: 76 70 63 6F 6D 67 74 75 71 02                          db 'vpcomgtuq',2
0001830A: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
0001830C: 76 70 63 6F 6D 67 74 75 77 02                          db 'vpcomgtuw',2
00018316: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
00018318: 76 70 63 6F 6D 6C 65 75 62 01                          db 'vpcomleub',1
00018322: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
00018324: 76 70 63 6F 6D 6C 65 75 64 01                          db 'vpcomleud',1
0001832E: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
00018330: 76 70 63 6F 6D 6C 65 75 71 01                          db 'vpcomleuq',1
0001833A: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
0001833C: 76 70 63 6F 6D 6C 65 75 77 01                          db 'vpcomleuw',1
00018346: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
00018348: 76 70 63 6F 6D 6C 74 75 62 00                          db 'vpcomltub',0
00018352: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
00018354: 76 70 63 6F 6D 6C 74 75 64 00                          db 'vpcomltud',0
0001835E: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
00018360: 76 70 63 6F 6D 6C 74 75 71 00                          db 'vpcomltuq',0
0001836A: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
0001836C: 76 70 63 6F 6D 6C 74 75 77 00                          db 'vpcomltuw',0
00018376: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
00018378: 76 70 63 6F 6D 6E 65 71 62 05                          db 'vpcomneqb',5
00018382: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
00018384: 76 70 63 6F 6D 6E 65 71 64 05                          db 'vpcomneqd',5
0001838E: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
00018390: 76 70 63 6F 6D 6E 65 71 71 05                          db 'vpcomneqq',5
0001839A: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
0001839C: 76 70 63 6F 6D 6E 65 71 77 05                          db 'vpcomneqw',5
000183A6: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
000183A8: 76 70 64 70 62 75 73 64 73 51                          db 'vpdpbusds',51h
000183B2: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
000183B4: 76 70 64 70 77 73 73 64 73 53                          db 'vpdpwssds',53h
000183BE: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
000183C0: 76 70 65 72 6D 69 32 70 64 77                          db 'vpermi2pd',77h
000183CA: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
000183CC: 76 70 65 72 6D 69 32 70 73 77                          db 'vpermi2ps',77h
000183D6: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
000183D8: 76 70 65 72 6D 69 6C 70 64 05                          db 'vpermilpd',5
000183E2: 56 DA                                                  dw avx_permilpd_instruction-instruction_handler
000183E4: 76 70 65 72 6D 69 6C 70 73 04                          db 'vpermilps',4
000183EE: 61 DA                                                  dw avx_permilps_instruction-instruction_handler
000183F0: 76 70 65 72 6D 74 32 70 64 7F                          db 'vpermt2pd',7Fh
000183FA: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
000183FC: 76 70 65 72 6D 74 32 70 73 7F                          db 'vpermt2ps',7Fh
00018406: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
00018408: 76 70 65 78 70 61 6E 64 62 62                          db 'vpexpandb',62h
00018412: BB C7                                                  dw avx_single_source_d_instruction_38_evex-instruction_handler
00018414: 76 70 65 78 70 61 6E 64 64 89                          db 'vpexpandd',89h
0001841E: BB C7                                                  dw avx_single_source_d_instruction_38_evex-instruction_handler
00018420: 76 70 65 78 70 61 6E 64 71 89                          db 'vpexpandq',89h
0001842A: 58 C7                                                  dw avx_single_source_q_instruction_38_evex-instruction_handler
0001842C: 76 70 65 78 70 61 6E 64 77 62                          db 'vpexpandw',62h
00018436: 58 C7                                                  dw avx_single_source_q_instruction_38_evex-instruction_handler
00018438: 76 70 68 61 64 64 75 62 64 D2                          db 'vphaddubd',0D2h
00018442: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
00018444: 76 70 68 61 64 64 75 62 71 D3                          db 'vphaddubq',0D3h
0001844E: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
00018450: 76 70 68 61 64 64 75 62 77 D1                          db 'vphaddubw',0D1h
0001845A: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
0001845C: 76 70 68 61 64 64 75 64 71 DB                          db 'vphaddudq',0DBh
00018466: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
00018468: 76 70 68 61 64 64 75 77 64 D6                          db 'vphadduwd',0D6h
00018472: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
00018474: 76 70 68 61 64 64 75 77 71 D7                          db 'vphadduwq',0D7h
0001847E: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
00018480: 76 70 6D 61 63 73 64 71 68 9F                          db 'vpmacsdqh',9Fh
0001848A: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
0001848C: 76 70 6D 61 63 73 64 71 6C 97                          db 'vpmacsdql',97h
00018496: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
00018498: 76 70 6D 61 63 73 73 64 64 8E                          db 'vpmacssdd',8Eh
000184A2: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
000184A4: 76 70 6D 61 63 73 73 77 64 86                          db 'vpmacsswd',86h
000184AE: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
000184B0: 76 70 6D 61 63 73 73 77 77 85                          db 'vpmacssww',85h
000184BA: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
000184BC: 76 70 6D 61 64 63 73 77 64 B6                          db 'vpmadcswd',0B6h
000184C6: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
000184C8: 76 70 6D 6F 76 6D 73 6B 62 D7                          db 'vpmovmskb',0D7h
000184D2: 0B E9                                                  dw avx_pmovmskb_instruction-instruction_handler
000184D4: 76 70 6D 6F 76 73 78 62 64 21                          db 'vpmovsxbd',21h
000184DE: 51 DD                                                  dw avx_pmovsxbd_instruction-instruction_handler
000184E0: 76 70 6D 6F 76 73 78 62 71 22                          db 'vpmovsxbq',22h
000184EA: 4D DD                                                  dw avx_pmovsxbq_instruction-instruction_handler
000184EC: 76 70 6D 6F 76 73 78 62 77 20                          db 'vpmovsxbw',20h
000184F6: 55 DD                                                  dw avx_pmovsxbw_instruction-instruction_handler
000184F8: 76 70 6D 6F 76 73 78 64 71 25                          db 'vpmovsxdq',25h
00018502: 55 DD                                                  dw avx_pmovsxbw_instruction-instruction_handler
00018504: 76 70 6D 6F 76 73 78 77 64 23                          db 'vpmovsxwd',23h
0001850E: 55 DD                                                  dw avx_pmovsxbw_instruction-instruction_handler
00018510: 76 70 6D 6F 76 73 78 77 71 24                          db 'vpmovsxwq',24h
0001851A: 51 DD                                                  dw avx_pmovsxbd_instruction-instruction_handler
0001851C: 76 70 6D 6F 76 75 73 64 62 11                          db 'vpmovusdb',11h
00018526: FB DD                                                  dw avx512_pmovdb_instruction-instruction_handler
00018528: 76 70 6D 6F 76 75 73 64 77 13                          db 'vpmovusdw',13h
00018532: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
00018534: 76 70 6D 6F 76 75 73 71 62 12                          db 'vpmovusqb',12h
0001853E: F7 DD                                                  dw avx512_pmovqb_instruction-instruction_handler
00018540: 76 70 6D 6F 76 75 73 71 64 15                          db 'vpmovusqd',15h
0001854A: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
0001854C: 76 70 6D 6F 76 75 73 71 77 14                          db 'vpmovusqw',14h
00018556: FB DD                                                  dw avx512_pmovdb_instruction-instruction_handler
00018558: 76 70 6D 6F 76 75 73 77 62 10                          db 'vpmovuswb',10h
00018562: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
00018564: 76 70 6D 6F 76 7A 78 62 64 31                          db 'vpmovzxbd',31h
0001856E: 51 DD                                                  dw avx_pmovsxbd_instruction-instruction_handler
00018570: 76 70 6D 6F 76 7A 78 62 71 32                          db 'vpmovzxbq',32h
0001857A: 4D DD                                                  dw avx_pmovsxbq_instruction-instruction_handler
0001857C: 76 70 6D 6F 76 7A 78 62 77 30                          db 'vpmovzxbw',30h
00018586: 55 DD                                                  dw avx_pmovsxbw_instruction-instruction_handler
00018588: 76 70 6D 6F 76 7A 78 64 71 35                          db 'vpmovzxdq',35h
00018592: 55 DD                                                  dw avx_pmovsxbw_instruction-instruction_handler
00018594: 76 70 6D 6F 76 7A 78 77 64 33                          db 'vpmovzxwd',33h
0001859E: 55 DD                                                  dw avx_pmovsxbw_instruction-instruction_handler
000185A0: 76 70 6D 6F 76 7A 78 77 71 34                          db 'vpmovzxwq',34h
000185AA: 51 DD                                                  dw avx_pmovsxbd_instruction-instruction_handler
000185AC: 76 70 6D 75 6C 68 72 73 77 0B                          db 'vpmulhrsw',0Bh
000185B6: 32 C8                                                  dw avx_bw_instruction_38-instruction_handler
000185B8: 76 70 74 65 73 74 6E 6D 62 26                          db 'vptestnmb',26h
000185C2: A9 D6                                                  dw avx512_ptestnmb_instruction-instruction_handler
000185C4: 76 70 74 65 73 74 6E 6D 64 27                          db 'vptestnmd',27h
000185CE: 93 D6                                                  dw avx512_ptestnmd_instruction-instruction_handler
000185D0: 76 70 74 65 73 74 6E 6D 71 27                          db 'vptestnmq',27h
000185DA: 97 D6                                                  dw avx512_ptestnmq_instruction-instruction_handler
000185DC: 76 70 74 65 73 74 6E 6D 77 26                          db 'vptestnmw',26h
000185E6: A2 D6                                                  dw avx512_ptestnmw_instruction-instruction_handler
000185E8: 76 72 65 64 75 63 65 70 64 56                          db 'vreducepd',56h
000185F2: B3 D3                                                  dw avx512_single_source_pd_instruction_sae_imm8-instruction_handler
000185F4: 76 72 65 64 75 63 65 70 73 56                          db 'vreduceps',56h
000185FE: C7 D3                                                  dw avx512_single_source_ps_instruction_sae_imm8-instruction_handler
00018600: 76 72 65 64 75 63 65 73 64 57                          db 'vreducesd',57h
0001860A: D4 D3                                                  dw avx512_sd_instruction_sae_imm8-instruction_handler
0001860C: 76 72 65 64 75 63 65 73 73 57                          db 'vreducess',57h
00018616: E1 D3                                                  dw avx512_ss_instruction_sae_imm8-instruction_handler
00018618: 76 73 63 61 6C 65 66 70 64 2C                          db 'vscalefpd',2Ch
00018622: 0D D4                                                  dw avx512_pd_instruction_er-instruction_handler
00018624: 76 73 63 61 6C 65 66 70 73 2C                          db 'vscalefps',2Ch
0001862E: 31 D4                                                  dw avx512_ps_instruction_er-instruction_handler
00018630: 76 73 63 61 6C 65 66 73 64 2D                          db 'vscalefsd',2Dh
0001863A: 4E D4                                                  dw avx512_sd_instruction_er-instruction_handler
0001863C: 76 73 63 61 6C 65 66 73 73 2D                          db 'vscalefss',2Dh
00018646: 69 D4                                                  dw avx512_ss_instruction_er-instruction_handler
00018648: 76 75 6E 70 63 6B 68 70 64 15                          db 'vunpckhpd',15h
00018652: 82 C6                                                  dw avx_pd_instruction-instruction_handler
00018654: 76 75 6E 70 63 6B 68 70 73 15                          db 'vunpckhps',15h
0001865E: F0 C6                                                  dw avx_ps_instruction-instruction_handler
00018660: 76 75 6E 70 63 6B 6C 70 64 14                          db 'vunpcklpd',14h
0001866A: 82 C6                                                  dw avx_pd_instruction-instruction_handler
0001866C: 76 75 6E 70 63 6B 6C 70 73 14                          db 'vunpcklps',14h
00018676: F0 C6                                                  dw avx_ps_instruction-instruction_handler
00018678: 78 72 73 74 6F 72 73 36 34 03                          db 'xrstors64',3
00018682: 01 AE                                                  dw xsaves_instruction_64bit-instruction_handler
                                                                instructions_10:
00018684: 61 65 73 64 65 63 6C 61 73 74 DF                       db 'aesdeclast',0DFh
0001868F: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
00018691: 61 65 73 65 6E 63 6C 61 73 74 DD                       db 'aesenclast',0DDh
0001869C: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
0001869E: 63 6C 66 6C 75 73 68 6F 70 74 07                       db 'clflushopt',7
000186A9: AC AE                                                  dw clflushopt_instruction-instruction_handler
000186AB: 63 6D 70 75 6E 6F 72 64 70 64 03                       db 'cmpunordpd',3
000186B6: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
000186B8: 63 6D 70 75 6E 6F 72 64 70 73 03                       db 'cmpunordps',3
000186C3: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
000186C5: 63 6D 70 75 6E 6F 72 64 73 64 03                       db 'cmpunordsd',3
000186D0: DC A2                                                  dw cmp_sd_instruction-instruction_handler
000186D2: 63 6D 70 75 6E 6F 72 64 73 73 03                       db 'cmpunordss',3
000186DD: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
000186DF: 63 6D 70 78 63 68 67 31 36 62 10                       db 'cmpxchg16b',16
000186EA: 40 96                                                  dw cmpxchgx_instruction-instruction_handler
000186EC: 6C 6F 61 64 61 6C 6C 32 38 36 05                       db 'loadall286',5
000186F7: 95 64                                                  dw simple_extended_instruction-instruction_handler
000186F9: 6C 6F 61 64 61 6C 6C 33 38 36 07                       db 'loadall386',7
00018704: 95 64                                                  dw simple_extended_instruction-instruction_handler
00018706: 6D 61 73 6B 6D 6F 76 64 71 75 00                       db 'maskmovdqu',0
00018711: 28 A6                                                  dw maskmovdqu_instruction-instruction_handler
00018713: 70 68 6D 69 6E 70 6F 73 75 77 41                       db 'phminposuw',41h
0001871E: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
00018720: 70 72 65 66 65 74 63 68 74 30 01                       db 'prefetcht0',1
0001872B: 6B AE                                                  dw prefetch_instruction-instruction_handler
0001872D: 70 72 65 66 65 74 63 68 74 31 02                       db 'prefetcht1',2
00018738: 6B AE                                                  dw prefetch_instruction-instruction_handler
0001873A: 70 72 65 66 65 74 63 68 74 32 03                       db 'prefetcht2',3
00018745: 6B AE                                                  dw prefetch_instruction-instruction_handler
00018747: 70 75 6E 70 63 6B 68 71 64 71 6D                       db 'punpckhqdq',6Dh
00018752: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00018754: 70 75 6E 70 63 6B 6C 71 64 71 6C                       db 'punpcklqdq',6Ch
0001875F: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00018761: 73 68 61 32 35 36 6D 73 67 31 CC                       db 'sha256msg1',0CCh
0001876C: BC A9                                                  dw sse4_instruction_38-instruction_handler
0001876E: 73 68 61 32 35 36 6D 73 67 32 CD                       db 'sha256msg2',0CDh
00018779: BC A9                                                  dw sse4_instruction_38-instruction_handler
0001877B: 76 63 6D 70 74 72 75 65 70 64 0F                       db 'vcmptruepd',0Fh
00018786: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018788: 76 63 6D 70 74 72 75 65 70 73 0F                       db 'vcmptrueps',0Fh
00018793: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018795: 76 63 6D 70 74 72 75 65 73 64 0F                       db 'vcmptruesd',0Fh
000187A0: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
000187A2: 76 63 6D 70 74 72 75 65 73 73 0F                       db 'vcmptruess',0Fh
000187AD: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
000187AF: 76 63 76 74 70 64 32 75 64 71 79                       db 'vcvtpd2udq',79h
000187BA: 97 E4                                                  dw avx_cvtpd2udq_instruction-instruction_handler
000187BC: 76 63 76 74 70 64 32 75 71 71 79                       db 'vcvtpd2uqq',79h
000187C7: 4B C6                                                  dw avx_single_source_pd_instruction_er_evex-instruction_handler
000187C9: 76 63 76 74 70 73 32 75 64 71 79                       db 'vcvtps2udq',79h
000187D4: B9 C6                                                  dw avx_single_source_ps_instruction_er_evex-instruction_handler
000187D6: 76 63 76 74 70 73 32 75 71 71 79                       db 'vcvtps2uqq',79h
000187E1: C3 E3                                                  dw avx_cvtps2qq_instruction-instruction_handler
000187E3: 76 63 76 74 73 64 32 75 73 69 79                       db 'vcvtsd2usi',79h
000187EE: 4F E6                                                  dw avx_cvtsd2usi_instruction-instruction_handler
000187F0: 76 63 76 74 73 73 32 75 73 69 79                       db 'vcvtss2usi',79h
000187FB: 6C E6                                                  dw avx_cvtss2usi_instruction-instruction_handler
000187FD: 76 63 76 74 74 70 64 32 64 71 E6                       db 'vcvttpd2dq',0E6h
00018808: B5 E4                                                  dw avx_cvttpd2dq_instruction-instruction_handler
0001880A: 76 63 76 74 74 70 64 32 71 71 7A                       db 'vcvttpd2qq',7Ah
00018815: 5B C6                                                  dw avx_single_source_pd_instruction_sae_evex-instruction_handler
00018817: 76 63 76 74 74 70 73 32 64 71 5B                       db 'vcvttps2dq',5Bh
00018822: 7C E5                                                  dw avx_cvttps2dq_instruction-instruction_handler
00018824: 76 63 76 74 74 70 73 32 71 71 7A                       db 'vcvttps2qq',7Ah
0001882F: CA E3                                                  dw avx_cvttps2qq_instruction-instruction_handler
00018831: 76 63 76 74 74 73 64 32 73 69 2C                       db 'vcvttsd2si',2Ch
0001883C: 66 E6                                                  dw avx_cvttsd2si_instruction-instruction_handler
0001883E: 76 63 76 74 74 73 73 32 73 69 2C                       db 'vcvttss2si',2Ch
00018849: 83 E6                                                  dw avx_cvttss2si_instruction-instruction_handler
0001884B: 76 63 76 74 75 64 71 32 70 64 7A                       db 'vcvtudq2pd',7Ah
00018856: B1 E3                                                  dw avx_cvtudq2pd_instruction-instruction_handler
00018858: 76 63 76 74 75 64 71 32 70 73 7A                       db 'vcvtudq2ps',7Ah
00018863: B2 C6                                                  dw avx_cvtudq2ps_instruction-instruction_handler
00018865: 76 63 76 74 75 71 71 32 70 64 7A                       db 'vcvtuqq2pd',7Ah
00018870: C1 D2                                                  dw avx_cvtqq2pd_instruction-instruction_handler
00018872: 76 63 76 74 75 71 71 32 70 73 7A                       db 'vcvtuqq2ps',7Ah
0001887D: 90 E4                                                  dw avx_cvtuqq2ps_instruction-instruction_handler
0001887F: 76 63 76 74 75 73 69 32 73 64 7B                       db 'vcvtusi2sd',7Bh
0001888A: 07 E7                                                  dw avx_cvtusi2sd_instruction-instruction_handler
0001888C: 76 63 76 74 75 73 69 32 73 73 7B                       db 'vcvtusi2ss',7Bh
00018897: 14 E7                                                  dw avx_cvtusi2ss_instruction-instruction_handler
00018899: 76 65 78 74 72 61 63 74 70 73 17                       db 'vextractps',17h
000188A4: 20 E2                                                  dw avx_extract_d_instruction-instruction_handler
000188A6: 76 66 70 63 6C 61 73 73 70 64 66                       db 'vfpclasspd',66h
000188B1: 46 D6                                                  dw avx512_fpclasspd_instruction-instruction_handler
000188B3: 76 66 70 63 6C 61 73 73 70 73 66                       db 'vfpclassps',66h
000188BE: 53 D6                                                  dw avx512_fpclassps_instruction-instruction_handler
000188C0: 76 66 70 63 6C 61 73 73 73 64 67                       db 'vfpclasssd',67h
000188CB: 59 D6                                                  dw avx512_fpclasssd_instruction-instruction_handler
000188CD: 76 66 70 63 6C 61 73 73 73 73 67                       db 'vfpclassss',67h
000188D8: 66 D6                                                  dw avx512_fpclassss_instruction-instruction_handler
000188DA: 76 67 61 74 68 65 72 64 70 64 92                       db 'vgatherdpd',92h
000188E5: 75 E9                                                  dw gather_pd_instruction-instruction_handler
000188E7: 76 67 61 74 68 65 72 64 70 73 92                       db 'vgatherdps',92h
000188F2: 7C E9                                                  dw gather_ps_instruction-instruction_handler
000188F4: 76 67 61 74 68 65 72 71 70 64 93                       db 'vgatherqpd',93h
000188FF: 75 E9                                                  dw gather_pd_instruction-instruction_handler
00018901: 76 67 61 74 68 65 72 71 70 73 93                       db 'vgatherqps',93h
0001890C: 7C E9                                                  dw gather_ps_instruction-instruction_handler
0001890E: 76 67 65 74 6D 61 6E 74 70 64 26                       db 'vgetmantpd',26h
00018919: B3 D3                                                  dw avx512_single_source_pd_instruction_sae_imm8-instruction_handler
0001891B: 76 67 65 74 6D 61 6E 74 70 73 26                       db 'vgetmantps',26h
00018926: C7 D3                                                  dw avx512_single_source_ps_instruction_sae_imm8-instruction_handler
00018928: 76 67 65 74 6D 61 6E 74 73 64 27                       db 'vgetmantsd',27h
00018933: D4 D3                                                  dw avx512_sd_instruction_sae_imm8-instruction_handler
00018935: 76 67 65 74 6D 61 6E 74 73 73 27                       db 'vgetmantss',27h
00018940: E1 D3                                                  dw avx512_ss_instruction_sae_imm8-instruction_handler
00018942: 76 67 66 32 70 38 6D 75 6C 62 CF                       db 'vgf2p8mulb',0CFh
0001894D: 32 C8                                                  dw avx_bw_instruction_38-instruction_handler
0001894F: 76 6D 61 73 6B 6D 6F 76 70 64 2D                       db 'vmaskmovpd',2Dh
0001895A: F8 E7                                                  dw avx_maskmov_instruction-instruction_handler
0001895C: 76 6D 61 73 6B 6D 6F 76 70 73 2C                       db 'vmaskmovps',2Ch
00018967: F8 E7                                                  dw avx_maskmov_instruction-instruction_handler
00018969: 76 70 34 64 70 77 73 73 64 73 53                       db 'vp4dpwssds',53h
00018974: 2E F1                                                  dw avx512_4vnniw_instruction-instruction_handler
00018976: 76 70 63 6C 6D 75 6C 71 64 71 FF                       db 'vpclmulqdq',-1
00018981: 8C D3                                                  dw avx_pclmulqdq_instruction-instruction_handler
00018983: 76 70 63 6D 70 65 73 74 72 69 61                       db 'vpcmpestri',61h
0001898E: 3A D3                                                  dw avx_single_source_128bit_instruction_3a_imm8_noevex-instruction_handler
00018990: 76 70 63 6D 70 65 73 74 72 6D 60                       db 'vpcmpestrm',60h
0001899B: 3A D3                                                  dw avx_single_source_128bit_instruction_3a_imm8_noevex-instruction_handler
0001899D: 76 70 63 6D 70 69 73 74 72 69 63                       db 'vpcmpistri',63h
000189A8: 3A D3                                                  dw avx_single_source_128bit_instruction_3a_imm8_noevex-instruction_handler
000189AA: 76 70 63 6D 70 69 73 74 72 6D 62                       db 'vpcmpistrm',62h
000189B5: 3A D3                                                  dw avx_single_source_128bit_instruction_3a_imm8_noevex-instruction_handler
000189B7: 76 70 63 6D 70 6E 65 71 75 62 04                       db 'vpcmpnequb',4
000189C2: AB D5                                                  dw avx512_cmp_ub_instruction-instruction_handler
000189C4: 76 70 63 6D 70 6E 65 71 75 64 04                       db 'vpcmpnequd',4
000189CF: 8B D5                                                  dw avx512_cmp_ud_instruction-instruction_handler
000189D1: 76 70 63 6D 70 6E 65 71 75 71 04                       db 'vpcmpnequq',4
000189DC: 7E D5                                                  dw avx512_cmp_uq_instruction-instruction_handler
000189DE: 76 70 63 6D 70 6E 65 71 75 77 04                       db 'vpcmpnequw',4
000189E9: A4 D5                                                  dw avx512_cmp_uw_instruction-instruction_handler
000189EB: 76 70 63 6D 70 6E 6C 65 75 62 06                       db 'vpcmpnleub',6
000189F6: AB D5                                                  dw avx512_cmp_ub_instruction-instruction_handler
000189F8: 76 70 63 6D 70 6E 6C 65 75 64 06                       db 'vpcmpnleud',6
00018A03: 8B D5                                                  dw avx512_cmp_ud_instruction-instruction_handler
00018A05: 76 70 63 6D 70 6E 6C 65 75 71 06                       db 'vpcmpnleuq',6
00018A10: 7E D5                                                  dw avx512_cmp_uq_instruction-instruction_handler
00018A12: 76 70 63 6D 70 6E 6C 65 75 77 06                       db 'vpcmpnleuw',6
00018A1D: A4 D5                                                  dw avx512_cmp_uw_instruction-instruction_handler
00018A1F: 76 70 63 6D 70 6E 6C 74 75 62 05                       db 'vpcmpnltub',5
00018A2A: AB D5                                                  dw avx512_cmp_ub_instruction-instruction_handler
00018A2C: 76 70 63 6D 70 6E 6C 74 75 64 05                       db 'vpcmpnltud',5
00018A37: 8B D5                                                  dw avx512_cmp_ud_instruction-instruction_handler
00018A39: 76 70 63 6D 70 6E 6C 74 75 71 05                       db 'vpcmpnltuq',5
00018A44: 7E D5                                                  dw avx512_cmp_uq_instruction-instruction_handler
00018A46: 76 70 63 6D 70 6E 6C 74 75 77 05                       db 'vpcmpnltuw',5
00018A51: A4 D5                                                  dw avx512_cmp_uw_instruction-instruction_handler
00018A53: 76 70 63 6F 6D 6E 65 71 75 62 05                       db 'vpcomnequb',5
00018A5E: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
00018A60: 76 70 63 6F 6D 6E 65 71 75 64 05                       db 'vpcomnequd',5
00018A6B: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
00018A6D: 76 70 63 6F 6D 6E 65 71 75 71 05                       db 'vpcomnequq',5
00018A78: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
00018A7A: 76 70 63 6F 6D 6E 65 71 75 77 05                       db 'vpcomnequw',5
00018A85: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
00018A87: 76 70 63 6F 6D 74 72 75 65 62 07                       db 'vpcomtrueb',7
00018A92: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
00018A94: 76 70 63 6F 6D 74 72 75 65 64 07                       db 'vpcomtrued',7
00018A9F: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
00018AA1: 76 70 63 6F 6D 74 72 75 65 71 07                       db 'vpcomtrueq',7
00018AAC: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
00018AAE: 76 70 63 6F 6D 74 72 75 65 77 07                       db 'vpcomtruew',7
00018AB9: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
00018ABB: 76 70 65 72 6D 32 66 31 32 38 06                       db 'vperm2f128',6
00018AC6: C5 D9                                                  dw avx_perm2f128_instruction-instruction_handler
00018AC8: 76 70 65 72 6D 32 69 31 32 38 46                       db 'vperm2i128',46h
00018AD3: C5 D9                                                  dw avx_perm2f128_instruction-instruction_handler
00018AD5: 76 70 65 72 6D 69 6C 32 70 64 49                       db 'vpermil2pd',49h
00018AE0: 20 DB                                                  dw vpermil2_instruction-instruction_handler
00018AE2: 76 70 65 72 6D 69 6C 32 70 73 48                       db 'vpermil2ps',48h
00018AED: 20 DB                                                  dw vpermil2_instruction-instruction_handler
00018AEF: 76 70 67 61 74 68 65 72 64 64 90                       db 'vpgatherdd',90h
00018AFA: 7C E9                                                  dw gather_ps_instruction-instruction_handler
00018AFC: 76 70 67 61 74 68 65 72 64 71 90                       db 'vpgatherdq',90h
00018B07: 75 E9                                                  dw gather_pd_instruction-instruction_handler
00018B09: 76 70 67 61 74 68 65 72 71 64 91                       db 'vpgatherqd',91h
00018B14: 7C E9                                                  dw gather_ps_instruction-instruction_handler
00018B16: 76 70 67 61 74 68 65 72 71 71 91                       db 'vpgatherqq',91h
00018B21: 75 E9                                                  dw gather_pd_instruction-instruction_handler
00018B23: 76 70 6D 61 63 73 73 64 71 68 8F                       db 'vpmacssdqh',8Fh
00018B2E: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
00018B30: 76 70 6D 61 63 73 73 64 71 6C 87                       db 'vpmacssdql',87h
00018B3B: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
00018B3D: 76 70 6D 61 64 63 73 73 77 64 A6                       db 'vpmadcsswd',0A6h
00018B48: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
00018B4A: 76 70 6D 61 64 64 75 62 73 77 04                       db 'vpmaddubsw',4
00018B55: 32 C8                                                  dw avx_bw_instruction_38-instruction_handler
00018B57: 76 70 6D 61 73 6B 6D 6F 76 64 8C                       db 'vpmaskmovd',8Ch
00018B62: F8 E7                                                  dw avx_maskmov_instruction-instruction_handler
00018B64: 76 70 6D 61 73 6B 6D 6F 76 71 8C                       db 'vpmaskmovq',8Ch
00018B6F: F1 E7                                                  dw avx_maskmov_w1_instruction-instruction_handler
00018B71: 76 70 74 65 72 6E 6C 6F 67 64 25                       db 'vpternlogd',25h
00018B7C: DB C7                                                  dw avx_d_instruction_3a_imm8_evex-instruction_handler
00018B7E: 76 70 74 65 72 6E 6C 6F 67 71 25                       db 'vpternlogq',25h
00018B89: 88 C7                                                  dw avx_q_instruction_3a_imm8_evex-instruction_handler
00018B8B: 76 70 75 6E 70 63 6B 68 62 77 68                       db 'vpunpckhbw',68h
00018B96: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00018B98: 76 70 75 6E 70 63 6B 68 64 71 6A                       db 'vpunpckhdq',6Ah
00018BA3: 09 C8                                                  dw avx_d_instruction-instruction_handler
00018BA5: 76 70 75 6E 70 63 6B 68 77 64 69                       db 'vpunpckhwd',69h
00018BB0: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00018BB2: 76 70 75 6E 70 63 6B 6C 62 77 60                       db 'vpunpcklbw',60h
00018BBD: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00018BBF: 76 70 75 6E 70 63 6B 6C 64 71 62                       db 'vpunpckldq',62h
00018BCA: 09 C8                                                  dw avx_d_instruction-instruction_handler
00018BCC: 76 70 75 6E 70 63 6B 6C 77 64 61                       db 'vpunpcklwd',61h
00018BD7: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00018BD9: 76 72 73 71 72 74 31 34 70 64 4E                       db 'vrsqrt14pd',4Eh
00018BE4: 1D D4                                                  dw avx512_single_source_pd_instruction-instruction_handler
00018BE6: 76 72 73 71 72 74 31 34 70 73 4E                       db 'vrsqrt14ps',4Eh
00018BF1: 41 D4                                                  dw avx512_single_source_ps_instruction-instruction_handler
00018BF3: 76 72 73 71 72 74 31 34 73 64 4F                       db 'vrsqrt14sd',4Fh
00018BFE: 5C D4                                                  dw avx512_sd_instruction-instruction_handler
00018C00: 76 72 73 71 72 74 31 34 73 73 4F                       db 'vrsqrt14ss',4Fh
00018C0B: 77 D4                                                  dw avx512_ss_instruction-instruction_handler
00018C0D: 76 72 73 71 72 74 32 38 70 64 CC                       db 'vrsqrt28pd',0CCh
00018C18: 95 D4                                                  dw avx512_exp2pd_instruction-instruction_handler
00018C1A: 76 72 73 71 72 74 32 38 70 73 CC                       db 'vrsqrt28ps',0CCh
00018C25: A9 D4                                                  dw avx512_exp2ps_instruction-instruction_handler
00018C27: 76 72 73 71 72 74 32 38 73 64 CD                       db 'vrsqrt28sd',0CDh
00018C32: 55 D4                                                  dw avx512_sd_instruction_sae-instruction_handler
00018C34: 76 72 73 71 72 74 32 38 73 73 CD                       db 'vrsqrt28ss',0CDh
00018C3F: 70 D4                                                  dw avx512_ss_instruction_sae-instruction_handler
00018C41: 76 73 68 75 66 66 33 32 78 34 23                       db 'vshuff32x4',23h
00018C4C: EB D9                                                  dw avx512_shuf_d_instruction-instruction_handler
00018C4E: 76 73 68 75 66 66 36 34 78 32 23                       db 'vshuff64x2',23h
00018C59: D9 D9                                                  dw avx512_shuf_q_instruction-instruction_handler
00018C5B: 76 73 68 75 66 69 33 32 78 34 43                       db 'vshufi32x4',43h
00018C66: EB D9                                                  dw avx512_shuf_d_instruction-instruction_handler
00018C68: 76 73 68 75 66 69 36 34 78 32 43                       db 'vshufi64x2',43h
00018C73: D9 D9                                                  dw avx512_shuf_q_instruction-instruction_handler
00018C75: 76 7A 65 72 6F 75 70 70 65 72 77                       db 'vzeroupper',77h
00018C80: 9C D9                                                  dw vzeroupper_instruction-instruction_handler
00018C82: 78 73 61 76 65 6F 70 74 36 34 06                       db 'xsaveopt64',110b
00018C8D: 0A AE                                                  dw fxsave_instruction_64bit-instruction_handler
                                                                instructions_11:
00018C8F: 70 63 6C 6D 75 6C 68 71 68 64 71 11                    db 'pclmulhqhdq',10001b
00018C9B: 12 AA                                                  dw pclmulqdq_instruction-instruction_handler
00018C9D: 70 63 6C 6D 75 6C 6C 71 68 64 71 10                    db 'pclmullqhdq',10000b
00018CA9: 12 AA                                                  dw pclmulqdq_instruction-instruction_handler
00018CAB: 70 72 65 66 65 74 63 68 6E 74 61 00                    db 'prefetchnta',0
00018CB7: 6B AE                                                  dw prefetch_instruction-instruction_handler
00018CB9: 70 72 65 66 65 74 63 68 77 74 31 02                    db 'prefetchwt1',2
00018CC5: A3 AE                                                  dw amd_prefetch_instruction-instruction_handler
00018CC7: 73 61 76 65 70 72 65 76 73 73 70 EA                    db 'saveprevssp',0EAh
00018CD3: B3 BB                                                  dw setssbsy_instruction-instruction_handler
00018CD5: 73 68 61 32 35 36 72 6E 64 73 32 CB                    db 'sha256rnds2',0CBh
00018CE1: A5 A9                                                  dw sse4_instruction_38_xmm0-instruction_handler
00018CE3: 76 61 65 73 64 65 63 6C 61 73 74 DF                    db 'vaesdeclast',0DFh
00018CEF: A5 D3                                                  dw avx_instruction_38_nomask-instruction_handler
00018CF1: 76 61 65 73 65 6E 63 6C 61 73 74 DD                    db 'vaesenclast',0DDh
00018CFD: A5 D3                                                  dw avx_instruction_38_nomask-instruction_handler
00018CFF: 76 63 6D 70 65 71 5F 6F 73 70 64 10                    db 'vcmpeq_ospd',10h
00018D0B: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018D0D: 76 63 6D 70 65 71 5F 6F 73 70 73 10                    db 'vcmpeq_osps',10h
00018D19: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018D1B: 76 63 6D 70 65 71 5F 6F 73 73 64 10                    db 'vcmpeq_ossd',10h
00018D27: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018D29: 76 63 6D 70 65 71 5F 6F 73 73 73 10                    db 'vcmpeq_osss',10h
00018D35: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018D37: 76 63 6D 70 65 71 5F 75 71 70 64 08                    db 'vcmpeq_uqpd',8
00018D43: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018D45: 76 63 6D 70 65 71 5F 75 71 70 73 08                    db 'vcmpeq_uqps',8
00018D51: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018D53: 76 63 6D 70 65 71 5F 75 71 73 64 08                    db 'vcmpeq_uqsd',8
00018D5F: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018D61: 76 63 6D 70 65 71 5F 75 71 73 73 08                    db 'vcmpeq_uqss',8
00018D6D: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018D6F: 76 63 6D 70 65 71 5F 75 73 70 64 18                    db 'vcmpeq_uspd',18h
00018D7B: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018D7D: 76 63 6D 70 65 71 5F 75 73 70 73 18                    db 'vcmpeq_usps',18h
00018D89: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018D8B: 76 63 6D 70 65 71 5F 75 73 73 64 18                    db 'vcmpeq_ussd',18h
00018D97: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018D99: 76 63 6D 70 65 71 5F 75 73 73 73 18                    db 'vcmpeq_usss',18h
00018DA5: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018DA7: 76 63 6D 70 66 61 6C 73 65 70 64 0B                    db 'vcmpfalsepd',0Bh
00018DB3: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018DB5: 76 63 6D 70 66 61 6C 73 65 70 73 0B                    db 'vcmpfalseps',0Bh
00018DC1: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018DC3: 76 63 6D 70 66 61 6C 73 65 73 64 0B                    db 'vcmpfalsesd',0Bh
00018DCF: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018DD1: 76 63 6D 70 66 61 6C 73 65 73 73 0B                    db 'vcmpfalsess',0Bh
00018DDD: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018DDF: 76 63 6D 70 67 65 5F 6F 71 70 64 1D                    db 'vcmpge_oqpd',1Dh
00018DEB: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018DED: 76 63 6D 70 67 65 5F 6F 71 70 73 1D                    db 'vcmpge_oqps',1Dh
00018DF9: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018DFB: 76 63 6D 70 67 65 5F 6F 71 73 64 1D                    db 'vcmpge_oqsd',1Dh
00018E07: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018E09: 76 63 6D 70 67 65 5F 6F 71 73 73 1D                    db 'vcmpge_oqss',1Dh
00018E15: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018E17: 76 63 6D 70 67 74 5F 6F 71 70 64 1E                    db 'vcmpgt_oqpd',1Eh
00018E23: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018E25: 76 63 6D 70 67 74 5F 6F 71 70 73 1E                    db 'vcmpgt_oqps',1Eh
00018E31: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018E33: 76 63 6D 70 67 74 5F 6F 71 73 64 1E                    db 'vcmpgt_oqsd',1Eh
00018E3F: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018E41: 76 63 6D 70 67 74 5F 6F 71 73 73 1E                    db 'vcmpgt_oqss',1Eh
00018E4D: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018E4F: 76 63 6D 70 6C 65 5F 6F 71 70 64 12                    db 'vcmple_oqpd',12h
00018E5B: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018E5D: 76 63 6D 70 6C 65 5F 6F 71 70 73 12                    db 'vcmple_oqps',12h
00018E69: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018E6B: 76 63 6D 70 6C 65 5F 6F 71 73 64 12                    db 'vcmple_oqsd',12h
00018E77: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018E79: 76 63 6D 70 6C 65 5F 6F 71 73 73 12                    db 'vcmple_oqss',12h
00018E85: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018E87: 76 63 6D 70 6C 74 5F 6F 71 70 64 11                    db 'vcmplt_oqpd',11h
00018E93: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018E95: 76 63 6D 70 6C 74 5F 6F 71 70 73 11                    db 'vcmplt_oqps',11h
00018EA1: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018EA3: 76 63 6D 70 6C 74 5F 6F 71 73 64 11                    db 'vcmplt_oqsd',11h
00018EAF: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018EB1: 76 63 6D 70 6C 74 5F 6F 71 73 73 11                    db 'vcmplt_oqss',11h
00018EBD: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018EBF: 76 63 6D 70 6F 72 64 5F 73 70 64 17                    db 'vcmpord_spd',17h
00018ECB: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018ECD: 76 63 6D 70 6F 72 64 5F 73 70 73 17                    db 'vcmpord_sps',17h
00018ED9: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018EDB: 76 63 6D 70 6F 72 64 5F 73 73 64 17                    db 'vcmpord_ssd',17h
00018EE7: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018EE9: 76 63 6D 70 6F 72 64 5F 73 73 73 17                    db 'vcmpord_sss',17h
00018EF5: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018EF7: 76 63 6D 70 75 6E 6F 72 64 70 64 03                    db 'vcmpunordpd',3
00018F03: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018F05: 76 63 6D 70 75 6E 6F 72 64 70 73 03                    db 'vcmpunordps',3
00018F11: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018F13: 76 63 6D 70 75 6E 6F 72 64 73 64 03                    db 'vcmpunordsd',3
00018F1F: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018F21: 76 63 6D 70 75 6E 6F 72 64 73 73 03                    db 'vcmpunordss',3
00018F2D: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018F2F: 76 63 6F 6D 70 72 65 73 73 70 64 8A                    db 'vcompresspd',8Ah
00018F3B: 8A CD                                                  dw avx_compress_q_instruction-instruction_handler
00018F3D: 76 63 6F 6D 70 72 65 73 73 70 73 8A                    db 'vcompressps',8Ah
00018F49: 91 CD                                                  dw avx_compress_d_instruction-instruction_handler
00018F4B: 76 63 76 74 74 70 64 32 75 64 71 78                    db 'vcvttpd2udq',78h
00018F57: 9E E4                                                  dw avx_cvttpd2udq_instruction-instruction_handler
00018F59: 76 63 76 74 74 70 64 32 75 71 71 78                    db 'vcvttpd2uqq',78h
00018F65: 5B C6                                                  dw avx_single_source_pd_instruction_sae_evex-instruction_handler
00018F67: 76 63 76 74 74 70 73 32 75 64 71 78                    db 'vcvttps2udq',78h
00018F73: 65 E5                                                  dw avx_cvttps2udq_instruction-instruction_handler
00018F75: 76 63 76 74 74 70 73 32 75 71 71 78                    db 'vcvttps2uqq',78h
00018F81: CA E3                                                  dw avx_cvttps2qq_instruction-instruction_handler
00018F83: 76 63 76 74 74 73 64 32 75 73 69 78                    db 'vcvttsd2usi',78h
00018F8F: 56 E6                                                  dw avx_cvttsd2usi_instruction-instruction_handler
00018F91: 76 63 76 74 74 73 73 32 75 73 69 78                    db 'vcvttss2usi',78h
00018F9D: 73 E6                                                  dw avx_cvttss2usi_instruction-instruction_handler
00018F9F: 76 66 69 78 75 70 69 6D 6D 70 64 54                    db 'vfixupimmpd',54h
00018FAB: BA D3                                                  dw avx512_pd_instruction_sae_imm8-instruction_handler
00018FAD: 76 66 69 78 75 70 69 6D 6D 70 73 54                    db 'vfixupimmps',54h
00018FB9: CE D3                                                  dw avx512_ps_instruction_sae_imm8-instruction_handler
00018FBB: 76 66 69 78 75 70 69 6D 6D 73 64 55                    db 'vfixupimmsd',55h
00018FC7: D4 D3                                                  dw avx512_sd_instruction_sae_imm8-instruction_handler
00018FC9: 76 66 69 78 75 70 69 6D 6D 73 73 55                    db 'vfixupimmss',55h
00018FD5: E1 D3                                                  dw avx512_ss_instruction_sae_imm8-instruction_handler
00018FD7: 76 66 6D 61 64 64 31 33 32 70 64 98                    db 'vfmadd132pd',98h
00018FE3: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00018FE5: 76 66 6D 61 64 64 31 33 32 70 73 98                    db 'vfmadd132ps',98h
00018FF1: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00018FF3: 76 66 6D 61 64 64 31 33 32 73 64 99                    db 'vfmadd132sd',99h
00018FFF: C9 D4                                                  dw fma_instruction_sd-instruction_handler
00019001: 76 66 6D 61 64 64 31 33 32 73 73 99                    db 'vfmadd132ss',99h
0001900D: D6 D4                                                  dw fma_instruction_ss-instruction_handler
0001900F: 76 66 6D 61 64 64 32 31 33 70 64 A8                    db 'vfmadd213pd',0A8h
0001901B: B6 D4                                                  dw fma_instruction_pd-instruction_handler
0001901D: 76 66 6D 61 64 64 32 31 33 70 73 A8                    db 'vfmadd213ps',0A8h
00019029: C3 D4                                                  dw fma_instruction_ps-instruction_handler
0001902B: 76 66 6D 61 64 64 32 31 33 73 64 A9                    db 'vfmadd213sd',0A9h
00019037: C9 D4                                                  dw fma_instruction_sd-instruction_handler
00019039: 76 66 6D 61 64 64 32 31 33 73 73 A9                    db 'vfmadd213ss',0A9h
00019045: D6 D4                                                  dw fma_instruction_ss-instruction_handler
00019047: 76 66 6D 61 64 64 32 33 31 70 64 B8                    db 'vfmadd231pd',0B8h
00019053: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019055: 76 66 6D 61 64 64 32 33 31 70 73 B8                    db 'vfmadd231ps',0B8h
00019061: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019063: 76 66 6D 61 64 64 32 33 31 73 64 B9                    db 'vfmadd231sd',0B9h
0001906F: C9 D4                                                  dw fma_instruction_sd-instruction_handler
00019071: 76 66 6D 61 64 64 32 33 31 73 73 B9                    db 'vfmadd231ss',0B9h
0001907D: D6 D4                                                  dw fma_instruction_ss-instruction_handler
0001907F: 76 66 6D 61 64 64 73 75 62 70 64 5D                    db 'vfmaddsubpd',5Dh
0001908B: F4 D4                                                  dw fma4_instruction_p-instruction_handler
0001908D: 76 66 6D 61 64 64 73 75 62 70 73 5C                    db 'vfmaddsubps',5Ch
00019099: F4 D4                                                  dw fma4_instruction_p-instruction_handler
0001909B: 76 66 6D 73 75 62 31 33 32 70 64 9A                    db 'vfmsub132pd',9Ah
000190A7: B6 D4                                                  dw fma_instruction_pd-instruction_handler
000190A9: 76 66 6D 73 75 62 31 33 32 70 73 9A                    db 'vfmsub132ps',9Ah
000190B5: C3 D4                                                  dw fma_instruction_ps-instruction_handler
000190B7: 76 66 6D 73 75 62 31 33 32 73 64 9B                    db 'vfmsub132sd',9Bh
000190C3: C9 D4                                                  dw fma_instruction_sd-instruction_handler
000190C5: 76 66 6D 73 75 62 31 33 32 73 73 9B                    db 'vfmsub132ss',9Bh
000190D1: D6 D4                                                  dw fma_instruction_ss-instruction_handler
000190D3: 76 66 6D 73 75 62 32 31 33 70 64 AA                    db 'vfmsub213pd',0AAh
000190DF: B6 D4                                                  dw fma_instruction_pd-instruction_handler
000190E1: 76 66 6D 73 75 62 32 31 33 70 73 AA                    db 'vfmsub213ps',0AAh
000190ED: C3 D4                                                  dw fma_instruction_ps-instruction_handler
000190EF: 76 66 6D 73 75 62 32 31 33 73 64 AB                    db 'vfmsub213sd',0ABh
000190FB: C9 D4                                                  dw fma_instruction_sd-instruction_handler
000190FD: 76 66 6D 73 75 62 32 31 33 73 73 AB                    db 'vfmsub213ss',0ABh
00019109: D6 D4                                                  dw fma_instruction_ss-instruction_handler
0001910B: 76 66 6D 73 75 62 32 33 31 70 64 BA                    db 'vfmsub231pd',0BAh
00019117: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019119: 76 66 6D 73 75 62 32 33 31 70 73 BA                    db 'vfmsub231ps',0BAh
00019125: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019127: 76 66 6D 73 75 62 32 33 31 73 64 BB                    db 'vfmsub231sd',0BBh
00019133: C9 D4                                                  dw fma_instruction_sd-instruction_handler
00019135: 76 66 6D 73 75 62 32 33 31 73 73 BB                    db 'vfmsub231ss',0BBh
00019141: D6 D4                                                  dw fma_instruction_ss-instruction_handler
00019143: 76 66 6D 73 75 62 61 64 64 70 64 5F                    db 'vfmsubaddpd',5Fh
0001914F: F4 D4                                                  dw fma4_instruction_p-instruction_handler
00019151: 76 66 6D 73 75 62 61 64 64 70 73 5E                    db 'vfmsubaddps',5Eh
0001915D: F4 D4                                                  dw fma4_instruction_p-instruction_handler
0001915F: 76 69 6E 73 65 72 74 66 31 32 38 18                    db 'vinsertf128',18h
0001916B: 7A E1                                                  dw avx_insertf128_instruction-instruction_handler
0001916D: 76 69 6E 73 65 72 74 69 31 32 38 38                    db 'vinserti128',38h
00019179: 7A E1                                                  dw avx_insertf128_instruction-instruction_handler
0001917B: 76 6D 61 73 6B 6D 6F 76 64 71 75 00                    db 'vmaskmovdqu',0
00019187: FF E8                                                  dw avx_maskmovdqu_instruction-instruction_handler
00019189: 76 70 63 6F 6D 66 61 6C 73 65 62 06                    db 'vpcomfalseb',6
00019195: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
00019197: 76 70 63 6F 6D 66 61 6C 73 65 64 06                    db 'vpcomfalsed',6
000191A3: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
000191A5: 76 70 63 6F 6D 66 61 6C 73 65 71 06                    db 'vpcomfalseq',6
000191B1: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
000191B3: 76 70 63 6F 6D 66 61 6C 73 65 77 06                    db 'vpcomfalsew',6
000191BF: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
000191C1: 76 70 63 6F 6D 70 72 65 73 73 62 63                    db 'vpcompressb',63h
000191CD: 91 CD                                                  dw avx_compress_d_instruction-instruction_handler
000191CF: 76 70 63 6F 6D 70 72 65 73 73 64 8B                    db 'vpcompressd',8Bh
000191DB: 91 CD                                                  dw avx_compress_d_instruction-instruction_handler
000191DD: 76 70 63 6F 6D 70 72 65 73 73 71 8B                    db 'vpcompressq',8Bh
000191E9: 8A CD                                                  dw avx_compress_q_instruction-instruction_handler
000191EB: 76 70 63 6F 6D 70 72 65 73 73 77 63                    db 'vpcompressw',63h
000191F7: 8A CD                                                  dw avx_compress_q_instruction-instruction_handler
000191F9: 76 70 63 6F 6D 74 72 75 65 75 62 07                    db 'vpcomtrueub',7
00019205: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
00019207: 76 70 63 6F 6D 74 72 75 65 75 64 07                    db 'vpcomtrueud',7
00019213: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
00019215: 76 70 63 6F 6D 74 72 75 65 75 71 07                    db 'vpcomtrueuq',7
00019221: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
00019223: 76 70 63 6F 6D 74 72 75 65 75 77 07                    db 'vpcomtrueuw',7
0001922F: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
00019231: 76 70 63 6F 6E 66 6C 69 63 74 64 C4                    db 'vpconflictd',0C4h
0001923D: BB C7                                                  dw avx_single_source_d_instruction_38_evex-instruction_handler
0001923F: 76 70 63 6F 6E 66 6C 69 63 74 71 C4                    db 'vpconflictq',0C4h
0001924B: 58 C7                                                  dw avx_single_source_q_instruction_38_evex-instruction_handler
0001924D: 76 70 68 6D 69 6E 70 6F 73 75 77 41                    db 'vphminposuw',41h
00019259: 0D D3                                                  dw avx_single_source_instruction_38_noevex-instruction_handler
0001925B: 76 70 6D 61 64 64 35 32 68 75 71 B5                    db 'vpmadd52huq',0B5h
00019267: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00019269: 76 70 6D 61 64 64 35 32 6C 75 71 B4                    db 'vpmadd52luq',0B4h
00019275: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00019277: 76 70 73 63 61 74 74 65 72 64 64 A0                    db 'vpscatterdd',0A0h
00019283: CD EA                                                  dw scatter_ps_instruction-instruction_handler
00019285: 76 70 73 63 61 74 74 65 72 64 71 A0                    db 'vpscatterdq',0A0h
00019291: C6 EA                                                  dw scatter_pd_instruction-instruction_handler
00019293: 76 70 73 63 61 74 74 65 72 71 64 A1                    db 'vpscatterqd',0A1h
0001929F: CD EA                                                  dw scatter_ps_instruction-instruction_handler
000192A1: 76 70 73 63 61 74 74 65 72 71 71 A1                    db 'vpscatterqq',0A1h
000192AD: C6 EA                                                  dw scatter_pd_instruction-instruction_handler
000192AF: 76 70 75 6E 70 63 6B 68 71 64 71 6D                    db 'vpunpckhqdq',6Dh
000192BB: A6 C7                                                  dw avx_q_instruction-instruction_handler
000192BD: 76 70 75 6E 70 63 6B 6C 71 64 71 6C                    db 'vpunpcklqdq',6Ch
000192C9: A6 C7                                                  dw avx_q_instruction-instruction_handler
000192CB: 76 72 6E 64 73 63 61 6C 65 70 64 09                    db 'vrndscalepd',9
000192D7: B3 D3                                                  dw avx512_single_source_pd_instruction_sae_imm8-instruction_handler
000192D9: 76 72 6E 64 73 63 61 6C 65 70 73 08                    db 'vrndscaleps',8
000192E5: C7 D3                                                  dw avx512_single_source_ps_instruction_sae_imm8-instruction_handler
000192E7: 76 72 6E 64 73 63 61 6C 65 73 64 0B                    db 'vrndscalesd',0Bh
000192F3: D4 D3                                                  dw avx512_sd_instruction_sae_imm8-instruction_handler
000192F5: 76 72 6E 64 73 63 61 6C 65 73 73 0A                    db 'vrndscaless',0Ah
00019301: E1 D3                                                  dw avx512_ss_instruction_sae_imm8-instruction_handler
00019303: 76 73 63 61 74 74 65 72 64 70 64 A2                    db 'vscatterdpd',0A2h
0001930F: C6 EA                                                  dw scatter_pd_instruction-instruction_handler
00019311: 76 73 63 61 74 74 65 72 64 70 73 A2                    db 'vscatterdps',0A2h
0001931D: CD EA                                                  dw scatter_ps_instruction-instruction_handler
0001931F: 76 73 63 61 74 74 65 72 71 70 64 A3                    db 'vscatterqpd',0A3h
0001932B: C6 EA                                                  dw scatter_pd_instruction-instruction_handler
0001932D: 76 73 63 61 74 74 65 72 71 70 73 A3                    db 'vscatterqps',0A3h
00019339: CD EA                                                  dw scatter_ps_instruction-instruction_handler
                                                                instructions_12:
0001933B: 70 63 6C 6D 75 6C 68 71 68 71 64 71 11                 db 'pclmulhqhqdq',10001b
00019348: 12 AA                                                  dw pclmulqdq_instruction-instruction_handler
0001934A: 70 63 6C 6D 75 6C 68 71 6C 71 64 71 01                 db 'pclmulhqlqdq',1
00019357: 12 AA                                                  dw pclmulqdq_instruction-instruction_handler
00019359: 70 63 6C 6D 75 6C 6C 71 68 71 64 71 10                 db 'pclmullqhqdq',10000b
00019366: 12 AA                                                  dw pclmulqdq_instruction-instruction_handler
00019368: 70 63 6C 6D 75 6C 6C 71 6C 71 64 71 00                 db 'pclmullqlqdq',0
00019375: 12 AA                                                  dw pclmulqdq_instruction-instruction_handler
00019377: 76 62 72 6F 61 64 63 61 73 74 73 64 19                 db 'vbroadcastsd',19h
00019384: F6 DE                                                  dw avx_broadcastsd_instruction-instruction_handler
00019386: 76 62 72 6F 61 64 63 61 73 74 73 73 18                 db 'vbroadcastss',18h
00019393: F2 DE                                                  dw avx_broadcastss_instruction-instruction_handler
00019395: 76 63 6D 70 6E 65 71 5F 6F 71 70 64 0C                 db 'vcmpneq_oqpd',0Ch
000193A2: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
000193A4: 76 63 6D 70 6E 65 71 5F 6F 71 70 73 0C                 db 'vcmpneq_oqps',0Ch
000193B1: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
000193B3: 76 63 6D 70 6E 65 71 5F 6F 71 73 64 0C                 db 'vcmpneq_oqsd',0Ch
000193C0: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
000193C2: 76 63 6D 70 6E 65 71 5F 6F 71 73 73 0C                 db 'vcmpneq_oqss',0Ch
000193CF: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
000193D1: 76 63 6D 70 6E 65 71 5F 6F 73 70 64 1C                 db 'vcmpneq_ospd',1Ch
000193DE: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
000193E0: 76 63 6D 70 6E 65 71 5F 6F 73 70 73 1C                 db 'vcmpneq_osps',1Ch
000193ED: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
000193EF: 76 63 6D 70 6E 65 71 5F 6F 73 73 64 1C                 db 'vcmpneq_ossd',1Ch
000193FC: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
000193FE: 76 63 6D 70 6E 65 71 5F 6F 73 73 73 1C                 db 'vcmpneq_osss',1Ch
0001940B: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
0001940D: 76 63 6D 70 6E 65 71 5F 75 73 70 64 14                 db 'vcmpneq_uspd',14h
0001941A: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
0001941C: 76 63 6D 70 6E 65 71 5F 75 73 70 73 14                 db 'vcmpneq_usps',14h
00019429: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
0001942B: 76 63 6D 70 6E 65 71 5F 75 73 73 64 14                 db 'vcmpneq_ussd',14h
00019438: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
0001943A: 76 63 6D 70 6E 65 71 5F 75 73 73 73 14                 db 'vcmpneq_usss',14h
00019447: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00019449: 76 63 6D 70 6E 67 65 5F 75 71 70 64 19                 db 'vcmpnge_uqpd',19h
00019456: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00019458: 76 63 6D 70 6E 67 65 5F 75 71 70 73 19                 db 'vcmpnge_uqps',19h
00019465: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00019467: 76 63 6D 70 6E 67 65 5F 75 71 73 64 19                 db 'vcmpnge_uqsd',19h
00019474: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00019476: 76 63 6D 70 6E 67 65 5F 75 71 73 73 19                 db 'vcmpnge_uqss',19h
00019483: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00019485: 76 63 6D 70 6E 67 74 5F 75 71 70 64 1A                 db 'vcmpngt_uqpd',1Ah
00019492: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00019494: 76 63 6D 70 6E 67 74 5F 75 71 70 73 1A                 db 'vcmpngt_uqps',1Ah
000194A1: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
000194A3: 76 63 6D 70 6E 67 74 5F 75 71 73 64 1A                 db 'vcmpngt_uqsd',1Ah
000194B0: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
000194B2: 76 63 6D 70 6E 67 74 5F 75 71 73 73 1A                 db 'vcmpngt_uqss',1Ah
000194BF: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
000194C1: 76 63 6D 70 6E 6C 65 5F 75 71 70 64 16                 db 'vcmpnle_uqpd',16h
000194CE: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
000194D0: 76 63 6D 70 6E 6C 65 5F 75 71 70 73 16                 db 'vcmpnle_uqps',16h
000194DD: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
000194DF: 76 63 6D 70 6E 6C 65 5F 75 71 73 64 16                 db 'vcmpnle_uqsd',16h
000194EC: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
000194EE: 76 63 6D 70 6E 6C 65 5F 75 71 73 73 16                 db 'vcmpnle_uqss',16h
000194FB: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
000194FD: 76 63 6D 70 6E 6C 74 5F 75 71 70 64 15                 db 'vcmpnlt_uqpd',15h
0001950A: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
0001950C: 76 63 6D 70 6E 6C 74 5F 75 71 70 73 15                 db 'vcmpnlt_uqps',15h
00019519: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
0001951B: 76 63 6D 70 6E 6C 74 5F 75 71 73 64 15                 db 'vcmpnlt_uqsd',15h
00019528: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
0001952A: 76 63 6D 70 6E 6C 74 5F 75 71 73 73 15                 db 'vcmpnlt_uqss',15h
00019537: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00019539: 76 65 78 74 72 61 63 74 66 31 32 38 19                 db 'vextractf128',19h
00019546: A6 E0                                                  dw avx_extractf128_instruction-instruction_handler
00019548: 76 65 78 74 72 61 63 74 69 31 32 38 39                 db 'vextracti128',39h
00019555: A6 E0                                                  dw avx_extractf128_instruction-instruction_handler
00019557: 76 66 6E 6D 61 64 64 31 33 32 70 64 9C                 db 'vfnmadd132pd',9Ch
00019564: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019566: 76 66 6E 6D 61 64 64 31 33 32 70 73 9C                 db 'vfnmadd132ps',9Ch
00019573: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019575: 76 66 6E 6D 61 64 64 31 33 32 73 64 9D                 db 'vfnmadd132sd',9Dh
00019582: C9 D4                                                  dw fma_instruction_sd-instruction_handler
00019584: 76 66 6E 6D 61 64 64 31 33 32 73 73 9D                 db 'vfnmadd132ss',9Dh
00019591: D6 D4                                                  dw fma_instruction_ss-instruction_handler
00019593: 76 66 6E 6D 61 64 64 32 31 33 70 64 AC                 db 'vfnmadd213pd',0ACh
000195A0: B6 D4                                                  dw fma_instruction_pd-instruction_handler
000195A2: 76 66 6E 6D 61 64 64 32 31 33 70 73 AC                 db 'vfnmadd213ps',0ACh
000195AF: C3 D4                                                  dw fma_instruction_ps-instruction_handler
000195B1: 76 66 6E 6D 61 64 64 32 31 33 73 64 AD                 db 'vfnmadd213sd',0ADh
000195BE: C9 D4                                                  dw fma_instruction_sd-instruction_handler
000195C0: 76 66 6E 6D 61 64 64 32 31 33 73 73 AD                 db 'vfnmadd213ss',0ADh
000195CD: D6 D4                                                  dw fma_instruction_ss-instruction_handler
000195CF: 76 66 6E 6D 61 64 64 32 33 31 70 64 BC                 db 'vfnmadd231pd',0BCh
000195DC: B6 D4                                                  dw fma_instruction_pd-instruction_handler
000195DE: 76 66 6E 6D 61 64 64 32 33 31 70 73 BC                 db 'vfnmadd231ps',0BCh
000195EB: C3 D4                                                  dw fma_instruction_ps-instruction_handler
000195ED: 76 66 6E 6D 61 64 64 32 33 31 73 64 BD                 db 'vfnmadd231sd',0BDh
000195FA: C9 D4                                                  dw fma_instruction_sd-instruction_handler
000195FC: 76 66 6E 6D 61 64 64 32 33 31 73 73 BD                 db 'vfnmadd231ss',0BDh
00019609: D6 D4                                                  dw fma_instruction_ss-instruction_handler
0001960B: 76 66 6E 6D 73 75 62 31 33 32 70 64 9E                 db 'vfnmsub132pd',9Eh
00019618: B6 D4                                                  dw fma_instruction_pd-instruction_handler
0001961A: 76 66 6E 6D 73 75 62 31 33 32 70 73 9E                 db 'vfnmsub132ps',9Eh
00019627: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019629: 76 66 6E 6D 73 75 62 31 33 32 73 64 9F                 db 'vfnmsub132sd',9Fh
00019636: C9 D4                                                  dw fma_instruction_sd-instruction_handler
00019638: 76 66 6E 6D 73 75 62 31 33 32 73 73 9F                 db 'vfnmsub132ss',9Fh
00019645: D6 D4                                                  dw fma_instruction_ss-instruction_handler
00019647: 76 66 6E 6D 73 75 62 32 31 33 70 64 AE                 db 'vfnmsub213pd',0AEh
00019654: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019656: 76 66 6E 6D 73 75 62 32 31 33 70 73 AE                 db 'vfnmsub213ps',0AEh
00019663: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019665: 76 66 6E 6D 73 75 62 32 31 33 73 64 AF                 db 'vfnmsub213sd',0AFh
00019672: C9 D4                                                  dw fma_instruction_sd-instruction_handler
00019674: 76 66 6E 6D 73 75 62 32 31 33 73 73 AF                 db 'vfnmsub213ss',0AFh
00019681: D6 D4                                                  dw fma_instruction_ss-instruction_handler
00019683: 76 66 6E 6D 73 75 62 32 33 31 70 64 BE                 db 'vfnmsub231pd',0BEh
00019690: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019692: 76 66 6E 6D 73 75 62 32 33 31 70 73 BE                 db 'vfnmsub231ps',0BEh
0001969F: C3 D4                                                  dw fma_instruction_ps-instruction_handler
000196A1: 76 66 6E 6D 73 75 62 32 33 31 73 64 BF                 db 'vfnmsub231sd',0BFh
000196AE: C9 D4                                                  dw fma_instruction_sd-instruction_handler
000196B0: 76 66 6E 6D 73 75 62 32 33 31 73 73 BF                 db 'vfnmsub231ss',0BFh
000196BD: D6 D4                                                  dw fma_instruction_ss-instruction_handler
000196BF: 76 69 6E 73 65 72 74 66 33 32 78 34 18                 db 'vinsertf32x4',18h
000196CC: 6F E1                                                  dw avx512_insert_32x4_instruction-instruction_handler
000196CE: 76 69 6E 73 65 72 74 66 33 32 78 38 1A                 db 'vinsertf32x8',1Ah
000196DB: 5D E1                                                  dw avx512_insert_32x8_instruction-instruction_handler
000196DD: 76 69 6E 73 65 72 74 66 36 34 78 32 18                 db 'vinsertf64x2',18h
000196EA: 68 E1                                                  dw avx512_insert_64x2_instruction-instruction_handler
000196EC: 76 69 6E 73 65 72 74 66 36 34 78 34 1A                 db 'vinsertf64x4',1Ah
000196F9: 56 E1                                                  dw avx512_insert_64x4_instruction-instruction_handler
000196FB: 76 69 6E 73 65 72 74 69 33 32 78 34 38                 db 'vinserti32x4',38h
00019708: 6F E1                                                  dw avx512_insert_32x4_instruction-instruction_handler
0001970A: 76 69 6E 73 65 72 74 69 33 32 78 38 3A                 db 'vinserti32x8',3Ah
00019717: 5D E1                                                  dw avx512_insert_32x8_instruction-instruction_handler
00019719: 76 69 6E 73 65 72 74 69 36 34 78 32 38                 db 'vinserti64x2',38h
00019726: 68 E1                                                  dw avx512_insert_64x2_instruction-instruction_handler
00019728: 76 69 6E 73 65 72 74 69 36 34 78 34 3A                 db 'vinserti64x4',3Ah
00019735: 56 E1                                                  dw avx512_insert_64x4_instruction-instruction_handler
00019737: 76 70 62 72 6F 61 64 63 61 73 74 62 78                 db 'vpbroadcastb',78h
00019744: 01 DF                                                  dw avx_pbroadcastb_instruction-instruction_handler
00019746: 76 70 62 72 6F 61 64 63 61 73 74 64 58                 db 'vpbroadcastd',58h
00019753: 09 DF                                                  dw avx_pbroadcastd_instruction-instruction_handler
00019755: 76 70 62 72 6F 61 64 63 61 73 74 71 59                 db 'vpbroadcastq',59h
00019762: 0D DF                                                  dw avx_pbroadcastq_instruction-instruction_handler
00019764: 76 70 62 72 6F 61 64 63 61 73 74 77 79                 db 'vpbroadcastw',79h
00019771: 05 DF                                                  dw avx_pbroadcastw_instruction-instruction_handler
00019773: 76 70 63 6C 6D 75 6C 68 71 68 64 71 11                 db 'vpclmulhqhdq',10001b
00019780: 8C D3                                                  dw avx_pclmulqdq_instruction-instruction_handler
00019782: 76 70 63 6C 6D 75 6C 6C 71 68 64 71 10                 db 'vpclmullqhdq',10000b
0001978F: 8C D3                                                  dw avx_pclmulqdq_instruction-instruction_handler
00019791: 76 70 63 6F 6D 66 61 6C 73 65 75 62 06                 db 'vpcomfalseub',6
0001979E: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
000197A0: 76 70 63 6F 6D 66 61 6C 73 65 75 64 06                 db 'vpcomfalseud',6
000197AD: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
000197AF: 76 70 63 6F 6D 66 61 6C 73 65 75 71 06                 db 'vpcomfalseuq',6
000197BC: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
000197BE: 76 70 63 6F 6D 66 61 6C 73 65 75 77 06                 db 'vpcomfalseuw',6
000197CB: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
000197CD: 76 70 65 72 6D 69 6C 6D 6F 32 70 64 02                 db 'vpermilmo2pd',10b
000197DA: 00 DB                                                  dw vpermil_2pd_instruction-instruction_handler
000197DC: 76 70 65 72 6D 69 6C 6D 6F 32 70 73 02                 db 'vpermilmo2ps',10b
000197E9: 10 DB                                                  dw vpermil_2ps_instruction-instruction_handler
000197EB: 76 70 65 72 6D 69 6C 6D 7A 32 70 64 03                 db 'vpermilmz2pd',11b
000197F8: 00 DB                                                  dw vpermil_2pd_instruction-instruction_handler
000197FA: 76 70 65 72 6D 69 6C 6D 7A 32 70 73 03                 db 'vpermilmz2ps',11b
00019807: 10 DB                                                  dw vpermil_2ps_instruction-instruction_handler
00019809: 76 70 65 72 6D 69 6C 74 64 32 70 64 00                 db 'vpermiltd2pd',0
00019816: 00 DB                                                  dw vpermil_2pd_instruction-instruction_handler
00019818: 76 70 65 72 6D 69 6C 74 64 32 70 73 00                 db 'vpermiltd2ps',0
00019825: 10 DB                                                  dw vpermil_2ps_instruction-instruction_handler
00019827: 76 70 73 68 75 66 62 69 74 71 6D 62 8F                 db 'vpshufbitqmb',8Fh
00019834: C5 D6                                                  dw avx512_ptestmb_instruction-instruction_handler
                                                                instructions_13:
00019836: 67 66 32 70 38 61 66 66 69 6E 65 71 62 CE              db 'gf2p8affineqb',0CEh
00019844: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00019846: 76 63 6D 70 74 72 75 65 5F 75 73 70 64 1F              db 'vcmptrue_uspd',1Fh
00019854: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00019856: 76 63 6D 70 74 72 75 65 5F 75 73 70 73 1F              db 'vcmptrue_usps',1Fh
00019864: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00019866: 76 63 6D 70 74 72 75 65 5F 75 73 73 64 1F              db 'vcmptrue_ussd',1Fh
00019874: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00019876: 76 63 6D 70 74 72 75 65 5F 75 73 73 73 1F              db 'vcmptrue_usss',1Fh
00019884: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00019886: 76 63 6D 70 75 6E 6F 72 64 5F 73 70 64 13              db 'vcmpunord_spd',13h
00019894: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00019896: 76 63 6D 70 75 6E 6F 72 64 5F 73 70 73 13              db 'vcmpunord_sps',13h
000198A4: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
000198A6: 76 63 6D 70 75 6E 6F 72 64 5F 73 73 64 13              db 'vcmpunord_ssd',13h
000198B4: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
000198B6: 76 63 6D 70 75 6E 6F 72 64 5F 73 73 73 13              db 'vcmpunord_sss',13h
000198C4: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
000198C6: 76 65 78 74 72 61 63 74 66 33 32 78 34 19              db 'vextractf32x4',19h
000198D4: 9B E0                                                  dw avx512_extract_32x4_instruction-instruction_handler
000198D6: 76 65 78 74 72 61 63 74 66 33 32 78 38 1B              db 'vextractf32x8',1Bh
000198E4: 89 E0                                                  dw avx512_extract_32x8_instruction-instruction_handler
000198E6: 76 65 78 74 72 61 63 74 66 36 34 78 32 19              db 'vextractf64x2',19h
000198F4: 94 E0                                                  dw avx512_extract_64x2_instruction-instruction_handler
000198F6: 76 65 78 74 72 61 63 74 66 36 34 78 34 1B              db 'vextractf64x4',1Bh
00019904: 82 E0                                                  dw avx512_extract_64x4_instruction-instruction_handler
00019906: 76 65 78 74 72 61 63 74 69 33 32 78 34 39              db 'vextracti32x4',39h
00019914: 9B E0                                                  dw avx512_extract_32x4_instruction-instruction_handler
00019916: 76 65 78 74 72 61 63 74 69 33 32 78 38 3B              db 'vextracti32x8',3Bh
00019924: 89 E0                                                  dw avx512_extract_32x8_instruction-instruction_handler
00019926: 76 65 78 74 72 61 63 74 69 36 34 78 32 39              db 'vextracti64x2',39h
00019934: 94 E0                                                  dw avx512_extract_64x2_instruction-instruction_handler
00019936: 76 65 78 74 72 61 63 74 69 36 34 78 34 3B              db 'vextracti64x4',3Bh
00019944: 82 E0                                                  dw avx512_extract_64x4_instruction-instruction_handler
00019946: 76 67 61 74 68 65 72 70 66 30 64 70 64 01              db 'vgatherpf0dpd',1
00019954: 1E EB                                                  dw gatherpf_dpd_instruction-instruction_handler
00019956: 76 67 61 74 68 65 72 70 66 30 64 70 73 01              db 'vgatherpf0dps',1
00019964: 2F EB                                                  dw gatherpf_dps_instruction-instruction_handler
00019966: 76 67 61 74 68 65 72 70 66 30 71 70 64 01              db 'vgatherpf0qpd',1
00019974: 1A EB                                                  dw gatherpf_qpd_instruction-instruction_handler
00019976: 76 67 61 74 68 65 72 70 66 30 71 70 73 01              db 'vgatherpf0qps',1
00019984: 2B EB                                                  dw gatherpf_qps_instruction-instruction_handler
00019986: 76 67 61 74 68 65 72 70 66 31 64 70 64 02              db 'vgatherpf1dpd',2
00019994: 1E EB                                                  dw gatherpf_dpd_instruction-instruction_handler
00019996: 76 67 61 74 68 65 72 70 66 31 64 70 73 02              db 'vgatherpf1dps',2
000199A4: 2F EB                                                  dw gatherpf_dps_instruction-instruction_handler
000199A6: 76 67 61 74 68 65 72 70 66 31 71 70 64 02              db 'vgatherpf1qpd',2
000199B4: 1A EB                                                  dw gatherpf_qpd_instruction-instruction_handler
000199B6: 76 67 61 74 68 65 72 70 66 31 71 70 73 02              db 'vgatherpf1qps',2
000199C4: 2B EB                                                  dw gatherpf_qps_instruction-instruction_handler
000199C6: 76 70 63 6C 6D 75 6C 68 71 6C 71 64 71 01              db 'vpclmulhqlqdq',1
000199D4: 8C D3                                                  dw avx_pclmulqdq_instruction-instruction_handler
000199D6: 76 70 63 6C 6D 75 6C 6C 71 6C 71 64 71 00              db 'vpclmullqlqdq',0
000199E4: 8C D3                                                  dw avx_pclmulqdq_instruction-instruction_handler
                                                                instructions_14:
000199E6: 76 62 72 6F 61 64 63 61 73 74 66 31 32 38 1A           db 'vbroadcastf128',1Ah
000199F5: C5 DE                                                  dw avx_broadcast_128_instruction_noevex-instruction_handler
000199F7: 76 62 72 6F 61 64 63 61 73 74 69 31 32 38 5A           db 'vbroadcasti128',5Ah
00019A06: C5 DE                                                  dw avx_broadcast_128_instruction_noevex-instruction_handler
00019A08: 76 63 6D 70 66 61 6C 73 65 5F 6F 73 70 64 1B           db 'vcmpfalse_ospd',1Bh
00019A17: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00019A19: 76 63 6D 70 66 61 6C 73 65 5F 6F 73 70 73 1B           db 'vcmpfalse_osps',1Bh
00019A28: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00019A2A: 76 63 6D 70 66 61 6C 73 65 5F 6F 73 73 64 1B           db 'vcmpfalse_ossd',1Bh
00019A39: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00019A3B: 76 63 6D 70 66 61 6C 73 65 5F 6F 73 73 73 1B           db 'vcmpfalse_osss',1Bh
00019A4A: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00019A4C: 76 66 6D 61 64 64 73 75 62 31 33 32 70 64 96           db 'vfmaddsub132pd',96h
00019A5B: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019A5D: 76 66 6D 61 64 64 73 75 62 31 33 32 70 73 96           db 'vfmaddsub132ps',96h
00019A6C: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019A6E: 76 66 6D 61 64 64 73 75 62 32 31 33 70 64 A6           db 'vfmaddsub213pd',0A6h
00019A7D: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019A7F: 76 66 6D 61 64 64 73 75 62 32 31 33 70 73 A6           db 'vfmaddsub213ps',0A6h
00019A8E: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019A90: 76 66 6D 61 64 64 73 75 62 32 33 31 70 64 B6           db 'vfmaddsub231pd',0B6h
00019A9F: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019AA1: 76 66 6D 61 64 64 73 75 62 32 33 31 70 73 B6           db 'vfmaddsub231ps',0B6h
00019AB0: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019AB2: 76 66 6D 73 75 62 61 64 64 31 33 32 70 64 97           db 'vfmsubadd132pd',97h
00019AC1: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019AC3: 76 66 6D 73 75 62 61 64 64 31 33 32 70 73 97           db 'vfmsubadd132ps',97h
00019AD2: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019AD4: 76 66 6D 73 75 62 61 64 64 32 31 33 70 64 A7           db 'vfmsubadd213pd',0A7h
00019AE3: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019AE5: 76 66 6D 73 75 62 61 64 64 32 31 33 70 73 A7           db 'vfmsubadd213ps',0A7h
00019AF4: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019AF6: 76 66 6D 73 75 62 61 64 64 32 33 31 70 64 B7           db 'vfmsubadd231pd',0B7h
00019B05: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019B07: 76 66 6D 73 75 62 61 64 64 32 33 31 70 73 B7           db 'vfmsubadd231ps',0B7h
00019B16: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019B18: 76 67 66 32 70 38 61 66 66 69 6E 65 71 62 CE           db 'vgf2p8affineqb',0CEh
00019B27: 7F C7                                                  dw avx_q_instruction_3a_imm8_w1-instruction_handler
00019B29: 76 70 6D 75 6C 74 69 73 68 69 66 74 71 62 83           db 'vpmultishiftqb',83h
00019B38: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00019B3A: 76 73 63 61 74 74 65 72 70 66 30 64 70 64 05           db 'vscatterpf0dpd',5
00019B49: 1E EB                                                  dw gatherpf_dpd_instruction-instruction_handler
00019B4B: 76 73 63 61 74 74 65 72 70 66 30 64 70 73 05           db 'vscatterpf0dps',5
00019B5A: 2F EB                                                  dw gatherpf_dps_instruction-instruction_handler
00019B5C: 76 73 63 61 74 74 65 72 70 66 30 71 70 64 05           db 'vscatterpf0qpd',5
00019B6B: 1A EB                                                  dw gatherpf_qpd_instruction-instruction_handler
00019B6D: 76 73 63 61 74 74 65 72 70 66 30 71 70 73 05           db 'vscatterpf0qps',5
00019B7C: 2B EB                                                  dw gatherpf_qps_instruction-instruction_handler
00019B7E: 76 73 63 61 74 74 65 72 70 66 31 64 70 64 06           db 'vscatterpf1dpd',6
00019B8D: 1E EB                                                  dw gatherpf_dpd_instruction-instruction_handler
00019B8F: 76 73 63 61 74 74 65 72 70 66 31 64 70 73 06           db 'vscatterpf1dps',6
00019B9E: 2F EB                                                  dw gatherpf_dps_instruction-instruction_handler
00019BA0: 76 73 63 61 74 74 65 72 70 66 31 71 70 64 06           db 'vscatterpf1qpd',6
00019BAF: 1A EB                                                  dw gatherpf_qpd_instruction-instruction_handler
00019BB1: 76 73 63 61 74 74 65 72 70 66 31 71 70 73 06           db 'vscatterpf1qps',6
00019BC0: 2B EB                                                  dw gatherpf_qps_instruction-instruction_handler
                                                                instructions_15:
00019BC2: 61 65 73 6B 65 79 67 65 6E 61 73 73 69 73 74 DF        db 'aeskeygenassist',0DFh
00019BD2: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00019BD4: 76 62 72 6F 61 64 63 61 73 74 66 33 32 78 32 19        db 'vbroadcastf32x2',19h
00019BE4: D0 DE                                                  dw avx512_broadcast_32x2_instruction-instruction_handler
00019BE6: 76 62 72 6F 61 64 63 61 73 74 66 33 32 78 34 1A        db 'vbroadcastf32x4',1Ah
00019BF6: D4 DE                                                  dw avx512_broadcast_32x4_instruction-instruction_handler
00019BF8: 76 62 72 6F 61 64 63 61 73 74 66 33 32 78 38 1B        db 'vbroadcastf32x8',1Bh
00019C08: D8 DE                                                  dw avx512_broadcast_32x8_instruction-instruction_handler
00019C0A: 76 62 72 6F 61 64 63 61 73 74 66 36 34 78 32 1A        db 'vbroadcastf64x2',1Ah
00019C1A: DC DE                                                  dw avx512_broadcast_64x2_instruction-instruction_handler
00019C1C: 76 62 72 6F 61 64 63 61 73 74 66 36 34 78 34 1B        db 'vbroadcastf64x4',1Bh
00019C2C: E0 DE                                                  dw avx512_broadcast_64x4_instruction-instruction_handler
00019C2E: 76 62 72 6F 61 64 63 61 73 74 69 33 32 78 32 59        db 'vbroadcasti32x2',59h
00019C3E: D0 DE                                                  dw avx512_broadcast_32x2_instruction-instruction_handler
00019C40: 76 62 72 6F 61 64 63 61 73 74 69 33 32 78 34 5A        db 'vbroadcasti32x4',5Ah
00019C50: D4 DE                                                  dw avx512_broadcast_32x4_instruction-instruction_handler
00019C52: 76 62 72 6F 61 64 63 61 73 74 69 33 32 78 38 5B        db 'vbroadcasti32x8',5Bh
00019C62: D8 DE                                                  dw avx512_broadcast_32x8_instruction-instruction_handler
00019C64: 76 62 72 6F 61 64 63 61 73 74 69 36 34 78 32 5A        db 'vbroadcasti64x2',5Ah
00019C74: DC DE                                                  dw avx512_broadcast_64x2_instruction-instruction_handler
00019C76: 76 62 72 6F 61 64 63 61 73 74 69 36 34 78 34 5B        db 'vbroadcasti64x4',5Bh
00019C86: E0 DE                                                  dw avx512_broadcast_64x4_instruction-instruction_handler
00019C88: 76 70 62 72 6F 61 64 63 61 73 74 6D 62 32 71 2A        db 'vpbroadcastmb2q',2Ah
00019C98: 16 D9                                                  dw avx512_pmov_m2_instruction_w1-instruction_handler
00019C9A: 76 70 62 72 6F 61 64 63 61 73 74 6D 77 32 64 3A        db 'vpbroadcastmw2d',3Ah
00019CAA: 1D D9                                                  dw avx512_pmov_m2_instruction-instruction_handler
                                                                instructions_16:
00019CAC: 67 66 32 70 38 61 66 66 69 6E 65 69 6E 76 71 62        db 'gf2p8affineinvqb',0CFh
          CF                                                    
00019CBD: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00019CBF: 76 61 65 73 6B 65 79 67 65 6E 61 73 73 69 73 74        db 'vaeskeygenassist',0DFh
          DF                                                    
00019CD0: 3A D3                                                  dw avx_single_source_128bit_instruction_3a_imm8_noevex-instruction_handler
                                                                instructions_17:
00019CD2: 76 67 66 32 70 38 61 66 66 69 6E 65 69 6E 76 71        db 'vgf2p8affineinvqb',0CFh
          62 CF                                                 
00019CE4: 7F C7                                                  dw avx_q_instruction_3a_imm8_w1-instruction_handler
                                                                instructions_end:
                                                                
                                                                data_directives:
00019CE6: 0C 00 0F 00                                            dw data_directives_2-data_directives,(data_directives_3-data_directives_2)/(2+3)
00019CEA: 57 00 00 00                                            dw data_directives_3-data_directives,(data_directives_4-data_directives_3)/(3+3)
00019CEE: 57 00 01 00                                            dw data_directives_4-data_directives,(data_directives_end-data_directives_4)/(4+3)
                                                                
                                                                data_directives_2:
00019CF2: 64 62 01                                               db 'db',1
00019CF5: B3 0D                                                  dw data_bytes-instruction_handler
00019CF7: 64 64 04                                               db 'dd',4
00019CFA: 84 0E                                                  dw data_dwords-instruction_handler
00019CFC: 64 66 06                                               db 'df',6
00019CFF: FF 0E                                                  dw data_pwords-instruction_handler
00019D01: 64 70 06                                               db 'dp',6
00019D04: FF 0E                                                  dw data_pwords-instruction_handler
00019D06: 64 71 08                                               db 'dq',8
00019D09: 84 0F                                                  dw data_qwords-instruction_handler
00019D0B: 64 74 0A                                               db 'dt',10
00019D0E: BA 0F                                                  dw data_twords-instruction_handler
00019D10: 64 75 02                                               db 'du',2
00019D13: 18 0E                                                  dw data_unicode-instruction_handler
00019D15: 64 77 02                                               db 'dw',2
00019D18: 21 0E                                                  dw data_words-instruction_handler
00019D1A: 72 62 01                                               db 'rb',1
00019D1D: 1F 12                                                  dw reserve_bytes-instruction_handler
00019D1F: 72 64 04                                               db 'rd',4
00019D22: C8 12                                                  dw reserve_dwords-instruction_handler
00019D24: 72 66 06                                               db 'rf',6
00019D27: 22 13                                                  dw reserve_pwords-instruction_handler
00019D29: 72 70 06                                               db 'rp',6
00019D2C: 22 13                                                  dw reserve_pwords-instruction_handler
00019D2E: 72 71 08                                               db 'rq',8
00019D31: 79 13                                                  dw reserve_qwords-instruction_handler
00019D33: 72 74 0A                                               db 'rt',10
00019D36: D6 13                                                  dw reserve_twords-instruction_handler
00019D38: 72 77 02                                               db 'rw',2
00019D3B: 76 12                                                  dw reserve_words-instruction_handler
                                                                data_directives_3:
                                                                data_directives_4:
00019D3D: 66 69 6C 65 01                                         db 'file',1
00019D42: D4 10                                                  dw data_file-instruction_handler
                                                                data_directives_end:
                                                                
                                                                include '..\messages.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
00019D44: 6F 75 74 20 6F 66 20 6D 65 6D 6F 72 79 00             _out_of_memory db 'out of memory',0
00019D52: 6F 75 74 20 6F 66 20 73 74 61 63 6B 20 73 70 61       _stack_overflow db 'out of stack space',0
          63 65 00                                              
00019D65: 73 6F 75 72 63 65 20 66 69 6C 65 20 6E 6F 74 20       _main_file_not_found db 'source file not found',0
          66 6F 75 6E 64 00                                     
00019D7B: 63 6F 64 65 20 63 61 6E 6E 6F 74 20 62 65 20 67       _code_cannot_be_generated db 'code cannot be generated',0
          65 6E 65 72 61 74 65 64 00                            
00019D94: 66 6F 72 6D 61 74 20 6C 69 6D 69 74 61 74 69 6F       _format_limitations_exceeded db 'format limitations exceeded',0
          6E 73 20 65 78 63 65 65 64 65 64 00                   
00019DB0: 69 6E 76 61 6C 69 64 20 64 65 66 69 6E 69 74 69       _invalid_definition db 'invalid definition provided',0
          6F 6E 20 70 72 6F 76 69 64 65 64 00                   
00019DCC: 77 72 69 74 65 20 66 61 69 6C 65 64 00                _write_failed db 'write failed',0
00019DD9: 66 69 6C 65 20 6E 6F 74 20 66 6F 75 6E 64 00          _file_not_found db 'file not found',0
00019DE8: 65 72 72 6F 72 20 72 65 61 64 69 6E 67 20 66 69       _error_reading_file db 'error reading file',0
          6C 65 00                                              
00019DFB: 69 6E 76 61 6C 69 64 20 66 69 6C 65 20 66 6F 72       _invalid_file_format db 'invalid file format',0
          6D 61 74 00                                           
00019E0F: 69 6E 76 61 6C 69 64 20 6D 61 63 72 6F 20 61 72       _invalid_macro_arguments db 'invalid macro arguments',0
          67 75 6D 65 6E 74 73 00                               
00019E27: 69 6E 63 6F 6D 70 6C 65 74 65 20 6D 61 63 72 6F       _incomplete_macro db 'incomplete macro',0
          00                                                    
00019E38: 75 6E 65 78 70 65 63 74 65 64 20 63 68 61 72 61       _unexpected_characters db 'unexpected characters',0
          63 74 65 72 73 00                                     
00019E4E: 69 6E 76 61 6C 69 64 20 61 72 67 75 6D 65 6E 74       _invalid_argument db 'invalid argument',0
          00                                                    
00019E5F: 69 6C 6C 65 67 61 6C 20 69 6E 73 74 72 75 63 74       _illegal_instruction db 'illegal instruction',0
          69 6F 6E 00                                           
00019E73: 69 6E 76 61 6C 69 64 20 6F 70 65 72 61 6E 64 00       _invalid_operand db 'invalid operand',0
00019E83: 69 6E 76 61 6C 69 64 20 73 69 7A 65 20 6F 66 20       _invalid_operand_size db 'invalid size of operand',0
          6F 70 65 72 61 6E 64 00                               
00019E9B: 6F 70 65 72 61 6E 64 20 73 69 7A 65 20 6E 6F 74       _operand_size_not_specified db 'operand size not specified',0
          20 73 70 65 63 69 66 69 65 64 00                      
00019EB6: 6F 70 65 72 61 6E 64 20 73 69 7A 65 73 20 64 6F       _operand_sizes_do_not_match db 'operand sizes do not match',0
          20 6E 6F 74 20 6D 61 74 63 68 00                      
00019ED1: 69 6E 76 61 6C 69 64 20 73 69 7A 65 20 6F 66 20       _invalid_address_size db 'invalid size of address value',0
          61 64 64 72 65 73 73 20 76 61 6C 75 65 00             
00019EEF: 61 64 64 72 65 73 73 20 73 69 7A 65 73 20 64 6F       _address_sizes_do_not_agree db 'address sizes do not agree',0
          20 6E 6F 74 20 61 67 72 65 65 00                      
00019F0A: 64 69 73 61 6C 6C 6F 77 65 64 20 63 6F 6D 62 69       _disallowed_combination_of_registers db 'disallowed combination of registers',0
          6E 61 74 69 6F 6E 20 6F 66 20 72 65 67 69 73 74       
          65 72 73 00                                           
00019F2E: 6E 6F 74 20 65 6E 63 6F 64 61 62 6C 65 20 77 69       _long_immediate_not_encodable db 'not encodable with long immediate',0
          74 68 20 6C 6F 6E 67 20 69 6D 6D 65 64 69 61 74       
          65 00                                                 
00019F50: 72 65 6C 61 74 69 76 65 20 6A 75 6D 70 20 6F 75       _relative_jump_out_of_range db 'relative jump out of range',0
          74 20 6F 66 20 72 61 6E 67 65 00                      
00019F6B: 69 6E 76 61 6C 69 64 20 65 78 70 72 65 73 73 69       _invalid_expression db 'invalid expression',0
          6F 6E 00                                              
00019F7E: 69 6E 76 61 6C 69 64 20 61 64 64 72 65 73 73 00       _invalid_address db 'invalid address',0
00019F8E: 69 6E 76 61 6C 69 64 20 76 61 6C 75 65 00             _invalid_value db 'invalid value',0
00019F9C: 76 61 6C 75 65 20 6F 75 74 20 6F 66 20 72 61 6E       _value_out_of_range db 'value out of range',0
          67 65 00                                              
00019FAF: 75 6E 64 65 66 69 6E 65 64 20 73 79 6D 62 6F 6C       _undefined_symbol db 'undefined symbol',0
          00                                                    
00019FC0: 73 79 6D 62 6F 6C 00                                  _symbol_out_of_scope_1 db 'symbol',0
00019FC7: 6F 75 74 20 6F 66 20 73 63 6F 70 65 00                _symbol_out_of_scope_2 db 'out of scope',0
00019FD4: 69 6E 76 61 6C 69 64 20 75 73 65 20 6F 66 20 73       _invalid_use_of_symbol db 'invalid use of symbol',0
          79 6D 62 6F 6C 00                                     
00019FEA: 6E 61 6D 65 20 74 6F 6F 20 6C 6F 6E 67 00             _name_too_long db 'name too long',0
00019FF8: 69 6E 76 61 6C 69 64 20 6E 61 6D 65 00                _invalid_name db 'invalid name',0
0001A005: 72 65 73 65 72 76 65 64 20 77 6F 72 64 20 75 73       _reserved_word_used_as_symbol db 'reserved word used as symbol',0
          65 64 20 61 73 20 73 79 6D 62 6F 6C 00                
0001A022: 73 79 6D 62 6F 6C 20 61 6C 72 65 61 64 79 20 64       _symbol_already_defined db 'symbol already defined',0
          65 66 69 6E 65 64 00                                  
0001A039: 6D 69 73 73 69 6E 67 20 65 6E 64 20 71 75 6F 74       _missing_end_quote db 'missing end quote',0
          65 00                                                 
0001A04B: 6D 69 73 73 69 6E 67 20 65 6E 64 20 64 69 72 65       _missing_end_directive db 'missing end directive',0
          63 74 69 76 65 00                                     
0001A061: 75 6E 65 78 70 65 63 74 65 64 20 69 6E 73 74 72       _unexpected_instruction db 'unexpected instruction',0
          75 63 74 69 6F 6E 00                                  
0001A078: 65 78 74 72 61 20 63 68 61 72 61 63 74 65 72 73       _extra_characters_on_line db 'extra characters on line',0
          20 6F 6E 20 6C 69 6E 65 00                            
0001A091: 73 65 63 74 69 6F 6E 20 69 73 20 6E 6F 74 20 61       _section_not_aligned_enough db 'section is not aligned enough',0
          6C 69 67 6E 65 64 20 65 6E 6F 75 67 68 00             
0001A0AF: 73 65 74 74 69 6E 67 20 61 6C 72 65 61 64 79 20       _setting_already_specified db 'setting already specified',0
          73 70 65 63 69 66 69 65 64 00                         
0001A0C9: 64 61 74 61 20 61 6C 72 65 61 64 79 20 64 65 66       _data_already_defined db 'data already defined',0
          69 6E 65 64 00                                        
0001A0DE: 74 6F 6F 20 6D 61 6E 79 20 72 65 70 65 61 74 73       _too_many_repeats db 'too many repeats',0
          00                                                    
0001A0EF: 65 72 72 6F 72 20 64 69 72 65 63 74 69 76 65 20       _invoked_error db 'error directive encountered in source file',0
          65 6E 63 6F 75 6E 74 65 72 65 64 20 69 6E 20 73       
          6F 75 72 63 65 20 66 69 6C 65 00                      
0001A11A: 61 73 73 65 72 74 69 6F 6E 20 66 61 69 6C 65 64       _assertion_failed db 'assertion failed',0
          00                                                    
                                                                
                                                                
                                                                ;segment readable writeable
                                                                
0001A12B: 90                                                    align 4
                                                                
                                                                include '..\variable.inc'
                                                                
                                                                ; flat assembler core variables
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                ; Variables which have to be set up by interface:
                                                                
0001A12C: 00 00 00 00                                           memory_start dd ?
0001A130: 00 00 00 00                                           memory_end dd ?
                                                                
0001A134: 00 00 00 00                                           additional_memory dd ?
0001A138: 00 00 00 00                                           additional_memory_end dd ?
                                                                
0001A13C: 00 00 00 00                                           stack_limit dd ?
                                                                
0001A140: 00 00 00 00                                           initial_definitions dd ?
0001A144: 00 00 00 00                                           input_file dd ?
0001A148: 00 00 00 00                                           output_file dd ?
0001A14C: 00 00 00 00                                           symbols_file dd ?
                                                                
0001A150: 00 00                                                 passes_limit dw ?
                                                                
                                                                ; Internal core variables:
                                                                
0001A152: 00 00                                                 current_pass dw ?
                                                                
0001A154: 00 00 00 00                                           include_paths dd ?
0001A158: 00 00 00 00                                           free_additional_memory dd ?
0001A15C: 00 00 00 00                                           source_start dd ?
0001A160: 00 00 00 00                                           code_start dd ?
0001A164: 00 00 00 00                                           code_size dd ?
0001A168: 00 00 00 00                                           real_code_size dd ?
0001A16C: 00 00 00 00                                           written_size dd ?
0001A170: 00 00 00 00                                           headers_size dd ?
                                                                
0001A174: 00 00 00 00                                           current_line dd ?
0001A178: 00 00 00 00                                           macro_line dd ?
0001A17C: 00 00 00 00                                           macro_block dd ?
0001A180: 00 00 00 00                                           macro_block_line dd ?
0001A184: 00 00 00 00                                           macro_block_line_number dd ?
0001A188: 00 00 00 00                                           macro_symbols dd ?
0001A18C: 00 00 00 00                                           struc_name dd ?
0001A190: 00 00 00 00                                           struc_label dd ?
0001A194: 00 00 00 00                                           instant_macro_start dd ?
0001A198: 00 00 00 00                                           parameters_end dd ?
0001A19C: 00 00 00 00                                           default_argument_value dd ?
0001A1A0: 00 00 00 00 00 00 00 00                               locals_counter rb 8
0001A1A8: 00 00 00 00                                           current_locals_prefix dd ?
0001A1AC: 00 00 00 00                                           anonymous_reverse dd ?
0001A1B0: 00 00 00 00                                           anonymous_forward dd ?
0001A1B4: 00 00 00 00                                           labels_list dd ?
0001A1B8: 00 00 00 00                                           label_hash dd ?
0001A1BC: 00 00 00 00                                           label_leaf dd ?
0001A1C0: 00 00 00 00                                           hash_tree dd ?
0001A1C4: 00 00 00 00                                           addressing_space dd ?
0001A1C8: 00 00 00 00                                           undefined_data_start dd ?
0001A1CC: 00 00 00 00                                           undefined_data_end dd ?
0001A1D0: 00 00 00 00                                           counter dd ?
0001A1D4: 00 00 00 00                                           counter_limit dd ?
0001A1D8: 00 00 00 00                                           error_info dd ?
0001A1DC: 00 00 00 00                                           error_line dd ?
0001A1E0: 00 00 00 00                                           error dd ?
0001A1E4: 00 00 00 00                                           tagged_blocks dd ?
0001A1E8: 00 00 00 00                                           structures_buffer dd ?
0001A1EC: 00 00 00 00                                           number_start dd ?
0001A1F0: 00 00 00 00                                           current_offset dd ?
0001A1F4: 00 00 00 00 00 00 00 00                               value dq ?
0001A1FC: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       fp_value rd 8
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
0001A21C: 00 00 00 00 00 00 00 00                               adjustment dq ?
0001A224: 00 00 00 00                                           symbol_identifier dd ?
0001A228: 00 00 00 00                                           address_symbol dd ?
0001A22C: 00 00 00 00                                           address_high dd ?
0001A230: 00 00 00 00                                           uncompressed_displacement dd ?
0001A234: 00 00 00 00                                           format_flags dd ?
0001A238: 00 00 00 00                                           resolver_flags dd ?
0001A23C: 00 00 00 00                                           symbols_stream dd ?
0001A240: 00 00 00 00                                           number_of_relocations dd ?
0001A244: 00 00 00 00                                           number_of_sections dd ?
0001A248: 00 00 00 00                                           stub_size dd ?
0001A24C: 00 00 00 00                                           stub_file dd ?
0001A250: 00 00 00 00                                           current_section dd ?
0001A254: 00 00                                                 machine dw ?
0001A256: 00 00                                                 subsystem dw ?
0001A258: 00 00 00 00                                           subsystem_version dd ?
0001A25C: 00 00 00 00                                           image_base dd ?
0001A260: 00 00 00 00                                           image_base_high dd ?
0001A264: 00 00 00 00                                           merge_segment dd ?
0001A268: 00 00 00 00                                           resource_data dd ?
0001A26C: 00 00 00 00                                           resource_size dd ?
0001A270: 00 00 00 00                                           actual_fixups_size dd ?
0001A274: 00 00 00 00                                           reserved_fixups dd ?
0001A278: 00 00 00 00                                           reserved_fixups_size dd ?
0001A27C: 00 00 00 00                                           last_fixup_base dd ?
0001A280: 00 00 00 00                                           last_fixup_header dd ?
0001A284: 00 00 00 00                                           parenthesis_stack dd ?
0001A288: 00 00 00 00                                           blocks_stack dd ?
0001A28C: 00 00 00 00                                           parsed_lines dd ?
0001A290: 00 00 00 00                                           logical_value_parentheses dd ?
0001A294: 00 00 00 00                                           file_extension dd ?
                                                                
0001A298: 00                                                    operand_size db ?
0001A299: 00                                                    operand_flags db ?
0001A29A: 00                                                    operand_prefix db ?
0001A29B: 00                                                    rex_prefix db ?
0001A29C: 00                                                    opcode_prefix db ?
0001A29D: 00                                                    vex_required db ?
0001A29E: 00                                                    vex_register db ?
0001A29F: 00                                                    immediate_size db ?
0001A2A0: 00                                                    mask_register db ?
0001A2A1: 00                                                    broadcast_size db ?
0001A2A2: 00                                                    rounding_mode db ?
                                                                
0001A2A3: 00                                                    base_code db ?
0001A2A4: 00                                                    extended_code db ?
0001A2A5: 00                                                    supplemental_code db ?
0001A2A6: 00                                                    postbyte_register db ?
0001A2A7: 00                                                    segment_register db ?
0001A2A8: 00                                                    xop_opcode_map db ?
                                                                
0001A2A9: 00                                                    mmx_size db ?
0001A2AA: 00                                                    jump_type db ?
0001A2AB: 00                                                    push_size db ?
0001A2AC: 00                                                    value_size db ?
0001A2AD: 00                                                    address_size db ?
0001A2AE: 00                                                    label_size db ?
0001A2AF: 00                                                    size_declared db ?
0001A2B0: 00                                                    address_size_declared db ?
0001A2B1: 00                                                    displacement_compression db ?
                                                                
0001A2B2: 00                                                    value_undefined db ?
0001A2B3: 00                                                    value_constant db ?
0001A2B4: 00                                                    value_type db ?
0001A2B5: 00                                                    value_sign db ?
0001A2B6: 00                                                    fp_sign db ?
0001A2B7: 00                                                    fp_format db ?
0001A2B8: 00                                                    address_sign db ?
0001A2B9: 00                                                    address_register db ?
0001A2BA: 00                                                    compare_type db ?
0001A2BB: 00                                                    logical_value_wrapping db ?
0001A2BC: 00                                                    next_pass_needed db ?
0001A2BD: 00                                                    output_format db ?
0001A2BE: 00                                                    code_type db ?
0001A2BF: 00                                                    adjustment_sign db ?
0001A2C0: 00                                                    evex_mode db ?
                                                                
0001A2C1: 00                                                    macro_status db ?
0001A2C2: 00                                                    skip_default_argument_value db ?
0001A2C3: 00                                                    prefix_flags db ?
0001A2C4: 00                                                    formatter_symbols_allowed db ?
0001A2C5: 00                                                    decorator_symbols_allowed db ?
0001A2C6: 00                                                    free_address_range db ?
                                                                
0001A2C7: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       characters rb 100h
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
0001A3C7: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       converted rb 100h
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
0001A4C7: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       message rb 180h
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
                                                                
                                                                
0001A647: 00 00 00 00                                           command_line dd ?
0001A64B: 00 00 00 00                                           memory_setting dd ?
0001A64F: 00 00 00 00                                           definitions_pointer dd ?
0001A653: 00 00 00 00                                           environment dd ?
0001A657: 00 00 00 00 00 00 00 00                               timestamp dq ?
0001A65F: 00 00 00 00                                           start_time dd ?
                                                                ; TRDOS 386
                                                                ;con_handle dd ?
0001A663: 00 00 00 00                                           displayed_count dd ?
0001A667: 00                                                    last_displayed db ?
0001A668: 00                                                    character db ?
0001A669: 00                                                    preprocessing_done db ?
                                                                
0001A66A: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       predefinitions rb 1000h
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
0001B66A: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       buffer rb 1000h
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
                                                                
0001C66A: 0D 0A                                                 program db 0Dh,0Ah
0001C66C: 46 6C 61 74 20 41 73 73 73 65 6D 62 6C 65 72 20       	db "Flat Asssembler for TRDOS 386 v2"
          66 6F 72 20 54 52 44 4F 53 20 33 38 36 20 76 32       
0001C68C: 0D 0A                                                 	db 0Dh,0Ah
0001C68E: 45 72 64 6F 67 61 6E 20 54 61 6E 20 2D 20 4F 63       	db "Erdogan Tan - October 2024"
          74 6F 62 65 72 20 32 30 32 34                         
0001C6A8: 0D 0A 00                                              	db 0Dh,0Ah,0
