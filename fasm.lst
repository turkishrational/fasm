                                                                ; -----------------------------------------------------------
                                                                ; FASM.PRG - FLAT Assembler for TRDOS 386 (v2.0.9 and later)
                                                                ; Erdogan Tan - 2024
                                                                ; Beginning: 04/10/2024
                                                                ; Last Update: 08/10/2024
                                                                ; -----------------------------------------------------------
                                                                ; Modified from 'fasm.asm' file of
                                                                ; 'flat assembler 1.73.32 for Linux' source code
                                                                ; 2024
                                                                
                                                                
                                                                ; flat assembler interface for Linux
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                	;format	ELF executable 3
                                                                	;entry	start
                                                                
                                                                ;segment readable executable
                                                                
                                                                	; TRDOS 386
                                                                	use32
                                                                	org 0x0
                                                                start:
                                                                	;; 08/10/2024
00000000: BB B8 C6 01 00                                        	mov	ebx, bss_end
00000005: B8 11 00 00 00                                        	mov	eax, 17 ; sysbreak
0000000A: CD 40                                                 	int	0x40
                                                                	;;;
                                                                
                                                                	;mov	[con_handle],1
0000000C: BE 1C 07 00 00                                        	mov	esi,_logo
00000011: E8 ED 03 00 00                                        	call	display_string
                                                                
                                                                	; LINUX & TRDOS 386
00000016: 89 25 53 A6 01 00                                     	mov	[command_line],esp
                                                                	; TRDOS 386
                                                                	;mov	ecx,[esp]
                                                                	;lea	ebx,[esp+4+ecx*4+4]
                                                                	;mov	[environment],ebx
0000001C: E8 D9 00 00 00                                        	call	get_params
00000021: 0F 82 C2 00 00 00                                     	jc	information
                                                                
00000027: E8 99 02 00 00                                        	call	init_memory
                                                                
0000002C: BE 64 08 00 00                                        	mov	esi,_memory_prefix
00000031: E8 CD 03 00 00                                        	call	display_string
00000036: A1 3C A1 01 00                                        	mov	eax,[memory_end]
0000003B: 2B 05 38 A1 01 00                                     	sub	eax,[memory_start]
00000041: 03 05 44 A1 01 00                                     	add	eax,[additional_memory_end]
00000047: 2B 05 40 A1 01 00                                     	sub	eax,[additional_memory]
0000004D: C1 E8 0A                                              	shr	eax,10
00000050: E8 D7 03 00 00                                        	call	display_number
00000055: BE 68 08 00 00                                        	mov	esi,_memory_suffix
0000005A: E8 A4 03 00 00                                        	call	display_string
                                                                
                                                                	;mov	eax,78
                                                                	;mov	ebx,buffer
                                                                	;xor	ecx,ecx
                                                                	;int	0x80
                                                                	;mov	eax,dword [buffer]
                                                                	;mov	ecx,1000
                                                                	;mul	ecx
                                                                	;mov	ebx,eax
                                                                	;mov	eax,dword [buffer+4]
                                                                	;div	ecx
                                                                	;add	eax,ebx
                                                                	; TRDOS 386
0000005F: B8 0D 00 00 00                                        	mov	eax,13  ; systime
00000064: 29 DB                                                 	sub	ebx,ebx ; 0 -> get unix/epoch time
00000066: CD 40                                                 	int	0x40
00000068: A3 6B A6 01 00                                        	mov	[start_time],eax
                                                                
0000006D: 80 25 75 A6 01 00 00                                  	and	[preprocessing_done],0
00000074: E8 C9 0F 00 00                                        	call	preprocessor
00000079: 80 0D 75 A6 01 00 FF                                  	or	[preprocessing_done],-1
00000080: E8 D0 2D 00 00                                        	call	parser
00000085: E8 0E 49 00 00                                        	call	assembler
0000008A: E8 DE 7D 00 00                                        	call	formatter
                                                                
0000008F: E8 D6 03 00 00                                        	call	display_user_messages
00000094: 0F B7 05 5E A1 01 00                                  	movzx	eax,[current_pass]
0000009B: 40                                                    	inc	eax
0000009C: E8 8B 03 00 00                                        	call	display_number
000000A1: BE 7D 08 00 00                                        	mov	esi,_passes_suffix
000000A6: E8 58 03 00 00                                        	call	display_string
                                                                	
                                                                	;mov	eax,78
                                                                	;mov	ebx,buffer
                                                                	;xor	ecx,ecx
                                                                	;int	0x80
                                                                	;mov	eax,dword [buffer]
                                                                	;mov	ecx,1000
                                                                	;mul	ecx
                                                                	;mov	ebx,eax
                                                                	;mov	eax,dword [buffer+4]
                                                                	;div	ecx
                                                                	;add	eax,ebx
                                                                	; TRDOS 386
000000AB: B8 0D 00 00 00                                        	mov	eax,13  ; systime
000000B0: 29 DB                                                 	sub	ebx,ebx ; 0 -> get unix/epoch time
000000B2: CD 40                                                 	int	0x40
                                                                		
000000B4: 2B 05 6B A6 01 00                                     	sub	eax,[start_time]
                                                                	;jnc	time_ok
                                                                	;;add	eax,3600000
                                                                	;add	eax,3600
                                                                	time_ok:
                                                                	;xor	edx,edx
                                                                	;mov	ebx,100
                                                                	;div	ebx
                                                                	;or	eax,eax
                                                                	;jz	display_bytes_count
                                                                	; TRDOS 386
000000BA: 83 F8 02                                              	cmp	eax,2
000000BD: 72 0F                                                 	jb	display_bytes_count
                                                                
                                                                	;xor	edx,edx
                                                                	;mov	ebx,10
                                                                	;div	ebx
                                                                	;push	edx
                                                                	;call	display_number
                                                                	;mov	dl,'.'
                                                                	;call	display_character
                                                                	;pop	eax
000000BF: E8 68 03 00 00                                        	call	display_number
000000C4: BE 87 08 00 00                                        	mov	esi,_seconds_suffix
000000C9: E8 35 03 00 00                                        	call	display_string
                                                                      display_bytes_count:
000000CE: A1 78 A1 01 00                                        	mov	eax,[written_size]
000000D3: E8 54 03 00 00                                        	call	display_number
000000D8: BE 92 08 00 00                                        	mov	esi,_bytes_suffix
000000DD: E8 21 03 00 00                                        	call	display_string
000000E2: 30 C0                                                 	xor	al,al
000000E4: E9 3A 02 00 00                                        	jmp	exit_program
                                                                
                                                                information:
000000E9: BE 3C 07 00 00                                        	mov	esi,_usage
000000EE: E8 10 03 00 00                                        	call	display_string
000000F3: B0 01                                                 	mov	al,1
000000F5: E9 29 02 00 00                                        	jmp	exit_program
                                                                
                                                                get_params:
000000FA: 8B 1D 53 A6 01 00                                     	mov	ebx,[command_line] ; argc
00000100: C7 05 50 A1 01 00 00 00 00 00                         	mov	[input_file],0
0000010A: C7 05 54 A1 01 00 00 00 00 00                         	mov	[output_file],0
00000114: C7 05 58 A1 01 00 00 00 00 00                         	mov	[symbols_file],0
0000011E: C7 05 57 A6 01 00 00 00 00 00                         	mov	[memory_setting],0
00000128: 66 C7 05 5C A1 01 00 64 00                            	mov	[passes_limit],100
00000131: 8B 0B                                                 	mov	ecx,[ebx] ; argc
00000133: 83 C3 08                                              	add	ebx,8	; argv[1] ; argv[0] is program file's name
00000136: 49                                                    	dec	ecx
00000137: 74 69                                                 	jz	bad_params
00000139: C7 05 5B A6 01 00 B8 A6 01 00                         	mov	[definitions_pointer],predefinitions
                                                                      get_param:
00000143: 8B 33                                                 	mov	esi,[ebx]
00000145: 8A 06                                                 	mov	al,[esi]
00000147: 3C 2D                                                 	cmp	al,'-'
00000149: 74 25                                                 	je	option_param
0000014B: 83 3D 50 A1 01 00 00                                  	cmp	[input_file],0
00000152: 75 0B                                                 	jne	get_output_file
00000154: 89 35 50 A1 01 00                                     	mov	[input_file],esi
0000015A: E9 90 00 00 00                                        	jmp	next_param
                                                                      get_output_file:
0000015F: 83 3D 54 A1 01 00 00                                  	cmp	[output_file],0
00000166: 75 3A                                                 	jne	bad_params
00000168: 89 35 54 A1 01 00                                     	mov	[output_file],esi
0000016E: EB 7F                                                 	jmp	next_param
                                                                      option_param:
00000170: 46                                                    	inc	esi
00000171: AC                                                    	lodsb
00000172: 3C 6D                                                 	cmp	al,'m'
00000174: 74 2E                                                 	je	memory_option
00000176: 3C 4D                                                 	cmp	al,'M'
00000178: 74 2A                                                 	je	memory_option
0000017A: 3C 70                                                 	cmp	al,'p'
0000017C: 74 4C                                                 	je	passes_option
0000017E: 3C 50                                                 	cmp	al,'P'
00000180: 74 48                                                 	je	passes_option
00000182: 3C 64                                                 	cmp	al,'d'
00000184: 0F 84 8C 00 00 00                                     	je	definition_option
0000018A: 3C 44                                                 	cmp	al,'D'
0000018C: 0F 84 84 00 00 00                                     	je	definition_option
00000192: 3C 73                                                 	cmp	al,'s'
00000194: 0F 84 A4 00 00 00                                     	je	symbols_option
0000019A: 3C 53                                                 	cmp	al,'S'
0000019C: 0F 84 9C 00 00 00                                     	je	symbols_option
                                                                      bad_params:
000001A2: F9                                                    	stc
000001A3: C3                                                    	ret
                                                                      memory_option:
000001A4: 80 3E 00                                              	cmp	byte [esi],0
000001A7: 75 08                                                 	jne	get_memory_setting
000001A9: 49                                                    	dec	ecx
000001AA: 74 F6                                                 	jz	bad_params
000001AC: 83 C3 04                                              	add	ebx,4
000001AF: 8B 33                                                 	mov	esi,[ebx]
                                                                      get_memory_setting:
000001B1: E8 A1 00 00 00                                        	call	get_option_value
000001B6: 09 D2                                                 	or	edx,edx
000001B8: 74 E8                                                 	jz	bad_params
000001BA: 81 FA 00 00 40 00                                     	cmp	edx,1 shl (32-10)
000001C0: 73 E0                                                 	jae	bad_params
000001C2: 89 15 57 A6 01 00                                     	mov	[memory_setting],edx
000001C8: EB 25                                                 	jmp	next_param
                                                                      passes_option:
000001CA: 80 3E 00                                              	cmp	byte [esi],0
000001CD: 75 08                                                 	jne	get_passes_setting
000001CF: 49                                                    	dec	ecx
000001D0: 74 D0                                                 	jz	bad_params
000001D2: 83 C3 04                                              	add	ebx,4
000001D5: 8B 33                                                 	mov	esi,[ebx]
                                                                      get_passes_setting:
000001D7: E8 7B 00 00 00                                        	call	get_option_value
000001DC: 09 D2                                                 	or	edx,edx
000001DE: 74 C2                                                 	jz	bad_params
000001E0: 81 FA 00 00 01 00                                     	cmp	edx,10000h
000001E6: 77 BA                                                 	ja	bad_params
000001E8: 66 89 15 5C A1 01 00                                  	mov	[passes_limit],dx
                                                                      next_param:
000001EF: 83 C3 04                                              	add	ebx,4
000001F2: 49                                                    	dec	ecx
000001F3: 0F 85 4A FF FF FF                                     	jnz	get_param
000001F9: 83 3D 50 A1 01 00 00                                  	cmp	[input_file],0
00000200: 74 A0                                                 	je	bad_params
00000202: A1 5B A6 01 00                                        	mov	eax,[definitions_pointer]
00000207: C6 00 00                                              	mov	byte [eax],0
0000020A: C7 05 4C A1 01 00 B8 A6 01 00                         	mov	[initial_definitions],predefinitions
00000214: F8                                                    	clc
00000215: C3                                                    	ret
                                                                      definition_option:
00000216: 80 3E 00                                              	cmp	byte [esi],0
00000219: 75 08                                                 	jne	get_definition
0000021B: 49                                                    	dec	ecx
0000021C: 74 84                                                 	jz	bad_params
0000021E: 83 C3 04                                              	add	ebx,4
00000221: 8B 33                                                 	mov	esi,[ebx]
                                                                      get_definition:
00000223: 57                                                    	push	edi
00000224: 8B 3D 5B A6 01 00                                     	mov	edi,[definitions_pointer]
0000022A: E8 4C 00 00 00                                        	call	convert_definition_option
0000022F: 89 3D 5B A6 01 00                                     	mov	[definitions_pointer],edi
00000235: 5F                                                    	pop	edi
00000236: 0F 82 66 FF FF FF                                     	jc	bad_params
0000023C: EB B1                                                 	jmp	next_param
                                                                      symbols_option:
0000023E: 80 3E 00                                              	cmp	byte [esi],0
00000241: 75 0C                                                 	jne	get_symbols_setting
00000243: 49                                                    	dec	ecx
00000244: 0F 84 58 FF FF FF                                     	jz	bad_params
0000024A: 83 C3 04                                              	add	ebx,4
0000024D: 8B 33                                                 	mov	esi,[ebx]
                                                                      get_symbols_setting:
0000024F: 89 35 58 A1 01 00                                     	mov	[symbols_file],esi
00000255: EB 98                                                 	jmp	next_param
                                                                      get_option_value:
00000257: 31 C0                                                 	xor	eax,eax
00000259: 89 C2                                                 	mov	edx,eax
                                                                      get_option_digit:
0000025B: AC                                                    	lodsb
0000025C: 3C 20                                                 	cmp	al,20h
0000025E: 74 17                                                 	je	option_value_ok
00000260: 08 C0                                                 	or	al,al
00000262: 74 13                                                 	jz	option_value_ok
00000264: 2C 30                                                 	sub	al,30h
00000266: 72 12                                                 	jc	invalid_option_value2
00000268: 3C 09                                                 	cmp	al,9
0000026A: 77 0D                                                 	ja	invalid_option_value
0000026C: 6B D2 0A                                              	imul	edx,10
0000026F: 70 08                                                 	jo	invalid_option_value
00000271: 01 C2                                                 	add	edx,eax
00000273: 72 05                                                 	jc	invalid_option_value2
00000275: EB E4                                                 	jmp	get_option_digit
                                                                      option_value_ok:
00000277: 4E                                                    	dec	esi
                                                                	;clc	; TRDOS 386
00000278: C3                                                    	ret
                                                                      invalid_option_value:
00000279: F9                                                    	stc
                                                                      invalid_option_value2: ; TRDOS 386
0000027A: C3                                                    	ret
                                                                      convert_definition_option:
0000027B: 89 FA                                                 	mov	edx,edi
0000027D: 81 FF B8 B6 01 00                                     	cmp	edi,predefinitions+1000h
00000283: 73 1D                                                 	jae	bad_definition_option
00000285: 30 C0                                                 	xor	al,al
00000287: AA                                                    	stosb
                                                                      copy_definition_name:
00000288: AC                                                    	lodsb
00000289: 3C 3D                                                 	cmp	al,'='
0000028B: 74 17                                                 	je	copy_definition_value
0000028D: 3C 20                                                 	cmp	al,20h
0000028F: 74 11                                                 	je	bad_definition_option
00000291: 08 C0                                                 	or	al,al
00000293: 74 0D                                                 	jz	bad_definition_option
00000295: 81 FF B8 B6 01 00                                     	cmp	edi,predefinitions+1000h
0000029B: 73 05                                                 	jae	bad_definition_option
0000029D: AA                                                    	stosb
0000029E: FE 02                                                 	inc	byte [edx]
000002A0: 75 E6                                                 	jnz	copy_definition_name
                                                                      bad_definition_option:
000002A2: F9                                                    	stc
000002A3: C3                                                    	ret
                                                                      copy_definition_value:
000002A4: AC                                                    	lodsb
000002A5: 3C 20                                                 	cmp	al,20h
000002A7: 74 0F                                                 	je	definition_value_end
000002A9: 08 C0                                                 	or	al,al
000002AB: 74 0B                                                 	jz	definition_value_end
000002AD: 81 FF B8 B6 01 00                                     	cmp	edi,predefinitions+1000h
000002B3: 73 ED                                                 	jae	bad_definition_option
000002B5: AA                                                    	stosb
000002B6: EB EC                                                 	jmp	copy_definition_value
                                                                      definition_value_end:
000002B8: 4E                                                    	dec	esi
000002B9: 81 FF B8 B6 01 00                                     	cmp	edi,predefinitions+1000h
000002BF: 73 E1                                                 	jae	bad_definition_option
000002C1: 30 C0                                                 	xor	al,al
000002C3: AA                                                    	stosb
                                                                	;clc	 ; TRDOS 386
000002C4: C3                                                    	ret
                                                                
                                                                include 'system.inc'
                                                                ; -----------------------------------------------------------
                                                                ; FLAT Assembler for TRDOS 386 (v2.0.9 and later)
                                                                ; Erdogan Tan - 2024
                                                                ; Beginning: 04/10/2024
                                                                ; Last Update: 08/10/2024
                                                                ; -----------------------------------------------------------
                                                                ; Modified from 'system.inc' file of
                                                                ; 'flat assembler 1.73.32 for Linux' source code
                                                                ; 2024
                                                                
                                                                ; flat assembler interface for Linux
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                ;O_ACCMODE  = 0003o
                                                                ;O_RDONLY   = 0000o
                                                                ;O_WRONLY   = 0001o
                                                                ;O_RDWR	    = 0002o
                                                                ;O_CREAT    = 0100o
                                                                ;O_EXCL	    = 0200o
                                                                ;O_NOCTTY   = 0400o
                                                                ;O_TRUNC    = 1000o
                                                                ;O_APPEND   = 2000o
                                                                ;O_NONBLOCK = 4000o
                                                                ;
                                                                ;S_ISUID    = 4000o
                                                                ;S_ISGID    = 2000o
                                                                ;S_ISVTX    = 1000o
                                                                ;S_IRUSR    = 0400o
                                                                ;S_IWUSR    = 0200o
                                                                ;S_IXUSR    = 0100o
                                                                ;S_IRGRP    = 0040o
                                                                ;S_IWGRP    = 0020o
                                                                ;S_IXGRP    = 0010o
                                                                ;S_IROTH    = 0004o
                                                                ;S_IWOTH    = 0002o
                                                                ;S_IXOTH    = 0001o
                                                                
                                                                init_memory:
000002C5: 89 E0                                                 	mov	eax,esp
000002C7: 25 00 F0 FF FF                                        	and	eax,not 0FFFh
000002CC: 05 00 10 FF FF                                        	add	eax,1000h-10000h
000002D1: A3 48 A1 01 00                                        	mov	[stack_limit],eax
000002D6: 31 DB                                                 	xor	ebx,ebx
                                                                	;mov	eax,45
                                                                	;int	0x80
                                                                	; TRDOS 386
000002D8: 4B                                                    	dec	ebx
                                                                	; ebx = -1
000002D9: B8 11 00 00 00                                        	mov	eax,17 ; sysbreak
000002DE: CD 40                                                 	int	0x40
                                                                	; eax = current u.break (bss) address
000002E0: A3 40 A1 01 00                                        	mov	[additional_memory],eax
000002E5: 8B 0D 57 A6 01 00                                     	mov	ecx,[memory_setting]
000002EB: C1 E1 0A                                              	shl	ecx,10
000002EE: 75 05                                                 	jnz	allocate_memory
000002F0: B9 00 00 00 01                                        	mov	ecx,1000000h
                                                                      allocate_memory:
000002F5: 8B 1D 40 A1 01 00                                     	mov	ebx,[additional_memory]
000002FB: 01 CB                                                 	add	ebx,ecx
                                                                	;mov	eax,45
                                                                	;int	0x80
                                                                	; TRDOS 386
000002FD: B8 11 00 00 00                                        	mov	eax,17 ; sysbreak
00000302: CD 40                                                 	int	0x40
00000304: A3 3C A1 01 00                                        	mov	[memory_end],eax
00000309: 2B 05 40 A1 01 00                                     	sub	eax,[additional_memory]
0000030F: C1 E8 02                                              	shr	eax,2
00000312: 03 05 40 A1 01 00                                     	add	eax,[additional_memory]
00000318: A3 44 A1 01 00                                        	mov	[additional_memory_end],eax
0000031D: A3 38 A1 01 00                                        	mov	[memory_start],eax
00000322: C3                                                    	ret
                                                                
                                                                exit_program:
00000323: 0F B6 D8                                              	movzx	ebx,al
00000326: B8 01 00 00 00                                        	mov	eax,1	; sysexit
                                                                	;int	0x80
                                                                	; TRDOS 386
0000032B: CD 40                                                 	int	0x40
                                                                
                                                                get_environment_variable:
                                                                
                                                                if 0
                                                                	mov	ecx,esi
                                                                	mov	ebx,[environment]
                                                                      next_variable:
                                                                	mov	esi,[ebx]
                                                                	test	esi,esi
                                                                	jz	no_environment_variable
                                                                	add	ebx,4
                                                                      compare_variable_names:
                                                                	mov	edx,ecx
                                                                      compare_character:
                                                                	lodsb
                                                                	mov	ah,[edx]
                                                                	inc	edx
                                                                	cmp	al,'='
                                                                	je	end_of_variable_name
                                                                	or	ah,ah
                                                                	jz	next_variable
                                                                	sub	ah,al
                                                                	jz	compare_character
                                                                	cmp	ah,20h
                                                                	jne	next_variable
                                                                	cmp	al,41h
                                                                	jb	next_variable
                                                                	cmp	al,5Ah
                                                                	jna	compare_character
                                                                	jmp	next_variable
                                                                      no_environment_variable:
                                                                	ret
                                                                      end_of_variable_name:
                                                                	or	ah,ah
                                                                	jnz	next_variable
                                                                	
                                                                      copy_variable_value:
                                                                	lodsb
                                                                	cmp	edi,[memory_end]
                                                                	jae	out_of_memory
                                                                	stosb
                                                                	or	al,al
                                                                	jnz	copy_variable_value
                                                                	dec	edi
                                                                	ret
                                                                else
                                                                	; TRDOS 386
                                                                	; esi = environment variable address
                                                                	; (edi = [memory_start])
0000032D: B9 20 00 00 00                                        	mov	ecx,32 ; max. 32 chars
00000332: 89 FB                                                 	mov	ebx,edi
                                                                      copy_environment_variable:
00000334: AC                                                     	lodsb
                                                                	;cmp	edi,[memory_end]
                                                                	;jae	out_of_memory
00000335: AA                                                    	stosb
00000336: 08 C0                                                 	or	al,al
00000338: 74 06                                                 	jz	short end_of_variable_name
0000033A: E2 F8                                                 	loop	copy_environment_variable
0000033C: C6 47 FF 00                                           	mov	byte [edi-1],0
                                                                      end_of_variable_name:
                                                                	;neg	ecx
                                                                	;add	ecx,32
00000340: F6 D9                                                 	neg	cl
00000342: 80 C1 20                                              	add	cl,32
00000345: B8 18 00 00 00                                        	mov	eax,24	; sysenv
0000034A: 31 D2                                                 	xor	edx,edx ; dl = 0 -> 256 byte
0000034C: CD 40                                                 	int	0x40
                                                                	;jc	no_environment_variable
0000034E: 09 C0                                                 	or	eax,eax
00000350: 74 13                                                 	jz	no_environment_variable
                                                                	; eax = string length with zero tail
00000352: 89 C1                                                 	mov	ecx,eax
00000354: 89 DF                                                 	mov	edi,ebx
00000356: B0 3D                                                 	mov	al,'='
00000358: F2 AE                                                 	repne	scasb
0000035A: 67 E3 08                                              	jcxz	no_environment_variable
0000035D: 89 FE                                                 	mov	esi,edi
                                                                	; esi = value address of env variable
0000035F: 89 DF                                                 	mov	edi,ebx
                                                                	; (edi = [memory_start])
00000361: F3 A4                                                 	rep	movsb ; the last char/byte is 00h
00000363: 4F                                                    	dec	edi ; except zero tail
00000364: C3                                                    	retn
                                                                      no_environment_variable:
00000365: 89 DF                                                 	mov	edi,ebx
00000367: C3                                                    	ret
                                                                end if
                                                                
                                                                open:
                                                                	;push	esi edi ebp
00000368: 56 57                                                 	push	esi edi
0000036A: E8 15 00 00 00                                        	call	adapt_path
0000036F: B8 05 00 00 00                                        	mov	eax,5
00000374: BB B8 B6 01 00                                        	mov	ebx,buffer
                                                                	;mov	ecx,O_RDONLY
                                                                	;xor	edx,edx
                                                                	;int	0x80
                                                                	; TRDOS 386
00000379: 31 C9                                                 	xor	ecx,ecx ; open for read
0000037B: CD 40                                                 	int	0x40
                                                                	;pop	ebp edi esi
0000037D: 5F 5E                                                 	pop	edi esi
                                                                	;test	eax,eax
                                                                	;js	file_error
0000037F: 72 58                                                 	jc	file_error ; TRDOS 386
00000381: 89 C3                                                 	mov	ebx,eax
                                                                	;clc	 ; TRDOS 386
00000383: C3                                                    	ret
                                                                    adapt_path:
00000384: 89 D6                                                 	mov	esi,edx
00000386: BF B8 B6 01 00                                        	mov	edi,buffer
                                                                      copy_path:
0000038B: AC                                                    	lods	byte [esi]
0000038C: 3C 5C                                                 	cmp	al,'\'
0000038E: 75 02                                                 	jne	path_char_ok
00000390: B0 2F                                                 	mov	al,'/'
                                                                      path_char_ok:
00000392: AA                                                    	stos	byte [edi]
00000393: 08 C0                                                 	or	al,al
00000395: 75 F4                                                 	jnz	copy_path
00000397: 81 FF B8 C6 01 00                                     	cmp	edi,buffer+1000h
0000039D: 0F 87 F9 04 00 00                                     	ja	out_of_memory
000003A3: C3                                                    	ret
                                                                create:
                                                                if 0
                                                                	push	esi edi ebp edx
                                                                	call	adapt_path
                                                                	mov	ebx,buffer
                                                                	mov	ecx,O_CREAT+O_TRUNC+O_WRONLY
                                                                	mov	edx,S_IRUSR+S_IWUSR+S_IRGRP+S_IROTH
                                                                	pop	eax
                                                                	cmp	eax,[output_file]
                                                                	jne	do_create
                                                                	cmp	[output_format],5
                                                                	jne	do_create
                                                                	bt	[format_flags],0
                                                                	jnc	do_create
                                                                	or	edx,S_IXUSR+S_IXGRP+S_IXOTH
                                                                      do_create:
                                                                	mov	eax,5
                                                                	int	0x80
                                                                	pop	ebp edi esi
                                                                	test	eax,eax
                                                                	js	file_error
                                                                else
                                                                	; TRDOS 386
000003A4: 56 57                                                 	push	esi edi
000003A6: E8 D9 FF FF FF                                        	call	adapt_path
000003AB: 5F 5E                                                 	pop	edi esi
000003AD: BB B8 B6 01 00                                        	mov	ebx,buffer
000003B2: 31 C9                                                 	xor	ecx,ecx ; cl = 0 -> ordinary file
000003B4: B8 08 00 00 00                                        	mov	eax,8	; syscreat
000003B9: CD 40                                                 	int	0x40
000003BB: 72 1C                                                 	jc	file_error
                                                                end if
000003BD: 89 C3                                                 	mov	ebx,eax
                                                                	;clc	; TRDOS 386
000003BF: C3                                                    	ret
                                                                close:
                                                                	; ebx = file handle
000003C0: B8 06 00 00 00                                        	mov	eax,6
                                                                	;int	0x80
                                                                	; TRDOS 386
000003C5: CD 40                                                 	int	0x40
000003C7: C3                                                    	ret
                                                                read:
                                                                if 0
                                                                	push	ecx edx esi edi ebp
                                                                	mov	eax,3
                                                                	xchg	ecx,edx
                                                                	int	0x80
                                                                	pop	ebp edi esi edx ecx
                                                                	test	eax,eax
                                                                	js	file_error
                                                                else
                                                                	; TRDOS 386
                                                                	; ebx = file handle
000003C8: 51 52                                                 	push	ecx edx
000003CA: B8 03 00 00 00                                        	mov	eax,3	 ; sysread
000003CF: 87 CA                                                 	xchg	ecx,edx
000003D1: CD 40                                                 	int	0x40
000003D3: 5A 59                                                 	pop	edx ecx
000003D5: 72 02                                                 	jc	file_error
                                                                end if
                                                                	;cmp	eax,ecx
000003D7: 39 C1                                                 	cmp	ecx,eax
                                                                	;jne	file_error ; ecx < eax
                                                                	;clc
                                                                	;ret
                                                                    file_error:
                                                                	;stc
000003D9: C3                                                    	ret
                                                                write:
                                                                if 0
                                                                	push	edx esi edi ebp
                                                                	mov	eax,4
                                                                	xchg	ecx,edx
                                                                	int	0x80
                                                                	pop	ebp edi esi edx
                                                                	test	eax,eax
                                                                	js	file_error
                                                                	clc
                                                                	ret
                                                                else
                                                                	; TRDOS 386
                                                                	; ebx = file handle
000003DA: 51 52                                                 	push	ecx edx
000003DC: B8 04 00 00 00                                        	mov	eax, 4	; syswrite
000003E1: 87 CA                                                 	xchg	ecx,edx
000003E3: CD 40                                                 	int	0x40
000003E5: 5A 59                                                 	pop	edx ecx
000003E7: 72 F0                                                 	jc	file_error
000003E9: 39 C1                                                 	cmp	ecx,eax
                                                                	;jne	file_error ; ecx < eax
000003EB: C3                                                    	retn
                                                                end if
                                                                
                                                                lseek:
                                                                	; ebx = file handle
000003EC: 89 D1                                                 	mov	ecx,edx
000003EE: 31 D2                                                 	xor	edx,edx
000003F0: 88 C2                                                 	mov	dl,al
000003F2: B8 13 00 00 00                                        	mov	eax,19	; sysseek
                                                                	;int	0x80
                                                                	; TRDOS 386 
000003F7: CD 40                                                 	int	0x40
                                                                	;cmp	eax,-1
                                                                	;je	file_error
                                                                	;clc
                                                                	;ret
000003F9: 72 DE                                                 	jc	file_error
                                                                	; TRDOS 386
                                                                	; Needed for v2.0.9 and previous.
                                                                	; systell ; sys _tell,ebx
000003FB: B8 14 00 00 00                                        	mov	eax,20
00000400: CD 40                                                 	int	0x40
                                                                	; eax = file offset pointer
00000402: C3                                                    	retn
                                                                
                                                                display_string:
                                                                if 0
                                                                	push	ebx
                                                                	mov	edi,esi
                                                                	mov	edx,esi
                                                                	or	ecx,-1
                                                                	xor	al,al
                                                                	repne	scasb
                                                                	neg	ecx
                                                                	sub	ecx,2
                                                                	mov	eax,4
                                                                	mov	ebx,[con_handle]
                                                                	xchg	ecx,edx
                                                                	int	0x80
                                                                	pop	ebx
                                                                	ret
                                                                else
                                                                	; TRDOS 386
                                                                print_msg:
                                                                	;push	esi
00000403: 53                                                    	push	ebx
                                                                print_msg_loop:
00000404: AC                                                    	lodsb
00000405: 08 C0                                                 	or	al,al
00000407: 74 10                                                 	jz	print_msg_ok
                                                                	; TRDOS 386 v2
                                                                	;; write tty (ROMBIOS Int 10h simulation)
                                                                	;mov	ah,0Eh
                                                                	;mov	bx,07h
                                                                	;int	31h
                                                                	; TRDOS 386 v2.0.9 and later
00000409: 88 C1                                                 	mov	cl,al
                                                                	;sys	_stdio,3 ; write char to STDERR
0000040B: BB 03 00 00 00                                        	mov	ebx,3
00000410: B8 2E 00 00 00                                        	mov	eax,46 ; sysstdio
00000415: CD 40                                                 	int	0x40
00000417: EB EB                                                 	jmp	print_msg_loop
                                                                print_msg_ok:
00000419: 5B                                                    	pop	ebx
                                                                	;pop	esi
0000041A: C3                                                    	retn
                                                                end if
                                                                
                                                                display_character:
0000041B: 53                                                    	push	ebx
                                                                if 0
                                                                	mov	[character],dl
                                                                	mov	eax,4
                                                                	mov	ebx,[con_handle]
                                                                	mov	ecx,character
                                                                	mov	edx,1
                                                                	int	0x80
                                                                else
                                                                	; TRDOS 386
                                                                	;mov	[character],dl
                                                                	; TRDOS 386 v2
                                                                	;; write tty (ROMBIOS Int 10h simulation)
                                                                	;mov	al,[character]
                                                                	;mov	al,dl 
                                                                	;mov	ah,0Eh
                                                                	;mov	bx,07h
                                                                	;int	31h
                                                                	; TRDOS 386 v2.0.9 and later
                                                                	;mov	cl,[character]
0000041C: 88 D1                                                 	mov	cl,dl
                                                                	;sys	_stdio,3 ; write char to STDERR
0000041E: BB 03 00 00 00                                        	mov	ebx,3
00000423: B8 2E 00 00 00                                        	mov	eax,46 ; sysstdio
00000428: CD 40                                                 	int	0x40
                                                                end if
0000042A: 5B                                                    	pop	ebx
0000042B: C3                                                    	ret
                                                                display_number:
0000042C: 53                                                    	push	ebx
0000042D: B9 00 CA 9A 3B                                        	mov	ecx,1000000000
00000432: 31 D2                                                 	xor	edx,edx
00000434: 30 DB                                                 	xor	bl,bl
                                                                      display_loop:
00000436: F7 F1                                                 	div	ecx
00000438: 52                                                    	push	edx
00000439: 83 F9 01                                              	cmp	ecx,1
0000043C: 74 0A                                                 	je	display_digit
0000043E: 08 DB                                                 	or	bl,bl
00000440: 75 06                                                 	jnz	display_digit
00000442: 08 C0                                                 	or	al,al
00000444: 74 10                                                 	jz	digit_ok
00000446: F6 D3                                                 	not	bl
                                                                      display_digit:
00000448: 88 C2                                                 	mov	dl,al
0000044A: 80 C2 30                                              	add	dl,30h
0000044D: 53 51                                                 	push	ebx ecx
0000044F: E8 C7 FF FF FF                                        	call	display_character
00000454: 59 5B                                                 	pop	ecx ebx
                                                                      digit_ok:
00000456: 89 C8                                                 	mov	eax,ecx
00000458: 31 D2                                                 	xor	edx,edx
0000045A: B9 0A 00 00 00                                        	mov	ecx,10
0000045F: F7 F1                                                 	div	ecx
00000461: 89 C1                                                 	mov	ecx,eax
00000463: 58                                                    	pop	eax
00000464: 09 C9                                                 	or	ecx,ecx
00000466: 75 CE                                                 	jnz	display_loop
00000468: 5B                                                    	pop	ebx
00000469: C3                                                    	ret
                                                                
                                                                display_user_messages:
                                                                
                                                                if 0
                                                                	; LINUX
                                                                	mov	[displayed_count],0
                                                                	call	show_display_buffer
                                                                	cmp	[displayed_count],0
                                                                	je	line_break_ok
                                                                	cmp	[last_displayed],0Ah
                                                                	je	line_break_ok
                                                                	mov	dl,0Ah
                                                                	call	display_character
                                                                      line_break_ok:
                                                                	ret
                                                                display_block:
                                                                	jecxz	block_displayed
                                                                	add	[displayed_count],ecx
                                                                	mov	al,[esi+ecx-1]
                                                                	mov	[last_displayed],al
                                                                	push	ebx
                                                                	mov	eax,4
                                                                	mov	ebx,[con_handle]
                                                                	mov	edx,ecx
                                                                	mov	ecx,esi
                                                                	int	0x80
                                                                	pop	ebx
                                                                      block_displayed:
                                                                	ret
                                                                else
                                                                	; WINDOWS
0000046A: C7 05 6F A6 01 00 00 00 00 00                         	mov	[displayed_count],0
00000474: E8 55 4F 00 00                                        	call	show_display_buffer
00000479: 83 3D 6F A6 01 00 01                                  	cmp	[displayed_count],1
00000480: 72 2D                                                 	jb	line_break_ok
00000482: 74 12                                                 	je	make_line_break
00000484: 66 A1 73 A6 01 00                                     	mov	ax,word [last_displayed]
0000048A: 66 3D 0D 0A                                           	cmp	ax,0A0Dh
0000048E: 74 1F                                                 	je	line_break_ok
00000490: 66 3D 0A 0D                                           	cmp	ax,0D0Ah
00000494: 74 19                                                 	je	line_break_ok
                                                                      make_line_break:
                                                                	; TRDOS 386
                                                                	;mov	word [buffer],0A0Dh
00000496: 53                                                    	push	ebx
                                                                	; TRDOS 386 v2
                                                                	; write TTY (ROMBIOS Int 10h simulation)
                                                                	;mov	al,0Dh
                                                                	;mov	ah,0Eh
                                                                	;mov	bx,07h
                                                                	;int	31h
                                                                	;mov	al,0Ah
                                                                	;int	31h
                                                                	; TRDOS 386 v2.0.9 and later
                                                                	; sys	_stdio,3, 0Dh
                                                                	; sys	_stdio,3, 0Ah
00000497: B1 0D                                                 	mov	cl,0Dh
00000499: BB 03 00 00 00                                        	mov	ebx,3 ; write to STDERR
0000049E: B8 2E 00 00 00                                        	mov	eax,46 ; sysstdio
000004A3: CD 40                                                 	int	0x40
000004A5: B1 0A                                                 	mov	cl,0Ah
                                                                	;mov	ebx,3 ; write to STDERR
000004A7: B8 2E 00 00 00                                        	mov	eax,46 ; sysstdio
                                                                	;mov	al,46
000004AC: CD 40                                                 	int	0x40
000004AE: 5B                                                    	pop	ebx
                                                                      line_break_ok:
000004AF: C3                                                    	ret
                                                                
                                                                display_block:
                                                                	; WINDOWS
000004B0: 01 0D 6F A6 01 00                                     	add	[displayed_count],ecx
000004B6: 83 F9 01                                              	cmp	ecx,1
000004B9: 77 11                                                 	ja	take_last_two_characters
000004BB: 72 2D                                                 	jb	block_displayed
000004BD: A0 74 A6 01 00                                        	mov	al,[last_displayed+1]
000004C2: 8A 26                                                 	mov	ah,[esi]
000004C4: 66 A3 73 A6 01 00                                     	mov	word [last_displayed],ax
000004CA: EB 0B                                                 	jmp	block_ok
                                                                      take_last_two_characters:
000004CC: 66 8B 44 0E FE                                        	mov	ax,[esi+ecx-2]
000004D1: 66 A3 73 A6 01 00                                     	mov	word [last_displayed],ax
                                                                      block_ok:
                                                                	; WINDOWS
                                                                	;push	ecx
                                                                	;push	[con_handle]
                                                                	;call	[GetStdHandle]
                                                                	;pop	ecx
                                                                	;push	0
                                                                	;push	bytes_count
                                                                	;push	ecx
                                                                	;push	esi
                                                                	;push	eax
                                                                	;call	[WriteFile]
                                                                	; LINUX
                                                                	;push	ebx
                                                                	;mov	eax,4
                                                                	;mov	ebx,[con_handle]
                                                                	;mov	edx,ecx
                                                                	;mov	ecx,esi
                                                                	;int	0x80
                                                                	;pop	ebx
                                                                	; DOS
                                                                        ;display_character:
                                                                	;lods	byte [esi]
                                                                	;mov	dl,al
                                                                	;mov	ah,2
                                                                	;int	21h
                                                                	;loopd	display_character
                                                                	;ret
                                                                	; TRDOS 386
                                                                	; sys _msg, esi, ecx, 07h
                                                                	; ecx = character/byte count
                                                                	;mov	ebx,esi ; buffer
                                                                	;mov	edx,07h ; color
                                                                	;mov	eax,35 ; sysmsg
                                                                	;int	0x40 ; TRDOS 386 system call	
                                                                
                                                                	; TRDOS 386 v2.0.9 and later
                                                                	; systdio - write a char to STDERR
000004D7: BB 03 00 00 00                                        	mov	ebx,3	; write to STDERR
                                                                      write_to_stderr_loop:
000004DC: 51                                                    	push	ecx
000004DD: AC                                                    	lods	byte [esi] ; lodsb	
000004DE: 88 C1                                                 	mov	cl,al
000004E0: B8 2E 00 00 00                                        	mov	eax,46	; sysstdio
                                                                	;mov	ebx,3	; write to STDERR
                                                                	;sys	_stdio,3	
000004E5: CD 40                                                 	int	0x40	; TRDOS 386 system call
000004E7: 59                                                    	pop	ecx
000004E8: E2 F2                                                 	loop	write_to_stderr_loop
                                                                
                                                                      block_displayed:
000004EA: C3                                                    	ret
                                                                
                                                                end if
                                                                
                                                                fatal_error:
                                                                	; [esp] = error message address
                                                                	; TRDOS 386
                                                                	;mov	[con_handle],2
000004EB: BE D3 06 00 00                                        	mov	esi,error_prefix
000004F0: E8 0E FF FF FF                                        	call	display_string
000004F5: 5E                                                    	pop	esi
000004F6: E8 08 FF FF FF                                        	call	display_string
000004FB: BE DB 06 00 00                                        	mov	esi,error_suffix
00000500: E8 FE FE FF FF                                        	call	display_string
00000505: B0 FF                                                 	mov	al,0FFh
00000507: E9 17 FE FF FF                                        	jmp	exit_program
                                                                assembler_error:
                                                                	; TRDOS 386
                                                                	;mov	[con_handle],2
0000050C: E8 59 FF FF FF                                        	call	display_user_messages
00000511: 8B 1D 80 A1 01 00                                     	mov	ebx,[current_line]
00000517: 85 DB                                                 	test	ebx,ebx
00000519: 0F 84 87 01 00 00                                     	jz	display_error_message
0000051F: 6A 00                                                 	pushd	0
                                                                      get_error_lines:
00000521: 8B 03                                                 	mov	eax,[ebx]
00000523: 80 38 00                                              	cmp	byte [eax],0
00000526: 74 13                                                 	je	get_next_error_line
00000528: 53                                                    	push	ebx
00000529: F6 43 07 80                                           	test	byte [ebx+7],80h
0000052D: 74 11                                                 	jz	display_error_line
0000052F: 89 DA                                                 	mov	edx,ebx
                                                                      find_definition_origin:
00000531: 8B 52 0C                                              	mov	edx,[edx+12]
00000534: F6 42 07 80                                           	test	byte [edx+7],80h
00000538: 75 F7                                                 	jnz	find_definition_origin
0000053A: 52                                                    	push	edx
                                                                      get_next_error_line:
0000053B: 8B 5B 08                                              	mov	ebx,[ebx+8]
0000053E: EB E1                                                 	jmp	get_error_lines
                                                                      display_error_line:
00000540: 8B 33                                                 	mov	esi,[ebx]
00000542: E8 BC FE FF FF                                        	call	display_string
00000547: BE DF 06 00 00                                        	mov	esi,line_number_start
0000054C: E8 B2 FE FF FF                                        	call	display_string
00000551: 8B 43 04                                              	mov	eax,[ebx+4]
00000554: 25 FF FF FF 7F                                        	and	eax,7FFFFFFFh
00000559: E8 CE FE FF FF                                        	call	display_number
0000055E: B2 5D                                                 	mov	dl,']'
00000560: E8 B6 FE FF FF                                        	call	display_character
00000565: 5E                                                    	pop	esi
00000566: 39 F3                                                 	cmp	ebx,esi
00000568: 74 32                                                 	je	line_number_ok
0000056A: B2 20                                                 	mov	dl,20h
0000056C: E8 AA FE FF FF                                        	call	display_character
00000571: 56                                                    	push	esi
00000572: 8B 36                                                 	mov	esi,[esi]
00000574: 0F B6 0E                                              	movzx	ecx,byte [esi]
00000577: 46                                                    	inc	esi
00000578: E8 33 FF FF FF                                        	call	display_block
0000057D: BE DF 06 00 00                                        	mov	esi,line_number_start
00000582: E8 7C FE FF FF                                        	call	display_string
00000587: 5E                                                    	pop	esi
00000588: 8B 46 04                                              	mov	eax,[esi+4]
0000058B: 25 FF FF FF 7F                                        	and	eax,7FFFFFFFh
00000590: E8 97 FE FF FF                                        	call	display_number
00000595: B2 5D                                                 	mov	dl,']'
00000597: E8 7F FE FF FF                                        	call	display_character
                                                                      line_number_ok:
0000059C: BE E2 06 00 00                                        	mov	esi,line_data_start
000005A1: E8 5D FE FF FF                                        	call	display_string
000005A6: 89 DE                                                 	mov	esi,ebx
000005A8: 8B 16                                                 	mov	edx,[esi]
000005AA: E8 B9 FD FF FF                                        	call	open
000005AF: B0 02                                                 	mov	al,2
000005B1: 31 D2                                                 	xor	edx,edx
000005B3: E8 34 FE FF FF                                        	call	lseek
000005B8: 8B 56 08                                              	mov	edx,[esi+8]
000005BB: 29 D0                                                 	sub	eax,edx
000005BD: 74 52                                                 	jz	line_data_displayed
000005BF: 50                                                    	push	eax
000005C0: 30 C0                                                 	xor	al,al
000005C2: E8 25 FE FF FF                                        	call	lseek
                                                                	;mov	ecx,[esp]
                                                                	; TRDOS 386
000005C7: 59                                                    	pop	ecx
000005C8: 8B 15 40 A1 01 00                                     	mov	edx,[additional_memory]
000005CE: 8D 04 0A                                              	lea	eax,[edx+ecx]
000005D1: 3B 05 44 A1 01 00                                     	cmp	eax,[additional_memory_end]
000005D7: 0F 87 BF 02 00 00                                     	ja	out_of_memory
                                                                	; TRDOS 386
                                                                	;push	ecx
000005DD: E8 E6 FD FF FF                                        	call	read
000005E2: E8 D9 FD FF FF                                        	call	close
                                                                	;pop	ecx
000005E7: 8B 35 40 A1 01 00                                     	mov	esi,[additional_memory]
                                                                      get_line_data:
000005ED: 8A 06                                                 	mov	al,[esi]
000005EF: 3C 0A                                                 	cmp	al,0Ah
000005F1: 74 0F                                                 	je	display_line_data
000005F3: 3C 0D                                                 	cmp	al,0Dh
000005F5: 74 0B                                                 	je	display_line_data
000005F7: 3C 1A                                                 	cmp	al,1Ah
000005F9: 74 07                                                 	je	display_line_data
000005FB: 08 C0                                                 	or	al,al
000005FD: 74 03                                                 	jz	display_line_data
000005FF: 46                                                    	inc	esi
00000600: E2 EB                                                 	loop	get_line_data
                                                                      display_line_data:
00000602: 89 F1                                                 	mov	ecx,esi
00000604: 8B 35 40 A1 01 00                                     	mov	esi,[additional_memory]
0000060A: 29 F1                                                 	sub	ecx,esi
0000060C: E8 9F FE FF FF                                        	call	display_block
                                                                      line_data_displayed:
                                                                	; LINUX
                                                                	;mov	esi,lf
                                                                	; WINDOWS & TRDOS 386
00000611: BE DC 06 00 00                                        	mov	esi,cr_lf
00000616: E8 E8 FD FF FF                                        	call	display_string
0000061B: 5B                                                    	pop	ebx
0000061C: 09 DB                                                 	or	ebx,ebx
0000061E: 0F 85 1C FF FF FF                                     	jnz	display_error_line
00000624: 80 3D 75 A6 01 00 00                                  	cmp	[preprocessing_done],0
0000062B: 74 79                                                 	je	display_error_message
0000062D: BE E6 06 00 00                                        	mov	esi,preprocessed_instruction_prefix
00000632: E8 CC FD FF FF                                        	call	display_string
00000637: 8B 35 80 A1 01 00                                     	mov	esi,[current_line]
0000063D: 83 C6 10                                              	add	esi,16
00000640: 8B 3D 40 A1 01 00                                     	mov	edi,[additional_memory]
00000646: 30 D2                                                 	xor	dl,dl
                                                                      convert_instruction:
00000648: AC                                                    	lodsb
00000649: 3C 1A                                                 	cmp	al,1Ah
0000064B: 74 11                                                 	je	copy_symbol
0000064D: 3C 22                                                 	cmp	al,22h
0000064F: 74 0D                                                 	je	copy_symbol
00000651: 3C 3B                                                 	cmp	al,3Bh
00000653: 74 39                                                 	je	instruction_converted
00000655: AA                                                    	stosb
00000656: 08 C0                                                 	or	al,al
00000658: 74 34                                                 	jz	instruction_converted
0000065A: 30 D2                                                 	xor	dl,dl
0000065C: EB EA                                                 	jmp	convert_instruction
                                                                      copy_symbol:
0000065E: 08 D2                                                 	or	dl,dl
00000660: 74 04                                                 	jz	space_ok
00000662: C6 07 20                                              	mov	byte [edi],20h
00000665: 47                                                    	inc	edi
                                                                      space_ok:
00000666: 3C 22                                                 	cmp	al,22h
00000668: 74 0B                                                 	je	quoted
0000066A: AC                                                    	lodsb
0000066B: 0F B6 C8                                              	movzx	ecx,al
0000066E: F3 A4                                                 	rep	movsb
00000670: 80 CA FF                                              	or	dl,-1
00000673: EB D3                                                 	jmp	convert_instruction
                                                                      quoted:
00000675: B0 27                                                 	mov	al,27h
00000677: AA                                                    	stosb
00000678: AD                                                    	lodsd
00000679: 89 C1                                                 	mov	ecx,eax
0000067B: E3 09                                                 	jecxz	quoted_copied
                                                                      copy_quoted:
0000067D: AC                                                    	lodsb
0000067E: AA                                                    	stosb
0000067F: 3C 27                                                 	cmp	al,27h
00000681: 75 01                                                 	jne	quote_ok
00000683: AA                                                    	stosb
                                                                      quote_ok:
00000684: E2 F7                                                 	loop	copy_quoted
                                                                      quoted_copied:
00000686: B0 27                                                 	mov	al,27h
00000688: AA                                                    	stosb
00000689: 80 CA FF                                              	or	dl,-1
0000068C: EB BA                                                 	jmp	convert_instruction
                                                                      instruction_converted:
0000068E: 30 C0                                                 	xor	al,al
00000690: AA                                                    	stosb
00000691: 8B 35 40 A1 01 00                                     	mov	esi,[additional_memory]
00000697: E8 67 FD FF FF                                        	call	display_string
                                                                	;mov	esi,lf
                                                                	; TRDOS 386
0000069C: BE DC 06 00 00                                        	mov	esi,cr_lf
000006A1: E8 5D FD FF FF                                        	call	display_string
                                                                      display_error_message:
000006A6: BE D3 06 00 00                                        	mov	esi,error_prefix
000006AB: E8 53 FD FF FF                                        	call	display_string
000006B0: 5E                                                    	pop	esi
000006B1: E8 4D FD FF FF                                        	call	display_string
000006B6: BE DB 06 00 00                                        	mov	esi,error_suffix
000006BB: E8 43 FD FF FF                                        	call	display_string
000006C0: B0 02                                                 	mov	al,2
000006C2: E9 5C FC FF FF                                        	jmp	exit_program
                                                                
                                                                make_timestamp:
000006C7: B8 0D 00 00 00                                        	mov	eax,13
                                                                	; LINUX
                                                                	;mov	ebx,timestamp
                                                                	;int	0x80
                                                                	;mov	eax,dword [timestamp]
                                                                	;mov	edx,dword [timestamp+4]
                                                                	; TRDOS 386
                                                                	;mov	ebx,0
000006CC: 31 DB                                                 	xor 	ebx,ebx ; get UNIX/EPOCH timestamp
000006CE: CD 40                                                 	int	0x40	; eax = 13 -> systime
                                                                	; eax = timestamp
000006D0: 31 D2                                                 	xor	edx,edx
000006D2: C3                                                    	ret
                                                                
000006D3: 65 72 72 6F 72 3A 20 00                               error_prefix db 'error: ',0
000006DB: 2E                                                    error_suffix db '.'
                                                                ;lf db 0xA,0
                                                                ; TRDOS 386 (& WINDOWS)
000006DC: 0D 0A 00                                              cr_lf db 0Dh,0Ah,0
000006DF: 20 5B 00                                              line_number_start db ' [',0
                                                                ;line_data_start db ':',0xA,0
000006E2: 3A 0D 0A 00                                           line_data_start db ':',0Dh,0Ah,0
000006E6: 70 72 6F 63 65 73 73 65 64 3A 20 00                   preprocessed_instruction_prefix db 'processed: ',0
                                                                
                                                                
                                                                include '..\version.inc'
                                                                
                                                                ; flat assembler  version 1.73
                                                                ; Copyright (c) 1999-2023, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                ;
                                                                ; This programs is free for commercial and non-commercial use as long as
                                                                ; the following conditions are adhered to.
                                                                ;
                                                                ; Redistribution and use in source and binary forms, with or without
                                                                ; modification, are permitted provided that the following conditions are
                                                                ; met:
                                                                ;
                                                                ; 1. Redistributions of source code must retain the above copyright notice,
                                                                ;    this list of conditions and the following disclaimer.
                                                                ; 2. Redistributions in binary form must reproduce the above copyright
                                                                ;    notice, this list of conditions and the following disclaimer in the
                                                                ;    documentation and/or other materials provided with the distribution.
                                                                ;
                                                                ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
                                                                ; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
                                                                ; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
                                                                ; PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
                                                                ; CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
                                                                ; EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
                                                                ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                                ; PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
                                                                ; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
                                                                ; NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                                                ; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                                ;
                                                                ; The licence and distribution terms for any publically available
                                                                ; version or derivative of this code cannot be changed. i.e. this code
                                                                ; cannot simply be copied and put under another distribution licence
                                                                ; (including the GNU Public Licence).
                                                                
                                                                VERSION_STRING equ "1.73.32"
                                                                
                                                                VERSION_MAJOR = 1
                                                                VERSION_MINOR = 73
                                                                
                                                                
000006F2: 43 6F 70 79 72 69 67 68 74 20 28 63 29 20 31 39       _copyright db 'Copyright (c) 1999-2022, Tomasz Grysztar',0xA,0
          39 39 2D 32 30 32 32 2C 20 54 6F 6D 61 73 7A 20       
          47 72 79 73 7A 74 61 72 0A 00                         
                                                                
0000071C: 66 6C 61 74 20 61 73 73 65 6D 62 6C 65 72 20 20       _logo db 'flat assembler  version ',VERSION_STRING,0
          76 65 72 73 69 6F 6E 20 31 2E 37 33 2E 33 32 00       
                                                                ; LINUX
                                                                ;_usage db 0xA
                                                                ;      db 'usage: fasm <source> [output]',0xA
                                                                ;      db 'optional settings:',0xA
                                                                ;      db ' -m <limit>         set the limit in kilobytes for the available memory',0xA
                                                                ;      db ' -p <limit>         set the maximum allowed number of passes',0xA
                                                                ;      db ' -d <name>=<value>  define symbolic variable',0xA
                                                                ;      db ' -s <file>          dump symbolic information for debugging',0xA
                                                                ;      db 0
                                                                ; WINDOWS & TRDOS 386
0000073C: 0D 0A                                                 _usage db 0Dh,0Ah
0000073E: 75 73 61 67 65 3A 20 66 61 73 6D 20 3C 73 6F 75              db 'usage: fasm <source> [output]',0Dh,0Ah
          72 63 65 3E 20 5B 6F 75 74 70 75 74 5D 0D 0A          
0000075D: 6F 70 74 69 6F 6E 61 6C 20 73 65 74 74 69 6E 67              db 'optional settings:',0Dh,0Ah
          73 3A 0D 0A                                           
00000771: 20 2D 6D 20 3C 6C 69 6D 69 74 3E 20 20 20 20 20              db ' -m <limit>         set the limit in kilobytes for the available memory',0Dh,0Ah
          20 20 20 20 73 65 74 20 74 68 65 20 6C 69 6D 69       
          74 20 69 6E 20 6B 69 6C 6F 62 79 74 65 73 20 66       
          6F 72 20 74 68 65 20 61 76 61 69 6C 61 62 6C 65       
          20 6D 65 6D 6F 72 79 0D 0A                            
000007BA: 20 2D 70 20 3C 6C 69 6D 69 74 3E 20 20 20 20 20              db ' -p <limit>         set the maximum allowed number of passes',0Dh,0Ah
          20 20 20 20 73 65 74 20 74 68 65 20 6D 61 78 69       
          6D 75 6D 20 61 6C 6C 6F 77 65 64 20 6E 75 6D 62       
          65 72 20 6F 66 20 70 61 73 73 65 73 0D 0A             
000007F8: 20 2D 64 20 3C 6E 61 6D 65 3E 3D 3C 76 61 6C 75              db ' -d <name>=<value>  define symbolic variable',0Dh,0Ah
          65 3E 20 20 64 65 66 69 6E 65 20 73 79 6D 62 6F       
          6C 69 63 20 76 61 72 69 61 62 6C 65 0D 0A             
00000826: 20 2D 73 20 3C 66 69 6C 65 3E 20 20 20 20 20 20              db ' -s <file>          dump symbolic information for debugging',0Dh,0Ah
          20 20 20 20 64 75 6D 70 20 73 79 6D 62 6F 6C 69       
          63 20 69 6E 66 6F 72 6D 61 74 69 6F 6E 20 66 6F       
          72 20 64 65 62 75 67 67 69 6E 67 0D 0A                
00000863: 00                                                           db 0
                                                                
00000864: 20 20 28 00                                           _memory_prefix db '  (',0
                                                                ; LINUX
                                                                ;_memory_suffix db ' kilobytes memory)',0xA,0
                                                                ; TRDOS 386 (& WINDOWS)
00000868: 20 6B 69 6C 6F 62 79 74 65 73 20 6D 65 6D 6F 72       _memory_suffix db ' kilobytes memory)',0Dh,0Ah,0
          79 29 0D 0A 00                                        
0000087D: 20 70 61 73 73 65 73 2C 20 00                         _passes_suffix db ' passes, ',0
00000887: 20 73 65 63 6F 6E 64 73 2C 20 00                      _seconds_suffix db ' seconds, ',0
                                                                ; LINUX
                                                                ;_bytes_suffix db ' bytes.',0xA,0
                                                                ; TRDOS 386 (& WINDOWS)
00000892: 20 62 79 74 65 73 2E 0D 0A 00                         _bytes_suffix db ' bytes.',0Dh,0Ah,0
                                                                
                                                                include '..\errors.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                out_of_memory:
0000089C: 68 4E 9D 01 00                                        	push	_out_of_memory
000008A1: E9 45 FC FF FF                                        	jmp	fatal_error
                                                                stack_overflow:
000008A6: 68 5C 9D 01 00                                        	push	_stack_overflow
000008AB: E9 3B FC FF FF                                        	jmp	fatal_error
                                                                main_file_not_found:
000008B0: 68 6F 9D 01 00                                        	push	_main_file_not_found
000008B5: E9 31 FC FF FF                                        	jmp	fatal_error
                                                                write_failed:
000008BA: 68 D6 9D 01 00                                        	push	_write_failed
000008BF: E9 27 FC FF FF                                        	jmp	fatal_error
                                                                
                                                                code_cannot_be_generated:
000008C4: 68 85 9D 01 00                                        	push	_code_cannot_be_generated
000008C9: EB 0C                                                 	jmp	general_error
                                                                format_limitations_exceeded:
000008CB: 68 9E 9D 01 00                                        	push	_format_limitations_exceeded
000008D0: EB 05                                                 	jmp	general_error
                                                                invalid_definition:
000008D2: 68 BA 9D 01 00                                        	push	_invalid_definition
                                                                    general_error:
000008D7: 83 3D 58 A1 01 00 00                                  	cmp	[symbols_file],0
000008DE: 0F 84 07 FC FF FF                                     	je	fatal_error
000008E4: E8 D3 06 00 00                                        	call	dump_preprocessed_source
000008E9: E9 FD FB FF FF                                        	jmp	fatal_error
                                                                
                                                                file_not_found:
000008EE: 68 E3 9D 01 00                                        	push	_file_not_found
000008F3: E9 C9 01 00 00                                        	jmp	error_with_source
                                                                error_reading_file:
000008F8: 68 F2 9D 01 00                                        	push	_error_reading_file
000008FD: E9 BF 01 00 00                                        	jmp	error_with_source
                                                                invalid_file_format:
00000902: 68 05 9E 01 00                                        	push	_invalid_file_format
00000907: E9 B5 01 00 00                                        	jmp	error_with_source
                                                                invalid_macro_arguments:
0000090C: 68 19 9E 01 00                                        	push	_invalid_macro_arguments
00000911: E9 AB 01 00 00                                        	jmp	error_with_source
                                                                incomplete_macro:
00000916: 68 31 9E 01 00                                        	push	_incomplete_macro
0000091B: E9 A1 01 00 00                                        	jmp	error_with_source
                                                                unexpected_characters:
00000920: 68 42 9E 01 00                                        	push	_unexpected_characters
00000925: E9 97 01 00 00                                        	jmp	error_with_source
                                                                invalid_argument:
0000092A: 68 58 9E 01 00                                        	push	_invalid_argument
0000092F: E9 8D 01 00 00                                        	jmp	error_with_source
                                                                illegal_instruction:
00000934: 68 69 9E 01 00                                        	push	_illegal_instruction
00000939: E9 83 01 00 00                                        	jmp	error_with_source
                                                                invalid_operand:
0000093E: 68 7D 9E 01 00                                        	push	_invalid_operand
00000943: E9 79 01 00 00                                        	jmp	error_with_source
                                                                invalid_operand_size:
00000948: 68 8D 9E 01 00                                        	push	_invalid_operand_size
0000094D: E9 6F 01 00 00                                        	jmp	error_with_source
                                                                operand_size_not_specified:
00000952: 68 A5 9E 01 00                                        	push	_operand_size_not_specified
00000957: E9 65 01 00 00                                        	jmp	error_with_source
                                                                operand_sizes_do_not_match:
0000095C: 68 C0 9E 01 00                                        	push	_operand_sizes_do_not_match
00000961: E9 5B 01 00 00                                        	jmp	error_with_source
                                                                invalid_address_size:
00000966: 68 DB 9E 01 00                                        	push	_invalid_address_size
0000096B: E9 51 01 00 00                                        	jmp	error_with_source
                                                                address_sizes_do_not_agree:
00000970: 68 F9 9E 01 00                                        	push	_address_sizes_do_not_agree
00000975: E9 47 01 00 00                                        	jmp	error_with_source
                                                                disallowed_combination_of_registers:
0000097A: 68 14 9F 01 00                                        	push	_disallowed_combination_of_registers
0000097F: E9 3D 01 00 00                                        	jmp	error_with_source
                                                                long_immediate_not_encodable:
00000984: 68 38 9F 01 00                                        	push	_long_immediate_not_encodable
00000989: E9 33 01 00 00                                        	jmp	error_with_source
                                                                relative_jump_out_of_range:
0000098E: 68 5A 9F 01 00                                        	push	_relative_jump_out_of_range
00000993: E9 29 01 00 00                                        	jmp	error_with_source
                                                                invalid_expression:
00000998: 68 75 9F 01 00                                        	push	_invalid_expression
0000099D: E9 1F 01 00 00                                        	jmp	error_with_source
                                                                invalid_address:
000009A2: 68 88 9F 01 00                                        	push	_invalid_address
000009A7: E9 15 01 00 00                                        	jmp	error_with_source
                                                                invalid_value:
000009AC: 68 98 9F 01 00                                        	push	_invalid_value
000009B1: E9 0B 01 00 00                                        	jmp	error_with_source
                                                                value_out_of_range:
000009B6: 68 A6 9F 01 00                                        	push	_value_out_of_range
000009BB: E9 01 01 00 00                                        	jmp	error_with_source
                                                                undefined_symbol:
000009C0: BF D3 A4 01 00                                        	mov	edi,message
000009C5: BE B9 9F 01 00                                        	mov	esi,_undefined_symbol
000009CA: E8 31 00 00 00                                        	call	copy_asciiz
000009CF: 68 D3 A4 01 00                                        	push	message
000009D4: 83 3D E4 A1 01 00 00                                  	cmp	[error_info],0
000009DB: 0F 84 E0 00 00 00                                     	je	error_with_source
000009E1: 8B 35 E4 A1 01 00                                     	mov	esi,[error_info]
000009E7: 8B 76 18                                              	mov	esi,[esi+24]
000009EA: 09 F6                                                 	or	esi,esi
000009EC: 0F 84 CF 00 00 00                                     	jz	error_with_source
000009F2: C6 47 FF 20                                           	mov	byte [edi-1],20h
000009F6: E8 0C 00 00 00                                        	call	write_quoted_symbol_name
000009FB: E9 C1 00 00 00                                        	jmp	error_with_source
                                                                    copy_asciiz:
00000A00: AC                                                    	lods	byte [esi]
00000A01: AA                                                    	stos	byte [edi]
00000A02: 84 C0                                                 	test	al,al
00000A04: 75 FA                                                 	jnz	copy_asciiz
00000A06: C3                                                    	ret
                                                                    write_quoted_symbol_name:
00000A07: B0 27                                                 	mov	al,27h
00000A09: AA                                                    	stosb
00000A0A: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00000A0E: F3 A4                                                 	rep	movs byte [edi],[esi]
00000A10: 66 B8 27 00                                           	mov	ax,27h
00000A14: 66 AB                                                 	stosw
00000A16: C3                                                    	ret
                                                                symbol_out_of_scope:
00000A17: BF D3 A4 01 00                                        	mov	edi,message
00000A1C: BE CA 9F 01 00                                        	mov	esi,_symbol_out_of_scope_1
00000A21: E8 DA FF FF FF                                        	call	copy_asciiz
00000A26: 83 3D E4 A1 01 00 00                                  	cmp	[error_info],0
00000A2D: 74 16                                                 	je	finish_symbol_out_of_scope_message
00000A2F: 8B 35 E4 A1 01 00                                     	mov	esi,[error_info]
00000A35: 8B 76 18                                              	mov	esi,[esi+24]
00000A38: 09 F6                                                 	or	esi,esi
00000A3A: 74 09                                                 	jz	finish_symbol_out_of_scope_message
00000A3C: C6 47 FF 20                                           	mov	byte [edi-1],20h
00000A40: E8 C2 FF FF FF                                        	call	write_quoted_symbol_name
                                                                    finish_symbol_out_of_scope_message:
00000A45: C6 47 FF 20                                           	mov	byte [edi-1],20h
00000A49: BE D1 9F 01 00                                        	mov	esi,_symbol_out_of_scope_2
00000A4E: E8 AD FF FF FF                                        	call	copy_asciiz
00000A53: 68 D3 A4 01 00                                        	push	message
00000A58: EB 67                                                 	jmp	error_with_source
                                                                invalid_use_of_symbol:
00000A5A: 68 DE 9F 01 00                                        	push	_invalid_use_of_symbol
00000A5F: EB 60                                                 	jmp	error_with_source
                                                                name_too_long:
00000A61: 68 F4 9F 01 00                                        	push	_name_too_long
00000A66: EB 59                                                 	jmp	error_with_source
                                                                invalid_name:
00000A68: 68 02 A0 01 00                                        	push	_invalid_name
00000A6D: EB 52                                                 	jmp	error_with_source
                                                                reserved_word_used_as_symbol:
00000A6F: 68 0F A0 01 00                                        	push	_reserved_word_used_as_symbol
00000A74: EB 4B                                                 	jmp	error_with_source
                                                                symbol_already_defined:
00000A76: 68 2C A0 01 00                                        	push	_symbol_already_defined
00000A7B: EB 44                                                 	jmp	error_with_source
                                                                missing_end_quote:
00000A7D: 68 43 A0 01 00                                        	push	_missing_end_quote
00000A82: EB 3D                                                 	jmp	error_with_source
                                                                missing_end_directive:
00000A84: 68 55 A0 01 00                                        	push	_missing_end_directive
00000A89: EB 36                                                 	jmp	error_with_source
                                                                unexpected_instruction:
00000A8B: 68 6B A0 01 00                                        	push	_unexpected_instruction
00000A90: EB 2F                                                 	jmp	error_with_source
                                                                extra_characters_on_line:
00000A92: 68 82 A0 01 00                                        	push	_extra_characters_on_line
00000A97: EB 28                                                 	jmp	error_with_source
                                                                section_not_aligned_enough:
00000A99: 68 9B A0 01 00                                        	push	_section_not_aligned_enough
00000A9E: EB 21                                                 	jmp	error_with_source
                                                                setting_already_specified:
00000AA0: 68 B9 A0 01 00                                        	push	_setting_already_specified
00000AA5: EB 1A                                                 	jmp	error_with_source
                                                                data_already_defined:
00000AA7: 68 D3 A0 01 00                                        	push	_data_already_defined
00000AAC: EB 13                                                 	jmp	error_with_source
                                                                too_many_repeats:
00000AAE: 68 E8 A0 01 00                                        	push	_too_many_repeats
00000AB3: EB 0C                                                 	jmp	error_with_source
                                                                assertion_failed:
00000AB5: 68 24 A1 01 00                                        	push	_assertion_failed
00000ABA: EB 05                                                 	jmp	error_with_source
                                                                invoked_error:
00000ABC: 68 F9 A0 01 00                                        	push	_invoked_error
                                                                    error_with_source:
00000AC1: 83 3D 58 A1 01 00 00                                  	cmp	[symbols_file],0
00000AC8: 0F 84 3E FA FF FF                                     	je	assembler_error
00000ACE: E8 E9 04 00 00                                        	call	dump_preprocessed_source
00000AD3: E8 A2 04 00 00                                        	call	restore_preprocessed_source
00000AD8: E9 2F FA FF FF                                        	jmp	assembler_error
                                                                
                                                                include '..\symbdump.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                dump_symbols:
00000ADD: 8B 3D 6C A1 01 00                                     	mov	edi,[code_start]
00000AE3: E8 0D 04 00 00                                        	call	setup_dump_header
00000AE8: 8B 35 50 A1 01 00                                     	mov	esi,[input_file]
00000AEE: E8 0D FF FF FF                                        	call	copy_asciiz
00000AF3: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
00000AF9: 0F 83 9D FD FF FF                                     	jae	out_of_memory
00000AFF: 89 F8                                                 	mov	eax,edi
00000B01: 29 D8                                                 	sub	eax,ebx
00000B03: 89 43 CC                                              	mov	[ebx-40h+0Ch],eax
00000B06: 8B 35 54 A1 01 00                                     	mov	esi,[output_file]
00000B0C: E8 EF FE FF FF                                        	call	copy_asciiz
00000B11: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
00000B17: 0F 83 7F FD FF FF                                     	jae	out_of_memory
00000B1D: 8B 15 48 A2 01 00                                     	mov	edx,[symbols_stream]
00000B23: 8B 2D 64 A1 01 00                                     	mov	ebp,[free_additional_memory]
00000B29: 83 25 50 A2 01 00 00                                  	and	[number_of_sections],0
00000B30: 80 3D C9 A2 01 00 04                                  	cmp	[output_format],4
00000B37: 74 1B                                                 	je	prepare_strings_table
00000B39: 80 3D C9 A2 01 00 05                                  	cmp	[output_format],5
00000B40: 0F 85 CC 00 00 00                                     	jne	strings_table_ready
00000B46: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
00000B4E: 0F 82 BE 00 00 00                                     	jc	strings_table_ready
                                                                      prepare_strings_table:
00000B54: 39 EA                                                 	cmp	edx,ebp
00000B56: 0F 84 B6 00 00 00                                     	je	strings_table_ready
00000B5C: 8A 02                                                 	mov	al,[edx]
00000B5E: 84 C0                                                 	test	al,al
00000B60: 74 10                                                 	jz	prepare_string
00000B62: 3C 80                                                 	cmp	al,80h
00000B64: 74 0C                                                 	je	prepare_string
00000B66: 83 C2 0C                                              	add	edx,0Ch
00000B69: 3C C0                                                 	cmp	al,0C0h
00000B6B: 72 E7                                                 	jb	prepare_strings_table
00000B6D: 83 C2 04                                              	add	edx,4
00000B70: EB E2                                                 	jmp	prepare_strings_table
                                                                      prepare_string:
00000B72: 89 FE                                                 	mov	esi,edi
00000B74: 29 DE                                                 	sub	esi,ebx
00000B76: 87 72 04                                              	xchg	esi,[edx+4]
00000B79: 84 C0                                                 	test	al,al
00000B7B: 74 23                                                 	jz	prepare_section_string
00000B7D: 81 4A 04 00 00 00 80                                  	or	dword [edx+4],1 shl 31
00000B84: 83 C2 0C                                              	add	edx,0Ch
                                                                      prepare_external_string:
00000B87: 8B 0E                                                 	mov	ecx,[esi]
00000B89: 83 C6 04                                              	add	esi,4
00000B8C: F3 A4                                                 	rep	movs byte [edi],[esi]
00000B8E: C6 07 00                                              	mov	byte [edi],0
00000B91: 47                                                    	inc	edi
00000B92: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
00000B98: 0F 83 FE FC FF FF                                     	jae	out_of_memory
00000B9E: EB B4                                                 	jmp	prepare_strings_table
                                                                      prepare_section_string:
00000BA0: 8B 0D 50 A2 01 00                                     	mov	ecx,[number_of_sections]
00000BA6: 89 C8                                                 	mov	eax,ecx
00000BA8: 40                                                    	inc	eax
00000BA9: A3 50 A2 01 00                                        	mov	[number_of_sections],eax
00000BAE: 87 42 04                                              	xchg	eax,[edx+4]
00000BB1: C1 E1 02                                              	shl	ecx,2
00000BB4: 03 0D 64 A1 01 00                                     	add	ecx,[free_additional_memory]
00000BBA: 89 01                                                 	mov	[ecx],eax
00000BBC: 83 C2 20                                              	add	edx,20h
00000BBF: 85 F6                                                 	test	esi,esi
00000BC1: 74 32                                                 	jz	prepare_default_section_string
00000BC3: 80 3D C9 A2 01 00 05                                  	cmp	[output_format],5
00000BCA: 75 BB                                                 	jne	prepare_external_string
00000BCC: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
00000BD4: 72 B1                                                 	jc	prepare_external_string
00000BD6: 8B 36                                                 	mov	esi,[esi]
00000BD8: 03 35 74 A2 01 00                                     	add	esi,[resource_data]
                                                                      copy_elf_section_name:
00000BDE: AC                                                    	lods	byte [esi]
00000BDF: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
00000BE5: 0F 83 B1 FC FF FF                                     	jae	out_of_memory
00000BEB: AA                                                    	stos	byte [edi]
00000BEC: 84 C0                                                 	test	al,al
00000BEE: 75 EE                                                 	jnz	copy_elf_section_name
00000BF0: E9 5F FF FF FF                                        	jmp	prepare_strings_table
                                                                      prepare_default_section_string:
00000BF5: B8 2E 66 6C 61                                        	mov	eax,'.fla'
00000BFA: AB                                                    	stos	dword [edi]
00000BFB: 66 B8 74 00                                           	mov	ax,'t'
00000BFF: 66 AB                                                 	stos	word [edi]
00000C01: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
00000C07: 0F 83 8F FC FF FF                                     	jae	out_of_memory
00000C0D: E9 42 FF FF FF                                        	jmp	prepare_strings_table
                                                                      strings_table_ready:
00000C12: 8B 15 F0 A1 01 00                                     	mov	edx,[tagged_blocks]
00000C18: 8B 2D 3C A1 01 00                                     	mov	ebp,[memory_end]
00000C1E: 2B 2D C0 A1 01 00                                     	sub	ebp,[labels_list]
00000C24: 01 D5                                                 	add	ebp,edx
                                                                      prepare_labels_dump:
00000C26: 39 EA                                                 	cmp	edx,ebp
00000C28: 0F 84 A2 00 00 00                                     	je	labels_dump_ok
00000C2E: 8B 42 18                                              	mov	eax,[edx+24]
00000C31: 85 C0                                                 	test	eax,eax
00000C33: 74 43                                                 	jz	label_dump_name_ok
00000C35: 3B 05 38 A1 01 00                                     	cmp	eax,[memory_start]
00000C3B: 72 14                                                 	jb	label_name_outside_source
00000C3D: 3B 05 68 A1 01 00                                     	cmp	eax,[source_start]
00000C43: 77 0C                                                 	ja	label_name_outside_source
00000C45: 2B 05 38 A1 01 00                                     	sub	eax,[memory_start]
00000C4B: 48                                                    	dec	eax
00000C4C: 89 42 18                                              	mov	[edx+24],eax
00000C4F: EB 27                                                 	jmp	label_dump_name_ok
                                                                      label_name_outside_source:
00000C51: 89 C6                                                 	mov	esi,eax
00000C53: 89 F8                                                 	mov	eax,edi
00000C55: 29 D8                                                 	sub	eax,ebx
00000C57: 0D 00 00 00 80                                        	or	eax,1 shl 31
00000C5C: 89 42 18                                              	mov	[edx+24],eax
00000C5F: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00000C63: 8D 44 0F 01                                           	lea	eax,[edi+ecx+1]
00000C67: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
00000C6D: 0F 83 29 FC FF FF                                     	jae	out_of_memory
00000C73: F3 A4                                                 	rep	movsb
00000C75: 30 C0                                                 	xor	al,al
00000C77: AA                                                    	stosb
                                                                      label_dump_name_ok:
00000C78: 8B 42 1C                                              	mov	eax,[edx+28]
00000C7B: 85 C0                                                 	test	eax,eax
00000C7D: 74 09                                                 	jz	label_dump_line_ok
00000C7F: 2B 05 38 A1 01 00                                     	sub	eax,[memory_start]
00000C85: 89 42 1C                                              	mov	[edx+28],eax
                                                                      label_dump_line_ok:
00000C88: F6 42 09 04                                           	test	byte [edx+9],4
00000C8C: 74 09                                                 	jz	convert_base_symbol_for_label
00000C8E: 31 C0                                                 	xor	eax,eax
00000C90: 89 02                                                 	mov	[edx],eax
00000C92: 89 42 04                                              	mov	[edx+4],eax
00000C95: EB 14                                                 	jmp	base_symbol_for_label_ok
                                                                      convert_base_symbol_for_label:
00000C97: 8B 42 14                                              	mov	eax,[edx+20]
00000C9A: 85 C0                                                 	test	eax,eax
00000C9C: 74 0D                                                 	jz	base_symbol_for_label_ok
00000C9E: 3B 05 48 A2 01 00                                     	cmp	eax,[symbols_stream]
00000CA4: 8B 40 04                                              	mov	eax,[eax+4]
00000CA7: 73 02                                                 	jae	base_symbol_for_label_ok
00000CA9: 31 C0                                                 	xor	eax,eax
                                                                      base_symbol_for_label_ok:
00000CAB: 89 42 14                                              	mov	[edx+20],eax
00000CAE: 66 A1 5E A1 01 00                                     	mov	ax,[current_pass]
00000CB4: 66 3B 42 10                                           	cmp	ax,[edx+16]
00000CB8: 74 04                                                 	je	label_defined_flag_ok
00000CBA: 80 62 08 FE                                           	and	byte [edx+8],not 1
                                                                      label_defined_flag_ok:
00000CBE: 66 3B 42 12                                           	cmp	ax,[edx+18]
00000CC2: 74 04                                                 	je	label_used_flag_ok
00000CC4: 80 62 08 F7                                           	and	byte [edx+8],not 8
                                                                      label_used_flag_ok:
00000CC8: 83 C2 20                                              	add	edx,LABEL_STRUCTURE_SIZE
00000CCB: E9 56 FF FF FF                                        	jmp	prepare_labels_dump
                                                                      labels_dump_ok:
00000CD0: 89 F8                                                 	mov	eax,edi
00000CD2: 29 D8                                                 	sub	eax,ebx
00000CD4: 89 43 D4                                              	mov	[ebx-40h+14h],eax
00000CD7: 83 C0 40                                              	add	eax,40h
00000CDA: 89 43 D8                                              	mov	[ebx-40h+18h],eax
00000CDD: 8B 0D 3C A1 01 00                                     	mov	ecx,[memory_end]
00000CE3: 2B 0D C0 A1 01 00                                     	sub	ecx,[labels_list]
00000CE9: 89 4B DC                                              	mov	[ebx-40h+1Ch],ecx
00000CEC: 01 C8                                                 	add	eax,ecx
00000CEE: 89 43 E0                                              	mov	[ebx-40h+20h],eax
00000CF1: 8B 0D 68 A1 01 00                                     	mov	ecx,[source_start]
00000CF7: 2B 0D 38 A1 01 00                                     	sub	ecx,[memory_start]
00000CFD: 89 4B E4                                              	mov	[ebx-40h+24h],ecx
00000D00: 01 C8                                                 	add	eax,ecx
00000D02: 89 43 E8                                              	mov	[ebx-40h+28h],eax
00000D05: A1 50 A2 01 00                                        	mov	eax,[number_of_sections]
00000D0A: C1 E0 02                                              	shl	eax,2
00000D0D: 89 43 F4                                              	mov	[ebx-40h+34h],eax
00000D10: E8 01 02 00 00                                        	call	prepare_preprocessed_source
00000D15: 8B 35 C0 A1 01 00                                     	mov	esi,[labels_list]
00000D1B: 89 FD                                                 	mov	ebp,edi
                                                                      make_lines_dump:
00000D1D: 3B 35 F0 A1 01 00                                     	cmp	esi,[tagged_blocks]
00000D23: 0F 84 98 00 00 00                                     	je	lines_dump_ok
00000D29: 8B 46 FC                                              	mov	eax,[esi-4]
00000D2C: 8B 4E F8                                              	mov	ecx,[esi-8]
00000D2F: 83 EE 08                                              	sub	esi,8
00000D32: 29 CE                                                 	sub	esi,ecx
00000D34: 83 F8 01                                              	cmp	eax,1
00000D37: 74 0B                                                 	je	process_line_dump
00000D39: 83 F8 02                                              	cmp	eax,2
00000D3C: 75 DF                                                 	jne	make_lines_dump
00000D3E: 83 43 FC 08                                           	add	dword [ebx-40h+3Ch],8
00000D42: EB D9                                                 	jmp	make_lines_dump
                                                                      process_line_dump:
00000D44: 53                                                    	push	ebx
00000D45: 8B 5E 08                                              	mov	ebx,[esi+8]
00000D48: 8B 46 04                                              	mov	eax,[esi+4]
00000D4B: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
00000D51: 03 05 7C A1 01 00                                     	add	eax,[headers_size]
00000D57: F6 43 0A 01                                           	test	byte [ebx+0Ah],1
00000D5B: 74 02                                                 	jz	store_offset
00000D5D: 31 C0                                                 	xor	eax,eax
                                                                      store_offset:
00000D5F: AB                                                    	stos	dword [edi]
00000D60: 8B 06                                                 	mov	eax,[esi]
00000D62: 2B 05 38 A1 01 00                                     	sub	eax,[memory_start]
00000D68: AB                                                    	stos	dword [edi]
00000D69: 8B 46 04                                              	mov	eax,[esi+4]
00000D6C: 31 D2                                                 	xor	edx,edx
00000D6E: 30 C9                                                 	xor	cl,cl
00000D70: 2B 03                                                 	sub	eax,[ebx]
00000D72: 1B 53 04                                              	sbb	edx,[ebx+4]
00000D75: 1A 4B 08                                              	sbb	cl,[ebx+8]
00000D78: AB                                                    	stos	dword [edi]
00000D79: 89 D0                                                 	mov	eax,edx
00000D7B: AB                                                    	stos	dword [edi]
00000D7C: 8B 43 10                                              	mov	eax,[ebx+10h]
00000D7F: AB                                                    	stos	dword [edi]
00000D80: 8B 43 14                                              	mov	eax,[ebx+14h]
00000D83: 85 C0                                                 	test	eax,eax
00000D85: 74 0D                                                 	jz	base_symbol_for_line_ok
00000D87: 3B 05 48 A2 01 00                                     	cmp	eax,[symbols_stream]
00000D8D: 8B 40 04                                              	mov	eax,[eax+4]
00000D90: 73 02                                                 	jae	base_symbol_for_line_ok
00000D92: 31 C0                                                 	xor	eax,eax
                                                                      base_symbol_for_line_ok:
00000D94: AB                                                    	stos	dword [edi]
00000D95: 8A 43 09                                              	mov	al,[ebx+9]
00000D98: AA                                                    	stos	byte [edi]
00000D99: 8A 46 10                                              	mov	al,[esi+10h]
00000D9C: AA                                                    	stos	byte [edi]
00000D9D: 8A 43 0A                                              	mov	al,[ebx+0Ah]
00000DA0: 24 01                                                 	and	al,1
00000DA2: AA                                                    	stos	byte [edi]
00000DA3: 88 C8                                                 	mov	al,cl
00000DA5: AA                                                    	stos	byte [edi]
00000DA6: 5B                                                    	pop	ebx
00000DA7: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
00000DAD: 0F 83 E9 FA FF FF                                     	jae	out_of_memory
00000DB3: 89 F8                                                 	mov	eax,edi
00000DB5: 83 E8 1C                                              	sub	eax,1Ch
00000DB8: 29 E8                                                 	sub	eax,ebp
00000DBA: 89 06                                                 	mov	[esi],eax
00000DBC: E9 5C FF FF FF                                        	jmp	make_lines_dump
                                                                      lines_dump_ok:
00000DC1: 89 FA                                                 	mov	edx,edi
00000DC3: A1 FC A1 01 00                                        	mov	eax,[current_offset]
00000DC8: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
00000DCE: 03 05 7C A1 01 00                                     	add	eax,[headers_size]
00000DD4: AB                                                    	stos	dword [edi]
00000DD5: 89 F9                                                 	mov	ecx,edi
00000DD7: 29 D9                                                 	sub	ecx,ebx
00000DD9: 2B 4B D4                                              	sub	ecx,[ebx-40h+14h]
00000DDC: 89 4B EC                                              	mov	[ebx-40h+2Ch],ecx
00000DDF: 03 4B E8                                              	add	ecx,[ebx-40h+28h]
00000DE2: 89 4B F0                                              	mov	[ebx-40h+30h],ecx
00000DE5: 03 4B F4                                              	add	ecx,[ebx-40h+34h]
00000DE8: 89 4B F8                                              	mov	[ebx-40h+38h],ecx
                                                                      find_inexisting_offsets:
00000DEB: 83 EA 1C                                              	sub	edx,1Ch
00000DEE: 39 EA                                                 	cmp	edx,ebp
00000DF0: 72 17                                                 	jb	write_symbols
00000DF2: F6 42 1A 01                                           	test	byte [edx+1Ah],1
00000DF6: 75 F3                                                 	jnz	find_inexisting_offsets
00000DF8: 3B 02                                                 	cmp	eax,[edx]
00000DFA: 72 04                                                 	jb	correct_inexisting_offset
00000DFC: 8B 02                                                 	mov	eax,[edx]
00000DFE: EB EB                                                 	jmp	find_inexisting_offsets
                                                                      correct_inexisting_offset:
00000E00: 83 22 00                                              	and	dword [edx],0
00000E03: 80 4A 1A 02                                           	or	byte [edx+1Ah],2
00000E07: EB E2                                                 	jmp	find_inexisting_offsets
                                                                      write_symbols:
00000E09: 8B 15 58 A1 01 00                                     	mov	edx,[symbols_file]
00000E0F: E8 90 F5 FF FF                                        	call	create
00000E14: 0F 82 A0 FA FF FF                                     	jc	write_failed
00000E1A: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
00000E20: 8B 4A 14                                              	mov	ecx,[edx+14h]
00000E23: 83 C1 40                                              	add	ecx,40h
00000E26: E8 AF F5 FF FF                                        	call	write
00000E2B: 0F 82 89 FA FF FF                                     	jc	write_failed
00000E31: 8B 15 F0 A1 01 00                                     	mov	edx,[tagged_blocks]
00000E37: 8B 0D 3C A1 01 00                                     	mov	ecx,[memory_end]
00000E3D: 2B 0D C0 A1 01 00                                     	sub	ecx,[labels_list]
00000E43: E8 92 F5 FF FF                                        	call	write
00000E48: 0F 82 6C FA FF FF                                     	jc	write_failed
00000E4E: 8B 15 38 A1 01 00                                     	mov	edx,[memory_start]
00000E54: 8B 0D 68 A1 01 00                                     	mov	ecx,[source_start]
00000E5A: 29 D1                                                 	sub	ecx,edx
00000E5C: E8 79 F5 FF FF                                        	call	write
00000E61: 0F 82 53 FA FF FF                                     	jc	write_failed
00000E67: 89 EA                                                 	mov	edx,ebp
00000E69: 89 F9                                                 	mov	ecx,edi
00000E6B: 29 D1                                                 	sub	ecx,edx
00000E6D: E8 68 F5 FF FF                                        	call	write
00000E72: 0F 82 42 FA FF FF                                     	jc	write_failed
00000E78: 8B 15 64 A1 01 00                                     	mov	edx,[free_additional_memory]
00000E7E: 8B 0D 50 A2 01 00                                     	mov	ecx,[number_of_sections]
00000E84: C1 E1 02                                              	shl	ecx,2
00000E87: E8 4E F5 FF FF                                        	call	write
00000E8C: 0F 82 28 FA FF FF                                     	jc	write_failed
00000E92: 8B 35 C0 A1 01 00                                     	mov	esi,[labels_list]
00000E98: 8B 3D 38 A1 01 00                                     	mov	edi,[memory_start]
                                                                      make_references_dump:
00000E9E: 3B 35 F0 A1 01 00                                     	cmp	esi,[tagged_blocks]
00000EA4: 74 34                                                 	je	references_dump_ok
00000EA6: 8B 46 FC                                              	mov	eax,[esi-4]
00000EA9: 8B 4E F8                                              	mov	ecx,[esi-8]
00000EAC: 83 EE 08                                              	sub	esi,8
00000EAF: 29 CE                                                 	sub	esi,ecx
00000EB1: 83 F8 02                                              	cmp	eax,2
00000EB4: 74 09                                                 	je	dump_reference
00000EB6: 83 F8 01                                              	cmp	eax,1
00000EB9: 75 E3                                                 	jne	make_references_dump
00000EBB: 8B 16                                                 	mov	edx,[esi]
00000EBD: EB DF                                                 	jmp	make_references_dump
                                                                      dump_reference:
00000EBF: A1 3C A1 01 00                                        	mov	eax,[memory_end]
00000EC4: 2B 06                                                 	sub	eax,[esi]
00000EC6: 83 E8 20                                              	sub	eax,LABEL_STRUCTURE_SIZE
00000EC9: AB                                                    	stosd
00000ECA: 89 D0                                                 	mov	eax,edx
00000ECC: AB                                                    	stosd
00000ECD: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
00000ED3: 72 C9                                                 	jb	make_references_dump
00000ED5: E9 C2 F9 FF FF                                        	jmp	out_of_memory
                                                                      references_dump_ok:
00000EDA: 8B 15 38 A1 01 00                                     	mov	edx,[memory_start]
00000EE0: 89 F9                                                 	mov	ecx,edi
00000EE2: 29 D1                                                 	sub	ecx,edx
00000EE4: E8 F1 F4 FF FF                                        	call	write
00000EE9: 0F 82 CB F9 FF FF                                     	jc	write_failed
00000EEF: E8 CC F4 FF FF                                        	call	close
00000EF4: C3                                                    	ret
                                                                      setup_dump_header:
00000EF5: 31 C0                                                 	xor	eax,eax
00000EF7: B9 10 00 00 00                                        	mov	ecx,40h shr 2
00000EFC: F3 AB                                                 	rep	stos dword [edi]
00000EFE: 89 FB                                                 	mov	ebx,edi
00000F00: C7 43 C0 66 61 73 1A                                  	mov	dword [ebx-40h],'fas'+1Ah shl 24
00000F07: C7 43 C4 01 49 40 00                                  	mov	dword [ebx-40h+4],VERSION_MAJOR + VERSION_MINOR shl 8 + 40h shl 16
00000F0E: C7 43 D0 40 00 00 00                                  	mov	dword [ebx-40h+10h],40h
00000F15: C3                                                    	ret
                                                                prepare_preprocessed_source:
00000F16: 8B 35 38 A1 01 00                                     	mov	esi,[memory_start]
00000F1C: 8B 2D 68 A1 01 00                                     	mov	ebp,[source_start]
00000F22: 85 ED                                                 	test	ebp,ebp
00000F24: 75 07                                                 	jnz	prepare_preprocessed_line
00000F26: 8B 2D 80 A1 01 00                                     	mov	ebp,[current_line]
00000F2C: 45                                                    	inc	ebp
                                                                      prepare_preprocessed_line:
00000F2D: 39 EE                                                 	cmp	esi,ebp
00000F2F: 73 26                                                 	jae	preprocessed_source_ok
00000F31: A1 38 A1 01 00                                        	mov	eax,[memory_start]
00000F36: 8B 15 50 A1 01 00                                     	mov	edx,[input_file]
00000F3C: 39 16                                                 	cmp	[esi],edx
00000F3E: 75 02                                                 	jne	line_not_from_main_input
00000F40: 89 06                                                 	mov	[esi],eax
                                                                      line_not_from_main_input:
00000F42: 29 06                                                 	sub	[esi],eax
00000F44: F6 46 07 80                                           	test	byte [esi+7],1 shl 7
00000F48: 74 06                                                 	jz	prepare_next_preprocessed_line
00000F4A: 29 46 08                                              	sub	[esi+8],eax
00000F4D: 29 46 0C                                              	sub	[esi+12],eax
                                                                      prepare_next_preprocessed_line:
00000F50: E8 03 00 00 00                                        	call	skip_preprocessed_line
00000F55: EB D6                                                 	jmp	prepare_preprocessed_line
                                                                      preprocessed_source_ok:
00000F57: C3                                                    	ret
                                                                      skip_preprocessed_line:
00000F58: 83 C6 10                                              	add	esi,16
                                                                      skip_preprocessed_line_content:
00000F5B: AC                                                    	lods	byte [esi]
00000F5C: 3C 1A                                                 	cmp	al,1Ah
00000F5E: 74 12                                                 	je	skip_preprocessed_symbol
00000F60: 3C 3B                                                 	cmp	al,3Bh
00000F62: 74 0E                                                 	je	skip_preprocessed_symbol
00000F64: 3C 22                                                 	cmp	al,22h
00000F66: 74 05                                                 	je	skip_preprocessed_string
00000F68: 08 C0                                                 	or	al,al
00000F6A: 75 EF                                                 	jnz	skip_preprocessed_line_content
00000F6C: C3                                                    	ret
                                                                      skip_preprocessed_string:
00000F6D: AD                                                    	lods	dword [esi]
00000F6E: 01 C6                                                 	add	esi,eax
00000F70: EB E9                                                 	jmp	skip_preprocessed_line_content
                                                                      skip_preprocessed_symbol:
00000F72: AC                                                    	lods	byte [esi]
00000F73: 0F B6 C0                                              	movzx	eax,al
00000F76: 01 C6                                                 	add	esi,eax
00000F78: EB E1                                                 	jmp	skip_preprocessed_line_content
                                                                restore_preprocessed_source:
00000F7A: 8B 35 38 A1 01 00                                     	mov	esi,[memory_start]
00000F80: 8B 2D 68 A1 01 00                                     	mov	ebp,[source_start]
00000F86: 85 ED                                                 	test	ebp,ebp
00000F88: 75 07                                                 	jnz	restore_preprocessed_line
00000F8A: 8B 2D 80 A1 01 00                                     	mov	ebp,[current_line]
00000F90: 45                                                    	inc	ebp
                                                                      restore_preprocessed_line:
00000F91: 39 EE                                                 	cmp	esi,ebp
00000F93: 73 26                                                 	jae	preprocessed_source_restored
00000F95: A1 38 A1 01 00                                        	mov	eax,[memory_start]
00000F9A: 01 06                                                 	add	[esi],eax
00000F9C: 39 06                                                 	cmp	[esi],eax
00000F9E: 75 08                                                 	jne	preprocessed_line_source_restored
00000FA0: 8B 15 50 A1 01 00                                     	mov	edx,[input_file]
00000FA6: 89 16                                                 	mov	[esi],edx
                                                                      preprocessed_line_source_restored:
00000FA8: F6 46 07 80                                           	test	byte [esi+7],1 shl 7
00000FAC: 74 06                                                 	jz	restore_next_preprocessed_line
00000FAE: 01 46 08                                              	add	[esi+8],eax
00000FB1: 01 46 0C                                              	add	[esi+12],eax
                                                                      restore_next_preprocessed_line:
00000FB4: E8 9F FF FF FF                                        	call	skip_preprocessed_line
00000FB9: EB D6                                                 	jmp	restore_preprocessed_line
                                                                      preprocessed_source_restored:
00000FBB: C3                                                    	ret
                                                                dump_preprocessed_source:
00000FBC: 8B 3D 64 A1 01 00                                     	mov	edi,[free_additional_memory]
00000FC2: E8 2E FF FF FF                                        	call	setup_dump_header
00000FC7: 8B 35 50 A1 01 00                                     	mov	esi,[input_file]
00000FCD: E8 2E FA FF FF                                        	call	copy_asciiz
00000FD2: 3B 3D 44 A1 01 00                                     	cmp	edi,[additional_memory_end]
00000FD8: 0F 83 BE F8 FF FF                                     	jae	out_of_memory
00000FDE: 89 F8                                                 	mov	eax,edi
00000FE0: 29 D8                                                 	sub	eax,ebx
00000FE2: 48                                                    	dec	eax
00000FE3: 89 43 CC                                              	mov	[ebx-40h+0Ch],eax
00000FE6: 89 F8                                                 	mov	eax,edi
00000FE8: 29 D8                                                 	sub	eax,ebx
00000FEA: 89 43 D4                                              	mov	[ebx-40h+14h],eax
00000FED: 83 C0 40                                              	add	eax,40h
00000FF0: 89 43 E0                                              	mov	[ebx-40h+20h],eax
00000FF3: E8 1E FF FF FF                                        	call	prepare_preprocessed_source
00000FF8: 2B 35 38 A1 01 00                                     	sub	esi,[memory_start]
00000FFE: 89 73 E4                                              	mov	[ebx-40h+24h],esi
00001001: 8B 15 58 A1 01 00                                     	mov	edx,[symbols_file]
00001007: E8 98 F3 FF FF                                        	call	create
0000100C: 0F 82 A8 F8 FF FF                                     	jc	write_failed
00001012: 8B 15 64 A1 01 00                                     	mov	edx,[free_additional_memory]
00001018: 8B 4A 14                                              	mov	ecx,[edx+14h]
0000101B: 83 C1 40                                              	add	ecx,40h
0000101E: E8 B7 F3 FF FF                                        	call	write
00001023: 0F 82 91 F8 FF FF                                     	jc	write_failed
00001029: 8B 15 38 A1 01 00                                     	mov	edx,[memory_start]
0000102F: 89 F1                                                 	mov	ecx,esi
00001031: E8 A4 F3 FF FF                                        	call	write
00001036: 0F 82 7E F8 FF FF                                     	jc	write_failed
0000103C: E8 7F F3 FF FF                                        	call	close
00001041: C3                                                    	ret
                                                                
                                                                include '..\preproce.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                preprocessor:
00001042: BF D3 A2 01 00                                        	mov	edi,characters
00001047: 30 C0                                                 	xor	al,al
                                                                      make_characters_table:
00001049: AA                                                    	stosb
0000104A: FE C0                                                 	inc	al
0000104C: 75 FB                                                 	jnz	make_characters_table
0000104E: BE 34 A3 01 00                                        	mov	esi,characters+'a'
00001053: BF 14 A3 01 00                                        	mov	edi,characters+'A'
00001058: B9 1A 00 00 00                                        	mov	ecx,26
0000105D: F3 A4                                                 	rep	movsb
0000105F: BF D3 A2 01 00                                        	mov	edi,characters
00001064: BE AB 44 01 00                                        	mov	esi,symbol_characters+1
00001069: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
0000106D: 31 C0                                                 	xor	eax,eax
                                                                      mark_symbol_characters:
0000106F: AC                                                    	lodsb
00001070: C6 04 07 00                                           	mov	byte [edi+eax],0
00001074: E2 F9                                                 	loop	mark_symbol_characters
00001076: BF AC A1 01 00                                        	mov	edi,locals_counter
0000107B: 66 B8 01 30                                           	mov	ax,1 + '0' shl 8
0000107F: 66 AB                                                 	stos	word [edi]
00001081: 8B 3D 38 A1 01 00                                     	mov	edi,[memory_start]
00001087: 89 3D 60 A1 01 00                                     	mov	[include_paths],edi
0000108D: BE A2 44 01 00                                        	mov	esi,include_variable
00001092: E8 96 F2 FF FF                                        	call	get_environment_variable
00001097: 30 C0                                                 	xor	al,al
00001099: AA                                                    	stos	byte [edi]
0000109A: 89 3D 38 A1 01 00                                     	mov	[memory_start],edi
000010A0: A1 40 A1 01 00                                        	mov	eax,[additional_memory]
000010A5: A3 64 A1 01 00                                        	mov	[free_additional_memory],eax
000010AA: A1 44 A1 01 00                                        	mov	eax,[additional_memory_end]
000010AF: A3 C0 A1 01 00                                        	mov	[labels_list],eax
000010B4: 31 C0                                                 	xor	eax,eax
000010B6: A3 68 A1 01 00                                        	mov	[source_start],eax
000010BB: A3 F0 A1 01 00                                        	mov	[tagged_blocks],eax
000010C0: A3 CC A1 01 00                                        	mov	[hash_tree],eax
000010C5: A3 EC A1 01 00                                        	mov	[error],eax
000010CA: A2 CD A2 01 00                                        	mov	[macro_status],al
000010CF: A3 80 A1 01 00                                        	mov	[current_line],eax
000010D4: 8B 35 4C A1 01 00                                     	mov	esi,[initial_definitions]
000010DA: 85 F6                                                 	test	esi,esi
000010DC: 0F 84 53 01 00 00                                     	jz	predefinitions_ok
                                                                      process_predefinitions:
000010E2: 0F B6 0E                                              	movzx	ecx,byte [esi]
000010E5: 85 C9                                                 	test	ecx,ecx
000010E7: 0F 84 48 01 00 00                                     	jz	predefinitions_ok
000010ED: 46                                                    	inc	esi
000010EE: 8D 04 0E                                              	lea	eax,[esi+ecx]
000010F1: 50                                                    	push	eax
000010F2: B5 02                                                 	mov	ch,10b
000010F4: E8 3A 08 00 00                                        	call	add_preprocessor_symbol
000010F9: 5E                                                    	pop	esi
000010FA: 8B 3D 38 A1 01 00                                     	mov	edi,[memory_start]
00001100: 89 7A 08                                              	mov	[edx+8],edi
                                                                      convert_predefinition:
00001103: 3B 3D 3C A1 01 00                                     	cmp	edi,[memory_end]
00001109: 0F 83 8D F7 FF FF                                     	jae	out_of_memory
0000110F: AC                                                    	lods	byte [esi]
00001110: 08 C0                                                 	or	al,al
00001112: 0F 84 0C 01 00 00                                     	jz	predefinition_converted
00001118: 3C 20                                                 	cmp	al,20h
0000111A: 74 E7                                                 	je	convert_predefinition
0000111C: 88 C4                                                 	mov	ah,al
0000111E: BB D3 A2 01 00                                        	mov	ebx,characters
00001123: D7                                                    	xlat	byte [ebx]
00001124: 08 C0                                                 	or	al,al
00001126: 74 39                                                 	jz	predefinition_separator
00001128: 80 FC 27                                              	cmp	ah,27h
0000112B: 74 51                                                 	je	predefinition_string
0000112D: 80 FC 22                                              	cmp	ah,22h
00001130: 74 4C                                                 	je	predefinition_string
00001132: C6 07 1A                                              	mov	byte [edi],1Ah
00001135: 66 AF                                                 	scas	word [edi]
00001137: 86 C4                                                 	xchg	al,ah
00001139: AA                                                    	stos	byte [edi]
0000113A: BB D3 A2 01 00                                        	mov	ebx,characters
0000113F: 31 C9                                                 	xor	ecx,ecx
                                                                      predefinition_symbol:
00001141: AC                                                    	lods	byte [esi]
00001142: AA                                                    	stos	byte [edi]
00001143: D7                                                    	xlat	byte [ebx]
00001144: 08 C0                                                 	or	al,al
00001146: E0 F9                                                 	loopnzd predefinition_symbol
00001148: F7 D9                                                 	neg	ecx
0000114A: 81 F9 FF 00 00 00                                     	cmp	ecx,255
00001150: 0F 87 7C F7 FF FF                                     	ja	invalid_definition
00001156: 89 FB                                                 	mov	ebx,edi
00001158: 29 CB                                                 	sub	ebx,ecx
0000115A: 88 4B FE                                              	mov	byte [ebx-2],cl
                                                                      found_predefinition_separator:
0000115D: 4F                                                    	dec	edi
0000115E: 8A 66 FF                                              	mov	ah,[esi-1]
                                                                      predefinition_separator:
00001161: 86 C4                                                 	xchg	al,ah
00001163: 08 C0                                                 	or	al,al
00001165: 0F 84 B9 00 00 00                                     	jz	predefinition_converted
0000116B: 3C 20                                                 	cmp	al,20h
0000116D: 74 94                                                 	je	convert_predefinition
0000116F: 3C 3B                                                 	cmp	al,3Bh
00001171: 0F 84 5B F7 FF FF                                     	je	invalid_definition
00001177: 3C 5C                                                 	cmp	al,5Ch
00001179: 74 2A                                                 	je	predefinition_backslash
0000117B: AA                                                    	stos	byte [edi]
0000117C: EB 85                                                 	jmp	convert_predefinition
                                                                      predefinition_string:
0000117E: B0 22                                                 	mov	al,22h
00001180: AA                                                    	stos	byte [edi]
00001181: AF                                                    	scas	dword [edi]
00001182: 89 FB                                                 	mov	ebx,edi
                                                                      copy_predefinition_string:
00001184: AC                                                    	lods	byte [esi]
00001185: AA                                                    	stos	byte [edi]
00001186: 08 C0                                                 	or	al,al
00001188: 0F 84 44 F7 FF FF                                     	jz	invalid_definition
0000118E: 38 E0                                                 	cmp	al,ah
00001190: 75 F2                                                 	jne	copy_predefinition_string
00001192: AC                                                    	lods	byte [esi]
00001193: 38 E0                                                 	cmp	al,ah
00001195: 74 ED                                                 	je	copy_predefinition_string
00001197: 4E                                                    	dec	esi
00001198: 4F                                                    	dec	edi
00001199: 89 F8                                                 	mov	eax,edi
0000119B: 29 D8                                                 	sub	eax,ebx
0000119D: 89 43 FC                                              	mov	[ebx-4],eax
000011A0: E9 5E FF FF FF                                        	jmp	convert_predefinition
                                                                      predefinition_backslash:
000011A5: C6 07 00                                              	mov	byte [edi],0
000011A8: AC                                                    	lods	byte [esi]
000011A9: 08 C0                                                 	or	al,al
000011AB: 0F 84 21 F7 FF FF                                     	jz	invalid_definition
000011B1: 3C 20                                                 	cmp	al,20h
000011B3: 0F 84 19 F7 FF FF                                     	je	invalid_definition
000011B9: 3C 3B                                                 	cmp	al,3Bh
000011BB: 0F 84 11 F7 FF FF                                     	je	invalid_definition
000011C1: B0 1A                                                 	mov	al,1Ah
000011C3: AA                                                    	stos	byte [edi]
000011C4: 89 F9                                                 	mov	ecx,edi
000011C6: 66 B8 01 5C                                           	mov	ax,5C01h
000011CA: 66 AB                                                 	stos	word [edi]
000011CC: 4E                                                    	dec	esi
                                                                      group_predefinition_backslashes:
000011CD: AC                                                    	lods	byte [esi]
000011CE: 3C 5C                                                 	cmp	al,5Ch
000011D0: 75 05                                                 	jne	predefinition_backslashed_symbol
000011D2: AA                                                    	stos	byte [edi]
000011D3: FE 01                                                 	inc	byte [ecx]
000011D5: EB F6                                                 	jmp	group_predefinition_backslashes
                                                                      predefinition_backslashed_symbol:
000011D7: 3C 20                                                 	cmp	al,20h
000011D9: 0F 84 F3 F6 FF FF                                     	je	invalid_definition
000011DF: 3C 22                                                 	cmp	al,22h
000011E1: 0F 84 EB F6 FF FF                                     	je	invalid_definition
000011E7: 3C 27                                                 	cmp	al,27h
000011E9: 0F 84 E3 F6 FF FF                                     	je	invalid_definition
000011EF: 3C 3B                                                 	cmp	al,3Bh
000011F1: 0F 84 DB F6 FF FF                                     	je	invalid_definition
000011F7: 88 C4                                                 	mov	ah,al
000011F9: BB D3 A2 01 00                                        	mov	ebx,characters
000011FE: D7                                                    	xlat	byte [ebx]
000011FF: 08 C0                                                 	or	al,al
00001201: 74 17                                                 	jz	predefinition_backslashed_symbol_character
00001203: 88 E0                                                 	mov	al,ah
                                                                      convert_predefinition_backslashed_symbol:
00001205: AA                                                    	stos	byte [edi]
00001206: D7                                                    	xlat	byte [ebx]
00001207: 08 C0                                                 	or	al,al
00001209: 0F 84 4E FF FF FF                                     	jz	found_predefinition_separator
0000120F: FE 01                                                 	inc	byte [ecx]
00001211: 0F 84 BB F6 FF FF                                     	jz	invalid_definition
00001217: AC                                                    	lods	byte [esi]
00001218: EB EB                                                 	jmp	convert_predefinition_backslashed_symbol
                                                                      predefinition_backslashed_symbol_character:
0000121A: 88 E0                                                 	mov	al,ah
0000121C: AA                                                    	stos	byte [edi]
0000121D: FE 01                                                 	inc	byte [ecx]
0000121F: E9 DF FE FF FF                                        	jmp	convert_predefinition
                                                                      predefinition_converted:
00001224: 89 3D 38 A1 01 00                                     	mov	[memory_start],edi
0000122A: 2B 7A 08                                              	sub	edi,[edx+8]
0000122D: 89 7A 0C                                              	mov	[edx+12],edi
00001230: E9 AD FE FF FF                                        	jmp	process_predefinitions
                                                                      predefinitions_ok:
00001235: 8B 35 50 A1 01 00                                     	mov	esi,[input_file]
0000123B: 89 F2                                                 	mov	edx,esi
0000123D: E8 26 F1 FF FF                                        	call	open
00001242: 0F 82 68 F6 FF FF                                     	jc	main_file_not_found
00001248: 8B 3D 38 A1 01 00                                     	mov	edi,[memory_start]
0000124E: E8 7A 00 00 00                                        	call	preprocess_file
00001253: 80 3D CD A2 01 00 00                                  	cmp	[macro_status],0
0000125A: 74 0F                                                 	je	process_postponed
0000125C: A1 E8 A1 01 00                                        	mov	eax,[error_line]
00001261: A3 80 A1 01 00                                        	mov	[current_line],eax
00001266: E9 AB F6 FF FF                                        	jmp	incomplete_macro
                                                                      process_postponed:
0000126B: BA CC A1 01 00                                        	mov	edx,hash_tree
00001270: B9 20 00 00 00                                        	mov	ecx,32
                                                                      find_postponed_list:
00001275: 8B 12                                                 	mov	edx,[edx]
00001277: 09 D2                                                 	or	edx,edx
00001279: E0 FA                                                 	loopnz	find_postponed_list
0000127B: 74 35                                                 	jz	preprocessing_finished
                                                                      process_postponed_list:
0000127D: 8B 02                                                 	mov	eax,[edx]
0000127F: 09 C0                                                 	or	eax,eax
00001281: 74 2F                                                 	jz	preprocessing_finished
00001283: 52                                                    	push	edx
00001284: 89 D3                                                 	mov	ebx,edx
                                                                      find_earliest_postponed:
00001286: 8B 02                                                 	mov	eax,[edx]
00001288: 09 C0                                                 	or	eax,eax
0000128A: 74 06                                                 	jz	earliest_postponed_found
0000128C: 89 D3                                                 	mov	ebx,edx
0000128E: 89 C2                                                 	mov	edx,eax
00001290: EB F4                                                 	jmp	find_earliest_postponed
                                                                      earliest_postponed_found:
00001292: 89 03                                                 	mov	[ebx],eax
00001294: E8 20 00 00 00                                        	call	use_postponed_macro
00001299: 5A                                                    	pop	edx
0000129A: 80 3D CD A2 01 00 00                                  	cmp	[macro_status],0
000012A1: 74 DA                                                 	je	process_postponed_list
000012A3: A1 E8 A1 01 00                                        	mov	eax,[error_line]
000012A8: A3 80 A1 01 00                                        	mov	[current_line],eax
000012AD: E9 64 F6 FF FF                                        	jmp	incomplete_macro
                                                                      preprocessing_finished:
000012B2: 89 3D 68 A1 01 00                                     	mov	[source_start],edi
000012B8: C3                                                    	ret
                                                                      use_postponed_macro:
000012B9: 8D 77 FF                                              	lea	esi,[edi-1]
000012BC: 51 56                                                 	push	ecx esi
000012BE: C7 05 98 A1 01 00 00 00 00 00                         	mov	[struc_name],0
000012C8: E9 52 0E 00 00                                        	jmp	use_macro
                                                                
                                                                preprocess_file:
000012CD: FF 35 3C A1 01 00                                     	push	[memory_end]
000012D3: 56                                                    	push	esi
000012D4: B0 02                                                 	mov	al,2
000012D6: 31 D2                                                 	xor	edx,edx
000012D8: E8 0F F1 FF FF                                        	call	lseek
000012DD: 50                                                    	push	eax
000012DE: 30 C0                                                 	xor	al,al
000012E0: 31 D2                                                 	xor	edx,edx
000012E2: E8 05 F1 FF FF                                        	call	lseek
000012E7: 59                                                    	pop	ecx
000012E8: 8B 15 3C A1 01 00                                     	mov	edx,[memory_end]
000012EE: 4A                                                    	dec	edx
000012EF: C6 02 1A                                              	mov	byte [edx],1Ah
000012F2: 29 CA                                                 	sub	edx,ecx
000012F4: 0F 82 A2 F5 FF FF                                     	jc	out_of_memory
000012FA: 89 D6                                                 	mov	esi,edx
000012FC: 39 FA                                                 	cmp	edx,edi
000012FE: 0F 86 98 F5 FF FF                                     	jbe	out_of_memory
00001304: 89 15 3C A1 01 00                                     	mov	[memory_end],edx
0000130A: E8 B9 F0 FF FF                                        	call	read
0000130F: E8 AC F0 FF FF                                        	call	close
00001314: 5A                                                    	pop	edx
00001315: 31 C9                                                 	xor	ecx,ecx
00001317: 89 F3                                                 	mov	ebx,esi
                                                                      preprocess_source:
00001319: 41                                                    	inc	ecx
0000131A: 89 3D 80 A1 01 00                                     	mov	[current_line],edi
00001320: 89 D0                                                 	mov	eax,edx
00001322: AB                                                    	stos	dword [edi]
00001323: 89 C8                                                 	mov	eax,ecx
00001325: AB                                                    	stos	dword [edi]
00001326: 89 F0                                                 	mov	eax,esi
00001328: 29 D8                                                 	sub	eax,ebx
0000132A: AB                                                    	stos	dword [edi]
0000132B: 31 C0                                                 	xor	eax,eax
0000132D: AB                                                    	stos	dword [edi]
0000132E: 53 52                                                 	push	ebx edx
00001330: E8 1B 00 00 00                                        	call	convert_line
00001335: E8 AB 02 00 00                                        	call	preprocess_line
0000133A: 5A 5B                                                 	pop	edx ebx
                                                                      next_line:
0000133C: 80 7E FF 00                                           	cmp	byte [esi-1],0
00001340: 74 06                                                 	je	file_end
00001342: 80 7E FF 1A                                           	cmp	byte [esi-1],1Ah
00001346: 75 D1                                                 	jne	preprocess_source
                                                                      file_end:
00001348: 8F 05 3C A1 01 00                                     	pop	[memory_end]
0000134E: F8                                                    	clc
0000134F: C3                                                    	ret
                                                                
                                                                convert_line:
00001350: 51                                                    	push	ecx
00001351: F6 05 CD A2 01 00 0F                                  	test	[macro_status],0Fh
00001358: 74 06                                                 	jz	convert_line_data
0000135A: 66 B8 3B 00                                           	mov	ax,3Bh
0000135E: 66 AB                                                 	stos	word [edi]
                                                                      convert_line_data:
00001360: 3B 3D 3C A1 01 00                                     	cmp	edi,[memory_end]
00001366: 0F 83 30 F5 FF FF                                     	jae	out_of_memory
0000136C: AC                                                    	lods	byte [esi]
0000136D: 3C 20                                                 	cmp	al,20h
0000136F: 74 EF                                                 	je	convert_line_data
00001371: 3C 09                                                 	cmp	al,9
00001373: 74 EB                                                 	je	convert_line_data
00001375: 88 C4                                                 	mov	ah,al
00001377: BB D3 A2 01 00                                        	mov	ebx,characters
0000137C: D7                                                    	xlat	byte [ebx]
0000137D: 08 C0                                                 	or	al,al
0000137F: 74 41                                                 	jz	convert_separator
00001381: 80 FC 27                                              	cmp	ah,27h
00001384: 0F 84 8E 00 00 00                                     	je	convert_string
0000138A: 80 FC 22                                              	cmp	ah,22h
0000138D: 0F 84 85 00 00 00                                     	je	convert_string
00001393: C6 07 1A                                              	mov	byte [edi],1Ah
00001396: 66 AF                                                 	scas	word [edi]
00001398: 86 C4                                                 	xchg	al,ah
0000139A: AA                                                    	stos	byte [edi]
0000139B: BB D3 A2 01 00                                        	mov	ebx,characters
000013A0: 31 C9                                                 	xor	ecx,ecx
                                                                      convert_symbol:
000013A2: AC                                                    	lods	byte [esi]
000013A3: AA                                                    	stos	byte [edi]
000013A4: D7                                                    	xlat	byte [ebx]
000013A5: 08 C0                                                 	or	al,al
000013A7: E0 F9                                                 	loopnzd convert_symbol
000013A9: F7 D9                                                 	neg	ecx
000013AB: 81 F9 FF 00 00 00                                     	cmp	ecx,255
000013B1: 0F 87 AA F6 FF FF                                     	ja	name_too_long
000013B7: 89 FB                                                 	mov	ebx,edi
000013B9: 29 CB                                                 	sub	ebx,ecx
000013BB: 88 4B FE                                              	mov	byte [ebx-2],cl
                                                                      found_separator:
000013BE: 4F                                                    	dec	edi
000013BF: 8A 66 FF                                              	mov	ah,[esi-1]
                                                                      convert_separator:
000013C2: 86 C4                                                 	xchg	al,ah
000013C4: 3C 20                                                 	cmp	al,20h
000013C6: 72 11                                                 	jb	control_character
000013C8: 74 96                                                 	je	convert_line_data
                                                                      symbol_character:
000013CA: 3C 3B                                                 	cmp	al,3Bh
000013CC: 0F 84 95 01 00 00                                     	je	ignore_comment
000013D2: 3C 5C                                                 	cmp	al,5Ch
000013D4: 74 71                                                 	je	backslash_character
000013D6: AA                                                    	stos	byte [edi]
000013D7: EB 87                                                 	jmp	convert_line_data
                                                                      control_character:
000013D9: 3C 1A                                                 	cmp	al,1Ah
000013DB: 0F 84 9F 01 00 00                                     	je	line_end
000013E1: 3C 0D                                                 	cmp	al,0Dh
000013E3: 74 24                                                 	je	cr_character
000013E5: 3C 0A                                                 	cmp	al,0Ah
000013E7: 74 11                                                 	je	lf_character
000013E9: 3C 09                                                 	cmp	al,9
000013EB: 0F 84 6F FF FF FF                                     	je	convert_line_data
000013F1: 08 C0                                                 	or	al,al
000013F3: 75 D5                                                 	jnz	symbol_character
000013F5: E9 86 01 00 00                                        	jmp	line_end
                                                                      lf_character:
000013FA: AC                                                    	lods	byte [esi]
000013FB: 3C 0D                                                 	cmp	al,0Dh
000013FD: 0F 84 7D 01 00 00                                     	je	line_end
00001403: 4E                                                    	dec	esi
00001404: E9 77 01 00 00                                        	jmp	line_end
                                                                      cr_character:
00001409: AC                                                    	lods	byte [esi]
0000140A: 3C 0A                                                 	cmp	al,0Ah
0000140C: 0F 84 6E 01 00 00                                     	je	line_end
00001412: 4E                                                    	dec	esi
00001413: E9 68 01 00 00                                        	jmp	line_end
                                                                      convert_string:
00001418: B0 22                                                 	mov	al,22h
0000141A: AA                                                    	stos	byte [edi]
0000141B: AF                                                    	scas	dword [edi]
0000141C: 89 FB                                                 	mov	ebx,edi
                                                                      copy_string:
0000141E: AC                                                    	lods	byte [esi]
0000141F: AA                                                    	stos	byte [edi]
00001420: 3C 0A                                                 	cmp	al,0Ah
00001422: 74 7B                                                 	je	no_end_quote
00001424: 3C 0D                                                 	cmp	al,0Dh
00001426: 74 77                                                 	je	no_end_quote
00001428: 08 C0                                                 	or	al,al
0000142A: 74 73                                                 	jz	no_end_quote
0000142C: 3C 1A                                                 	cmp	al,1Ah
0000142E: 74 6F                                                 	je	no_end_quote
00001430: 38 E0                                                 	cmp	al,ah
00001432: 75 EA                                                 	jne	copy_string
00001434: AC                                                    	lods	byte [esi]
00001435: 38 E0                                                 	cmp	al,ah
00001437: 74 E5                                                 	je	copy_string
00001439: 4E                                                    	dec	esi
0000143A: 4F                                                    	dec	edi
0000143B: 89 F8                                                 	mov	eax,edi
0000143D: 29 D8                                                 	sub	eax,ebx
0000143F: 89 43 FC                                              	mov	[ebx-4],eax
00001442: E9 19 FF FF FF                                        	jmp	convert_line_data
                                                                      backslash_character:
00001447: C6 07 00                                              	mov	byte [edi],0
0000144A: AC                                                    	lods	byte [esi]
0000144B: 3C 20                                                 	cmp	al,20h
0000144D: 0F 84 CA 00 00 00                                     	je	concatenate_lines
00001453: 3C 09                                                 	cmp	al,9
00001455: 0F 84 C2 00 00 00                                     	je	concatenate_lines
0000145B: 3C 1A                                                 	cmp	al,1Ah
0000145D: 0F 84 1D 01 00 00                                     	je	line_end
00001463: 08 C0                                                 	or	al,al
00001465: 0F 84 15 01 00 00                                     	jz	line_end
0000146B: 3C 0A                                                 	cmp	al,0Ah
0000146D: 0F 84 DE 00 00 00                                     	je	concatenate_lf
00001473: 3C 0D                                                 	cmp	al,0Dh
00001475: 0F 84 DE 00 00 00                                     	je	concatenate_cr
0000147B: 3C 3B                                                 	cmp	al,3Bh
0000147D: 0F 84 BB 00 00 00                                     	je	find_concatenated_line
00001483: B0 1A                                                 	mov	al,1Ah
00001485: AA                                                    	stos	byte [edi]
00001486: 89 F9                                                 	mov	ecx,edi
00001488: 66 B8 01 5C                                           	mov	ax,5C01h
0000148C: 66 AB                                                 	stos	word [edi]
0000148E: 4E                                                    	dec	esi
                                                                      group_backslashes:
0000148F: AC                                                    	lods	byte [esi]
00001490: 3C 5C                                                 	cmp	al,5Ch
00001492: 75 14                                                 	jne	backslashed_symbol
00001494: AA                                                    	stos	byte [edi]
00001495: FE 01                                                 	inc	byte [ecx]
00001497: 0F 84 C4 F5 FF FF                                     	jz	name_too_long
0000149D: EB F0                                                 	jmp	group_backslashes
                                                                      no_end_quote:
0000149F: C6 43 FB 00                                           	mov	byte [ebx-5],0
000014A3: E9 D5 F5 FF FF                                        	jmp	missing_end_quote
                                                                      backslashed_symbol:
000014A8: 3C 1A                                                 	cmp	al,1Ah
000014AA: 0F 84 E2 F5 FF FF                                     	je	extra_characters_on_line
000014B0: 08 C0                                                 	or	al,al
000014B2: 0F 84 DA F5 FF FF                                     	jz	extra_characters_on_line
000014B8: 3C 0A                                                 	cmp	al,0Ah
000014BA: 0F 84 D2 F5 FF FF                                     	je	extra_characters_on_line
000014C0: 3C 0D                                                 	cmp	al,0Dh
000014C2: 0F 84 CA F5 FF FF                                     	je	extra_characters_on_line
000014C8: 3C 20                                                 	cmp	al,20h
000014CA: 0F 84 C2 F5 FF FF                                     	je	extra_characters_on_line
000014D0: 3C 09                                                 	cmp	al,9
000014D2: 0F 84 BA F5 FF FF                                     	je	extra_characters_on_line
000014D8: 3C 22                                                 	cmp	al,22h
000014DA: 0F 84 B2 F5 FF FF                                     	je	extra_characters_on_line
000014E0: 3C 27                                                 	cmp	al,27h
000014E2: 0F 84 AA F5 FF FF                                     	je	extra_characters_on_line
000014E8: 3C 3B                                                 	cmp	al,3Bh
000014EA: 0F 84 A2 F5 FF FF                                     	je	extra_characters_on_line
000014F0: 88 C4                                                 	mov	ah,al
000014F2: BB D3 A2 01 00                                        	mov	ebx,characters
000014F7: D7                                                    	xlat	byte [ebx]
000014F8: 08 C0                                                 	or	al,al
000014FA: 74 17                                                 	jz	backslashed_symbol_character
000014FC: 88 E0                                                 	mov	al,ah
                                                                      convert_backslashed_symbol:
000014FE: AA                                                    	stos	byte [edi]
000014FF: D7                                                    	xlat	byte [ebx]
00001500: 08 C0                                                 	or	al,al
00001502: 0F 84 B6 FE FF FF                                     	jz	found_separator
00001508: FE 01                                                 	inc	byte [ecx]
0000150A: 0F 84 51 F5 FF FF                                     	jz	name_too_long
00001510: AC                                                    	lods	byte [esi]
00001511: EB EB                                                 	jmp	convert_backslashed_symbol
                                                                      backslashed_symbol_character:
00001513: 88 E0                                                 	mov	al,ah
00001515: AA                                                    	stos	byte [edi]
00001516: FE 01                                                 	inc	byte [ecx]
00001518: E9 43 FE FF FF                                        	jmp	convert_line_data
                                                                      concatenate_lines:
0000151D: AC                                                    	lods	byte [esi]
0000151E: 3C 20                                                 	cmp	al,20h
00001520: 74 FB                                                 	je	concatenate_lines
00001522: 3C 09                                                 	cmp	al,9
00001524: 74 F7                                                 	je	concatenate_lines
00001526: 3C 1A                                                 	cmp	al,1Ah
00001528: 74 56                                                 	je	line_end
0000152A: 08 C0                                                 	or	al,al
0000152C: 74 52                                                 	jz	line_end
0000152E: 3C 0A                                                 	cmp	al,0Ah
00001530: 74 1F                                                 	je	concatenate_lf
00001532: 3C 0D                                                 	cmp	al,0Dh
00001534: 74 23                                                 	je	concatenate_cr
00001536: 3C 3B                                                 	cmp	al,3Bh
00001538: 0F 85 54 F5 FF FF                                     	jne	extra_characters_on_line
                                                                      find_concatenated_line:
0000153E: AC                                                    	lods	byte [esi]
0000153F: 3C 0A                                                 	cmp	al,0Ah
00001541: 74 0E                                                 	je	concatenate_lf
00001543: 3C 0D                                                 	cmp	al,0Dh
00001545: 74 12                                                 	je	concatenate_cr
00001547: 08 C0                                                 	or	al,al
00001549: 74 14                                                 	jz	concatenate_ok
0000154B: 3C 1A                                                 	cmp	al,1Ah
0000154D: 75 EF                                                 	jne	find_concatenated_line
0000154F: EB 2F                                                 	jmp	line_end
                                                                      concatenate_lf:
00001551: AC                                                    	lods	byte [esi]
00001552: 3C 0D                                                 	cmp	al,0Dh
00001554: 74 09                                                 	je	concatenate_ok
00001556: 4E                                                    	dec	esi
00001557: EB 06                                                 	jmp	concatenate_ok
                                                                      concatenate_cr:
00001559: AC                                                    	lods	byte [esi]
0000155A: 3C 0A                                                 	cmp	al,0Ah
0000155C: 74 01                                                 	je	concatenate_ok
0000155E: 4E                                                    	dec	esi
                                                                      concatenate_ok:
0000155F: FF 04 24                                              	inc	dword [esp]
00001562: E9 F9 FD FF FF                                        	jmp	convert_line_data
                                                                      ignore_comment:
00001567: AC                                                    	lods	byte [esi]
00001568: 3C 0A                                                 	cmp	al,0Ah
0000156A: 0F 84 8A FE FF FF                                     	je	lf_character
00001570: 3C 0D                                                 	cmp	al,0Dh
00001572: 0F 84 91 FE FF FF                                     	je	cr_character
00001578: 08 C0                                                 	or	al,al
0000157A: 74 04                                                 	jz	line_end
0000157C: 3C 1A                                                 	cmp	al,1Ah
0000157E: 75 E7                                                 	jne	ignore_comment
                                                                      line_end:
00001580: 30 C0                                                 	xor	al,al
00001582: AA                                                    	stos	byte [edi]
00001583: 59                                                    	pop	ecx
00001584: C3                                                    	ret
                                                                
                                                                lower_case:
00001585: BF D3 A3 01 00                                        	mov	edi,converted
0000158A: BB D3 A2 01 00                                        	mov	ebx,characters
                                                                      convert_case:
0000158F: AC                                                    	lods	byte [esi]
00001590: D7                                                    	xlat	byte [ebx]
00001591: AA                                                    	stos	byte [edi]
00001592: E2 FB                                                 	loop	convert_case
                                                                      case_ok:
00001594: C3                                                    	ret
                                                                
                                                                get_directive:
00001595: 57                                                    	push	edi
00001596: 89 F2                                                 	mov	edx,esi
00001598: 89 CD                                                 	mov	ebp,ecx
0000159A: E8 E6 FF FF FF                                        	call	lower_case
0000159F: 5F                                                    	pop	edi
                                                                      scan_directives:
000015A0: BE D3 A3 01 00                                        	mov	esi,converted
000015A5: 0F B6 07                                              	movzx	eax,byte [edi]
000015A8: 08 C0                                                 	or	al,al
000015AA: 74 20                                                 	jz	no_directive
000015AC: 89 E9                                                 	mov	ecx,ebp
000015AE: 47                                                    	inc	edi
000015AF: 89 FB                                                 	mov	ebx,edi
000015B1: 01 C3                                                 	add	ebx,eax
000015B3: 8A 26                                                 	mov	ah,[esi]
000015B5: 3A 27                                                 	cmp	ah,[edi]
000015B7: 72 13                                                 	jb	no_directive
000015B9: 77 0A                                                 	ja	next_directive
000015BB: 38 C1                                                 	cmp	cl,al
000015BD: 75 06                                                 	jne	next_directive
000015BF: F3 A6                                                 	repe	cmps byte [esi],[edi]
000015C1: 72 09                                                 	jb	no_directive
000015C3: 74 0D                                                 	je	directive_found
                                                                      next_directive:
000015C5: 89 DF                                                 	mov	edi,ebx
000015C7: 83 C7 02                                              	add	edi,2
000015CA: EB D4                                                 	jmp	scan_directives
                                                                      no_directive:
000015CC: 89 D6                                                 	mov	esi,edx
000015CE: 89 E9                                                 	mov	ecx,ebp
000015D0: F9                                                    	stc
000015D1: C3                                                    	ret
                                                                      directive_found:
000015D2: E8 0A 00 00 00                                        	call	get_directive_handler_base
                                                                      directive_handler:
000015D7: 8D 34 2A                                              	lea	esi,[edx+ebp]
000015DA: 0F B7 0B                                              	movzx	ecx,word [ebx]
000015DD: 01 C8                                                 	add	eax,ecx
000015DF: F8                                                    	clc
000015E0: C3                                                    	ret
                                                                      get_directive_handler_base:
000015E1: 8B 04 24                                              	mov	eax,[esp]
000015E4: C3                                                    	ret
                                                                
                                                                preprocess_line:
000015E5: 89 E0                                                 	mov	eax,esp
000015E7: 2B 05 48 A1 01 00                                     	sub	eax,[stack_limit]
000015ED: 3D 00 01 00 00                                        	cmp	eax,100h
000015F2: 0F 82 AE F2 FF FF                                     	jb	stack_overflow
000015F8: 51 56                                                 	push	ecx esi
                                                                      preprocess_current_line:
000015FA: 8B 35 80 A1 01 00                                     	mov	esi,[current_line]
00001600: 83 C6 10                                              	add	esi,16
00001603: 66 83 3E 3B                                           	cmp	word [esi],3Bh
00001607: 75 03                                                 	jne	line_start_ok
00001609: 83 C6 02                                              	add	esi,2
                                                                      line_start_ok:
0000160C: F6 05 CD A2 01 00 F0                                  	test	[macro_status],0F0h
00001613: 75 41                                                 	jnz	macro_preprocessing
00001615: 80 3E 1A                                              	cmp	byte [esi],1Ah
00001618: 75 35                                                 	jne	not_fix_constant
0000161A: 0F B6 56 01                                           	movzx	edx,byte [esi+1]
0000161E: 8D 54 16 02                                           	lea	edx,[esi+2+edx]
00001622: 66 81 3A 1A 03                                        	cmp	word [edx],031Ah
00001627: 75 26                                                 	jne	not_fix_constant
00001629: BB D3 A2 01 00                                        	mov	ebx,characters
0000162E: 0F B6 42 02                                           	movzx	eax,byte [edx+2]
00001632: D7                                                    	xlat	byte [ebx]
00001633: C1 C8 08                                              	ror	eax,8
00001636: 8A 42 03                                              	mov	al,[edx+3]
00001639: D7                                                    	xlat	byte [ebx]
0000163A: C1 C8 08                                              	ror	eax,8
0000163D: 8A 42 04                                              	mov	al,[edx+4]
00001640: D7                                                    	xlat	byte [ebx]
00001641: C1 C8 10                                              	ror	eax,16
00001644: 3D 66 69 78 00                                        	cmp	eax,'fix'
00001649: 0F 84 DD 03 00 00                                     	je	define_fix_constant
                                                                      not_fix_constant:
0000164F: E8 7E 07 00 00                                        	call	process_fix_constants
00001654: EB 05                                                 	jmp	initial_preprocessing_ok
                                                                      macro_preprocessing:
00001656: E8 F5 08 00 00                                        	call	process_macro_operators
                                                                      initial_preprocessing_ok:
0000165B: 8B 35 80 A1 01 00                                     	mov	esi,[current_line]
00001661: 83 C6 10                                              	add	esi,16
00001664: A0 CD A2 01 00                                        	mov	al,[macro_status]
00001669: A8 02                                                 	test	al,2
0000166B: 0F 85 98 05 00 00                                     	jnz	skip_macro_block
00001671: A8 01                                                 	test	al,1
00001673: 0F 85 75 05 00 00                                     	jnz	find_macro_block
                                                                      preprocess_instruction:
00001679: 89 35 FC A1 01 00                                     	mov	[current_offset],esi
0000167F: AC                                                    	lods	byte [esi]
00001680: 0F B6 0E                                              	movzx	ecx,byte [esi]
00001683: 46                                                    	inc	esi
00001684: 3C 1A                                                 	cmp	al,1Ah
00001686: 0F 85 C4 01 00 00                                     	jne	not_preprocessor_symbol
0000168C: 80 F9 03                                              	cmp	cl,3
0000168F: 72 14                                                 	jb	not_preprocessor_directive
00001691: 57                                                    	push	edi
00001692: BF C6 44 01 00                                        	mov	edi,preprocessor_directives
00001697: E8 F9 FE FF FF                                        	call	get_directive
0000169C: 5F                                                    	pop	edi
0000169D: 72 06                                                 	jc	not_preprocessor_directive
0000169F: C6 42 FE 3B                                           	mov	byte [edx-2],3Bh
000016A3: FF E0                                                 	jmp	near eax
                                                                      not_preprocessor_directive:
000016A5: 30 ED                                                 	xor	ch,ch
000016A7: E8 B2 01 00 00                                        	call	get_preprocessor_symbol
000016AC: 72 13                                                 	jc	not_macro
000016AE: C6 43 FE 3B                                           	mov	byte [ebx-2],3Bh
000016B2: C7 05 98 A1 01 00 00 00 00 00                         	mov	[struc_name],0
000016BC: E9 5E 0A 00 00                                        	jmp	use_macro
                                                                      not_macro:
000016C1: 89 35 98 A1 01 00                                     	mov	[struc_name],esi
000016C7: 01 CE                                                 	add	esi,ecx
000016C9: AC                                                    	lods	byte [esi]
000016CA: 3C 3A                                                 	cmp	al,':'
000016CC: 0F 84 E8 00 00 00                                     	je	preprocess_label
000016D2: 3C 1A                                                 	cmp	al,1Ah
000016D4: 0F 85 76 01 00 00                                     	jne	not_preprocessor_symbol
000016DA: AC                                                    	lods	byte [esi]
000016DB: 3C 03                                                 	cmp	al,3
000016DD: 75 27                                                 	jne	not_symbolic_constant
000016DF: BB D3 A2 01 00                                        	mov	ebx,characters
000016E4: 0F B6 06                                              	movzx	eax,byte [esi]
000016E7: D7                                                    	xlat	byte [ebx]
000016E8: C1 C8 08                                              	ror	eax,8
000016EB: 8A 46 01                                              	mov	al,[esi+1]
000016EE: D7                                                    	xlat	byte [ebx]
000016EF: C1 C8 08                                              	ror	eax,8
000016F2: 8A 46 02                                              	mov	al,[esi+2]
000016F5: D7                                                    	xlat	byte [ebx]
000016F6: C1 C8 10                                              	ror	eax,16
000016F9: 3D 65 71 75 00                                        	cmp	eax,'equ'
000016FE: 0F 84 33 03 00 00                                     	je	define_equ_constant
00001704: B0 03                                                 	mov	al,3
                                                                      not_symbolic_constant:
00001706: B5 01                                                 	mov	ch,1
00001708: 88 C1                                                 	mov	cl,al
0000170A: E8 4F 01 00 00                                        	call	get_preprocessor_symbol
0000170F: 0F 82 3B 01 00 00                                     	jc	not_preprocessor_symbol
00001715: 52 56                                                 	push	edx esi
00001717: 8B 35 98 A1 01 00                                     	mov	esi,[struc_name]
0000171D: 89 35 9C A1 01 00                                     	mov	[struc_label],esi
00001723: 83 2D 9C A1 01 00 02                                  	sub	[struc_label],2
0000172A: 8A 4E FF                                              	mov	cl,[esi-1]
0000172D: B5 02                                                 	mov	ch,10b
0000172F: E8 2A 01 00 00                                        	call	get_preprocessor_symbol
00001734: 72 59                                                 	jc	struc_name_ok
00001736: 85 D2                                                 	test	edx,edx
00001738: 0F 84 31 F3 FF FF                                     	jz	reserved_word_used_as_symbol
0000173E: 8B 4A 0C                                              	mov	ecx,[edx+12]
00001741: 83 C1 03                                              	add	ecx,3
00001744: 8D 1C 0F                                              	lea	ebx,[edi+ecx]
00001747: 89 F9                                                 	mov	ecx,edi
00001749: 2B 0D 9C A1 01 00                                     	sub	ecx,[struc_label]
0000174F: 8D 77 FF                                              	lea	esi,[edi-1]
00001752: 8D 7B FF                                              	lea	edi,[ebx-1]
00001755: FD                                                    	std
00001756: F3 A4                                                 	rep	movs byte [edi],[esi]
00001758: FC                                                    	cld
00001759: 8B 3D 9C A1 01 00                                     	mov	edi,[struc_label]
0000175F: 8B 72 08                                              	mov	esi,[edx+8]
00001762: 8B 4A 0C                                              	mov	ecx,[edx+12]
00001765: 01 0D 98 A1 01 00                                     	add	[struc_name],ecx
0000176B: 83 05 98 A1 01 00 03                                  	add	[struc_name],3
00001772: E8 E3 06 00 00                                        	call	move_data
00001777: B0 3A                                                 	mov	al,3Ah
00001779: AA                                                    	stos	byte [edi]
0000177A: 66 B8 3B 00                                           	mov	ax,3Bh
0000177E: 66 AB                                                 	stos	word [edi]
00001780: 89 DF                                                 	mov	edi,ebx
00001782: 5E                                                    	pop	esi
00001783: 03 72 0C                                              	add	esi,[edx+12]
00001786: 83 C6 03                                              	add	esi,3
00001789: 5A                                                    	pop	edx
0000178A: E9 90 09 00 00                                        	jmp	use_macro
                                                                      struc_name_ok:
0000178F: 8B 15 98 A1 01 00                                     	mov	edx,[struc_name]
00001795: 0F B6 42 FF                                           	movzx	eax,byte [edx-1]
00001799: 01 C2                                                 	add	edx,eax
0000179B: 57                                                    	push	edi
0000179C: 8D 77 FF                                              	lea	esi,[edi-1]
0000179F: 89 F9                                                 	mov	ecx,edi
000017A1: 29 D1                                                 	sub	ecx,edx
000017A3: FD                                                    	std
000017A4: F3 A4                                                 	rep	movs byte [edi],[esi]
000017A6: FC                                                    	cld
000017A7: 5F                                                    	pop	edi
000017A8: 47                                                    	inc	edi
000017A9: B0 3A                                                 	mov	al,3Ah
000017AB: 88 02                                                 	mov	[edx],al
000017AD: FE C0                                                 	inc	al
000017AF: 88 42 01                                              	mov	[edx+1],al
000017B2: 5E 5A                                                 	pop	esi edx
000017B4: 46                                                    	inc	esi
000017B5: E9 65 09 00 00                                        	jmp	use_macro
                                                                      preprocess_label:
000017BA: 4E                                                    	dec	esi
000017BB: 29 CE                                                 	sub	esi,ecx
000017BD: 8D 6E FE                                              	lea	ebp,[esi-2]
000017C0: B5 02                                                 	mov	ch,10b
000017C2: E8 97 00 00 00                                        	call	get_preprocessor_symbol
000017C7: 73 13                                                 	jnc	symbolic_constant_in_label
000017C9: 8D 74 0E 01                                           	lea	esi,[esi+ecx+1]
000017CD: 80 3E 3A                                              	cmp	byte [esi],':'
000017D0: 0F 85 A3 FE FF FF                                     	jne	preprocess_instruction
000017D6: 46                                                    	inc	esi
000017D7: E9 9D FE FF FF                                        	jmp	preprocess_instruction
                                                                      symbolic_constant_in_label:
000017DC: 85 D2                                                 	test	edx,edx
000017DE: 0F 84 8B F2 FF FF                                     	jz	reserved_word_used_as_symbol
000017E4: 8B 5A 08                                              	mov	ebx,[edx+8]
000017E7: 8B 4A 0C                                              	mov	ecx,[edx+12]
000017EA: 01 D9                                                 	add	ecx,ebx
                                                                      check_for_broken_label:
000017EC: 39 CB                                                 	cmp	ebx,ecx
000017EE: 74 1F                                                 	je	label_broken
000017F0: 80 3B 1A                                              	cmp	byte [ebx],1Ah
000017F3: 75 1A                                                 	jne	label_broken
000017F5: 0F B6 43 01                                           	movzx	eax,byte [ebx+1]
000017F9: 8D 5C 03 02                                           	lea	ebx,[ebx+2+eax]
000017FD: 39 CB                                                 	cmp	ebx,ecx
000017FF: 74 15                                                 	je	label_constant_ok
00001801: 80 3B 3A                                              	cmp	byte [ebx],':'
00001804: 75 09                                                 	jne	label_broken
00001806: 43                                                    	inc	ebx
00001807: 80 3B 3A                                              	cmp	byte [ebx],':'
0000180A: 75 E0                                                 	jne	check_for_broken_label
0000180C: 43                                                    	inc	ebx
0000180D: EB DD                                                 	jmp	check_for_broken_label
                                                                      label_broken:
0000180F: E8 0F 06 00 00                                        	call	replace_symbolic_constant
00001814: EB 45                                                 	jmp	line_preprocessed
                                                                      label_constant_ok:
00001816: 89 F9                                                 	mov	ecx,edi
00001818: 29 F1                                                 	sub	ecx,esi
0000181A: 8B 7A 0C                                              	mov	edi,[edx+12]
0000181D: 01 EF                                                 	add	edi,ebp
0000181F: 57                                                    	push	edi
00001820: 8D 04 0F                                              	lea	eax,[edi+ecx]
00001823: 50                                                    	push	eax
00001824: 39 FE                                                 	cmp	esi,edi
00001826: 74 12                                                 	je	replace_label
00001828: 72 04                                                 	jb	move_rest_of_line_up
0000182A: F3 A4                                                 	rep	movs byte [edi],[esi]
0000182C: EB 0C                                                 	jmp	replace_label
                                                                      move_rest_of_line_up:
0000182E: 8D 74 0E FF                                           	lea	esi,[esi+ecx-1]
00001832: 8D 7C 0F FF                                           	lea	edi,[edi+ecx-1]
00001836: FD                                                    	std
00001837: F3 A4                                                 	rep	movs byte [edi],[esi]
00001839: FC                                                    	cld
                                                                      replace_label:
0000183A: 8B 4A 0C                                              	mov	ecx,[edx+12]
0000183D: 8B 7C 24 04                                           	mov	edi,[esp+4]
00001841: 29 CF                                                 	sub	edi,ecx
00001843: 8B 72 08                                              	mov	esi,[edx+8]
00001846: F3 A4                                                 	rep	movs byte [edi],[esi]
00001848: 5F 5E                                                 	pop	edi esi
0000184A: 46                                                    	inc	esi
0000184B: E9 29 FE FF FF                                        	jmp	preprocess_instruction
                                                                      not_preprocessor_symbol:
00001850: 8B 35 FC A1 01 00                                     	mov	esi,[current_offset]
00001856: E8 80 05 00 00                                        	call	process_equ_constants
                                                                      line_preprocessed:
0000185B: 5E 59                                                 	pop	esi ecx
0000185D: C3                                                    	ret
                                                                
                                                                get_preprocessor_symbol:
0000185E: 55 57 56                                              	push	ebp edi esi
00001861: 89 CD                                                 	mov	ebp,ecx
00001863: C1 E5 16                                              	shl	ebp,22
00001866: 88 E8                                                 	mov	al,ch
00001868: 24 03                                                 	and	al,11b
0000186A: 0F B6 C9                                              	movzx	ecx,cl
0000186D: 3C 02                                                 	cmp	al,10b
0000186F: 75 36                                                 	jne	no_preprocessor_special_symbol
00001871: 80 F9 04                                              	cmp	cl,4
00001874: 76 31                                                 	jbe	no_preprocessor_special_symbol
00001876: 66 B8 5F 5F                                           	mov	ax,'__'
0000187A: 66 3B 06                                              	cmp	ax,[esi]
0000187D: 75 28                                                 	jne	no_preprocessor_special_symbol
0000187F: 66 3B 44 0E FE                                        	cmp	ax,[esi+ecx-2]
00001884: 75 21                                                 	jne	no_preprocessor_special_symbol
00001886: 83 C6 02                                              	add	esi,2
00001889: 83 E9 04                                              	sub	ecx,4
0000188C: 55                                                    	push	ebp
0000188D: BF 5A 45 01 00                                        	mov	edi,preprocessor_special_symbols
00001892: E8 FE FC FF FF                                        	call	get_directive
00001897: 5D                                                    	pop	ebp
00001898: 72 07                                                 	jc	preprocessor_special_symbol_not_recognized
0000189A: 83 C6 02                                              	add	esi,2
0000189D: 31 D2                                                 	xor	edx,edx
0000189F: EB 75                                                 	jmp	preprocessor_symbol_found
                                                                      preprocessor_special_symbol_not_recognized:
000018A1: 83 C1 04                                              	add	ecx,4
000018A4: 83 EE 02                                              	sub	esi,2
                                                                      no_preprocessor_special_symbol:
000018A7: BB CC A1 01 00                                        	mov	ebx,hash_tree
000018AC: BF 0A 00 00 00                                        	mov	edi,10
                                                                      follow_hashes_roots:
000018B1: 8B 13                                                 	mov	edx,[ebx]
000018B3: 09 D2                                                 	or	edx,edx
000018B5: 74 5A                                                 	jz	preprocessor_symbol_not_found
000018B7: 31 C0                                                 	xor	eax,eax
000018B9: D1 E5                                                 	shl	ebp,1
000018BB: 83 D0 00                                              	adc	eax,0
000018BE: 8D 1C 82                                              	lea	ebx,[edx+eax*4]
000018C1: 4F                                                    	dec	edi
000018C2: 75 ED                                                 	jnz	follow_hashes_roots
000018C4: 89 DF                                                 	mov	edi,ebx
000018C6: E8 50 00 00 00                                        	call	calculate_hash
000018CB: 89 C5                                                 	mov	ebp,eax
000018CD: 81 E5 FF 03 00 00                                     	and	ebp,3FFh
000018D3: C1 E5 0A                                              	shl	ebp,10
000018D6: 31 C5                                                 	xor	ebp,eax
000018D8: 89 FB                                                 	mov	ebx,edi
000018DA: BF 16 00 00 00                                        	mov	edi,22
                                                                      follow_hashes_tree:
000018DF: 8B 13                                                 	mov	edx,[ebx]
000018E1: 09 D2                                                 	or	edx,edx
000018E3: 74 2C                                                 	jz	preprocessor_symbol_not_found
000018E5: 31 C0                                                 	xor	eax,eax
000018E7: D1 E5                                                 	shl	ebp,1
000018E9: 83 D0 00                                              	adc	eax,0
000018EC: 8D 1C 82                                              	lea	ebx,[edx+eax*4]
000018EF: 4F                                                    	dec	edi
000018F0: 75 ED                                                 	jnz	follow_hashes_tree
000018F2: 88 C8                                                 	mov	al,cl
000018F4: 8B 13                                                 	mov	edx,[ebx]
000018F6: 09 D2                                                 	or	edx,edx
000018F8: 74 17                                                 	jz	preprocessor_symbol_not_found
                                                                      compare_with_preprocessor_symbol:
000018FA: 8B 7A 04                                              	mov	edi,[edx+4]
000018FD: 83 FF 01                                              	cmp	edi,1
00001900: 76 09                                                 	jbe	next_equal_hash
00001902: F3 A6                                                 	repe	cmps byte [esi],[edi]
00001904: 74 10                                                 	je	preprocessor_symbol_found
00001906: 88 C1                                                 	mov	cl,al
00001908: 8B 34 24                                              	mov	esi,[esp]
                                                                      next_equal_hash:
0000190B: 8B 12                                                 	mov	edx,[edx]
0000190D: 09 D2                                                 	or	edx,edx
0000190F: 75 E9                                                 	jnz	compare_with_preprocessor_symbol
                                                                      preprocessor_symbol_not_found:
00001911: 5E 5F 5D                                              	pop	esi edi ebp
00001914: F9                                                    	stc
00001915: C3                                                    	ret
                                                                      preprocessor_symbol_found:
00001916: 5B 5F 5D                                              	pop	ebx edi ebp
00001919: F8                                                    	clc
0000191A: C3                                                    	ret
                                                                      calculate_hash:
0000191B: 31 DB                                                 	xor	ebx,ebx
0000191D: B8 C5 9D 1C 81                                        	mov	eax,2166136261
00001922: BD 93 01 00 01                                        	mov	ebp,16777619
                                                                      fnv1a_hash:
00001927: 32 04 1E                                              	xor	al,[esi+ebx]
0000192A: F7 E5                                                 	mul	ebp
0000192C: FE C3                                                 	inc	bl
0000192E: 38 CB                                                 	cmp	bl,cl
00001930: 72 F5                                                 	jb	fnv1a_hash
00001932: C3                                                    	ret
                                                                add_preprocessor_symbol:
00001933: 57 56                                                 	push	edi esi
00001935: 31 C0                                                 	xor	eax,eax
00001937: 08 C9                                                 	or	cl,cl
00001939: 74 1F                                                 	jz	reshape_hash
0000193B: 80 FD 03                                              	cmp	ch,11b
0000193E: 74 15                                                 	je	preprocessor_symbol_name_ok
00001940: 51                                                    	push	ecx
00001941: 0F B6 C9                                              	movzx	ecx,cl
00001944: BF C6 44 01 00                                        	mov	edi,preprocessor_directives
00001949: E8 47 FC FF FF                                        	call	get_directive
0000194E: 0F 83 1B F1 FF FF                                     	jnc	reserved_word_used_as_symbol
00001954: 59                                                    	pop	ecx
                                                                      preprocessor_symbol_name_ok:
00001955: E8 C1 FF FF FF                                        	call	calculate_hash
                                                                      reshape_hash:
0000195A: 89 C5                                                 	mov	ebp,eax
0000195C: 81 E5 FF 03 00 00                                     	and	ebp,3FFh
00001962: C1 E8 0A                                              	shr	eax,10
00001965: 31 C5                                                 	xor	ebp,eax
00001967: C1 E1 16                                              	shl	ecx,22
0000196A: 09 CD                                                 	or	ebp,ecx
0000196C: BB CC A1 01 00                                        	mov	ebx,hash_tree
00001971: B9 20 00 00 00                                        	mov	ecx,32
                                                                      find_leave_for_symbol:
00001976: 8B 13                                                 	mov	edx,[ebx]
00001978: 09 D2                                                 	or	edx,edx
0000197A: 74 58                                                 	jz	extend_hashes_tree
0000197C: 31 C0                                                 	xor	eax,eax
0000197E: D1 C5                                                 	rol	ebp,1
00001980: 83 D0 00                                              	adc	eax,0
00001983: 8D 1C 82                                              	lea	ebx,[edx+eax*4]
00001986: 49                                                    	dec	ecx
00001987: 75 ED                                                 	jnz	find_leave_for_symbol
00001989: 8B 13                                                 	mov	edx,[ebx]
0000198B: 09 D2                                                 	or	edx,edx
0000198D: 74 1E                                                 	jz	add_symbol_entry
0000198F: C1 ED 1E                                              	shr	ebp,30
00001992: 83 FD 03                                              	cmp	ebp,11b
00001995: 74 37                                                 	je	reuse_symbol_entry
00001997: 83 7A 04 00                                           	cmp	dword [edx+4],0
0000199B: 75 10                                                 	jne	add_symbol_entry
                                                                      find_entry_to_reuse:
0000199D: 8B 3A                                                 	mov	edi,[edx]
0000199F: 09 FF                                                 	or	edi,edi
000019A1: 74 2B                                                 	jz	reuse_symbol_entry
000019A3: 83 7F 04 00                                           	cmp	dword [edi+4],0
000019A7: 75 25                                                 	jne	reuse_symbol_entry
000019A9: 89 FA                                                 	mov	edx,edi
000019AB: EB F0                                                 	jmp	find_entry_to_reuse
                                                                      add_symbol_entry:
000019AD: 89 D0                                                 	mov	eax,edx
000019AF: 8B 15 C0 A1 01 00                                     	mov	edx,[labels_list]
000019B5: 83 EA 10                                              	sub	edx,16
000019B8: 3B 15 64 A1 01 00                                     	cmp	edx,[free_additional_memory]
000019BE: 0F 82 D8 EE FF FF                                     	jb	out_of_memory
000019C4: 89 15 C0 A1 01 00                                     	mov	[labels_list],edx
000019CA: 89 02                                                 	mov	[edx],eax
000019CC: 89 13                                                 	mov	[ebx],edx
                                                                      reuse_symbol_entry:
000019CE: 5E 5F                                                 	pop	esi edi
000019D0: 89 72 04                                              	mov	[edx+4],esi
000019D3: C3                                                    	ret
                                                                      extend_hashes_tree:
000019D4: 8B 15 C0 A1 01 00                                     	mov	edx,[labels_list]
000019DA: 83 EA 08                                              	sub	edx,8
000019DD: 3B 15 64 A1 01 00                                     	cmp	edx,[free_additional_memory]
000019E3: 0F 82 B3 EE FF FF                                     	jb	out_of_memory
000019E9: 89 15 C0 A1 01 00                                     	mov	[labels_list],edx
000019EF: 31 C0                                                 	xor	eax,eax
000019F1: 89 02                                                 	mov	[edx],eax
000019F3: 89 42 04                                              	mov	[edx+4],eax
000019F6: D1 E5                                                 	shl	ebp,1
000019F8: 83 D0 00                                              	adc	eax,0
000019FB: 89 13                                                 	mov	[ebx],edx
000019FD: 8D 1C 82                                              	lea	ebx,[edx+eax*4]
00001A00: 49                                                    	dec	ecx
00001A01: 75 D1                                                 	jnz	extend_hashes_tree
00001A03: 8B 15 C0 A1 01 00                                     	mov	edx,[labels_list]
00001A09: 83 EA 10                                              	sub	edx,16
00001A0C: 3B 15 64 A1 01 00                                     	cmp	edx,[free_additional_memory]
00001A12: 0F 82 84 EE FF FF                                     	jb	out_of_memory
00001A18: 89 15 C0 A1 01 00                                     	mov	[labels_list],edx
00001A1E: C7 02 00 00 00 00                                     	mov	dword [edx],0
00001A24: 89 13                                                 	mov	[ebx],edx
00001A26: 5E 5F                                                 	pop	esi edi
00001A28: 89 72 04                                              	mov	[edx+4],esi
00001A2B: C3                                                    	ret
                                                                
                                                                define_fix_constant:
00001A2C: 83 C2 05                                              	add	edx,5
00001A2F: 83 C6 02                                              	add	esi,2
00001A32: 52                                                    	push	edx
00001A33: B5 03                                                 	mov	ch,11b
00001A35: EB 11                                                 	jmp	define_preprocessor_constant
                                                                define_equ_constant:
00001A37: 83 C6 03                                              	add	esi,3
00001A3A: 56                                                    	push	esi
00001A3B: E8 9B 03 00 00                                        	call	process_equ_constants
00001A40: 8B 35 98 A1 01 00                                     	mov	esi,[struc_name]
00001A46: B5 02                                                 	mov	ch,10b
                                                                      define_preprocessor_constant:
00001A48: C6 46 FE 3B                                           	mov	byte [esi-2],3Bh
00001A4C: 8A 4E FF                                              	mov	cl,[esi-1]
00001A4F: E8 DF FE FF FF                                        	call	add_preprocessor_symbol
00001A54: 5B                                                    	pop	ebx
00001A55: 89 F9                                                 	mov	ecx,edi
00001A57: 49                                                    	dec	ecx
00001A58: 29 D9                                                 	sub	ecx,ebx
00001A5A: 89 5A 08                                              	mov	[edx+8],ebx
00001A5D: 89 4A 0C                                              	mov	[edx+12],ecx
00001A60: E9 F6 FD FF FF                                        	jmp	line_preprocessed
                                                                define_symbolic_constant:
00001A65: AC                                                    	lods	byte [esi]
00001A66: 3C 1A                                                 	cmp	al,1Ah
00001A68: 0F 85 FA EF FF FF                                     	jne	invalid_name
00001A6E: AC                                                    	lods	byte [esi]
00001A6F: 88 C1                                                 	mov	cl,al
00001A71: B5 02                                                 	mov	ch,10b
00001A73: E8 BB FE FF FF                                        	call	add_preprocessor_symbol
00001A78: 0F B6 46 FF                                           	movzx	eax,byte [esi-1]
00001A7C: 01 C6                                                 	add	esi,eax
00001A7E: 8D 4F FF                                              	lea	ecx,[edi-1]
00001A81: 29 F1                                                 	sub	ecx,esi
00001A83: 89 72 08                                              	mov	[edx+8],esi
00001A86: 89 4A 0C                                              	mov	[edx+12],ecx
00001A89: E9 CD FD FF FF                                        	jmp	line_preprocessed
                                                                
                                                                define_struc:
00001A8E: B5 01                                                 	mov	ch,1
00001A90: EB 02                                                 	jmp	make_macro
                                                                define_macro:
00001A92: 30 ED                                                 	xor	ch,ch
                                                                      make_macro:
00001A94: AC                                                    	lods	byte [esi]
00001A95: 3C 1A                                                 	cmp	al,1Ah
00001A97: 0F 85 CB EF FF FF                                     	jne	invalid_name
00001A9D: AC                                                    	lods	byte [esi]
00001A9E: 88 C1                                                 	mov	cl,al
00001AA0: E8 8E FE FF FF                                        	call	add_preprocessor_symbol
00001AA5: A1 80 A1 01 00                                        	mov	eax,[current_line]
00001AAA: 89 42 0C                                              	mov	[edx+12],eax
00001AAD: 0F B6 46 FF                                           	movzx	eax,byte [esi-1]
00001AB1: 01 C6                                                 	add	esi,eax
00001AB3: 89 72 08                                              	mov	[edx+8],esi
00001AB6: A0 CD A2 01 00                                        	mov	al,[macro_status]
00001ABB: 24 F0                                                 	and	al,0F0h
00001ABD: 0C 01                                                 	or	al,1
00001ABF: A2 CD A2 01 00                                        	mov	[macro_status],al
00001AC4: A1 80 A1 01 00                                        	mov	eax,[current_line]
00001AC9: A3 E8 A1 01 00                                        	mov	[error_line],eax
00001ACE: 31 ED                                                 	xor	ebp,ebp
00001AD0: AC                                                    	lods	byte [esi]
00001AD1: 08 C0                                                 	or	al,al
00001AD3: 0F 84 82 FD FF FF                                     	jz	line_preprocessed
00001AD9: 3C 7B                                                 	cmp	al,'{'
00001ADB: 0F 84 21 01 00 00                                     	je	found_macro_block
00001AE1: 4E                                                    	dec	esi
                                                                      skip_macro_arguments:
00001AE2: AC                                                    	lods	byte [esi]
00001AE3: 3C 1A                                                 	cmp	al,1Ah
00001AE5: 74 1A                                                 	je	skip_macro_argument
00001AE7: 3C 5B                                                 	cmp	al,'['
00001AE9: 0F 85 1D EE FF FF                                     	jne	invalid_macro_arguments
00001AEF: 83 CD FF                                              	or	ebp,-1
00001AF2: 0F 84 14 EE FF FF                                     	jz	invalid_macro_arguments
00001AF8: AC                                                    	lods	byte [esi]
00001AF9: 3C 1A                                                 	cmp	al,1Ah
00001AFB: 0F 85 0B EE FF FF                                     	jne	invalid_macro_arguments
                                                                      skip_macro_argument:
00001B01: 0F B6 06                                              	movzx	eax,byte [esi]
00001B04: 46                                                    	inc	esi
00001B05: 01 C6                                                 	add	esi,eax
00001B07: AC                                                    	lods	byte [esi]
00001B08: 3C 3A                                                 	cmp	al,':'
00001B0A: 74 35                                                 	je	macro_argument_with_default_value
00001B0C: 3C 3D                                                 	cmp	al,'='
00001B0E: 74 31                                                 	je	macro_argument_with_default_value
00001B10: 3C 2A                                                 	cmp	al,'*'
00001B12: 75 01                                                 	jne	macro_argument_end
00001B14: AC                                                    	lods	byte [esi]
                                                                      macro_argument_end:
00001B15: 3C 2C                                                 	cmp	al,','
00001B17: 74 C9                                                 	je	skip_macro_arguments
00001B19: 3C 26                                                 	cmp	al,'&'
00001B1B: 74 06                                                 	je	macro_arguments_finisher
00001B1D: 3C 5D                                                 	cmp	al,']'
00001B1F: 75 03                                                 	jne	end_macro_arguments
00001B21: F7 D5                                                 	not	ebp
                                                                      macro_arguments_finisher:
00001B23: AC                                                    	lods	byte [esi]
                                                                      end_macro_arguments:
00001B24: 09 ED                                                 	or	ebp,ebp
00001B26: 0F 85 E0 ED FF FF                                     	jnz	invalid_macro_arguments
00001B2C: 08 C0                                                 	or	al,al
00001B2E: 0F 84 27 FD FF FF                                     	jz	line_preprocessed
00001B34: 3C 7B                                                 	cmp	al,'{'
00001B36: 0F 84 C6 00 00 00                                     	je	found_macro_block
00001B3C: E9 CB ED FF FF                                        	jmp	invalid_macro_arguments
                                                                      macro_argument_with_default_value:
00001B41: 80 0D CE A2 01 00 FF                                  	or	[skip_default_argument_value],-1
00001B48: E8 03 00 00 00                                        	call	skip_macro_argument_value
00001B4D: 46                                                    	inc	esi
00001B4E: EB C5                                                 	jmp	macro_argument_end
                                                                      skip_macro_argument_value:
00001B50: 80 3E 3C                                              	cmp	byte [esi],'<'
00001B53: 75 60                                                 	jne	simple_argument
00001B55: B9 01 00 00 00                                        	mov	ecx,1
00001B5A: 46                                                    	inc	esi
                                                                      enclosed_argument:
00001B5B: AC                                                    	lods	byte [esi]
00001B5C: 08 C0                                                 	or	al,al
00001B5E: 0F 84 A8 ED FF FF                                     	jz	invalid_macro_arguments
00001B64: 3C 1A                                                 	cmp	al,1Ah
00001B66: 74 0F                                                 	je	enclosed_symbol
00001B68: 3C 22                                                 	cmp	al,22h
00001B6A: 74 13                                                 	je	enclosed_string
00001B6C: 3C 3E                                                 	cmp	al,'>'
00001B6E: 74 14                                                 	je	enclosed_argument_end
00001B70: 3C 3C                                                 	cmp	al,'<'
00001B72: 75 E7                                                 	jne	enclosed_argument
00001B74: 41                                                    	inc	ecx
00001B75: EB E4                                                 	jmp	enclosed_argument
                                                                      enclosed_symbol:
00001B77: 0F B6 06                                              	movzx	eax,byte [esi]
00001B7A: 46                                                    	inc	esi
00001B7B: 01 C6                                                 	add	esi,eax
00001B7D: EB DC                                                 	jmp	enclosed_argument
                                                                      enclosed_string:
00001B7F: AD                                                    	lods	dword [esi]
00001B80: 01 C6                                                 	add	esi,eax
00001B82: EB D7                                                 	jmp	enclosed_argument
                                                                      enclosed_argument_end:
00001B84: E2 D5                                                 	loop	enclosed_argument
00001B86: AC                                                    	lods	byte [esi]
00001B87: 08 C0                                                 	or	al,al
00001B89: 74 61                                                 	jz	argument_value_end
00001B8B: 3C 2C                                                 	cmp	al,','
00001B8D: 74 5D                                                 	je	argument_value_end
00001B8F: 80 3D CE A2 01 00 00                                  	cmp	[skip_default_argument_value],0
00001B96: 0F 84 70 ED FF FF                                     	je	invalid_macro_arguments
00001B9C: 3C 7B                                                 	cmp	al,'{'
00001B9E: 74 4C                                                 	je	argument_value_end
00001BA0: 3C 26                                                 	cmp	al,'&'
00001BA2: 74 48                                                 	je	argument_value_end
00001BA4: 09 ED                                                 	or	ebp,ebp
00001BA6: 0F 84 60 ED FF FF                                     	jz	invalid_macro_arguments
00001BAC: 3C 5D                                                 	cmp	al,']'
00001BAE: 74 3C                                                 	je	argument_value_end
00001BB0: E9 57 ED FF FF                                        	jmp	invalid_macro_arguments
                                                                      simple_argument:
00001BB5: AC                                                    	lods	byte [esi]
00001BB6: 08 C0                                                 	or	al,al
00001BB8: 74 32                                                 	jz	argument_value_end
00001BBA: 3C 2C                                                 	cmp	al,','
00001BBC: 74 2E                                                 	je	argument_value_end
00001BBE: 3C 22                                                 	cmp	al,22h
00001BC0: 74 25                                                 	je	argument_string
00001BC2: 3C 1A                                                 	cmp	al,1Ah
00001BC4: 74 19                                                 	je	argument_symbol
00001BC6: 80 3D CE A2 01 00 00                                  	cmp	[skip_default_argument_value],0
00001BCD: 74 E6                                                 	je	simple_argument
00001BCF: 3C 7B                                                 	cmp	al,'{'
00001BD1: 74 19                                                 	je	argument_value_end
00001BD3: 3C 26                                                 	cmp	al,'&'
00001BD5: 74 15                                                 	je	argument_value_end
00001BD7: 09 ED                                                 	or	ebp,ebp
00001BD9: 74 DA                                                 	jz	simple_argument
00001BDB: 3C 5D                                                 	cmp	al,']'
00001BDD: 74 0D                                                 	je	argument_value_end
                                                                      argument_symbol:
00001BDF: 0F B6 06                                              	movzx	eax,byte [esi]
00001BE2: 46                                                    	inc	esi
00001BE3: 01 C6                                                 	add	esi,eax
00001BE5: EB CE                                                 	jmp	simple_argument
                                                                      argument_string:
00001BE7: AD                                                    	lods	dword [esi]
00001BE8: 01 C6                                                 	add	esi,eax
00001BEA: EB C9                                                 	jmp	simple_argument
                                                                      argument_value_end:
00001BEC: 4E                                                    	dec	esi
00001BED: C3                                                    	ret
                                                                      find_macro_block:
00001BEE: 83 C6 02                                              	add	esi,2
00001BF1: AC                                                    	lods	byte [esi]
00001BF2: 08 C0                                                 	or	al,al
00001BF4: 0F 84 61 FC FF FF                                     	jz	line_preprocessed
00001BFA: 3C 7B                                                 	cmp	al,'{'
00001BFC: 0F 85 1E ED FF FF                                     	jne	unexpected_characters
                                                                      found_macro_block:
00001C02: 80 0D CD A2 01 00 02                                  	or	[macro_status],2
                                                                      skip_macro_block:
00001C09: AC                                                    	lods	byte [esi]
00001C0A: 3C 1A                                                 	cmp	al,1Ah
00001C0C: 74 64                                                 	je	skip_macro_symbol
00001C0E: 3C 3B                                                 	cmp	al,3Bh
00001C10: 74 60                                                 	je	skip_macro_symbol
00001C12: 3C 22                                                 	cmp	al,22h
00001C14: 74 64                                                 	je	skip_macro_string
00001C16: 08 C0                                                 	or	al,al
00001C18: 0F 84 3D FC FF FF                                     	jz	line_preprocessed
00001C1E: 3C 7D                                                 	cmp	al,'}'
00001C20: 75 E7                                                 	jne	skip_macro_block
00001C22: A0 CD A2 01 00                                        	mov	al,[macro_status]
00001C27: 80 25 CD A2 01 00 F0                                  	and	[macro_status],0F0h
00001C2E: A8 08                                                 	test	al,8
00001C30: 0F 85 5E 06 00 00                                     	jnz	use_instant_macro
00001C36: 80 3E 00                                              	cmp	byte [esi],0
00001C39: 0F 84 1C FC FF FF                                     	je	line_preprocessed
00001C3F: 89 F9                                                 	mov	ecx,edi
00001C41: 29 F1                                                 	sub	ecx,esi
00001C43: 89 F2                                                 	mov	edx,esi
00001C45: 8D 74 0E FF                                           	lea	esi,[esi+ecx-1]
00001C49: 8D 7F 11                                              	lea	edi,[edi+1+16]
00001C4C: 89 FB                                                 	mov	ebx,edi
00001C4E: 4F                                                    	dec	edi
00001C4F: FD                                                    	std
00001C50: F3 A4                                                 	rep	movs byte [edi],[esi]
00001C52: FC                                                    	cld
00001C53: 89 D7                                                 	mov	edi,edx
00001C55: 30 C0                                                 	xor	al,al
00001C57: AA                                                    	stos	byte [edi]
00001C58: 8B 35 80 A1 01 00                                     	mov	esi,[current_line]
00001C5E: 89 3D 80 A1 01 00                                     	mov	[current_line],edi
00001C64: B9 04 00 00 00                                        	mov	ecx,4
00001C69: F3 A5                                                 	rep	movs dword [edi],[esi]
00001C6B: 89 DF                                                 	mov	edi,ebx
00001C6D: E9 E9 F9 FF FF                                        	jmp	initial_preprocessing_ok
                                                                      skip_macro_symbol:
00001C72: 0F B6 06                                              	movzx	eax,byte [esi]
00001C75: 46                                                    	inc	esi
00001C76: 01 C6                                                 	add	esi,eax
00001C78: EB 8F                                                 	jmp	skip_macro_block
                                                                      skip_macro_string:
00001C7A: AD                                                    	lods	dword [esi]
00001C7B: 01 C6                                                 	add	esi,eax
00001C7D: EB 8A                                                 	jmp	skip_macro_block
                                                                postpone_directive:
00001C7F: 56                                                    	push	esi
00001C80: 89 D6                                                 	mov	esi,edx
00001C82: 31 C9                                                 	xor	ecx,ecx
00001C84: E8 AA FC FF FF                                        	call	add_preprocessor_symbol
00001C89: A1 80 A1 01 00                                        	mov	eax,[current_line]
00001C8E: A3 E8 A1 01 00                                        	mov	[error_line],eax
00001C93: 89 42 0C                                              	mov	[edx+12],eax
00001C96: 5E                                                    	pop	esi
00001C97: 89 72 08                                              	mov	[edx+8],esi
00001C9A: A0 CD A2 01 00                                        	mov	al,[macro_status]
00001C9F: 24 F0                                                 	and	al,0F0h
00001CA1: 0C 01                                                 	or	al,1
00001CA3: A2 CD A2 01 00                                        	mov	[macro_status],al
00001CA8: AC                                                    	lods	byte [esi]
00001CA9: 08 C0                                                 	or	al,al
00001CAB: 0F 84 AA FB FF FF                                     	jz	line_preprocessed
00001CB1: 3C 7B                                                 	cmp	al,'{'
00001CB3: 0F 85 67 EC FF FF                                     	jne	unexpected_characters
00001CB9: E9 44 FF FF FF                                        	jmp	found_macro_block
                                                                rept_directive:
00001CBE: C6 05 AF A2 01 00 00                                  	mov	[base_code],0
00001CC5: EB 22                                                 	jmp	define_instant_macro
                                                                irp_directive:
00001CC7: C6 05 AF A2 01 00 01                                  	mov	[base_code],1
00001CCE: EB 19                                                 	jmp	define_instant_macro
                                                                irps_directive:
00001CD0: C6 05 AF A2 01 00 02                                  	mov	[base_code],2
00001CD7: EB 10                                                 	jmp	define_instant_macro
                                                                irpv_directive:
00001CD9: C6 05 AF A2 01 00 03                                  	mov	[base_code],3
00001CE0: EB 07                                                 	jmp	define_instant_macro
                                                                match_directive:
00001CE2: C6 05 AF A2 01 00 10                                  	mov	[base_code],10h
                                                                define_instant_macro:
00001CE9: A0 CD A2 01 00                                        	mov	al,[macro_status]
00001CEE: 24 F0                                                 	and	al,0F0h
00001CF0: 0C 09                                                 	or	al,8+1
00001CF2: A2 CD A2 01 00                                        	mov	[macro_status],al
00001CF7: A1 80 A1 01 00                                        	mov	eax,[current_line]
00001CFC: A3 E8 A1 01 00                                        	mov	[error_line],eax
00001D01: 89 35 A0 A1 01 00                                     	mov	[instant_macro_start],esi
00001D07: 80 3D AF A2 01 00 10                                  	cmp	[base_code],10h
00001D0E: 74 3B                                                 	je	prepare_match
                                                                      skip_parameters:
00001D10: AC                                                    	lods	byte [esi]
00001D11: 08 C0                                                 	or	al,al
00001D13: 74 19                                                 	jz	parameters_skipped
00001D15: 3C 7B                                                 	cmp	al,'{'
00001D17: 74 15                                                 	je	parameters_skipped
00001D19: 3C 22                                                 	cmp	al,22h
00001D1B: 74 0C                                                 	je	skip_quoted_parameter
00001D1D: 3C 1A                                                 	cmp	al,1Ah
00001D1F: 75 EF                                                 	jne	skip_parameters
00001D21: AC                                                    	lods	byte [esi]
00001D22: 0F B6 C0                                              	movzx	eax,al
00001D25: 01 C6                                                 	add	esi,eax
00001D27: EB E7                                                 	jmp	skip_parameters
                                                                      skip_quoted_parameter:
00001D29: AD                                                    	lods	dword [esi]
00001D2A: 01 C6                                                 	add	esi,eax
00001D2C: EB E2                                                 	jmp	skip_parameters
                                                                      parameters_skipped:
00001D2E: 4E                                                    	dec	esi
00001D2F: 89 35 A4 A1 01 00                                     	mov	[parameters_end],esi
00001D35: AC                                                    	lods	byte [esi]
00001D36: 3C 7B                                                 	cmp	al,'{'
00001D38: 0F 84 C4 FE FF FF                                     	je	found_macro_block
00001D3E: 08 C0                                                 	or	al,al
00001D40: 0F 85 C6 EB FF FF                                     	jnz	invalid_macro_arguments
00001D46: E9 10 FB FF FF                                        	jmp	line_preprocessed
                                                                prepare_match:
00001D4B: E8 0E 00 00 00                                        	call	skip_pattern
00001D50: C6 05 C0 A2 01 00 82                                  	mov	[value_type],80h+10b
00001D57: E8 86 00 00 00                                        	call	process_symbolic_constants
00001D5C: EB D0                                                 	jmp	parameters_skipped
                                                                      skip_pattern:
00001D5E: AC                                                    	lods	byte [esi]
00001D5F: 08 C0                                                 	or	al,al
00001D61: 0F 84 A5 EB FF FF                                     	jz	invalid_macro_arguments
00001D67: 3C 2C                                                 	cmp	al,','
00001D69: 74 26                                                 	je	pattern_skipped
00001D6B: 3C 22                                                 	cmp	al,22h
00001D6D: 74 1D                                                 	je	skip_quoted_string_in_pattern
00001D6F: 3C 1A                                                 	cmp	al,1Ah
00001D71: 74 11                                                 	je	skip_symbol_in_pattern
00001D73: 3C 3D                                                 	cmp	al,'='
00001D75: 75 E7                                                 	jne	skip_pattern
00001D77: 8A 06                                                 	mov	al,[esi]
00001D79: 3C 1A                                                 	cmp	al,1Ah
00001D7B: 74 E1                                                 	je	skip_pattern
00001D7D: 3C 22                                                 	cmp	al,22h
00001D7F: 74 DD                                                 	je	skip_pattern
00001D81: 46                                                    	inc	esi
00001D82: EB DA                                                 	jmp	skip_pattern
                                                                      skip_symbol_in_pattern:
00001D84: AC                                                    	lods	byte [esi]
00001D85: 0F B6 C0                                              	movzx	eax,al
00001D88: 01 C6                                                 	add	esi,eax
00001D8A: EB D2                                                 	jmp	skip_pattern
                                                                      skip_quoted_string_in_pattern:
00001D8C: AD                                                    	lods	dword [esi]
00001D8D: 01 C6                                                 	add	esi,eax
00001D8F: EB CD                                                 	jmp	skip_pattern
                                                                      pattern_skipped:
00001D91: C3                                                    	ret
                                                                
                                                                purge_macro:
00001D92: 30 ED                                                 	xor	ch,ch
00001D94: EB 06                                                 	jmp	restore_preprocessor_symbol
                                                                purge_struc:
00001D96: B5 01                                                 	mov	ch,1
00001D98: EB 02                                                 	jmp	restore_preprocessor_symbol
                                                                restore_equ_constant:
00001D9A: B5 02                                                 	mov	ch,10b
                                                                      restore_preprocessor_symbol:
00001D9C: 51                                                    	push	ecx
00001D9D: AC                                                    	lods	byte [esi]
00001D9E: 3C 1A                                                 	cmp	al,1Ah
00001DA0: 0F 85 C2 EC FF FF                                     	jne	invalid_name
00001DA6: AC                                                    	lods	byte [esi]
00001DA7: 88 C1                                                 	mov	cl,al
00001DA9: E8 B0 FA FF FF                                        	call	get_preprocessor_symbol
00001DAE: 72 0D                                                 	jc	no_symbol_to_restore
00001DB0: 85 D2                                                 	test	edx,edx
00001DB2: 74 0B                                                 	jz	symbol_restored
00001DB4: C7 42 04 00 00 00 00                                  	mov	dword [edx+4],0
00001DBB: EB 02                                                 	jmp	symbol_restored
                                                                      no_symbol_to_restore:
00001DBD: 01 CE                                                 	add	esi,ecx
                                                                      symbol_restored:
00001DBF: 59                                                    	pop	ecx
00001DC0: AC                                                    	lods	byte [esi]
00001DC1: 3C 2C                                                 	cmp	al,','
00001DC3: 74 D7                                                 	je	restore_preprocessor_symbol
00001DC5: 08 C0                                                 	or	al,al
00001DC7: 0F 85 C5 EC FF FF                                     	jnz	extra_characters_on_line
00001DCD: E9 89 FA FF FF                                        	jmp	line_preprocessed
                                                                
                                                                process_fix_constants:
00001DD2: C6 05 C0 A2 01 00 03                                  	mov	[value_type],11b
00001DD9: EB 07                                                 	jmp	process_symbolic_constants
                                                                process_equ_constants:
00001DDB: C6 05 C0 A2 01 00 02                                  	mov	[value_type],10b
                                                                      process_symbolic_constants:
00001DE2: 89 F5                                                 	mov	ebp,esi
00001DE4: AC                                                    	lods	byte [esi]
00001DE5: 3C 1A                                                 	cmp	al,1Ah
00001DE7: 74 24                                                 	je	check_symbol
00001DE9: 3C 22                                                 	cmp	al,22h
00001DEB: 74 09                                                 	je	ignore_string
00001DED: 3C 7B                                                 	cmp	al,'{'
00001DEF: 74 0A                                                 	je	check_brace
00001DF1: 08 C0                                                 	or	al,al
00001DF3: 75 ED                                                 	jnz	process_symbolic_constants
00001DF5: C3                                                    	ret
                                                                      ignore_string:
00001DF6: AD                                                    	lods	dword [esi]
00001DF7: 01 C6                                                 	add	esi,eax
00001DF9: EB E7                                                 	jmp	process_symbolic_constants
                                                                      check_brace:
00001DFB: F6 05 C0 A2 01 00 80                                  	test	[value_type],80h
00001E02: 74 DE                                                 	jz	process_symbolic_constants
00001E04: C3                                                    	ret
                                                                      no_replacing:
00001E05: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00001E09: 01 CE                                                 	add	esi,ecx
00001E0B: EB D5                                                 	jmp	process_symbolic_constants
                                                                      check_symbol:
00001E0D: 8A 0E                                                 	mov	cl,[esi]
00001E0F: 46                                                    	inc	esi
00001E10: 8A 2D C0 A2 01 00                                     	mov	ch,[value_type]
00001E16: E8 43 FA FF FF                                        	call	get_preprocessor_symbol
00001E1B: 72 E8                                                 	jc	no_replacing
00001E1D: 89 3D 5C A2 01 00                                     	mov	[current_section],edi
                                                                      replace_symbolic_constant:
00001E23: 85 D2                                                 	test	edx,edx
00001E25: 0F 84 A6 00 00 00                                     	jz	replace_special_symbolic_constant
00001E2B: 8B 4A 0C                                              	mov	ecx,[edx+12]
00001E2E: 8B 52 08                                              	mov	edx,[edx+8]
00001E31: 87 F2                                                 	xchg	esi,edx
00001E33: E8 22 00 00 00                                        	call	move_data
00001E38: 89 D6                                                 	mov	esi,edx
                                                                      process_after_replaced:
00001E3A: AC                                                    	lods	byte [esi]
00001E3B: 3C 1A                                                 	cmp	al,1Ah
00001E3D: 74 6A                                                 	je	symbol_after_replaced
00001E3F: AA                                                    	stos	byte [edi]
00001E40: 3C 22                                                 	cmp	al,22h
00001E42: 74 33                                                 	je	string_after_replaced
00001E44: 3C 7B                                                 	cmp	al,'{'
00001E46: 74 3A                                                 	je	brace_after_replaced
00001E48: 08 C0                                                 	or	al,al
00001E4A: 75 EE                                                 	jnz	process_after_replaced
00001E4C: 89 F9                                                 	mov	ecx,edi
00001E4E: 29 F1                                                 	sub	ecx,esi
00001E50: 89 EF                                                 	mov	edi,ebp
00001E52: E8 03 00 00 00                                        	call	move_data
00001E57: 89 FE                                                 	mov	esi,edi
00001E59: C3                                                    	ret
                                                                      move_data:
00001E5A: 8D 04 0F                                              	lea	eax,[edi+ecx]
00001E5D: 3B 05 3C A1 01 00                                     	cmp	eax,[memory_end]
00001E63: 0F 83 33 EA FF FF                                     	jae	out_of_memory
00001E69: D1 E9                                                 	shr	ecx,1
00001E6B: 73 01                                                 	jnc	movsb_ok
00001E6D: A4                                                    	movs	byte [edi],[esi]
                                                                      movsb_ok:
00001E6E: D1 E9                                                 	shr	ecx,1
00001E70: 73 02                                                 	jnc	movsw_ok
00001E72: 66 A5                                                 	movs	word [edi],[esi]
                                                                      movsw_ok:
00001E74: F3 A5                                                 	rep	movs dword [edi],[esi]
00001E76: C3                                                    	ret
                                                                      string_after_replaced:
00001E77: AD                                                    	lods	dword [esi]
00001E78: AB                                                    	stos	dword [edi]
00001E79: 89 C1                                                 	mov	ecx,eax
00001E7B: E8 DA FF FF FF                                        	call	move_data
00001E80: EB B8                                                 	jmp	process_after_replaced
                                                                      brace_after_replaced:
00001E82: F6 05 C0 A2 01 00 80                                  	test	[value_type],80h
00001E89: 74 AF                                                 	jz	process_after_replaced
00001E8B: 89 FA                                                 	mov	edx,edi
00001E8D: 8B 0D 5C A2 01 00                                     	mov	ecx,[current_section]
00001E93: 29 CA                                                 	sub	edx,ecx
00001E95: 29 F1                                                 	sub	ecx,esi
00001E97: F3 A4                                                 	rep	movs byte [edi],[esi]
00001E99: 89 F9                                                 	mov	ecx,edi
00001E9B: 29 F1                                                 	sub	ecx,esi
00001E9D: 89 EF                                                 	mov	edi,ebp
00001E9F: E8 B6 FF FF FF                                        	call	move_data
00001EA4: 8D 74 15 00                                           	lea	esi,[ebp+edx]
00001EA8: C3                                                    	ret
                                                                      symbol_after_replaced:
00001EA9: 8A 0E                                                 	mov	cl,[esi]
00001EAB: 46                                                    	inc	esi
00001EAC: 8A 2D C0 A2 01 00                                     	mov	ch,[value_type]
00001EB2: E8 A7 F9 FF FF                                        	call	get_preprocessor_symbol
00001EB7: 0F 83 66 FF FF FF                                     	jnc	replace_symbolic_constant
00001EBD: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00001EC1: B0 1A                                                 	mov	al,1Ah
00001EC3: 88 CC                                                 	mov	ah,cl
00001EC5: 66 AB                                                 	stos	word [edi]
00001EC7: E8 8E FF FF FF                                        	call	move_data
00001ECC: E9 69 FF FF FF                                        	jmp	process_after_replaced
                                                                      replace_special_symbolic_constant:
00001ED1: FF E0                                                 	jmp	near eax
                                                                    preprocessed_file_value:
00001ED3: E8 62 00 00 00                                        	call	get_current_line_from_file
00001ED8: 85 DB                                                 	test	ebx,ebx
00001EDA: 0F 84 5A FF FF FF                                     	jz	process_after_replaced
00001EE0: 56 57                                                 	push	esi edi
00001EE2: 8B 33                                                 	mov	esi,[ebx]
00001EE4: 89 F7                                                 	mov	edi,esi
00001EE6: 30 C0                                                 	xor	al,al
00001EE8: 83 C9 FF                                              	or	ecx,-1
00001EEB: F2 AE                                                 	repne	scas byte [edi]
00001EED: 83 C1 02                                              	add	ecx,2
00001EF0: F7 D9                                                 	neg	ecx
00001EF2: 5F                                                    	pop	edi
00001EF3: 8D 44 0F 05                                           	lea	eax,[edi+1+4+ecx]
00001EF7: 3B 05 3C A1 01 00                                     	cmp	eax,[memory_end]
00001EFD: 0F 87 99 E9 FF FF                                     	ja	out_of_memory
00001F03: B0 22                                                 	mov	al,22h
00001F05: AA                                                    	stos	byte [edi]
00001F06: 89 C8                                                 	mov	eax,ecx
00001F08: AB                                                    	stos	dword [edi]
00001F09: F3 A4                                                 	rep	movs byte [edi],[esi]
00001F0B: 5E                                                    	pop	esi
00001F0C: E9 29 FF FF FF                                        	jmp	process_after_replaced
                                                                    preprocessed_line_value:
00001F11: E8 24 00 00 00                                        	call	get_current_line_from_file
00001F16: 85 DB                                                 	test	ebx,ebx
00001F18: 0F 84 1C FF FF FF                                     	jz	process_after_replaced
00001F1E: 8D 47 19                                              	lea	eax,[edi+1+4+20]
00001F21: 3B 05 3C A1 01 00                                     	cmp	eax,[memory_end]
00001F27: 0F 87 6F E9 FF FF                                     	ja	out_of_memory
00001F2D: 8B 4B 04                                              	mov	ecx,[ebx+4]
00001F30: E8 A8 0A 00 00                                        	call	store_number_symbol
00001F35: E9 00 FF FF FF                                        	jmp	process_after_replaced
                                                                    get_current_line_from_file:
00001F3A: 8B 1D 80 A1 01 00                                     	mov	ebx,[current_line]
                                                                      find_line_from_file:
00001F40: 85 DB                                                 	test	ebx,ebx
00001F42: 74 0B                                                 	jz	line_from_file_found
00001F44: F6 43 07 80                                           	test	byte [ebx+7],80h
00001F48: 74 05                                                 	jz	line_from_file_found
00001F4A: 8B 5B 08                                              	mov	ebx,[ebx+8]
00001F4D: EB F1                                                 	jmp	find_line_from_file
                                                                      line_from_file_found:
00001F4F: C3                                                    	ret
                                                                
                                                                process_macro_operators:
00001F50: 30 D2                                                 	xor	dl,dl
00001F52: 89 FD                                                 	mov	ebp,edi
                                                                      before_macro_operators:
00001F54: 89 F7                                                 	mov	edi,esi
00001F56: AC                                                    	lods	byte [esi]
00001F57: 3C 60                                                 	cmp	al,'`'
00001F59: 74 72                                                 	je	symbol_conversion
00001F5B: 3C 23                                                 	cmp	al,'#'
00001F5D: 0F 84 E7 00 00 00                                     	je	concatenation
00001F63: 3C 1A                                                 	cmp	al,1Ah
00001F65: 74 14                                                 	je	symbol_before_macro_operators
00001F67: 3C 3B                                                 	cmp	al,3Bh
00001F69: 74 0D                                                 	je	no_more_macro_operators
00001F6B: 3C 22                                                 	cmp	al,22h
00001F6D: 74 21                                                 	je	string_before_macro_operators
00001F6F: 30 D2                                                 	xor	dl,dl
00001F71: 08 C0                                                 	or	al,al
00001F73: 75 DF                                                 	jnz	before_macro_operators
00001F75: 89 F7                                                 	mov	edi,esi
00001F77: C3                                                    	ret
                                                                      no_more_macro_operators:
00001F78: 89 EF                                                 	mov	edi,ebp
00001F7A: C3                                                    	ret
                                                                      symbol_before_macro_operators:
00001F7B: B2 1A                                                 	mov	dl,1Ah
00001F7D: 89 F3                                                 	mov	ebx,esi
00001F7F: AC                                                    	lods	byte [esi]
00001F80: 0F B6 C8                                              	movzx	ecx,al
00001F83: E3 07                                                 	jecxz	symbol_before_macro_operators_ok
00001F85: 89 F7                                                 	mov	edi,esi
00001F87: 80 3E 5C                                              	cmp	byte [esi],'\'
00001F8A: 74 0D                                                 	je	escaped_symbol
                                                                      symbol_before_macro_operators_ok:
00001F8C: 01 CE                                                 	add	esi,ecx
00001F8E: EB C4                                                 	jmp	before_macro_operators
                                                                      string_before_macro_operators:
00001F90: B2 22                                                 	mov	dl,22h
00001F92: 89 F3                                                 	mov	ebx,esi
00001F94: AD                                                    	lods	dword [esi]
00001F95: 01 C6                                                 	add	esi,eax
00001F97: EB BB                                                 	jmp	before_macro_operators
                                                                      escaped_symbol:
00001F99: FE 4F FF                                              	dec	byte [edi-1]
00001F9C: 49                                                    	dec	ecx
00001F9D: 46                                                    	inc	esi
00001F9E: 83 F9 01                                              	cmp	ecx,1
00001FA1: F3 A4                                                 	rep	movs byte [edi],[esi]
00001FA3: 0F 85 29 01 00 00                                     	jne	after_macro_operators
00001FA9: 8A 46 FF                                              	mov	al,[esi-1]
00001FAC: 89 D9                                                 	mov	ecx,ebx
00001FAE: BB D3 A2 01 00                                        	mov	ebx,characters
00001FB3: D7                                                    	xlat	byte [ebx]
00001FB4: 89 CB                                                 	mov	ebx,ecx
00001FB6: 08 C0                                                 	or	al,al
00001FB8: 0F 85 14 01 00 00                                     	jnz	after_macro_operators
00001FBE: 83 EF 03                                              	sub	edi,3
00001FC1: 8A 46 FF                                              	mov	al,[esi-1]
00001FC4: AA                                                    	stos	byte [edi]
00001FC5: 30 D2                                                 	xor	dl,dl
00001FC7: E9 06 01 00 00                                        	jmp	after_macro_operators
                                                                      reduce_symbol_conversion:
00001FCC: 46                                                    	inc	esi
                                                                      symbol_conversion:
00001FCD: 89 F2                                                 	mov	edx,esi
00001FCF: 8A 06                                                 	mov	al,[esi]
00001FD1: 3C 1A                                                 	cmp	al,1Ah
00001FD3: 75 14                                                 	jne	symbol_character_conversion
00001FD5: 66 AD                                                 	lods	word [esi]
00001FD7: 0F B6 CC                                              	movzx	ecx,ah
00001FDA: 8D 5F 03                                              	lea	ebx,[edi+3]
00001FDD: E3 24                                                 	jecxz	convert_to_quoted_string
00001FDF: 80 3E 5C                                              	cmp	byte [esi],'\'
00001FE2: 75 1F                                                 	jne	convert_to_quoted_string
00001FE4: 46                                                    	inc	esi
00001FE5: 49                                                    	dec	ecx
00001FE6: 4B                                                    	dec	ebx
00001FE7: EB 1A                                                 	jmp	convert_to_quoted_string
                                                                      symbol_character_conversion:
00001FE9: 3C 22                                                 	cmp	al,22h
00001FEB: 0F 84 E1 00 00 00                                     	je	after_macro_operators
00001FF1: 3C 60                                                 	cmp	al,'`'
00001FF3: 74 D7                                                 	je	reduce_symbol_conversion
00001FF5: 8D 5F 05                                              	lea	ebx,[edi+5]
00001FF8: 31 C9                                                 	xor	ecx,ecx
00001FFA: 08 C0                                                 	or	al,al
00001FFC: 74 05                                                 	jz	convert_to_quoted_string
00001FFE: 3C 23                                                 	cmp	al,'#'
00002000: 74 01                                                 	je	convert_to_quoted_string
00002002: 41                                                    	inc	ecx
                                                                      convert_to_quoted_string:
00002003: 29 D3                                                 	sub	ebx,edx
00002005: 77 19                                                 	ja	shift_line_data
00002007: B0 22                                                 	mov	al,22h
00002009: 88 C2                                                 	mov	dl,al
0000200B: AA                                                    	stos	byte [edi]
0000200C: 89 FB                                                 	mov	ebx,edi
0000200E: 89 C8                                                 	mov	eax,ecx
00002010: AB                                                    	stos	dword [edi]
00002011: F3 A4                                                 	rep	movs byte [edi],[esi]
00002013: 39 F7                                                 	cmp	edi,esi
00002015: 0F 84 39 FF FF FF                                     	je	before_macro_operators
0000201B: E9 B2 00 00 00                                        	jmp	after_macro_operators
                                                                      shift_line_data:
00002020: 51                                                    	push	ecx
00002021: 89 F2                                                 	mov	edx,esi
00002023: 8D 75 FF                                              	lea	esi,[ebp-1]
00002026: 01 DD                                                 	add	ebp,ebx
00002028: 8D 7D FF                                              	lea	edi,[ebp-1]
0000202B: 8D 4E 01                                              	lea	ecx,[esi+1]
0000202E: 29 D1                                                 	sub	ecx,edx
00002030: FD                                                    	std
00002031: F3 A4                                                 	rep	movs byte [edi],[esi]
00002033: FC                                                    	cld
00002034: 58                                                    	pop	eax
00002035: 83 EF 03                                              	sub	edi,3
00002038: B2 22                                                 	mov	dl,22h
0000203A: 88 57 FF                                              	mov	[edi-1],dl
0000203D: 89 FB                                                 	mov	ebx,edi
0000203F: 89 07                                                 	mov	[edi],eax
00002041: 8D 74 07 04                                           	lea	esi,[edi+4+eax]
00002045: E9 0A FF FF FF                                        	jmp	before_macro_operators
                                                                      concatenation:
0000204A: 80 FA 1A                                              	cmp	dl,1Ah
0000204D: 74 0F                                                 	je	symbol_concatenation
0000204F: 80 FA 22                                              	cmp	dl,22h
00002052: 74 3C                                                 	je	string_concatenation
                                                                      no_concatenation:
00002054: 39 FE                                                 	cmp	esi,edi
00002056: 0F 84 F8 FE FF FF                                     	je	before_macro_operators
0000205C: EB 74                                                 	jmp	after_macro_operators
                                                                      symbol_concatenation:
0000205E: 80 3E 1A                                              	cmp	byte [esi],1Ah
00002061: 75 F1                                                 	jne	no_concatenation
00002063: 46                                                    	inc	esi
00002064: AC                                                    	lods	byte [esi]
00002065: 0F B6 C8                                              	movzx	ecx,al
00002068: E3 05                                                 	jecxz	do_symbol_concatenation
0000206A: 80 3E 5C                                              	cmp	byte [esi],'\'
0000206D: 74 0C                                                 	je	concatenate_escaped_symbol
                                                                      do_symbol_concatenation:
0000206F: 00 0B                                                 	add	[ebx],cl
00002071: 0F 82 EA E9 FF FF                                     	jc	name_too_long
00002077: F3 A4                                                 	rep	movs byte [edi],[esi]
00002079: EB 57                                                 	jmp	after_macro_operators
                                                                      concatenate_escaped_symbol:
0000207B: 46                                                    	inc	esi
0000207C: 49                                                    	dec	ecx
0000207D: 74 F0                                                 	jz	do_symbol_concatenation
0000207F: 0F B6 06                                              	movzx	eax,byte [esi]
00002082: 80 B8 D3 A2 01 00 00                                  	cmp	byte [characters+eax],0
00002089: 75 E4                                                 	jne	do_symbol_concatenation
0000208B: 83 EE 03                                              	sub	esi,3
0000208E: EB C4                                                 	jmp	no_concatenation
                                                                      string_concatenation:
00002090: 80 3E 22                                              	cmp	byte [esi],22h
00002093: 74 35                                                 	je	do_string_concatenation
00002095: 80 3E 60                                              	cmp	byte [esi],'`'
00002098: 75 BA                                                 	jne	no_concatenation
                                                                      concatenate_converted_symbol:
0000209A: 46                                                    	inc	esi
0000209B: 8A 06                                                 	mov	al,[esi]
0000209D: 3C 60                                                 	cmp	al,'`'
0000209F: 74 F9                                                 	je	concatenate_converted_symbol
000020A1: 3C 22                                                 	cmp	al,22h
000020A3: 74 25                                                 	je	do_string_concatenation
000020A5: 3C 1A                                                 	cmp	al,1Ah
000020A7: 75 14                                                 	jne	concatenate_converted_symbol_character
000020A9: 46                                                    	inc	esi
000020AA: AC                                                    	lods	byte [esi]
000020AB: 0F B6 C8                                              	movzx	ecx,al
000020AE: E3 07                                                 	jecxz	finish_concatenating_converted_symbol
000020B0: 80 3E 5C                                              	cmp	byte [esi],'\'
000020B3: 75 02                                                 	jne	finish_concatenating_converted_symbol
000020B5: 46                                                    	inc	esi
000020B6: 49                                                    	dec	ecx
                                                                      finish_concatenating_converted_symbol:
000020B7: 01 0B                                                 	add	[ebx],ecx
000020B9: F3 A4                                                 	rep	movs byte [edi],[esi]
000020BB: EB 15                                                 	jmp	after_macro_operators
                                                                      concatenate_converted_symbol_character:
000020BD: 08 C0                                                 	or	al,al
000020BF: 74 11                                                 	jz	after_macro_operators
000020C1: 3C 23                                                 	cmp	al,'#'
000020C3: 74 0D                                                 	je	after_macro_operators
000020C5: FF 03                                                 	inc	dword [ebx]
000020C7: A4                                                    	movs	byte [edi],[esi]
000020C8: EB 08                                                 	jmp	after_macro_operators
                                                                      do_string_concatenation:
000020CA: 46                                                    	inc	esi
000020CB: AD                                                    	lods	dword [esi]
000020CC: 89 C1                                                 	mov	ecx,eax
000020CE: 01 03                                                 	add	[ebx],eax
000020D0: F3 A4                                                 	rep	movs byte [edi],[esi]
                                                                      after_macro_operators:
000020D2: AC                                                    	lods	byte [esi]
000020D3: 3C 60                                                 	cmp	al,'`'
000020D5: 0F 84 F2 FE FF FF                                     	je	symbol_conversion
000020DB: 3C 23                                                 	cmp	al,'#'
000020DD: 0F 84 67 FF FF FF                                     	je	concatenation
000020E3: AA                                                    	stos	byte [edi]
000020E4: 3C 1A                                                 	cmp	al,1Ah
000020E6: 74 13                                                 	je	symbol_after_macro_operators
000020E8: 3C 3B                                                 	cmp	al,3Bh
000020EA: 0F 84 88 FE FF FF                                     	je	no_more_macro_operators
000020F0: 3C 22                                                 	cmp	al,22h
000020F2: 74 1F                                                 	je	string_after_macro_operators
000020F4: 30 D2                                                 	xor	dl,dl
000020F6: 08 C0                                                 	or	al,al
000020F8: 75 D8                                                 	jnz	after_macro_operators
000020FA: C3                                                    	ret
                                                                      symbol_after_macro_operators:
000020FB: B2 1A                                                 	mov	dl,1Ah
000020FD: 89 FB                                                 	mov	ebx,edi
000020FF: AC                                                    	lods	byte [esi]
00002100: AA                                                    	stos	byte [edi]
00002101: 0F B6 C8                                              	movzx	ecx,al
00002104: E3 09                                                 	jecxz	symbol_after_macro_operatorss_ok
00002106: 80 3E 5C                                              	cmp	byte [esi],'\'
00002109: 0F 84 8A FE FF FF                                     	je	escaped_symbol
                                                                      symbol_after_macro_operatorss_ok:
0000210F: F3 A4                                                 	rep	movs byte [edi],[esi]
00002111: EB BF                                                 	jmp	after_macro_operators
                                                                      string_after_macro_operators:
00002113: B2 22                                                 	mov	dl,22h
00002115: 89 FB                                                 	mov	ebx,edi
00002117: AD                                                    	lods	dword [esi]
00002118: AB                                                    	stos	dword [edi]
00002119: 89 C1                                                 	mov	ecx,eax
0000211B: F3 A4                                                 	rep	movs byte [edi],[esi]
0000211D: EB B3                                                 	jmp	after_macro_operators
                                                                
                                                                use_macro:
0000211F: FF 35 64 A1 01 00                                     	push	[free_additional_memory]
00002125: FF 35 94 A1 01 00                                     	push	[macro_symbols]
0000212B: C7 05 94 A1 01 00 00 00 00 00                         	mov	[macro_symbols],0
00002135: FF 35 E0 A1 01 00                                     	push	[counter_limit]
0000213B: FF 72 04                                              	push	dword [edx+4]
0000213E: C7 42 04 01 00 00 00                                  	mov	dword [edx+4],1
00002145: 52                                                    	push	edx
00002146: 89 F3                                                 	mov	ebx,esi
00002148: 8B 72 08                                              	mov	esi,[edx+8]
0000214B: 8B 42 0C                                              	mov	eax,[edx+12]
0000214E: A3 84 A1 01 00                                        	mov	[macro_line],eax
00002153: C7 05 E0 A1 01 00 00 00 00 00                         	mov	[counter_limit],0
0000215D: 31 ED                                                 	xor	ebp,ebp
                                                                      process_macro_arguments:
0000215F: 8A 06                                                 	mov	al,[esi]
00002161: 08 C0                                                 	or	al,al
00002163: 0F 84 FD 00 00 00                                     	jz	arguments_end
00002169: 3C 7B                                                 	cmp	al,'{'
0000216B: 0F 84 F5 00 00 00                                     	je	arguments_end
00002171: 46                                                    	inc	esi
00002172: 3C 5B                                                 	cmp	al,'['
00002174: 75 09                                                 	jne	get_macro_arguments
00002176: 89 F5                                                 	mov	ebp,esi
00002178: 46                                                    	inc	esi
00002179: FF 05 E0 A1 01 00                                     	inc	[counter_limit]
                                                                      get_macro_arguments:
0000217F: E8 33 00 00 00                                        	call	get_macro_argument
00002184: AC                                                    	lods	byte [esi]
00002185: 3C 2C                                                 	cmp	al,','
00002187: 74 12                                                 	je	next_argument
00002189: 3C 5D                                                 	cmp	al,']'
0000218B: 74 16                                                 	je	next_arguments_group
0000218D: 3C 26                                                 	cmp	al,'&'
0000218F: 0F 84 D1 00 00 00                                     	je	arguments_end
00002195: 4E                                                    	dec	esi
00002196: E9 CB 00 00 00                                        	jmp	arguments_end
                                                                      next_argument:
0000219B: 80 3B 2C                                              	cmp	byte [ebx],','
0000219E: 75 BF                                                 	jne	process_macro_arguments
000021A0: 43                                                    	inc	ebx
000021A1: EB BC                                                 	jmp	process_macro_arguments
                                                                      next_arguments_group:
000021A3: 80 3B 2C                                              	cmp	byte [ebx],','
000021A6: 0F 85 BA 00 00 00                                     	jne	arguments_end
000021AC: 43                                                    	inc	ebx
000021AD: FF 05 E0 A1 01 00                                     	inc	[counter_limit]
000021B3: 89 EE                                                 	mov	esi,ebp
000021B5: EB A8                                                 	jmp	process_macro_arguments
                                                                      get_macro_argument:
000021B7: AC                                                    	lods	byte [esi]
000021B8: 0F B6 C8                                              	movzx	ecx,al
000021BB: A1 E0 A1 01 00                                        	mov	eax,[counter_limit]
000021C0: E8 4B 0B 00 00                                        	call	add_macro_symbol
000021C5: 01 CE                                                 	add	esi,ecx
000021C7: 31 C0                                                 	xor	eax,eax
000021C9: A3 A8 A1 01 00                                        	mov	[default_argument_value],eax
000021CE: 80 3E 2A                                              	cmp	byte [esi],'*'
000021D1: 74 1F                                                 	je	required_value
000021D3: 80 3E 3A                                              	cmp	byte [esi],':'
000021D6: 74 05                                                 	je	get_default_value
000021D8: 80 3E 3D                                              	cmp	byte [esi],'='
000021DB: 75 1D                                                 	jne	default_value_ok
                                                                      get_default_value:
000021DD: 46                                                    	inc	esi
000021DE: 89 35 A8 A1 01 00                                     	mov	[default_argument_value],esi
000021E4: 80 0D CE A2 01 00 FF                                  	or	[skip_default_argument_value],-1
000021EB: E8 60 F9 FF FF                                        	call	skip_macro_argument_value
000021F0: EB 08                                                 	jmp	default_value_ok
                                                                      required_value:
000021F2: 46                                                    	inc	esi
000021F3: 83 0D A8 A1 01 00 FF                                  	or	[default_argument_value],-1
                                                                      default_value_ok:
000021FA: 87 F3                                                 	xchg	esi,ebx
000021FC: 89 72 0C                                              	mov	[edx+12],esi
000021FF: C6 05 CE A2 01 00 00                                  	mov	[skip_default_argument_value],0
00002206: 80 3B 26                                              	cmp	byte [ebx],'&'
00002209: 74 0C                                                 	je	greedy_macro_argument
0000220B: E8 40 F9 FF FF                                        	call	skip_macro_argument_value
00002210: E8 35 00 00 00                                        	call	finish_macro_argument
00002215: EB 10                                                 	jmp	got_macro_argument
                                                                      greedy_macro_argument:
00002217: E8 93 08 00 00                                        	call	skip_foreign_line
0000221C: 4E                                                    	dec	esi
0000221D: 8B 42 0C                                              	mov	eax,[edx+12]
00002220: 89 F1                                                 	mov	ecx,esi
00002222: 29 C1                                                 	sub	ecx,eax
00002224: 89 4A 08                                              	mov	[edx+8],ecx
                                                                      got_macro_argument:
00002227: 87 F3                                                 	xchg	esi,ebx
00002229: 83 7A 08 00                                           	cmp	dword [edx+8],0
0000222D: 75 1A                                                 	jne	macro_argument_ok
0000222F: A1 A8 A1 01 00                                        	mov	eax,[default_argument_value]
00002234: 09 C0                                                 	or	eax,eax
00002236: 74 11                                                 	jz	macro_argument_ok
00002238: 83 F8 FF                                              	cmp	eax,-1
0000223B: 0F 84 CB E6 FF FF                                     	je	invalid_macro_arguments
00002241: 89 42 0C                                              	mov	[edx+12],eax
00002244: E8 01 00 00 00                                        	call	finish_macro_argument
                                                                      macro_argument_ok:
00002249: C3                                                    	ret
                                                                      finish_macro_argument:
0000224A: 8B 42 0C                                              	mov	eax,[edx+12]
0000224D: 89 F1                                                 	mov	ecx,esi
0000224F: 29 C1                                                 	sub	ecx,eax
00002251: 80 38 3C                                              	cmp	byte [eax],'<'
00002254: 75 0C                                                 	jne	argument_value_length_ok
00002256: FF 42 0C                                              	inc	dword [edx+12]
00002259: 83 E9 02                                              	sub	ecx,2
0000225C: 81 C9 00 00 00 80                                     	or	ecx,80000000h
                                                                      argument_value_length_ok:
00002262: 89 4A 08                                              	mov	[edx+8],ecx
00002265: C3                                                    	ret
                                                                      arguments_end:
00002266: 80 3B 00                                              	cmp	byte [ebx],0
00002269: 0F 85 9D E6 FF FF                                     	jne	invalid_macro_arguments
0000226F: 8B 44 24 04                                           	mov	eax,[esp+4]
00002273: 48                                                    	dec	eax
00002274: E8 EC 04 00 00                                        	call	process_macro
00002279: 5A                                                    	pop	edx
0000227A: 8F 42 04                                              	pop	dword [edx+4]
0000227D: 8F 05 E0 A1 01 00                                     	pop	[counter_limit]
00002283: 8F 05 94 A1 01 00                                     	pop	[macro_symbols]
00002289: 8F 05 64 A1 01 00                                     	pop	[free_additional_memory]
0000228F: E9 C7 F5 FF FF                                        	jmp	line_preprocessed
                                                                use_instant_macro:
00002294: 57                                                    	push	edi
00002295: FF 35 80 A1 01 00                                     	push	[current_line]
0000229B: 56                                                    	push	esi
0000229C: A1 E8 A1 01 00                                        	mov	eax,[error_line]
000022A1: A3 80 A1 01 00                                        	mov	[current_line],eax
000022A6: A3 84 A1 01 00                                        	mov	[macro_line],eax
000022AB: 8B 35 A0 A1 01 00                                     	mov	esi,[instant_macro_start]
000022B1: 80 3D AF A2 01 00 10                                  	cmp	[base_code],10h
000022B8: 0F 83 14 03 00 00                                     	jae	do_match
000022BE: 80 3D AF A2 01 00 00                                  	cmp	[base_code],0
000022C5: 0F 85 35 01 00 00                                     	jne	do_irp
000022CB: E8 E3 00 00 00                                        	call	precalculate_value
000022D0: 83 F8 00                                              	cmp	eax,0
000022D3: 0F 8C DD E6 FF FF                                     	jl	value_out_of_range
000022D9: FF 35 64 A1 01 00                                     	push	[free_additional_memory]
000022DF: FF 35 94 A1 01 00                                     	push	[macro_symbols]
000022E5: C7 05 94 A1 01 00 00 00 00 00                         	mov	[macro_symbols],0
000022EF: FF 35 E0 A1 01 00                                     	push	[counter_limit]
000022F5: C7 05 98 A1 01 00 00 00 00 00                         	mov	[struc_name],0
000022FF: A3 E0 A1 01 00                                        	mov	[counter_limit],eax
00002304: AC                                                    	lods	byte [esi]
00002305: 08 C0                                                 	or	al,al
00002307: 74 4F                                                 	jz	rept_counters_ok
00002309: 3C 7B                                                 	cmp	al,'{'
0000230B: 74 4B                                                 	je	rept_counters_ok
0000230D: 3C 1A                                                 	cmp	al,1Ah
0000230F: 0F 85 F7 E5 FF FF                                     	jne	invalid_macro_arguments
                                                                      add_rept_counter:
00002315: AC                                                    	lods	byte [esi]
00002316: 0F B6 C8                                              	movzx	ecx,al
00002319: 31 C0                                                 	xor	eax,eax
0000231B: E8 F0 09 00 00                                        	call	add_macro_symbol
00002320: 01 CE                                                 	add	esi,ecx
00002322: 31 C0                                                 	xor	eax,eax
00002324: 89 42 0C                                              	mov	dword [edx+12],eax
00002327: 40                                                    	inc	eax
00002328: 89 42 08                                              	mov	dword [edx+8],eax
0000232B: AC                                                    	lods	byte [esi]
0000232C: 3C 3A                                                 	cmp	al,':'
0000232E: 75 19                                                 	jne	rept_counter_added
00002330: 52                                                    	push	edx
00002331: E8 7D 00 00 00                                        	call	precalculate_value
00002336: 89 C2                                                 	mov	edx,eax
00002338: 03 15 E0 A1 01 00                                     	add	edx,[counter_limit]
0000233E: 0F 80 72 E6 FF FF                                     	jo	value_out_of_range
00002344: 5A                                                    	pop	edx
00002345: 89 42 08                                              	mov	dword [edx+8],eax
00002348: AC                                                    	lods	byte [esi]
                                                                      rept_counter_added:
00002349: 3C 2C                                                 	cmp	al,','
0000234B: 75 0B                                                 	jne	rept_counters_ok
0000234D: AC                                                    	lods	byte [esi]
0000234E: 3C 1A                                                 	cmp	al,1Ah
00002350: 0F 85 B6 E5 FF FF                                     	jne	invalid_macro_arguments
00002356: EB BD                                                 	jmp	add_rept_counter
                                                                      rept_counters_ok:
00002358: 4E                                                    	dec	esi
00002359: 83 3D E0 A1 01 00 00                                  	cmp	[counter_limit],0
00002360: 74 07                                                 	je	instant_macro_finish
                                                                      instant_macro_parameters_ok:
00002362: 31 C0                                                 	xor	eax,eax
00002364: E8 FC 03 00 00                                        	call	process_macro
                                                                      instant_macro_finish:
00002369: 8F 05 E0 A1 01 00                                     	pop	[counter_limit]
0000236F: 8F 05 94 A1 01 00                                     	pop	[macro_symbols]
00002375: 8F 05 64 A1 01 00                                     	pop	[free_additional_memory]
                                                                      instant_macro_done:
0000237B: 5B 5E 5A                                              	pop	ebx esi edx
0000237E: 80 3B 00                                              	cmp	byte [ebx],0
00002381: 0F 84 D4 F4 FF FF                                     	je	line_preprocessed
00002387: 89 3D 80 A1 01 00                                     	mov	[current_line],edi
0000238D: B9 04 00 00 00                                        	mov	ecx,4
00002392: F3 A5                                                 	rep	movs dword [edi],[esi]
00002394: F6 05 CD A2 01 00 0F                                  	test	[macro_status],0Fh
0000239B: 74 06                                                 	jz	instant_macro_attached_line
0000239D: 66 B8 3B 00                                           	mov	ax,3Bh
000023A1: 66 AB                                                 	stos	word [edi]
                                                                      instant_macro_attached_line:
000023A3: 89 DE                                                 	mov	esi,ebx
000023A5: 29 DA                                                 	sub	edx,ebx
000023A7: 89 D1                                                 	mov	ecx,edx
000023A9: E8 AC FA FF FF                                        	call	move_data
000023AE: E9 A8 F2 FF FF                                        	jmp	initial_preprocessing_ok
                                                                      precalculate_value:
000023B3: 57                                                    	push	edi
000023B4: E8 73 1A 00 00                                        	call	convert_expression
000023B9: B0 29                                                 	mov	al,')'
000023BB: AA                                                    	stosb
000023BC: 56                                                    	push	esi
000023BD: 8B 74 24 04                                           	mov	esi,[esp+4]
000023C1: C7 05 E8 A1 01 00 00 00 00 00                         	mov	[error_line],0
000023CB: C6 05 B8 A2 01 00 00                                  	mov	[value_size],0
000023D2: E8 11 41 00 00                                        	call	calculate_expression
000023D7: 83 3D E8 A1 01 00 00                                  	cmp	[error_line],0
000023DE: 74 06                                                 	je	value_precalculated
000023E0: FF 25 EC A1 01 00                                     	jmp	[error]
                                                                      value_precalculated:
000023E6: 8B 07                                                 	mov	eax,[edi]
000023E8: 8B 4F 04                                              	mov	ecx,[edi+4]
000023EB: 99                                                    	cdq
000023EC: 39 CA                                                 	cmp	edx,ecx
000023EE: 0F 85 C2 E5 FF FF                                     	jne	value_out_of_range
000023F4: 3A 57 0D                                              	cmp	dl,[edi+13]
000023F7: 0F 85 B9 E5 FF FF                                     	jne	value_out_of_range
000023FD: 5E 5F                                                 	pop	esi edi
000023FF: C3                                                    	ret
                                                                do_irp:
00002400: 80 3E 1A                                              	cmp	byte [esi],1Ah
00002403: 0F 85 03 E5 FF FF                                     	jne	invalid_macro_arguments
00002409: 0F B6 46 01                                           	movzx	eax,byte [esi+1]
0000240D: 8D 74 06 02                                           	lea	esi,[esi+2+eax]
00002411: AC                                                    	lods	byte [esi]
00002412: 80 3D AF A2 01 00 01                                  	cmp	[base_code],1
00002419: 77 31                                                 	ja	irps_name_ok
0000241B: 3C 3A                                                 	cmp	al,':'
0000241D: 74 13                                                 	je	irp_with_default_value
0000241F: 3C 3D                                                 	cmp	al,'='
00002421: 74 0F                                                 	je	irp_with_default_value
00002423: 3C 2A                                                 	cmp	al,'*'
00002425: 75 01                                                 	jne	irp_name_ok
00002427: AC                                                    	lods	byte [esi]
                                                                      irp_name_ok:
00002428: 3C 2C                                                 	cmp	al,','
0000242A: 0F 85 DC E4 FF FF                                     	jne	invalid_macro_arguments
00002430: EB 3D                                                 	jmp	irp_parameters_start
                                                                      irp_with_default_value:
00002432: 31 ED                                                 	xor	ebp,ebp
00002434: 80 0D CE A2 01 00 FF                                  	or	[skip_default_argument_value],-1
0000243B: E8 10 F7 FF FF                                        	call	skip_macro_argument_value
00002440: 80 3E 2C                                              	cmp	byte [esi],','
00002443: 0F 85 C3 E4 FF FF                                     	jne	invalid_macro_arguments
00002449: 46                                                    	inc	esi
0000244A: EB 23                                                 	jmp	irp_parameters_start
                                                                      irps_name_ok:
0000244C: 3C 2C                                                 	cmp	al,','
0000244E: 0F 85 B8 E4 FF FF                                     	jne	invalid_macro_arguments
00002454: 80 3D AF A2 01 00 03                                  	cmp	[base_code],3
0000245B: 74 12                                                 	je	irp_parameters_start
0000245D: 8A 06                                                 	mov	al,[esi]
0000245F: 08 C0                                                 	or	al,al
00002461: 0F 84 14 FF FF FF                                     	jz	instant_macro_done
00002467: 3C 7B                                                 	cmp	al,'{'
00002469: 0F 84 0C FF FF FF                                     	je	instant_macro_done
                                                                      irp_parameters_start:
0000246F: 31 C0                                                 	xor	eax,eax
00002471: FF 35 64 A1 01 00                                     	push	[free_additional_memory]
00002477: FF 35 94 A1 01 00                                     	push	[macro_symbols]
0000247D: A3 94 A1 01 00                                        	mov	[macro_symbols],eax
00002482: FF 35 E0 A1 01 00                                     	push	[counter_limit]
00002488: A3 E0 A1 01 00                                        	mov	[counter_limit],eax
0000248D: A3 98 A1 01 00                                        	mov	[struc_name],eax
00002492: 80 3D AF A2 01 00 03                                  	cmp	[base_code],3
00002499: 0F 84 8F 00 00 00                                     	je	get_irpv_parameter
0000249F: 89 F3                                                 	mov	ebx,esi
000024A1: 80 3D AF A2 01 00 02                                  	cmp	[base_code],2
000024A8: 74 30                                                 	je	get_irps_parameter
000024AA: 8B 15 A4 A1 01 00                                     	mov	edx,[parameters_end]
000024B0: 8A 02                                                 	mov	al,[edx]
000024B2: 50                                                    	push	eax
000024B3: C6 02 00                                              	mov	byte [edx],0
                                                                      get_irp_parameter:
000024B6: FF 05 E0 A1 01 00                                     	inc	[counter_limit]
000024BC: 8B 35 A0 A1 01 00                                     	mov	esi,[instant_macro_start]
000024C2: 46                                                    	inc	esi
000024C3: E8 EF FC FF FF                                        	call	get_macro_argument
000024C8: 80 3B 2C                                              	cmp	byte [ebx],','
000024CB: 75 03                                                 	jne	irp_parameters_end
000024CD: 43                                                    	inc	ebx
000024CE: EB E6                                                 	jmp	get_irp_parameter
                                                                      irp_parameters_end:
000024D0: 89 DE                                                 	mov	esi,ebx
000024D2: 58                                                    	pop	eax
000024D3: 88 06                                                 	mov	[esi],al
000024D5: E9 88 FE FF FF                                        	jmp	instant_macro_parameters_ok
                                                                      get_irps_parameter:
000024DA: 8B 35 A0 A1 01 00                                     	mov	esi,[instant_macro_start]
000024E0: 46                                                    	inc	esi
000024E1: AC                                                    	lods	byte [esi]
000024E2: 0F B6 C8                                              	movzx	ecx,al
000024E5: FF 05 E0 A1 01 00                                     	inc	[counter_limit]
000024EB: A1 E0 A1 01 00                                        	mov	eax,[counter_limit]
000024F0: E8 1B 08 00 00                                        	call	add_macro_symbol
000024F5: 89 5A 0C                                              	mov	[edx+12],ebx
000024F8: 80 3B 1A                                              	cmp	byte [ebx],1Ah
000024FB: 74 14                                                 	je	irps_symbol
000024FD: 80 3B 22                                              	cmp	byte [ebx],22h
00002500: 74 07                                                 	je	irps_quoted_string
00002502: B8 01 00 00 00                                        	mov	eax,1
00002507: EB 0F                                                 	jmp	irps_parameter_ok
                                                                      irps_quoted_string:
00002509: 8B 43 01                                              	mov	eax,[ebx+1]
0000250C: 83 C0 05                                              	add	eax,1+4
0000250F: EB 07                                                 	jmp	irps_parameter_ok
                                                                      irps_symbol:
00002511: 0F B6 43 01                                           	movzx	eax,byte [ebx+1]
00002515: 83 C0 02                                              	add	eax,1+1
                                                                      irps_parameter_ok:
00002518: 89 42 08                                              	mov	[edx+8],eax
0000251B: 01 C3                                                 	add	ebx,eax
0000251D: 80 3B 00                                              	cmp	byte [ebx],0
00002520: 74 05                                                 	je	irps_parameters_end
00002522: 80 3B 7B                                              	cmp	byte [ebx],'{'
00002525: 75 B3                                                 	jne	get_irps_parameter
                                                                      irps_parameters_end:
00002527: 89 DE                                                 	mov	esi,ebx
00002529: E9 34 FE FF FF                                        	jmp	instant_macro_parameters_ok
                                                                      get_irpv_parameter:
0000252E: AC                                                    	lods	byte [esi]
0000252F: 3C 1A                                                 	cmp	al,1Ah
00002531: 0F 85 D5 E3 FF FF                                     	jne	invalid_macro_arguments
00002537: AC                                                    	lods	byte [esi]
00002538: 89 F5                                                 	mov	ebp,esi
0000253A: 88 C1                                                 	mov	cl,al
0000253C: B5 02                                                 	mov	ch,10b
0000253E: E8 1B F3 FF FF                                        	call	get_preprocessor_symbol
00002543: 0F 82 20 FE FF FF                                     	jc	instant_macro_finish
00002549: 85 D2                                                 	test	edx,edx
0000254B: 0F 84 09 E5 FF FF                                     	jz	invalid_use_of_symbol
00002551: 52                                                    	push	edx
                                                                      mark_variable_value:
00002552: FF 05 E0 A1 01 00                                     	inc	[counter_limit]
00002558: 89 6A 04                                              	mov	[edx+4],ebp
                                                                      next_variable_value:
0000255B: 8B 12                                                 	mov	edx,[edx]
0000255D: 09 D2                                                 	or	edx,edx
0000255F: 74 16                                                 	jz	variable_values_marked
00002561: 8B 42 04                                              	mov	eax,[edx+4]
00002564: 83 F8 01                                              	cmp	eax,1
00002567: 76 F2                                                 	jbe	next_variable_value
00002569: 89 EE                                                 	mov	esi,ebp
0000256B: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
0000256F: 97                                                    	xchg	edi,eax
00002570: F3 A6                                                 	repe	cmps byte [esi],[edi]
00002572: 97                                                    	xchg	edi,eax
00002573: 74 DD                                                 	je	mark_variable_value
00002575: EB E4                                                 	jmp	next_variable_value
                                                                      variable_values_marked:
00002577: 5A                                                    	pop	edx
00002578: FF 35 E0 A1 01 00                                     	push	[counter_limit]
                                                                      add_irpv_value:
0000257E: 52                                                    	push	edx
0000257F: 8B 35 A0 A1 01 00                                     	mov	esi,[instant_macro_start]
00002585: 46                                                    	inc	esi
00002586: AC                                                    	lods	byte [esi]
00002587: 0F B6 C8                                              	movzx	ecx,al
0000258A: 8B 44 24 04                                           	mov	eax,[esp+4]
0000258E: E8 7D 07 00 00                                        	call	add_macro_symbol
00002593: 89 D3                                                 	mov	ebx,edx
00002595: 5A                                                    	pop	edx
00002596: 8B 4A 0C                                              	mov	ecx,[edx+12]
00002599: 8B 42 08                                              	mov	eax,[edx+8]
0000259C: 89 43 0C                                              	mov	[ebx+12],eax
0000259F: 89 4B 08                                              	mov	[ebx+8],ecx
                                                                      collect_next_variable_value:
000025A2: 8B 12                                                 	mov	edx,[edx]
000025A4: 09 D2                                                 	or	edx,edx
000025A6: 74 0A                                                 	jz	variable_values_collected
000025A8: 3B 6A 04                                              	cmp	ebp,[edx+4]
000025AB: 75 F5                                                 	jne	collect_next_variable_value
000025AD: FF 0C 24                                              	dec	dword [esp]
000025B0: 75 CC                                                 	jnz	add_irpv_value
                                                                      variable_values_collected:
000025B2: 58                                                    	pop	eax
000025B3: 89 EE                                                 	mov	esi,ebp
000025B5: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
000025B9: 01 CE                                                 	add	esi,ecx
000025BB: 80 3E 00                                              	cmp	byte [esi],0
000025BE: 0F 84 9E FD FF FF                                     	je	instant_macro_parameters_ok
000025C4: 80 3E 7B                                              	cmp	byte [esi],'{'
000025C7: 0F 85 3F E3 FF FF                                     	jne	invalid_macro_arguments
000025CD: E9 90 FD FF FF                                        	jmp	instant_macro_parameters_ok
                                                                
                                                                do_match:
000025D2: 89 F3                                                 	mov	ebx,esi
000025D4: E8 85 F7 FF FF                                        	call	skip_pattern
000025D9: E8 C7 00 00 00                                        	call	exact_match
000025DE: 89 FA                                                 	mov	edx,edi
000025E0: 8A 03                                                 	mov	al,[ebx]
000025E2: 3C 1A                                                 	cmp	al,1Ah
000025E4: 74 19                                                 	je	free_match
000025E6: 3C 2C                                                 	cmp	al,','
000025E8: 0F 85 8D FD FF FF                                     	jne	instant_macro_done
000025EE: 3B 35 A4 A1 01 00                                     	cmp	esi,[parameters_end]
000025F4: 0F 84 17 01 00 00                                     	je	matched_pattern
000025FA: E9 7C FD FF FF                                        	jmp	instant_macro_done
                                                                      free_match:
000025FF: 83 C2 0C                                              	add	edx,12
00002602: 3B 15 3C A1 01 00                                     	cmp	edx,[memory_end]
00002608: 0F 87 8E E2 FF FF                                     	ja	out_of_memory
0000260E: 89 5A F4                                              	mov	[edx-12],ebx
00002611: 89 72 F8                                              	mov	[edx-8],esi
00002614: E8 62 00 00 00                                        	call	skip_match_element
00002619: 72 36                                                 	jc	try_different_matching
0000261B: 89 72 FC                                              	mov	[edx-4],esi
0000261E: 0F B6 43 01                                           	movzx	eax,byte [ebx+1]
00002622: 8D 5C 03 02                                           	lea	ebx,[ebx+2+eax]
00002626: 80 3B 1A                                              	cmp	byte [ebx],1Ah
00002629: 74 D4                                                 	je	free_match
                                                                      find_exact_match:
0000262B: E8 75 00 00 00                                        	call	exact_match
00002630: 3B 35 A4 A1 01 00                                     	cmp	esi,[parameters_end]
00002636: 0F 84 CC 00 00 00                                     	je	end_matching
0000263C: 80 3B 1A                                              	cmp	byte [ebx],1Ah
0000263F: 74 BE                                                 	je	free_match
00002641: 8B 5A F4                                              	mov	ebx,[edx-12]
00002644: 0F B6 43 01                                           	movzx	eax,byte [ebx+1]
00002648: 8D 5C 03 02                                           	lea	ebx,[ebx+2+eax]
0000264C: 8B 72 FC                                              	mov	esi,[edx-4]
0000264F: EB 1E                                                 	jmp	match_more_elements
                                                                      try_different_matching:
00002651: 83 EA 0C                                              	sub	edx,12
00002654: 39 FA                                                 	cmp	edx,edi
00002656: 0F 84 1F FD FF FF                                     	je	instant_macro_done
0000265C: 8B 5A F4                                              	mov	ebx,[edx-12]
0000265F: 0F B6 43 01                                           	movzx	eax,byte [ebx+1]
00002663: 8D 5C 03 02                                           	lea	ebx,[ebx+2+eax]
00002667: 80 3B 1A                                              	cmp	byte [ebx],1Ah
0000266A: 74 E5                                                 	je	try_different_matching
0000266C: 8B 72 FC                                              	mov	esi,[edx-4]
                                                                      match_more_elements:
0000266F: E8 07 00 00 00                                        	call	skip_match_element
00002674: 72 DB                                                 	jc	try_different_matching
00002676: 89 72 FC                                              	mov	[edx-4],esi
00002679: EB B0                                                 	jmp	find_exact_match
                                                                      skip_match_element:
0000267B: 3B 35 A4 A1 01 00                                     	cmp	esi,[parameters_end]
00002681: 74 20                                                 	je	cannot_match
00002683: 8A 06                                                 	mov	al,[esi]
00002685: 3C 1A                                                 	cmp	al,1Ah
00002687: 74 10                                                 	je	skip_match_symbol
00002689: 3C 22                                                 	cmp	al,22h
0000268B: 74 04                                                 	je	skip_match_quoted_string
0000268D: 83 C6 01                                              	add	esi,1
00002690: C3                                                    	ret
                                                                      skip_match_quoted_string:
00002691: 8B 46 01                                              	mov	eax,[esi+1]
00002694: 83 C6 05                                              	add	esi,5
00002697: EB 07                                                 	jmp	skip_match_ok
                                                                      skip_match_symbol:
00002699: 0F B6 46 01                                           	movzx	eax,byte [esi+1]
0000269D: 83 C6 02                                              	add	esi,2
                                                                      skip_match_ok:
000026A0: 01 C6                                                 	add	esi,eax
000026A2: C3                                                    	ret
                                                                      cannot_match:
000026A3: F9                                                    	stc
000026A4: C3                                                    	ret
                                                                      exact_match:
000026A5: 3B 35 A4 A1 01 00                                     	cmp	esi,[parameters_end]
000026AB: 74 17                                                 	je	exact_match_complete
000026AD: 8A 26                                                 	mov	ah,[esi]
000026AF: 8A 03                                                 	mov	al,[ebx]
000026B1: 3C 2C                                                 	cmp	al,','
000026B3: 74 0F                                                 	je	exact_match_complete
000026B5: 3C 1A                                                 	cmp	al,1Ah
000026B7: 74 0B                                                 	je	exact_match_complete
000026B9: 3C 3D                                                 	cmp	al,'='
000026BB: 74 08                                                 	je	match_verbatim
000026BD: E8 0D 00 00 00                                        	call	match_elements
000026C2: 74 E1                                                 	je	exact_match
                                                                      exact_match_complete:
000026C4: C3                                                    	ret
                                                                      match_verbatim:
000026C5: 43                                                    	inc	ebx
000026C6: E8 04 00 00 00                                        	call	match_elements
000026CB: 74 D8                                                 	je	exact_match
000026CD: 4B                                                    	dec	ebx
000026CE: C3                                                    	ret
                                                                      match_elements:
000026CF: 8A 03                                                 	mov	al,[ebx]
000026D1: 3C 1A                                                 	cmp	al,1Ah
000026D3: 74 18                                                 	je	match_symbols
000026D5: 3C 22                                                 	cmp	al,22h
000026D7: 74 0C                                                 	je	match_quoted_strings
000026D9: 38 E0                                                 	cmp	al,ah
000026DB: 74 01                                                 	je	symbol_characters_matched
000026DD: C3                                                    	ret
                                                                      symbol_characters_matched:
000026DE: 8D 5B 01                                              	lea	ebx,[ebx+1]
000026E1: 8D 76 01                                              	lea	esi,[esi+1]
000026E4: C3                                                    	ret
                                                                      match_quoted_strings:
000026E5: 8B 4B 01                                              	mov	ecx,[ebx+1]
000026E8: 83 C1 05                                              	add	ecx,5
000026EB: EB 07                                                 	jmp	compare_elements
                                                                      match_symbols:
000026ED: 0F B6 4B 01                                           	movzx	ecx,byte [ebx+1]
000026F1: 83 C1 02                                              	add	ecx,2
                                                                      compare_elements:
000026F4: 89 F0                                                 	mov	eax,esi
000026F6: 89 FD                                                 	mov	ebp,edi
000026F8: 89 DF                                                 	mov	edi,ebx
000026FA: F3 A6                                                 	repe	cmps byte [esi],[edi]
000026FC: 75 05                                                 	jne	elements_mismatch
000026FE: 89 FB                                                 	mov	ebx,edi
00002700: 89 EF                                                 	mov	edi,ebp
00002702: C3                                                    	ret
                                                                      elements_mismatch:
00002703: 89 C6                                                 	mov	esi,eax
00002705: 89 EF                                                 	mov	edi,ebp
00002707: C3                                                    	ret
                                                                      end_matching:
00002708: 80 3B 2C                                              	cmp	byte [ebx],','
0000270B: 0F 85 6A FC FF FF                                     	jne	instant_macro_done
                                                                      matched_pattern:
00002711: 31 C0                                                 	xor	eax,eax
00002713: FF 35 64 A1 01 00                                     	push	[free_additional_memory]
00002719: FF 35 94 A1 01 00                                     	push	[macro_symbols]
0000271F: A3 94 A1 01 00                                        	mov	[macro_symbols],eax
00002724: FF 35 E0 A1 01 00                                     	push	[counter_limit]
0000272A: A3 E0 A1 01 00                                        	mov	[counter_limit],eax
0000272F: A3 98 A1 01 00                                        	mov	[struc_name],eax
00002734: 56 57 52                                              	push	esi edi edx
                                                                      add_matched_symbol:
00002737: 3B 3C 24                                              	cmp	edi,[esp]
0000273A: 74 21                                                 	je	matched_symbols_ok
0000273C: 8B 37                                                 	mov	esi,[edi]
0000273E: 46                                                    	inc	esi
0000273F: AC                                                    	lods	byte [esi]
00002740: 0F B6 C8                                              	movzx	ecx,al
00002743: 31 C0                                                 	xor	eax,eax
00002745: E8 C6 05 00 00                                        	call	add_macro_symbol
0000274A: 8B 47 04                                              	mov	eax,[edi+4]
0000274D: 89 42 0C                                              	mov	dword [edx+12],eax
00002750: 8B 4F 08                                              	mov	ecx,[edi+8]
00002753: 29 C1                                                 	sub	ecx,eax
00002755: 89 4A 08                                              	mov	dword [edx+8],ecx
00002758: 83 C7 0C                                              	add	edi,12
0000275B: EB DA                                                 	jmp	add_matched_symbol
                                                                      matched_symbols_ok:
0000275D: 5A 5F 5E                                              	pop	edx edi esi
00002760: E9 FD FB FF FF                                        	jmp	instant_macro_parameters_ok
                                                                
                                                                process_macro:
00002765: FF 35 CD A2 01 00                                     	push	dword [macro_status]
0000276B: 80 0D CD A2 01 00 10                                  	or	[macro_status],10h
00002772: FF 35 DC A1 01 00                                     	push	[counter]
00002778: FF 35 88 A1 01 00                                     	push	[macro_block]
0000277E: FF 35 8C A1 01 00                                     	push	[macro_block_line]
00002784: FF 35 90 A1 01 00                                     	push	[macro_block_line_number]
0000278A: FF 35 9C A1 01 00                                     	push	[struc_label]
00002790: FF 35 98 A1 01 00                                     	push	[struc_name]
00002796: 50                                                    	push	eax
00002797: FF 35 80 A1 01 00                                     	push	[current_line]
0000279D: AC                                                    	lods	byte [esi]
0000279E: 3C 7B                                                 	cmp	al,'{'
000027A0: 74 29                                                 	je	macro_instructions_start
000027A2: 08 C0                                                 	or	al,al
000027A4: 0F 85 76 E1 FF FF                                     	jnz	unexpected_characters
                                                                      find_macro_instructions:
000027AA: 89 35 84 A1 01 00                                     	mov	[macro_line],esi
000027B0: 83 C6 12                                              	add	esi,16+2
000027B3: AC                                                    	lods	byte [esi]
000027B4: 08 C0                                                 	or	al,al
000027B6: 74 F2                                                 	jz	find_macro_instructions
000027B8: 3C 7B                                                 	cmp	al,'{'
000027BA: 74 0F                                                 	je	macro_instructions_start
000027BC: 3C 3B                                                 	cmp	al,3Bh
000027BE: 0F 85 5C E1 FF FF                                     	jne	unexpected_characters
000027C4: E8 E0 02 00 00                                        	call	skip_foreign_symbol
000027C9: EB DF                                                 	jmp	find_macro_instructions
                                                                      macro_instructions_start:
000027CB: B9 00 00 00 80                                        	mov	ecx,80000000h
000027D0: 89 35 88 A1 01 00                                     	mov	[macro_block],esi
000027D6: A1 84 A1 01 00                                        	mov	eax,[macro_line]
000027DB: A3 8C A1 01 00                                        	mov	[macro_block_line],eax
000027E0: 89 0D 90 A1 01 00                                     	mov	[macro_block_line_number],ecx
000027E6: 31 C0                                                 	xor	eax,eax
000027E8: A3 DC A1 01 00                                        	mov	[counter],eax
000027ED: 39 05 E0 A1 01 00                                     	cmp	[counter_limit],eax
000027F3: 74 06                                                 	je	process_macro_line
000027F5: FF 05 DC A1 01 00                                     	inc	[counter]
                                                                      process_macro_line:
000027FB: AC                                                    	lods	byte [esi]
000027FC: 08 C0                                                 	or	al,al
000027FE: 0F 84 D8 02 00 00                                     	jz	process_next_line
00002804: 3C 7D                                                 	cmp	al,'}'
00002806: 0F 84 DF 02 00 00                                     	je	macro_block_processed
0000280C: 4E                                                    	dec	esi
0000280D: 89 3D 80 A1 01 00                                     	mov	[current_line],edi
00002813: 8D 47 10                                              	lea	eax,[edi+10h]
00002816: 3B 05 3C A1 01 00                                     	cmp	eax,[memory_end]
0000281C: 0F 83 7A E0 FF FF                                     	jae	out_of_memory
00002822: 8B 44 24 04                                           	mov	eax,[esp+4]
00002826: 09 C0                                                 	or	eax,eax
00002828: 74 10                                                 	jz	instant_macro_line_header
0000282A: AB                                                    	stos	dword [edi]
0000282B: 89 C8                                                 	mov	eax,ecx
0000282D: AB                                                    	stos	dword [edi]
0000282E: 8B 04 24                                              	mov	eax,[esp]
00002831: AB                                                    	stos	dword [edi]
00002832: A1 84 A1 01 00                                        	mov	eax,[macro_line]
00002837: AB                                                    	stos	dword [edi]
00002838: EB 29                                                 	jmp	macro_line_header_ok
                                                                      instant_macro_line_header:
0000283A: 8B 04 24                                              	mov	eax,[esp]
0000283D: 83 C0 10                                              	add	eax,16
                                                                      find_defining_directive:
00002840: 40                                                    	inc	eax
00002841: 80 78 FF 3B                                           	cmp	byte [eax-1],3Bh
00002845: 74 11                                                 	je	defining_directive_ok
00002847: 80 78 FF 1A                                           	cmp	byte [eax-1],1Ah
0000284B: 75 F3                                                 	jne	find_defining_directive
0000284D: 50                                                    	push	eax
0000284E: 0F B6 00                                              	movzx	eax,byte [eax]
00002851: 40                                                    	inc	eax
00002852: 01 04 24                                              	add	[esp],eax
00002855: 58                                                    	pop	eax
00002856: EB E8                                                 	jmp	find_defining_directive
                                                                      defining_directive_ok:
00002858: AB                                                    	stos	dword [edi]
00002859: 89 C8                                                 	mov	eax,ecx
0000285B: AB                                                    	stos	dword [edi]
0000285C: A1 84 A1 01 00                                        	mov	eax,[macro_line]
00002861: AB                                                    	stos	dword [edi]
00002862: AB                                                    	stos	dword [edi]
                                                                      macro_line_header_ok:
00002863: 80 0D CD A2 01 00 20                                  	or	[macro_status],20h
0000286A: 53 51                                                 	push	ebx ecx
0000286C: F6 05 CD A2 01 00 0F                                  	test	[macro_status],0Fh
00002873: 74 06                                                 	jz	process_macro_line_element
00002875: 66 B8 3B 00                                           	mov	ax,3Bh
00002879: 66 AB                                                 	stos	word [edi]
                                                                      process_macro_line_element:
0000287B: 8D 87 00 01 00 00                                     	lea	eax,[edi+100h]
00002881: 3B 05 3C A1 01 00                                     	cmp	eax,[memory_end]
00002887: 0F 83 0F E0 FF FF                                     	jae	out_of_memory
0000288D: AC                                                    	lods	byte [esi]
0000288E: 3C 7D                                                 	cmp	al,'}'
00002890: 0F 84 35 02 00 00                                     	je	macro_line_processed
00002896: 08 C0                                                 	or	al,al
00002898: 0F 84 2D 02 00 00                                     	jz	macro_line_processed
0000289E: 3C 1A                                                 	cmp	al,1Ah
000028A0: 74 20                                                 	je	process_macro_symbol
000028A2: 3C 3B                                                 	cmp	al,3Bh
000028A4: 0F 84 1C 02 00 00                                     	je	macro_foreign_line
000028AA: 80 25 CD A2 01 00 DF                                  	and	[macro_status],not 20h
000028B1: AA                                                    	stos	byte [edi]
000028B2: 3C 22                                                 	cmp	al,22h
000028B4: 75 C5                                                 	jne	process_macro_line_element
                                                                      copy_macro_string:
000028B6: 8B 0E                                                 	mov	ecx,[esi]
000028B8: 83 C1 04                                              	add	ecx,4
000028BB: E8 9A F5 FF FF                                        	call	move_data
000028C0: EB B9                                                 	jmp	process_macro_line_element
                                                                      process_macro_symbol:
000028C2: 56 57                                                 	push	esi edi
000028C4: F6 05 CD A2 01 00 20                                  	test	[macro_status],20h
000028CB: 74 1F                                                 	jz	not_macro_directive
000028CD: 0F B6 0E                                              	movzx	ecx,byte [esi]
000028D0: 46                                                    	inc	esi
000028D1: BF 34 45 01 00                                        	mov	edi,macro_directives
000028D6: E8 BA EC FF FF                                        	call	get_directive
000028DB: 73 03                                                 	jnc	process_macro_directive
000028DD: 4E                                                    	dec	esi
000028DE: EB 0C                                                 	jmp	not_macro_directive
                                                                      process_macro_directive:
000028E0: 89 C2                                                 	mov	edx,eax
000028E2: 5F 58                                                 	pop	edi eax
000028E4: C6 07 00                                              	mov	byte [edi],0
000028E7: 47                                                    	inc	edi
000028E8: 59 5B                                                 	pop	ecx ebx
000028EA: FF E2                                                 	jmp	near edx
                                                                      not_macro_directive:
000028EC: 80 25 CD A2 01 00 DF                                  	and	[macro_status],not 20h
000028F3: 0F B6 0E                                              	movzx	ecx,byte [esi]
000028F6: 46                                                    	inc	esi
000028F7: A1 DC A1 01 00                                        	mov	eax,[counter]
000028FC: E8 C2 03 00 00                                        	call	get_macro_symbol
00002901: 73 35                                                 	jnc	group_macro_symbol
00002903: 31 C0                                                 	xor	eax,eax
00002905: 39 05 DC A1 01 00                                     	cmp	[counter],eax
0000290B: 74 4C                                                 	je	multiple_macro_symbol_values
0000290D: E8 B1 03 00 00                                        	call	get_macro_symbol
00002912: 0F 82 11 01 00 00                                     	jc	not_macro_symbol
                                                                      replace_macro_symbol:
00002918: 5F 58                                                 	pop	edi eax
0000291A: 8B 4A 08                                              	mov	ecx,[edx+8]
0000291D: 8B 52 0C                                              	mov	edx,[edx+12]
00002920: 09 D2                                                 	or	edx,edx
00002922: 74 7E                                                 	jz	replace_macro_counter
00002924: 81 E1 FF FF FF 7F                                     	and	ecx,not 80000000h
0000292A: 87 F2                                                 	xchg	esi,edx
0000292C: E8 29 F5 FF FF                                        	call	move_data
00002931: 89 D6                                                 	mov	esi,edx
00002933: E9 43 FF FF FF                                        	jmp	process_macro_line_element
                                                                      group_macro_symbol:
00002938: 31 C0                                                 	xor	eax,eax
0000293A: 39 05 DC A1 01 00                                     	cmp	[counter],eax
00002940: 74 D6                                                 	je	replace_macro_symbol
00002942: 56 52                                                 	push	esi edx
00002944: 29 CE                                                 	sub	esi,ecx
00002946: E8 78 03 00 00                                        	call	get_macro_symbol
0000294B: 89 D3                                                 	mov	ebx,edx
0000294D: 5A 5E                                                 	pop	edx esi
0000294F: 72 C7                                                 	jc	replace_macro_symbol
00002951: 39 DA                                                 	cmp	edx,ebx
00002953: 77 C3                                                 	ja	replace_macro_symbol
00002955: 89 DA                                                 	mov	edx,ebx
00002957: EB BF                                                 	jmp	replace_macro_symbol
                                                                      multiple_macro_symbol_values:
00002959: 40                                                    	inc	eax
0000295A: 50                                                    	push	eax
0000295B: E8 63 03 00 00                                        	call	get_macro_symbol
00002960: 58                                                    	pop	eax
00002961: 0F 82 C2 00 00 00                                     	jc	not_macro_symbol
00002967: 5F                                                    	pop	edi
00002968: 51                                                    	push	ecx
00002969: 8B 4A 08                                              	mov	ecx,[edx+8]
0000296C: 8B 52 0C                                              	mov	edx,[edx+12]
0000296F: 87 F2                                                 	xchg	esi,edx
00002971: 0F BA F1 1F                                           	btr	ecx,31
00002975: 72 04                                                 	jc	enclose_macro_symbol_value
00002977: F3 A4                                                 	rep	movs byte [edi],[esi]
00002979: EB 0A                                                 	jmp	macro_symbol_value_ok
                                                                      enclose_macro_symbol_value:
0000297B: C6 07 3C                                              	mov	byte [edi],'<'
0000297E: 47                                                    	inc	edi
0000297F: F3 A4                                                 	rep	movs byte [edi],[esi]
00002981: C6 07 3E                                              	mov	byte [edi],'>'
00002984: 47                                                    	inc	edi
                                                                      macro_symbol_value_ok:
00002985: 3B 05 E0 A1 01 00                                     	cmp	eax,[counter_limit]
0000298B: 74 0C                                                 	je	multiple_macro_symbol_values_ok
0000298D: C6 07 2C                                              	mov	byte [edi],','
00002990: 47                                                    	inc	edi
00002991: 89 D6                                                 	mov	esi,edx
00002993: 59                                                    	pop	ecx
00002994: 57                                                    	push	edi
00002995: 29 CE                                                 	sub	esi,ecx
00002997: EB C0                                                 	jmp	multiple_macro_symbol_values
                                                                      multiple_macro_symbol_values_ok:
00002999: 59 58                                                 	pop	ecx eax
0000299B: 89 D6                                                 	mov	esi,edx
0000299D: E9 D9 FE FF FF                                        	jmp	process_macro_line_element
                                                                      replace_macro_counter:
000029A2: A1 DC A1 01 00                                        	mov	eax,[counter]
000029A7: 25 FF FF FF 7F                                        	and	eax,not 80000000h
000029AC: 74 0D                                                 	jz	group_macro_counter
000029AE: 01 C1                                                 	add	ecx,eax
000029B0: 49                                                    	dec	ecx
000029B1: E8 27 00 00 00                                        	call	store_number_symbol
000029B6: E9 C0 FE FF FF                                        	jmp	process_macro_line_element
                                                                      group_macro_counter:
000029BB: 89 CA                                                 	mov	edx,ecx
000029BD: 31 C9                                                 	xor	ecx,ecx
                                                                      multiple_macro_counter_values:
000029BF: 51 52                                                 	push	ecx edx
000029C1: 01 D1                                                 	add	ecx,edx
000029C3: E8 15 00 00 00                                        	call	store_number_symbol
000029C8: 5A 59                                                 	pop	edx ecx
000029CA: 41                                                    	inc	ecx
000029CB: 3B 0D E0 A1 01 00                                     	cmp	ecx,[counter_limit]
000029D1: 0F 84 A4 FE FF FF                                     	je	process_macro_line_element
000029D7: C6 07 2C                                              	mov	byte [edi],','
000029DA: 47                                                    	inc	edi
000029DB: EB E2                                                 	jmp	multiple_macro_counter_values
                                                                      store_number_symbol:
000029DD: 83 F9 00                                              	cmp	ecx,0
000029E0: 7D 05                                                 	jge	numer_symbol_sign_ok
000029E2: F7 D9                                                 	neg	ecx
000029E4: B0 2D                                                 	mov	al,'-'
000029E6: AA                                                    	stos	byte [edi]
                                                                      numer_symbol_sign_ok:
000029E7: 66 B8 1A 00                                           	mov	ax,1Ah
000029EB: 66 AB                                                 	stos	word [edi]
000029ED: 57                                                    	push	edi
000029EE: 89 C8                                                 	mov	eax,ecx
000029F0: B9 00 CA 9A 3B                                        	mov	ecx,1000000000
000029F5: 31 D2                                                 	xor	edx,edx
000029F7: 30 DB                                                 	xor	bl,bl
                                                                      store_number_digits:
000029F9: F7 F1                                                 	div	ecx
000029FB: 52                                                    	push	edx
000029FC: 08 DB                                                 	or	bl,bl
000029FE: 75 0B                                                 	jnz	store_number_digit
00002A00: 83 F9 01                                              	cmp	ecx,1
00002A03: 74 06                                                 	je	store_number_digit
00002A05: 08 C0                                                 	or	al,al
00002A07: 74 05                                                 	jz	number_digit_ok
00002A09: F6 D3                                                 	not	bl
                                                                      store_number_digit:
00002A0B: 04 30                                                 	add	al,30h
00002A0D: AA                                                    	stos	byte [edi]
                                                                      number_digit_ok:
00002A0E: 89 C8                                                 	mov	eax,ecx
00002A10: 31 D2                                                 	xor	edx,edx
00002A12: B9 0A 00 00 00                                        	mov	ecx,10
00002A17: F7 F1                                                 	div	ecx
00002A19: 89 C1                                                 	mov	ecx,eax
00002A1B: 58                                                    	pop	eax
00002A1C: 09 C9                                                 	or	ecx,ecx
00002A1E: 75 D9                                                 	jnz	store_number_digits
00002A20: 5B                                                    	pop	ebx
00002A21: 89 F8                                                 	mov	eax,edi
00002A23: 29 D8                                                 	sub	eax,ebx
00002A25: 88 43 FF                                              	mov	[ebx-1],al
00002A28: C3                                                    	ret
                                                                      not_macro_symbol:
00002A29: 5F 5E                                                 	pop	edi esi
00002A2B: B0 1A                                                 	mov	al,1Ah
00002A2D: AA                                                    	stos	byte [edi]
00002A2E: 8A 06                                                 	mov	al,[esi]
00002A30: 46                                                    	inc	esi
00002A31: AA                                                    	stos	byte [edi]
00002A32: 80 3E 2E                                              	cmp	byte [esi],'.'
00002A35: 75 1F                                                 	jne	copy_raw_symbol
00002A37: 8B 5C 24 10                                           	mov	ebx,[esp+8+8]
00002A3B: 09 DB                                                 	or	ebx,ebx
00002A3D: 74 17                                                 	jz	copy_raw_symbol
00002A3F: 3C 01                                                 	cmp	al,1
00002A41: 74 1D                                                 	je	copy_struc_name
00002A43: 87 F3                                                 	xchg	esi,ebx
00002A45: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00002A49: 00 4F FF                                              	add	[edi-1],cl
00002A4C: 0F 82 0F E0 FF FF                                     	jc	name_too_long
00002A52: F3 A4                                                 	rep	movs byte [edi],[esi]
00002A54: 87 F3                                                 	xchg	esi,ebx
                                                                      copy_raw_symbol:
00002A56: 0F B6 C8                                              	movzx	ecx,al
00002A59: F3 A4                                                 	rep	movs byte [edi],[esi]
00002A5B: E9 1B FE FF FF                                        	jmp	process_macro_line_element
                                                                      copy_struc_name:
00002A60: 46                                                    	inc	esi
00002A61: 87 F3                                                 	xchg	esi,ebx
00002A63: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00002A67: 88 4F FF                                              	mov	[edi-1],cl
00002A6A: F3 A4                                                 	rep	movs byte [edi],[esi]
00002A6C: 87 F3                                                 	xchg	esi,ebx
00002A6E: 8B 44 24 14                                           	mov	eax,[esp+8+12]
00002A72: 80 38 3B                                              	cmp	byte [eax],3Bh
00002A75: 0F 84 00 FE FF FF                                     	je	process_macro_line_element
00002A7B: 80 38 1A                                              	cmp	byte [eax],1Ah
00002A7E: 75 08                                                 	jne	disable_replaced_struc_name
00002A80: C6 00 3B                                              	mov	byte [eax],3Bh
00002A83: E9 F3 FD FF FF                                        	jmp	process_macro_line_element
                                                                      disable_replaced_struc_name:
00002A88: 8B 5C 24 10                                           	mov	ebx,[esp+8+8]
00002A8C: 56 57                                                 	push	esi edi
00002A8E: 8D 7B FD                                              	lea	edi,[ebx-3]
00002A91: 8D 77 FE                                              	lea	esi,[edi-2]
00002A94: 8D 4E 01                                              	lea	ecx,[esi+1]
00002A97: 29 C1                                                 	sub	ecx,eax
00002A99: FD                                                    	std
00002A9A: F3 A4                                                 	rep	movs byte [edi],[esi]
00002A9C: FC                                                    	cld
00002A9D: 66 C7 00 3B 00                                        	mov	word [eax],3Bh
00002AA2: 5F 5E                                                 	pop	edi esi
00002AA4: E9 D2 FD FF FF                                        	jmp	process_macro_line_element
                                                                      skip_foreign_symbol:
00002AA9: AC                                                    	lods	byte [esi]
00002AAA: 0F B6 C0                                              	movzx	eax,al
00002AAD: 01 C6                                                 	add	esi,eax
                                                                      skip_foreign_line:
00002AAF: AC                                                    	lods	byte [esi]
00002AB0: 3C 1A                                                 	cmp	al,1Ah
00002AB2: 74 F5                                                 	je	skip_foreign_symbol
00002AB4: 3C 3B                                                 	cmp	al,3Bh
00002AB6: 74 F1                                                 	je	skip_foreign_symbol
00002AB8: 3C 22                                                 	cmp	al,22h
00002ABA: 74 05                                                 	je	skip_foreign_string
00002ABC: 08 C0                                                 	or	al,al
00002ABE: 75 EF                                                 	jnz	skip_foreign_line
00002AC0: C3                                                    	ret
                                                                      skip_foreign_string:
00002AC1: AD                                                    	lods	dword [esi]
00002AC2: 01 C6                                                 	add	esi,eax
00002AC4: EB E9                                                 	jmp	skip_foreign_line
                                                                      macro_foreign_line:
00002AC6: E8 DE FF FF FF                                        	call	skip_foreign_symbol
                                                                      macro_line_processed:
00002ACB: C6 07 00                                              	mov	byte [edi],0
00002ACE: 47                                                    	inc	edi
00002ACF: 50                                                    	push	eax
00002AD0: E8 10 EB FF FF                                        	call	preprocess_line
00002AD5: 58                                                    	pop	eax
00002AD6: 59 5B                                                 	pop	ecx ebx
00002AD8: 3C 7D                                                 	cmp	al,'}'
00002ADA: 74 0F                                                 	je	macro_block_processed
                                                                      process_next_line:
00002ADC: 41                                                    	inc	ecx
00002ADD: 89 35 84 A1 01 00                                     	mov	[macro_line],esi
00002AE3: 83 C6 12                                              	add	esi,16+2
00002AE6: E9 10 FD FF FF                                        	jmp	process_macro_line
                                                                      macro_block_processed:
00002AEB: E8 7F 01 00 00                                        	call	close_macro_block
00002AF0: 0F 82 05 FD FF FF                                     	jc	process_macro_line
00002AF6: 8F 05 80 A1 01 00                                     	pop	[current_line]
00002AFC: 83 C4 0C                                              	add	esp,12
00002AFF: 8F 05 90 A1 01 00                                     	pop	[macro_block_line_number]
00002B05: 8F 05 8C A1 01 00                                     	pop	[macro_block_line]
00002B0B: 8F 05 88 A1 01 00                                     	pop	[macro_block]
00002B11: 8F 05 DC A1 01 00                                     	pop	[counter]
00002B17: 58                                                    	pop	eax
00002B18: 24 F0                                                 	and	al,0F0h
00002B1A: 80 25 CD A2 01 00 0F                                  	and	[macro_status],0Fh
00002B21: 08 05 CD A2 01 00                                     	or	[macro_status],al
00002B27: C3                                                    	ret
                                                                
                                                                local_symbols:
00002B28: AC                                                    	lods	byte [esi]
00002B29: 3C 1A                                                 	cmp	al,1Ah
00002B2B: 0F 85 F9 DD FF FF                                     	jne	invalid_argument
00002B31: C6 47 FF 3B                                           	mov	byte [edi-1],3Bh
00002B35: 30 C0                                                 	xor	al,al
00002B37: AA                                                    	stos	byte [edi]
                                                                      make_local_symbol:
00002B38: 51                                                    	push	ecx
00002B39: AC                                                    	lods	byte [esi]
00002B3A: 0F B6 C8                                              	movzx	ecx,al
00002B3D: A1 DC A1 01 00                                        	mov	eax,[counter]
00002B42: E8 C9 01 00 00                                        	call	add_macro_symbol
00002B47: 89 7A 0C                                              	mov	[edx+12],edi
00002B4A: 0F B6 05 AC A1 01 00                                  	movzx	eax,[locals_counter]
00002B51: 01 C8                                                 	add	eax,ecx
00002B53: 40                                                    	inc	eax
00002B54: 3D 00 01 00 00                                        	cmp	eax,100h
00002B59: 0F 83 02 DF FF FF                                     	jae	name_too_long
00002B5F: 8D 6C 07 02                                           	lea	ebp,[edi+2+eax]
00002B63: 3B 2D 3C A1 01 00                                     	cmp	ebp,[memory_end]
00002B69: 0F 83 2D DD FF FF                                     	jae	out_of_memory
00002B6F: 88 C4                                                 	mov	ah,al
00002B71: B0 1A                                                 	mov	al,1Ah
00002B73: 66 AB                                                 	stos	word [edi]
00002B75: F3 A4                                                 	rep	movs byte [edi],[esi]
00002B77: B0 3F                                                 	mov	al,'?'
00002B79: AA                                                    	stos	byte [edi]
00002B7A: 56                                                    	push	esi
00002B7B: BE AD A1 01 00                                        	mov	esi,locals_counter+1
00002B80: 0F B6 0D AC A1 01 00                                  	movzx	ecx,[locals_counter]
00002B87: F3 A4                                                 	rep	movs byte [edi],[esi]
00002B89: 5E                                                    	pop	esi
00002B8A: 89 F8                                                 	mov	eax,edi
00002B8C: 2B 42 0C                                              	sub	eax,[edx+12]
00002B8F: 89 42 08                                              	mov	[edx+8],eax
00002B92: 30 C0                                                 	xor	al,al
00002B94: AA                                                    	stos	byte [edi]
00002B95: B8 AC A1 01 00                                        	mov	eax,locals_counter
00002B9A: 0F B6 08                                              	movzx	ecx,byte [eax]
                                                                      counter_loop:
00002B9D: FE 04 08                                              	inc	byte [eax+ecx]
00002BA0: 80 3C 08 3A                                           	cmp	byte [eax+ecx],'9'+1
00002BA4: 72 2B                                                 	jb	counter_ok
00002BA6: 75 06                                                 	jne	letter_digit
00002BA8: C6 04 08 41                                           	mov	byte [eax+ecx],'A'
00002BAC: EB 23                                                 	jmp	counter_ok
                                                                      letter_digit:
00002BAE: 80 3C 08 5B                                           	cmp	byte [eax+ecx],'Z'+1
00002BB2: 72 1D                                                 	jb	counter_ok
00002BB4: 75 06                                                 	jne	small_letter_digit
00002BB6: C6 04 08 61                                           	mov	byte [eax+ecx],'a'
00002BBA: EB 15                                                 	jmp	counter_ok
                                                                      small_letter_digit:
00002BBC: 80 3C 08 7B                                           	cmp	byte [eax+ecx],'z'+1
00002BC0: 72 0F                                                 	jb	counter_ok
00002BC2: C6 04 08 30                                           	mov	byte [eax+ecx],'0'
00002BC6: E2 D5                                                 	loop	counter_loop
00002BC8: FE 00                                                 	inc	byte [eax]
00002BCA: 0F B6 08                                              	movzx	ecx,byte [eax]
00002BCD: C6 04 08 30                                           	mov	byte [eax+ecx],'0'
                                                                      counter_ok:
00002BD1: 59                                                    	pop	ecx
00002BD2: AC                                                    	lods	byte [esi]
00002BD3: 3C 7D                                                 	cmp	al,'}'
00002BD5: 0F 84 10 FF FF FF                                     	je	macro_block_processed
00002BDB: 08 C0                                                 	or	al,al
00002BDD: 0F 84 F9 FE FF FF                                     	jz	process_next_line
00002BE3: 3C 2C                                                 	cmp	al,','
00002BE5: 0F 85 A7 DE FF FF                                     	jne	extra_characters_on_line
00002BEB: 4F                                                    	dec	edi
00002BEC: AC                                                    	lods	byte [esi]
00002BED: 3C 1A                                                 	cmp	al,1Ah
00002BEF: 0F 84 43 FF FF FF                                     	je	make_local_symbol
00002BF5: E9 30 DD FF FF                                        	jmp	invalid_argument
                                                                common_block:
00002BFA: E8 70 00 00 00                                        	call	close_macro_block
00002BFF: 0F 82 F6 FB FF FF                                     	jc	process_macro_line
00002C05: C7 05 DC A1 01 00 00 00 00 00                         	mov	[counter],0
00002C0F: EB 43                                                 	jmp	new_macro_block
                                                                forward_block:
00002C11: 83 3D E0 A1 01 00 00                                  	cmp	[counter_limit],0
00002C18: 74 E0                                                 	je	common_block
00002C1A: E8 50 00 00 00                                        	call	close_macro_block
00002C1F: 0F 82 D6 FB FF FF                                     	jc	process_macro_line
00002C25: C7 05 DC A1 01 00 01 00 00 00                         	mov	[counter],1
00002C2F: EB 23                                                 	jmp	new_macro_block
                                                                reverse_block:
00002C31: 83 3D E0 A1 01 00 00                                  	cmp	[counter_limit],0
00002C38: 74 C0                                                 	je	common_block
00002C3A: E8 30 00 00 00                                        	call	close_macro_block
00002C3F: 0F 82 B6 FB FF FF                                     	jc	process_macro_line
00002C45: A1 E0 A1 01 00                                        	mov	eax,[counter_limit]
00002C4A: 0D 00 00 00 80                                        	or	eax,80000000h
00002C4F: A3 DC A1 01 00                                        	mov	[counter],eax
                                                                      new_macro_block:
00002C54: 89 35 88 A1 01 00                                     	mov	[macro_block],esi
00002C5A: A1 84 A1 01 00                                        	mov	eax,[macro_line]
00002C5F: A3 8C A1 01 00                                        	mov	[macro_block_line],eax
00002C64: 89 0D 90 A1 01 00                                     	mov	[macro_block_line_number],ecx
00002C6A: E9 8C FB FF FF                                        	jmp	process_macro_line
                                                                close_macro_block:
00002C6F: 3B 35 88 A1 01 00                                     	cmp	esi,[macro_block]
00002C75: 74 4A                                                 	je	block_closed
00002C77: 83 3D DC A1 01 00 00                                  	cmp	[counter],0
00002C7E: 74 41                                                 	je	block_closed
00002C80: 7C 15                                                 	jl	reverse_counter
00002C82: A1 DC A1 01 00                                        	mov	eax,[counter]
00002C87: 3B 05 E0 A1 01 00                                     	cmp	eax,[counter_limit]
00002C8D: 74 32                                                 	je	block_closed
00002C8F: FF 05 DC A1 01 00                                     	inc	[counter]
00002C95: EB 12                                                 	jmp	continue_block
                                                                      reverse_counter:
00002C97: A1 DC A1 01 00                                        	mov	eax,[counter]
00002C9C: 48                                                    	dec	eax
00002C9D: 3D 00 00 00 80                                        	cmp	eax,80000000h
00002CA2: 74 1D                                                 	je	block_closed
00002CA4: A3 DC A1 01 00                                        	mov	[counter],eax
                                                                      continue_block:
00002CA9: 8B 35 88 A1 01 00                                     	mov	esi,[macro_block]
00002CAF: A1 8C A1 01 00                                        	mov	eax,[macro_block_line]
00002CB4: A3 84 A1 01 00                                        	mov	[macro_line],eax
00002CB9: 8B 0D 90 A1 01 00                                     	mov	ecx,[macro_block_line_number]
00002CBF: F9                                                    	stc
00002CC0: C3                                                    	ret
                                                                      block_closed:
00002CC1: F8                                                    	clc
00002CC2: C3                                                    	ret
                                                                get_macro_symbol:
00002CC3: 51                                                    	push	ecx
00002CC4: E8 20 00 00 00                                        	call	find_macro_symbol_leaf
00002CC9: 72 1B                                                 	jc	macro_symbol_not_found
00002CCB: 8B 13                                                 	mov	edx,[ebx]
00002CCD: 89 F3                                                 	mov	ebx,esi
                                                                      try_macro_symbol:
00002CCF: 09 D2                                                 	or	edx,edx
00002CD1: 74 13                                                 	jz	macro_symbol_not_found
00002CD3: 8B 0C 24                                              	mov	ecx,[esp]
00002CD6: 8B 7A 04                                              	mov	edi,[edx+4]
00002CD9: F3 A6                                                 	repe	cmps byte [esi],[edi]
00002CDB: 74 06                                                 	je	macro_symbol_found
00002CDD: 89 DE                                                 	mov	esi,ebx
00002CDF: 8B 12                                                 	mov	edx,[edx]
00002CE1: EB EC                                                 	jmp	try_macro_symbol
                                                                      macro_symbol_found:
00002CE3: 59                                                    	pop	ecx
00002CE4: F8                                                    	clc
00002CE5: C3                                                    	ret
                                                                      macro_symbol_not_found:
00002CE6: 59                                                    	pop	ecx
00002CE7: F9                                                    	stc
00002CE8: C3                                                    	ret
                                                                      find_macro_symbol_leaf:
00002CE9: C1 E0 08                                              	shl	eax,8
00002CEC: 88 C8                                                 	mov	al,cl
00002CEE: 89 C5                                                 	mov	ebp,eax
00002CF0: BB 94 A1 01 00                                        	mov	ebx,macro_symbols
                                                                      follow_macro_symbols_tree:
00002CF5: 8B 13                                                 	mov	edx,[ebx]
00002CF7: 09 D2                                                 	or	edx,edx
00002CF9: 74 13                                                 	jz	no_such_macro_symbol
00002CFB: 31 C0                                                 	xor	eax,eax
00002CFD: D1 ED                                                 	shr	ebp,1
00002CFF: 83 D0 00                                              	adc	eax,0
00002D02: 8D 1C 82                                              	lea	ebx,[edx+eax*4]
00002D05: 09 ED                                                 	or	ebp,ebp
00002D07: 75 EC                                                 	jnz	follow_macro_symbols_tree
00002D09: 83 C3 08                                              	add	ebx,8
00002D0C: F8                                                    	clc
00002D0D: C3                                                    	ret
                                                                      no_such_macro_symbol:
00002D0E: F9                                                    	stc
00002D0F: C3                                                    	ret
                                                                add_macro_symbol:
00002D10: 53 55                                                 	push	ebx ebp
00002D12: E8 D2 FF FF FF                                        	call	find_macro_symbol_leaf
00002D17: 72 27                                                 	jc	extend_macro_symbol_tree
00002D19: 8B 03                                                 	mov	eax,[ebx]
                                                                      make_macro_symbol:
00002D1B: 8B 15 64 A1 01 00                                     	mov	edx,[free_additional_memory]
00002D21: 83 C2 10                                              	add	edx,16
00002D24: 3B 15 C0 A1 01 00                                     	cmp	edx,[labels_list]
00002D2A: 0F 87 6C DB FF FF                                     	ja	out_of_memory
00002D30: 87 15 64 A1 01 00                                     	xchg	edx,[free_additional_memory]
00002D36: 89 13                                                 	mov	[ebx],edx
00002D38: 89 02                                                 	mov	[edx],eax
00002D3A: 89 72 04                                              	mov	[edx+4],esi
00002D3D: 5D 5B                                                 	pop	ebp ebx
00002D3F: C3                                                    	ret
                                                                      extend_macro_symbol_tree:
00002D40: 8B 15 64 A1 01 00                                     	mov	edx,[free_additional_memory]
00002D46: 83 C2 10                                              	add	edx,16
00002D49: 3B 15 C0 A1 01 00                                     	cmp	edx,[labels_list]
00002D4F: 0F 87 47 DB FF FF                                     	ja	out_of_memory
00002D55: 87 15 64 A1 01 00                                     	xchg	edx,[free_additional_memory]
00002D5B: 31 C0                                                 	xor	eax,eax
00002D5D: 89 02                                                 	mov	[edx],eax
00002D5F: 89 42 04                                              	mov	[edx+4],eax
00002D62: 89 42 08                                              	mov	[edx+8],eax
00002D65: 89 42 0C                                              	mov	[edx+12],eax
00002D68: D1 ED                                                 	shr	ebp,1
00002D6A: 83 D0 00                                              	adc	eax,0
00002D6D: 89 13                                                 	mov	[ebx],edx
00002D6F: 8D 1C 82                                              	lea	ebx,[edx+eax*4]
00002D72: 09 ED                                                 	or	ebp,ebp
00002D74: 75 CA                                                 	jnz	extend_macro_symbol_tree
00002D76: 83 C3 08                                              	add	ebx,8
00002D79: 31 C0                                                 	xor	eax,eax
00002D7B: EB 9E                                                 	jmp	make_macro_symbol
                                                                
                                                                include_file:
00002D7D: AC                                                    	lods	byte [esi]
00002D7E: 3C 22                                                 	cmp	al,22h
00002D80: 0F 85 A4 DB FF FF                                     	jne	invalid_argument
00002D86: AD                                                    	lods	dword [esi]
00002D87: 80 3C 06 00                                           	cmp	byte [esi+eax],0
00002D8B: 0F 85 01 DD FF FF                                     	jne	extra_characters_on_line
00002D91: 56                                                    	push	esi
00002D92: 57                                                    	push	edi
00002D93: 8B 1D 80 A1 01 00                                     	mov	ebx,[current_line]
                                                                      find_current_file_path:
00002D99: 8B 33                                                 	mov	esi,[ebx]
00002D9B: F6 43 07 80                                           	test	byte [ebx+7],80h
00002D9F: 74 05                                                 	jz	copy_current_file_path
00002DA1: 8B 5B 08                                              	mov	ebx,[ebx+8]
00002DA4: EB F3                                                 	jmp	find_current_file_path
                                                                      copy_current_file_path:
00002DA6: AC                                                    	lods	byte [esi]
00002DA7: AA                                                    	stos	byte [edi]
00002DA8: 08 C0                                                 	or	al,al
00002DAA: 75 FA                                                 	jnz	copy_current_file_path
                                                                      cut_current_file_name:
00002DAC: 3B 3C 24                                              	cmp	edi,[esp]
00002DAF: 74 0F                                                 	je	current_file_path_ok
00002DB1: 80 7F FF 5C                                           	cmp	byte [edi-1],'\'
00002DB5: 74 09                                                 	je	current_file_path_ok
00002DB7: 80 7F FF 2F                                           	cmp	byte [edi-1],'/'
00002DBB: 74 03                                                 	je	current_file_path_ok
00002DBD: 4F                                                    	dec	edi
00002DBE: EB EC                                                 	jmp	cut_current_file_name
                                                                      current_file_path_ok:
00002DC0: 8B 74 24 04                                           	mov	esi,[esp+4]
00002DC4: E8 4C 50 00 00                                        	call	expand_path
00002DC9: 5A                                                    	pop	edx
00002DCA: 89 D6                                                 	mov	esi,edx
00002DCC: E8 97 D5 FF FF                                        	call	open
00002DD1: 73 49                                                 	jnc	include_path_ok
00002DD3: 8B 2D 60 A1 01 00                                     	mov	ebp,[include_paths]
                                                                      try_include_directories:
00002DD9: 89 F7                                                 	mov	edi,esi
00002DDB: 89 EE                                                 	mov	esi,ebp
00002DDD: 80 3E 00                                              	cmp	byte [esi],0
00002DE0: 74 23                                                 	je	try_in_current_directory
00002DE2: 55                                                    	push	ebp
00002DE3: 57                                                    	push	edi
00002DE4: E8 68 50 00 00                                        	call	get_include_directory
00002DE9: 89 74 24 04                                           	mov	[esp+4],esi
00002DED: 8B 74 24 08                                           	mov	esi,[esp+8]
00002DF1: E8 1F 50 00 00                                        	call	expand_path
00002DF6: 5A                                                    	pop	edx
00002DF7: 89 D6                                                 	mov	esi,edx
00002DF9: E8 6A D5 FF FF                                        	call	open
00002DFE: 5D                                                    	pop	ebp
00002DFF: 73 1B                                                 	jnc	include_path_ok
00002E01: EB D6                                                 	jmp	try_include_directories
00002E03: 89 F7                                                 	mov	edi,esi
                                                                      try_in_current_directory:
00002E05: 8B 34 24                                              	mov	esi,[esp]
00002E08: 57                                                    	push	edi
00002E09: E8 07 50 00 00                                        	call	expand_path
00002E0E: 5A                                                    	pop	edx
00002E0F: 89 D6                                                 	mov	esi,edx
00002E11: E8 52 D5 FF FF                                        	call	open
00002E16: 0F 82 D2 DA FF FF                                     	jc	file_not_found
                                                                      include_path_ok:
00002E1C: 8B 3C 24                                              	mov	edi,[esp]
                                                                      copy_preprocessed_path:
00002E1F: AC                                                    	lods	byte [esi]
00002E20: AA                                                    	stos	byte [edi]
00002E21: 08 C0                                                 	or	al,al
00002E23: 75 FA                                                 	jnz	copy_preprocessed_path
00002E25: 5E                                                    	pop	esi
00002E26: 8D 4F FF                                              	lea	ecx,[edi-1]
00002E29: 29 F1                                                 	sub	ecx,esi
00002E2B: 89 4E FC                                              	mov	[esi-4],ecx
00002E2E: FF 35 CD A2 01 00                                     	push	dword [macro_status]
00002E34: 80 25 CD A2 01 00 0F                                  	and	[macro_status],0Fh
00002E3B: E8 8D E4 FF FF                                        	call	preprocess_file
00002E40: 58                                                    	pop	eax
00002E41: 24 F0                                                 	and	al,0F0h
00002E43: 80 25 CD A2 01 00 0F                                  	and	[macro_status],0Fh
00002E4A: 08 05 CD A2 01 00                                     	or	[macro_status],al
00002E50: E9 06 EA FF FF                                        	jmp	line_preprocessed
                                                                
                                                                include '..\parser.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                parser:
00002E55: A1 3C A1 01 00                                        	mov	eax,[memory_end]
00002E5A: A3 C0 A1 01 00                                        	mov	[labels_list],eax
00002E5F: A1 40 A1 01 00                                        	mov	eax,[additional_memory]
00002E64: A3 64 A1 01 00                                        	mov	[free_additional_memory],eax
00002E69: 31 C0                                                 	xor	eax,eax
00002E6B: A3 B4 A1 01 00                                        	mov	[current_locals_prefix],eax
00002E70: A3 B8 A1 01 00                                        	mov	[anonymous_reverse],eax
00002E75: A3 BC A1 01 00                                        	mov	[anonymous_forward],eax
00002E7A: A3 CC A1 01 00                                        	mov	[hash_tree],eax
00002E7F: A3 94 A2 01 00                                        	mov	[blocks_stack],eax
00002E84: A3 98 A2 01 00                                        	mov	[parsed_lines],eax
00002E89: 8B 35 38 A1 01 00                                     	mov	esi,[memory_start]
00002E8F: 8B 3D 68 A1 01 00                                     	mov	edi,[source_start]
                                                                      parser_loop:
00002E95: 89 35 80 A1 01 00                                     	mov	[current_line],esi
00002E9B: 8D 87 00 01 00 00                                     	lea	eax,[edi+100h]
00002EA1: 3B 05 C0 A1 01 00                                     	cmp	eax,[labels_list]
00002EA7: 0F 83 EF D9 FF FF                                     	jae	out_of_memory
00002EAD: 80 7E 10 00                                           	cmp	byte [esi+16],0
00002EB1: 0F 84 51 01 00 00                                     	je	empty_line
00002EB7: 80 7E 10 3B                                           	cmp	byte [esi+16],3Bh
00002EBB: 0F 84 47 01 00 00                                     	je	empty_line
00002EC1: B0 0F                                                 	mov	al,0Fh
00002EC3: AA                                                    	stos	byte [edi]
00002EC4: 89 F0                                                 	mov	eax,esi
00002EC6: AB                                                    	stos	dword [edi]
00002EC7: FF 05 98 A2 01 00                                     	inc	[parsed_lines]
00002ECD: 83 C6 10                                              	add	esi,16
                                                                      parse_line:
00002ED0: C6 05 D0 A2 01 00 00                                  	mov	[formatter_symbols_allowed],0
00002ED7: C6 05 D1 A2 01 00 00                                  	mov	[decorator_symbols_allowed],0
00002EDE: 80 3E 1A                                              	cmp	byte [esi],1Ah
00002EE1: 0F 85 02 01 00 00                                     	jne	empty_instruction
00002EE7: 57                                                    	push	edi
00002EE8: 83 C6 02                                              	add	esi,2
00002EEB: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00002EEF: 80 3C 0E 3A                                           	cmp	byte [esi+ecx],':'
00002EF3: 74 42                                                 	je	simple_label
00002EF5: 80 3C 0E 3D                                           	cmp	byte [esi+ecx],'='
00002EF9: 74 60                                                 	je	constant_label
00002EFB: E8 CD 0B 00 00                                        	call	get_instruction
00002F00: 0F 83 8C 00 00 00                                     	jnc	main_instruction_identified
00002F06: 80 3C 0E 1A                                           	cmp	byte [esi+ecx],1Ah
00002F0A: 75 13                                                 	jne	no_data_label
00002F0C: 56 51                                                 	push	esi ecx
00002F0E: 8D 74 0E 02                                           	lea	esi,[esi+ecx+2]
00002F12: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00002F16: E8 86 0B 00 00                                        	call	get_data_directive
00002F1B: 73 5A                                                 	jnc	data_label
00002F1D: 59 5E                                                 	pop	ecx esi
                                                                      no_data_label:
00002F1F: E8 7D 0B 00 00                                        	call	get_data_directive
00002F24: 73 6C                                                 	jnc	main_instruction_identified
00002F26: 5F                                                    	pop	edi
00002F27: 83 EE 02                                              	sub	esi,2
00002F2A: 66 31 DB                                              	xor	bx,bx
00002F2D: E8 CA 04 00 00                                        	call	parse_line_contents
00002F32: E9 D9 00 00 00                                        	jmp	parse_next_line
                                                                      simple_label:
00002F37: 5F                                                    	pop	edi
00002F38: E8 53 0A 00 00                                        	call	identify_label
00002F3D: 80 7E 01 3A                                           	cmp	byte [esi+1],':'
00002F41: 74 0B                                                 	je	block_label
00002F43: C6 07 02                                              	mov	byte [edi],2
00002F46: 47                                                    	inc	edi
00002F47: AB                                                    	stos	dword [edi]
00002F48: 46                                                    	inc	esi
00002F49: 30 C0                                                 	xor	al,al
00002F4B: AA                                                    	stos	byte [edi]
00002F4C: EB 82                                                 	jmp	parse_line
                                                                      block_label:
00002F4E: C6 07 04                                              	mov	byte [edi],4
00002F51: 47                                                    	inc	edi
00002F52: AB                                                    	stos	dword [edi]
00002F53: 83 C6 02                                              	add	esi,2
00002F56: E9 75 FF FF FF                                        	jmp	parse_line
                                                                      constant_label:
00002F5B: 5F                                                    	pop	edi
00002F5C: E8 D3 0B 00 00                                        	call	get_label_id
00002F61: C6 07 03                                              	mov	byte [edi],3
00002F64: 47                                                    	inc	edi
00002F65: AB                                                    	stos	dword [edi]
00002F66: 30 C0                                                 	xor	al,al
00002F68: AA                                                    	stos	byte [edi]
00002F69: 46                                                    	inc	esi
00002F6A: 66 31 DB                                              	xor	bx,bx
00002F6D: E8 8A 04 00 00                                        	call	parse_line_contents
00002F72: E9 99 00 00 00                                        	jmp	parse_next_line
                                                                      data_label:
00002F77: 59 5A                                                 	pop	ecx edx
00002F79: 5F                                                    	pop	edi
00002F7A: 50 53 56                                              	push	eax ebx esi
00002F7D: 89 D6                                                 	mov	esi,edx
00002F7F: 0F B6 4E FF                                           	movzx	ecx,byte [esi-1]
00002F83: E8 08 0A 00 00                                        	call	identify_label
00002F88: C6 07 02                                              	mov	byte [edi],2
00002F8B: 47                                                    	inc	edi
00002F8C: AB                                                    	stos	dword [edi]
00002F8D: 5E 5B 58                                              	pop	esi ebx eax
00002F90: AA                                                    	stos	byte [edi]
00002F91: 57                                                    	push	edi
                                                                      main_instruction_identified:
00002F92: 5F                                                    	pop	edi
00002F93: 88 C2                                                 	mov	dl,al
00002F95: B0 01                                                 	mov	al,1
00002F97: AA                                                    	stos	byte [edi]
00002F98: 66 89 D8                                              	mov	ax,bx
00002F9B: 66 AB                                                 	stos	word [edi]
00002F9D: 88 D0                                                 	mov	al,dl
00002F9F: AA                                                    	stos	byte [edi]
00002FA0: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
00002FA5: 0F 84 96 00 00 00                                     	je	parse_block
00002FAB: 66 81 FB D3 08                                        	cmp	bx,repeat_directive-instruction_handler
00002FB0: 0F 84 8B 00 00 00                                     	je	parse_block
00002FB6: 66 81 FB A6 09                                        	cmp	bx,while_directive-instruction_handler
00002FBB: 0F 84 80 00 00 00                                     	je	parse_block
00002FC1: 66 81 FB 48 0C                                        	cmp	bx,end_directive-instruction_handler
00002FC6: 0F 84 B8 00 00 00                                     	je	parse_end_directive
00002FCC: 66 81 FB C9 0A                                        	cmp	bx,else_directive-instruction_handler
00002FD1: 0F 84 A2 01 00 00                                     	je	parse_else
00002FD7: 66 81 FB 48 15                                        	cmp	bx,assert_directive-instruction_handler
00002FDC: 0F 84 F2 01 00 00                                     	je	parse_assert
                                                                      common_parse:
00002FE2: E8 15 04 00 00                                        	call	parse_line_contents
00002FE7: EB 27                                                 	jmp	parse_next_line
                                                                      empty_instruction:
00002FE9: AC                                                    	lods	byte [esi]
00002FEA: 08 C0                                                 	or	al,al
00002FEC: 74 22                                                 	jz	parse_next_line
00002FEE: 3C 3A                                                 	cmp	al,':'
00002FF0: 0F 84 72 DA FF FF                                     	je	invalid_name
00002FF6: 4E                                                    	dec	esi
00002FF7: C7 05 90 A2 01 00 00 00 00 00                         	mov	[parenthesis_stack],0
00003001: E8 76 04 00 00                                        	call	parse_argument
00003006: EB 08                                                 	jmp	parse_next_line
                                                                      empty_line:
00003008: 83 C6 10                                              	add	esi,16
                                                                      skip_rest_of_line:
0000300B: E8 9F FA FF FF                                        	call	skip_foreign_line
                                                                      parse_next_line:
00003010: 3B 35 68 A1 01 00                                     	cmp	esi,[source_start]
00003016: 0F 82 79 FE FF FF                                     	jb	parser_loop
                                                                      source_parsed:
0000301C: 83 3D 94 A2 01 00 00                                  	cmp	[blocks_stack],0
00003023: 74 0C                                                 	je	blocks_stack_ok
00003025: 58                                                    	pop	eax
00003026: 8F 05 80 A1 01 00                                     	pop	[current_line]
0000302C: E9 53 DA FF FF                                        	jmp	missing_end_directive
                                                                      blocks_stack_ok:
00003031: 30 C0                                                 	xor	al,al
00003033: AA                                                    	stos	byte [edi]
00003034: 83 C7 0F                                              	add	edi,0Fh
00003037: 83 E7 F0                                              	and	edi,not 0Fh
0000303A: 89 3D 6C A1 01 00                                     	mov	[code_start],edi
00003040: C3                                                    	ret
                                                                      parse_block:
00003041: 89 E0                                                 	mov	eax,esp
00003043: 2B 05 48 A1 01 00                                     	sub	eax,[stack_limit]
00003049: 3D 00 01 00 00                                        	cmp	eax,100h
0000304E: 0F 82 52 D8 FF FF                                     	jb	stack_overflow
00003054: FF 35 80 A1 01 00                                     	push	[current_line]
0000305A: 66 89 D8                                              	mov	ax,bx
0000305D: C1 E0 10                                              	shl	eax,16
00003060: 50                                                    	push	eax
00003061: FF 05 94 A2 01 00                                     	inc	[blocks_stack]
00003067: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
0000306C: 0F 84 A4 00 00 00                                     	je	parse_if
00003072: 66 81 FB A6 09                                        	cmp	bx,while_directive-instruction_handler
00003077: 0F 84 BE 00 00 00                                     	je	parse_while
0000307D: E8 7A 03 00 00                                        	call	parse_line_contents
00003082: EB 8C                                                 	jmp	parse_next_line
                                                                      parse_end_directive:
00003084: 80 3E 1A                                              	cmp	byte [esi],1Ah
00003087: 0F 85 55 FF FF FF                                     	jne	common_parse
0000308D: 57                                                    	push	edi
0000308E: 46                                                    	inc	esi
0000308F: 0F B6 0E                                              	movzx	ecx,byte [esi]
00003092: 46                                                    	inc	esi
00003093: E8 35 0A 00 00                                        	call	get_instruction
00003098: 5F                                                    	pop	edi
00003099: 73 08                                                 	jnc	parse_end_block
0000309B: 83 EE 02                                              	sub	esi,2
0000309E: E9 3F FF FF FF                                        	jmp	common_parse
                                                                      parse_end_block:
000030A3: 88 C2                                                 	mov	dl,al
000030A5: B0 01                                                 	mov	al,1
000030A7: AA                                                    	stos	byte [edi]
000030A8: 66 89 D8                                              	mov	ax,bx
000030AB: 66 AB                                                 	stos	word [edi]
000030AD: 88 D0                                                 	mov	al,dl
000030AF: AA                                                    	stos	byte [edi]
000030B0: AC                                                    	lods	byte [esi]
000030B1: 08 C0                                                 	or	al,al
000030B3: 0F 85 D9 D9 FF FF                                     	jnz	extra_characters_on_line
000030B9: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
000030BE: 74 13                                                 	je	close_parsing_block
000030C0: 66 81 FB D3 08                                        	cmp	bx,repeat_directive-instruction_handler
000030C5: 74 0C                                                 	je	close_parsing_block
000030C7: 66 81 FB A6 09                                        	cmp	bx,while_directive-instruction_handler
000030CC: 74 05                                                 	je	close_parsing_block
000030CE: E9 3D FF FF FF                                        	jmp	parse_next_line
                                                                      close_parsing_block:
000030D3: 83 3D 94 A2 01 00 00                                  	cmp	[blocks_stack],0
000030DA: 0F 84 AB D9 FF FF                                     	je	unexpected_instruction
000030E0: 66 3B 5C 24 02                                        	cmp	bx,[esp+2]
000030E5: 0F 85 A0 D9 FF FF                                     	jne	unexpected_instruction
000030EB: FF 0D 94 A2 01 00                                     	dec	[blocks_stack]
000030F1: 58 5A                                                 	pop	eax edx
000030F3: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
000030F8: 0F 85 12 FF FF FF                                     	jne	parse_next_line
000030FE: A8 0C                                                 	test	al,1100b
00003100: 0F 84 0A FF FF FF                                     	jz	parse_next_line
00003106: A8 10                                                 	test	al,10000b
00003108: 0F 85 02 FF FF FF                                     	jnz	parse_next_line
0000310E: 83 EF 08                                              	sub	edi,8
00003111: E9 FA FE FF FF                                        	jmp	parse_next_line
                                                                      parse_if:
00003116: 57                                                    	push	edi
00003117: E8 E0 02 00 00                                        	call	parse_line_contents
0000311C: 30 C0                                                 	xor	al,al
0000311E: AA                                                    	stos	byte [edi]
0000311F: 87 34 24                                              	xchg	esi,[esp]
00003122: 89 F7                                                 	mov	edi,esi
00003124: E8 90 15 00 00                                        	call	preevaluate_logical_expression
00003129: 5E                                                    	pop	esi
0000312A: 3C 30                                                 	cmp	al,'0'
0000312C: 74 33                                                 	je	parse_false_condition_block
0000312E: 3C 31                                                 	cmp	al,'1'
00003130: 74 3B                                                 	je	parse_true_condition_block
00003132: 80 0C 24 10                                           	or	byte [esp],10000b
00003136: E9 D5 FE FF FF                                        	jmp	parse_next_line
                                                                      parse_while:
0000313B: 57                                                    	push	edi
0000313C: E8 BB 02 00 00                                        	call	parse_line_contents
00003141: 30 C0                                                 	xor	al,al
00003143: AA                                                    	stos	byte [edi]
00003144: 87 34 24                                              	xchg	esi,[esp]
00003147: 89 F7                                                 	mov	edi,esi
00003149: E8 6B 15 00 00                                        	call	preevaluate_logical_expression
0000314E: 5E                                                    	pop	esi
0000314F: 3C 30                                                 	cmp	al,'0'
00003151: 74 0E                                                 	je	parse_false_condition_block
00003153: 3C 31                                                 	cmp	al,'1'
00003155: 0F 85 B5 FE FF FF                                     	jne	parse_next_line
0000315B: AA                                                    	stos	byte [edi]
0000315C: E9 AF FE FF FF                                        	jmp	parse_next_line
                                                                      parse_false_condition_block:
00003161: 80 0C 24 01                                           	or	byte [esp],1
00003165: 83 EF 04                                              	sub	edi,4
00003168: E9 B0 00 00 00                                        	jmp	skip_parsing
                                                                      parse_true_condition_block:
0000316D: 80 0C 24 04                                           	or	byte [esp],100b
00003171: 83 EF 04                                              	sub	edi,4
00003174: E9 97 FE FF FF                                        	jmp	parse_next_line
                                                                      parse_else:
00003179: 83 3D 94 A2 01 00 00                                  	cmp	[blocks_stack],0
00003180: 0F 84 05 D9 FF FF                                     	je	unexpected_instruction
00003186: 66 81 7C 24 02 51 0A                                  	cmp	word [esp+2],if_directive-instruction_handler
0000318D: 0F 85 F8 D8 FF FF                                     	jne	unexpected_instruction
00003193: AC                                                    	lods	byte [esi]
00003194: 08 C0                                                 	or	al,al
00003196: 74 67                                                 	jz	parse_pure_else
00003198: 3C 1A                                                 	cmp	al,1Ah
0000319A: 0F 85 F2 D8 FF FF                                     	jne	extra_characters_on_line
000031A0: 57                                                    	push	edi
000031A1: 0F B6 0E                                              	movzx	ecx,byte [esi]
000031A4: 46                                                    	inc	esi
000031A5: E8 23 09 00 00                                        	call	get_instruction
000031AA: 0F 82 E2 D8 FF FF                                     	jc	extra_characters_on_line
000031B0: 5F                                                    	pop	edi
000031B1: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
000031B6: 0F 85 D6 D8 FF FF                                     	jne	extra_characters_on_line
000031BC: F6 04 24 04                                           	test	byte [esp],100b
000031C0: 75 34                                                 	jnz	skip_true_condition_else
000031C2: 88 C2                                                 	mov	dl,al
000031C4: B0 01                                                 	mov	al,1
000031C6: AA                                                    	stos	byte [edi]
000031C7: 66 89 D8                                              	mov	ax,bx
000031CA: 66 AB                                                 	stos	word [edi]
000031CC: 88 D0                                                 	mov	al,dl
000031CE: AA                                                    	stos	byte [edi]
000031CF: E9 42 FF FF FF                                        	jmp	parse_if
                                                                      parse_assert:
000031D4: 57                                                    	push	edi
000031D5: E8 22 02 00 00                                        	call	parse_line_contents
000031DA: 30 C0                                                 	xor	al,al
000031DC: AA                                                    	stos	byte [edi]
000031DD: 87 34 24                                              	xchg	esi,[esp]
000031E0: 89 F7                                                 	mov	edi,esi
000031E2: E8 D2 14 00 00                                        	call	preevaluate_logical_expression
000031E7: 5E                                                    	pop	esi
000031E8: 08 C0                                                 	or	al,al
000031EA: 0F 84 20 FE FF FF                                     	jz	parse_next_line
000031F0: AA                                                    	stos	byte [edi]
000031F1: E9 1A FE FF FF                                        	jmp	parse_next_line
                                                                      skip_true_condition_else:
000031F6: 83 EF 04                                              	sub	edi,4
000031F9: 80 0C 24 01                                           	or	byte [esp],1
000031FD: EB 7D                                                 	jmp	skip_parsing_contents
                                                                      parse_pure_else:
000031FF: 0F BA 2C 24 01                                        	bts	dword [esp],1
00003204: 0F 82 81 D8 FF FF                                     	jc	unexpected_instruction
0000320A: F6 04 24 04                                           	test	byte [esp],100b
0000320E: 0F 84 FC FD FF FF                                     	jz	parse_next_line
00003214: 83 EF 04                                              	sub	edi,4
00003217: 80 0C 24 01                                           	or	byte [esp],1
0000321B: EB 00                                                 	jmp	skip_parsing
                                                                      skip_parsing:
0000321D: 3B 35 68 A1 01 00                                     	cmp	esi,[source_start]
00003223: 0F 83 F3 FD FF FF                                     	jae	source_parsed
00003229: 89 35 80 A1 01 00                                     	mov	[current_line],esi
0000322F: 83 C6 10                                              	add	esi,16
                                                                      skip_parsing_line:
00003232: 80 3E 1A                                              	cmp	byte [esi],1Ah
00003235: 75 45                                                 	jne	skip_parsing_contents
00003237: 46                                                    	inc	esi
00003238: 0F B6 0E                                              	movzx	ecx,byte [esi]
0000323B: 46                                                    	inc	esi
0000323C: 80 3C 0E 3A                                           	cmp	byte [esi+ecx],':'
00003240: 74 0D                                                 	je	skip_parsing_label
00003242: 57                                                    	push	edi
00003243: E8 85 08 00 00                                        	call	get_instruction
00003248: 5F                                                    	pop	edi
00003249: 73 0A                                                 	jnc	skip_parsing_instruction
0000324B: 01 CE                                                 	add	esi,ecx
0000324D: EB 2D                                                 	jmp	skip_parsing_contents
                                                                      skip_parsing_label:
0000324F: 8D 74 0E 01                                           	lea	esi,[esi+ecx+1]
00003253: EB DD                                                 	jmp	skip_parsing_line
                                                                      skip_parsing_instruction:
00003255: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
0000325A: 74 40                                                 	je	skip_parsing_block
0000325C: 66 81 FB D3 08                                        	cmp	bx,repeat_directive-instruction_handler
00003261: 74 39                                                 	je	skip_parsing_block
00003263: 66 81 FB A6 09                                        	cmp	bx,while_directive-instruction_handler
00003268: 74 32                                                 	je	skip_parsing_block
0000326A: 66 81 FB 48 0C                                        	cmp	bx,end_directive-instruction_handler
0000326F: 74 53                                                 	je	skip_parsing_end_directive
00003271: 66 81 FB C9 0A                                        	cmp	bx,else_directive-instruction_handler
00003276: 0F 84 DD 00 00 00                                     	je	skip_parsing_else
                                                                      skip_parsing_contents:
0000327C: AC                                                    	lods	byte [esi]
0000327D: 08 C0                                                 	or	al,al
0000327F: 74 9C                                                 	jz	skip_parsing
00003281: 3C 1A                                                 	cmp	al,1Ah
00003283: 74 0A                                                 	je	skip_parsing_symbol
00003285: 3C 3B                                                 	cmp	al,3Bh
00003287: 74 06                                                 	je	skip_parsing_symbol
00003289: 3C 22                                                 	cmp	al,22h
0000328B: 74 0A                                                 	je	skip_parsing_string
0000328D: EB ED                                                 	jmp	skip_parsing_contents
                                                                      skip_parsing_symbol:
0000328F: AC                                                    	lods	byte [esi]
00003290: 0F B6 C0                                              	movzx	eax,al
00003293: 01 C6                                                 	add	esi,eax
00003295: EB E5                                                 	jmp	skip_parsing_contents
                                                                      skip_parsing_string:
00003297: AD                                                    	lods	dword [esi]
00003298: 01 C6                                                 	add	esi,eax
0000329A: EB E0                                                 	jmp	skip_parsing_contents
                                                                      skip_parsing_block:
0000329C: 89 E0                                                 	mov	eax,esp
0000329E: 2B 05 48 A1 01 00                                     	sub	eax,[stack_limit]
000032A4: 3D 00 01 00 00                                        	cmp	eax,100h
000032A9: 0F 82 F7 D5 FF FF                                     	jb	stack_overflow
000032AF: FF 35 80 A1 01 00                                     	push	[current_line]
000032B5: 66 89 D8                                              	mov	ax,bx
000032B8: C1 E0 10                                              	shl	eax,16
000032BB: 50                                                    	push	eax
000032BC: FF 05 94 A2 01 00                                     	inc	[blocks_stack]
000032C2: EB B8                                                 	jmp	skip_parsing_contents
                                                                      skip_parsing_end_directive:
000032C4: 80 3E 1A                                              	cmp	byte [esi],1Ah
000032C7: 75 B3                                                 	jne	skip_parsing_contents
000032C9: 57                                                    	push	edi
000032CA: 46                                                    	inc	esi
000032CB: 0F B6 0E                                              	movzx	ecx,byte [esi]
000032CE: 46                                                    	inc	esi
000032CF: E8 F9 07 00 00                                        	call	get_instruction
000032D4: 5F                                                    	pop	edi
000032D5: 73 04                                                 	jnc	skip_parsing_end_block
000032D7: 01 CE                                                 	add	esi,ecx
000032D9: EB A1                                                 	jmp	skip_parsing_contents
                                                                      skip_parsing_end_block:
000032DB: AC                                                    	lods	byte [esi]
000032DC: 08 C0                                                 	or	al,al
000032DE: 0F 85 AE D7 FF FF                                     	jnz	extra_characters_on_line
000032E4: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
000032E9: 74 13                                                 	je	close_skip_parsing_block
000032EB: 66 81 FB D3 08                                        	cmp	bx,repeat_directive-instruction_handler
000032F0: 74 0C                                                 	je	close_skip_parsing_block
000032F2: 66 81 FB A6 09                                        	cmp	bx,while_directive-instruction_handler
000032F7: 74 05                                                 	je	close_skip_parsing_block
000032F9: E9 1F FF FF FF                                        	jmp	skip_parsing
                                                                      close_skip_parsing_block:
000032FE: 83 3D 94 A2 01 00 00                                  	cmp	[blocks_stack],0
00003305: 0F 84 80 D7 FF FF                                     	je	unexpected_instruction
0000330B: 66 3B 5C 24 02                                        	cmp	bx,[esp+2]
00003310: 0F 85 75 D7 FF FF                                     	jne	unexpected_instruction
00003316: FF 0D 94 A2 01 00                                     	dec	[blocks_stack]
0000331C: 58 5A                                                 	pop	eax edx
0000331E: A8 01                                                 	test	al,1
00003320: 0F 84 F7 FE FF FF                                     	jz	skip_parsing
00003326: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
0000332B: 0F 85 DF FC FF FF                                     	jne	parse_next_line
00003331: A8 10                                                 	test	al,10000b
00003333: 0F 84 D7 FC FF FF                                     	jz	parse_next_line
00003339: B0 0F                                                 	mov	al,0Fh
0000333B: AA                                                    	stos	byte [edi]
0000333C: A1 80 A1 01 00                                        	mov	eax,[current_line]
00003341: AB                                                    	stos	dword [edi]
00003342: FF 05 98 A2 01 00                                     	inc	[parsed_lines]
00003348: B8 01 48 0C 00                                        	mov	eax,1 + (end_directive-instruction_handler) shl 8
0000334D: AB                                                    	stos	dword [edi]
0000334E: B8 01 51 0A 00                                        	mov	eax,1 + (if_directive-instruction_handler) shl 8
00003353: AB                                                    	stos	dword [edi]
00003354: E9 B7 FC FF FF                                        	jmp	parse_next_line
                                                                      skip_parsing_else:
00003359: 83 3D 94 A2 01 00 00                                  	cmp	[blocks_stack],0
00003360: 0F 84 25 D7 FF FF                                     	je	unexpected_instruction
00003366: 66 81 7C 24 02 51 0A                                  	cmp	word [esp+2],if_directive-instruction_handler
0000336D: 0F 85 18 D7 FF FF                                     	jne	unexpected_instruction
00003373: AC                                                    	lods	byte [esi]
00003374: 08 C0                                                 	or	al,al
00003376: 74 5A                                                 	jz	skip_parsing_pure_else
00003378: 3C 1A                                                 	cmp	al,1Ah
0000337A: 0F 85 12 D7 FF FF                                     	jne	extra_characters_on_line
00003380: 57                                                    	push	edi
00003381: 0F B6 0E                                              	movzx	ecx,byte [esi]
00003384: 46                                                    	inc	esi
00003385: E8 43 07 00 00                                        	call	get_instruction
0000338A: 0F 82 02 D7 FF FF                                     	jc	extra_characters_on_line
00003390: 5F                                                    	pop	edi
00003391: 66 81 FB 51 0A                                        	cmp	bx,if_directive-instruction_handler
00003396: 0F 85 F6 D6 FF FF                                     	jne	extra_characters_on_line
0000339C: 8A 04 24                                              	mov	al,[esp]
0000339F: A8 01                                                 	test	al,1
000033A1: 0F 84 D5 FE FF FF                                     	jz	skip_parsing_contents
000033A7: A8 04                                                 	test	al,100b
000033A9: 0F 85 CD FE FF FF                                     	jnz	skip_parsing_contents
000033AF: A8 10                                                 	test	al,10000b
000033B1: 75 14                                                 	jnz	parse_else_if
000033B3: 30 C0                                                 	xor	al,al
000033B5: 88 04 24                                              	mov	[esp],al
000033B8: B0 0F                                                 	mov	al,0Fh
000033BA: AA                                                    	stos	byte [edi]
000033BB: A1 80 A1 01 00                                        	mov	eax,[current_line]
000033C0: AB                                                    	stos	dword [edi]
000033C1: FF 05 98 A2 01 00                                     	inc	[parsed_lines]
                                                                      parse_else_if:
000033C7: B8 01 51 0A 00                                        	mov	eax,1 + (if_directive-instruction_handler) shl 8
000033CC: AB                                                    	stos	dword [edi]
000033CD: E9 44 FD FF FF                                        	jmp	parse_if
                                                                      skip_parsing_pure_else:
000033D2: 0F BA 2C 24 01                                        	bts	dword [esp],1
000033D7: 0F 82 AE D6 FF FF                                     	jc	unexpected_instruction
000033DD: 8A 04 24                                              	mov	al,[esp]
000033E0: A8 01                                                 	test	al,1
000033E2: 0F 84 35 FE FF FF                                     	jz	skip_parsing
000033E8: A8 04                                                 	test	al,100b
000033EA: 0F 85 2D FE FF FF                                     	jnz	skip_parsing
000033F0: 24 FE                                                 	and	al,not 1
000033F2: 0C 08                                                 	or	al,1000b
000033F4: 88 04 24                                              	mov	[esp],al
000033F7: E9 14 FC FF FF                                        	jmp	parse_next_line
                                                                
                                                                parse_line_contents:
000033FC: C7 05 90 A2 01 00 00 00 00 00                         	mov	[parenthesis_stack],0
                                                                      parse_instruction_arguments:
00003406: 66 81 FB A6 64                                        	cmp	bx,prefix_instruction-instruction_handler
0000340B: 0F 84 BB 01 00 00                                     	je	allow_embedded_instruction
00003411: 66 81 FB 2D 05                                        	cmp	bx,times_directive-instruction_handler
00003416: 0F 84 E9 01 00 00                                     	je	parse_times_directive
0000341C: 66 81 FB 48 0C                                        	cmp	bx,end_directive-instruction_handler
00003421: 0F 84 A5 01 00 00                                     	je	allow_embedded_instruction
00003427: 66 81 FB D0 00                                        	cmp	bx,label_directive-instruction_handler
0000342C: 0F 84 ED 01 00 00                                     	je	parse_label_directive
00003432: 66 81 FB C1 32                                        	cmp	bx,segment_directive-instruction_handler
00003437: 0F 84 DB 01 00 00                                     	je	parse_segment_directive
0000343D: 66 81 FB 8D 01                                        	cmp	bx,load_directive-instruction_handler
00003442: 0F 84 05 02 00 00                                     	je	parse_load_directive
00003448: 66 81 FB BA 33                                        	cmp	bx,extrn_directive-instruction_handler
0000344D: 0F 84 9B 02 00 00                                     	je	parse_extrn_directive
00003453: 66 81 FB FD 32                                        	cmp	bx,public_directive-instruction_handler
00003458: 0F 84 16 02 00 00                                     	je	parse_public_directive
0000345E: 66 81 FB DB 32                                        	cmp	bx,section_directive-instruction_handler
00003463: 74 10                                                 	je	parse_formatter_argument
00003465: 66 81 FB 7E 31                                        	cmp	bx,format_directive-instruction_handler
0000346A: 74 09                                                 	je	parse_formatter_argument
0000346C: 66 81 FB E4 40                                        	cmp	bx,data_directive-instruction_handler
00003471: 74 02                                                 	je	parse_formatter_argument
00003473: EB 07                                                 	jmp	parse_argument
                                                                      parse_formatter_argument:
00003475: 80 0D D0 A2 01 00 FF                                  	or	[formatter_symbols_allowed],-1
                                                                      parse_argument:
0000347C: 8D 87 00 01 00 00                                     	lea	eax,[edi+100h]
00003482: 3B 05 C0 A1 01 00                                     	cmp	eax,[labels_list]
00003488: 0F 83 0E D4 FF FF                                     	jae	out_of_memory
0000348E: AC                                                    	lods	byte [esi]
0000348F: 3C 3A                                                 	cmp	al,':'
00003491: 0F 84 34 01 00 00                                     	je	instruction_separator
00003497: 3C 2C                                                 	cmp	al,','
00003499: 0F 84 A4 04 00 00                                     	je	separator
0000349F: 3C 3D                                                 	cmp	al,'='
000034A1: 0F 84 85 03 00 00                                     	je	expression_comparator
000034A7: 3C 7C                                                 	cmp	al,'|'
000034A9: 0F 84 94 04 00 00                                     	je	separator
000034AF: 3C 26                                                 	cmp	al,'&'
000034B1: 0F 84 8C 04 00 00                                     	je	separator
000034B7: 3C 7E                                                 	cmp	al,'~'
000034B9: 0F 84 84 04 00 00                                     	je	separator
000034BF: 3C 3E                                                 	cmp	al,'>'
000034C1: 0F 84 68 03 00 00                                     	je	greater
000034C7: 3C 3C                                                 	cmp	al,'<'
000034C9: 0F 84 71 03 00 00                                     	je	less
000034CF: 3C 29                                                 	cmp	al,')'
000034D1: 0F 84 6A 04 00 00                                     	je	close_parenthesis
000034D7: 08 C0                                                 	or	al,al
000034D9: 0F 84 9C 04 00 00                                     	jz	contents_parsed
000034DF: 3C 5B                                                 	cmp	al,'['
000034E1: 0F 84 BC 03 00 00                                     	je	address_argument
000034E7: 3C 5D                                                 	cmp	al,']'
000034E9: 0F 84 54 04 00 00                                     	je	separator
000034EF: 3C 7B                                                 	cmp	al,'{'
000034F1: 0F 84 3A 04 00 00                                     	je	open_decorator
000034F7: 3C 7D                                                 	cmp	al,'}'
000034F9: 0F 84 3A 04 00 00                                     	je	close_decorator
000034FF: 3C 23                                                 	cmp	al,'#'
00003501: 0F 84 26 04 00 00                                     	je	unallowed_character
00003507: 3C 60                                                 	cmp	al,'`'
00003509: 0F 84 1E 04 00 00                                     	je	unallowed_character
0000350F: 3C 3B                                                 	cmp	al,3Bh
00003511: 74 4E                                                 	je	foreign_argument
00003513: 80 3D D1 A2 01 00 00                                  	cmp	[decorator_symbols_allowed],0
0000351A: 74 08                                                 	je	not_a_separator
0000351C: 3C 2D                                                 	cmp	al,'-'
0000351E: 0F 84 1F 04 00 00                                     	je	separator
                                                                      not_a_separator:
00003524: 4E                                                    	dec	esi
00003525: 3C 1A                                                 	cmp	al,1Ah
00003527: 0F 85 85 02 00 00                                     	jne	expression_argument
0000352D: 57                                                    	push	edi
0000352E: BF B3 45 01 00                                        	mov	edi,directive_operators
00003533: E8 85 04 00 00                                        	call	get_operator
00003538: 08 C0                                                 	or	al,al
0000353A: 75 50                                                 	jnz	operator_argument
0000353C: 46                                                    	inc	esi
0000353D: 0F B6 0E                                              	movzx	ecx,byte [esi]
00003540: 46                                                    	inc	esi
00003541: E8 DD 04 00 00                                        	call	get_symbol
00003546: 73 24                                                 	jnc	symbol_argument
00003548: 83 F9 01                                              	cmp	ecx,1
0000354B: 0F 85 32 02 00 00                                     	jne	check_argument
00003551: 80 3E 3F                                              	cmp	byte [esi],'?'
00003554: 0F 85 29 02 00 00                                     	jne	check_argument
0000355A: 5F                                                    	pop	edi
0000355B: A4                                                    	movs	byte [edi],[esi]
0000355C: E9 E3 03 00 00                                        	jmp	argument_parsed
                                                                      foreign_argument:
00003561: 4E                                                    	dec	esi
00003562: E8 48 F5 FF FF                                        	call	skip_foreign_line
00003567: E9 0F 04 00 00                                        	jmp	contents_parsed
                                                                      symbol_argument:
0000356C: 5F                                                    	pop	edi
0000356D: 66 AB                                                 	stos	word [edi]
0000356F: 80 3E 2B                                              	cmp	byte [esi],'+'
00003572: 0F 85 CC 03 00 00                                     	jne	argument_parsed
00003578: 66 25 FF F0                                           	and	ax,0F0FFh
0000357C: 66 3D 10 60                                           	cmp	ax,6010h
00003580: 0F 85 BE 03 00 00                                     	jne	argument_parsed
00003586: A4                                                    	movs	byte [edi],[esi]
00003587: E9 B8 03 00 00                                        	jmp	argument_parsed
                                                                      operator_argument:
0000358C: 5F                                                    	pop	edi
0000358D: 3C 85                                                 	cmp	al,85h
0000358F: 0F 84 E4 01 00 00                                     	je	ptr_argument
00003595: AA                                                    	stos	byte [edi]
00003596: 3C 8C                                                 	cmp	al,8Ch
00003598: 0F 84 D1 02 00 00                                     	je	forced_expression
0000359E: 3C 81                                                 	cmp	al,81h
000035A0: 0F 84 7D 03 00 00                                     	je	forced_parenthesis
000035A6: 3C 80                                                 	cmp	al,80h
000035A8: 0F 84 90 01 00 00                                     	je	parse_at_operator
000035AE: 3C 82                                                 	cmp	al,82h
000035B0: 0F 84 7F 01 00 00                                     	je	parse_from_operator
000035B6: 3C 89                                                 	cmp	al,89h
000035B8: 0F 84 58 01 00 00                                     	je	parse_label_operator
000035BE: 3C F8                                                 	cmp	al,0F8h
000035C0: 0F 84 A9 02 00 00                                     	je	forced_expression
000035C6: E9 79 03 00 00                                        	jmp	argument_parsed
                                                                      instruction_separator:
000035CB: AA                                                    	stos	byte [edi]
                                                                      allow_embedded_instruction:
000035CC: 80 3E 1A                                              	cmp	byte [esi],1Ah
000035CF: 0F 85 A7 FE FF FF                                     	jne	parse_argument
000035D5: 57                                                    	push	edi
000035D6: 46                                                    	inc	esi
000035D7: 0F B6 0E                                              	movzx	ecx,byte [esi]
000035DA: 46                                                    	inc	esi
000035DB: E8 ED 04 00 00                                        	call	get_instruction
000035E0: 73 10                                                 	jnc	embedded_instruction
000035E2: E8 BA 04 00 00                                        	call	get_data_directive
000035E7: 73 09                                                 	jnc	embedded_instruction
000035E9: 5F                                                    	pop	edi
000035EA: 83 EE 02                                              	sub	esi,2
000035ED: E9 8A FE FF FF                                        	jmp	parse_argument
                                                                      embedded_instruction:
000035F2: 5F                                                    	pop	edi
000035F3: 88 C2                                                 	mov	dl,al
000035F5: B0 01                                                 	mov	al,1
000035F7: AA                                                    	stos	byte [edi]
000035F8: 66 89 D8                                              	mov	ax,bx
000035FB: 66 AB                                                 	stos	word [edi]
000035FD: 88 D0                                                 	mov	al,dl
000035FF: AA                                                    	stos	byte [edi]
00003600: E9 01 FE FF FF                                        	jmp	parse_instruction_arguments
                                                                      parse_times_directive:
00003605: B0 28                                                 	mov	al,'('
00003607: AA                                                    	stos	byte [edi]
00003608: E8 1F 08 00 00                                        	call	convert_expression
0000360D: B0 29                                                 	mov	al,')'
0000360F: AA                                                    	stos	byte [edi]
00003610: 80 3E 3A                                              	cmp	byte [esi],':'
00003613: 75 B7                                                 	jne	allow_embedded_instruction
00003615: A4                                                    	movs	byte [edi],[esi]
00003616: EB B4                                                 	jmp	allow_embedded_instruction
                                                                      parse_segment_directive:
00003618: 80 0D D0 A2 01 00 FF                                  	or	[formatter_symbols_allowed],-1
                                                                      parse_label_directive:
0000361F: 80 3E 1A                                              	cmp	byte [esi],1Ah
00003622: 0F 85 1C 03 00 00                                     	jne	argument_parsed
00003628: 56                                                    	push	esi
00003629: 46                                                    	inc	esi
0000362A: 0F B6 0E                                              	movzx	ecx,byte [esi]
0000362D: 46                                                    	inc	esi
0000362E: E8 5D 03 00 00                                        	call	identify_label
00003633: 5B                                                    	pop	ebx
00003634: 83 F8 0F                                              	cmp	eax,0Fh
00003637: 74 0D                                                 	je	non_label_identified
00003639: C6 07 02                                              	mov	byte [edi],2
0000363C: 47                                                    	inc	edi
0000363D: AB                                                    	stos	dword [edi]
0000363E: 30 C0                                                 	xor	al,al
00003640: AA                                                    	stos	byte [edi]
00003641: E9 FE 02 00 00                                        	jmp	argument_parsed
                                                                      non_label_identified:
00003646: 89 DE                                                 	mov	esi,ebx
00003648: E9 F7 02 00 00                                        	jmp	argument_parsed
                                                                      parse_load_directive:
0000364D: 80 3E 1A                                              	cmp	byte [esi],1Ah
00003650: 0F 85 EE 02 00 00                                     	jne	argument_parsed
00003656: 56                                                    	push	esi
00003657: 46                                                    	inc	esi
00003658: 0F B6 0E                                              	movzx	ecx,byte [esi]
0000365B: 46                                                    	inc	esi
0000365C: E8 D3 04 00 00                                        	call	get_label_id
00003661: 5B                                                    	pop	ebx
00003662: 83 F8 0F                                              	cmp	eax,0Fh
00003665: 74 DF                                                 	je	non_label_identified
00003667: C6 07 02                                              	mov	byte [edi],2
0000366A: 47                                                    	inc	edi
0000366B: AB                                                    	stos	dword [edi]
0000366C: 30 C0                                                 	xor	al,al
0000366E: AA                                                    	stos	byte [edi]
0000366F: E9 D0 02 00 00                                        	jmp	argument_parsed
                                                                      parse_public_directive:
00003674: 80 3E 1A                                              	cmp	byte [esi],1Ah
00003677: 0F 85 FF FD FF FF                                     	jne	parse_argument
0000367D: 46                                                    	inc	esi
0000367E: 56                                                    	push	esi
0000367F: 0F B6 0E                                              	movzx	ecx,byte [esi]
00003682: 46                                                    	inc	esi
00003683: 56 51                                                 	push	esi ecx
00003685: 57                                                    	push	edi
00003686: 80 0D D0 A2 01 00 FF                                  	or	[formatter_symbols_allowed],-1
0000368D: E8 91 03 00 00                                        	call	get_symbol
00003692: C6 05 D0 A2 01 00 00                                  	mov	[formatter_symbols_allowed],0
00003699: 5F                                                    	pop	edi
0000369A: 72 0B                                                 	jc	parse_public_label
0000369C: 3C 1D                                                 	cmp	al,1Dh
0000369E: 75 07                                                 	jne	parse_public_label
000036A0: 83 C4 0C                                              	add	esp,12
000036A3: 66 AB                                                 	stos	word [edi]
000036A5: EB CD                                                 	jmp	parse_public_directive
                                                                      parse_public_label:
000036A7: 59 5E                                                 	pop	ecx esi
000036A9: B0 02                                                 	mov	al,2
000036AB: AA                                                    	stos	byte [edi]
000036AC: E8 83 04 00 00                                        	call	get_label_id
000036B1: AB                                                    	stos	dword [edi]
000036B2: 66 B8 00 86                                           	mov	ax,8600h
000036B6: 66 AB                                                 	stos	word [edi]
000036B8: 5B                                                    	pop	ebx
000036B9: 53 56 57                                              	push	ebx esi edi
000036BC: BF B3 45 01 00                                        	mov	edi,directive_operators
000036C1: E8 F7 02 00 00                                        	call	get_operator
000036C6: 5F 5A 5B                                              	pop	edi edx ebx
000036C9: 3C 86                                                 	cmp	al,86h
000036CB: 0F 84 73 02 00 00                                     	je	argument_parsed
000036D1: 89 D6                                                 	mov	esi,edx
000036D3: 87 F3                                                 	xchg	esi,ebx
000036D5: 0F B6 0E                                              	movzx	ecx,byte [esi]
000036D8: 46                                                    	inc	esi
000036D9: 66 B8 28 00                                           	mov	ax,'('
000036DD: 66 AB                                                 	stos	word [edi]
000036DF: 89 C8                                                 	mov	eax,ecx
000036E1: AB                                                    	stos	dword [edi]
000036E2: F3 A4                                                 	rep	movs byte [edi],[esi]
000036E4: 30 C0                                                 	xor	al,al
000036E6: AA                                                    	stos	byte [edi]
000036E7: 87 F3                                                 	xchg	esi,ebx
000036E9: E9 56 02 00 00                                        	jmp	argument_parsed
                                                                      parse_extrn_directive:
000036EE: 80 3E 22                                              	cmp	byte [esi],22h
000036F1: 74 59                                                 	je	parse_quoted_extrn
000036F3: 80 3E 1A                                              	cmp	byte [esi],1Ah
000036F6: 0F 85 80 FD FF FF                                     	jne	parse_argument
000036FC: 56                                                    	push	esi
000036FD: 0F B6 4E 01                                           	movzx	ecx,byte [esi+1]
00003701: 83 C6 02                                              	add	esi,2
00003704: 66 B8 28 00                                           	mov	ax,'('
00003708: 66 AB                                                 	stos	word [edi]
0000370A: 89 C8                                                 	mov	eax,ecx
0000370C: AB                                                    	stos	dword [edi]
0000370D: F3 A4                                                 	rep	movs byte [edi],[esi]
0000370F: 66 B8 00 86                                           	mov	ax,8600h
00003713: 66 AB                                                 	stos	word [edi]
00003715: 5E                                                    	pop	esi
                                                                      parse_label_operator:
00003716: 80 3E 1A                                              	cmp	byte [esi],1Ah
00003719: 0F 85 25 02 00 00                                     	jne	argument_parsed
0000371F: 46                                                    	inc	esi
00003720: 0F B6 0E                                              	movzx	ecx,byte [esi]
00003723: 46                                                    	inc	esi
00003724: B0 02                                                 	mov	al,2
00003726: AA                                                    	stos	byte [edi]
00003727: E8 08 04 00 00                                        	call	get_label_id
0000372C: AB                                                    	stos	dword [edi]
0000372D: 30 C0                                                 	xor	al,al
0000372F: AA                                                    	stos	byte [edi]
00003730: E9 0F 02 00 00                                        	jmp	argument_parsed
                                                                      parse_from_operator:
00003735: 80 3E 22                                              	cmp	byte [esi],22h
00003738: 0F 84 06 02 00 00                                     	je	argument_parsed
                                                                      parse_at_operator:
0000373E: 80 3E 3A                                              	cmp	byte [esi],':'
00003741: 0F 84 FD 01 00 00                                     	je	argument_parsed
00003747: E9 3C 01 00 00                                        	jmp	forced_multipart_expression
                                                                      parse_quoted_extrn:
0000374C: 46                                                    	inc	esi
0000374D: 66 B8 28 00                                           	mov	ax,'('
00003751: 66 AB                                                 	stos	word [edi]
00003753: AD                                                    	lods	dword [esi]
00003754: 89 C1                                                 	mov	ecx,eax
00003756: AB                                                    	stos	dword [edi]
00003757: F3 A4                                                 	rep	movs byte [edi],[esi]
00003759: 30 C0                                                 	xor	al,al
0000375B: AA                                                    	stos	byte [edi]
0000375C: 56 57                                                 	push	esi edi
0000375E: BF B3 45 01 00                                        	mov	edi,directive_operators
00003763: E8 55 02 00 00                                        	call	get_operator
00003768: 89 F2                                                 	mov	edx,esi
0000376A: 5F 5E                                                 	pop	edi esi
0000376C: 3C 86                                                 	cmp	al,86h
0000376E: 0F 85 D0 01 00 00                                     	jne	argument_parsed
00003774: AA                                                    	stos	byte [edi]
00003775: 89 D6                                                 	mov	esi,edx
00003777: EB 9D                                                 	jmp	parse_label_operator
                                                                      ptr_argument:
00003779: E8 49 01 00 00                                        	call	parse_address
0000377E: E9 3F 01 00 00                                        	jmp	address_parsed
                                                                      check_argument:
00003783: 56 51                                                 	push	esi ecx
00003785: 83 EE 02                                              	sub	esi,2
00003788: BF 93 45 01 00                                        	mov	edi,single_operand_operators
0000378D: E8 2B 02 00 00                                        	call	get_operator
00003792: 59 5E                                                 	pop	ecx esi
00003794: 08 C0                                                 	or	al,al
00003796: 75 16                                                 	jnz	not_instruction
00003798: E8 30 03 00 00                                        	call	get_instruction
0000379D: 0F 83 4F FE FF FF                                     	jnc	embedded_instruction
000037A3: E8 F9 02 00 00                                        	call	get_data_directive
000037A8: 0F 83 44 FE FF FF                                     	jnc	embedded_instruction
                                                                      not_instruction:
000037AE: 5F                                                    	pop	edi
000037AF: 83 EE 02                                              	sub	esi,2
                                                                      expression_argument:
000037B2: 80 3E 22                                              	cmp	byte [esi],22h
000037B5: 75 4C                                                 	jne	not_string
000037B7: 8B 46 01                                              	mov	eax,[esi+1]
000037BA: 8D 5C 06 05                                           	lea	ebx,[esi+5+eax]
000037BE: 53 51 56 57                                           	push	ebx ecx esi edi
000037C2: E8 30 00 00 00                                        	call	parse_expression
000037C7: 58 5A 59 5B                                           	pop	eax edx ecx ebx
000037CB: 39 DE                                                 	cmp	esi,ebx
000037CD: 0F 85 89 01 00 00                                     	jne	expression_argument_parsed
000037D3: 89 C7                                                 	mov	edi,eax
000037D5: 89 D6                                                 	mov	esi,edx
                                                                      string_argument:
000037D7: 46                                                    	inc	esi
000037D8: 66 B8 28 00                                           	mov	ax,'('
000037DC: 66 AB                                                 	stos	word [edi]
000037DE: AD                                                    	lods	dword [esi]
000037DF: 89 C1                                                 	mov	ecx,eax
000037E1: AB                                                    	stos	dword [edi]
000037E2: D1 E9                                                 	shr	ecx,1
000037E4: 73 01                                                 	jnc	string_movsb_ok
000037E6: A4                                                    	movs	byte [edi],[esi]
                                                                      string_movsb_ok:
000037E7: D1 E9                                                 	shr	ecx,1
000037E9: 73 02                                                 	jnc	string_movsw_ok
000037EB: 66 A5                                                 	movs	word [edi],[esi]
                                                                      string_movsw_ok:
000037ED: F3 A5                                                 	rep	movs dword [edi],[esi]
000037EF: 30 C0                                                 	xor	al,al
000037F1: AA                                                    	stos	byte [edi]
000037F2: E9 65 01 00 00                                        	jmp	expression_argument_parsed
                                                                      parse_expression:
000037F7: B0 28                                                 	mov	al,'('
000037F9: AA                                                    	stos	byte [edi]
000037FA: E8 2D 06 00 00                                        	call	convert_expression
000037FF: B0 29                                                 	mov	al,')'
00003801: AA                                                    	stos	byte [edi]
00003802: C3                                                    	ret
                                                                      not_string:
00003803: 80 3E 28                                              	cmp	byte [esi],'('
00003806: 75 5D                                                 	jne	expression
00003808: 89 E0                                                 	mov	eax,esp
0000380A: 2B 05 48 A1 01 00                                     	sub	eax,[stack_limit]
00003810: 3D 00 01 00 00                                        	cmp	eax,100h
00003815: 0F 82 8B D0 FF FF                                     	jb	stack_overflow
0000381B: 56 57                                                 	push	esi edi
0000381D: 46                                                    	inc	esi
0000381E: B0 91                                                 	mov	al,91h
00003820: AA                                                    	stos	byte [edi]
00003821: FF 05 90 A2 01 00                                     	inc	[parenthesis_stack]
00003827: E9 50 FC FF FF                                        	jmp	parse_argument
                                                                      expression_comparator:
0000382C: AA                                                    	stos	byte [edi]
0000382D: EB 40                                                 	jmp	forced_expression
                                                                      greater:
0000382F: 80 3E 3D                                              	cmp	byte [esi],'='
00003832: 0F 85 0B 01 00 00                                     	jne	separator
00003838: 46                                                    	inc	esi
00003839: B0 F2                                                 	mov	al,0F2h
0000383B: E9 03 01 00 00                                        	jmp	separator
                                                                      less:
00003840: 80 7F FF F6                                           	cmp	byte [edi-1],0F6h
00003844: 0F 84 F9 00 00 00                                     	je	separator
0000384A: 80 3E 3E                                              	cmp	byte [esi],'>'
0000384D: 74 11                                                 	je	not_equal
0000384F: 80 3E 3D                                              	cmp	byte [esi],'='
00003852: 0F 85 EB 00 00 00                                     	jne	separator
00003858: 46                                                    	inc	esi
00003859: B0 F3                                                 	mov	al,0F3h
0000385B: E9 E3 00 00 00                                        	jmp	separator
                                                                      not_equal:
00003860: 46                                                    	inc	esi
00003861: B0 F1                                                 	mov	al,0F1h
00003863: EB C7                                                 	jmp	expression_comparator
                                                                      expression:
00003865: E8 8D FF FF FF                                        	call	parse_expression
0000386A: E9 ED 00 00 00                                        	jmp	expression_argument_parsed
                                                                      forced_expression:
0000386F: 30 C0                                                 	xor	al,al
00003871: 86 05 D0 A2 01 00                                     	xchg	al,[formatter_symbols_allowed]
00003877: 50                                                    	push	eax
00003878: E8 7A FF FF FF                                        	call	parse_expression
                                                                      forced_expression_parsed:
0000387D: 58                                                    	pop	eax
0000387E: A2 D0 A2 01 00                                        	mov	[formatter_symbols_allowed],al
00003883: E9 BC 00 00 00                                        	jmp	argument_parsed
                                                                      forced_multipart_expression:
00003888: 30 C0                                                 	xor	al,al
0000388A: 86 05 D0 A2 01 00                                     	xchg	al,[formatter_symbols_allowed]
00003890: 50                                                    	push	eax
00003891: E8 61 FF FF FF                                        	call	parse_expression
00003896: 80 3E 3A                                              	cmp	byte [esi],':'
00003899: 75 E2                                                 	jne	forced_expression_parsed
0000389B: A4                                                    	movs	byte [edi],[esi]
0000389C: E8 56 FF FF FF                                        	call	parse_expression
000038A1: EB DA                                                 	jmp	forced_expression_parsed
                                                                      address_argument:
000038A3: E8 1F 00 00 00                                        	call	parse_address
000038A8: AC                                                    	lods	byte [esi]
000038A9: 3C 5D                                                 	cmp	al,']'
000038AB: 74 15                                                 	je	address_parsed
000038AD: 3C 2C                                                 	cmp	al,','
000038AF: 74 09                                                 	je	divided_address
000038B1: 4E                                                    	dec	esi
000038B2: B0 29                                                 	mov	al,')'
000038B4: AA                                                    	stos	byte [edi]
000038B5: E9 8A 00 00 00                                        	jmp	argument_parsed
                                                                      divided_address:
000038BA: 66 B8 29 2C                                           	mov	ax,'),'
000038BE: 66 AB                                                 	stos	word [edi]
000038C0: EB A3                                                 	jmp	expression
                                                                      address_parsed:
000038C2: B0 5D                                                 	mov	al,']'
000038C4: AA                                                    	stos	byte [edi]
000038C5: EB 7D                                                 	jmp	argument_parsed
                                                                      parse_address:
000038C7: B0 5B                                                 	mov	al,'['
000038C9: AA                                                    	stos	byte [edi]
000038CA: 66 81 3E 1A 02                                        	cmp	word [esi],021Ah
000038CF: 75 36                                                 	jne	convert_address
000038D1: 56                                                    	push	esi
000038D2: 83 C6 04                                              	add	esi,4
000038D5: 8D 5E 01                                              	lea	ebx,[esi+1]
000038D8: 80 3E 3A                                              	cmp	byte [esi],':'
000038DB: 5E                                                    	pop	esi
000038DC: 75 29                                                 	jne	convert_address
000038DE: 83 C6 02                                              	add	esi,2
000038E1: B9 02 00 00 00                                        	mov	ecx,2
000038E6: 53 57                                                 	push	ebx edi
000038E8: E8 36 01 00 00                                        	call	get_symbol
000038ED: 5F 5E                                                 	pop	edi esi
000038EF: 72 13                                                 	jc	unknown_segment_prefix
000038F1: 3C 10                                                 	cmp	al,10h
000038F3: 75 0F                                                 	jne	unknown_segment_prefix
000038F5: 88 E0                                                 	mov	al,ah
000038F7: 80 E4 F0                                              	and	ah,11110000b
000038FA: 80 FC 30                                              	cmp	ah,30h
000038FD: 75 05                                                 	jne	unknown_segment_prefix
000038FF: 04 30                                                 	add	al,30h
00003901: AA                                                    	stos	byte [edi]
00003902: EB 03                                                 	jmp	convert_address
                                                                      unknown_segment_prefix:
00003904: 83 EE 05                                              	sub	esi,5
                                                                      convert_address:
00003907: 57                                                    	push	edi
00003908: BF 0C 46 01 00                                        	mov	edi,address_sizes
0000390D: E8 AB 00 00 00                                        	call	get_operator
00003912: 5F                                                    	pop	edi
00003913: 08 C0                                                 	or	al,al
00003915: 0F 84 11 05 00 00                                     	jz	convert_expression
0000391B: 04 70                                                 	add	al,70h
0000391D: AA                                                    	stos	byte [edi]
0000391E: E9 09 05 00 00                                        	jmp	convert_expression
                                                                      forced_parenthesis:
00003923: 80 3E 28                                              	cmp	byte [esi],'('
00003926: 75 1C                                                 	jne	argument_parsed
00003928: 46                                                    	inc	esi
00003929: B0 91                                                 	mov	al,91h
0000392B: EB 16                                                 	jmp	separator
                                                                      unallowed_character:
0000392D: B0 FF                                                 	mov	al,0FFh
0000392F: EB 12                                                 	jmp	separator
                                                                      open_decorator:
00003931: FE 05 D1 A2 01 00                                     	inc	[decorator_symbols_allowed]
00003937: EB 0A                                                 	jmp	separator
                                                                      close_decorator:
00003939: FE 0D D1 A2 01 00                                     	dec	[decorator_symbols_allowed]
0000393F: EB 02                                                 	jmp	separator
                                                                      close_parenthesis:
00003941: B0 92                                                 	mov	al,92h
                                                                      separator:
00003943: AA                                                    	stos	byte [edi]
                                                                      argument_parsed:
00003944: 83 3D 90 A2 01 00 00                                  	cmp	[parenthesis_stack],0
0000394B: 0F 84 2B FB FF FF                                     	je	parse_argument
00003951: FF 0D 90 A2 01 00                                     	dec	[parenthesis_stack]
00003957: 83 C4 08                                              	add	esp,8
0000395A: EB E8                                                 	jmp	argument_parsed
                                                                      expression_argument_parsed:
0000395C: 83 3D 90 A2 01 00 00                                  	cmp	[parenthesis_stack],0
00003963: 0F 84 13 FB FF FF                                     	je	parse_argument
00003969: 80 3E 29                                              	cmp	byte [esi],')'
0000396C: 75 D6                                                 	jne	argument_parsed
0000396E: FF 0D 90 A2 01 00                                     	dec	[parenthesis_stack]
00003974: 5F 5E                                                 	pop	edi esi
00003976: E9 EA FE FF FF                                        	jmp	expression
                                                                      contents_parsed:
0000397B: 83 3D 90 A2 01 00 00                                  	cmp	[parenthesis_stack],0
00003982: 74 0B                                                 	je	contents_ok
00003984: FF 0D 90 A2 01 00                                     	dec	[parenthesis_stack]
0000398A: 83 C4 08                                              	add	esp,8
0000398D: EB EC                                                 	jmp	contents_parsed
                                                                      contents_ok:
0000398F: C3                                                    	ret
                                                                
                                                                identify_label:
00003990: 80 3E 2E                                              	cmp	byte [esi],'.'
00003993: 74 22                                                 	je	local_label_name
00003995: E8 9A 01 00 00                                        	call	get_label_id
0000399A: 83 F8 10                                              	cmp	eax,10h
0000399D: 72 0B                                                 	jb	label_identified
0000399F: 09 DB                                                 	or	ebx,ebx
000039A1: 74 08                                                 	jz	anonymous_label_name
000039A3: 4B                                                    	dec	ebx
000039A4: 89 1D B4 A1 01 00                                     	mov	[current_locals_prefix],ebx
                                                                      label_identified:
000039AA: C3                                                    	ret
                                                                      anonymous_label_name:
000039AB: 80 7E FF 40                                           	cmp	byte [esi-1],'@'
000039AF: 74 05                                                 	je	anonymous_label_name_ok
000039B1: B8 0F 00 00 00                                        	mov	eax,0Fh
                                                                      anonymous_label_name_ok:
000039B6: C3                                                    	ret
                                                                      local_label_name:
000039B7: E8 78 01 00 00                                        	call	get_label_id
000039BC: C3                                                    	ret
                                                                
                                                                get_operator:
000039BD: 80 3E 1A                                              	cmp	byte [esi],1Ah
000039C0: 75 41                                                 	jne	get_simple_operator
000039C2: 89 F2                                                 	mov	edx,esi
000039C4: 55                                                    	push	ebp
000039C5: 46                                                    	inc	esi
000039C6: AC                                                    	lods	byte [esi]
000039C7: 0F B6 E8                                              	movzx	ebp,al
000039CA: 57                                                    	push	edi
000039CB: 89 E9                                                 	mov	ecx,ebp
000039CD: E8 B3 DB FF FF                                        	call	lower_case
000039D2: 5F                                                    	pop	edi
                                                                      check_operator:
000039D3: BE D3 A3 01 00                                        	mov	esi,converted
000039D8: 0F B6 0F                                              	movzx	ecx,byte [edi]
000039DB: E3 14                                                 	jecxz	no_operator
000039DD: 47                                                    	inc	edi
000039DE: 89 FB                                                 	mov	ebx,edi
000039E0: 01 CB                                                 	add	ebx,ecx
000039E2: 39 E9                                                 	cmp	ecx,ebp
000039E4: 75 06                                                 	jne	next_operator
000039E6: F3 A6                                                 	repe	cmps byte [esi],[edi]
000039E8: 74 0F                                                 	je	operator_found
000039EA: 72 05                                                 	jb	no_operator
                                                                      next_operator:
000039EC: 89 DF                                                 	mov	edi,ebx
000039EE: 47                                                    	inc	edi
000039EF: EB E2                                                 	jmp	check_operator
                                                                      no_operator:
000039F1: 89 D6                                                 	mov	esi,edx
000039F3: 89 E9                                                 	mov	ecx,ebp
000039F5: 5D                                                    	pop	ebp
                                                                      no_simple_operator:
000039F6: 30 C0                                                 	xor	al,al
000039F8: C3                                                    	ret
                                                                      operator_found:
000039F9: 8D 74 2A 02                                           	lea	esi,[edx+2+ebp]
000039FD: 89 E9                                                 	mov	ecx,ebp
000039FF: 5D                                                    	pop	ebp
00003A00: 8A 07                                                 	mov	al,[edi]
00003A02: C3                                                    	ret
                                                                      get_simple_operator:
00003A03: 8A 06                                                 	mov	al,[esi]
00003A05: 3C 22                                                 	cmp	al,22h
00003A07: 74 ED                                                 	je	no_simple_operator
                                                                      simple_operator:
00003A09: 80 3F 01                                              	cmp	byte [edi],1
00003A0C: 72 E8                                                 	jb	no_simple_operator
00003A0E: 77 05                                                 	ja	simple_next_operator
00003A10: 3A 47 01                                              	cmp	al,[edi+1]
00003A13: 74 09                                                 	je	simple_operator_found
                                                                      simple_next_operator:
00003A15: 0F B6 0F                                              	movzx	ecx,byte [edi]
00003A18: 8D 7C 0F 02                                           	lea	edi,[edi+1+ecx+1]
00003A1C: EB EB                                                 	jmp	simple_operator
                                                                      simple_operator_found:
00003A1E: 46                                                    	inc	esi
00003A1F: 8A 47 02                                              	mov	al,[edi+2]
00003A22: C3                                                    	ret
                                                                
                                                                get_symbol:
00003A23: 56                                                    	push	esi
00003A24: 89 CD                                                 	mov	ebp,ecx
00003A26: E8 5A DB FF FF                                        	call	lower_case
00003A2B: 89 E9                                                 	mov	ecx,ebp
00003A2D: 80 F9 0B                                              	cmp	cl,11
00003A30: 77 5B                                                 	ja	no_symbol
00003A32: 80 E9 01                                              	sub	cl,1
00003A35: 72 56                                                 	jc	no_symbol
00003A37: 0F B7 1C 8D 27 46 01 00                               	movzx	ebx,word [symbols+ecx*4]
00003A3F: 81 C3 27 46 01 00                                     	add	ebx,symbols
00003A45: 0F B7 14 8D 29 46 01 00                               	movzx	edx,word [symbols+ecx*4+2]
                                                                      scan_symbols:
00003A4D: 09 D2                                                 	or	edx,edx
00003A4F: 74 3C                                                 	jz	no_symbol
00003A51: 89 D0                                                 	mov	eax,edx
00003A53: D1 E8                                                 	shr	eax,1
00003A55: 8D 7D 02                                              	lea	edi,[ebp+2]
00003A58: 0F AF C7                                              	imul	eax,edi
00003A5B: 8D 3C 03                                              	lea	edi,[ebx+eax]
00003A5E: BE D3 A3 01 00                                        	mov	esi,converted
00003A63: 89 E9                                                 	mov	ecx,ebp
00003A65: F3 A6                                                 	repe	cmps byte [esi],[edi]
00003A67: 77 2D                                                 	ja	symbols_up
00003A69: 72 27                                                 	jb	symbols_down
00003A6B: 66 8B 07                                              	mov	ax,[edi]
00003A6E: 3C 18                                                 	cmp	al,18h
00003A70: 72 0D                                                 	jb	symbol_ok
00003A72: 3C 1F                                                 	cmp	al,1Fh
00003A74: 74 0E                                                 	je	decorator_symbol
00003A76: 80 3D D0 A2 01 00 00                                  	cmp	[formatter_symbols_allowed],0
00003A7D: 74 0E                                                 	je	no_symbol
                                                                      symbol_ok:
00003A7F: 5E                                                    	pop	esi
00003A80: 01 EE                                                 	add	esi,ebp
00003A82: F8                                                    	clc
00003A83: C3                                                    	ret
                                                                      decorator_symbol:
00003A84: 80 3D D1 A2 01 00 00                                  	cmp	[decorator_symbols_allowed],0
00003A8B: 75 F2                                                 	jne	symbol_ok
                                                                      no_symbol:
00003A8D: 5E                                                    	pop	esi
00003A8E: 89 E9                                                 	mov	ecx,ebp
00003A90: F9                                                    	stc
00003A91: C3                                                    	ret
                                                                      symbols_down:
00003A92: D1 EA                                                 	shr	edx,1
00003A94: EB B7                                                 	jmp	scan_symbols
                                                                      symbols_up:
00003A96: 8D 5C 0F 02                                           	lea	ebx,[edi+ecx+2]
00003A9A: D1 EA                                                 	shr	edx,1
00003A9C: 83 D2 FF                                              	adc	edx,-1
00003A9F: EB AC                                                 	jmp	scan_symbols
                                                                
                                                                get_data_directive:
00003AA1: 56                                                    	push	esi
00003AA2: 89 CD                                                 	mov	ebp,ecx
00003AA4: E8 DC DA FF FF                                        	call	lower_case
00003AA9: 89 E9                                                 	mov	ecx,ebp
00003AAB: 80 F9 04                                              	cmp	cl,4
00003AAE: 77 70                                                 	ja	no_instruction
00003AB0: 80 E9 02                                              	sub	cl,2
00003AB3: 72 6B                                                 	jc	no_instruction
00003AB5: 0F B7 1C 8D F0 9C 01 00                               	movzx	ebx,word [data_directives+ecx*4]
00003ABD: 81 C3 F0 9C 01 00                                     	add	ebx,data_directives
00003AC3: 0F B7 14 8D F2 9C 01 00                               	movzx	edx,word [data_directives+ecx*4+2]
00003ACB: EB 2A                                                 	jmp	scan_instructions
                                                                
                                                                get_instruction:
00003ACD: 56                                                    	push	esi
00003ACE: 89 CD                                                 	mov	ebp,ecx
00003AD0: E8 B0 DA FF FF                                        	call	lower_case
00003AD5: 89 E9                                                 	mov	ecx,ebp
00003AD7: 80 F9 11                                              	cmp	cl,17
00003ADA: 77 44                                                 	ja	no_instruction
00003ADC: 80 E9 02                                              	sub	cl,2
00003ADF: 72 3F                                                 	jc	no_instruction
00003AE1: 0F B7 1C 8D E4 4D 01 00                               	movzx	ebx,word [instructions+ecx*4]
00003AE9: 81 C3 E4 4D 01 00                                     	add	ebx,instructions
00003AEF: 0F B7 14 8D E6 4D 01 00                               	movzx	edx,word [instructions+ecx*4+2]
                                                                      scan_instructions:
00003AF7: 09 D2                                                 	or	edx,edx
00003AF9: 74 25                                                 	jz	no_instruction
00003AFB: 89 D0                                                 	mov	eax,edx
00003AFD: D1 E8                                                 	shr	eax,1
00003AFF: 8D 7D 03                                              	lea	edi,[ebp+3]
00003B02: 0F AF C7                                              	imul	eax,edi
00003B05: 8D 3C 03                                              	lea	edi,[ebx+eax]
00003B08: BE D3 A3 01 00                                        	mov	esi,converted
00003B0D: 89 E9                                                 	mov	ecx,ebp
00003B0F: F3 A6                                                 	repe	cmps byte [esi],[edi]
00003B11: 77 16                                                 	ja	instructions_up
00003B13: 72 10                                                 	jb	instructions_down
00003B15: 5E                                                    	pop	esi
00003B16: 01 EE                                                 	add	esi,ebp
00003B18: 8A 07                                                 	mov	al,[edi]
00003B1A: 66 8B 5F 01                                           	mov	bx,[edi+1]
00003B1E: F8                                                    	clc
00003B1F: C3                                                    	ret
                                                                      no_instruction:
00003B20: 5E                                                    	pop	esi
00003B21: 89 E9                                                 	mov	ecx,ebp
00003B23: F9                                                    	stc
00003B24: C3                                                    	ret
                                                                      instructions_down:
00003B25: D1 EA                                                 	shr	edx,1
00003B27: EB CE                                                 	jmp	scan_instructions
                                                                      instructions_up:
00003B29: 8D 5C 0F 03                                           	lea	ebx,[edi+ecx+3]
00003B2D: D1 EA                                                 	shr	edx,1
00003B2F: 83 D2 FF                                              	adc	edx,-1
00003B32: EB C3                                                 	jmp	scan_instructions
                                                                
                                                                get_label_id:
00003B34: 81 F9 00 01 00 00                                     	cmp	ecx,100h
00003B3A: 0F 83 21 CF FF FF                                     	jae	name_too_long
00003B40: 80 3E 40                                              	cmp	byte [esi],'@'
00003B43: 74 7F                                                 	je	anonymous_label
00003B45: 80 3E 2E                                              	cmp	byte [esi],'.'
00003B48: 0F 85 F3 00 00 00                                     	jne	standard_label
00003B4E: 80 7E 01 2E                                           	cmp	byte [esi+1],'.'
00003B52: 0F 84 E9 00 00 00                                     	je	standard_label
00003B58: 83 3D B4 A1 01 00 00                                  	cmp	[current_locals_prefix],0
00003B5F: 0F 84 DC 00 00 00                                     	je	standard_label
00003B65: 57                                                    	push	edi
00003B66: 8B 3D 44 A1 01 00                                     	mov	edi,[additional_memory_end]
00003B6C: 83 EF 02                                              	sub	edi,2
00003B6F: 29 CF                                                 	sub	edi,ecx
00003B71: 51 56                                                 	push	ecx esi
00003B73: 8B 35 B4 A1 01 00                                     	mov	esi,[current_locals_prefix]
00003B79: AC                                                    	lods	byte [esi]
00003B7A: 0F B6 C8                                              	movzx	ecx,al
00003B7D: 29 CF                                                 	sub	edi,ecx
00003B7F: 3B 3D 64 A1 01 00                                     	cmp	edi,[free_additional_memory]
00003B85: 0F 82 11 CD FF FF                                     	jb	out_of_memory
00003B8B: 66 C7 07 00 00                                        	mov	word [edi],0
00003B90: 83 C7 02                                              	add	edi,2
00003B93: 89 FB                                                 	mov	ebx,edi
00003B95: F3 A4                                                 	rep	movs byte [edi],[esi]
00003B97: 5E 59                                                 	pop	esi ecx
00003B99: 00 C8                                                 	add	al,cl
00003B9B: 0F 82 C0 CE FF FF                                     	jc	name_too_long
00003BA1: F3 A4                                                 	rep	movs byte [edi],[esi]
00003BA3: 5F                                                    	pop	edi
00003BA4: 53 56                                                 	push	ebx esi
00003BA6: 0F B6 C8                                              	movzx	ecx,al
00003BA9: 88 43 FF                                              	mov	byte [ebx-1],al
00003BAC: 89 DE                                                 	mov	esi,ebx
00003BAE: E8 81 FF FF FF                                        	call	get_label_id
00003BB3: 5E 5B                                                 	pop	esi ebx
00003BB5: 3B 58 18                                              	cmp	ebx,[eax+24]
00003BB8: 75 09                                                 	jne	composed_label_id_ok
00003BBA: 8D 53 FE                                              	lea	edx,[ebx-2]
00003BBD: 89 15 44 A1 01 00                                     	mov	[additional_memory_end],edx
                                                                      composed_label_id_ok:
00003BC3: C3                                                    	ret
                                                                      anonymous_label:
00003BC4: 83 F9 02                                              	cmp	ecx,2
00003BC7: 75 78                                                 	jne	standard_label
00003BC9: 8A 46 01                                              	mov	al,[esi+1]
00003BCC: BB D3 A2 01 00                                        	mov	ebx,characters
00003BD1: D7                                                    	xlat	byte [ebx]
00003BD2: 3C 40                                                 	cmp	al,'@'
00003BD4: 74 49                                                 	je	new_anonymous
00003BD6: 3C 62                                                 	cmp	al,'b'
00003BD8: 74 2B                                                 	je	anonymous_back
00003BDA: 3C 72                                                 	cmp	al,'r'
00003BDC: 74 27                                                 	je	anonymous_back
00003BDE: 3C 66                                                 	cmp	al,'f'
00003BE0: 75 5F                                                 	jne	standard_label
00003BE2: 83 C6 02                                              	add	esi,2
00003BE5: A1 BC A1 01 00                                        	mov	eax,[anonymous_forward]
00003BEA: 09 C0                                                 	or	eax,eax
00003BEC: 75 14                                                 	jnz	anonymous_ok
00003BEE: A1 80 A1 01 00                                        	mov	eax,[current_line]
00003BF3: A3 E8 A1 01 00                                        	mov	[error_line],eax
00003BF8: E8 14 02 00 00                                        	call	allocate_label
00003BFD: A3 BC A1 01 00                                        	mov	[anonymous_forward],eax
                                                                      anonymous_ok:
00003C02: 31 DB                                                 	xor	ebx,ebx
00003C04: C3                                                    	ret
                                                                      anonymous_back:
00003C05: A1 B8 A1 01 00                                        	mov	eax,[anonymous_reverse]
00003C0A: 83 C6 02                                              	add	esi,2
00003C0D: 09 C0                                                 	or	eax,eax
00003C0F: 74 02                                                 	jz	bogus_anonymous
00003C11: EB EF                                                 	jmp	anonymous_ok
                                                                      bogus_anonymous:
00003C13: E8 F9 01 00 00                                        	call	allocate_label
00003C18: A3 B8 A1 01 00                                        	mov	[anonymous_reverse],eax
00003C1D: EB E3                                                 	jmp	anonymous_ok
                                                                      new_anonymous:
00003C1F: 83 C6 02                                              	add	esi,2
00003C22: A1 BC A1 01 00                                        	mov	eax,[anonymous_forward]
00003C27: 09 C0                                                 	or	eax,eax
00003C29: 75 05                                                 	jnz	new_anonymous_ok
00003C2B: E8 E1 01 00 00                                        	call	allocate_label
                                                                      new_anonymous_ok:
00003C30: A3 B8 A1 01 00                                        	mov	[anonymous_reverse],eax
00003C35: C7 05 BC A1 01 00 00 00 00 00                         	mov	[anonymous_forward],0
00003C3F: EB C1                                                 	jmp	anonymous_ok
                                                                      standard_label:
00003C41: 80 3E 25                                              	cmp	byte [esi],'%'
00003C44: 74 61                                                 	je	get_predefined_id
00003C46: 80 3E 24                                              	cmp	byte [esi],'$'
00003C49: 74 11                                                 	je	current_address_label
00003C4B: 80 3E 3F                                              	cmp	byte [esi],'?'
00003C4E: 75 70                                                 	jne	find_label
00003C50: 83 F9 01                                              	cmp	ecx,1
00003C53: 75 6B                                                 	jne	find_label
00003C55: 46                                                    	inc	esi
00003C56: B8 0F 00 00 00                                        	mov	eax,0Fh
00003C5B: C3                                                    	ret
                                                                      current_address_label:
00003C5C: 83 F9 03                                              	cmp	ecx,3
00003C5F: 74 35                                                 	je	current_address_label_3_characters
00003C61: 77 5D                                                 	ja	find_label
00003C63: 46                                                    	inc	esi
00003C64: 83 F9 01                                              	cmp	ecx,1
00003C67: 76 12                                                 	jbe	get_current_offset_id
00003C69: 46                                                    	inc	esi
00003C6A: 80 7E FF 24                                           	cmp	byte [esi-1],'$'
00003C6E: 74 1A                                                 	je	get_org_origin_id
00003C70: 80 7E FF 25                                           	cmp	byte [esi-1],'%'
00003C74: 74 1A                                                 	je	get_file_offset_id
00003C76: 83 EE 02                                              	sub	esi,2
00003C79: EB 45                                                 	jmp	find_label
                                                                      get_current_offset_id:
00003C7B: 31 C0                                                 	xor	eax,eax
00003C7D: C3                                                    	ret
                                                                      get_counter_id:
00003C7E: B8 01 00 00 00                                        	mov	eax,1
00003C83: C3                                                    	ret
                                                                      get_timestamp_id:
00003C84: B8 02 00 00 00                                        	mov	eax,2
00003C89: C3                                                    	ret
                                                                      get_org_origin_id:
00003C8A: B8 03 00 00 00                                        	mov	eax,3
00003C8F: C3                                                    	ret
                                                                      get_file_offset_id:
00003C90: B8 04 00 00 00                                        	mov	eax,4
00003C95: C3                                                    	ret
                                                                      current_address_label_3_characters:
00003C96: 66 81 7E 01 25 25                                     	cmp	word [esi+1],'%%'
00003C9C: 75 22                                                 	jne	find_label
00003C9E: 83 C6 03                                              	add	esi,3
                                                                      get_actual_file_offset_id:
00003CA1: B8 05 00 00 00                                        	mov	eax,5
00003CA6: C3                                                    	ret
                                                                      get_predefined_id:
00003CA7: 83 F9 02                                              	cmp	ecx,2
00003CAA: 77 14                                                 	ja	find_label
00003CAC: 46                                                    	inc	esi
00003CAD: 80 F9 01                                              	cmp	cl,1
00003CB0: 74 CC                                                 	je	get_counter_id
00003CB2: AC                                                    	lods	byte [esi]
00003CB3: BB D3 A2 01 00                                        	mov	ebx,characters
00003CB8: D7                                                    	xlat	[ebx]
00003CB9: 3C 74                                                 	cmp	al,'t'
00003CBB: 74 C7                                                 	je	get_timestamp_id
00003CBD: 83 EE 02                                              	sub	esi,2
                                                                      find_label:
00003CC0: 31 DB                                                 	xor	ebx,ebx
00003CC2: B8 C5 9D 1C 81                                        	mov	eax,2166136261
00003CC7: BD 93 01 00 01                                        	mov	ebp,16777619
                                                                      hash_label:
00003CCC: 32 04 1E                                              	xor	al,[esi+ebx]
00003CCF: F7 E5                                                 	mul	ebp
00003CD1: FE C3                                                 	inc	bl
00003CD3: 38 CB                                                 	cmp	bl,cl
00003CD5: 72 F5                                                 	jb	hash_label
00003CD7: 89 C5                                                 	mov	ebp,eax
00003CD9: C1 E0 08                                              	shl	eax,8
00003CDC: 81 E5 00 00 00 FF                                     	and	ebp,0FFh shl 24
00003CE2: 31 C5                                                 	xor	ebp,eax
00003CE4: 09 DD                                                 	or	ebp,ebx
00003CE6: 89 2D C4 A1 01 00                                     	mov	[label_hash],ebp
00003CEC: 57 56                                                 	push	edi esi
00003CEE: 51                                                    	push	ecx
00003CEF: B9 20 00 00 00                                        	mov	ecx,32
00003CF4: BB CC A1 01 00                                        	mov	ebx,hash_tree
                                                                      follow_tree:
00003CF9: 8B 13                                                 	mov	edx,[ebx]
00003CFB: 09 D2                                                 	or	edx,edx
00003CFD: 74 40                                                 	jz	extend_tree
00003CFF: 31 C0                                                 	xor	eax,eax
00003D01: D1 E5                                                 	shl	ebp,1
00003D03: 83 D0 00                                              	adc	eax,0
00003D06: 8D 1C 82                                              	lea	ebx,[edx+eax*4]
00003D09: 49                                                    	dec	ecx
00003D0A: 75 ED                                                 	jnz	follow_tree
00003D0C: 89 1D C8 A1 01 00                                     	mov	[label_leaf],ebx
00003D12: 5A                                                    	pop	edx
00003D13: 8B 03                                                 	mov	eax,[ebx]
00003D15: 09 C0                                                 	or	eax,eax
00003D17: 74 5B                                                 	jz	add_label
00003D19: 89 F3                                                 	mov	ebx,esi
00003D1B: 8B 2D C4 A1 01 00                                     	mov	ebp,[label_hash]
                                                                      compare_labels:
00003D21: 89 DE                                                 	mov	esi,ebx
00003D23: 89 D1                                                 	mov	ecx,edx
00003D25: 8B 78 04                                              	mov	edi,[eax+4]
00003D28: 8B 7F 18                                              	mov	edi,[edi+24]
00003D2B: F3 A6                                                 	repe	cmps byte [esi],[edi]
00003D2D: 74 08                                                 	je	label_found
00003D2F: 8B 00                                                 	mov	eax,[eax]
00003D31: 09 C0                                                 	or	eax,eax
00003D33: 75 EC                                                 	jnz	compare_labels
00003D35: EB 3D                                                 	jmp	add_label
                                                                      label_found:
00003D37: 83 C4 04                                              	add	esp,4
00003D3A: 5F                                                    	pop	edi
00003D3B: 8B 40 04                                              	mov	eax,[eax+4]
00003D3E: C3                                                    	ret
                                                                      extend_tree:
00003D3F: 8B 15 64 A1 01 00                                     	mov	edx,[free_additional_memory]
00003D45: 8D 42 08                                              	lea	eax,[edx+8]
00003D48: 3B 05 44 A1 01 00                                     	cmp	eax,[additional_memory_end]
00003D4E: 0F 87 48 CB FF FF                                     	ja	out_of_memory
00003D54: A3 64 A1 01 00                                        	mov	[free_additional_memory],eax
00003D59: 31 C0                                                 	xor	eax,eax
00003D5B: 89 02                                                 	mov	[edx],eax
00003D5D: 89 42 04                                              	mov	[edx+4],eax
00003D60: D1 E5                                                 	shl	ebp,1
00003D62: 83 D0 00                                              	adc	eax,0
00003D65: 89 13                                                 	mov	[ebx],edx
00003D67: 8D 1C 82                                              	lea	ebx,[edx+eax*4]
00003D6A: 49                                                    	dec	ecx
00003D6B: 75 D2                                                 	jnz	extend_tree
00003D6D: 89 1D C8 A1 01 00                                     	mov	[label_leaf],ebx
00003D73: 5A                                                    	pop	edx
                                                                      add_label:
00003D74: 89 D1                                                 	mov	ecx,edx
00003D76: 5E                                                    	pop	esi
00003D77: 80 7E FE 00                                           	cmp	byte [esi-2],0
00003D7B: 74 5E                                                 	je	label_name_ok
00003D7D: 8A 06                                                 	mov	al,[esi]
00003D7F: 3C 30                                                 	cmp	al,30h
00003D81: 72 04                                                 	jb	name_first_char_ok
00003D83: 3C 39                                                 	cmp	al,39h
00003D85: 76 04                                                 	jbe	numeric_name
                                                                      name_first_char_ok:
00003D87: 3C 24                                                 	cmp	al,'$'
00003D89: 75 09                                                 	jne	check_for_reserved_word
                                                                      numeric_name:
00003D8B: 01 CE                                                 	add	esi,ecx
                                                                      reserved_word:
00003D8D: B8 0F 00 00 00                                        	mov	eax,0Fh
00003D92: 5F                                                    	pop	edi
00003D93: C3                                                    	ret
                                                                      check_for_reserved_word:
00003D94: E8 34 FD FF FF                                        	call	get_instruction
00003D99: 73 F2                                                 	jnc	reserved_word
00003D9B: E8 01 FD FF FF                                        	call	get_data_directive
00003DA0: 73 EB                                                 	jnc	reserved_word
00003DA2: E8 7C FC FF FF                                        	call	get_symbol
00003DA7: 73 E4                                                 	jnc	reserved_word
00003DA9: 83 EE 02                                              	sub	esi,2
00003DAC: BF 69 45 01 00                                        	mov	edi,operators
00003DB1: E8 07 FC FF FF                                        	call	get_operator
00003DB6: 08 C0                                                 	or	al,al
00003DB8: 75 D3                                                 	jnz	reserved_word
00003DBA: BF 93 45 01 00                                        	mov	edi,single_operand_operators
00003DBF: E8 F9 FB FF FF                                        	call	get_operator
00003DC4: 08 C0                                                 	or	al,al
00003DC6: 75 C5                                                 	jnz	reserved_word
00003DC8: BF B3 45 01 00                                        	mov	edi,directive_operators
00003DCD: E8 EB FB FF FF                                        	call	get_operator
00003DD2: 08 C0                                                 	or	al,al
00003DD4: 75 B7                                                 	jnz	reserved_word
00003DD6: 46                                                    	inc	esi
00003DD7: 0F B6 0E                                              	movzx	ecx,byte [esi]
00003DDA: 46                                                    	inc	esi
                                                                      label_name_ok:
00003DDB: 8B 15 64 A1 01 00                                     	mov	edx,[free_additional_memory]
00003DE1: 8D 42 08                                              	lea	eax,[edx+8]
00003DE4: 3B 05 44 A1 01 00                                     	cmp	eax,[additional_memory_end]
00003DEA: 0F 87 AC CA FF FF                                     	ja	out_of_memory
00003DF0: A3 64 A1 01 00                                        	mov	[free_additional_memory],eax
00003DF5: 89 F3                                                 	mov	ebx,esi
00003DF7: 01 CE                                                 	add	esi,ecx
00003DF9: A1 C8 A1 01 00                                        	mov	eax,[label_leaf]
00003DFE: 8B 38                                                 	mov	edi,[eax]
00003E00: 89 3A                                                 	mov	[edx],edi
00003E02: 89 10                                                 	mov	[eax],edx
00003E04: E8 08 00 00 00                                        	call	allocate_label
00003E09: 89 42 04                                              	mov	[edx+4],eax
00003E0C: 89 58 18                                              	mov	[eax+24],ebx
00003E0F: 5F                                                    	pop	edi
00003E10: C3                                                    	ret
                                                                      allocate_label:
00003E11: A1 C0 A1 01 00                                        	mov	eax,[labels_list]
00003E16: B9 08 00 00 00                                        	mov	ecx,LABEL_STRUCTURE_SIZE shr 2
                                                                      initialize_label:
00003E1B: 83 E8 04                                              	sub	eax,4
00003E1E: C7 00 00 00 00 00                                     	mov	dword [eax],0
00003E24: E2 F5                                                 	loop	initialize_label
00003E26: A3 C0 A1 01 00                                        	mov	[labels_list],eax
00003E2B: C3                                                    	ret
                                                                
                                                                LABEL_STRUCTURE_SIZE = 32
                                                                
                                                                include '..\exprpars.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                convert_expression:
00003E2C: 55                                                    	push	ebp
00003E2D: E8 9A 04 00 00                                        	call	get_fp_value
00003E32: 73 73                                                 	jnc	fp_expression
00003E34: 89 25 FC A1 01 00                                     	mov	[current_offset],esp
                                                                      expression_loop:
00003E3A: 57                                                    	push	edi
00003E3B: BF 93 45 01 00                                        	mov	edi,single_operand_operators
00003E40: E8 78 FB FF FF                                        	call	get_operator
00003E45: 5F                                                    	pop	edi
00003E46: 08 C0                                                 	or	al,al
00003E48: 74 07                                                 	jz	expression_element
00003E4A: 3C 82                                                 	cmp	al,82h
00003E4C: 74 EC                                                 	je	expression_loop
00003E4E: 50                                                    	push	eax
00003E4F: EB E9                                                 	jmp	expression_loop
                                                                      expression_element:
00003E51: 8A 06                                                 	mov	al,[esi]
00003E53: 3C 1A                                                 	cmp	al,1Ah
00003E55: 74 0D                                                 	je	expression_number
00003E57: 3C 22                                                 	cmp	al,22h
00003E59: 74 09                                                 	je	expression_number
00003E5B: 3C 28                                                 	cmp	al,'('
00003E5D: 74 05                                                 	je	expression_number
00003E5F: B0 21                                                 	mov	al,'!'
00003E61: AA                                                    	stos	byte [edi]
00003E62: EB 05                                                 	jmp	expression_operator
                                                                      expression_number:
00003E64: E8 55 00 00 00                                        	call	convert_number
                                                                      expression_operator:
00003E69: 57                                                    	push	edi
00003E6A: BF 69 45 01 00                                        	mov	edi,operators
00003E6F: E8 49 FB FF FF                                        	call	get_operator
00003E74: 5F                                                    	pop	edi
00003E75: 08 C0                                                 	or	al,al
00003E77: 74 20                                                 	jz	expression_end
                                                                      operators_loop:
00003E79: 3B 25 FC A1 01 00                                     	cmp	esp,[current_offset]
00003E7F: 74 15                                                 	je	push_operator
00003E81: 88 C3                                                 	mov	bl,al
00003E83: 80 E3 F0                                              	and	bl,0F0h
00003E86: 8A 3C 24                                              	mov	bh,byte [esp]
00003E89: 80 E7 F0                                              	and	bh,0F0h
00003E8C: 38 FB                                                 	cmp	bl,bh
00003E8E: 77 06                                                 	ja	push_operator
00003E90: 5B                                                    	pop	ebx
00003E91: 88 1F                                                 	mov	byte [edi],bl
00003E93: 47                                                    	inc	edi
00003E94: EB E3                                                 	jmp	operators_loop
                                                                      push_operator:
00003E96: 50                                                    	push	eax
00003E97: EB A1                                                 	jmp	expression_loop
                                                                      expression_end:
00003E99: 3B 25 FC A1 01 00                                     	cmp	esp,[current_offset]
00003E9F: 74 04                                                 	je	expression_converted
00003EA1: 58                                                    	pop	eax
00003EA2: AA                                                    	stos	byte [edi]
00003EA3: EB F4                                                 	jmp	expression_end
                                                                      expression_converted:
00003EA5: 5D                                                    	pop	ebp
00003EA6: C3                                                    	ret
                                                                      fp_expression:
00003EA7: B0 2E                                                 	mov	al,'.'
00003EA9: AA                                                    	stos	byte [edi]
00003EAA: A1 08 A2 01 00                                        	mov	eax,[fp_value]
00003EAF: AB                                                    	stos	dword [edi]
00003EB0: A1 0C A2 01 00                                        	mov	eax,[fp_value+4]
00003EB5: AB                                                    	stos	dword [edi]
00003EB6: A1 10 A2 01 00                                        	mov	eax,[fp_value+8]
00003EBB: AB                                                    	stos	dword [edi]
00003EBC: 5D                                                    	pop	ebp
00003EBD: C3                                                    	ret
                                                                
                                                                convert_number:
00003EBE: 8D 47 20                                              	lea	eax,[edi+20h]
00003EC1: 8B 15 3C A1 01 00                                     	mov	edx,[memory_end]
00003EC7: 83 3D 68 A1 01 00 00                                  	cmp	[source_start],0
00003ECE: 74 06                                                 	je	check_memory_for_number
00003ED0: 8B 15 C0 A1 01 00                                     	mov	edx,[labels_list]
                                                                      check_memory_for_number:
00003ED6: 39 D0                                                 	cmp	eax,edx
00003ED8: 0F 83 BE C9 FF FF                                     	jae	out_of_memory
00003EDE: 89 E0                                                 	mov	eax,esp
00003EE0: 2B 05 48 A1 01 00                                     	sub	eax,[stack_limit]
00003EE6: 3D 00 01 00 00                                        	cmp	eax,100h
00003EEB: 0F 82 B5 C9 FF FF                                     	jb	stack_overflow
00003EF1: 80 3E 28                                              	cmp	byte [esi],'('
00003EF4: 74 3F                                                 	je	expression_value
00003EF6: 47                                                    	inc	edi
00003EF7: E8 31 01 00 00                                        	call	get_number
00003EFC: 72 53                                                 	jc	symbol_value
00003EFE: 09 ED                                                 	or	ebp,ebp
00003F00: 74 05                                                 	jz	valid_number
00003F02: C6 47 FF 0F                                           	mov	byte [edi-1],0Fh
00003F06: C3                                                    	ret
                                                                      valid_number:
00003F07: 83 7F 04 00                                           	cmp	dword [edi+4],0
00003F0B: 75 13                                                 	jne	qword_number
00003F0D: 66 83 7F 02 00                                        	cmp	word [edi+2],0
00003F12: 75 14                                                 	jne	dword_number
00003F14: 80 7F 01 00                                           	cmp	byte [edi+1],0
00003F18: 75 14                                                 	jne	word_number
                                                                      byte_number:
00003F1A: C6 47 FF 01                                           	mov	byte [edi-1],1
00003F1E: 47                                                    	inc	edi
00003F1F: C3                                                    	ret
                                                                      qword_number:
00003F20: C6 47 FF 08                                           	mov	byte [edi-1],8
00003F24: 83 C7 08                                              	add	edi,8
00003F27: C3                                                    	ret
                                                                      dword_number:
00003F28: C6 47 FF 04                                           	mov	byte [edi-1],4
00003F2C: AF                                                    	scas	dword [edi]
00003F2D: C3                                                    	ret
                                                                      word_number:
00003F2E: C6 47 FF 02                                           	mov	byte [edi-1],2
00003F32: 66 AF                                                 	scas	word [edi]
00003F34: C3                                                    	ret
                                                                      expression_value:
00003F35: 46                                                    	inc	esi
00003F36: FF 35 FC A1 01 00                                     	push	[current_offset]
00003F3C: E8 EB FE FF FF                                        	call	convert_expression
00003F41: 8F 05 FC A1 01 00                                     	pop	[current_offset]
00003F47: AC                                                    	lods	byte [esi]
00003F48: 3C 29                                                 	cmp	al,')'
00003F4A: 74 04                                                 	je	subexpression_closed
00003F4C: 4E                                                    	dec	esi
00003F4D: B0 21                                                 	mov	al,'!'
00003F4F: AA                                                    	stosb
                                                                      subexpression_closed:
00003F50: C3                                                    	ret
                                                                      symbol_value:
00003F51: A1 68 A1 01 00                                        	mov	eax,[source_start]
00003F56: 85 C0                                                 	test	eax,eax
00003F58: 0F 84 82 00 00 00                                     	jz	preprocessor_value
00003F5E: 83 F8 FF                                              	cmp	eax,-1
00003F61: 0F 84 45 CA FF FF                                     	je	invalid_value
00003F67: 57 56                                                 	push	edi esi
00003F69: 66 AD                                                 	lods	word [esi]
00003F6B: 3C 1A                                                 	cmp	al,1Ah
00003F6D: 75 3A                                                 	jne	no_address_register
00003F6F: 0F B6 CC                                              	movzx	ecx,ah
00003F72: E8 AC FA FF FF                                        	call	get_symbol
00003F77: 72 30                                                 	jc	no_address_register
00003F79: 3C 10                                                 	cmp	al,10h
00003F7B: 75 2C                                                 	jne	no_address_register
00003F7D: 88 E0                                                 	mov	al,ah
00003F7F: C0 EC 04                                              	shr	ah,4
00003F82: 80 FC 04                                              	cmp	ah,4
00003F85: 74 51                                                 	je	register_value
00003F87: 80 E4 FE                                              	and	ah,not 1
00003F8A: 80 FC 08                                              	cmp	ah,8
00003F8D: 74 49                                                 	je	register_value
00003F8F: 80 FC 0C                                              	cmp	ah,0Ch
00003F92: 73 44                                                 	jae	register_value
00003F94: 80 FC 06                                              	cmp	ah,6
00003F97: 74 3F                                                 	je	register_value
00003F99: 3C 23                                                 	cmp	al,23h
00003F9B: 74 3B                                                 	je	register_value
00003F9D: 3C 25                                                 	cmp	al,25h
00003F9F: 74 37                                                 	je	register_value
00003FA1: 3C 26                                                 	cmp	al,26h
00003FA3: 74 33                                                 	je	register_value
00003FA5: 3C 27                                                 	cmp	al,27h
00003FA7: 74 2F                                                 	je	register_value
                                                                      no_address_register:
00003FA9: 5E                                                    	pop	esi
00003FAA: BF B3 45 01 00                                        	mov	edi,directive_operators
00003FAF: E8 09 FA FF FF                                        	call	get_operator
00003FB4: 5F                                                    	pop	edi
00003FB5: 08 C0                                                 	or	al,al
00003FB7: 75 18                                                 	jnz	broken_value
00003FB9: AC                                                    	lods	byte [esi]
00003FBA: 3C 1A                                                 	cmp	al,1Ah
00003FBC: 0F 85 EA C9 FF FF                                     	jne	invalid_value
00003FC2: AC                                                    	lods	byte [esi]
00003FC3: 0F B6 C8                                              	movzx	ecx,al
00003FC6: E8 69 FB FF FF                                        	call	get_label_id
                                                                      store_label_value:
00003FCB: C6 47 FF 11                                           	mov	byte [edi-1],11h
00003FCF: AB                                                    	stos	dword [edi]
00003FD0: C3                                                    	ret
                                                                      broken_value:
00003FD1: B8 0F 00 00 00                                        	mov	eax,0Fh
00003FD6: EB F3                                                 	jmp	store_label_value
                                                                      register_value:
00003FD8: 5A 5F                                                 	pop	edx edi
00003FDA: C6 47 FF 10                                           	mov	byte [edi-1],10h
00003FDE: AA                                                    	stos	byte [edi]
00003FDF: C3                                                    	ret
                                                                      preprocessor_value:
00003FE0: 4F                                                    	dec	edi
00003FE1: AC                                                    	lods	byte [esi]
00003FE2: 3C 1A                                                 	cmp	al,1Ah
00003FE4: 0F 85 C2 C9 FF FF                                     	jne	invalid_value
00003FEA: AC                                                    	lods	byte [esi]
00003FEB: 88 C1                                                 	mov	cl,al
00003FED: B5 02                                                 	mov	ch,10b
00003FEF: E8 6A D8 FF FF                                        	call	get_preprocessor_symbol
00003FF4: 0F 82 B2 C9 FF FF                                     	jc	invalid_value
00003FFA: 85 D2                                                 	test	edx,edx
00003FFC: 74 17                                                 	jz	special_preprocessor_value
00003FFE: 56                                                    	push	esi
00003FFF: 8B 72 08                                              	mov	esi,[edx+8]
00004002: FF 35 FC A1 01 00                                     	push	[current_offset]
00004008: E8 1F FE FF FF                                        	call	convert_expression
0000400D: 8F 05 FC A1 01 00                                     	pop	[current_offset]
00004013: 5E                                                    	pop	esi
00004014: C3                                                    	ret
                                                                      special_preprocessor_value:
00004015: 3D 11 1F 00 00                                        	cmp	eax,preprocessed_line_value
0000401A: 0F 85 8C C9 FF FF                                     	jne	invalid_value
00004020: E8 15 DF FF FF                                        	call	get_current_line_from_file
00004025: B0 04                                                 	mov	al,4
00004027: AA                                                    	stos	byte [edi]
00004028: 8B 43 04                                              	mov	eax,[ebx+4]
0000402B: AB                                                    	stos	dword [edi]
0000402C: C3                                                    	ret
                                                                
                                                                get_number:
0000402D: 31 ED                                                 	xor	ebp,ebp
0000402F: AC                                                    	lods	byte [esi]
00004030: 3C 22                                                 	cmp	al,22h
00004032: 0F 84 55 02 00 00                                     	je	get_text_number
00004038: 3C 1A                                                 	cmp	al,1Ah
0000403A: 0F 85 15 01 00 00                                     	jne	not_number
00004040: AC                                                    	lods	byte [esi]
00004041: 0F B6 C8                                              	movzx	ecx,al
00004044: 89 35 F8 A1 01 00                                     	mov	[number_start],esi
0000404A: 8A 06                                                 	mov	al,[esi]
0000404C: 3C 24                                                 	cmp	al,'$'
0000404E: 74 0A                                                 	je	number_begin
00004050: 2C 30                                                 	sub	al,30h
00004052: 3C 09                                                 	cmp	al,9
00004054: 0F 87 F4 00 00 00                                     	ja	invalid_number
                                                                      number_begin:
0000405A: 89 F3                                                 	mov	ebx,esi
0000405C: 01 CE                                                 	add	esi,ecx
0000405E: 56                                                    	push	esi
0000405F: 4E                                                    	dec	esi
00004060: C7 07 00 00 00 00                                     	mov	dword [edi],0
00004066: C7 47 04 00 00 00 00                                  	mov	dword [edi+4],0
0000406D: 80 3B 24                                              	cmp	byte [ebx],'$'
00004070: 0F 84 2E 01 00 00                                     	je	pascal_hex_number
00004076: 66 81 3B 30 78                                        	cmp	word [ebx],'0x'
0000407B: 0F 84 28 01 00 00                                     	je	get_hex_number
00004081: 8A 06                                                 	mov	al,[esi]
00004083: 4E                                                    	dec	esi
00004084: 3C 68                                                 	cmp	al,'h'
00004086: 0F 84 1D 01 00 00                                     	je	get_hex_number
0000408C: 3C 62                                                 	cmp	al,'b'
0000408E: 0F 84 C4 00 00 00                                     	je	get_bin_number
00004094: 3C 64                                                 	cmp	al,'d'
00004096: 74 35                                                 	je	get_dec_number
00004098: 3C 6F                                                 	cmp	al,'o'
0000409A: 0F 84 7E 01 00 00                                     	je	get_oct_number
000040A0: 3C 71                                                 	cmp	al,'q'
000040A2: 0F 84 76 01 00 00                                     	je	get_oct_number
000040A8: 3C 48                                                 	cmp	al,'H'
000040AA: 0F 84 F9 00 00 00                                     	je	get_hex_number
000040B0: 3C 42                                                 	cmp	al,'B'
000040B2: 0F 84 A0 00 00 00                                     	je	get_bin_number
000040B8: 3C 44                                                 	cmp	al,'D'
000040BA: 74 11                                                 	je	get_dec_number
000040BC: 3C 4F                                                 	cmp	al,'O'
000040BE: 0F 84 5A 01 00 00                                     	je	get_oct_number
000040C4: 3C 51                                                 	cmp	al,'Q'
000040C6: 0F 84 52 01 00 00                                     	je	get_oct_number
000040CC: 46                                                    	inc	esi
                                                                      get_dec_number:
000040CD: 89 F3                                                 	mov	ebx,esi
000040CF: 8B 35 F8 A1 01 00                                     	mov	esi,[number_start]
                                                                      get_dec_digit:
000040D5: 39 DE                                                 	cmp	esi,ebx
000040D7: 0F 87 AD 01 00 00                                     	ja	number_ok
000040DD: 80 3E 27                                              	cmp	byte [esi],27h
000040E0: 74 49                                                 	je	next_dec_digit
000040E2: 80 3E 5F                                              	cmp	byte [esi],'_'
000040E5: 74 44                                                 	je	next_dec_digit
000040E7: 31 D2                                                 	xor	edx,edx
000040E9: 8B 07                                                 	mov	eax,[edi]
000040EB: 0F A4 C2 02                                           	shld	edx,eax,2
000040EF: C1 E0 02                                              	shl	eax,2
000040F2: 03 07                                                 	add	eax,[edi]
000040F4: 83 D2 00                                              	adc	edx,0
000040F7: 01 C0                                                 	add	eax,eax
000040F9: 11 D2                                                 	adc	edx,edx
000040FB: 89 07                                                 	mov	[edi],eax
000040FD: 8B 47 04                                              	mov	eax,[edi+4]
00004100: 01 C0                                                 	add	eax,eax
00004102: 72 2A                                                 	jc	dec_out_of_range
00004104: 01 C0                                                 	add	eax,eax
00004106: 72 26                                                 	jc	dec_out_of_range
00004108: 03 47 04                                              	add	eax,[edi+4]
0000410B: 72 21                                                 	jc	dec_out_of_range
0000410D: 01 C0                                                 	add	eax,eax
0000410F: 72 1D                                                 	jc	dec_out_of_range
00004111: 01 D0                                                 	add	eax,edx
00004113: 72 19                                                 	jc	dec_out_of_range
00004115: 89 47 04                                              	mov	[edi+4],eax
00004118: 0F B6 06                                              	movzx	eax,byte [esi]
0000411B: 2C 30                                                 	sub	al,30h
0000411D: 72 2E                                                 	jc	bad_number
0000411F: 3C 09                                                 	cmp	al,9
00004121: 77 2A                                                 	ja	bad_number
00004123: 01 07                                                 	add	[edi],eax
00004125: 83 57 04 00                                           	adc	dword [edi+4],0
00004129: 72 03                                                 	jc	dec_out_of_range
                                                                      next_dec_digit:
0000412B: 46                                                    	inc	esi
0000412C: EB A7                                                 	jmp	get_dec_digit
                                                                      dec_out_of_range:
0000412E: 39 DE                                                 	cmp	esi,ebx
00004130: 77 13                                                 	ja	dec_out_of_range_finished
00004132: AC                                                    	lods	byte [esi]
00004133: 3C 27                                                 	cmp	al,27h
00004135: 74 16                                                 	je	bad_number
00004137: 3C 5F                                                 	cmp	al,'_'
00004139: 74 12                                                 	je	bad_number
0000413B: 2C 30                                                 	sub	al,30h
0000413D: 72 0E                                                 	jc	bad_number
0000413F: 3C 09                                                 	cmp	al,9
00004141: 77 0A                                                 	ja	bad_number
00004143: EB E9                                                 	jmp	dec_out_of_range
                                                                      dec_out_of_range_finished:
00004145: 83 CD FF                                              	or	ebp,-1
00004148: E9 3D 01 00 00                                        	jmp	number_ok
                                                                      bad_number:
0000414D: 58                                                    	pop	eax
                                                                      invalid_number:
0000414E: 8B 35 F8 A1 01 00                                     	mov	esi,[number_start]
00004154: 4E                                                    	dec	esi
                                                                      not_number:
00004155: 4E                                                    	dec	esi
00004156: F9                                                    	stc
00004157: C3                                                    	ret
                                                                      get_bin_number:
00004158: 30 DB                                                 	xor	bl,bl
                                                                      get_bin_digit:
0000415A: 3B 35 F8 A1 01 00                                     	cmp	esi,[number_start]
00004160: 0F 82 24 01 00 00                                     	jb	number_ok
00004166: 0F B6 06                                              	movzx	eax,byte [esi]
00004169: 3C 27                                                 	cmp	al,27h
0000416B: 74 34                                                 	je	bin_digit_skip
0000416D: 3C 5F                                                 	cmp	al,'_'
0000416F: 74 30                                                 	je	bin_digit_skip
00004171: 2C 30                                                 	sub	al,30h
00004173: 3C 01                                                 	cmp	al,1
00004175: 77 D6                                                 	ja	bad_number
00004177: 31 D2                                                 	xor	edx,edx
00004179: 88 D9                                                 	mov	cl,bl
0000417B: 4E                                                    	dec	esi
0000417C: 80 FB 40                                              	cmp	bl,64
0000417F: 74 17                                                 	je	bin_out_of_range
00004181: FE C3                                                 	inc	bl
00004183: 80 F9 20                                              	cmp	cl,32
00004186: 73 06                                                 	jae	bin_digit_high
00004188: D3 E0                                                 	shl	eax,cl
0000418A: 09 07                                                 	or	dword [edi],eax
0000418C: EB CC                                                 	jmp	get_bin_digit
                                                                      bin_digit_high:
0000418E: 80 E9 20                                              	sub	cl,32
00004191: D3 E0                                                 	shl	eax,cl
00004193: 09 47 04                                              	or	dword [edi+4],eax
00004196: EB C2                                                 	jmp	get_bin_digit
                                                                      bin_out_of_range:
00004198: 08 C0                                                 	or	al,al
0000419A: 74 BE                                                 	jz	get_bin_digit
0000419C: 83 CD FF                                              	or	ebp,-1
0000419F: EB B9                                                 	jmp	get_bin_digit
                                                                      bin_digit_skip:
000041A1: 4E                                                    	dec	esi
000041A2: EB B6                                                 	jmp	get_bin_digit
                                                                      pascal_hex_number:
000041A4: 80 F9 01                                              	cmp	cl,1
000041A7: 74 A4                                                 	je	bad_number
                                                                      get_hex_number:
000041A9: 30 DB                                                 	xor	bl,bl
                                                                      get_hex_digit:
000041AB: 3B 35 F8 A1 01 00                                     	cmp	esi,[number_start]
000041B1: 0F 82 D3 00 00 00                                     	jb	number_ok
000041B7: 0F B6 06                                              	movzx	eax,byte [esi]
000041BA: 3C 27                                                 	cmp	al,27h
000041BC: 74 5D                                                 	je	hex_digit_skip
000041BE: 3C 5F                                                 	cmp	al,'_'
000041C0: 74 59                                                 	je	hex_digit_skip
000041C2: 3C 78                                                 	cmp	al,'x'
000041C4: 0F 84 B3 00 00 00                                     	je	hex_number_ok
000041CA: 3C 24                                                 	cmp	al,'$'
000041CC: 0F 84 AC 00 00 00                                     	je	pascal_hex_ok
000041D2: 2C 30                                                 	sub	al,30h
000041D4: 3C 09                                                 	cmp	al,9
000041D6: 76 18                                                 	jbe	hex_digit_ok
000041D8: 2C 07                                                 	sub	al,7
000041DA: 3C 0F                                                 	cmp	al,15
000041DC: 76 0A                                                 	jbe	hex_letter_digit_ok
000041DE: 2C 20                                                 	sub	al,20h
000041E0: 3C 0F                                                 	cmp	al,15
000041E2: 0F 87 65 FF FF FF                                     	ja	bad_number
                                                                      hex_letter_digit_ok:
000041E8: 3C 0A                                                 	cmp	al,10
000041EA: 0F 82 5D FF FF FF                                     	jb	bad_number
                                                                      hex_digit_ok:
000041F0: 31 D2                                                 	xor	edx,edx
000041F2: 88 D9                                                 	mov	cl,bl
000041F4: 4E                                                    	dec	esi
000041F5: 80 FB 40                                              	cmp	bl,64
000041F8: 74 18                                                 	je	hex_out_of_range
000041FA: 80 C3 04                                              	add	bl,4
000041FD: 80 F9 20                                              	cmp	cl,32
00004200: 73 06                                                 	jae	hex_digit_high
00004202: D3 E0                                                 	shl	eax,cl
00004204: 09 07                                                 	or	dword [edi],eax
00004206: EB A3                                                 	jmp	get_hex_digit
                                                                      hex_digit_high:
00004208: 80 E9 20                                              	sub	cl,32
0000420B: D3 E0                                                 	shl	eax,cl
0000420D: 09 47 04                                              	or	dword [edi+4],eax
00004210: EB 99                                                 	jmp	get_hex_digit
                                                                      hex_out_of_range:
00004212: 08 C0                                                 	or	al,al
00004214: 74 95                                                 	jz	get_hex_digit
00004216: 83 CD FF                                              	or	ebp,-1
00004219: EB 90                                                 	jmp	get_hex_digit
                                                                      hex_digit_skip:
0000421B: 4E                                                    	dec	esi
0000421C: EB 8D                                                 	jmp	get_hex_digit
                                                                      get_oct_number:
0000421E: 30 DB                                                 	xor	bl,bl
                                                                      get_oct_digit:
00004220: 3B 35 F8 A1 01 00                                     	cmp	esi,[number_start]
00004226: 72 62                                                 	jb	number_ok
00004228: 0F B6 06                                              	movzx	eax,byte [esi]
0000422B: 3C 27                                                 	cmp	al,27h
0000422D: 74 42                                                 	je	oct_digit_skip
0000422F: 3C 5F                                                 	cmp	al,'_'
00004231: 74 3E                                                 	je	oct_digit_skip
00004233: 2C 30                                                 	sub	al,30h
00004235: 3C 07                                                 	cmp	al,7
00004237: 0F 87 10 FF FF FF                                     	ja	bad_number
                                                                      oct_digit_ok:
0000423D: 31 D2                                                 	xor	edx,edx
0000423F: 88 D9                                                 	mov	cl,bl
00004241: 4E                                                    	dec	esi
00004242: 80 FB 3F                                              	cmp	bl,63
00004245: 77 2D                                                 	ja	oct_out_of_range
00004247: 75 04                                                 	jne	oct_range_ok
00004249: 3C 01                                                 	cmp	al,1
0000424B: 77 27                                                 	ja	oct_out_of_range
                                                                      oct_range_ok:
0000424D: 80 C3 03                                              	add	bl,3
00004250: 80 F9 1E                                              	cmp	cl,30
00004253: 74 08                                                 	je	oct_digit_wrap
00004255: 77 10                                                 	ja	oct_digit_high
00004257: D3 E0                                                 	shl	eax,cl
00004259: 09 07                                                 	or	dword [edi],eax
0000425B: EB C3                                                 	jmp	get_oct_digit
                                                                      oct_digit_wrap:
0000425D: D3 E0                                                 	shl	eax,cl
0000425F: 83 57 04 00                                           	adc	dword [edi+4],0
00004263: 09 07                                                 	or	dword [edi],eax
00004265: EB B9                                                 	jmp	get_oct_digit
                                                                      oct_digit_high:
00004267: 80 E9 20                                              	sub	cl,32
0000426A: D3 E0                                                 	shl	eax,cl
0000426C: 09 47 04                                              	or	dword [edi+4],eax
0000426F: EB AF                                                 	jmp	get_oct_digit
                                                                      oct_digit_skip:
00004271: 4E                                                    	dec	esi
00004272: EB AC                                                 	jmp	get_oct_digit
                                                                      oct_out_of_range:
00004274: 08 C0                                                 	or	al,al
00004276: 74 A8                                                 	jz	get_oct_digit
00004278: 83 CD FF                                              	or	ebp,-1
0000427B: EB A3                                                 	jmp	get_oct_digit
                                                                      hex_number_ok:
0000427D: 4E                                                    	dec	esi
                                                                      pascal_hex_ok:
0000427E: 3B 35 F8 A1 01 00                                     	cmp	esi,[number_start]
00004284: 0F 85 C3 FE FF FF                                     	jne	bad_number
                                                                      number_ok:
0000428A: 5E                                                    	pop	esi
                                                                      number_done:
0000428B: F8                                                    	clc
0000428C: C3                                                    	ret
                                                                      get_text_number:
0000428D: AD                                                    	lods	dword [esi]
0000428E: 89 C2                                                 	mov	edx,eax
00004290: 30 DB                                                 	xor	bl,bl
00004292: C7 07 00 00 00 00                                     	mov	dword [edi],0
00004298: C7 47 04 00 00 00 00                                  	mov	dword [edi+4],0
                                                                      get_text_character:
0000429F: 83 EA 01                                              	sub	edx,1
000042A2: 72 E7                                                 	jc	number_done
000042A4: 0F B6 06                                              	movzx	eax,byte [esi]
000042A7: 46                                                    	inc	esi
000042A8: 88 D9                                                 	mov	cl,bl
000042AA: 80 FB 40                                              	cmp	bl,64
000042AD: 74 18                                                 	je	text_out_of_range
000042AF: 80 C3 08                                              	add	bl,8
000042B2: 80 F9 20                                              	cmp	cl,32
000042B5: 73 06                                                 	jae	text_character_high
000042B7: D3 E0                                                 	shl	eax,cl
000042B9: 09 07                                                 	or	dword [edi],eax
000042BB: EB E2                                                 	jmp	get_text_character
                                                                      text_character_high:
000042BD: 80 E9 20                                              	sub	cl,32
000042C0: D3 E0                                                 	shl	eax,cl
000042C2: 09 47 04                                              	or	dword [edi+4],eax
000042C5: EB D8                                                 	jmp	get_text_character
                                                                      text_out_of_range:
000042C7: 83 CD FF                                              	or	ebp,-1
000042CA: EB D3                                                 	jmp	get_text_character
                                                                
                                                                get_fp_value:
000042CC: 57 56                                                 	push	edi esi
                                                                      fp_value_start:
000042CE: AC                                                    	lods	byte [esi]
000042CF: 3C 2D                                                 	cmp	al,'-'
000042D1: 74 FB                                                 	je	fp_value_start
000042D3: 3C 2B                                                 	cmp	al,'+'
000042D5: 74 F7                                                 	je	fp_value_start
000042D7: 3C 1A                                                 	cmp	al,1Ah
000042D9: 75 3B                                                 	jne	not_fp_value
000042DB: AC                                                    	lods	byte [esi]
000042DC: 0F B6 C8                                              	movzx	ecx,al
000042DF: 80 F9 01                                              	cmp	cl,1
000042E2: 76 32                                                 	jbe	not_fp_value
000042E4: 8D 56 01                                              	lea	edx,[esi+1]
000042E7: 30 E4                                                 	xor	ah,ah
                                                                      check_fp_value:
000042E9: AC                                                    	lods	byte [esi]
000042EA: 3C 2E                                                 	cmp	al,'.'
000042EC: 74 1A                                                 	je	fp_character_dot
000042EE: 3C 45                                                 	cmp	al,'E'
000042F0: 74 32                                                 	je	fp_character_exp
000042F2: 3C 65                                                 	cmp	al,'e'
000042F4: 74 2E                                                 	je	fp_character_exp
000042F6: 3C 46                                                 	cmp	al,'F'
000042F8: 74 20                                                 	je	fp_last_character
000042FA: 3C 66                                                 	cmp	al,'f'
000042FC: 74 1C                                                 	je	fp_last_character
                                                                      digit_expected:
000042FE: 3C 30                                                 	cmp	al,'0'
00004300: 72 14                                                 	jb	not_fp_value
00004302: 3C 39                                                 	cmp	al,'9'
00004304: 77 10                                                 	ja	not_fp_value
00004306: EB 43                                                 	jmp	fp_character_ok
                                                                      fp_character_dot:
00004308: 39 D6                                                 	cmp	esi,edx
0000430A: 74 0A                                                 	je	not_fp_value
0000430C: 08 E4                                                 	or	ah,ah
0000430E: 75 06                                                 	jnz	not_fp_value
00004310: 80 CC 01                                              	or	ah,1
00004313: AC                                                    	lods	byte [esi]
00004314: E2 E8                                                 	loop	digit_expected
                                                                      not_fp_value:
00004316: 5E 5F                                                 	pop	esi edi
00004318: F9                                                    	stc
00004319: C3                                                    	ret
                                                                      fp_last_character:
0000431A: 80 F9 01                                              	cmp	cl,1
0000431D: 75 F7                                                 	jne	not_fp_value
0000431F: 80 CC 04                                              	or	ah,4
00004322: EB 27                                                 	jmp	fp_character_ok
                                                                      fp_character_exp:
00004324: 39 D6                                                 	cmp	esi,edx
00004326: 74 EE                                                 	je	not_fp_value
00004328: 80 FC 01                                              	cmp	ah,1
0000432B: 77 E9                                                 	ja	not_fp_value
0000432D: 80 CC 02                                              	or	ah,2
00004330: 83 F9 01                                              	cmp	ecx,1
00004333: 75 16                                                 	jne	fp_character_ok
00004335: 80 3E 2B                                              	cmp	byte [esi],'+'
00004338: 74 05                                                 	je	fp_exp_sign
0000433A: 80 3E 2D                                              	cmp	byte [esi],'-'
0000433D: 75 0C                                                 	jne	fp_character_ok
                                                                      fp_exp_sign:
0000433F: 46                                                    	inc	esi
00004340: 80 3E 1A                                              	cmp	byte [esi],1Ah
00004343: 75 D1                                                 	jne	not_fp_value
00004345: 46                                                    	inc	esi
00004346: AC                                                    	lods	byte [esi]
00004347: 0F B6 C8                                              	movzx	ecx,al
0000434A: 41                                                    	inc	ecx
                                                                      fp_character_ok:
0000434B: 49                                                    	dec	ecx
0000434C: 75 9B                                                 	jnz	check_fp_value
0000434E: 08 E4                                                 	or	ah,ah
00004350: 74 C4                                                 	jz	not_fp_value
00004352: 5E                                                    	pop	esi
00004353: C6 05 C2 A2 01 00 00                                  	mov	[fp_sign],0
                                                                      fp_get_sign:
0000435A: AC                                                    	lods	byte [esi]
0000435B: 3C 1A                                                 	cmp	al,1Ah
0000435D: 74 0D                                                 	je	fp_get
0000435F: 3C 2B                                                 	cmp	al,'+'
00004361: 74 F7                                                 	je	fp_get_sign
00004363: 80 35 C2 A2 01 00 01                                  	xor	[fp_sign],1
0000436A: EB EE                                                 	jmp	fp_get_sign
                                                                      fp_get:
0000436C: AC                                                    	lods	byte [esi]
0000436D: 0F B6 C8                                              	movzx	ecx,al
00004370: 31 D2                                                 	xor	edx,edx
00004372: BF 08 A2 01 00                                        	mov	edi,fp_value
00004377: 89 17                                                 	mov	[edi],edx
00004379: 89 57 04                                              	mov	[edi+4],edx
0000437C: 89 57 0C                                              	mov	[edi+12],edx
0000437F: E8 04 03 00 00                                        	call	fp_optimize
00004384: C6 05 C3 A2 01 00 00                                  	mov	[fp_format],0
0000438B: 8A 06                                                 	mov	al,[esi]
                                                                      fp_before_dot:
0000438D: AC                                                    	lods	byte [esi]
0000438E: 3C 2E                                                 	cmp	al,'.'
00004390: 74 5B                                                 	je	fp_dot
00004392: 3C 45                                                 	cmp	al,'E'
00004394: 0F 84 E8 00 00 00                                     	je	fp_exponent
0000439A: 3C 65                                                 	cmp	al,'e'
0000439C: 0F 84 E0 00 00 00                                     	je	fp_exponent
000043A2: 3C 46                                                 	cmp	al,'F'
000043A4: 0F 84 43 01 00 00                                     	je	fp_done
000043AA: 3C 66                                                 	cmp	al,'f'
000043AC: 0F 84 3B 01 00 00                                     	je	fp_done
000043B2: 2C 30                                                 	sub	al,30h
000043B4: BF 18 A2 01 00                                        	mov	edi,fp_value+16
000043B9: 31 D2                                                 	xor	edx,edx
000043BB: 89 57 0C                                              	mov	dword [edi+12],edx
000043BE: 89 17                                                 	mov	dword [edi],edx
000043C0: 89 57 04                                              	mov	dword [edi+4],edx
000043C3: 88 47 07                                              	mov	[edi+7],al
000043C6: B2 07                                                 	mov	dl,7
000043C8: 89 57 08                                              	mov	dword [edi+8],edx
000043CB: E8 B8 02 00 00                                        	call	fp_optimize
000043D0: BF 08 A2 01 00                                        	mov	edi,fp_value
000043D5: 51                                                    	push	ecx
000043D6: B9 0A 00 00 00                                        	mov	ecx,10
000043DB: E8 49 01 00 00                                        	call	fp_mul
000043E0: 59                                                    	pop	ecx
000043E1: BB 18 A2 01 00                                        	mov	ebx,fp_value+16
000043E6: E8 0B 02 00 00                                        	call	fp_add
000043EB: E2 A0                                                 	loop	fp_before_dot
                                                                      fp_dot:
000043ED: BF 18 A2 01 00                                        	mov	edi,fp_value+16
000043F2: 31 D2                                                 	xor	edx,edx
000043F4: 89 17                                                 	mov	[edi],edx
000043F6: 89 57 04                                              	mov	[edi+4],edx
000043F9: C6 47 07 80                                           	mov	byte [edi+7],80h
000043FD: 89 57 08                                              	mov	[edi+8],edx
00004400: 89 57 0C                                              	mov	dword [edi+12],edx
00004403: 49                                                    	dec	ecx
00004404: 0F 84 E3 00 00 00                                     	jz	fp_done
                                                                      fp_after_dot:
0000440A: AC                                                    	lods	byte [esi]
0000440B: 3C 45                                                 	cmp	al,'E'
0000440D: 74 73                                                 	je	fp_exponent
0000440F: 3C 65                                                 	cmp	al,'e'
00004411: 74 6F                                                 	je	fp_exponent
00004413: 3C 46                                                 	cmp	al,'F'
00004415: 0F 84 D2 00 00 00                                     	je	fp_done
0000441B: 3C 66                                                 	cmp	al,'f'
0000441D: 0F 84 CA 00 00 00                                     	je	fp_done
00004423: FE 05 C3 A2 01 00                                     	inc	[fp_format]
00004429: 80 3D C3 A2 01 00 80                                  	cmp	[fp_format],80h
00004430: 75 07                                                 	jne	fp_counter_ok
00004432: C6 05 C3 A2 01 00 7F                                  	mov	[fp_format],7Fh
                                                                      fp_counter_ok:
00004439: 4E                                                    	dec	esi
0000443A: BF 18 A2 01 00                                        	mov	edi,fp_value+16
0000443F: 51                                                    	push	ecx
00004440: B9 0A 00 00 00                                        	mov	ecx,10
00004445: E8 39 01 00 00                                        	call	fp_div
0000444A: FF 37                                                 	push	dword [edi]
0000444C: FF 77 04                                              	push	dword [edi+4]
0000444F: FF 77 08                                              	push	dword [edi+8]
00004452: FF 77 0C                                              	push	dword [edi+12]
00004455: AC                                                    	lods	byte [esi]
00004456: 2C 30                                                 	sub	al,30h
00004458: 0F B6 C8                                              	movzx	ecx,al
0000445B: E8 C9 00 00 00                                        	call	fp_mul
00004460: 89 FB                                                 	mov	ebx,edi
00004462: BF 08 A2 01 00                                        	mov	edi,fp_value
00004467: E8 8A 01 00 00                                        	call	fp_add
0000446C: BF 18 A2 01 00                                        	mov	edi,fp_value+16
00004471: 8F 47 0C                                              	pop	dword [edi+12]
00004474: 8F 47 08                                              	pop	dword [edi+8]
00004477: 8F 47 04                                              	pop	dword [edi+4]
0000447A: 8F 07                                                 	pop	dword [edi]
0000447C: 59                                                    	pop	ecx
0000447D: 49                                                    	dec	ecx
0000447E: 75 8A                                                 	jnz	fp_after_dot
00004480: EB 6B                                                 	jmp	fp_done
                                                                      fp_exponent:
00004482: 80 0D C3 A2 01 00 80                                  	or	[fp_format],80h
00004489: 31 D2                                                 	xor	edx,edx
0000448B: 31 ED                                                 	xor	ebp,ebp
0000448D: 49                                                    	dec	ecx
0000448E: 75 13                                                 	jnz	get_exponent
00004490: 80 3E 2B                                              	cmp	byte [esi],'+'
00004493: 74 07                                                 	je	fp_exponent_sign
00004495: 80 3E 2D                                              	cmp	byte [esi],'-'
00004498: 75 53                                                 	jne	fp_done
0000449A: F7 D5                                                 	not	ebp
                                                                      fp_exponent_sign:
0000449C: 83 C6 02                                              	add	esi,2
0000449F: AC                                                    	lods	byte [esi]
000044A0: 0F B6 C8                                              	movzx	ecx,al
                                                                      get_exponent:
000044A3: 0F B6 06                                              	movzx	eax,byte [esi]
000044A6: 46                                                    	inc	esi
000044A7: 2C 30                                                 	sub	al,30h
000044A9: 3C 0A                                                 	cmp	al,10
000044AB: 73 13                                                 	jae	exponent_ok
000044AD: 6B D2 0A                                              	imul	edx,10
000044B0: 81 FA 00 80 00 00                                     	cmp	edx,8000h
000044B6: 0F 83 FA C4 FF FF                                     	jae	value_out_of_range
000044BC: 01 C2                                                 	add	edx,eax
000044BE: E2 E3                                                 	loop	get_exponent
                                                                      exponent_ok:
000044C0: BF 08 A2 01 00                                        	mov	edi,fp_value
000044C5: 09 D2                                                 	or	edx,edx
000044C7: 74 24                                                 	jz	fp_done
000044C9: 89 D1                                                 	mov	ecx,edx
000044CB: 09 ED                                                 	or	ebp,ebp
000044CD: 75 10                                                 	jnz	fp_negative_power
                                                                      fp_power:
000044CF: 51                                                    	push	ecx
000044D0: B9 0A 00 00 00                                        	mov	ecx,10
000044D5: E8 4F 00 00 00                                        	call	fp_mul
000044DA: 59                                                    	pop	ecx
000044DB: E2 F2                                                 	loop	fp_power
000044DD: EB 0E                                                 	jmp	fp_done
                                                                      fp_negative_power:
000044DF: 51                                                    	push	ecx
000044E0: B9 0A 00 00 00                                        	mov	ecx,10
000044E5: E8 99 00 00 00                                        	call	fp_div
000044EA: 59                                                    	pop	ecx
000044EB: E2 F2                                                 	loop	fp_negative_power
                                                                      fp_done:
000044ED: BF 08 A2 01 00                                        	mov	edi,fp_value
000044F2: A0 C3 A2 01 00                                        	mov	al,[fp_format]
000044F7: 88 47 0A                                              	mov	[edi+10],al
000044FA: A0 C2 A2 01 00                                        	mov	al,[fp_sign]
000044FF: 88 47 0B                                              	mov	[edi+11],al
00004502: F6 47 0F 80                                           	test	byte [edi+15],80h
00004506: 74 1E                                                 	jz	fp_ok
00004508: 83 07 01                                              	add	dword [edi],1
0000450B: 83 57 04 00                                           	adc	dword [edi+4],0
0000450F: 73 15                                                 	jnc	fp_ok
00004511: 8B 47 04                                              	mov	eax,[edi+4]
00004514: 0F AC 07 01                                           	shrd	[edi],eax,1
00004518: D1 E8                                                 	shr	eax,1
0000451A: 0D 00 00 00 80                                        	or	eax,80000000h
0000451F: 89 47 04                                              	mov	[edi+4],eax
00004522: 66 FF 47 08                                           	inc	word [edi+8]
                                                                      fp_ok:
00004526: 5F                                                    	pop	edi
00004527: F8                                                    	clc
00004528: C3                                                    	ret
                                                                      fp_mul:
00004529: 09 C9                                                 	or	ecx,ecx
0000452B: 0F 84 80 01 00 00                                     	jz	fp_zero
00004531: 8B 47 0C                                              	mov	eax,[edi+12]
00004534: F7 E1                                                 	mul	ecx
00004536: 89 47 0C                                              	mov	[edi+12],eax
00004539: 89 D3                                                 	mov	ebx,edx
0000453B: 8B 07                                                 	mov	eax,[edi]
0000453D: F7 E1                                                 	mul	ecx
0000453F: 01 D8                                                 	add	eax,ebx
00004541: 83 D2 00                                              	adc	edx,0
00004544: 89 07                                                 	mov	[edi],eax
00004546: 89 D3                                                 	mov	ebx,edx
00004548: 8B 47 04                                              	mov	eax,[edi+4]
0000454B: F7 E1                                                 	mul	ecx
0000454D: 01 D8                                                 	add	eax,ebx
0000454F: 83 D2 00                                              	adc	edx,0
00004552: 89 47 04                                              	mov	[edi+4],eax
                                                                      .loop:
00004555: 09 D2                                                 	or	edx,edx
00004557: 74 29                                                 	jz	.done
00004559: 8B 07                                                 	mov	eax,[edi]
0000455B: 0F AC 47 0C 01                                        	shrd	[edi+12],eax,1
00004560: 8B 47 04                                              	mov	eax,[edi+4]
00004563: 0F AC 07 01                                           	shrd	[edi],eax,1
00004567: 0F AC D0 01                                           	shrd	eax,edx,1
0000456B: 89 47 04                                              	mov	[edi+4],eax
0000456E: D1 EA                                                 	shr	edx,1
00004570: FF 47 08                                              	inc	dword [edi+8]
00004573: 81 7F 08 00 80 00 00                                  	cmp	dword [edi+8],8000h
0000457A: 0F 8D 36 C4 FF FF                                     	jge	value_out_of_range
00004580: EB D3                                                 	jmp	.loop
                                                                      .done:
00004582: C3                                                    	ret
                                                                      fp_div:
00004583: 8B 47 04                                              	mov	eax,[edi+4]
00004586: 31 D2                                                 	xor	edx,edx
00004588: F7 F1                                                 	div	ecx
0000458A: 89 47 04                                              	mov	[edi+4],eax
0000458D: 8B 07                                                 	mov	eax,[edi]
0000458F: F7 F1                                                 	div	ecx
00004591: 89 07                                                 	mov	[edi],eax
00004593: 8B 47 0C                                              	mov	eax,[edi+12]
00004596: F7 F1                                                 	div	ecx
00004598: 89 47 0C                                              	mov	[edi+12],eax
0000459B: 89 C3                                                 	mov	ebx,eax
0000459D: 0B 1F                                                 	or	ebx,[edi]
0000459F: 0B 5F 04                                              	or	ebx,[edi+4]
000045A2: 0F 84 09 01 00 00                                     	jz	fp_zero
                                                                      .loop:
000045A8: F6 47 07 80                                           	test	byte [edi+7],80h
000045AC: 75 1A                                                 	jnz	.exp_ok
000045AE: 8B 07                                                 	mov	eax,[edi]
000045B0: 0F A4 47 04 01                                        	shld	[edi+4],eax,1
000045B5: 8B 47 0C                                              	mov	eax,[edi+12]
000045B8: 0F A4 07 01                                           	shld	[edi],eax,1
000045BC: 01 C0                                                 	add	eax,eax
000045BE: 89 47 0C                                              	mov	[edi+12],eax
000045C1: FF 4F 08                                              	dec	dword [edi+8]
000045C4: 01 D2                                                 	add	edx,edx
000045C6: EB E0                                                 	jmp	.loop
                                                                      .exp_ok:
000045C8: 89 D0                                                 	mov	eax,edx
000045CA: 31 D2                                                 	xor	edx,edx
000045CC: F7 F1                                                 	div	ecx
000045CE: 01 47 0C                                              	add	[edi+12],eax
000045D1: 83 17 00                                              	adc	dword [edi],0
000045D4: 83 57 04 00                                           	adc	dword [edi+4],0
000045D8: 73 1B                                                 	jnc	.done
000045DA: 8B 47 04                                              	mov	eax,[edi+4]
000045DD: 8B 1F                                                 	mov	ebx,[edi]
000045DF: 0F AC 07 01                                           	shrd	[edi],eax,1
000045E3: 0F AC 5F 0C 01                                        	shrd	[edi+12],ebx,1
000045E8: D1 E8                                                 	shr	eax,1
000045EA: 0D 00 00 00 80                                        	or	eax,80000000h
000045EF: 89 47 04                                              	mov	[edi+4],eax
000045F2: FF 47 08                                              	inc	dword [edi+8]
                                                                      .done:
000045F5: C3                                                    	ret
                                                                      fp_add:
000045F6: 81 7B 08 00 80 00 00                                  	cmp	dword [ebx+8],8000h
000045FD: 74 4F                                                 	je	.done
000045FF: 81 7F 08 00 80 00 00                                  	cmp	dword [edi+8],8000h
00004606: 74 47                                                 	je	.copy
00004608: 8B 43 08                                              	mov	eax,[ebx+8]
0000460B: 3B 47 08                                              	cmp	eax,[edi+8]
0000460E: 7D 03                                                 	jge	.exp_ok
00004610: 8B 47 08                                              	mov	eax,[edi+8]
                                                                      .exp_ok:
00004613: E8 4E 00 00 00                                        	call	.change_exp
00004618: 87 DF                                                 	xchg	ebx,edi
0000461A: E8 47 00 00 00                                        	call	.change_exp
0000461F: 87 DF                                                 	xchg	ebx,edi
00004621: 8B 53 0C                                              	mov	edx,[ebx+12]
00004624: 8B 03                                                 	mov	eax,[ebx]
00004626: 8B 5B 04                                              	mov	ebx,[ebx+4]
00004629: 01 57 0C                                              	add	[edi+12],edx
0000462C: 11 07                                                 	adc	[edi],eax
0000462E: 11 5F 04                                              	adc	[edi+4],ebx
00004631: 73 1B                                                 	jnc	.done
00004633: 8B 07                                                 	mov	eax,[edi]
00004635: 0F AC 47 0C 01                                        	shrd	[edi+12],eax,1
0000463A: 8B 47 04                                              	mov	eax,[edi+4]
0000463D: 0F AC 07 01                                           	shrd	[edi],eax,1
00004641: D1 E8                                                 	shr	eax,1
00004643: 0D 00 00 00 80                                        	or	eax,80000000h
00004648: 89 47 04                                              	mov	[edi+4],eax
0000464B: FF 47 08                                              	inc	dword [edi+8]
                                                                      .done:
0000464E: C3                                                    	ret
                                                                      .copy:
0000464F: 8B 03                                                 	mov	eax,[ebx]
00004651: 89 07                                                 	mov	[edi],eax
00004653: 8B 43 04                                              	mov	eax,[ebx+4]
00004656: 89 47 04                                              	mov	[edi+4],eax
00004659: 8B 43 08                                              	mov	eax,[ebx+8]
0000465C: 89 47 08                                              	mov	[edi+8],eax
0000465F: 8B 43 0C                                              	mov	eax,[ebx+12]
00004662: 89 47 0C                                              	mov	[edi+12],eax
00004665: C3                                                    	ret
                                                                      .change_exp:
00004666: 51                                                    	push	ecx
00004667: 89 C1                                                 	mov	ecx,eax
00004669: 2B 4B 08                                              	sub	ecx,[ebx+8]
0000466C: 8B 53 04                                              	mov	edx,[ebx+4]
0000466F: E3 12                                                 	jecxz	.exp_done
                                                                      .exp_loop:
00004671: 8B 2B                                                 	mov	ebp,[ebx]
00004673: 0F AC 6B 0C 01                                        	shrd	[ebx+12],ebp,1
00004678: 0F AC 13 01                                           	shrd	[ebx],edx,1
0000467C: D1 EA                                                 	shr	edx,1
0000467E: FF 43 08                                              	inc	dword [ebx+8]
00004681: E2 EE                                                 	loop	.exp_loop
                                                                      .exp_done:
00004683: 89 53 04                                              	mov	[ebx+4],edx
00004686: 59                                                    	pop	ecx
00004687: C3                                                    	ret
                                                                      fp_optimize:
00004688: 8B 07                                                 	mov	eax,[edi]
0000468A: 8B 6F 04                                              	mov	ebp,[edi+4]
0000468D: 0B 2F                                                 	or	ebp,[edi]
0000468F: 0B 6F 0C                                              	or	ebp,[edi+12]
00004692: 74 1D                                                 	jz	fp_zero
                                                                      .loop:
00004694: F6 47 07 80                                           	test	byte [edi+7],80h
00004698: 75 16                                                 	jnz	.done
0000469A: 0F A4 47 04 01                                        	shld	[edi+4],eax,1
0000469F: 8B 6F 0C                                              	mov	ebp,[edi+12]
000046A2: 0F A4 E8 01                                           	shld	eax,ebp,1
000046A6: 89 07                                                 	mov	[edi],eax
000046A8: D1 67 0C                                              	shl	dword [edi+12],1
000046AB: FF 4F 08                                              	dec	dword [edi+8]
000046AE: EB E4                                                 	jmp	.loop
                                                                      .done:
000046B0: C3                                                    	ret
                                                                      fp_zero:
000046B1: C7 47 08 00 80 00 00                                  	mov	dword [edi+8],8000h
000046B8: C3                                                    	ret
                                                                
                                                                preevaluate_logical_expression:
000046B9: 30 C0                                                 	xor	al,al
                                                                  preevaluate_embedded_logical_expression:
000046BB: A2 C7 A2 01 00                                        	mov	[logical_value_wrapping],al
000046C0: 57                                                    	push	edi
000046C1: E8 15 01 00 00                                        	call	preevaluate_logical_value
                                                                      preevaluation_loop:
000046C6: 3C FF                                                 	cmp	al,0FFh
000046C8: 0F 84 86 00 00 00                                     	je	invalid_logical_expression
000046CE: 8A 16                                                 	mov	dl,[esi]
000046D0: 46                                                    	inc	esi
000046D1: 80 FA 7C                                              	cmp	dl,'|'
000046D4: 74 11                                                 	je	preevaluate_or
000046D6: 80 FA 26                                              	cmp	dl,'&'
000046D9: 74 2B                                                 	je	preevaluate_and
000046DB: 80 FA 92                                              	cmp	dl,92h
000046DE: 74 04                                                 	je	preevaluation_done
000046E0: 08 D2                                                 	or	dl,dl
000046E2: 75 70                                                 	jnz	invalid_logical_expression
                                                                      preevaluation_done:
000046E4: 5A                                                    	pop	edx
000046E5: 4E                                                    	dec	esi
000046E6: C3                                                    	ret
                                                                      preevaluate_or:
000046E7: 3C 31                                                 	cmp	al,'1'
000046E9: 74 4A                                                 	je	quick_true
000046EB: 3C 30                                                 	cmp	al,'0'
000046ED: 74 36                                                 	je	leave_only_following
000046EF: 57                                                    	push	edi
000046F0: 88 D0                                                 	mov	al,dl
000046F2: AA                                                    	stos	byte [edi]
000046F3: E8 E3 00 00 00                                        	call	preevaluate_logical_value
000046F8: 5B                                                    	pop	ebx
000046F9: 3C 30                                                 	cmp	al,'0'
000046FB: 74 32                                                 	je	leave_only_preceding
000046FD: 3C 31                                                 	cmp	al,'1'
000046FF: 75 C5                                                 	jne	preevaluation_loop
00004701: AA                                                    	stos	byte [edi]
00004702: 30 C0                                                 	xor	al,al
00004704: EB C0                                                 	jmp	preevaluation_loop
                                                                      preevaluate_and:
00004706: 3C 30                                                 	cmp	al,'0'
00004708: 74 39                                                 	je	quick_false
0000470A: 3C 31                                                 	cmp	al,'1'
0000470C: 74 17                                                 	je	leave_only_following
0000470E: 57                                                    	push	edi
0000470F: 88 D0                                                 	mov	al,dl
00004711: AA                                                    	stos	byte [edi]
00004712: E8 C4 00 00 00                                        	call	preevaluate_logical_value
00004717: 5B                                                    	pop	ebx
00004718: 3C 31                                                 	cmp	al,'1'
0000471A: 74 13                                                 	je	leave_only_preceding
0000471C: 3C 30                                                 	cmp	al,'0'
0000471E: 75 A6                                                 	jne	preevaluation_loop
00004720: AA                                                    	stos	byte [edi]
00004721: 30 C0                                                 	xor	al,al
00004723: EB A1                                                 	jmp	preevaluation_loop
                                                                      leave_only_following:
00004725: 8B 3C 24                                              	mov	edi,[esp]
00004728: E8 AE 00 00 00                                        	call	preevaluate_logical_value
0000472D: EB 97                                                 	jmp	preevaluation_loop
                                                                      leave_only_preceding:
0000472F: 89 DF                                                 	mov	edi,ebx
00004731: 30 C0                                                 	xor	al,al
00004733: EB 91                                                 	jmp	preevaluation_loop
                                                                      quick_true:
00004735: E8 21 00 00 00                                        	call	skip_logical_value
0000473A: 72 18                                                 	jc	invalid_logical_expression
0000473C: 8B 3C 24                                              	mov	edi,[esp]
0000473F: B0 31                                                 	mov	al,'1'
00004741: EB 83                                                 	jmp	preevaluation_loop
                                                                      quick_false:
00004743: E8 13 00 00 00                                        	call	skip_logical_value
00004748: 72 0A                                                 	jc	invalid_logical_expression
0000474A: 8B 3C 24                                              	mov	edi,[esp]
0000474D: B0 30                                                 	mov	al,'0'
0000474F: E9 72 FF FF FF                                        	jmp	preevaluation_loop
                                                                      invalid_logical_expression:
00004754: 5F                                                    	pop	edi
00004755: 89 FE                                                 	mov	esi,edi
00004757: B0 FF                                                 	mov	al,0FFh
00004759: AA                                                    	stos	byte [edi]
0000475A: C3                                                    	ret
                                                                  skip_logical_value:
0000475B: 80 3E 7E                                              	cmp	byte [esi],'~'
0000475E: 75 03                                                 	jne	negation_skipped
00004760: 46                                                    	inc	esi
00004761: EB F8                                                 	jmp	skip_logical_value
                                                                      negation_skipped:
00004763: 8A 06                                                 	mov	al,[esi]
00004765: 3C 91                                                 	cmp	al,91h
00004767: 75 2D                                                 	jne	skip_simple_logical_value
00004769: 46                                                    	inc	esi
0000476A: 86 05 C7 A2 01 00                                     	xchg	al,[logical_value_wrapping]
00004770: 50                                                    	push	eax
                                                                      skip_logical_expression:
00004771: E8 E5 FF FF FF                                        	call	skip_logical_value
00004776: AC                                                    	lods	byte [esi]
00004777: 08 C0                                                 	or	al,al
00004779: 74 18                                                 	jz	wrongly_structured_logical_expression
0000477B: 3C 0F                                                 	cmp	al,0Fh
0000477D: 74 14                                                 	je	wrongly_structured_logical_expression
0000477F: 3C 7C                                                 	cmp	al,'|'
00004781: 74 EE                                                 	je	skip_logical_expression
00004783: 3C 26                                                 	cmp	al,'&'
00004785: 74 EA                                                 	je	skip_logical_expression
00004787: 3C 92                                                 	cmp	al,92h
00004789: 75 08                                                 	jne	wrongly_structured_logical_expression
0000478B: 58                                                    	pop	eax
0000478C: A2 C7 A2 01 00                                        	mov	[logical_value_wrapping],al
                                                                      logical_value_skipped:
00004791: F8                                                    	clc
00004792: C3                                                    	ret
                                                                      wrongly_structured_logical_expression:
00004793: 58                                                    	pop	eax
00004794: F9                                                    	stc
00004795: C3                                                    	ret
                                                                      skip_simple_logical_value:
00004796: C7 05 9C A2 01 00 00 00 00 00                         	mov	[logical_value_parentheses],0
                                                                      find_simple_logical_value_end:
000047A0: 8A 06                                                 	mov	al,[esi]
000047A2: 08 C0                                                 	or	al,al
000047A4: 74 EB                                                 	jz	logical_value_skipped
000047A6: 3C 0F                                                 	cmp	al,0Fh
000047A8: 74 E7                                                 	je	logical_value_skipped
000047AA: 3C 7C                                                 	cmp	al,'|'
000047AC: 74 E3                                                 	je	logical_value_skipped
000047AE: 3C 26                                                 	cmp	al,'&'
000047B0: 74 DF                                                 	je	logical_value_skipped
000047B2: 3C 91                                                 	cmp	al,91h
000047B4: 74 18                                                 	je	skip_logical_value_internal_parenthesis
000047B6: 3C 92                                                 	cmp	al,92h
000047B8: 75 1A                                                 	jne	skip_logical_value_symbol
000047BA: 83 2D 9C A2 01 00 01                                  	sub	[logical_value_parentheses],1
000047C1: 73 11                                                 	jnc	skip_logical_value_symbol
000047C3: 80 3D C7 A2 01 00 91                                  	cmp	[logical_value_wrapping],91h
000047CA: 75 08                                                 	jne	skip_logical_value_symbol
000047CC: EB C3                                                 	jmp	logical_value_skipped
                                                                      skip_logical_value_internal_parenthesis:
000047CE: FF 05 9C A2 01 00                                     	inc	[logical_value_parentheses]
                                                                      skip_logical_value_symbol:
000047D4: E8 B8 35 00 00                                        	call	skip_symbol
000047D9: EB C5                                                 	jmp	find_simple_logical_value_end
                                                                  preevaluate_logical_value:
000047DB: 89 FD                                                 	mov	ebp,edi
                                                                      preevaluate_negation:
000047DD: 80 3E 7E                                              	cmp	byte [esi],'~'
000047E0: 75 03                                                 	jne	preevaluate_negation_ok
000047E2: A4                                                    	movs	byte [edi],[esi]
000047E3: EB F8                                                 	jmp	preevaluate_negation
                                                                      preevaluate_negation_ok:
000047E5: 89 F3                                                 	mov	ebx,esi
000047E7: 80 3E 91                                              	cmp	byte [esi],91h
000047EA: 75 3E                                                 	jne	preevaluate_simple_logical_value
000047EC: AC                                                    	lods	byte [esi]
000047ED: AA                                                    	stos	byte [edi]
000047EE: 55                                                    	push	ebp
000047EF: 8A 15 C7 A2 01 00                                     	mov	dl,[logical_value_wrapping]
000047F5: 52                                                    	push	edx
000047F6: E8 C0 FE FF FF                                        	call	preevaluate_embedded_logical_expression
000047FB: 5A                                                    	pop	edx
000047FC: 88 15 C7 A2 01 00                                     	mov	[logical_value_wrapping],dl
00004802: 5D                                                    	pop	ebp
00004803: 3C FF                                                 	cmp	al,0FFh
00004805: 74 1E                                                 	je	invalid_logical_value
00004807: 80 3E 92                                              	cmp	byte [esi],92h
0000480A: 75 19                                                 	jne	invalid_logical_value
0000480C: 08 C0                                                 	or	al,al
0000480E: 75 02                                                 	jnz	preevaluated_expression_value
00004810: A4                                                    	movs	byte [edi],[esi]
00004811: C3                                                    	ret
                                                                      preevaluated_expression_value:
00004812: 46                                                    	inc	esi
00004813: 8D 57 FF                                              	lea	edx,[edi-1]
00004816: 29 EA                                                 	sub	edx,ebp
00004818: F7 C2 01 00 00 00                                     	test	edx,1
0000481E: 74 02                                                 	jz	expression_negation_ok
00004820: 34 01                                                 	xor	al,1
                                                                      expression_negation_ok:
00004822: 89 EF                                                 	mov	edi,ebp
00004824: C3                                                    	ret
                                                                      invalid_logical_value:
00004825: 89 EF                                                 	mov	edi,ebp
00004827: B0 FF                                                 	mov	al,0FFh
00004829: C3                                                    	ret
                                                                      preevaluate_simple_logical_value:
0000482A: 31 D2                                                 	xor	edx,edx
0000482C: 89 15 9C A2 01 00                                     	mov	[logical_value_parentheses],edx
                                                                      find_logical_value_boundaries:
00004832: 8A 06                                                 	mov	al,[esi]
00004834: 08 C0                                                 	or	al,al
00004836: 74 43                                                 	jz	logical_value_boundaries_found
00004838: 3C 91                                                 	cmp	al,91h
0000483A: 74 25                                                 	je	logical_value_internal_parentheses
0000483C: 3C 92                                                 	cmp	al,92h
0000483E: 74 29                                                 	je	logical_value_boundaries_parenthesis_close
00004840: 3C 7C                                                 	cmp	al,'|'
00004842: 74 37                                                 	je	logical_value_boundaries_found
00004844: 3C 26                                                 	cmp	al,'&'
00004846: 74 33                                                 	je	logical_value_boundaries_found
00004848: 09 D2                                                 	or	edx,edx
0000484A: 75 0E                                                 	jnz	next_symbol_in_logical_value
0000484C: 3C F0                                                 	cmp	al,0F0h
0000484E: 74 08                                                 	je	preevaluable_logical_operator
00004850: 3C F7                                                 	cmp	al,0F7h
00004852: 74 04                                                 	je	preevaluable_logical_operator
00004854: 3C F6                                                 	cmp	al,0F6h
00004856: 75 02                                                 	jne	next_symbol_in_logical_value
                                                                      preevaluable_logical_operator:
00004858: 89 F2                                                 	mov	edx,esi
                                                                      next_symbol_in_logical_value:
0000485A: E8 32 35 00 00                                        	call	skip_symbol
0000485F: EB D1                                                 	jmp	find_logical_value_boundaries
                                                                      logical_value_internal_parentheses:
00004861: FF 05 9C A2 01 00                                     	inc	[logical_value_parentheses]
00004867: EB F1                                                 	jmp	next_symbol_in_logical_value
                                                                      logical_value_boundaries_parenthesis_close:
00004869: 83 2D 9C A2 01 00 01                                  	sub	[logical_value_parentheses],1
00004870: 73 E8                                                 	jnc	next_symbol_in_logical_value
00004872: 80 3D C7 A2 01 00 91                                  	cmp	[logical_value_wrapping],91h
00004879: 75 DF                                                 	jne	next_symbol_in_logical_value
                                                                      logical_value_boundaries_found:
0000487B: 09 D2                                                 	or	edx,edx
0000487D: 74 12                                                 	jz	non_preevaluable_logical_value
0000487F: 8A 02                                                 	mov	al,[edx]
00004881: 3C F0                                                 	cmp	al,0F0h
00004883: 74 24                                                 	je	compare_symbols
00004885: 3C F7                                                 	cmp	al,0F7h
00004887: 74 5A                                                 	je	compare_symbol_types
00004889: 3C F6                                                 	cmp	al,0F6h
0000488B: 0F 84 9B 00 00 00                                     	je	scan_symbols_list
                                                                      non_preevaluable_logical_value:
00004891: 89 F1                                                 	mov	ecx,esi
00004893: 89 DE                                                 	mov	esi,ebx
00004895: 29 F1                                                 	sub	ecx,esi
00004897: 74 8C                                                 	jz	invalid_logical_value
00004899: 39 FE                                                 	cmp	esi,edi
0000489B: 74 05                                                 	je	leave_logical_value_intact
0000489D: F3 A4                                                 	rep	movs byte [edi],[esi]
0000489F: 30 C0                                                 	xor	al,al
000048A1: C3                                                    	ret
                                                                      leave_logical_value_intact:
000048A2: 01 CF                                                 	add	edi,ecx
000048A4: 01 CE                                                 	add	esi,ecx
000048A6: 30 C0                                                 	xor	al,al
000048A8: C3                                                    	ret
                                                                      compare_symbols:
000048A9: 8D 4E FF                                              	lea	ecx,[esi-1]
000048AC: 29 D1                                                 	sub	ecx,edx
000048AE: 89 D0                                                 	mov	eax,edx
000048B0: 29 D8                                                 	sub	eax,ebx
000048B2: 39 C1                                                 	cmp	ecx,eax
000048B4: 75 0D                                                 	jne	preevaluated_false
000048B6: 56 57                                                 	push	esi edi
000048B8: 89 DE                                                 	mov	esi,ebx
000048BA: 8D 7A 01                                              	lea	edi,[edx+1]
000048BD: F3 A6                                                 	repe	cmps byte [esi],[edi]
000048BF: 5F 5E                                                 	pop	edi esi
000048C1: 74 10                                                 	je	preevaluated_true
                                                                      preevaluated_false:
000048C3: 89 F8                                                 	mov	eax,edi
000048C5: 29 E8                                                 	sub	eax,ebp
000048C7: A9 01 00 00 00                                        	test	eax,1
000048CC: 75 10                                                 	jnz	store_true
                                                                      store_false:
000048CE: 89 EF                                                 	mov	edi,ebp
000048D0: B0 30                                                 	mov	al,'0'
000048D2: C3                                                    	ret
                                                                      preevaluated_true:
000048D3: 89 F8                                                 	mov	eax,edi
000048D5: 29 E8                                                 	sub	eax,ebp
000048D7: A9 01 00 00 00                                        	test	eax,1
000048DC: 75 F0                                                 	jnz	store_false
                                                                      store_true:
000048DE: 89 EF                                                 	mov	edi,ebp
000048E0: B0 31                                                 	mov	al,'1'
000048E2: C3                                                    	ret
                                                                      compare_symbol_types:
000048E3: 56                                                    	push	esi
000048E4: 8D 72 01                                              	lea	esi,[edx+1]
                                                                      type_comparison:
000048E7: 3B 34 24                                              	cmp	esi,[esp]
000048EA: 74 35                                                 	je	types_compared
000048EC: 8A 06                                                 	mov	al,[esi]
000048EE: 3A 03                                                 	cmp	al,[ebx]
000048F0: 75 37                                                 	jne	different_type
000048F2: 3C 28                                                 	cmp	al,'('
000048F4: 75 1B                                                 	jne	equal_type
000048F6: 8A 46 01                                              	mov	al,[esi+1]
000048F9: 8A 63 01                                              	mov	ah,[ebx+1]
000048FC: 38 E0                                                 	cmp	al,ah
000048FE: 74 11                                                 	je	equal_type
00004900: 08 C0                                                 	or	al,al
00004902: 74 25                                                 	jz	different_type
00004904: 08 E4                                                 	or	ah,ah
00004906: 74 21                                                 	jz	different_type
00004908: 3C 2E                                                 	cmp	al,'.'
0000490A: 74 1D                                                 	je	different_type
0000490C: 80 FC 2E                                              	cmp	ah,'.'
0000490F: 74 18                                                 	je	different_type
                                                                      equal_type:
00004911: E8 7B 34 00 00                                        	call	skip_symbol
00004916: 87 F3                                                 	xchg	esi,ebx
00004918: E8 74 34 00 00                                        	call	skip_symbol
0000491D: 87 F3                                                 	xchg	esi,ebx
0000491F: EB C6                                                 	jmp	type_comparison
                                                                      types_compared:
00004921: 5E                                                    	pop	esi
00004922: 80 3B F7                                              	cmp	byte [ebx],0F7h
00004925: 75 9C                                                 	jne	preevaluated_false
00004927: EB AA                                                 	jmp	preevaluated_true
                                                                      different_type:
00004929: 5E                                                    	pop	esi
0000492A: EB 97                                                 	jmp	preevaluated_false
                                                                      scan_symbols_list:
0000492C: 57 56                                                 	push	edi esi
0000492E: 8D 72 01                                              	lea	esi,[edx+1]
00004931: 29 DA                                                 	sub	edx,ebx
00004933: AC                                                    	lods	byte [esi]
00004934: 3C 3C                                                 	cmp	al,'<'
00004936: 75 59                                                 	jne	invalid_symbols_list
                                                                      get_next_from_list:
00004938: 89 F7                                                 	mov	edi,esi
                                                                      get_from_list:
0000493A: 80 3E 2C                                              	cmp	byte [esi],','
0000493D: 74 11                                                 	je	compare_in_list
0000493F: 80 3E 3E                                              	cmp	byte [esi],'>'
00004942: 74 0C                                                 	je	compare_in_list
00004944: 3B 34 24                                              	cmp	esi,[esp]
00004947: 73 48                                                 	jae	invalid_symbols_list
00004949: E8 43 34 00 00                                        	call	skip_symbol
0000494E: EB EA                                                 	jmp	get_from_list
                                                                      compare_in_list:
00004950: 89 F1                                                 	mov	ecx,esi
00004952: 29 F9                                                 	sub	ecx,edi
00004954: 39 D1                                                 	cmp	ecx,edx
00004956: 75 28                                                 	jne	not_equal_length_in_list
00004958: 89 DE                                                 	mov	esi,ebx
0000495A: F3 A6                                                 	repe	cmps byte [esi],[edi]
0000495C: 89 FE                                                 	mov	esi,edi
0000495E: 75 1E                                                 	jne	not_equal_in_list
                                                                      skip_rest_of_list:
00004960: 80 3E 3E                                              	cmp	byte [esi],'>'
00004963: 74 0C                                                 	je	check_list_end
00004965: 3B 34 24                                              	cmp	esi,[esp]
00004968: 73 27                                                 	jae	invalid_symbols_list
0000496A: E8 22 34 00 00                                        	call	skip_symbol
0000496F: EB EF                                                 	jmp	skip_rest_of_list
                                                                      check_list_end:
00004971: 46                                                    	inc	esi
00004972: 3B 34 24                                              	cmp	esi,[esp]
00004975: 75 1A                                                 	jne	invalid_symbols_list
00004977: 5E 5F                                                 	pop	esi edi
00004979: E9 55 FF FF FF                                        	jmp	preevaluated_true
                                                                      not_equal_in_list:
0000497E: 01 CE                                                 	add	esi,ecx
                                                                      not_equal_length_in_list:
00004980: AC                                                    	lods	byte [esi]
00004981: 3C 2C                                                 	cmp	al,','
00004983: 74 B3                                                 	je	get_next_from_list
00004985: 3B 34 24                                              	cmp	esi,[esp]
00004988: 75 07                                                 	jne	invalid_symbols_list
0000498A: 5E 5F                                                 	pop	esi edi
0000498C: E9 32 FF FF FF                                        	jmp	preevaluated_false
                                                                      invalid_symbols_list:
00004991: 5E 5F                                                 	pop	esi edi
00004993: E9 8D FE FF FF                                        	jmp	invalid_logical_value
                                                                
                                                                include '..\assemble.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                assembler:
00004998: 31 C0                                                 	xor	eax,eax
0000499A: A3 54 A2 01 00                                        	mov	[stub_size],eax
0000499F: 66 A3 5E A1 01 00                                     	mov	[current_pass],ax
000049A5: A3 44 A2 01 00                                        	mov	[resolver_flags],eax
000049AA: A3 50 A2 01 00                                        	mov	[number_of_sections],eax
000049AF: A3 7C A2 01 00                                        	mov	[actual_fixups_size],eax
                                                                      assembler_loop:
000049B4: A1 C0 A1 01 00                                        	mov	eax,[labels_list]
000049B9: A3 F0 A1 01 00                                        	mov	[tagged_blocks],eax
000049BE: A1 40 A1 01 00                                        	mov	eax,[additional_memory]
000049C3: A3 64 A1 01 00                                        	mov	[free_additional_memory],eax
000049C8: A1 44 A1 01 00                                        	mov	eax,[additional_memory_end]
000049CD: A3 F4 A1 01 00                                        	mov	[structures_buffer],eax
000049D2: 8B 35 68 A1 01 00                                     	mov	esi,[source_start]
000049D8: 8B 3D 6C A1 01 00                                     	mov	edi,[code_start]
000049DE: 31 C0                                                 	xor	eax,eax
000049E0: A3 28 A2 01 00                                        	mov	dword [adjustment],eax
000049E5: A3 2C A2 01 00                                        	mov	dword [adjustment+4],eax
000049EA: A3 D0 A1 01 00                                        	mov	[addressing_space],eax
000049EF: A3 E8 A1 01 00                                        	mov	[error_line],eax
000049F4: A3 DC A1 01 00                                        	mov	[counter],eax
000049F9: A3 40 A2 01 00                                        	mov	[format_flags],eax
000049FE: A3 4C A2 01 00                                        	mov	[number_of_relocations],eax
00004A03: A3 D8 A1 01 00                                        	mov	[undefined_data_end],eax
00004A08: A3 A0 A2 01 00                                        	mov	[file_extension],eax
00004A0D: A2 C8 A2 01 00                                        	mov	[next_pass_needed],al
00004A12: A2 C9 A2 01 00                                        	mov	[output_format],al
00004A17: A2 CB A2 01 00                                        	mov	[adjustment_sign],al
00004A1C: A2 CC A2 01 00                                        	mov	[evex_mode],al
00004A21: C6 05 CA A2 01 00 10                                  	mov	[code_type],16
00004A28: E8 67 01 00 00                                        	call	init_addressing_space
                                                                      pass_loop:
00004A2D: E8 A7 01 00 00                                        	call	assemble_line
00004A32: 73 F9                                                 	jnc	pass_loop
00004A34: A1 44 A1 01 00                                        	mov	eax,[additional_memory_end]
00004A39: 3B 05 F4 A1 01 00                                     	cmp	eax,[structures_buffer]
00004A3F: 74 10                                                 	je	pass_done
00004A41: 83 E8 18                                              	sub	eax,18h
00004A44: 8B 40 04                                              	mov	eax,[eax+4]
00004A47: A3 80 A1 01 00                                        	mov	[current_line],eax
00004A4C: E9 33 C0 FF FF                                        	jmp	missing_end_directive
                                                                      pass_done:
00004A51: E8 DD 39 00 00                                        	call	close_pass
00004A56: A1 C0 A1 01 00                                        	mov	eax,[labels_list]
                                                                      check_symbols:
00004A5B: 3B 05 3C A1 01 00                                     	cmp	eax,[memory_end]
00004A61: 0F 83 AC 00 00 00                                     	jae	symbols_checked
00004A67: F6 40 08 08                                           	test	byte [eax+8],8
00004A6B: 74 28                                                 	jz	symbol_defined_ok
00004A6D: 66 8B 0D 5E A1 01 00                                  	mov	cx,[current_pass]
00004A74: 66 3B 48 12                                           	cmp	cx,[eax+18]
00004A78: 75 1B                                                 	jne	symbol_defined_ok
00004A7A: F6 40 08 01                                           	test	byte [eax+8],1
00004A7E: 74 15                                                 	jz	symbol_defined_ok
00004A80: 66 2B 48 10                                           	sub	cx,[eax+16]
00004A84: 66 83 F9 01                                           	cmp	cx,1
00004A88: 75 0B                                                 	jne	symbol_defined_ok
00004A8A: 80 60 08 FE                                           	and	byte [eax+8],not 1
00004A8E: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      symbol_defined_ok:
00004A95: F6 40 08 10                                           	test	byte [eax+8],10h
00004A99: 74 32                                                 	jz	use_prediction_ok
00004A9B: 66 8B 0D 5E A1 01 00                                  	mov	cx,[current_pass]
00004AA2: 80 60 08 EF                                           	and	byte [eax+8],not 10h
00004AA6: F6 40 08 20                                           	test	byte [eax+8],20h
00004AAA: 75 0E                                                 	jnz	check_use_prediction
00004AAC: 66 3B 48 12                                           	cmp	cx,[eax+18]
00004AB0: 75 1B                                                 	jne	use_prediction_ok
00004AB2: F6 40 08 08                                           	test	byte [eax+8],8
00004AB6: 74 15                                                 	jz	use_prediction_ok
00004AB8: EB 0C                                                 	jmp	use_misprediction
                                                                      check_use_prediction:
00004ABA: F6 40 08 08                                           	test	byte [eax+8],8
00004ABE: 74 06                                                 	jz	use_misprediction
00004AC0: 66 3B 48 12                                           	cmp	cx,[eax+18]
00004AC4: 74 07                                                 	je	use_prediction_ok
                                                                      use_misprediction:
00004AC6: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      use_prediction_ok:
00004ACD: F6 40 08 40                                           	test	byte [eax+8],40h
00004AD1: 74 38                                                 	jz	check_next_symbol
00004AD3: 80 60 08 BF                                           	and	byte [eax+8],not 40h
00004AD7: F6 40 08 04                                           	test	byte [eax+8],4
00004ADB: 75 27                                                 	jnz	define_misprediction
00004ADD: 66 8B 0D 5E A1 01 00                                  	mov	cx,[current_pass]
00004AE4: F6 40 08 80                                           	test	byte [eax+8],80h
00004AE8: 75 0E                                                 	jnz	check_define_prediction
00004AEA: 66 3B 48 10                                           	cmp	cx,[eax+16]
00004AEE: 75 1B                                                 	jne	check_next_symbol
00004AF0: F6 40 08 01                                           	test	byte [eax+8],1
00004AF4: 74 15                                                 	jz	check_next_symbol
00004AF6: EB 0C                                                 	jmp	define_misprediction
                                                                      check_define_prediction:
00004AF8: F6 40 08 01                                           	test	byte [eax+8],1
00004AFC: 74 06                                                 	jz	define_misprediction
00004AFE: 66 3B 48 10                                           	cmp	cx,[eax+16]
00004B02: 74 07                                                 	je	check_next_symbol
                                                                      define_misprediction:
00004B04: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      check_next_symbol:
00004B0B: 83 C0 20                                              	add	eax,LABEL_STRUCTURE_SIZE
00004B0E: E9 48 FF FF FF                                        	jmp	check_symbols
                                                                      symbols_checked:
00004B13: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
00004B1A: 75 3C                                                 	jne	next_pass
00004B1C: A1 E8 A1 01 00                                        	mov	eax,[error_line]
00004B21: 09 C0                                                 	or	eax,eax
00004B23: 74 52                                                 	jz	assemble_ok
00004B25: A3 80 A1 01 00                                        	mov	[current_line],eax
00004B2A: 81 3D EC A1 01 00 C0 09 00 00                         	cmp	[error],undefined_symbol
00004B34: 75 0F                                                 	jne	error_confirmed
00004B36: A1 E4 A1 01 00                                        	mov	eax,[error_info]
00004B3B: 09 C0                                                 	or	eax,eax
00004B3D: 74 06                                                 	jz	error_confirmed
00004B3F: F6 40 08 01                                           	test	byte [eax+8],1
00004B43: 75 13                                                 	jnz	next_pass
                                                                      error_confirmed:
00004B45: E8 00 00 00 00                                        	call	error_handler
                                                                      error_handler:
00004B4A: A1 EC A1 01 00                                        	mov	eax,[error]
00004B4F: 2D 4A 4B 00 00                                        	sub	eax,error_handler
00004B54: 01 04 24                                              	add	[esp],eax
00004B57: C3                                                    	ret
                                                                      next_pass:
00004B58: 66 FF 05 5E A1 01 00                                  	inc	[current_pass]
00004B5F: 66 A1 5E A1 01 00                                     	mov	ax,[current_pass]
00004B65: 66 3B 05 5C A1 01 00                                  	cmp	ax,[passes_limit]
00004B6C: 0F 84 52 BD FF FF                                     	je	code_cannot_be_generated
00004B72: E9 3D FE FF FF                                        	jmp	assembler_loop
                                                                      assemble_ok:
00004B77: C3                                                    	ret
                                                                
                                                                create_addressing_space:
00004B78: 8B 1D D0 A1 01 00                                     	mov	ebx,[addressing_space]
00004B7E: 85 DB                                                 	test	ebx,ebx
00004B80: 74 12                                                 	jz	init_addressing_space
00004B82: F6 43 0A 01                                           	test	byte [ebx+0Ah],1
00004B86: 0F 85 A8 BD FF FF                                     	jnz	illegal_instruction
00004B8C: 89 F8                                                 	mov	eax,edi
00004B8E: 2B 43 18                                              	sub	eax,[ebx+18h]
00004B91: 89 43 1C                                              	mov	[ebx+1Ch],eax
                                                                      init_addressing_space:
00004B94: 8B 1D F0 A1 01 00                                     	mov	ebx,[tagged_blocks]
00004B9A: C7 43 FC 10 00 00 00                                  	mov	dword [ebx-4],10h
00004BA1: C7 43 F8 24 00 00 00                                  	mov	dword [ebx-8],24h
00004BA8: 83 EB 2C                                              	sub	ebx,8+24h
00004BAB: 39 FB                                                 	cmp	ebx,edi
00004BAD: 0F 86 E9 BC FF FF                                     	jbe	out_of_memory
00004BB3: 89 1D F0 A1 01 00                                     	mov	[tagged_blocks],ebx
00004BB9: 89 1D D0 A1 01 00                                     	mov	[addressing_space],ebx
00004BBF: 31 C0                                                 	xor	eax,eax
00004BC1: 89 3B                                                 	mov	[ebx],edi
00004BC3: 89 43 04                                              	mov	[ebx+4],eax
00004BC6: 89 43 08                                              	mov	[ebx+8],eax
00004BC9: 89 43 10                                              	mov	[ebx+10h],eax
00004BCC: 89 43 14                                              	mov	[ebx+14h],eax
00004BCF: 89 7B 18                                              	mov	[ebx+18h],edi
00004BD2: 89 43 1C                                              	mov	[ebx+1Ch],eax
00004BD5: 89 43 20                                              	mov	[ebx+20h],eax
00004BD8: C3                                                    	ret
                                                                
                                                                assemble_line:
00004BD9: A1 F0 A1 01 00                                        	mov	eax,[tagged_blocks]
00004BDE: 2D 00 01 00 00                                        	sub	eax,100h
00004BE3: 39 C7                                                 	cmp	edi,eax
00004BE5: 0F 87 B1 BC FF FF                                     	ja	out_of_memory
00004BEB: AC                                                    	lods	byte [esi]
00004BEC: 3C 01                                                 	cmp	al,1
00004BEE: 0F 84 66 03 00 00                                     	je	assemble_instruction
00004BF4: 0F 82 9D 03 00 00                                     	jb	source_end
00004BFA: 3C 03                                                 	cmp	al,3
00004BFC: 0F 82 96 00 00 00                                     	jb	define_label
00004C02: 0F 84 D8 01 00 00                                     	je	define_constant
00004C08: 3C 04                                                 	cmp	al,4
00004C0A: 0F 84 E6 02 00 00                                     	je	label_addressing_space
00004C10: 3C 0F                                                 	cmp	al,0Fh
00004C12: 74 1D                                                 	je	new_line
00004C14: 3C 13                                                 	cmp	al,13h
00004C16: 74 0E                                                 	je	code_type_setting
00004C18: 3C 10                                                 	cmp	al,10h
00004C1A: 0F 85 14 BD FF FF                                     	jne	illegal_instruction
00004C20: AC                                                    	lods	byte [esi]
00004C21: E9 FA 67 00 00                                        	jmp	segment_prefix
                                                                      code_type_setting:
00004C26: AC                                                    	lods	byte [esi]
00004C27: A2 CA A2 01 00                                        	mov	[code_type],al
00004C2C: E9 49 03 00 00                                        	jmp	instruction_assembled
                                                                      new_line:
00004C31: AD                                                    	lods	dword [esi]
00004C32: A3 80 A1 01 00                                        	mov	[current_line],eax
00004C37: 80 25 CF A2 01 00 00                                  	and	[prefix_flags],0
00004C3E: 83 3D 58 A1 01 00 00                                  	cmp	[symbols_file],0
00004C45: 74 43                                                 	je	continue_line
00004C47: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
00004C4E: 75 3A                                                 	jne	continue_line
00004C50: 8B 1D F0 A1 01 00                                     	mov	ebx,[tagged_blocks]
00004C56: C7 43 FC 01 00 00 00                                  	mov	dword [ebx-4],1
00004C5D: C7 43 F8 14 00 00 00                                  	mov	dword [ebx-8],14h
00004C64: 83 EB 1C                                              	sub	ebx,8+14h
00004C67: 39 FB                                                 	cmp	ebx,edi
00004C69: 0F 86 2D BC FF FF                                     	jbe	out_of_memory
00004C6F: 89 1D F0 A1 01 00                                     	mov	[tagged_blocks],ebx
00004C75: 89 03                                                 	mov	[ebx],eax
00004C77: 89 7B 04                                              	mov	[ebx+4],edi
00004C7A: A1 D0 A1 01 00                                        	mov	eax,[addressing_space]
00004C7F: 89 43 08                                              	mov	[ebx+8],eax
00004C82: A0 CA A2 01 00                                        	mov	al,[code_type]
00004C87: 88 43 10                                              	mov	[ebx+10h],al
                                                                      continue_line:
00004C8A: 80 3E 0F                                              	cmp	byte [esi],0Fh
00004C8D: 0F 84 02 03 00 00                                     	je	line_assembled
00004C93: E9 41 FF FF FF                                        	jmp	assemble_line
                                                                      define_label:
00004C98: AD                                                    	lods	dword [esi]
00004C99: 83 F8 0F                                              	cmp	eax,0Fh
00004C9C: 0F 82 B8 BD FF FF                                     	jb	invalid_use_of_symbol
00004CA2: 0F 84 C7 BD FF FF                                     	je	reserved_word_used_as_symbol
00004CA8: 89 C3                                                 	mov	ebx,eax
00004CAA: AC                                                    	lods	byte [esi]
00004CAB: A2 BA A2 01 00                                        	mov	[label_size],al
00004CB0: E8 02 00 00 00                                        	call	make_label
00004CB5: EB D3                                                 	jmp	continue_line
                                                                      make_label:
00004CB7: 89 F8                                                 	mov	eax,edi
00004CB9: 31 D2                                                 	xor	edx,edx
00004CBB: 30 C9                                                 	xor	cl,cl
00004CBD: 8B 2D D0 A1 01 00                                     	mov	ebp,[addressing_space]
00004CC3: 3E 2B 45 00                                           	sub	eax,[ds:ebp]
00004CC7: 3E 1B 55 04                                           	sbb	edx,[ds:ebp+4]
00004CCB: 3E 1A 4D 08                                           	sbb	cl,[ds:ebp+8]
00004CCF: 7A 05                                                 	jp	label_value_ok
00004CD1: E8 25 26 00 00                                        	call	recoverable_overflow
                                                                      label_value_ok:
00004CD6: 88 0D C4 A2 01 00                                     	mov	[address_sign],cl
00004CDC: 3E F6 45 0A 01                                        	test	byte [ds:ebp+0Ah],1
00004CE1: 75 34                                                 	jnz	make_virtual_label
00004CE3: 80 4B 09 01                                           	or	byte [ebx+9],1
00004CE7: 87 03                                                 	xchg	eax,[ebx]
00004CE9: 87 53 04                                              	xchg	edx,[ebx+4]
00004CEC: 8A 6B 09                                              	mov	ch,[ebx+9]
00004CEF: D0 ED                                                 	shr	ch,1
00004CF1: 80 E5 01                                              	and	ch,1
00004CF4: F6 DD                                                 	neg	ch
00004CF6: 2B 03                                                 	sub	eax,[ebx]
00004CF8: 1B 53 04                                              	sbb	edx,[ebx+4]
00004CFB: 18 CD                                                 	sbb	ch,cl
00004CFD: A3 28 A2 01 00                                        	mov	dword [adjustment],eax
00004D02: 89 15 2C A2 01 00                                     	mov	dword [adjustment+4],edx
00004D08: 88 2D CB A2 01 00                                     	mov	[adjustment_sign],ch
00004D0E: 08 E8                                                 	or	al,ch
00004D10: 09 D0                                                 	or	eax,edx
00004D12: 0F 95 C4                                              	setnz	ah
00004D15: EB 16                                                 	jmp	finish_label
                                                                      make_virtual_label:
00004D17: 80 63 09 FE                                           	and	byte [ebx+9],not 1
00004D1B: 3B 03                                                 	cmp	eax,[ebx]
00004D1D: 89 03                                                 	mov	[ebx],eax
00004D1F: 0F 95 C4                                              	setne	ah
00004D22: 3B 53 04                                              	cmp	edx,[ebx+4]
00004D25: 89 53 04                                              	mov	[ebx+4],edx
00004D28: 0F 95 C0                                              	setne	al
00004D2B: 08 C4                                                 	or	ah,al
                                                                      finish_label:
00004D2D: 8B 2D D0 A1 01 00                                     	mov	ebp,[addressing_space]
00004D33: 3E 8A 6D 09                                           	mov	ch,[ds:ebp+9]
00004D37: 8A 0D BA A2 01 00                                     	mov	cl,[label_size]
00004D3D: 3E 8B 55 14                                           	mov	edx,[ds:ebp+14h]
00004D41: 3E 8B 6D 10                                           	mov	ebp,[ds:ebp+10h]
                                                                      finish_label_symbol:
00004D45: A0 C4 A2 01 00                                        	mov	al,[address_sign]
00004D4A: 32 43 09                                              	xor	al,[ebx+9]
00004D4D: 24 02                                                 	and	al,10b
00004D4F: 08 C4                                                 	or	ah,al
00004D51: 30 43 09                                              	xor	[ebx+9],al
00004D54: 3A 4B 0A                                              	cmp	cl,[ebx+10]
00004D57: 88 4B 0A                                              	mov	[ebx+10],cl
00004D5A: 0F 95 C0                                              	setne	al
00004D5D: 08 C4                                                 	or	ah,al
00004D5F: 3A 6B 0B                                              	cmp	ch,[ebx+11]
00004D62: 88 6B 0B                                              	mov	[ebx+11],ch
00004D65: 0F 95 C0                                              	setne	al
00004D68: 08 C4                                                 	or	ah,al
00004D6A: 3B 6B 0C                                              	cmp	ebp,[ebx+12]
00004D6D: 89 6B 0C                                              	mov	[ebx+12],ebp
00004D70: 0F 95 C0                                              	setne	al
00004D73: 08 C4                                                 	or	ah,al
00004D75: 08 ED                                                 	or	ch,ch
00004D77: 74 0B                                                 	jz	label_symbol_ok
00004D79: 3B 53 14                                              	cmp	edx,[ebx+20]
00004D7C: 89 53 14                                              	mov	[ebx+20],edx
00004D7F: 0F 95 C0                                              	setne	al
00004D82: 08 C4                                                 	or	ah,al
                                                                      label_symbol_ok:
00004D84: 66 8B 0D 5E A1 01 00                                  	mov	cx,[current_pass]
00004D8B: 66 87 4B 10                                           	xchg	[ebx+16],cx
00004D8F: 8B 15 80 A1 01 00                                     	mov	edx,[current_line]
00004D95: 89 53 1C                                              	mov	[ebx+28],edx
00004D98: 80 63 08 FD                                           	and	byte [ebx+8],not 2
00004D9C: F6 43 08 01                                           	test	byte [ebx+8],1
00004DA0: 74 39                                                 	jz	new_label
00004DA2: 66 3B 4B 10                                           	cmp	cx,[ebx+16]
00004DA6: 0F 84 CA BC FF FF                                     	je	symbol_already_defined
00004DAC: 0F BA 73 08 0A                                        	btr	dword [ebx+8],10
00004DB1: 72 20                                                 	jc	requalified_label
00004DB3: 66 41                                                 	inc	cx
00004DB5: 66 2B 4B 10                                           	sub	cx,[ebx+16]
00004DB9: 0F 95 C0                                              	setnz	al
00004DBC: 08 C4                                                 	or	ah,al
00004DBE: 74 1A                                                 	jz	label_made
00004DC0: F6 43 08 08                                           	test	byte [ebx+8],8
00004DC4: 74 14                                                 	jz	label_made
00004DC6: 66 8B 0D 5E A1 01 00                                  	mov	cx,[current_pass]
00004DCD: 66 3B 4B 12                                           	cmp	cx,[ebx+18]
00004DD1: 75 07                                                 	jne	label_made
                                                                      requalified_label:
00004DD3: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      label_made:
00004DDA: C3                                                    	ret
                                                                      new_label:
00004DDB: 80 4B 08 01                                           	or	byte [ebx+8],1
00004DDF: C3                                                    	ret
                                                                      define_constant:
00004DE0: AD                                                    	lods	dword [esi]
00004DE1: 46                                                    	inc	esi
00004DE2: 83 F8 0F                                              	cmp	eax,0Fh
00004DE5: 0F 82 6F BC FF FF                                     	jb	invalid_use_of_symbol
00004DEB: 0F 84 7E BC FF FF                                     	je	reserved_word_used_as_symbol
00004DF1: 50                                                    	push	eax
00004DF2: 80 0D A5 A2 01 00 01                                  	or	[operand_flags],1
00004DF9: E8 A1 26 00 00                                        	call	get_value
00004DFE: 5B                                                    	pop	ebx
00004DFF: 30 C9                                                 	xor	cl,cl
00004E01: 8A 2D C0 A2 01 00                                     	mov	ch,[value_type]
00004E07: 80 FD 03                                              	cmp	ch,3
00004E0A: 0F 84 4A BC FF FF                                     	je	invalid_use_of_symbol
                                                                      make_constant:
00004E10: 80 63 09 FE                                           	and	byte [ebx+9],not 1
00004E14: 3B 03                                                 	cmp	eax,[ebx]
00004E16: 89 03                                                 	mov	[ebx],eax
00004E18: 0F 95 C4                                              	setne	ah
00004E1B: 3B 53 04                                              	cmp	edx,[ebx+4]
00004E1E: 89 53 04                                              	mov	[ebx+4],edx
00004E21: 0F 95 C0                                              	setne	al
00004E24: 08 C4                                                 	or	ah,al
00004E26: A0 C1 A2 01 00                                        	mov	al,[value_sign]
00004E2B: 32 43 09                                              	xor	al,[ebx+9]
00004E2E: 24 02                                                 	and	al,10b
00004E30: 08 C4                                                 	or	ah,al
00004E32: 30 43 09                                              	xor	[ebx+9],al
00004E35: 3A 4B 0A                                              	cmp	cl,[ebx+10]
00004E38: 88 4B 0A                                              	mov	[ebx+10],cl
00004E3B: 0F 95 C0                                              	setne	al
00004E3E: 08 C4                                                 	or	ah,al
00004E40: 3A 6B 0B                                              	cmp	ch,[ebx+11]
00004E43: 88 6B 0B                                              	mov	[ebx+11],ch
00004E46: 0F 95 C0                                              	setne	al
00004E49: 08 C4                                                 	or	ah,al
00004E4B: 31 D2                                                 	xor	edx,edx
00004E4D: 3B 53 0C                                              	cmp	edx,[ebx+12]
00004E50: 89 53 0C                                              	mov	[ebx+12],edx
00004E53: 0F 95 C0                                              	setne	al
00004E56: 08 C4                                                 	or	ah,al
00004E58: 08 ED                                                 	or	ch,ch
00004E5A: 74 11                                                 	jz	constant_symbol_ok
00004E5C: 8B 15 30 A2 01 00                                     	mov	edx,[symbol_identifier]
00004E62: 3B 53 14                                              	cmp	edx,[ebx+20]
00004E65: 89 53 14                                              	mov	[ebx+20],edx
00004E68: 0F 95 C0                                              	setne	al
00004E6B: 08 C4                                                 	or	ah,al
                                                                      constant_symbol_ok:
00004E6D: 66 8B 0D 5E A1 01 00                                  	mov	cx,[current_pass]
00004E74: 66 87 4B 10                                           	xchg	[ebx+16],cx
00004E78: 8B 15 80 A1 01 00                                     	mov	edx,[current_line]
00004E7E: 89 53 1C                                              	mov	[ebx+28],edx
00004E81: F6 43 08 01                                           	test	byte [ebx+8],1
00004E85: 74 66                                                 	jz	new_constant
00004E87: 66 3B 4B 10                                           	cmp	cx,[ebx+16]
00004E8B: 75 17                                                 	jne	redeclare_constant
00004E8D: F6 43 08 02                                           	test	byte [ebx+8],2
00004E91: 0F 84 DF BB FF FF                                     	jz	symbol_already_defined
00004E97: 80 4B 08 04                                           	or	byte [ebx+8],4
00004E9B: 80 63 09 FB                                           	and	byte [ebx+9],not 4
00004E9F: E9 D6 00 00 00                                        	jmp	instruction_assembled
                                                                      redeclare_constant:
00004EA4: 0F BA 73 08 0A                                        	btr	dword [ebx+8],10
00004EA9: 72 36                                                 	jc	requalified_constant
00004EAB: 66 41                                                 	inc	cx
00004EAD: 66 2B 4B 10                                           	sub	cx,[ebx+16]
00004EB1: 0F 95 C0                                              	setnz	al
00004EB4: 08 C4                                                 	or	ah,al
00004EB6: 0F 84 BE 00 00 00                                     	jz	instruction_assembled
00004EBC: F6 43 08 04                                           	test	byte [ebx+8],4
00004EC0: 0F 85 B4 00 00 00                                     	jnz	instruction_assembled
00004EC6: F6 43 08 08                                           	test	byte [ebx+8],8
00004ECA: 0F 84 AA 00 00 00                                     	jz	instruction_assembled
00004ED0: 66 8B 0D 5E A1 01 00                                  	mov	cx,[current_pass]
00004ED7: 66 3B 4B 12                                           	cmp	cx,[ebx+18]
00004EDB: 0F 85 99 00 00 00                                     	jne	instruction_assembled
                                                                      requalified_constant:
00004EE1: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
00004EE8: E9 8D 00 00 00                                        	jmp	instruction_assembled
                                                                      new_constant:
00004EED: 80 4B 08 03                                           	or	byte [ebx+8],1+2
00004EF1: E9 84 00 00 00                                        	jmp	instruction_assembled
                                                                      label_addressing_space:
00004EF6: AD                                                    	lods	dword [esi]
00004EF7: 83 F8 0F                                              	cmp	eax,0Fh
00004EFA: 0F 82 5A BB FF FF                                     	jb	invalid_use_of_symbol
00004F00: 0F 84 69 BB FF FF                                     	je	reserved_word_used_as_symbol
00004F06: 66 8B 0D 5E A1 01 00                                  	mov	cx,[current_pass]
00004F0D: F6 40 08 01                                           	test	byte [eax+8],1
00004F11: 74 17                                                 	jz	make_addressing_space_label
00004F13: 66 3B 48 10                                           	cmp	cx,[eax+16]
00004F17: 0F 84 59 BB FF FF                                     	je	symbol_already_defined
00004F1D: F6 40 09 04                                           	test	byte [eax+9],4
00004F21: 75 07                                                 	jnz	make_addressing_space_label
00004F23: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      make_addressing_space_label:
00004F2A: 66 8B 50 08                                           	mov	dx,[eax+8]
00004F2E: 66 81 E2 FD FE                                        	and	dx,not (2 or 100h)
00004F33: 66 81 CA 05 04                                        	or	dx,1 or 4 or 400h
00004F38: 66 89 50 08                                           	mov	[eax+8],dx
00004F3C: 66 89 48 10                                           	mov	[eax+16],cx
00004F40: 8B 15 80 A1 01 00                                     	mov	edx,[current_line]
00004F46: 89 50 1C                                              	mov	[eax+28],edx
00004F49: 8B 1D D0 A1 01 00                                     	mov	ebx,[addressing_space]
00004F4F: 89 18                                                 	mov	[eax],ebx
00004F51: 80 4B 0A 02                                           	or	byte [ebx+0Ah],2
00004F55: E9 30 FD FF FF                                        	jmp	continue_line
                                                                      assemble_instruction:
                                                                ;	 mov	 [operand_size],0
                                                                ;	 mov	 [operand_flags],0
                                                                ;	 mov	 [operand_prefix],0
                                                                ;	 mov	 [rex_prefix],0
00004F5A: 83 25 A4 A2 01 00 00                                  	and	dword [operand_size],0
                                                                ;	 mov	 [opcode_prefix],0
                                                                ;	 mov	 [vex_required],0
                                                                ;	 mov	 [vex_register],0
                                                                ;	 mov	 [immediate_size],0
00004F61: 83 25 A8 A2 01 00 00                                  	and	dword [opcode_prefix],0
00004F68: E8 00 00 00 00                                        	call	instruction_handler
                                                                      instruction_handler:
00004F6D: 0F B7 1E                                              	movzx	ebx,word [esi]
00004F70: 8A 46 02                                              	mov	al,[esi+2]
00004F73: 83 C6 03                                              	add	esi,3
00004F76: 01 1C 24                                              	add	[esp],ebx
00004F79: C3                                                    	ret
                                                                      instruction_assembled:
00004F7A: F6 05 CF A2 01 00 FE                                  	test	[prefix_flags],not 1
00004F81: 0F 85 AD B9 FF FF                                     	jnz	illegal_instruction
00004F87: 8A 06                                                 	mov	al,[esi]
00004F89: 3C 0F                                                 	cmp	al,0Fh
00004F8B: 74 08                                                 	je	line_assembled
00004F8D: 08 C0                                                 	or	al,al
00004F8F: 0F 85 FD BA FF FF                                     	jnz	extra_characters_on_line
                                                                      line_assembled:
00004F95: F8                                                    	clc
00004F96: C3                                                    	ret
                                                                      source_end:
00004F97: 4E                                                    	dec	esi
00004F98: F9                                                    	stc
00004F99: C3                                                    	ret
                                                                
                                                                org_directive:
00004F9A: AC                                                    	lods	byte [esi]
00004F9B: 3C 28                                                 	cmp	al,'('
00004F9D: 0F 85 87 B9 FF FF                                     	jne	invalid_argument
00004FA3: 80 3E 2E                                              	cmp	byte [esi],'.'
00004FA6: 0F 84 00 BA FF FF                                     	je	invalid_value
00004FAC: E8 74 24 00 00                                        	call	get_qword_value
00004FB1: 8A 0D C0 A2 01 00                                     	mov	cl,[value_type]
00004FB7: F6 C1 01                                              	test	cl,1
00004FBA: 0F 85 9A BA FF FF                                     	jnz	invalid_use_of_symbol
00004FC0: 50                                                    	push	eax
00004FC1: 8B 1D D0 A1 01 00                                     	mov	ebx,[addressing_space]
00004FC7: 89 F8                                                 	mov	eax,edi
00004FC9: 2B 43 18                                              	sub	eax,[ebx+18h]
00004FCC: 89 43 1C                                              	mov	[ebx+1Ch],eax
00004FCF: F6 43 0A 01                                           	test	byte [ebx+0Ah],1
00004FD3: 75 07                                                 	jnz	in_virtual
00004FD5: E8 BA FB FF FF                                        	call	init_addressing_space
00004FDA: EB 0E                                                 	jmp	org_space_ok
                                                                      in_virtual:
00004FDC: E8 EA 07 00 00                                        	call	close_virtual_addressing_space
00004FE1: E8 AE FB FF FF                                        	call	init_addressing_space
00004FE6: 80 4B 0A 01                                           	or	byte [ebx+0Ah],1
                                                                      org_space_ok:
00004FEA: 58                                                    	pop	eax
00004FEB: 88 4B 09                                              	mov	[ebx+9],cl
00004FEE: 8A 0D C1 A2 01 00                                     	mov	cl,[value_sign]
00004FF4: 29 03                                                 	sub	[ebx],eax
00004FF6: 19 53 04                                              	sbb	[ebx+4],edx
00004FF9: 18 4B 08                                              	sbb	byte [ebx+8],cl
00004FFC: 7A 05                                                 	jp	org_value_ok
00004FFE: E8 F8 22 00 00                                        	call	recoverable_overflow
                                                                      org_value_ok:
00005003: 8B 15 30 A2 01 00                                     	mov	edx,[symbol_identifier]
00005009: 89 53 14                                              	mov	[ebx+14h],edx
0000500C: 80 3D C9 A2 01 00 01                                  	cmp	[output_format],1
00005013: 0F 87 61 FF FF FF                                     	ja	instruction_assembled
00005019: 3B 3D 6C A1 01 00                                     	cmp	edi,[code_start]
0000501F: 0F 85 55 FF FF FF                                     	jne	instruction_assembled
00005025: 3D 00 01 00 00                                        	cmp	eax,100h
0000502A: 0F 85 4A FF FF FF                                     	jne	instruction_assembled
00005030: 0F BA 2D 40 A2 01 00 00                               	bts	[format_flags],0
00005038: E9 3D FF FF FF                                        	jmp	instruction_assembled
                                                                label_directive:
0000503D: AC                                                    	lods	byte [esi]
0000503E: 3C 02                                                 	cmp	al,2
00005040: 0F 85 E4 B8 FF FF                                     	jne	invalid_argument
00005046: AD                                                    	lods	dword [esi]
00005047: 83 F8 0F                                              	cmp	eax,0Fh
0000504A: 0F 82 0A BA FF FF                                     	jb	invalid_use_of_symbol
00005050: 0F 84 19 BA FF FF                                     	je	reserved_word_used_as_symbol
00005056: 46                                                    	inc	esi
00005057: 89 C3                                                 	mov	ebx,eax
00005059: C6 05 BA A2 01 00 00                                  	mov	[label_size],0
00005060: AC                                                    	lods	byte [esi]
00005061: 3C 3A                                                 	cmp	al,':'
00005063: 74 05                                                 	je	get_label_size
00005065: 4E                                                    	dec	esi
00005066: 3C 11                                                 	cmp	al,11h
00005068: 75 10                                                 	jne	label_size_ok
                                                                      get_label_size:
0000506A: 66 AD                                                 	lods	word [esi]
0000506C: 3C 11                                                 	cmp	al,11h
0000506E: 0F 85 B6 B8 FF FF                                     	jne	invalid_argument
00005074: 88 25 BA A2 01 00                                     	mov	[label_size],ah
                                                                      label_size_ok:
0000507A: 80 3E 80                                              	cmp	byte [esi],80h
0000507D: 74 0A                                                 	je	get_free_label_value
0000507F: E8 33 FC FF FF                                        	call	make_label
00005084: E9 F1 FE FF FF                                        	jmp	instruction_assembled
                                                                      get_free_label_value:
00005089: 46                                                    	inc	esi
0000508A: AC                                                    	lods	byte [esi]
0000508B: 3C 28                                                 	cmp	al,'('
0000508D: 0F 85 97 B8 FF FF                                     	jne	invalid_argument
00005093: 53 51                                                 	push	ebx ecx
00005095: 80 4B 08 04                                           	or	byte [ebx+8],4
00005099: 80 3E 2E                                              	cmp	byte [esi],'.'
0000509C: 0F 84 0A B9 FF FF                                     	je	invalid_value
000050A2: E8 E4 24 00 00                                        	call	get_address_value
000050A7: 08 FF                                                 	or	bh,bh
000050A9: 0F 95 C5                                              	setnz	ch
000050AC: 86 E9                                                 	xchg	ch,cl
000050AE: 66 89 CD                                              	mov	bp,cx
000050B1: C1 E5 10                                              	shl	ebp,16
000050B4: 86 DF                                                 	xchg	bl,bh
000050B6: 66 89 DD                                              	mov	bp,bx
000050B9: 59 5B                                                 	pop	ecx ebx
000050BB: 80 63 08 FB                                           	and	byte [ebx+8],not 4
000050BF: 8A 2D C0 A2 01 00                                     	mov	ch,[value_type]
000050C5: F6 C5 01                                              	test	ch,1
000050C8: 0F 85 8C B9 FF FF                                     	jnz	invalid_use_of_symbol
                                                                      make_free_label:
000050CE: 80 63 09 FE                                           	and	byte [ebx+9],not 1
000050D2: 3B 03                                                 	cmp	eax,[ebx]
000050D4: 89 03                                                 	mov	[ebx],eax
000050D6: 0F 95 C4                                              	setne	ah
000050D9: 3B 53 04                                              	cmp	edx,[ebx+4]
000050DC: 89 53 04                                              	mov	[ebx+4],edx
000050DF: 0F 95 C0                                              	setne	al
000050E2: 08 C4                                                 	or	ah,al
000050E4: 8B 15 34 A2 01 00                                     	mov	edx,[address_symbol]
000050EA: 8A 0D BA A2 01 00                                     	mov	cl,[label_size]
000050F0: E8 50 FC FF FF                                        	call	finish_label_symbol
000050F5: E9 80 FE FF FF                                        	jmp	instruction_assembled
                                                                load_directive:
000050FA: AC                                                    	lods	byte [esi]
000050FB: 3C 02                                                 	cmp	al,2
000050FD: 0F 85 27 B8 FF FF                                     	jne	invalid_argument
00005103: AD                                                    	lods	dword [esi]
00005104: 83 F8 0F                                              	cmp	eax,0Fh
00005107: 0F 82 4D B9 FF FF                                     	jb	invalid_use_of_symbol
0000510D: 0F 84 5C B9 FF FF                                     	je	reserved_word_used_as_symbol
00005113: 46                                                    	inc	esi
00005114: 50                                                    	push	eax
00005115: B0 01                                                 	mov	al,1
00005117: 80 3E 11                                              	cmp	byte [esi],11h
0000511A: 75 02                                                 	jne	load_size_ok
0000511C: AC                                                    	lods	byte [esi]
0000511D: AC                                                    	lods	byte [esi]
                                                                      load_size_ok:
0000511E: 3C 08                                                 	cmp	al,8
00005120: 0F 87 86 B8 FF FF                                     	ja	invalid_value
00005126: A2 A4 A2 01 00                                        	mov	[operand_size],al
0000512B: 83 25 00 A2 01 00 00                                  	and	dword [value],0
00005132: 83 25 04 A2 01 00 00                                  	and	dword [value+4],0
00005139: AC                                                    	lods	byte [esi]
0000513A: 3C 82                                                 	cmp	al,82h
0000513C: 0F 85 E8 B7 FF FF                                     	jne	invalid_argument
00005142: E8 2A 00 00 00                                        	call	get_data_point
00005147: 72 0D                                                 	jc	value_loaded
00005149: 56 57                                                 	push	esi edi
0000514B: 89 DE                                                 	mov	esi,ebx
0000514D: BF 00 A2 01 00                                        	mov	edi,value
00005152: F3 A4                                                 	rep	movs byte [edi],[esi]
00005154: 5F 5E                                                 	pop	edi esi
                                                                      value_loaded:
00005156: C6 05 C1 A2 01 00 00                                  	mov	[value_sign],0
0000515D: A1 00 A2 01 00                                        	mov	eax,dword [value]
00005162: 8B 15 04 A2 01 00                                     	mov	edx,dword [value+4]
00005168: 5B                                                    	pop	ebx
00005169: 66 31 C9                                              	xor	cx,cx
0000516C: E9 9F FC FF FF                                        	jmp	make_constant
                                                                      get_data_point:
00005171: AC                                                    	lods	byte [esi]
00005172: 3C 3A                                                 	cmp	al,':'
00005174: 0F 84 FA 00 00 00                                     	je	get_data_offset
0000517A: 3C 28                                                 	cmp	al,'('
0000517C: 0F 85 A8 B7 FF FF                                     	jne	invalid_argument
00005182: 8B 1D D0 A1 01 00                                     	mov	ebx,[addressing_space]
00005188: 89 F9                                                 	mov	ecx,edi
0000518A: 2B 4B 18                                              	sub	ecx,[ebx+18h]
0000518D: 89 4B 1C                                              	mov	[ebx+1Ch],ecx
00005190: 80 3E 11                                              	cmp	byte [esi],11h
00005193: 75 62                                                 	jne	get_data_address
00005195: 66 81 7E 05 29 3A                                     	cmp	word [esi+1+4],'):'
0000519B: 75 5A                                                 	jne	get_data_address
0000519D: 46                                                    	inc	esi
0000519E: AD                                                    	lods	dword [esi]
0000519F: 83 C6 02                                              	add	esi,2
000051A2: 80 3E 28                                              	cmp	byte [esi],'('
000051A5: 0F 85 7F B7 FF FF                                     	jne	invalid_argument
000051AB: 46                                                    	inc	esi
000051AC: 83 F8 0F                                              	cmp	eax,0Fh
000051AF: 0F 86 BA B8 FF FF                                     	jbe	reserved_word_used_as_symbol
000051B5: BA C0 09 00 00                                        	mov	edx,undefined_symbol
000051BA: F6 40 08 01                                           	test	byte [eax+8],1
000051BE: 0F 84 87 00 00 00                                     	jz	addressing_space_unavailable
000051C4: BA 17 0A 00 00                                        	mov	edx,symbol_out_of_scope
000051C9: 66 8B 48 10                                           	mov	cx,[eax+16]
000051CD: 66 3B 0D 5E A1 01 00                                  	cmp	cx,[current_pass]
000051D4: 75 75                                                 	jne	addressing_space_unavailable
000051D6: F6 40 09 04                                           	test	byte [eax+9],4
000051DA: 0F 84 7A B8 FF FF                                     	jz	invalid_use_of_symbol
000051E0: 89 C3                                                 	mov	ebx,eax
000051E2: 66 A1 5E A1 01 00                                     	mov	ax,[current_pass]
000051E8: 66 89 43 12                                           	mov	[ebx+18],ax
000051EC: 80 4B 08 08                                           	or	byte [ebx+8],8
000051F0: E8 62 1E 00 00                                        	call	store_label_reference
                                                                      get_addressing_space:
000051F5: 8B 1B                                                 	mov	ebx,[ebx]
                                                                      get_data_address:
000051F7: 53                                                    	push	ebx
000051F8: 80 3E 2E                                              	cmp	byte [esi],'.'
000051FB: 0F 84 AB B7 FF FF                                     	je	invalid_value
00005201: 80 0D A5 A2 01 00 01                                  	or	[operand_flags],1
00005208: E8 7E 23 00 00                                        	call	get_address_value
0000520D: 5D                                                    	pop	ebp
0000520E: E8 98 26 00 00                                        	call	calculate_relative_offset
00005213: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
0000521A: 75 0D                                                 	jne	data_address_type_ok
0000521C: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
00005223: 0F 85 31 B8 FF FF                                     	jne	invalid_use_of_symbol
                                                                      data_address_type_ok:
00005229: 89 FB                                                 	mov	ebx,edi
0000522B: 31 C9                                                 	xor	ecx,ecx
0000522D: 01 C3                                                 	add	ebx,eax
0000522F: 11 CA                                                 	adc	edx,ecx
00005231: 89 D8                                                 	mov	eax,ebx
00005233: 3E 2B 45 18                                           	sub	eax,[ds:ebp+18h]
00005237: 19 CA                                                 	sbb	edx,ecx
00005239: 75 32                                                 	jnz	bad_data_address
0000523B: 8A 0D A4 A2 01 00                                     	mov	cl,[operand_size]
00005241: 01 C8                                                 	add	eax,ecx
00005243: 3E 3B 45 1C                                           	cmp	eax,[ds:ebp+1Ch]
00005247: 77 24                                                 	ja	bad_data_address
00005249: F8                                                    	clc
0000524A: C3                                                    	ret
                                                                      addressing_space_unavailable:
0000524B: 83 3D E8 A1 01 00 00                                  	cmp	[error_line],0
00005252: 75 A3                                                 	jne	get_data_address
00005254: FF 35 80 A1 01 00                                     	push	[current_line]
0000525A: 8F 05 E8 A1 01 00                                     	pop	[error_line]
00005260: 89 15 EC A1 01 00                                     	mov	[error],edx
00005266: A3 E4 A1 01 00                                        	mov	[error_info],eax
0000526B: EB 8A                                                 	jmp	get_data_address
                                                                      bad_data_address:
0000526D: E8 89 20 00 00                                        	call	recoverable_overflow
00005272: F9                                                    	stc
00005273: C3                                                    	ret
                                                                      get_data_offset:
00005274: 80 3D C9 A2 01 00 02                                  	cmp	[output_format],2
0000527B: 0F 83 BD B6 FF FF                                     	jae	invalid_operand
00005281: AC                                                    	lods	byte [esi]
00005282: 3C 28                                                 	cmp	al,'('
00005284: 0F 85 A0 B6 FF FF                                     	jne	invalid_argument
0000528A: 80 3E 2E                                              	cmp	byte [esi],'.'
0000528D: 0F 84 19 B7 FF FF                                     	je	invalid_value
00005293: E8 F2 20 00 00                                        	call	get_dword_value
00005298: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000529F: 74 05                                                 	je	data_offset_ok
000052A1: E8 18 33 00 00                                        	call	recoverable_invalid_address
                                                                      data_offset_ok:
000052A6: 03 05 6C A1 01 00                                     	add	eax,[code_start]
000052AC: 72 BF                                                 	jc	bad_data_address
000052AE: 89 C3                                                 	mov	ebx,eax
000052B0: 0F B6 0D A4 A2 01 00                                  	movzx	ecx,[operand_size]
000052B7: 01 C8                                                 	add	eax,ecx
000052B9: 72 B2                                                 	jc	bad_data_address
000052BB: 8B 15 D0 A1 01 00                                     	mov	edx,[addressing_space]
000052C1: F6 42 0A 01                                           	test	byte [edx+0Ah],1
000052C5: 75 06                                                 	jnz	data_offset_from_virtual
000052C7: 39 F8                                                 	cmp	eax,edi
000052C9: 77 A2                                                 	ja	bad_data_address
000052CB: F8                                                    	clc
000052CC: C3                                                    	ret
                                                                      data_offset_from_virtual:
000052CD: 3B 05 D8 A1 01 00                                     	cmp	eax,[undefined_data_end]
000052D3: 77 98                                                 	ja	bad_data_address
000052D5: F8                                                    	clc
000052D6: C3                                                    	ret
                                                                
                                                                store_directive:
000052D7: 80 3E 11                                              	cmp	byte [esi],11h
000052DA: 74 1C                                                 	je	sized_store
000052DC: AC                                                    	lods	byte [esi]
000052DD: 3C 28                                                 	cmp	al,'('
000052DF: 0F 85 45 B6 FF FF                                     	jne	invalid_argument
000052E5: E8 CD 1F 00 00                                        	call	get_byte_value
000052EA: 31 D2                                                 	xor	edx,edx
000052EC: 0F B6 C0                                              	movzx	eax,al
000052EF: C6 05 A4 A2 01 00 01                                  	mov	[operand_size],1
000052F6: EB 0C                                                 	jmp	store_value_ok
                                                                      sized_store:
000052F8: 80 0D A5 A2 01 00 01                                  	or	[operand_flags],1
000052FF: E8 9B 21 00 00                                        	call	get_value
                                                                      store_value_ok:
00005304: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000530B: 0F 85 49 B7 FF FF                                     	jne	invalid_use_of_symbol
00005311: A3 00 A2 01 00                                        	mov	dword [value],eax
00005316: 89 15 04 A2 01 00                                     	mov	dword [value+4],edx
0000531C: AC                                                    	lods	byte [esi]
0000531D: 3C 80                                                 	cmp	al,80h
0000531F: 0F 85 05 B6 FF FF                                     	jne	invalid_argument
00005325: E8 47 FE FF FF                                        	call	get_data_point
0000532A: 0F 82 4A FC FF FF                                     	jc	instruction_assembled
00005330: 56 57                                                 	push	esi edi
00005332: BE 00 A2 01 00                                        	mov	esi,value
00005337: 89 DF                                                 	mov	edi,ebx
00005339: F3 A4                                                 	rep	movs byte [edi],[esi]
0000533B: 89 F8                                                 	mov	eax,edi
0000533D: 5F 5E                                                 	pop	edi esi
0000533F: 3B 1D D8 A1 01 00                                     	cmp	ebx,[undefined_data_end]
00005345: 0F 83 2F FC FF FF                                     	jae	instruction_assembled
0000534B: 3B 05 D4 A1 01 00                                     	cmp	eax,[undefined_data_start]
00005351: 0F 86 23 FC FF FF                                     	jbe	instruction_assembled
00005357: A3 D4 A1 01 00                                        	mov	[undefined_data_start],eax
0000535C: E9 19 FC FF FF                                        	jmp	instruction_assembled
                                                                
                                                                display_directive:
00005361: AC                                                    	lods	byte [esi]
00005362: 3C 28                                                 	cmp	al,'('
00005364: 0F 85 C0 B5 FF FF                                     	jne	invalid_argument
0000536A: 80 3E 00                                              	cmp	byte [esi],0
0000536D: 75 29                                                 	jne	display_byte
0000536F: 46                                                    	inc	esi
00005370: AD                                                    	lods	dword [esi]
00005371: 89 C1                                                 	mov	ecx,eax
00005373: 57                                                    	push	edi
00005374: 8B 3D F0 A1 01 00                                     	mov	edi,[tagged_blocks]
0000537A: 83 EF 08                                              	sub	edi,8
0000537D: 29 C7                                                 	sub	edi,eax
0000537F: 3B 3C 24                                              	cmp	edi,[esp]
00005382: 0F 86 14 B5 FF FF                                     	jbe	out_of_memory
00005388: 89 3D F0 A1 01 00                                     	mov	[tagged_blocks],edi
0000538E: F3 A4                                                 	rep	movs byte [edi],[esi]
00005390: AB                                                    	stos	dword [edi]
00005391: 31 C0                                                 	xor	eax,eax
00005393: AB                                                    	stos	dword [edi]
00005394: 5F                                                    	pop	edi
00005395: 46                                                    	inc	esi
00005396: EB 1F                                                 	jmp	display_next
                                                                      display_byte:
00005398: E8 1A 1F 00 00                                        	call	get_byte_value
0000539D: 57                                                    	push	edi
0000539E: 8B 3D F0 A1 01 00                                     	mov	edi,[tagged_blocks]
000053A4: 83 EF 09                                              	sub	edi,8+1
000053A7: 89 3D F0 A1 01 00                                     	mov	[tagged_blocks],edi
000053AD: AA                                                    	stos	byte [edi]
000053AE: B8 01 00 00 00                                        	mov	eax,1
000053B3: AB                                                    	stos	dword [edi]
000053B4: 48                                                    	dec	eax
000053B5: AB                                                    	stos	dword [edi]
000053B6: 5F                                                    	pop	edi
                                                                      display_next:
000053B7: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
000053BD: 0F 87 D9 B4 FF FF                                     	ja	out_of_memory
000053C3: AC                                                    	lods	byte [esi]
000053C4: 3C 2C                                                 	cmp	al,','
000053C6: 74 99                                                 	je	display_directive
000053C8: 4E                                                    	dec	esi
000053C9: E9 AC FB FF FF                                        	jmp	instruction_assembled
                                                                show_display_buffer:
000053CE: A1 F0 A1 01 00                                        	mov	eax,[tagged_blocks]
000053D3: 09 C0                                                 	or	eax,eax
000053D5: 74 2C                                                 	jz	display_done
000053D7: 8B 35 C0 A1 01 00                                     	mov	esi,[labels_list]
000053DD: 39 C6                                                 	cmp	esi,eax
000053DF: 74 22                                                 	je	display_done
                                                                      display_messages:
000053E1: 83 EE 08                                              	sub	esi,8
000053E4: 8B 46 04                                              	mov	eax,[esi+4]
000053E7: 8B 0E                                                 	mov	ecx,[esi]
000053E9: 29 CE                                                 	sub	esi,ecx
000053EB: 83 F8 10                                              	cmp	eax,10h
000053EE: 74 14                                                 	je	write_addressing_space
000053F0: 85 C0                                                 	test	eax,eax
000053F2: 75 07                                                 	jnz	skip_block
000053F4: 56                                                    	push	esi
000053F5: E8 B6 B0 FF FF                                        	call	display_block
000053FA: 5E                                                    	pop	esi
                                                                      skip_block:
000053FB: 3B 35 F0 A1 01 00                                     	cmp	esi,[tagged_blocks]
00005401: 75 DE                                                 	jne	display_messages
                                                                      display_done:
00005403: C3                                                    	ret
                                                                      write_addressing_space:
00005404: 8B 4E 20                                              	mov	ecx,[esi+20h]
00005407: E3 F2                                                 	jecxz	skip_block
00005409: 56                                                    	push	esi
0000540A: 8B 3D 64 A1 01 00                                     	mov	edi,[free_additional_memory]
00005410: 8B 35 54 A1 01 00                                     	mov	esi,[output_file]
00005416: 85 F6                                                 	test	esi,esi
00005418: 74 7A                                                 	jz	addressing_space_written
0000541A: 31 DB                                                 	xor	ebx,ebx
                                                                      copy_output_path:
0000541C: AC                                                    	lodsb
0000541D: 3B 3D F4 A1 01 00                                     	cmp	edi,[structures_buffer]
00005423: 0F 83 73 B4 FF FF                                     	jae	out_of_memory
00005429: AA                                                    	stosb
0000542A: 84 C0                                                 	test	al,al
0000542C: 74 14                                                 	jz	output_path_copied
0000542E: 3C 2F                                                 	cmp	al,'/'
00005430: 74 0C                                                 	je	new_path_segment
00005432: 3C 5C                                                 	cmp	al,'\'
00005434: 74 08                                                 	je	new_path_segment
00005436: 3C 2E                                                 	cmp	al,'.'
00005438: 75 E2                                                 	jne	copy_output_path
0000543A: 89 FB                                                 	mov	ebx,edi
0000543C: EB DE                                                 	jmp	copy_output_path
                                                                      new_path_segment:
0000543E: 31 DB                                                 	xor	ebx,ebx
00005440: EB DA                                                 	jmp	copy_output_path
                                                                      output_path_copied:
00005442: 85 DB                                                 	test	ebx,ebx
00005444: 75 06                                                 	jnz	append_extension
00005446: C6 47 FF 2E                                           	mov	byte [edi-1],'.'
0000544A: 89 FB                                                 	mov	ebx,edi
                                                                      append_extension:
0000544C: 89 DF                                                 	mov	edi,ebx
0000544E: 01 CB                                                 	add	ebx,ecx
00005450: 43                                                    	inc	ebx
00005451: 3B 1D F4 A1 01 00                                     	cmp	ebx,[structures_buffer]
00005457: 0F 83 3F B4 FF FF                                     	jae	out_of_memory
0000545D: 8B 34 24                                              	mov	esi,[esp]
00005460: 8B 76 18                                              	mov	esi,[esi+18h]
00005463: 29 CE                                                 	sub	esi,ecx
00005465: F3 A4                                                 	rep	movs byte [edi],[esi]
00005467: 30 C0                                                 	xor	al,al
00005469: AA                                                    	stos	byte [edi]
0000546A: 8B 15 64 A1 01 00                                     	mov	edx,[free_additional_memory]
00005470: E8 2F AF FF FF                                        	call	create
00005475: 0F 82 3F B4 FF FF                                     	jc	write_failed
0000547B: 8B 34 24                                              	mov	esi,[esp]
0000547E: 8B 56 18                                              	mov	edx,[esi+18h]
00005481: 8B 4E 1C                                              	mov	ecx,[esi+1Ch]
00005484: E8 51 AF FF FF                                        	call	write
00005489: 0F 82 2B B4 FF FF                                     	jc	write_failed
0000548F: E8 2C AF FF FF                                        	call	close
                                                                      addressing_space_written:
00005494: 5E                                                    	pop	esi
00005495: E9 61 FF FF FF                                        	jmp	skip_block
                                                                
                                                                times_directive:
0000549A: AC                                                    	lods	byte [esi]
0000549B: 3C 28                                                 	cmp	al,'('
0000549D: 0F 85 87 B4 FF FF                                     	jne	invalid_argument
000054A3: 80 3E 2E                                              	cmp	byte [esi],'.'
000054A6: 0F 84 00 B5 FF FF                                     	je	invalid_value
000054AC: E8 8D 1F 00 00                                        	call	get_count_value
000054B1: 83 F8 00                                              	cmp	eax,0
000054B4: 74 69                                                 	je	zero_times
000054B6: 80 3E 3A                                              	cmp	byte [esi],':'
000054B9: 75 01                                                 	jne	times_argument_ok
000054BB: 46                                                    	inc	esi
                                                                      times_argument_ok:
000054BC: FF 35 DC A1 01 00                                     	push	[counter]
000054C2: FF 35 E0 A1 01 00                                     	push	[counter_limit]
000054C8: A3 E0 A1 01 00                                        	mov	[counter_limit],eax
000054CD: C7 05 DC A1 01 00 01 00 00 00                         	mov	[counter],1
                                                                      times_loop:
000054D7: 89 E0                                                 	mov	eax,esp
000054D9: 2B 05 48 A1 01 00                                     	sub	eax,[stack_limit]
000054DF: 3D 00 01 00 00                                        	cmp	eax,100h
000054E4: 0F 82 BC B3 FF FF                                     	jb	stack_overflow
000054EA: 56                                                    	push	esi
000054EB: 80 0D CF A2 01 00 01                                  	or	[prefix_flags],1
000054F2: E8 93 F7 FF FF                                        	call	continue_line
000054F7: A1 E0 A1 01 00                                        	mov	eax,[counter_limit]
000054FC: 39 05 DC A1 01 00                                     	cmp	[counter],eax
00005502: 74 09                                                 	je	times_done
00005504: FF 05 DC A1 01 00                                     	inc	[counter]
0000550A: 5E                                                    	pop	esi
0000550B: EB CA                                                 	jmp	times_loop
                                                                      times_done:
0000550D: 58                                                    	pop	eax
0000550E: 8F 05 E0 A1 01 00                                     	pop	[counter_limit]
00005514: 8F 05 DC A1 01 00                                     	pop	[counter]
0000551A: E9 5B FA FF FF                                        	jmp	instruction_assembled
                                                                      zero_times:
0000551F: E8 6D 28 00 00                                        	call	skip_symbol
00005524: 73 F9                                                 	jnc	zero_times
00005526: E9 4F FA FF FF                                        	jmp	instruction_assembled
                                                                
                                                                virtual_directive:
0000552B: AC                                                    	lods	byte [esi]
0000552C: 3C 28                                                 	cmp	al,'('
0000552E: 0F 84 75 01 00 00                                     	je	continue_virtual_area
00005534: 3C 80                                                 	cmp	al,80h
00005536: 75 24                                                 	jne	virtual_at_current
00005538: AC                                                    	lods	byte [esi]
00005539: 3C 28                                                 	cmp	al,'('
0000553B: 0F 85 E9 B3 FF FF                                     	jne	invalid_argument
00005541: 80 3E 2E                                              	cmp	byte [esi],'.'
00005544: 0F 84 62 B4 FF FF                                     	je	invalid_value
0000554A: E8 3C 20 00 00                                        	call	get_address_value
0000554F: 8B 2D 34 A2 01 00                                     	mov	ebp,[address_symbol]
00005555: 08 FF                                                 	or	bh,bh
00005557: 0F 95 C5                                              	setnz	ch
0000555A: EB 3A                                                 	jmp	set_virtual
                                                                      virtual_at_current:
0000555C: 4E                                                    	dec	esi
                                                                      virtual_fallback:
0000555D: 8B 2D D0 A1 01 00                                     	mov	ebp,[addressing_space]
00005563: 3E 8A 45 09                                           	mov	al,[ds:ebp+9]
00005567: A2 C0 A2 01 00                                        	mov	[value_type],al
0000556C: 89 F8                                                 	mov	eax,edi
0000556E: 31 D2                                                 	xor	edx,edx
00005570: 30 C9                                                 	xor	cl,cl
00005572: 3E 2B 45 00                                           	sub	eax,[ds:ebp]
00005576: 3E 1B 55 04                                           	sbb	edx,[ds:ebp+4]
0000557A: 3E 1A 4D 08                                           	sbb	cl,[ds:ebp+8]
0000557E: 88 0D C4 A2 01 00                                     	mov	[address_sign],cl
00005584: 3E 66 8B 5D 10                                        	mov	bx,[ds:ebp+10h]
00005589: 3E 66 8B 4D 12                                        	mov	cx,[ds:ebp+10h+2]
0000558E: 86 FB                                                 	xchg	bh,bl
00005590: 86 E9                                                 	xchg	ch,cl
00005592: 3E 8B 6D 14                                           	mov	ebp,[ds:ebp+14h]
                                                                      set_virtual:
00005596: 86 DF                                                 	xchg	bl,bh
00005598: 86 CD                                                 	xchg	cl,ch
0000559A: C1 E1 10                                              	shl	ecx,16
0000559D: 66 89 D9                                              	mov	cx,bx
000055A0: 51 50                                                 	push	ecx eax
000055A2: 8B 1D D0 A1 01 00                                     	mov	ebx,[addressing_space]
000055A8: F6 43 0A 01                                           	test	byte [ebx+0Ah],1
000055AC: 75 12                                                 	jnz	non_virtual_end_ok
000055AE: 89 F8                                                 	mov	eax,edi
000055B0: 87 05 D8 A1 01 00                                     	xchg	eax,[undefined_data_end]
000055B6: 39 F8                                                 	cmp	eax,edi
000055B8: 74 06                                                 	je	non_virtual_end_ok
000055BA: 89 3D D4 A1 01 00                                     	mov	[undefined_data_start],edi
                                                                      non_virtual_end_ok:
000055C0: E8 B6 00 00 00                                        	call	allocate_virtual_structure_data
000055C5: E8 CA F5 FF FF                                        	call	init_addressing_space
000055CA: 80 4B 0A 01                                           	or	byte [ebx+0Ah],1
000055CE: 80 3E 86                                              	cmp	byte [esi],86h
000055D1: 75 30                                                 	jne	addressing_space_extension_ok
000055D3: 66 83 7E 01 28                                        	cmp	word [esi+1],'('
000055D8: 0F 85 4C B3 FF FF                                     	jne	invalid_argument
000055DE: 8B 4E 03                                              	mov	ecx,[esi+3]
000055E1: 83 C6 07                                              	add	esi,3+4
000055E4: 01 4B 18                                              	add	[ebx+18h],ecx
000055E7: 89 4B 20                                              	mov	[ebx+20h],ecx
000055EA: 80 4B 0A 02                                           	or	byte [ebx+0Ah],2
000055EE: 53                                                    	push	ebx
000055EF: BB D3 A2 01 00                                        	mov	ebx,characters
                                                                      get_extension:
000055F4: AC                                                    	lods	byte [esi]
000055F5: AA                                                    	stos	byte [edi]
000055F6: D7                                                    	xlat	byte [ebx]
000055F7: 84 C0                                                 	test	al,al
000055F9: 0F 84 2B B3 FF FF                                     	jz	invalid_argument
000055FF: E2 F3                                                 	loop	get_extension
00005601: 46                                                    	inc	esi
00005602: 5B                                                    	pop	ebx
                                                                      addressing_space_extension_ok:
00005603: 58                                                    	pop	eax
00005604: 8A 0D C4 A2 01 00                                     	mov	cl,[address_sign]
0000560A: F7 D0                                                 	not	eax
0000560C: F7 D2                                                 	not	edx
0000560E: F6 D1                                                 	not	cl
00005610: 83 C0 01                                              	add	eax,1
00005613: 83 D2 00                                              	adc	edx,0
00005616: 80 D1 00                                              	adc	cl,0
00005619: 01 F8                                                 	add	eax,edi
0000561B: 83 D2 00                                              	adc	edx,0
0000561E: 80 D1 00                                              	adc	cl,0
00005621: 89 03                                                 	mov	[ebx],eax
00005623: 89 53 04                                              	mov	[ebx+4],edx
00005626: 88 4B 08                                              	mov	[ebx+8],cl
00005629: 8F 43 10                                              	pop	dword [ebx+10h]
0000562C: 89 6B 14                                              	mov	[ebx+14h],ebp
0000562F: A0 C0 A2 01 00                                        	mov	al,[value_type]
00005634: A8 01                                                 	test	al,1
00005636: 0F 85 1E B4 FF FF                                     	jnz	invalid_use_of_symbol
0000563C: 88 43 09                                              	mov	[ebx+9],al
0000563F: E9 36 F9 FF FF                                        	jmp	instruction_assembled
                                                                      allocate_structure_data:
00005644: 8B 1D F4 A1 01 00                                     	mov	ebx,[structures_buffer]
0000564A: 83 EB 18                                              	sub	ebx,18h
0000564D: 3B 1D 64 A1 01 00                                     	cmp	ebx,[free_additional_memory]
00005653: 0F 82 43 B2 FF FF                                     	jb	out_of_memory
00005659: 89 1D F4 A1 01 00                                     	mov	[structures_buffer],ebx
0000565F: C3                                                    	ret
                                                                      find_structure_data:
00005660: 8B 1D F4 A1 01 00                                     	mov	ebx,[structures_buffer]
                                                                      scan_structures:
00005666: 3B 1D 44 A1 01 00                                     	cmp	ebx,[additional_memory_end]
0000566C: 74 0B                                                 	je	no_such_structure
0000566E: 66 3B 03                                              	cmp	ax,[ebx]
00005671: 74 05                                                 	je	structure_data_found
00005673: 83 C3 18                                              	add	ebx,18h
00005676: EB EE                                                 	jmp	scan_structures
                                                                      structure_data_found:
00005678: C3                                                    	ret
                                                                      no_such_structure:
00005679: F9                                                    	stc
0000567A: C3                                                    	ret
                                                                      allocate_virtual_structure_data:
0000567B: E8 C4 FF FF FF                                        	call	allocate_structure_data
00005680: 66 C7 03 BE 05                                        	mov	word [ebx],virtual_directive-instruction_handler
00005685: 8B 0D D0 A1 01 00                                     	mov	ecx,[addressing_space]
0000568B: 89 4B 0C                                              	mov	[ebx+12],ecx
0000568E: 89 7B 08                                              	mov	[ebx+8],edi
00005691: 8B 0D 80 A1 01 00                                     	mov	ecx,[current_line]
00005697: 89 4B 04                                              	mov	[ebx+4],ecx
0000569A: 8B 1D D0 A1 01 00                                     	mov	ebx,[addressing_space]
000056A0: 89 F8                                                 	mov	eax,edi
000056A2: 2B 43 18                                              	sub	eax,[ebx+18h]
000056A5: 89 43 1C                                              	mov	[ebx+1Ch],eax
000056A8: C3                                                    	ret
                                                                      continue_virtual_area:
000056A9: 80 3E 11                                              	cmp	byte [esi],11h
000056AC: 0F 85 78 B2 FF FF                                     	jne	invalid_argument
000056B2: 80 7E 05 29                                           	cmp	byte [esi+1+4],')'
000056B6: 0F 85 6E B2 FF FF                                     	jne	invalid_argument
000056BC: 46                                                    	inc	esi
000056BD: AD                                                    	lods	dword [esi]
000056BE: 46                                                    	inc	esi
000056BF: 83 F8 0F                                              	cmp	eax,0Fh
000056C2: 0F 86 A7 B3 FF FF                                     	jbe	reserved_word_used_as_symbol
000056C8: BA C0 09 00 00                                        	mov	edx,undefined_symbol
000056CD: F6 40 08 01                                           	test	byte [eax+8],1
000056D1: 0F 84 8D 00 00 00                                     	jz	virtual_area_unavailable
000056D7: BA 17 0A 00 00                                        	mov	edx,symbol_out_of_scope
000056DC: 66 8B 48 10                                           	mov	cx,[eax+16]
000056E0: 66 3B 0D 5E A1 01 00                                  	cmp	cx,[current_pass]
000056E7: 75 7B                                                 	jne	virtual_area_unavailable
000056E9: BA 5A 0A 00 00                                        	mov	edx,invalid_use_of_symbol
000056EE: F6 40 09 04                                           	test	byte [eax+9],4
000056F2: 74 70                                                 	jz	virtual_area_unavailable
000056F4: 89 C3                                                 	mov	ebx,eax
000056F6: 66 A1 5E A1 01 00                                     	mov	ax,[current_pass]
000056FC: 66 89 43 12                                           	mov	[ebx+18],ax
00005700: 80 4B 08 08                                           	or	byte [ebx+8],8
00005704: E8 4E 19 00 00                                        	call	store_label_reference
00005709: 8B 1B                                                 	mov	ebx,[ebx]
0000570B: F6 43 0A 04                                           	test	byte [ebx+0Ah],4
0000570F: 74 53                                                 	jz	virtual_area_unavailable
00005711: 80 63 0A FB                                           	and	byte [ebx+0Ah],not 4
00005715: 89 DA                                                 	mov	edx,ebx
00005717: E8 5F FF FF FF                                        	call	allocate_virtual_structure_data
0000571C: 89 15 D0 A1 01 00                                     	mov	[addressing_space],edx
00005722: 56                                                    	push	esi
00005723: 8B 72 18                                              	mov	esi,[edx+18h]
00005726: 8B 4A 1C                                              	mov	ecx,[edx+1Ch]
00005729: 8B 42 20                                              	mov	eax,[edx+20h]
0000572C: 29 C6                                                 	sub	esi,eax
0000572E: 01 C1                                                 	add	ecx,eax
00005730: 8D 04 0F                                              	lea	eax,[edi+ecx]
00005733: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
00005739: 0F 83 5D B1 FF FF                                     	jae	out_of_memory
0000573F: 89 F0                                                 	mov	eax,esi
00005741: 29 F8                                                 	sub	eax,edi
00005743: 29 42 18                                              	sub	[edx+18h],eax
00005746: 29 02                                                 	sub	[edx],eax
00005748: 83 5A 04 00                                           	sbb	dword [edx+4],0
0000574C: 80 5A 08 00                                           	sbb	byte [edx+8],0
00005750: 88 C8                                                 	mov	al,cl
00005752: C1 E9 02                                              	shr	ecx,2
00005755: F3 A5                                                 	rep	movs dword [edi],[esi]
00005757: 88 C1                                                 	mov	cl,al
00005759: 80 E1 03                                              	and	cl,11b
0000575C: F3 A4                                                 	rep	movs byte [edi],[esi]
0000575E: 5E                                                    	pop	esi
0000575F: E9 16 F8 FF FF                                        	jmp	instruction_assembled
                                                                      virtual_area_unavailable:
00005764: 83 3D E8 A1 01 00 00                                  	cmp	[error_line],0
0000576B: 0F 85 EC FD FF FF                                     	jne	virtual_fallback
00005771: FF 35 80 A1 01 00                                     	push	[current_line]
00005777: 8F 05 E8 A1 01 00                                     	pop	[error_line]
0000577D: 89 15 EC A1 01 00                                     	mov	[error],edx
00005783: A3 E4 A1 01 00                                        	mov	[error_info],eax
00005788: E9 D0 FD FF FF                                        	jmp	virtual_fallback
                                                                      end_virtual:
0000578D: E8 CE FE FF FF                                        	call	find_structure_data
00005792: 0F 82 F3 B2 FF FF                                     	jc	unexpected_instruction
00005798: 53                                                    	push	ebx
00005799: E8 2D 00 00 00                                        	call	close_virtual_addressing_space
0000579E: 5B                                                    	pop	ebx
0000579F: 8B 43 0C                                              	mov	eax,[ebx+12]
000057A2: A3 D0 A1 01 00                                        	mov	[addressing_space],eax
000057A7: 8B 7B 08                                              	mov	edi,[ebx+8]
                                                                      remove_structure_data:
000057AA: 56 57                                                 	push	esi edi
000057AC: 89 D9                                                 	mov	ecx,ebx
000057AE: 2B 0D F4 A1 01 00                                     	sub	ecx,[structures_buffer]
000057B4: C1 E9 02                                              	shr	ecx,2
000057B7: 8D 73 FC                                              	lea	esi,[ebx-4]
000057BA: 8D 7E 18                                              	lea	edi,[esi+18h]
000057BD: FD                                                    	std
000057BE: F3 A5                                                 	rep	movs dword [edi],[esi]
000057C0: FC                                                    	cld
000057C1: 83 05 F4 A1 01 00 18                                  	add	[structures_buffer],18h
000057C8: 5F 5E                                                 	pop	edi esi
000057CA: C3                                                    	ret
                                                                      close_virtual_addressing_space:
000057CB: 8B 1D D0 A1 01 00                                     	mov	ebx,[addressing_space]
000057D1: 89 F8                                                 	mov	eax,edi
000057D3: 2B 43 18                                              	sub	eax,[ebx+18h]
000057D6: 89 43 1C                                              	mov	[ebx+1Ch],eax
000057D9: 03 43 20                                              	add	eax,[ebx+20h]
000057DC: F6 43 0A 02                                           	test	byte [ebx+0Ah],2
000057E0: 74 5D                                                 	jz	addressing_space_closed
000057E2: 80 4B 0A 04                                           	or	byte [ebx+0Ah],4
000057E6: 56 57 51 52                                           	push	esi edi ecx edx
000057EA: 89 C1                                                 	mov	ecx,eax
000057EC: A1 F0 A1 01 00                                        	mov	eax,[tagged_blocks]
000057F1: C7 40 FC 11 00 00 00                                  	mov	dword [eax-4],11h
000057F8: 89 48 F8                                              	mov	dword [eax-8],ecx
000057FB: 83 E8 08                                              	sub	eax,8
000057FE: 29 C8                                                 	sub	eax,ecx
00005800: A3 F0 A1 01 00                                        	mov	[tagged_blocks],eax
00005805: 8D 7C 08 FF                                           	lea	edi,[eax+ecx-1]
00005809: 03 43 20                                              	add	eax,[ebx+20h]
0000580C: 87 43 18                                              	xchg	eax,[ebx+18h]
0000580F: 2B 43 20                                              	sub	eax,[ebx+20h]
00005812: 8D 74 08 FF                                           	lea	esi,[eax+ecx-1]
00005816: 89 F8                                                 	mov	eax,edi
00005818: 29 F0                                                 	sub	eax,esi
0000581A: FD                                                    	std
0000581B: D1 E9                                                 	shr	ecx,1
0000581D: 73 01                                                 	jnc	virtual_byte_ok
0000581F: A4                                                    	movs	byte [edi],[esi]
                                                                      virtual_byte_ok:
00005820: 4E                                                    	dec	esi
00005821: 4F                                                    	dec	edi
00005822: D1 E9                                                 	shr	ecx,1
00005824: 73 02                                                 	jnc	virtual_word_ok
00005826: 66 A5                                                 	movs	word [edi],[esi]
                                                                      virtual_word_ok:
00005828: 83 EE 02                                              	sub	esi,2
0000582B: 83 EF 02                                              	sub	edi,2
0000582E: F3 A5                                                 	rep	movs dword [edi],[esi]
00005830: FC                                                    	cld
00005831: 31 D2                                                 	xor	edx,edx
00005833: 01 03                                                 	add	[ebx],eax
00005835: 11 53 04                                              	adc	dword [ebx+4],edx
00005838: 10 53 08                                              	adc	byte [ebx+8],dl
0000583B: 5A 59 5F 5E                                           	pop	edx ecx edi esi
                                                                      addressing_space_closed:
0000583F: C3                                                    	ret
                                                                repeat_directive:
00005840: F6 05 CF A2 01 00 01                                  	test	[prefix_flags],1
00005847: 0F 85 3E B2 FF FF                                     	jnz	unexpected_instruction
0000584D: AC                                                    	lods	byte [esi]
0000584E: 3C 28                                                 	cmp	al,'('
00005850: 0F 85 D4 B0 FF FF                                     	jne	invalid_argument
00005856: 80 3E 2E                                              	cmp	byte [esi],'.'
00005859: 0F 84 4D B1 FF FF                                     	je	invalid_value
0000585F: E8 DA 1B 00 00                                        	call	get_count_value
00005864: 83 F8 00                                              	cmp	eax,0
00005867: 74 7E                                                 	je	zero_repeat
00005869: E8 D6 FD FF FF                                        	call	allocate_structure_data
0000586E: 66 C7 03 D3 08                                        	mov	word [ebx],repeat_directive-instruction_handler
00005873: 87 05 E0 A1 01 00                                     	xchg	eax,[counter_limit]
00005879: 89 43 10                                              	mov	[ebx+10h],eax
0000587C: B8 01 00 00 00                                        	mov	eax,1
00005881: 87 05 DC A1 01 00                                     	xchg	eax,[counter]
00005887: 89 43 14                                              	mov	[ebx+14h],eax
0000588A: 89 73 08                                              	mov	[ebx+8],esi
0000588D: A1 80 A1 01 00                                        	mov	eax,[current_line]
00005892: 89 43 04                                              	mov	[ebx+4],eax
00005895: E9 E0 F6 FF FF                                        	jmp	instruction_assembled
                                                                      end_repeat:
0000589A: F6 05 CF A2 01 00 01                                  	test	[prefix_flags],1
000058A1: 0F 85 E4 B1 FF FF                                     	jnz	unexpected_instruction
000058A7: E8 B4 FD FF FF                                        	call	find_structure_data
000058AC: 0F 82 D9 B1 FF FF                                     	jc	unexpected_instruction
000058B2: A1 E0 A1 01 00                                        	mov	eax,[counter_limit]
000058B7: FF 05 DC A1 01 00                                     	inc	[counter]
000058BD: 39 05 DC A1 01 00                                     	cmp	[counter],eax
000058C3: 76 1A                                                 	jbe	continue_repeating
                                                                      stop_repeat:
000058C5: 8B 43 10                                              	mov	eax,[ebx+10h]
000058C8: A3 E0 A1 01 00                                        	mov	[counter_limit],eax
000058CD: 8B 43 14                                              	mov	eax,[ebx+14h]
000058D0: A3 DC A1 01 00                                        	mov	[counter],eax
000058D5: E8 D0 FE FF FF                                        	call	remove_structure_data
000058DA: E9 9B F6 FF FF                                        	jmp	instruction_assembled
                                                                      continue_repeating:
000058DF: 8B 73 08                                              	mov	esi,[ebx+8]
000058E2: E9 93 F6 FF FF                                        	jmp	instruction_assembled
                                                                      zero_repeat:
000058E7: 8A 06                                                 	mov	al,[esi]
000058E9: 08 C0                                                 	or	al,al
000058EB: 0F 84 93 B1 FF FF                                     	jz	missing_end_directive
000058F1: 3C 0F                                                 	cmp	al,0Fh
000058F3: 0F 85 99 B1 FF FF                                     	jne	extra_characters_on_line
000058F9: E8 05 00 00 00                                        	call	find_end_repeat
000058FE: E9 77 F6 FF FF                                        	jmp	instruction_assembled
                                                                      find_end_repeat:
00005903: E8 E0 01 00 00                                        	call	find_structure_end
00005908: 66 3D D3 08                                           	cmp	ax,repeat_directive-instruction_handler
0000590C: 0F 85 79 B1 FF FF                                     	jne	unexpected_instruction
00005912: C3                                                    	ret
                                                                while_directive:
00005913: F6 05 CF A2 01 00 01                                  	test	[prefix_flags],1
0000591A: 0F 85 6B B1 FF FF                                     	jnz	unexpected_instruction
00005920: E8 1F FD FF FF                                        	call	allocate_structure_data
00005925: 66 C7 03 A6 09                                        	mov	word [ebx],while_directive-instruction_handler
0000592A: B8 01 00 00 00                                        	mov	eax,1
0000592F: 87 05 DC A1 01 00                                     	xchg	eax,[counter]
00005935: 89 43 10                                              	mov	[ebx+10h],eax
00005938: 89 73 08                                              	mov	[ebx+8],esi
0000593B: A1 80 A1 01 00                                        	mov	eax,[current_line]
00005940: 89 43 04                                              	mov	[ebx+4],eax
                                                                      do_while:
00005943: 53                                                    	push	ebx
00005944: E8 1D 20 00 00                                        	call	calculate_logical_expression
00005949: 08 C0                                                 	or	al,al
0000594B: 75 2A                                                 	jnz	while_true
0000594D: 8A 06                                                 	mov	al,[esi]
0000594F: 08 C0                                                 	or	al,al
00005951: 0F 84 2D B1 FF FF                                     	jz	missing_end_directive
00005957: 3C 0F                                                 	cmp	al,0Fh
00005959: 0F 85 33 B1 FF FF                                     	jne	extra_characters_on_line
                                                                      stop_while:
0000595F: E8 4A 00 00 00                                        	call	find_end_while
00005964: 5B                                                    	pop	ebx
00005965: 8B 43 10                                              	mov	eax,[ebx+10h]
00005968: A3 DC A1 01 00                                        	mov	[counter],eax
0000596D: E8 38 FE FF FF                                        	call	remove_structure_data
00005972: E9 03 F6 FF FF                                        	jmp	instruction_assembled
                                                                      while_true:
00005977: 5B                                                    	pop	ebx
00005978: E9 FD F5 FF FF                                        	jmp	instruction_assembled
                                                                      end_while:
0000597D: F6 05 CF A2 01 00 01                                  	test	[prefix_flags],1
00005984: 0F 85 01 B1 FF FF                                     	jnz	unexpected_instruction
0000598A: E8 D1 FC FF FF                                        	call	find_structure_data
0000598F: 0F 82 F6 B0 FF FF                                     	jc	unexpected_instruction
00005995: 8B 43 04                                              	mov	eax,[ebx+4]
00005998: A3 80 A1 01 00                                        	mov	[current_line],eax
0000599D: FF 05 DC A1 01 00                                     	inc	[counter]
000059A3: 0F 84 05 B1 FF FF                                     	jz	too_many_repeats
000059A9: 8B 73 08                                              	mov	esi,[ebx+8]
000059AC: EB 95                                                 	jmp	do_while
                                                                      find_end_while:
000059AE: E8 35 01 00 00                                        	call	find_structure_end
000059B3: 66 3D A6 09                                           	cmp	ax,while_directive-instruction_handler
000059B7: 0F 85 CE B0 FF FF                                     	jne	unexpected_instruction
000059BD: C3                                                    	ret
                                                                if_directive:
000059BE: F6 05 CF A2 01 00 01                                  	test	[prefix_flags],1
000059C5: 0F 85 C0 B0 FF FF                                     	jnz	unexpected_instruction
000059CB: E8 96 1F 00 00                                        	call	calculate_logical_expression
000059D0: 88 C2                                                 	mov	dl,al
000059D2: 8A 06                                                 	mov	al,[esi]
000059D4: 08 C0                                                 	or	al,al
000059D6: 0F 84 A8 B0 FF FF                                     	jz	missing_end_directive
000059DC: 3C 0F                                                 	cmp	al,0Fh
000059DE: 0F 85 AE B0 FF FF                                     	jne	extra_characters_on_line
000059E4: 08 D2                                                 	or	dl,dl
000059E6: 75 1E                                                 	jnz	if_true
000059E8: E8 D2 00 00 00                                        	call	find_else
000059ED: 0F 82 87 F5 FF FF                                     	jc	instruction_assembled
000059F3: 8A 06                                                 	mov	al,[esi]
000059F5: 3C 01                                                 	cmp	al,1
000059F7: 75 29                                                 	jne	else_true
000059F9: 66 81 7E 01 51 0A                                     	cmp	word [esi+1],if_directive-instruction_handler
000059FF: 75 21                                                 	jne	else_true
00005A01: 83 C6 04                                              	add	esi,4
00005A04: EB B8                                                 	jmp	if_directive
                                                                      if_true:
00005A06: 30 C0                                                 	xor	al,al
                                                                      make_if_structure:
00005A08: E8 37 FC FF FF                                        	call	allocate_structure_data
00005A0D: 66 C7 03 51 0A                                        	mov	word [ebx],if_directive-instruction_handler
00005A12: 88 43 02                                              	mov	byte [ebx+2],al
00005A15: A1 80 A1 01 00                                        	mov	eax,[current_line]
00005A1A: 89 43 04                                              	mov	[ebx+4],eax
00005A1D: E9 58 F5 FF FF                                        	jmp	instruction_assembled
                                                                      else_true:
00005A22: 08 C0                                                 	or	al,al
00005A24: 0F 84 5A B0 FF FF                                     	jz	missing_end_directive
00005A2A: 3C 0F                                                 	cmp	al,0Fh
00005A2C: 0F 85 60 B0 FF FF                                     	jne	extra_characters_on_line
00005A32: 0C FF                                                 	or	al,-1
00005A34: EB D2                                                 	jmp	make_if_structure
                                                                      else_directive:
00005A36: F6 05 CF A2 01 00 01                                  	test	[prefix_flags],1
00005A3D: 0F 85 48 B0 FF FF                                     	jnz	unexpected_instruction
00005A43: 66 B8 51 0A                                           	mov	ax,if_directive-instruction_handler
00005A47: E8 14 FC FF FF                                        	call	find_structure_data
00005A4C: 0F 82 39 B0 FF FF                                     	jc	unexpected_instruction
00005A52: 80 7B 02 00                                           	cmp	byte [ebx+2],0
00005A56: 0F 85 2F B0 FF FF                                     	jne	unexpected_instruction
                                                                      found_else:
00005A5C: 8A 06                                                 	mov	al,[esi]
00005A5E: 3C 01                                                 	cmp	al,1
00005A60: 75 1C                                                 	jne	skip_else
00005A62: 66 81 7E 01 51 0A                                     	cmp	word [esi+1],if_directive-instruction_handler
00005A68: 75 14                                                 	jne	skip_else
00005A6A: 83 C6 04                                              	add	esi,4
00005A6D: E8 4D 00 00 00                                        	call	find_else
00005A72: 73 E8                                                 	jnc	found_else
00005A74: E8 31 FD FF FF                                        	call	remove_structure_data
00005A79: E9 FC F4 FF FF                                        	jmp	instruction_assembled
                                                                      skip_else:
00005A7E: 08 C0                                                 	or	al,al
00005A80: 0F 84 FE AF FF FF                                     	jz	missing_end_directive
00005A86: 3C 0F                                                 	cmp	al,0Fh
00005A88: 0F 85 04 B0 FF FF                                     	jne	extra_characters_on_line
00005A8E: E8 45 00 00 00                                        	call	find_end_if
00005A93: E8 12 FD FF FF                                        	call	remove_structure_data
00005A98: E9 DD F4 FF FF                                        	jmp	instruction_assembled
                                                                      end_if:
00005A9D: F6 05 CF A2 01 00 01                                  	test	[prefix_flags],1
00005AA4: 0F 85 E1 AF FF FF                                     	jnz	unexpected_instruction
00005AAA: E8 B1 FB FF FF                                        	call	find_structure_data
00005AAF: 0F 82 D6 AF FF FF                                     	jc	unexpected_instruction
00005AB5: E8 F0 FC FF FF                                        	call	remove_structure_data
00005ABA: E9 BB F4 FF FF                                        	jmp	instruction_assembled
                                                                      find_else:
00005ABF: E8 24 00 00 00                                        	call	find_structure_end
00005AC4: 66 3D C9 0A                                           	cmp	ax,else_directive-instruction_handler
00005AC8: 74 0C                                                 	je	else_found
00005ACA: 66 3D 51 0A                                           	cmp	ax,if_directive-instruction_handler
00005ACE: 0F 85 B7 AF FF FF                                     	jne	unexpected_instruction
00005AD4: F9                                                    	stc
00005AD5: C3                                                    	ret
                                                                      else_found:
00005AD6: F8                                                    	clc
00005AD7: C3                                                    	ret
                                                                      find_end_if:
00005AD8: E8 0B 00 00 00                                        	call	find_structure_end
00005ADD: 66 3D 51 0A                                           	cmp	ax,if_directive-instruction_handler
00005AE1: 0F 85 A4 AF FF FF                                     	jne	unexpected_instruction
00005AE7: C3                                                    	ret
                                                                      find_structure_end:
00005AE8: FF 35 E8 A1 01 00                                     	push	[error_line]
00005AEE: A1 80 A1 01 00                                        	mov	eax,[current_line]
00005AF3: A3 E8 A1 01 00                                        	mov	[error_line],eax
                                                                      find_end_directive:
00005AF8: E8 94 22 00 00                                        	call	skip_symbol
00005AFD: 73 F9                                                 	jnc	find_end_directive
00005AFF: AC                                                    	lods	byte [esi]
00005B00: 3C 0F                                                 	cmp	al,0Fh
00005B02: 75 65                                                 	jne	no_end_directive
00005B04: AD                                                    	lods	dword [esi]
00005B05: A3 80 A1 01 00                                        	mov	[current_line],eax
                                                                      skip_labels:
00005B0A: 80 3E 02                                              	cmp	byte [esi],2
00005B0D: 75 05                                                 	jne	labels_ok
00005B0F: 83 C6 06                                              	add	esi,6
00005B12: EB F6                                                 	jmp	skip_labels
                                                                      labels_ok:
00005B14: 80 3E 01                                              	cmp	byte [esi],1
00005B17: 75 DF                                                 	jne	find_end_directive
00005B19: 66 8B 46 01                                           	mov	ax,[esi+1]
00005B1D: 66 3D A6 64                                           	cmp	ax,prefix_instruction-instruction_handler
00005B21: 74 D5                                                 	je	find_end_directive
00005B23: 83 C6 04                                              	add	esi,4
00005B26: 66 3D D3 08                                           	cmp	ax,repeat_directive-instruction_handler
00005B2A: 74 4C                                                 	je	skip_repeat
00005B2C: 66 3D A6 09                                           	cmp	ax,while_directive-instruction_handler
00005B30: 74 50                                                 	je	skip_while
00005B32: 66 3D 51 0A                                           	cmp	ax,if_directive-instruction_handler
00005B36: 74 54                                                 	je	skip_if
00005B38: 66 3D C9 0A                                           	cmp	ax,else_directive-instruction_handler
00005B3C: 74 24                                                 	je	structure_end
00005B3E: 66 3D 48 0C                                           	cmp	ax,end_directive-instruction_handler
00005B42: 75 B4                                                 	jne	find_end_directive
00005B44: 80 3E 01                                              	cmp	byte [esi],1
00005B47: 75 AF                                                 	jne	find_end_directive
00005B49: 66 8B 46 01                                           	mov	ax,[esi+1]
00005B4D: 83 C6 04                                              	add	esi,4
00005B50: 66 3D D3 08                                           	cmp	ax,repeat_directive-instruction_handler
00005B54: 74 0C                                                 	je	structure_end
00005B56: 66 3D A6 09                                           	cmp	ax,while_directive-instruction_handler
00005B5A: 74 06                                                 	je	structure_end
00005B5C: 66 3D 51 0A                                           	cmp	ax,if_directive-instruction_handler
00005B60: 75 96                                                 	jne	find_end_directive
                                                                      structure_end:
00005B62: 8F 05 E8 A1 01 00                                     	pop	[error_line]
00005B68: C3                                                    	ret
                                                                      no_end_directive:
00005B69: A1 E8 A1 01 00                                        	mov	eax,[error_line]
00005B6E: A3 80 A1 01 00                                        	mov	[current_line],eax
00005B73: E9 0C AF FF FF                                        	jmp	missing_end_directive
                                                                      skip_repeat:
00005B78: E8 86 FD FF FF                                        	call	find_end_repeat
00005B7D: E9 76 FF FF FF                                        	jmp	find_end_directive
                                                                      skip_while:
00005B82: E8 27 FE FF FF                                        	call	find_end_while
00005B87: E9 6C FF FF FF                                        	jmp	find_end_directive
                                                                      skip_if:
00005B8C: E8 05 00 00 00                                        	call	skip_if_block
00005B91: E9 62 FF FF FF                                        	jmp	find_end_directive
                                                                      skip_if_block:
00005B96: E8 24 FF FF FF                                        	call	find_else
00005B9B: 72 17                                                 	jc	if_block_skipped
00005B9D: 80 3E 01                                              	cmp	byte [esi],1
00005BA0: 75 0D                                                 	jne	skip_after_else
00005BA2: 66 81 7E 01 51 0A                                     	cmp	word [esi+1],if_directive-instruction_handler
00005BA8: 75 05                                                 	jne	skip_after_else
00005BAA: 83 C6 04                                              	add	esi,4
00005BAD: EB E7                                                 	jmp	skip_if_block
                                                                      skip_after_else:
00005BAF: E8 24 FF FF FF                                        	call	find_end_if
                                                                      if_block_skipped:
00005BB4: C3                                                    	ret
                                                                end_directive:
00005BB5: AC                                                    	lods	byte [esi]
00005BB6: 3C 01                                                 	cmp	al,1
00005BB8: 0F 85 6C AD FF FF                                     	jne	invalid_argument
00005BBE: 66 AD                                                 	lods	word [esi]
00005BC0: 46                                                    	inc	esi
00005BC1: 66 3D BE 05                                           	cmp	ax,virtual_directive-instruction_handler
00005BC5: 0F 84 C2 FB FF FF                                     	je	end_virtual
00005BCB: 66 3D D3 08                                           	cmp	ax,repeat_directive-instruction_handler
00005BCF: 0F 84 C5 FC FF FF                                     	je	end_repeat
00005BD5: 66 3D A6 09                                           	cmp	ax,while_directive-instruction_handler
00005BD9: 0F 84 9E FD FF FF                                     	je	end_while
00005BDF: 66 3D 51 0A                                           	cmp	ax,if_directive-instruction_handler
00005BE3: 0F 84 B4 FE FF FF                                     	je	end_if
00005BE9: 66 3D E4 40                                           	cmp	ax,data_directive-instruction_handler
00005BED: 0F 84 DF 34 00 00                                     	je	end_data
00005BF3: E9 32 AD FF FF                                        	jmp	invalid_argument
                                                                break_directive:
00005BF8: 8B 1D F4 A1 01 00                                     	mov	ebx,[structures_buffer]
00005BFE: 8A 06                                                 	mov	al,[esi]
00005C00: 08 C0                                                 	or	al,al
00005C02: 74 08                                                 	jz	find_breakable_structure
00005C04: 3C 0F                                                 	cmp	al,0Fh
00005C06: 0F 85 86 AE FF FF                                     	jne	extra_characters_on_line
                                                                      find_breakable_structure:
00005C0C: 3B 1D 44 A1 01 00                                     	cmp	ebx,[additional_memory_end]
00005C12: 0F 84 73 AE FF FF                                     	je	unexpected_instruction
00005C18: 66 8B 03                                              	mov	ax,[ebx]
00005C1B: 66 3D D3 08                                           	cmp	ax,repeat_directive-instruction_handler
00005C1F: 74 37                                                 	je	break_repeat
00005C21: 66 3D A6 09                                           	cmp	ax,while_directive-instruction_handler
00005C25: 74 3D                                                 	je	break_while
00005C27: 66 3D 51 0A                                           	cmp	ax,if_directive-instruction_handler
00005C2B: 74 05                                                 	je	break_if
00005C2D: 83 C3 18                                              	add	ebx,18h
00005C30: EB DA                                                 	jmp	find_breakable_structure
                                                                      break_if:
00005C32: FF 35 80 A1 01 00                                     	push	[current_line]
00005C38: 8B 43 04                                              	mov	eax,[ebx+4]
00005C3B: A3 80 A1 01 00                                        	mov	[current_line],eax
00005C40: E8 65 FB FF FF                                        	call	remove_structure_data
00005C45: E8 4C FF FF FF                                        	call	skip_if_block
00005C4A: 8F 05 80 A1 01 00                                     	pop	[current_line]
00005C50: 8B 1D F4 A1 01 00                                     	mov	ebx,[structures_buffer]
00005C56: EB B4                                                 	jmp	find_breakable_structure
                                                                      break_repeat:
00005C58: 53                                                    	push	ebx
00005C59: E8 A5 FC FF FF                                        	call	find_end_repeat
00005C5E: 5B                                                    	pop	ebx
00005C5F: E9 61 FC FF FF                                        	jmp	stop_repeat
                                                                      break_while:
00005C64: 53                                                    	push	ebx
00005C65: E9 F5 FC FF FF                                        	jmp	stop_while
                                                                
                                                                define_data:
00005C6A: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
00005C70: 0F 83 26 AC FF FF                                     	jae	out_of_memory
00005C76: 80 3E 28                                              	cmp	byte [esi],'('
00005C79: 0F 85 85 00 00 00                                     	jne	simple_data_value
00005C7F: 89 F3                                                 	mov	ebx,esi
00005C81: 46                                                    	inc	esi
00005C82: E8 4E 21 00 00                                        	call	skip_expression
00005C87: 87 F3                                                 	xchg	esi,ebx
00005C89: 80 3B 81                                              	cmp	byte [ebx],81h
00005C8C: 75 76                                                 	jne	simple_data_value
00005C8E: 46                                                    	inc	esi
00005C8F: E8 AA 17 00 00                                        	call	get_count_value
00005C94: 46                                                    	inc	esi
00005C95: 09 C0                                                 	or	eax,eax
00005C97: 74 4B                                                 	jz	duplicate_zero_times
00005C99: 80 3E 91                                              	cmp	byte [esi],91h
00005C9C: 75 2A                                                 	jne	duplicate_single_data_value
00005C9E: 46                                                    	inc	esi
                                                                      duplicate_data:
00005C9F: 50 56                                                 	push	eax esi
                                                                      duplicated_values:
00005CA1: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
00005CA7: 0F 83 EF AB FF FF                                     	jae	out_of_memory
00005CAD: F8                                                    	clc
00005CAE: FF 54 24 08                                           	call	near dword [esp+8]
00005CB2: AC                                                    	lods	byte [esi]
00005CB3: 3C 2C                                                 	cmp	al,','
00005CB5: 74 EA                                                 	je	duplicated_values
00005CB7: 3C 92                                                 	cmp	al,92h
00005CB9: 0F 85 6B AC FF FF                                     	jne	invalid_argument
00005CBF: 5B 58                                                 	pop	ebx eax
00005CC1: 48                                                    	dec	eax
00005CC2: 74 50                                                 	jz	data_defined
00005CC4: 89 DE                                                 	mov	esi,ebx
00005CC6: EB D7                                                 	jmp	duplicate_data
                                                                      duplicate_single_data_value:
00005CC8: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
00005CCE: 0F 83 C8 AB FF FF                                     	jae	out_of_memory
00005CD4: 50 56                                                 	push	eax esi
00005CD6: F8                                                    	clc
00005CD7: FF 54 24 08                                           	call	near dword [esp+8]
00005CDB: 5B 58                                                 	pop	ebx eax
00005CDD: 48                                                    	dec	eax
00005CDE: 74 34                                                 	jz	data_defined
00005CE0: 89 DE                                                 	mov	esi,ebx
00005CE2: EB E4                                                 	jmp	duplicate_single_data_value
                                                                      duplicate_zero_times:
00005CE4: 80 3E 91                                              	cmp	byte [esi],91h
00005CE7: 75 14                                                 	jne	skip_single_data_value
00005CE9: 46                                                    	inc	esi
                                                                      skip_data_value:
00005CEA: E8 A2 20 00 00                                        	call	skip_symbol
00005CEF: 0F 82 35 AC FF FF                                     	jc	invalid_argument
00005CF5: 80 3E 92                                              	cmp	byte [esi],92h
00005CF8: 75 F0                                                 	jne	skip_data_value
00005CFA: 46                                                    	inc	esi
00005CFB: EB 17                                                 	jmp	data_defined
                                                                      skip_single_data_value:
00005CFD: E8 8F 20 00 00                                        	call	skip_symbol
00005D02: EB 10                                                 	jmp	data_defined
                                                                      simple_data_value:
00005D04: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
00005D0A: 0F 83 8C AB FF FF                                     	jae	out_of_memory
00005D10: F8                                                    	clc
00005D11: FF 14 24                                              	call	near dword [esp]
                                                                      data_defined:
00005D14: AC                                                    	lods	byte [esi]
00005D15: 3C 2C                                                 	cmp	al,','
00005D17: 0F 84 4D FF FF FF                                     	je	define_data
00005D1D: 4E                                                    	dec	esi
00005D1E: F9                                                    	stc
00005D1F: C3                                                    	ret
                                                                data_bytes:
00005D20: E8 45 FF FF FF                                        	call	define_data
00005D25: 0F 82 4F F2 FF FF                                     	jc	instruction_assembled
00005D2B: AC                                                    	lods	byte [esi]
00005D2C: 3C 28                                                 	cmp	al,'('
00005D2E: 74 10                                                 	je	get_byte
00005D30: 3C 3F                                                 	cmp	al,'?'
00005D32: 0F 85 F2 AB FF FF                                     	jne	invalid_argument
00005D38: 89 F8                                                 	mov	eax,edi
00005D3A: C6 07 00                                              	mov	byte [edi],0
00005D3D: 47                                                    	inc	edi
00005D3E: EB 23                                                 	jmp	undefined_data
                                                                      get_byte:
00005D40: 80 3E 00                                              	cmp	byte [esi],0
00005D43: 74 07                                                 	je	get_string
00005D45: E8 6D 15 00 00                                        	call	get_byte_value
00005D4A: AA                                                    	stos	byte [edi]
00005D4B: C3                                                    	ret
                                                                      get_string:
00005D4C: 46                                                    	inc	esi
00005D4D: AD                                                    	lods	dword [esi]
00005D4E: 89 C1                                                 	mov	ecx,eax
00005D50: 8D 04 0F                                              	lea	eax,[edi+ecx]
00005D53: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
00005D59: 0F 87 3D AB FF FF                                     	ja	out_of_memory
00005D5F: F3 A4                                                 	rep	movs byte [edi],[esi]
00005D61: 46                                                    	inc	esi
00005D62: C3                                                    	ret
                                                                      undefined_data:
00005D63: 8B 2D D0 A1 01 00                                     	mov	ebp,[addressing_space]
00005D69: 3E F6 45 0A 01                                        	test	byte [ds:ebp+0Ah],1
00005D6E: 74 01                                                 	jz	mark_undefined_data
00005D70: C3                                                    	ret
                                                                      mark_undefined_data:
00005D71: 3B 05 D8 A1 01 00                                     	cmp	eax,[undefined_data_end]
00005D77: 74 05                                                 	je	undefined_data_ok
00005D79: A3 D4 A1 01 00                                        	mov	[undefined_data_start],eax
                                                                      undefined_data_ok:
00005D7E: 89 3D D8 A1 01 00                                     	mov	[undefined_data_end],edi
00005D84: C3                                                    	ret
                                                                data_unicode:
00005D85: 80 0D AF A2 01 00 FF                                  	or	[base_code],-1
00005D8C: EB 07                                                 	jmp	define_words
                                                                data_words:
00005D8E: C6 05 AF A2 01 00 00                                  	mov	[base_code],0
                                                                    define_words:
00005D95: E8 D0 FE FF FF                                        	call	define_data
00005D9A: 0F 82 DA F1 FF FF                                     	jc	instruction_assembled
00005DA0: AC                                                    	lods	byte [esi]
00005DA1: 3C 28                                                 	cmp	al,'('
00005DA3: 74 13                                                 	je	get_word
00005DA5: 3C 3F                                                 	cmp	al,'?'
00005DA7: 0F 85 7D AB FF FF                                     	jne	invalid_argument
00005DAD: 89 F8                                                 	mov	eax,edi
00005DAF: 66 83 27 00                                           	and	word [edi],0
00005DB3: 66 AF                                                 	scas	word [edi]
00005DB5: EB AC                                                 	jmp	undefined_data
00005DB7: C3                                                    	ret
                                                                      get_word:
00005DB8: 80 3D AF A2 01 00 00                                  	cmp	[base_code],0
00005DBF: 74 05                                                 	je	word_data_value
00005DC1: 80 3E 00                                              	cmp	byte [esi],0
00005DC4: 74 0D                                                 	je	word_string
                                                                      word_data_value:
00005DC6: E8 77 15 00 00                                        	call	get_word_value
00005DCB: E8 1C 26 00 00                                        	call	mark_relocation
00005DD0: 66 AB                                                 	stos	word [edi]
00005DD2: C3                                                    	ret
                                                                      word_string:
00005DD3: 46                                                    	inc	esi
00005DD4: AD                                                    	lods	dword [esi]
00005DD5: 89 C1                                                 	mov	ecx,eax
00005DD7: E3 16                                                 	jecxz	word_string_ok
00005DD9: 8D 04 4F                                              	lea	eax,[edi+ecx*2]
00005DDC: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
00005DE2: 0F 87 B4 AA FF FF                                     	ja	out_of_memory
00005DE8: 30 E4                                                 	xor	ah,ah
                                                                      copy_word_string:
00005DEA: AC                                                    	lods	byte [esi]
00005DEB: 66 AB                                                 	stos	word [edi]
00005DED: E2 FB                                                 	loop	copy_word_string
                                                                      word_string_ok:
00005DEF: 46                                                    	inc	esi
00005DF0: C3                                                    	ret
                                                                data_dwords:
00005DF1: E8 74 FE FF FF                                        	call	define_data
00005DF6: 0F 82 7E F1 FF FF                                     	jc	instruction_assembled
00005DFC: AC                                                    	lods	byte [esi]
00005DFD: 3C 28                                                 	cmp	al,'('
00005DFF: 74 13                                                 	je	get_dword
00005E01: 3C 3F                                                 	cmp	al,'?'
00005E03: 0F 85 21 AB FF FF                                     	jne	invalid_argument
00005E09: 89 F8                                                 	mov	eax,edi
00005E0B: 83 27 00                                              	and	dword [edi],0
00005E0E: AF                                                    	scas	dword [edi]
00005E0F: E9 4F FF FF FF                                        	jmp	undefined_data
                                                                      get_dword:
00005E14: 56                                                    	push	esi
00005E15: E8 70 15 00 00                                        	call	get_dword_value
00005E1A: 5B                                                    	pop	ebx
00005E1B: 80 3E 3A                                              	cmp	byte [esi],':'
00005E1E: 74 07                                                 	je	complex_dword
00005E20: E8 C7 25 00 00                                        	call	mark_relocation
00005E25: AB                                                    	stos	dword [edi]
00005E26: C3                                                    	ret
                                                                      complex_dword:
00005E27: 89 DE                                                 	mov	esi,ebx
00005E29: 80 3E 2E                                              	cmp	byte [esi],'.'
00005E2C: 0F 84 7A AB FF FF                                     	je	invalid_value
00005E32: E8 0B 15 00 00                                        	call	get_word_value
00005E37: 50                                                    	push	eax
00005E38: 46                                                    	inc	esi
00005E39: AC                                                    	lods	byte [esi]
00005E3A: 3C 28                                                 	cmp	al,'('
00005E3C: 0F 85 FC AA FF FF                                     	jne	invalid_operand
00005E42: A0 C0 A2 01 00                                        	mov	al,[value_type]
00005E47: 50                                                    	push	eax
00005E48: 80 3E 2E                                              	cmp	byte [esi],'.'
00005E4B: 0F 84 5B AB FF FF                                     	je	invalid_value
00005E51: E8 EC 14 00 00                                        	call	get_word_value
00005E56: E8 91 25 00 00                                        	call	mark_relocation
00005E5B: 66 AB                                                 	stos	word [edi]
00005E5D: 58                                                    	pop	eax
00005E5E: A2 C0 A2 01 00                                        	mov	[value_type],al
00005E63: 58                                                    	pop	eax
00005E64: E8 83 25 00 00                                        	call	mark_relocation
00005E69: 66 AB                                                 	stos	word [edi]
00005E6B: C3                                                    	ret
                                                                data_pwords:
00005E6C: E8 F9 FD FF FF                                        	call	define_data
00005E71: 0F 82 03 F1 FF FF                                     	jc	instruction_assembled
00005E77: AC                                                    	lods	byte [esi]
00005E78: 3C 28                                                 	cmp	al,'('
00005E7A: 74 19                                                 	je	get_pword
00005E7C: 3C 3F                                                 	cmp	al,'?'
00005E7E: 0F 85 A6 AA FF FF                                     	jne	invalid_argument
00005E84: 89 F8                                                 	mov	eax,edi
00005E86: 83 27 00                                              	and	dword [edi],0
00005E89: AF                                                    	scas	dword [edi]
00005E8A: 66 83 27 00                                           	and	word [edi],0
00005E8E: 66 AF                                                 	scas	word [edi]
00005E90: E9 CE FE FF FF                                        	jmp	undefined_data
                                                                      get_pword:
00005E95: 56                                                    	push	esi
00005E96: E8 49 15 00 00                                        	call	get_pword_value
00005E9B: 5B                                                    	pop	ebx
00005E9C: 80 3E 3A                                              	cmp	byte [esi],':'
00005E9F: 74 0C                                                 	je	complex_pword
00005EA1: E8 46 25 00 00                                        	call	mark_relocation
00005EA6: AB                                                    	stos	dword [edi]
00005EA7: 66 89 D0                                              	mov	ax,dx
00005EAA: 66 AB                                                 	stos	word [edi]
00005EAC: C3                                                    	ret
                                                                      complex_pword:
00005EAD: 89 DE                                                 	mov	esi,ebx
00005EAF: 80 3E 2E                                              	cmp	byte [esi],'.'
00005EB2: 0F 84 F4 AA FF FF                                     	je	invalid_value
00005EB8: E8 85 14 00 00                                        	call	get_word_value
00005EBD: 50                                                    	push	eax
00005EBE: 46                                                    	inc	esi
00005EBF: AC                                                    	lods	byte [esi]
00005EC0: 3C 28                                                 	cmp	al,'('
00005EC2: 0F 85 76 AA FF FF                                     	jne	invalid_operand
00005EC8: A0 C0 A2 01 00                                        	mov	al,[value_type]
00005ECD: 50                                                    	push	eax
00005ECE: 80 3E 2E                                              	cmp	byte [esi],'.'
00005ED1: 0F 84 D5 AA FF FF                                     	je	invalid_value
00005ED7: E8 AE 14 00 00                                        	call	get_dword_value
00005EDC: E8 0B 25 00 00                                        	call	mark_relocation
00005EE1: AB                                                    	stos	dword [edi]
00005EE2: 58                                                    	pop	eax
00005EE3: A2 C0 A2 01 00                                        	mov	[value_type],al
00005EE8: 58                                                    	pop	eax
00005EE9: E8 FE 24 00 00                                        	call	mark_relocation
00005EEE: 66 AB                                                 	stos	word [edi]
00005EF0: C3                                                    	ret
                                                                data_qwords:
00005EF1: E8 74 FD FF FF                                        	call	define_data
00005EF6: 0F 82 7E F0 FF FF                                     	jc	instruction_assembled
00005EFC: AC                                                    	lods	byte [esi]
00005EFD: 3C 28                                                 	cmp	al,'('
00005EFF: 74 17                                                 	je	get_qword
00005F01: 3C 3F                                                 	cmp	al,'?'
00005F03: 0F 85 21 AA FF FF                                     	jne	invalid_argument
00005F09: 89 F8                                                 	mov	eax,edi
00005F0B: 83 27 00                                              	and	dword [edi],0
00005F0E: AF                                                    	scas	dword [edi]
00005F0F: 83 27 00                                              	and	dword [edi],0
00005F12: AF                                                    	scas	dword [edi]
00005F13: E9 4B FE FF FF                                        	jmp	undefined_data
                                                                      get_qword:
00005F18: E8 08 15 00 00                                        	call	get_qword_value
00005F1D: E8 CA 24 00 00                                        	call	mark_relocation
00005F22: AB                                                    	stos	dword [edi]
00005F23: 89 D0                                                 	mov	eax,edx
00005F25: AB                                                    	stos	dword [edi]
00005F26: C3                                                    	ret
                                                                data_twords:
00005F27: E8 3E FD FF FF                                        	call	define_data
00005F2C: 0F 82 48 F0 FF FF                                     	jc	instruction_assembled
00005F32: AC                                                    	lods	byte [esi]
00005F33: 3C 28                                                 	cmp	al,'('
00005F35: 74 1D                                                 	je	get_tword
00005F37: 3C 3F                                                 	cmp	al,'?'
00005F39: 0F 85 EB A9 FF FF                                     	jne	invalid_argument
00005F3F: 89 F8                                                 	mov	eax,edi
00005F41: 83 27 00                                              	and	dword [edi],0
00005F44: AF                                                    	scas	dword [edi]
00005F45: 83 27 00                                              	and	dword [edi],0
00005F48: AF                                                    	scas	dword [edi]
00005F49: 66 83 27 00                                           	and	word [edi],0
00005F4D: 66 AF                                                 	scas	word [edi]
00005F4F: E9 0F FE FF FF                                        	jmp	undefined_data
                                                                      get_tword:
00005F54: 80 3E 2E                                              	cmp	byte [esi],'.'
00005F57: 0F 85 9F 00 00 00                                     	jne	complex_tword
00005F5D: 46                                                    	inc	esi
00005F5E: 66 81 7E 08 00 80                                     	cmp	word [esi+8],8000h
00005F64: 0F 84 81 00 00 00                                     	je	fp_zero_tword
00005F6A: 8B 06                                                 	mov	eax,[esi]
00005F6C: AB                                                    	stos	dword [edi]
00005F6D: 8B 46 04                                              	mov	eax,[esi+4]
00005F70: AB                                                    	stos	dword [edi]
00005F71: 66 8B 46 08                                           	mov	ax,[esi+8]
00005F75: 66 05 FF 3F                                           	add	ax,3FFFh
00005F79: 0F 80 37 AA FF FF                                     	jo	value_out_of_range
00005F7F: 66 3D FF 7F                                           	cmp	ax,7FFFh
00005F83: 0F 8D 2D AA FF FF                                     	jge	value_out_of_range
00005F89: 66 83 F8 00                                           	cmp	ax,0
00005F8D: 7F 4C                                                 	jg	tword_exp_ok
00005F8F: 66 89 C1                                              	mov	cx,ax
00005F92: 66 F7 D9                                              	neg	cx
00005F95: 66 41                                                 	inc	cx
00005F97: 66 83 F9 40                                           	cmp	cx,64
00005F9B: 0F 83 15 AA FF FF                                     	jae	value_out_of_range
00005FA1: 66 83 F9 20                                           	cmp	cx,32
00005FA5: 77 0E                                                 	ja	large_shift
00005FA7: 8B 06                                                 	mov	eax,[esi]
00005FA9: 8B 56 04                                              	mov	edx,[esi+4]
00005FAC: 89 D3                                                 	mov	ebx,edx
00005FAE: D3 EA                                                 	shr	edx,cl
00005FB0: 0F AD D8                                              	shrd	eax,ebx,cl
00005FB3: EB 0B                                                 	jmp	tword_mantissa_shift_done
                                                                      large_shift:
00005FB5: 66 83 E9 20                                           	sub	cx,32
00005FB9: 31 D2                                                 	xor	edx,edx
00005FBB: 8B 46 04                                              	mov	eax,[esi+4]
00005FBE: D3 E8                                                 	shr	eax,cl
                                                                      tword_mantissa_shift_done:
00005FC0: 73 06                                                 	jnc	store_shifted_mantissa
00005FC2: 83 C0 01                                              	add	eax,1
00005FC5: 83 D2 00                                              	adc	edx,0
                                                                      store_shifted_mantissa:
00005FC8: 89 47 F8                                              	mov	[edi-8],eax
00005FCB: 89 57 FC                                              	mov	[edi-4],edx
00005FCE: 66 31 C0                                              	xor	ax,ax
00005FD1: F7 C2 00 00 00 80                                     	test	edx,1 shl 31
00005FD7: 74 02                                                 	jz	tword_exp_ok
00005FD9: 66 40                                                 	inc	ax
                                                                      tword_exp_ok:
00005FDB: 8A 5E 0B                                              	mov	bl,[esi+11]
00005FDE: 66 C1 E3 0F                                           	shl	bx,15
00005FE2: 66 09 D8                                              	or	ax,bx
00005FE5: 66 AB                                                 	stos	word [edi]
00005FE7: 83 C6 0D                                              	add	esi,13
00005FEA: C3                                                    	ret
                                                                      fp_zero_tword:
00005FEB: 31 C0                                                 	xor	eax,eax
00005FED: AB                                                    	stos	dword [edi]
00005FEE: AB                                                    	stos	dword [edi]
00005FEF: 8A 46 0B                                              	mov	al,[esi+11]
00005FF2: 66 C1 E0 0F                                           	shl	ax,15
00005FF6: 66 AB                                                 	stos	word [edi]
00005FF8: 83 C6 0D                                              	add	esi,13
00005FFB: C3                                                    	ret
                                                                      complex_tword:
00005FFC: E8 41 13 00 00                                        	call	get_word_value
00006001: 50                                                    	push	eax
00006002: 80 3E 3A                                              	cmp	byte [esi],':'
00006005: 0F 85 33 A9 FF FF                                     	jne	invalid_operand
0000600B: 46                                                    	inc	esi
0000600C: AC                                                    	lods	byte [esi]
0000600D: 3C 28                                                 	cmp	al,'('
0000600F: 0F 85 29 A9 FF FF                                     	jne	invalid_operand
00006015: A0 C0 A2 01 00                                        	mov	al,[value_type]
0000601A: 50                                                    	push	eax
0000601B: 80 3E 2E                                              	cmp	byte [esi],'.'
0000601E: 0F 84 88 A9 FF FF                                     	je	invalid_value
00006024: E8 FC 13 00 00                                        	call	get_qword_value
00006029: E8 BE 23 00 00                                        	call	mark_relocation
0000602E: AB                                                    	stos	dword [edi]
0000602F: 89 D0                                                 	mov	eax,edx
00006031: AB                                                    	stos	dword [edi]
00006032: 58                                                    	pop	eax
00006033: A2 C0 A2 01 00                                        	mov	[value_type],al
00006038: 58                                                    	pop	eax
00006039: E8 AE 23 00 00                                        	call	mark_relocation
0000603E: 66 AB                                                 	stos	word [edi]
00006040: C3                                                    	ret
                                                                data_file:
00006041: 66 AD                                                 	lods	word [esi]
00006043: 66 83 F8 28                                           	cmp	ax,'('
00006047: 0F 85 DD A8 FF FF                                     	jne	invalid_argument
0000604D: 83 C6 04                                              	add	esi,4
00006050: E8 A9 00 00 00                                        	call	open_binary_file
00006055: 8B 46 FC                                              	mov	eax,[esi-4]
00006058: 8D 74 06 01                                           	lea	esi,[esi+eax+1]
0000605C: B0 02                                                 	mov	al,2
0000605E: 31 D2                                                 	xor	edx,edx
00006060: E8 87 A3 FF FF                                        	call	lseek
00006065: 50                                                    	push	eax
00006066: 31 D2                                                 	xor	edx,edx
00006068: 80 3E 3A                                              	cmp	byte [esi],':'
0000606B: 75 26                                                 	jne	position_ok
0000606D: 46                                                    	inc	esi
0000606E: 80 3E 28                                              	cmp	byte [esi],'('
00006071: 0F 85 B3 A8 FF FF                                     	jne	invalid_argument
00006077: 46                                                    	inc	esi
00006078: 80 3E 2E                                              	cmp	byte [esi],'.'
0000607B: 0F 84 2B A9 FF FF                                     	je	invalid_value
00006081: 53                                                    	push	ebx
00006082: E8 B7 13 00 00                                        	call	get_count_value
00006087: 5B                                                    	pop	ebx
00006088: 89 C2                                                 	mov	edx,eax
0000608A: 29 14 24                                              	sub	[esp],edx
0000608D: 0F 82 23 A9 FF FF                                     	jc	value_out_of_range
                                                                      position_ok:
00006093: 80 3E 2C                                              	cmp	byte [esi],','
00006096: 75 29                                                 	jne	size_ok
00006098: 46                                                    	inc	esi
00006099: 80 3E 28                                              	cmp	byte [esi],'('
0000609C: 0F 85 88 A8 FF FF                                     	jne	invalid_argument
000060A2: 46                                                    	inc	esi
000060A3: 80 3E 2E                                              	cmp	byte [esi],'.'
000060A6: 0F 84 00 A9 FF FF                                     	je	invalid_value
000060AC: 53 52                                                 	push	ebx edx
000060AE: E8 8B 13 00 00                                        	call	get_count_value
000060B3: 5A 5B                                                 	pop	edx ebx
000060B5: 3B 04 24                                              	cmp	eax,[esp]
000060B8: 0F 87 F8 A8 FF FF                                     	ja	value_out_of_range
000060BE: 89 04 24                                              	mov	[esp],eax
                                                                      size_ok:
000060C1: 30 C0                                                 	xor	al,al
000060C3: E8 24 A3 FF FF                                        	call	lseek
000060C8: 59                                                    	pop	ecx
000060C9: 89 FA                                                 	mov	edx,edi
000060CB: 01 CF                                                 	add	edi,ecx
000060CD: 0F 82 C9 A7 FF FF                                     	jc	out_of_memory
000060D3: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
000060D9: 0F 87 BD A7 FF FF                                     	ja	out_of_memory
000060DF: E8 E4 A2 FF FF                                        	call	read
000060E4: 0F 82 0E A8 FF FF                                     	jc	error_reading_file
000060EA: E8 D1 A2 FF FF                                        	call	close
000060EF: AC                                                    	lods	byte [esi]
000060F0: 3C 2C                                                 	cmp	al,','
000060F2: 0F 84 49 FF FF FF                                     	je	data_file
000060F8: 4E                                                    	dec	esi
000060F9: E9 7C EE FF FF                                        	jmp	instruction_assembled
                                                                      open_binary_file:
000060FE: 56                                                    	push	esi
000060FF: 57                                                    	push	edi
00006100: A1 80 A1 01 00                                        	mov	eax,[current_line]
                                                                      find_current_source_path: 
00006105: 8B 30                                                 	mov	esi,[eax] 
00006107: F6 40 07 80                                           	test	byte [eax+7],80h 
0000610B: 74 05                                                 	jz	get_current_path 
0000610D: 8B 40 08                                              	mov	eax,[eax+8]
00006110: EB F3                                                 	jmp	find_current_source_path
                                                                      get_current_path:
00006112: AC                                                    	lodsb
00006113: AA                                                    	stosb
00006114: 08 C0                                                 	or	al,al
00006116: 75 FA                                                 	jnz	get_current_path
                                                                      cut_current_path:
00006118: 3B 3C 24                                              	cmp	edi,[esp]
0000611B: 74 0F                                                 	je	current_path_ok
0000611D: 80 7F FF 5C                                           	cmp	byte [edi-1],'\'
00006121: 74 09                                                 	je	current_path_ok
00006123: 80 7F FF 2F                                           	cmp	byte [edi-1],'/'
00006127: 74 03                                                 	je	current_path_ok
00006129: 4F                                                    	dec	edi
0000612A: EB EC                                                 	jmp	cut_current_path
                                                                      current_path_ok:
0000612C: 8B 74 24 04                                           	mov	esi,[esp+4]
00006130: E8 E0 1C 00 00                                        	call	expand_path
00006135: 5A                                                    	pop	edx
00006136: 89 D6                                                 	mov	esi,edx
00006138: E8 2B A2 FF FF                                        	call	open
0000613D: 73 49                                                 	jnc	file_opened
0000613F: 8B 15 60 A1 01 00                                     	mov	edx,[include_paths]
                                                                      search_in_include_paths:
00006145: 52 56                                                 	push	edx esi
00006147: 89 F7                                                 	mov	edi,esi
00006149: 8B 74 24 04                                           	mov	esi,[esp+4]
0000614D: E8 FF 1C 00 00                                        	call	get_include_directory
00006152: 89 74 24 04                                           	mov	[esp+4],esi
00006156: 8B 74 24 08                                           	mov	esi,[esp+8]
0000615A: E8 B6 1C 00 00                                        	call	expand_path
0000615F: 5A                                                    	pop	edx
00006160: 89 D6                                                 	mov	esi,edx
00006162: E8 01 A2 FF FF                                        	call	open
00006167: 5A                                                    	pop	edx
00006168: 73 1E                                                 	jnc	file_opened
0000616A: 80 3A 00                                              	cmp	byte [edx],0
0000616D: 75 D6                                                 	jne	search_in_include_paths
0000616F: 89 F7                                                 	mov	edi,esi
00006171: 8B 34 24                                              	mov	esi,[esp]
00006174: 57                                                    	push	edi
00006175: E8 9B 1C 00 00                                        	call	expand_path
0000617A: 5A                                                    	pop	edx
0000617B: 89 D6                                                 	mov	esi,edx
0000617D: E8 E6 A1 FF FF                                        	call	open
00006182: 0F 82 66 A7 FF FF                                     	jc	file_not_found
                                                                      file_opened:
00006188: 89 F7                                                 	mov	edi,esi
0000618A: 5E                                                    	pop	esi
0000618B: C3                                                    	ret
                                                                reserve_bytes:
0000618C: AC                                                    	lods	byte [esi]
0000618D: 3C 28                                                 	cmp	al,'('
0000618F: 0F 85 95 A7 FF FF                                     	jne	invalid_argument
00006195: 80 3E 2E                                              	cmp	byte [esi],'.'
00006198: 0F 84 0E A8 FF FF                                     	je	invalid_value
0000619E: E8 9B 12 00 00                                        	call	get_count_value
000061A3: 89 C1                                                 	mov	ecx,eax
000061A5: 89 CA                                                 	mov	edx,ecx
000061A7: 01 FA                                                 	add	edx,edi
000061A9: 0F 82 ED A6 FF FF                                     	jc	out_of_memory
000061AF: 3B 15 F0 A1 01 00                                     	cmp	edx,[tagged_blocks]
000061B5: 0F 87 E1 A6 FF FF                                     	ja	out_of_memory
000061BB: 57                                                    	push	edi
000061BC: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
000061C3: 74 04                                                 	je	zero_bytes
000061C5: 01 CF                                                 	add	edi,ecx
000061C7: EB 0F                                                 	jmp	reserved_data
                                                                      zero_bytes:
000061C9: 31 C0                                                 	xor	eax,eax
000061CB: D1 E9                                                 	shr	ecx,1
000061CD: 73 01                                                 	jnc	bytes_stosb_ok
000061CF: AA                                                    	stos	byte [edi]
                                                                      bytes_stosb_ok:
000061D0: D1 E9                                                 	shr	ecx,1
000061D2: 73 02                                                 	jnc	bytes_stosw_ok
000061D4: 66 AB                                                 	stos	word [edi]
                                                                      bytes_stosw_ok:
000061D6: F3 AB                                                 	rep	stos dword [edi]
                                                                      reserved_data:
000061D8: 58                                                    	pop	eax
000061D9: E8 85 FB FF FF                                        	call	undefined_data
000061DE: E9 97 ED FF FF                                        	jmp	instruction_assembled
                                                                reserve_words:
000061E3: AC                                                    	lods	byte [esi]
000061E4: 3C 28                                                 	cmp	al,'('
000061E6: 0F 85 3E A7 FF FF                                     	jne	invalid_argument
000061EC: 80 3E 2E                                              	cmp	byte [esi],'.'
000061EF: 0F 84 B7 A7 FF FF                                     	je	invalid_value
000061F5: E8 44 12 00 00                                        	call	get_count_value
000061FA: 89 C1                                                 	mov	ecx,eax
000061FC: 89 CA                                                 	mov	edx,ecx
000061FE: D1 E2                                                 	shl	edx,1
00006200: 0F 82 96 A6 FF FF                                     	jc	out_of_memory
00006206: 01 FA                                                 	add	edx,edi
00006208: 0F 82 8E A6 FF FF                                     	jc	out_of_memory
0000620E: 3B 15 F0 A1 01 00                                     	cmp	edx,[tagged_blocks]
00006214: 0F 87 82 A6 FF FF                                     	ja	out_of_memory
0000621A: 57                                                    	push	edi
0000621B: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
00006222: 74 05                                                 	je	zero_words
00006224: 8D 3C 4F                                              	lea	edi,[edi+ecx*2]
00006227: EB AF                                                 	jmp	reserved_data
                                                                      zero_words:
00006229: 31 C0                                                 	xor	eax,eax
0000622B: D1 E9                                                 	shr	ecx,1
0000622D: 73 02                                                 	jnc	words_stosw_ok
0000622F: 66 AB                                                 	stos	word [edi]
                                                                      words_stosw_ok:
00006231: F3 AB                                                 	rep	stos dword [edi]
00006233: EB A3                                                 	jmp	reserved_data
                                                                reserve_dwords:
00006235: AC                                                    	lods	byte [esi]
00006236: 3C 28                                                 	cmp	al,'('
00006238: 0F 85 EC A6 FF FF                                     	jne	invalid_argument
0000623E: 80 3E 2E                                              	cmp	byte [esi],'.'
00006241: 0F 84 65 A7 FF FF                                     	je	invalid_value
00006247: E8 F2 11 00 00                                        	call	get_count_value
0000624C: 89 C1                                                 	mov	ecx,eax
0000624E: 89 CA                                                 	mov	edx,ecx
00006250: D1 E2                                                 	shl	edx,1
00006252: 0F 82 44 A6 FF FF                                     	jc	out_of_memory
00006258: D1 E2                                                 	shl	edx,1
0000625A: 0F 82 3C A6 FF FF                                     	jc	out_of_memory
00006260: 01 FA                                                 	add	edx,edi
00006262: 0F 82 34 A6 FF FF                                     	jc	out_of_memory
00006268: 3B 15 F0 A1 01 00                                     	cmp	edx,[tagged_blocks]
0000626E: 0F 87 28 A6 FF FF                                     	ja	out_of_memory
00006274: 57                                                    	push	edi
00006275: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
0000627C: 74 08                                                 	je	zero_dwords
0000627E: 8D 3C 8F                                              	lea	edi,[edi+ecx*4]
00006281: E9 52 FF FF FF                                        	jmp	reserved_data
                                                                      zero_dwords:
00006286: 31 C0                                                 	xor	eax,eax
00006288: F3 AB                                                 	rep	stos dword [edi]
0000628A: E9 49 FF FF FF                                        	jmp	reserved_data
                                                                reserve_pwords:
0000628F: AC                                                    	lods	byte [esi]
00006290: 3C 28                                                 	cmp	al,'('
00006292: 0F 85 92 A6 FF FF                                     	jne	invalid_argument
00006298: 80 3E 2E                                              	cmp	byte [esi],'.'
0000629B: 0F 84 0B A7 FF FF                                     	je	invalid_value
000062A1: E8 98 11 00 00                                        	call	get_count_value
000062A6: 89 C1                                                 	mov	ecx,eax
000062A8: D1 E1                                                 	shl	ecx,1
000062AA: 0F 82 EC A5 FF FF                                     	jc	out_of_memory
000062B0: 01 C1                                                 	add	ecx,eax
000062B2: 89 CA                                                 	mov	edx,ecx
000062B4: D1 E2                                                 	shl	edx,1
000062B6: 0F 82 E0 A5 FF FF                                     	jc	out_of_memory
000062BC: 01 FA                                                 	add	edx,edi
000062BE: 0F 82 D8 A5 FF FF                                     	jc	out_of_memory
000062C4: 3B 15 F0 A1 01 00                                     	cmp	edx,[tagged_blocks]
000062CA: 0F 87 CC A5 FF FF                                     	ja	out_of_memory
000062D0: 57                                                    	push	edi
000062D1: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
000062D8: 0F 84 4B FF FF FF                                     	je	zero_words
000062DE: 8D 3C 4F                                              	lea	edi,[edi+ecx*2]
000062E1: E9 F2 FE FF FF                                        	jmp	reserved_data
                                                                reserve_qwords:
000062E6: AC                                                    	lods	byte [esi]
000062E7: 3C 28                                                 	cmp	al,'('
000062E9: 0F 85 3B A6 FF FF                                     	jne	invalid_argument
000062EF: 80 3E 2E                                              	cmp	byte [esi],'.'
000062F2: 0F 84 B4 A6 FF FF                                     	je	invalid_value
000062F8: E8 41 11 00 00                                        	call	get_count_value
000062FD: 89 C1                                                 	mov	ecx,eax
000062FF: D1 E1                                                 	shl	ecx,1
00006301: 0F 82 95 A5 FF FF                                     	jc	out_of_memory
00006307: 89 CA                                                 	mov	edx,ecx
00006309: D1 E2                                                 	shl	edx,1
0000630B: 0F 82 8B A5 FF FF                                     	jc	out_of_memory
00006311: D1 E2                                                 	shl	edx,1
00006313: 0F 82 83 A5 FF FF                                     	jc	out_of_memory
00006319: 01 FA                                                 	add	edx,edi
0000631B: 0F 82 7B A5 FF FF                                     	jc	out_of_memory
00006321: 3B 15 F0 A1 01 00                                     	cmp	edx,[tagged_blocks]
00006327: 0F 87 6F A5 FF FF                                     	ja	out_of_memory
0000632D: 57                                                    	push	edi
0000632E: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
00006335: 0F 84 4B FF FF FF                                     	je	zero_dwords
0000633B: 8D 3C 8F                                              	lea	edi,[edi+ecx*4]
0000633E: E9 95 FE FF FF                                        	jmp	reserved_data
                                                                reserve_twords:
00006343: AC                                                    	lods	byte [esi]
00006344: 3C 28                                                 	cmp	al,'('
00006346: 0F 85 DE A5 FF FF                                     	jne	invalid_argument
0000634C: 80 3E 2E                                              	cmp	byte [esi],'.'
0000634F: 0F 84 57 A6 FF FF                                     	je	invalid_value
00006355: E8 E4 10 00 00                                        	call	get_count_value
0000635A: 89 C1                                                 	mov	ecx,eax
0000635C: C1 E1 02                                              	shl	ecx,2
0000635F: 0F 82 37 A5 FF FF                                     	jc	out_of_memory
00006365: 01 C1                                                 	add	ecx,eax
00006367: 89 CA                                                 	mov	edx,ecx
00006369: D1 E2                                                 	shl	edx,1
0000636B: 0F 82 2B A5 FF FF                                     	jc	out_of_memory
00006371: 01 FA                                                 	add	edx,edi
00006373: 0F 82 23 A5 FF FF                                     	jc	out_of_memory
00006379: 3B 15 F0 A1 01 00                                     	cmp	edx,[tagged_blocks]
0000637F: 0F 87 17 A5 FF FF                                     	ja	out_of_memory
00006385: 57                                                    	push	edi
00006386: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
0000638D: 0F 84 96 FE FF FF                                     	je	zero_words
00006393: 8D 3C 4F                                              	lea	edi,[edi+ecx*2]
00006396: E9 3D FE FF FF                                        	jmp	reserved_data
                                                                align_directive:
0000639B: AC                                                    	lods	byte [esi]
0000639C: 3C 28                                                 	cmp	al,'('
0000639E: 0F 85 86 A5 FF FF                                     	jne	invalid_argument
000063A4: 80 3E 2E                                              	cmp	byte [esi],'.'
000063A7: 0F 84 FF A5 FF FF                                     	je	invalid_value
000063AD: E8 8C 10 00 00                                        	call	get_count_value
000063B2: 89 C2                                                 	mov	edx,eax
000063B4: 4A                                                    	dec	edx
000063B5: 85 D0                                                 	test	eax,edx
000063B7: 0F 85 A4 00 00 00                                     	jnz	invalid_align_value
000063BD: 09 C0                                                 	or	eax,eax
000063BF: 0F 84 9C 00 00 00                                     	jz	invalid_align_value
000063C5: 83 F8 01                                              	cmp	eax,1
000063C8: 0F 84 AC EB FF FF                                     	je	instruction_assembled
000063CE: 89 F9                                                 	mov	ecx,edi
000063D0: 8B 2D D0 A1 01 00                                     	mov	ebp,[addressing_space]
000063D6: 3E 2B 4D 00                                           	sub	ecx,[ds:ebp]
000063DA: 3E 83 7D 10 00                                        	cmp	dword [ds:ebp+10h],0
000063DF: 0F 85 B4 A6 FF FF                                     	jne	section_not_aligned_enough
000063E5: 3E 80 7D 09 00                                        	cmp	byte [ds:ebp+9],0
000063EA: 74 40                                                 	je	make_alignment
000063EC: 80 3D C9 A2 01 00 03                                  	cmp	[output_format],3
000063F3: 74 2C                                                 	je	pe_alignment
000063F5: 80 3D C9 A2 01 00 05                                  	cmp	[output_format],5
000063FC: 75 0C                                                 	jne	object_alignment
000063FE: F7 05 40 A2 01 00 01 00 00 00                         	test	[format_flags],1
00006408: 75 17                                                 	jnz	pe_alignment
                                                                      object_alignment:
0000640A: 3E 8B 5D 14                                           	mov	ebx,[ds:ebp+14h]
0000640E: 80 3B 00                                              	cmp	byte [ebx],0
00006411: 0F 85 82 A6 FF FF                                     	jne	section_not_aligned_enough
00006417: 3B 43 10                                              	cmp	eax,[ebx+10h]
0000641A: 76 10                                                 	jbe	make_alignment
0000641C: E9 78 A6 FF FF                                        	jmp	section_not_aligned_enough
                                                                      pe_alignment:
00006421: 3D 00 10 00 00                                        	cmp	eax,1000h
00006426: 0F 87 6D A6 FF FF                                     	ja	section_not_aligned_enough
                                                                      make_alignment:
0000642C: 48                                                    	dec	eax
0000642D: 21 C1                                                 	and	ecx,eax
0000642F: 0F 84 45 EB FF FF                                     	jz	instruction_assembled
00006435: F7 D9                                                 	neg	ecx
00006437: 01 C1                                                 	add	ecx,eax
00006439: 41                                                    	inc	ecx
0000643A: 89 CA                                                 	mov	edx,ecx
0000643C: 01 FA                                                 	add	edx,edi
0000643E: 0F 82 58 A4 FF FF                                     	jc	out_of_memory
00006444: 3B 15 F0 A1 01 00                                     	cmp	edx,[tagged_blocks]
0000644A: 0F 87 4C A4 FF FF                                     	ja	out_of_memory
00006450: 57                                                    	push	edi
00006451: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
00006458: 74 2D                                                 	je	nops
0000645A: 01 CF                                                 	add	edi,ecx
0000645C: E9 77 FD FF FF                                        	jmp	reserved_data
                                                                      invalid_align_value:
00006461: 83 3D E8 A1 01 00 00                                  	cmp	[error_line],0
00006468: 0F 85 0C EB FF FF                                     	jne	instruction_assembled
0000646E: A1 80 A1 01 00                                        	mov	eax,[current_line]
00006473: A3 E8 A1 01 00                                        	mov	[error_line],eax
00006478: C7 05 EC A1 01 00 AC 09 00 00                         	mov	[error],invalid_value
00006482: E9 F3 EA FF FF                                        	jmp	instruction_assembled
                                                                      nops:
00006487: B8 90 90 90 90                                        	mov	eax,90909090h
0000648C: D1 E9                                                 	shr	ecx,1
0000648E: 73 01                                                 	jnc	nops_stosb_ok
00006490: AA                                                    	stos	byte [edi]
                                                                      nops_stosb_ok:
00006491: D1 E9                                                 	shr	ecx,1
00006493: 73 02                                                 	jnc	nops_stosw_ok
00006495: 66 AB                                                 	stos	word [edi]
                                                                      nops_stosw_ok:
00006497: F3 AB                                                 	rep	stos dword [edi]
00006499: E9 3A FD FF FF                                        	jmp	reserved_data
                                                                err_directive:
0000649E: 8A 06                                                 	mov	al,[esi]
000064A0: 3C 0F                                                 	cmp	al,0Fh
000064A2: 0F 84 14 A6 FF FF                                     	je	invoked_error
000064A8: 08 C0                                                 	or	al,al
000064AA: 0F 84 0C A6 FF FF                                     	jz	invoked_error
000064B0: E9 DD A5 FF FF                                        	jmp	extra_characters_on_line
                                                                assert_directive:
000064B5: E8 AC 14 00 00                                        	call	calculate_logical_expression
000064BA: 08 C0                                                 	or	al,al
000064BC: 0F 85 B8 EA FF FF                                     	jnz	instruction_assembled
000064C2: 83 3D E8 A1 01 00 00                                  	cmp	[error_line],0
000064C9: 0F 85 AB EA FF FF                                     	jne	instruction_assembled
000064CF: A1 80 A1 01 00                                        	mov	eax,[current_line]
000064D4: A3 E8 A1 01 00                                        	mov	[error_line],eax
000064D9: C7 05 EC A1 01 00 B5 0A 00 00                         	mov	[error],assertion_failed
000064E3: E9 92 EA FF FF                                        	jmp	instruction_assembled
                                                                
                                                                include '..\exprcalc.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                calculate_expression:
000064E8: 89 3D FC A1 01 00                                     	mov	[current_offset],edi
000064EE: C6 05 BE A2 01 00 00                                  	mov	[value_undefined],0
000064F5: 80 3E 00                                              	cmp	byte [esi],0
000064F8: 0F 84 94 0D 00 00                                     	je	get_string_value
000064FE: 80 3E 2E                                              	cmp	byte [esi],'.'
00006501: 0F 84 88 0B 00 00                                     	je	convert_fp
                                                                      calculation_loop:
00006507: A1 F0 A1 01 00                                        	mov	eax,[tagged_blocks]
0000650C: 83 E8 0C                                              	sub	eax,0Ch
0000650F: 39 F8                                                 	cmp	eax,edi
00006511: 0F 86 85 A3 FF FF                                     	jbe	out_of_memory
00006517: AC                                                    	lods	byte [esi]
00006518: 3C 01                                                 	cmp	al,1
0000651A: 0F 84 0A 01 00 00                                     	je	get_byte_number
00006520: 3C 02                                                 	cmp	al,2
00006522: 0F 84 1E 01 00 00                                     	je	get_word_number
00006528: 3C 04                                                 	cmp	al,4
0000652A: 0F 84 21 01 00 00                                     	je	get_dword_number
00006530: 3C 08                                                 	cmp	al,8
00006532: 0F 84 1F 01 00 00                                     	je	get_qword_number
00006538: 3C 0F                                                 	cmp	al,0Fh
0000653A: 0F 84 76 A4 FF FF                                     	je	value_out_of_range
00006540: 3C 10                                                 	cmp	al,10h
00006542: 0F 84 13 01 00 00                                     	je	get_register
00006548: 3C 11                                                 	cmp	al,11h
0000654A: 0F 84 2B 01 00 00                                     	je	get_label
00006550: 3C 29                                                 	cmp	al,')'
00006552: 0F 84 BB 00 00 00                                     	je	expression_calculated
00006558: 3C 5D                                                 	cmp	al,']'
0000655A: 0F 84 B3 00 00 00                                     	je	expression_calculated
00006560: 3C 21                                                 	cmp	al,'!'
00006562: 0F 84 30 A4 FF FF                                     	je	invalid_expression
00006568: 83 EF 14                                              	sub	edi,14h
0000656B: 89 FB                                                 	mov	ebx,edi
0000656D: 83 EB 14                                              	sub	ebx,14h
00006570: 3C F0                                                 	cmp	al,0F0h
00006572: 0F 84 9D 08 00 00                                     	je	calculate_rva
00006578: 3C F1                                                 	cmp	al,0F1h
0000657A: 0F 84 6E 09 00 00                                     	je	calculate_plt
00006580: 3C D0                                                 	cmp	al,0D0h
00006582: 0F 84 A4 07 00 00                                     	je	calculate_not
00006588: 3C E0                                                 	cmp	al,0E0h
0000658A: 0F 84 C2 07 00 00                                     	je	calculate_bsf
00006590: 3C E1                                                 	cmp	al,0E1h
00006592: 0F 84 F5 07 00 00                                     	je	calculate_bsr
00006598: 3C 83                                                 	cmp	al,083h
0000659A: 0F 84 2F 08 00 00                                     	je	calculate_neg
000065A0: 66 8B 53 08                                           	mov	dx,[ebx+8]
000065A4: 66 0B 57 08                                           	or	dx,[edi+8]
000065A8: 3C 80                                                 	cmp	al,80h
000065AA: 0F 84 10 03 00 00                                     	je	calculate_add
000065B0: 3C 81                                                 	cmp	al,81h
000065B2: 0F 84 C6 03 00 00                                     	je	calculate_sub
000065B8: 8A 63 0C                                              	mov	ah,[ebx+12]
000065BB: 0A 67 0C                                              	or	ah,[edi+12]
000065BE: 74 05                                                 	jz	absolute_values_calculation
000065C0: E8 5D 0D 00 00                                        	call	recoverable_misuse
                                                                      absolute_values_calculation:
000065C5: 3C 90                                                 	cmp	al,90h
000065C7: 0F 84 40 04 00 00                                     	je	calculate_mul
000065CD: 3C 91                                                 	cmp	al,91h
000065CF: 0F 84 AB 05 00 00                                     	je	calculate_div
000065D5: 66 09 D2                                              	or	dx,dx
000065D8: 0F 85 BA A3 FF FF                                     	jnz	invalid_expression
000065DE: 3C A0                                                 	cmp	al,0A0h
000065E0: 0F 84 F9 05 00 00                                     	je	calculate_mod
000065E6: 3C B0                                                 	cmp	al,0B0h
000065E8: 0F 84 07 06 00 00                                     	je	calculate_and
000065EE: 3C B1                                                 	cmp	al,0B1h
000065F0: 0F 84 14 06 00 00                                     	je	calculate_or
000065F6: 3C B2                                                 	cmp	al,0B2h
000065F8: 0F 84 21 06 00 00                                     	je	calculate_xor
000065FE: 3C C0                                                 	cmp	al,0C0h
00006600: 0F 84 40 06 00 00                                     	je	calculate_shl
00006606: 3C C1                                                 	cmp	al,0C1h
00006608: 0F 84 C8 06 00 00                                     	je	calculate_shr
0000660E: E9 85 A3 FF FF                                        	jmp	invalid_expression
                                                                      expression_calculated:
00006613: 83 EF 14                                              	sub	edi,14h
00006616: 80 3D BE A2 01 00 00                                  	cmp	[value_undefined],0
0000661D: 74 0A                                                 	je	expression_value_ok
0000661F: 31 C0                                                 	xor	eax,eax
00006621: 89 07                                                 	mov	[edi],eax
00006623: 89 47 04                                              	mov	[edi+4],eax
00006626: 89 47 0C                                              	mov	[edi+12],eax
                                                                      expression_value_ok:
00006629: C3                                                    	ret
                                                                      get_byte_number:
0000662A: 31 C0                                                 	xor	eax,eax
0000662C: AC                                                    	lods	byte [esi]
0000662D: AB                                                    	stos	dword [edi]
0000662E: 30 C0                                                 	xor	al,al
00006630: AB                                                    	stos	dword [edi]
                                                                      got_number:
00006631: 66 83 27 00                                           	and	word [edi-8+8],0
00006635: 66 83 67 04 00                                        	and	word [edi-8+12],0
0000663A: 83 67 08 00                                           	and	dword [edi-8+16],0
0000663E: 83 C7 0C                                              	add	edi,0Ch
00006641: E9 C1 FE FF FF                                        	jmp	calculation_loop
                                                                      get_word_number:
00006646: 31 C0                                                 	xor	eax,eax
00006648: 66 AD                                                 	lods	word [esi]
0000664A: AB                                                    	stos	dword [edi]
0000664B: 66 31 C0                                              	xor	ax,ax
0000664E: AB                                                    	stos	dword [edi]
0000664F: EB E0                                                 	jmp	got_number
                                                                      get_dword_number:
00006651: A5                                                    	movs	dword [edi],[esi]
00006652: 31 C0                                                 	xor	eax,eax
00006654: AB                                                    	stos	dword [edi]
00006655: EB DA                                                 	jmp	got_number
                                                                      get_qword_number:
00006657: A5                                                    	movs	dword [edi],[esi]
00006658: A5                                                    	movs	dword [edi],[esi]
00006659: EB D6                                                 	jmp	got_number
                                                                      get_register:
0000665B: C6 47 09 00                                           	mov	byte [edi+9],0
0000665F: 66 83 67 0C 00                                        	and	word [edi+12],0
00006664: AC                                                    	lods	byte [esi]
00006665: 88 47 08                                              	mov	[edi+8],al
00006668: C6 47 0A 01                                           	mov	byte [edi+10],1
0000666C: 31 C0                                                 	xor	eax,eax
0000666E: 89 47 10                                              	mov	[edi+16],eax
00006671: AB                                                    	stos	dword [edi]
00006672: AB                                                    	stos	dword [edi]
00006673: 83 C7 0C                                              	add	edi,0Ch
00006676: E9 8C FE FF FF                                        	jmp	calculation_loop
                                                                      get_label:
0000667B: 31 C0                                                 	xor	eax,eax
0000667D: 89 47 08                                              	mov	[edi+8],eax
00006680: 89 47 0C                                              	mov	[edi+12],eax
00006683: 89 47 14                                              	mov	[edi+20],eax
00006686: AD                                                    	lods	dword [esi]
00006687: 83 F8 0F                                              	cmp	eax,0Fh
0000668A: 0F 82 AC 01 00 00                                     	jb	predefined_label
00006690: 0F 84 D9 A3 FF FF                                     	je	reserved_word_used_as_symbol
00006696: 89 C3                                                 	mov	ebx,eax
00006698: 66 A1 5E A1 01 00                                     	mov	ax,[current_pass]
0000669E: 66 89 43 12                                           	mov	[ebx+18],ax
000066A2: 8A 4B 09                                              	mov	cl,[ebx+9]
000066A5: D0 E9                                                 	shr	cl,1
000066A7: 80 E1 01                                              	and	cl,1
000066AA: F6 D9                                                 	neg	cl
000066AC: 80 4B 08 08                                           	or	byte [ebx+8],8
000066B0: F6 43 08 01                                           	test	byte [ebx+8],1
000066B4: 0F 84 B5 01 00 00                                     	jz	label_undefined
000066BA: 66 3B 43 10                                           	cmp	ax,[ebx+16]
000066BE: 74 48                                                 	je	unadjusted_label
000066C0: F6 43 08 04                                           	test	byte [ebx+8],4
000066C4: 0F 85 9E 01 00 00                                     	jnz	label_out_of_scope
000066CA: F6 43 09 01                                           	test	byte [ebx+9],1
000066CE: 74 38                                                 	jz	unadjusted_label
000066D0: 8B 03                                                 	mov	eax,[ebx]
000066D2: 2B 05 28 A2 01 00                                     	sub	eax,dword [adjustment]
000066D8: AB                                                    	stos	dword [edi]
000066D9: 8B 43 04                                              	mov	eax,[ebx+4]
000066DC: 1B 05 2C A2 01 00                                     	sbb	eax,dword [adjustment+4]
000066E2: AB                                                    	stos	dword [edi]
000066E3: 1A 0D CB A2 01 00                                     	sbb	cl,[adjustment_sign]
000066E9: 88 4F 05                                              	mov	[edi-8+13],cl
000066EC: A1 28 A2 01 00                                        	mov	eax,dword [adjustment]
000066F1: 0A 05 CB A2 01 00                                     	or	al,[adjustment_sign]
000066F7: 0B 05 2C A2 01 00                                     	or	eax,dword [adjustment+4]
000066FD: 74 13                                                 	jz	got_label
000066FF: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
00006706: EB 0A                                                 	jmp	got_label
                                                                      unadjusted_label:
00006708: 8B 03                                                 	mov	eax,[ebx]
0000670A: AB                                                    	stos	dword [edi]
0000670B: 8B 43 04                                              	mov	eax,[ebx+4]
0000670E: AB                                                    	stos	dword [edi]
0000670F: 88 4F 05                                              	mov	[edi-8+13],cl
                                                                      got_label:
00006712: F6 43 09 04                                           	test	byte [ebx+9],4
00006716: 0F 85 3E A3 FF FF                                     	jnz	invalid_use_of_symbol
0000671C: E8 36 09 00 00                                        	call	store_label_reference
00006721: 8A 43 0B                                              	mov	al,[ebx+11]
00006724: 88 47 04                                              	mov	[edi-8+12],al
00006727: 8B 43 0C                                              	mov	eax,[ebx+12]
0000672A: 89 07                                                 	mov	[edi-8+8],eax
0000672C: 38 E0                                                 	cmp	al,ah
0000672E: 75 10                                                 	jne	labeled_registers_ok
00006730: C1 E8 10                                              	shr	eax,16
00006733: 00 E0                                                 	add	al,ah
00006735: 70 09                                                 	jo	labeled_registers_ok
00006737: 30 E4                                                 	xor	ah,ah
00006739: 66 89 47 02                                           	mov	[edi-8+10],ax
0000673D: 88 67 01                                              	mov	[edi-8+9],ah
                                                                      labeled_registers_ok:
00006740: 8B 43 14                                              	mov	eax,[ebx+20]
00006743: 89 47 08                                              	mov	[edi-8+16],eax
00006746: 83 C7 0C                                              	add	edi,0Ch
00006749: 8A 43 0A                                              	mov	al,[ebx+10]
0000674C: 08 C0                                                 	or	al,al
0000674E: 0F 84 B3 FD FF FF                                     	jz	calculation_loop
00006754: F6 05 A5 A2 01 00 01                                  	test	[operand_flags],1
0000675B: 0F 85 A6 FD FF FF                                     	jnz	calculation_loop
                                                                      check_size:
00006761: 86 05 A4 A2 01 00                                     	xchg	[operand_size],al
00006767: 08 C0                                                 	or	al,al
00006769: 0F 84 98 FD FF FF                                     	jz	calculation_loop
0000676F: 3A 05 A4 A2 01 00                                     	cmp	al,[operand_size]
00006775: 0F 85 E1 A1 FF FF                                     	jne	operand_sizes_do_not_match
0000677B: E9 87 FD FF FF                                        	jmp	calculation_loop
                                                                      actual_file_offset_label:
00006780: A1 D8 A1 01 00                                        	mov	eax,[undefined_data_end]
00006785: 8B 2D D0 A1 01 00                                     	mov	ebp,[addressing_space]
0000678B: 3E F6 45 0A 01                                        	test	byte [ds:ebp+0Ah],1
00006790: 75 08                                                 	jnz	use_undefined_data_offset
00006792: 3B 05 FC A1 01 00                                     	cmp	eax,[current_offset]
00006798: 75 1B                                                 	jne	use_current_offset
                                                                       use_undefined_data_offset:
0000679A: A1 D4 A1 01 00                                        	mov	eax,[undefined_data_start]
0000679F: EB 19                                                 	jmp	make_file_offset_label
                                                                      current_file_offset_label:
000067A1: 8B 2D D0 A1 01 00                                     	mov	ebp,[addressing_space]
000067A7: 3E F6 45 0A 01                                        	test	byte [ds:ebp+0Ah],1
000067AC: 74 07                                                 	jz	use_current_offset
000067AE: A1 D8 A1 01 00                                        	mov	eax,[undefined_data_end]
000067B3: EB 05                                                 	jmp	make_file_offset_label
                                                                       use_current_offset:
000067B5: A1 FC A1 01 00                                        	mov	eax,[current_offset]
                                                                       make_file_offset_label:
000067BA: 80 3D C9 A2 01 00 02                                  	cmp	[output_format],2
000067C1: 0F 83 93 A2 FF FF                                     	jae	invalid_use_of_symbol
000067C7: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
000067CD: EB 50                                                 	jmp	make_dword_label_value
                                                                      current_offset_label:
000067CF: A1 FC A1 01 00                                        	mov	eax,[current_offset]
                                                                       make_current_offset_label:
000067D4: 31 D2                                                 	xor	edx,edx
000067D6: 30 ED                                                 	xor	ch,ch
000067D8: 8B 2D D0 A1 01 00                                     	mov	ebp,[addressing_space]
000067DE: 3E 2B 45 00                                           	sub	eax,[ds:ebp]
000067E2: 3E 1B 55 04                                           	sbb	edx,[ds:ebp+4]
000067E6: 3E 1A 6D 08                                           	sbb	ch,[ds:ebp+8]
000067EA: 7A 05                                                 	jp	current_offset_label_ok
000067EC: E8 0A 0B 00 00                                        	call	recoverable_overflow
                                                                       current_offset_label_ok:
000067F1: AB                                                    	stos	dword [edi]
000067F2: 89 D0                                                 	mov	eax,edx
000067F4: AB                                                    	stos	dword [edi]
000067F5: 3E 8B 45 10                                           	mov	eax,[ds:ebp+10h]
000067F9: AB                                                    	stos	dword [edi]
000067FA: 3E 8A 4D 09                                           	mov	cl,[ds:ebp+9]
000067FE: 66 89 0F                                              	mov	[edi-12+12],cx
00006801: 3E 8B 45 14                                           	mov	eax,[ds:ebp+14h]
00006805: 89 47 04                                              	mov	[edi-12+16],eax
00006808: 83 C7 08                                              	add	edi,8
0000680B: E9 F7 FC FF FF                                        	jmp	calculation_loop
                                                                      org_origin_label:
00006810: A1 D0 A1 01 00                                        	mov	eax,[addressing_space]
00006815: 8B 40 18                                              	mov	eax,[eax+18h]
00006818: EB BA                                                 	jmp	make_current_offset_label
                                                                      counter_label:
0000681A: A1 DC A1 01 00                                        	mov	eax,[counter]
                                                                      make_dword_label_value:
0000681F: AB                                                    	stos	dword [edi]
00006820: 31 C0                                                 	xor	eax,eax
00006822: AB                                                    	stos	dword [edi]
00006823: 83 C7 0C                                              	add	edi,0Ch
00006826: E9 DC FC FF FF                                        	jmp	calculation_loop
                                                                      timestamp_label:
0000682B: E8 97 9E FF FF                                        	call	make_timestamp
                                                                      make_qword_label_value:
00006830: AB                                                    	stos	dword [edi]
00006831: 89 D0                                                 	mov	eax,edx
00006833: AB                                                    	stos	dword [edi]
00006834: 83 C7 0C                                              	add	edi,0Ch
00006837: E9 CB FC FF FF                                        	jmp	calculation_loop
                                                                      predefined_label:
0000683C: 09 C0                                                 	or	eax,eax
0000683E: 74 8F                                                 	jz	current_offset_label
00006840: 83 F8 01                                              	cmp	eax,1
00006843: 74 D5                                                 	je	counter_label
00006845: 83 F8 02                                              	cmp	eax,2
00006848: 74 E1                                                 	je	timestamp_label
0000684A: 83 F8 03                                              	cmp	eax,3
0000684D: 74 C1                                                 	je	org_origin_label
0000684F: 83 F8 04                                              	cmp	eax,4
00006852: 0F 84 49 FF FF FF                                     	je	current_file_offset_label
00006858: 83 F8 05                                              	cmp	eax,5
0000685B: 0F 84 1F FF FF FF                                     	je	actual_file_offset_label
00006861: BA AC 09 00 00                                        	mov	edx,invalid_value
00006866: EB 0C                                                 	jmp	error_undefined
                                                                      label_out_of_scope:
00006868: BA 17 0A 00 00                                        	mov	edx,symbol_out_of_scope
0000686D: EB 05                                                 	jmp	error_undefined
                                                                      label_undefined:
0000686F: BA C0 09 00 00                                        	mov	edx,undefined_symbol
                                                                      error_undefined:
00006874: 66 83 3D 5E A1 01 00 01                               	cmp	[current_pass],1
0000687C: 77 07                                                 	ja	undefined_value
                                                                      force_next_pass:
0000687E: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      undefined_value:
00006885: 80 0D BE A2 01 00 FF                                  	or	[value_undefined],-1
0000688C: 66 83 67 0C 00                                        	and	word [edi+12],0
00006891: 31 C0                                                 	xor	eax,eax
00006893: AB                                                    	stos	dword [edi]
00006894: AB                                                    	stos	dword [edi]
00006895: 83 C7 0C                                              	add	edi,0Ch
00006898: 83 3D E8 A1 01 00 00                                  	cmp	[error_line],0
0000689F: 0F 85 62 FC FF FF                                     	jne	calculation_loop
000068A5: A1 80 A1 01 00                                        	mov	eax,[current_line]
000068AA: A3 E8 A1 01 00                                        	mov	[error_line],eax
000068AF: 89 15 EC A1 01 00                                     	mov	[error],edx
000068B5: 89 1D E4 A1 01 00                                     	mov	[error_info],ebx
000068BB: E9 47 FC FF FF                                        	jmp	calculation_loop
                                                                      calculate_add:
000068C0: 30 E4                                                 	xor	ah,ah
000068C2: 8A 63 0C                                              	mov	ah,[ebx+12]
000068C5: 8A 47 0C                                              	mov	al,[edi+12]
000068C8: 08 C0                                                 	or	al,al
000068CA: 74 1F                                                 	jz	add_values
000068CC: 08 E4                                                 	or	ah,ah
000068CE: 74 13                                                 	jz	add_relocatable
000068D0: 00 C4                                                 	add	ah,al
000068D2: 75 08                                                 	jnz	invalid_add
000068D4: 8B 4F 10                                              	mov	ecx,[edi+16]
000068D7: 3B 4B 10                                              	cmp	ecx,[ebx+16]
000068DA: 74 0F                                                 	je	add_values
                                                                      invalid_add:
000068DC: E8 41 0A 00 00                                        	call	recoverable_misuse
000068E1: EB 08                                                 	jmp	add_values
                                                                      add_relocatable:
000068E3: 88 C4                                                 	mov	ah,al
000068E5: 8B 4F 10                                              	mov	ecx,[edi+16]
000068E8: 89 4B 10                                              	mov	[ebx+16],ecx
                                                                      add_values:
000068EB: 88 63 0C                                              	mov	[ebx+12],ah
000068EE: 8B 07                                                 	mov	eax,[edi]
000068F0: 01 03                                                 	add	[ebx],eax
000068F2: 8B 47 04                                              	mov	eax,[edi+4]
000068F5: 11 43 04                                              	adc	[ebx+4],eax
000068F8: 8A 47 0D                                              	mov	al,[edi+13]
000068FB: 10 43 0D                                              	adc	[ebx+13],al
000068FE: 7A 05                                                 	jp	add_sign_ok
00006900: E8 F6 09 00 00                                        	call	recoverable_overflow
                                                                      add_sign_ok:
00006905: 66 09 D2                                              	or	dx,dx
00006908: 0F 84 F9 FB FF FF                                     	jz	calculation_loop
0000690E: 56                                                    	push	esi
0000690F: 89 DE                                                 	mov	esi,ebx
00006911: 8A 4F 0A                                              	mov	cl,[edi+10]
00006914: 8A 47 08                                              	mov	al,[edi+8]
00006917: E8 11 00 00 00                                        	call	add_register
0000691C: 8A 4F 0B                                              	mov	cl,[edi+11]
0000691F: 8A 47 09                                              	mov	al,[edi+9]
00006922: E8 06 00 00 00                                        	call	add_register
00006927: 5E                                                    	pop	esi
00006928: E9 DA FB FF FF                                        	jmp	calculation_loop
                                                                      add_register:
0000692D: 08 C0                                                 	or	al,al
0000692F: 74 47                                                 	jz	add_register_done
                                                                      add_register_start:
00006931: 38 46 08                                              	cmp	[esi+8],al
00006934: 75 10                                                 	jne	add_in_second_slot
00006936: 00 4E 0A                                              	add	[esi+10],cl
00006939: 0F 80 77 A0 FF FF                                     	jo	value_out_of_range
0000693F: 75 37                                                 	jnz	add_register_done
00006941: C6 46 08 00                                           	mov	byte [esi+8],0
00006945: C3                                                    	ret
                                                                      add_in_second_slot:
00006946: 38 46 09                                              	cmp	[esi+9],al
00006949: 75 10                                                 	jne	create_in_first_slot
0000694B: 00 4E 0B                                              	add	[esi+11],cl
0000694E: 0F 80 62 A0 FF FF                                     	jo	value_out_of_range
00006954: 75 22                                                 	jnz	add_register_done
00006956: C6 46 09 00                                           	mov	byte [esi+9],0
0000695A: C3                                                    	ret
                                                                      create_in_first_slot:
0000695B: 80 7E 08 00                                           	cmp	byte [esi+8],0
0000695F: 75 07                                                 	jne	create_in_second_slot
00006961: 88 46 08                                              	mov	[esi+8],al
00006964: 88 4E 0A                                              	mov	[esi+10],cl
00006967: C3                                                    	ret
                                                                      create_in_second_slot:
00006968: 80 7E 09 00                                           	cmp	byte [esi+9],0
0000696C: 0F 85 26 A0 FF FF                                     	jne	invalid_expression
00006972: 88 46 09                                              	mov	[esi+9],al
00006975: 88 4E 0B                                              	mov	[esi+11],cl
                                                                      add_register_done:
00006978: C3                                                    	ret
                                                                      out_of_range:
00006979: E9 89 FB FF FF                                        	jmp	calculation_loop
                                                                      calculate_sub:
0000697E: 30 E4                                                 	xor	ah,ah
00006980: 8A 63 0C                                              	mov	ah,[ebx+12]
00006983: 8A 47 0C                                              	mov	al,[edi+12]
00006986: 08 C0                                                 	or	al,al
00006988: 74 23                                                 	jz	sub_values
0000698A: 08 E4                                                 	or	ah,ah
0000698C: 74 15                                                 	jz	negate_relocatable
0000698E: 38 E0                                                 	cmp	al,ah
00006990: 75 0A                                                 	jne	invalid_sub
00006992: 30 E4                                                 	xor	ah,ah
00006994: 8B 4F 10                                              	mov	ecx,[edi+16]
00006997: 3B 4B 10                                              	cmp	ecx,[ebx+16]
0000699A: 74 11                                                 	je	sub_values
                                                                      invalid_sub:
0000699C: E8 81 09 00 00                                        	call	recoverable_misuse
000069A1: EB 0A                                                 	jmp	sub_values
                                                                      negate_relocatable:
000069A3: F6 D8                                                 	neg	al
000069A5: 88 C4                                                 	mov	ah,al
000069A7: 8B 4F 10                                              	mov	ecx,[edi+16]
000069AA: 89 4B 10                                              	mov	[ebx+16],ecx
                                                                      sub_values:
000069AD: 88 63 0C                                              	mov	[ebx+12],ah
000069B0: 8B 07                                                 	mov	eax,[edi]
000069B2: 29 03                                                 	sub	[ebx],eax
000069B4: 8B 47 04                                              	mov	eax,[edi+4]
000069B7: 19 43 04                                              	sbb	[ebx+4],eax
000069BA: 8A 47 0D                                              	mov	al,[edi+13]
000069BD: 18 43 0D                                              	sbb	[ebx+13],al
000069C0: 7A 0E                                                 	jp	sub_sign_ok
000069C2: 83 3D E8 A1 01 00 00                                  	cmp	[error_line],0
000069C9: 75 05                                                 	jne	sub_sign_ok
000069CB: E8 2B 09 00 00                                        	call	recoverable_overflow
                                                                      sub_sign_ok:
000069D0: 66 09 D2                                              	or	dx,dx
000069D3: 0F 84 2E FB FF FF                                     	jz	calculation_loop
000069D9: 56                                                    	push	esi
000069DA: 89 DE                                                 	mov	esi,ebx
000069DC: 8A 4F 0A                                              	mov	cl,[edi+10]
000069DF: 8A 47 08                                              	mov	al,[edi+8]
000069E2: E8 11 00 00 00                                        	call	sub_register
000069E7: 8A 4F 0B                                              	mov	cl,[edi+11]
000069EA: 8A 47 09                                              	mov	al,[edi+9]
000069ED: E8 06 00 00 00                                        	call	sub_register
000069F2: 5E                                                    	pop	esi
000069F3: E9 0F FB FF FF                                        	jmp	calculation_loop
                                                                      sub_register:
000069F8: 08 C0                                                 	or	al,al
000069FA: 0F 84 78 FF FF FF                                     	jz	add_register_done
00006A00: F6 D9                                                 	neg	cl
00006A02: 0F 80 AE 9F FF FF                                     	jo	value_out_of_range
00006A08: E9 24 FF FF FF                                        	jmp	add_register_start
                                                                      calculate_mul:
00006A0D: 66 09 D2                                              	or	dx,dx
00006A10: 74 1A                                                 	jz	mul_start
00006A12: 66 83 7B 08 00                                        	cmp	word [ebx+8],0
00006A17: 75 13                                                 	jne	mul_start
00006A19: 31 C9                                                 	xor	ecx,ecx
                                                                      swap_values:
00006A1B: 8B 04 0B                                              	mov	eax,[ebx+ecx]
00006A1E: 87 04 0F                                              	xchg	eax,[edi+ecx]
00006A21: 89 04 0B                                              	mov	[ebx+ecx],eax
00006A24: 83 C1 04                                              	add	ecx,4
00006A27: 83 F9 10                                              	cmp	ecx,16
00006A2A: 72 EF                                                 	jb	swap_values
                                                                      mul_start:
00006A2C: 56 52                                                 	push	esi edx
00006A2E: 89 DE                                                 	mov	esi,ebx
00006A30: 30 DB                                                 	xor	bl,bl
00006A32: 80 7E 0D 00                                           	cmp	byte [esi+13],0
00006A36: 74 1F                                                 	je	mul_first_sign_ok
00006A38: 80 F3 FF                                              	xor	bl,-1
00006A3B: 8B 06                                                 	mov	eax,[esi]
00006A3D: 8B 56 04                                              	mov	edx,[esi+4]
00006A40: F7 D0                                                 	not	eax
00006A42: F7 D2                                                 	not	edx
00006A44: 83 C0 01                                              	add	eax,1
00006A47: 83 D2 00                                              	adc	edx,0
00006A4A: 89 06                                                 	mov	[esi],eax
00006A4C: 89 56 04                                              	mov	[esi+4],edx
00006A4F: 09 D0                                                 	or	eax,edx
00006A51: 0F 84 05 01 00 00                                     	jz	mul_overflow
                                                                      mul_first_sign_ok:
00006A57: 80 7F 0D 00                                           	cmp	byte [edi+13],0
00006A5B: 74 3D                                                 	je	mul_second_sign_ok
00006A5D: 80 F3 FF                                              	xor	bl,-1
00006A60: 80 7E 08 00                                           	cmp	byte [esi+8],0
00006A64: 74 09                                                 	je	mul_first_register_sign_ok
00006A66: F6 5E 0A                                              	neg	byte [esi+10]
00006A69: 0F 80 29 9F FF FF                                     	jo	invalid_expression
                                                                      mul_first_register_sign_ok:
00006A6F: 80 7E 09 00                                           	cmp	byte [esi+9],0
00006A73: 74 09                                                 	je	mul_second_register_sign_ok
00006A75: F6 5E 0B                                              	neg	byte [esi+11]
00006A78: 0F 80 1A 9F FF FF                                     	jo	invalid_expression
                                                                      mul_second_register_sign_ok:
00006A7E: 8B 07                                                 	mov	eax,[edi]
00006A80: 8B 57 04                                              	mov	edx,[edi+4]
00006A83: F7 D0                                                 	not	eax
00006A85: F7 D2                                                 	not	edx
00006A87: 83 C0 01                                              	add	eax,1
00006A8A: 83 D2 00                                              	adc	edx,0
00006A8D: 89 07                                                 	mov	[edi],eax
00006A8F: 89 57 04                                              	mov	[edi+4],edx
00006A92: 09 D0                                                 	or	eax,edx
00006A94: 0F 84 C2 00 00 00                                     	jz	mul_overflow
                                                                      mul_second_sign_ok:
00006A9A: 83 7E 04 00                                           	cmp	dword [esi+4],0
00006A9E: 74 0C                                                 	jz	mul_numbers
00006AA0: 83 7F 04 00                                           	cmp	dword [edi+4],0
00006AA4: 74 06                                                 	jz	mul_numbers
00006AA6: 0F 85 B0 00 00 00                                     	jnz	mul_overflow
                                                                      mul_numbers:
00006AAC: 8B 46 04                                              	mov	eax,[esi+4]
00006AAF: F7 27                                                 	mul	dword [edi]
00006AB1: 09 D2                                                 	or	edx,edx
00006AB3: 0F 85 A3 00 00 00                                     	jnz	mul_overflow
00006AB9: 89 C1                                                 	mov	ecx,eax
00006ABB: 8B 06                                                 	mov	eax,[esi]
00006ABD: F7 67 04                                              	mul	dword [edi+4]
00006AC0: 09 D2                                                 	or	edx,edx
00006AC2: 0F 85 94 00 00 00                                     	jnz	mul_overflow
00006AC8: 01 C1                                                 	add	ecx,eax
00006ACA: 0F 82 8C 00 00 00                                     	jc	mul_overflow
00006AD0: 8B 06                                                 	mov	eax,[esi]
00006AD2: F7 27                                                 	mul	dword [edi]
00006AD4: 01 CA                                                 	add	edx,ecx
00006AD6: 0F 82 80 00 00 00                                     	jc	mul_overflow
00006ADC: 89 06                                                 	mov	[esi],eax
00006ADE: 89 56 04                                              	mov	[esi+4],edx
00006AE1: 08 DB                                                 	or	bl,bl
00006AE3: 74 15                                                 	jz	mul_ok
00006AE5: F7 D0                                                 	not	eax
00006AE7: F7 D2                                                 	not	edx
00006AE9: 83 C0 01                                              	add	eax,1
00006AEC: 83 D2 00                                              	adc	edx,0
00006AEF: 89 06                                                 	mov	[esi],eax
00006AF1: 89 56 04                                              	mov	[esi+4],edx
00006AF4: 09 D0                                                 	or	eax,edx
00006AF6: 75 02                                                 	jnz	mul_ok
00006AF8: F6 D3                                                 	not	bl
                                                                      mul_ok:
00006AFA: 88 5E 0D                                              	mov	[esi+13],bl
00006AFD: 5A                                                    	pop	edx
00006AFE: 66 09 D2                                              	or	dx,dx
00006B01: 74 53                                                 	jz	mul_calculated
00006B03: 66 83 7F 08 00                                        	cmp	word [edi+8],0
00006B08: 0F 85 9E 9E FF FF                                     	jne	invalid_value
00006B0E: 80 7E 08 00                                           	cmp	byte [esi+8],0
00006B12: 74 1E                                                 	je	mul_first_register_ok
00006B14: E8 4F 00 00 00                                        	call	get_byte_scale
00006B19: F6 6E 0A                                              	imul	byte [esi+10]
00006B1C: 88 E2                                                 	mov	dl,ah
00006B1E: 66 98                                                 	cbw
00006B20: 38 D4                                                 	cmp	ah,dl
00006B22: 0F 85 8E 9E FF FF                                     	jne	value_out_of_range
00006B28: 88 46 0A                                              	mov	[esi+10],al
00006B2B: 08 C0                                                 	or	al,al
00006B2D: 75 03                                                 	jnz	mul_first_register_ok
00006B2F: 88 46 08                                              	mov	[esi+8],al
                                                                      mul_first_register_ok:
00006B32: 80 7E 09 00                                           	cmp	byte [esi+9],0
00006B36: 74 1E                                                 	je	mul_calculated
00006B38: E8 2B 00 00 00                                        	call	get_byte_scale
00006B3D: F6 6E 0B                                              	imul	byte [esi+11]
00006B40: 88 E2                                                 	mov	dl,ah
00006B42: 66 98                                                 	cbw
00006B44: 38 D4                                                 	cmp	ah,dl
00006B46: 0F 85 6A 9E FF FF                                     	jne	value_out_of_range
00006B4C: 88 46 0B                                              	mov	[esi+11],al
00006B4F: 08 C0                                                 	or	al,al
00006B51: 75 03                                                 	jnz	mul_calculated
00006B53: 88 46 09                                              	mov	[esi+9],al
                                                                      mul_calculated:
00006B56: 5E                                                    	pop	esi
00006B57: E9 AB F9 FF FF                                        	jmp	calculation_loop
                                                                      mul_overflow:
00006B5C: 5A 5E                                                 	pop	edx esi
00006B5E: E8 98 07 00 00                                        	call	recoverable_overflow
00006B63: E9 9F F9 FF FF                                        	jmp	calculation_loop
                                                                      get_byte_scale:
00006B68: 8A 07                                                 	mov	al,[edi]
00006B6A: 66 98                                                 	cbw
00006B6C: 98                                                    	cwde
00006B6D: 99                                                    	cdq
00006B6E: 3B 57 04                                              	cmp	edx,[edi+4]
00006B71: 0F 85 3F 9E FF FF                                     	jne	value_out_of_range
00006B77: 3B 07                                                 	cmp	eax,[edi]
00006B79: 0F 85 37 9E FF FF                                     	jne	value_out_of_range
00006B7F: C3                                                    	ret
                                                                      calculate_div:
00006B80: 56 52                                                 	push	esi edx
00006B82: 89 DE                                                 	mov	esi,ebx
00006B84: E8 B5 03 00 00                                        	call	div_64
00006B89: 5A                                                    	pop	edx
00006B8A: 66 09 D2                                              	or	dx,dx
00006B8D: 74 4A                                                 	jz	div_calculated
00006B8F: 80 7E 08 00                                           	cmp	byte [esi+8],0
00006B93: 74 1F                                                 	je	div_first_register_ok
00006B95: E8 CE FF FF FF                                        	call	get_byte_scale
00006B9A: 08 C0                                                 	or	al,al
00006B9C: 0F 84 14 9E FF FF                                     	jz	value_out_of_range
00006BA2: 8A 46 0A                                              	mov	al,[esi+10]
00006BA5: 66 98                                                 	cbw
00006BA7: F6 3F                                                 	idiv	byte [edi]
00006BA9: 08 E4                                                 	or	ah,ah
00006BAB: 0F 85 A9 9E FF FF                                     	jnz	invalid_use_of_symbol
00006BB1: 88 46 0A                                              	mov	[esi+10],al
                                                                      div_first_register_ok:
00006BB4: 80 7E 09 00                                           	cmp	byte [esi+9],0
00006BB8: 74 1F                                                 	je	div_calculated
00006BBA: E8 A9 FF FF FF                                        	call	get_byte_scale
00006BBF: 08 C0                                                 	or	al,al
00006BC1: 0F 84 EF 9D FF FF                                     	jz	value_out_of_range
00006BC7: 8A 46 0B                                              	mov	al,[esi+11]
00006BCA: 66 98                                                 	cbw
00006BCC: F6 3F                                                 	idiv	byte [edi]
00006BCE: 08 E4                                                 	or	ah,ah
00006BD0: 0F 85 84 9E FF FF                                     	jnz	invalid_use_of_symbol
00006BD6: 88 46 0B                                              	mov	[esi+11],al
                                                                      div_calculated:
00006BD9: 5E                                                    	pop	esi
00006BDA: E9 28 F9 FF FF                                        	jmp	calculation_loop
                                                                      calculate_mod:
00006BDF: 56                                                    	push	esi
00006BE0: 89 DE                                                 	mov	esi,ebx
00006BE2: E8 57 03 00 00                                        	call	div_64
00006BE7: 89 06                                                 	mov	[esi],eax
00006BE9: 89 56 04                                              	mov	[esi+4],edx
00006BEC: 88 7E 0D                                              	mov	[esi+13],bh
00006BEF: 5E                                                    	pop	esi
00006BF0: E9 12 F9 FF FF                                        	jmp	calculation_loop
                                                                      calculate_and:
00006BF5: 8B 07                                                 	mov	eax,[edi]
00006BF7: 8B 57 04                                              	mov	edx,[edi+4]
00006BFA: 8A 4F 0D                                              	mov	cl,[edi+13]
00006BFD: 21 03                                                 	and	[ebx],eax
00006BFF: 21 53 04                                              	and	[ebx+4],edx
00006C02: 20 4B 0D                                              	and	[ebx+13],cl
00006C05: E9 FD F8 FF FF                                        	jmp	calculation_loop
                                                                      calculate_or:
00006C0A: 8B 07                                                 	mov	eax,[edi]
00006C0C: 8B 57 04                                              	mov	edx,[edi+4]
00006C0F: 8A 4F 0D                                              	mov	cl,[edi+13]
00006C12: 09 03                                                 	or	[ebx],eax
00006C14: 09 53 04                                              	or	[ebx+4],edx
00006C17: 08 4B 0D                                              	or	[ebx+13],cl
00006C1A: E9 E8 F8 FF FF                                        	jmp	calculation_loop
                                                                      calculate_xor:
00006C1F: 8B 07                                                 	mov	eax,[edi]
00006C21: 8B 57 04                                              	mov	edx,[edi+4]
00006C24: 8A 4F 0D                                              	mov	cl,[edi+13]
00006C27: 31 03                                                 	xor	[ebx],eax
00006C29: 31 53 04                                              	xor	[ebx+4],edx
00006C2C: 30 4B 0D                                              	xor	[ebx+13],cl
00006C2F: E9 D3 F8 FF FF                                        	jmp	calculation_loop
                                                                      shr_negative:
00006C34: C6 47 0D 00                                           	mov	byte [edi+13],0
00006C38: F7 17                                                 	not	dword [edi]
00006C3A: F7 57 04                                              	not	dword [edi+4]
00006C3D: 83 07 01                                              	add	dword [edi],1
00006C40: 83 57 04 00                                           	adc	dword [edi+4],0
00006C44: 72 32                                                 	jc	shl_over
                                                                      calculate_shl:
00006C46: 80 7F 0D 00                                           	cmp	byte [edi+13],0
00006C4A: 75 75                                                 	jne	shl_negative
00006C4C: 8B 53 04                                              	mov	edx,[ebx+4]
00006C4F: 8B 03                                                 	mov	eax,[ebx]
00006C51: 83 7F 04 00                                           	cmp	dword [edi+4],0
00006C55: 75 21                                                 	jne	shl_over
00006C57: 0F BE 4B 0D                                           	movsx	ecx,byte [ebx+13]
00006C5B: 87 0F                                                 	xchg	ecx,[edi]
00006C5D: 83 F9 40                                              	cmp	ecx,64
00006C60: 74 1C                                                 	je	shl_max
00006C62: 77 14                                                 	ja	shl_over
00006C64: 83 F9 20                                              	cmp	ecx,32
00006C67: 73 2D                                                 	jae	shl_high
00006C69: 0F A5 17                                              	shld	[edi],edx,cl
00006C6C: 0F A5 C2                                              	shld	edx,eax,cl
00006C6F: D3 E0                                                 	shl	eax,cl
00006C71: 89 03                                                 	mov	[ebx],eax
00006C73: 89 53 04                                              	mov	[ebx+4],edx
00006C76: EB 33                                                 	jmp	shl_done
                                                                      shl_over:
00006C78: 80 7B 0D 00                                           	cmp	byte [ebx+13],0
00006C7C: 75 39                                                 	jne	shl_overflow
                                                                      shl_max:
00006C7E: 0F BE 4B 0D                                           	movsx	ecx,byte [ebx+13]
00006C82: 39 C8                                                 	cmp	eax,ecx
00006C84: 75 31                                                 	jne	shl_overflow
00006C86: 39 CA                                                 	cmp	edx,ecx
00006C88: 75 2D                                                 	jne	shl_overflow
00006C8A: 31 C0                                                 	xor	eax,eax
00006C8C: 89 03                                                 	mov	[ebx],eax
00006C8E: 89 43 04                                              	mov	[ebx+4],eax
00006C91: E9 71 F8 FF FF                                        	jmp	calculation_loop
                                                                      shl_high:
00006C96: 80 E9 20                                              	sub	cl,32
00006C99: 0F A5 17                                              	shld	[edi],edx,cl
00006C9C: 0F A5 C2                                              	shld	edx,eax,cl
00006C9F: D3 E0                                                 	shl	eax,cl
00006CA1: 89 43 04                                              	mov	[ebx+4],eax
00006CA4: 83 23 00                                              	and	dword [ebx],0
00006CA7: 3B 17                                                 	cmp	edx,[edi]
00006CA9: 75 0C                                                 	jne	shl_overflow
                                                                      shl_done:
00006CAB: 0F BE 43 0D                                           	movsx	eax,byte [ebx+13]
00006CAF: 3B 07                                                 	cmp	eax,[edi]
00006CB1: 0F 84 50 F8 FF FF                                     	je	calculation_loop
                                                                      shl_overflow:
00006CB7: E8 3F 06 00 00                                        	call	recoverable_overflow
00006CBC: E9 46 F8 FF FF                                        	jmp	calculation_loop
                                                                      shl_negative:
00006CC1: C6 47 0D 00                                           	mov	byte [edi+13],0
00006CC5: F7 17                                                 	not	dword [edi]
00006CC7: F7 57 04                                              	not	dword [edi+4]
00006CCA: 83 07 01                                              	add	dword [edi],1
00006CCD: 83 57 04 00                                           	adc	dword [edi+4],0
00006CD1: 73 03                                                 	jnc	calculate_shr
00006CD3: FF 4F 04                                              	dec	dword [edi+4]
                                                                      calculate_shr:
00006CD6: 80 7F 0D 00                                           	cmp	byte [edi+13],0
00006CDA: 0F 85 54 FF FF FF                                     	jne	shr_negative
00006CE0: 8B 53 04                                              	mov	edx,[ebx+4]
00006CE3: 8B 03                                                 	mov	eax,[ebx]
00006CE5: 83 7F 04 00                                           	cmp	dword [edi+4],0
00006CE9: 75 33                                                 	jne	shr_over
00006CEB: 8B 0F                                                 	mov	ecx,[edi]
00006CED: 83 F9 40                                              	cmp	ecx,64
00006CF0: 73 2C                                                 	jae	shr_over
00006CF2: 56                                                    	push	esi
00006CF3: 0F BE 73 0D                                           	movsx	esi,byte [ebx+13]
00006CF7: 83 F9 20                                              	cmp	ecx,32
00006CFA: 73 11                                                 	jae	shr_high
00006CFC: 0F AD D0                                              	shrd	eax,edx,cl
00006CFF: 0F AD F2                                              	shrd	edx,esi,cl
00006D02: 89 03                                                 	mov	[ebx],eax
00006D04: 89 53 04                                              	mov	[ebx+4],edx
00006D07: 5E                                                    	pop	esi
00006D08: E9 FA F7 FF FF                                        	jmp	calculation_loop
                                                                      shr_high:
00006D0D: 80 E9 20                                              	sub	cl,32
00006D10: 0F AD F2                                              	shrd	edx,esi,cl
00006D13: 89 13                                                 	mov	[ebx],edx
00006D15: 89 73 04                                              	mov	[ebx+4],esi
00006D18: 5E                                                    	pop	esi
00006D19: E9 E9 F7 FF FF                                        	jmp	calculation_loop
                                                                      shr_over:
00006D1E: 0F BE 43 0D                                           	movsx	eax,byte [ebx+13]
00006D22: 89 03                                                 	mov	dword [ebx],eax
00006D24: 89 43 04                                              	mov	dword [ebx+4],eax
00006D27: E9 DB F7 FF FF                                        	jmp	calculation_loop
                                                                      calculate_not:
00006D2C: 66 83 7F 08 00                                        	cmp	word [edi+8],0
00006D31: 0F 85 61 9C FF FF                                     	jne	invalid_expression
00006D37: 80 7F 0C 00                                           	cmp	byte [edi+12],0
00006D3B: 74 05                                                 	je	not_ok
00006D3D: E8 E0 05 00 00                                        	call	recoverable_misuse
                                                                      not_ok:
00006D42: F7 17                                                 	not	dword [edi]
00006D44: F7 57 04                                              	not	dword [edi+4]
00006D47: F6 57 0D                                              	not	byte [edi+13]
00006D4A: 83 C7 14                                              	add	edi,14h
00006D4D: E9 B5 F7 FF FF                                        	jmp	calculation_loop
                                                                      calculate_bsf:
00006D52: 66 83 7F 08 00                                        	cmp	word [edi+8],0
00006D57: 0F 85 3B 9C FF FF                                     	jne	invalid_expression
00006D5D: 80 7F 0C 00                                           	cmp	byte [edi+12],0
00006D61: 74 05                                                 	je	bsf_ok
00006D63: E8 BA 05 00 00                                        	call	recoverable_misuse
                                                                      bsf_ok:
00006D68: 31 C9                                                 	xor	ecx,ecx
00006D6A: 0F BC 07                                              	bsf	eax,[edi]
00006D6D: 75 4C                                                 	jnz	finish_bs
00006D6F: B9 20 00 00 00                                        	mov	ecx,32
00006D74: 0F BC 47 04                                           	bsf	eax,[edi+4]
00006D78: 75 41                                                 	jnz	finish_bs
00006D7A: 80 7F 0D 00                                           	cmp	byte [edi+13],0
00006D7E: 75 3B                                                 	jne	finish_bs
                                                                      bs_overflow:
00006D80: E8 76 05 00 00                                        	call	recoverable_overflow
00006D85: 83 C7 14                                              	add	edi,14h
00006D88: E9 7A F7 FF FF                                        	jmp	calculation_loop
                                                                      calculate_bsr:
00006D8D: 66 83 7F 08 00                                        	cmp	word [edi+8],0
00006D92: 0F 85 00 9C FF FF                                     	jne	invalid_expression
00006D98: 80 7F 0C 00                                           	cmp	byte [edi+12],0
00006D9C: 74 05                                                 	je	bsr_ok
00006D9E: E8 7F 05 00 00                                        	call	recoverable_misuse
                                                                      bsr_ok:
00006DA3: 80 7F 0D 00                                           	cmp	byte [edi+13],0
00006DA7: 75 D7                                                 	jne	bs_overflow
00006DA9: B9 20 00 00 00                                        	mov	ecx,32
00006DAE: 0F BD 47 04                                           	bsr	eax,[edi+4]
00006DB2: 75 07                                                 	jnz	finish_bs
00006DB4: 31 C9                                                 	xor	ecx,ecx
00006DB6: 0F BD 07                                              	bsr	eax,[edi]
00006DB9: 74 C5                                                 	jz	bs_overflow
                                                                      finish_bs:
00006DBB: 01 C8                                                 	add	eax,ecx
00006DBD: 31 D2                                                 	xor	edx,edx
00006DBF: 89 07                                                 	mov	[edi],eax
00006DC1: 89 57 04                                              	mov	[edi+4],edx
00006DC4: 88 57 0D                                              	mov	[edi+13],dl
00006DC7: 83 C7 14                                              	add	edi,14h
00006DCA: E9 38 F7 FF FF                                        	jmp	calculation_loop
                                                                      calculate_neg:
00006DCF: 80 7F 08 00                                           	cmp	byte [edi+8],0
00006DD3: 74 09                                                 	je	neg_first_register_ok
00006DD5: F6 5F 0A                                              	neg	byte [edi+10]
00006DD8: 0F 80 BA 9B FF FF                                     	jo	invalid_expression
                                                                      neg_first_register_ok:
00006DDE: 80 7F 09 00                                           	cmp	byte [edi+9],0
00006DE2: 74 09                                                 	je	neg_second_register_ok
00006DE4: F6 5F 0B                                              	neg	byte [edi+11]
00006DE7: 0F 80 AB 9B FF FF                                     	jo	invalid_expression
                                                                      neg_second_register_ok:
00006DED: F6 5F 0C                                              	neg	byte [edi+12]
00006DF0: 31 C0                                                 	xor	eax,eax
00006DF2: 31 D2                                                 	xor	edx,edx
00006DF4: 30 C9                                                 	xor	cl,cl
00006DF6: 87 07                                                 	xchg	eax,[edi]
00006DF8: 87 57 04                                              	xchg	edx,[edi+4]
00006DFB: 86 4F 0D                                              	xchg	cl,[edi+13]
00006DFE: 29 07                                                 	sub	[edi],eax
00006E00: 19 57 04                                              	sbb	[edi+4],edx
00006E03: 18 4F 0D                                              	sbb	[edi+13],cl
00006E06: 7A 05                                                 	jp	neg_sign_ok
00006E08: E8 EE 04 00 00                                        	call	recoverable_overflow
                                                                      neg_sign_ok:
00006E0D: 83 C7 14                                              	add	edi,14h
00006E10: E9 F2 F6 FF FF                                        	jmp	calculation_loop
                                                                      calculate_rva:
00006E15: 66 83 7F 08 00                                        	cmp	word [edi+8],0
00006E1A: 0F 85 78 9B FF FF                                     	jne	invalid_expression
00006E20: A0 C9 A2 01 00                                        	mov	al,[output_format]
00006E25: 3C 05                                                 	cmp	al,5
00006E27: 0F 84 83 00 00 00                                     	je	calculate_gotoff
00006E2D: 3C 04                                                 	cmp	al,4
00006E2F: 0F 84 97 00 00 00                                     	je	calculate_coff_rva
00006E35: 3C 03                                                 	cmp	al,3
00006E37: 0F 85 5B 9B FF FF                                     	jne	invalid_expression
00006E3D: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
00006E47: 75 3E                                                 	jnz	pe64_rva
00006E49: B0 02                                                 	mov	al,2
00006E4B: 0F BA 25 44 A2 01 00 00                               	bt	[resolver_flags],0
00006E53: 72 02                                                 	jc	rva_type_ok
00006E55: 30 C0                                                 	xor	al,al
                                                                      rva_type_ok:
00006E57: 38 47 0C                                              	cmp	byte [edi+12],al
00006E5A: 74 05                                                 	je	rva_ok
00006E5C: E8 C1 04 00 00                                        	call	recoverable_misuse
                                                                      rva_ok:
00006E61: C6 47 0C 00                                           	mov	byte [edi+12],0
00006E65: A1 6C A1 01 00                                        	mov	eax,[code_start]
00006E6A: 8B 40 34                                              	mov	eax,[eax+34h]
00006E6D: 31 D2                                                 	xor	edx,edx
                                                                      finish_rva:
00006E6F: 29 07                                                 	sub	[edi],eax
00006E71: 19 57 04                                              	sbb	[edi+4],edx
00006E74: 80 5F 0D 00                                           	sbb	byte [edi+13],0
00006E78: 7A 05                                                 	jp	rva_finished
00006E7A: E8 7C 04 00 00                                        	call	recoverable_overflow
                                                                      rva_finished:
00006E7F: 83 C7 14                                              	add	edi,14h
00006E82: E9 80 F6 FF FF                                        	jmp	calculation_loop
                                                                      pe64_rva:
00006E87: B0 04                                                 	mov	al,4
00006E89: 0F BA 25 44 A2 01 00 00                               	bt	[resolver_flags],0
00006E91: 72 02                                                 	jc	pe64_rva_type_ok
00006E93: 30 C0                                                 	xor	al,al
                                                                      pe64_rva_type_ok:
00006E95: 38 47 0C                                              	cmp	byte [edi+12],al
00006E98: 74 05                                                 	je	pe64_rva_ok
00006E9A: E8 83 04 00 00                                        	call	recoverable_misuse
                                                                      pe64_rva_ok:
00006E9F: C6 47 0C 00                                           	mov	byte [edi+12],0
00006EA3: A1 6C A1 01 00                                        	mov	eax,[code_start]
00006EA8: 8B 50 34                                              	mov	edx,[eax+34h]
00006EAB: 8B 40 30                                              	mov	eax,[eax+30h]
00006EAE: EB BF                                                 	jmp	finish_rva
                                                                      calculate_gotoff:
00006EB0: F7 05 40 A2 01 00 01 00 00 00                         	test	[format_flags],1
00006EBA: 75 28                                                 	jnz	calculate_elf_dyn_rva
00006EBC: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
00006EC6: 0F 85 CC 9A FF FF                                     	jnz	invalid_expression
                                                                      calculate_coff_rva:
00006ECC: B2 05                                                 	mov	dl,5
00006ECE: 80 7F 0C 02                                           	cmp	byte [edi+12],2
00006ED2: 74 05                                                 	je	change_value_type
                                                                      incorrect_change_of_value_type:
00006ED4: E8 49 04 00 00                                        	call	recoverable_misuse
                                                                      change_value_type:
00006ED9: 88 57 0C                                              	mov	byte [edi+12],dl
00006EDC: 83 C7 14                                              	add	edi,14h
00006EDF: E9 23 F6 FF FF                                        	jmp	calculation_loop
                                                                      calculate_elf_dyn_rva:
00006EE4: 30 D2                                                 	xor	dl,dl
00006EE6: F6 47 0C 01                                           	test	byte [edi+12],1
00006EEA: 75 E8                                                 	jnz	incorrect_change_of_value_type
00006EEC: EB EB                                                 	jmp	change_value_type
                                                                      calculate_plt:
00006EEE: 66 83 7F 08 00                                        	cmp	word [edi+8],0
00006EF3: 0F 85 9F 9A FF FF                                     	jne	invalid_expression
00006EF9: 80 3D C9 A2 01 00 05                                  	cmp	[output_format],5
00006F00: 0F 85 92 9A FF FF                                     	jne	invalid_expression
00006F06: F7 05 40 A2 01 00 01 00 00 00                         	test	[format_flags],1
00006F10: 0F 85 82 9A FF FF                                     	jnz	invalid_expression
00006F16: B2 06                                                 	mov	dl,6
00006F18: B6 02                                                 	mov	dh,2
00006F1A: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
00006F24: 74 02                                                 	jz	check_value_for_plt
00006F26: B6 04                                                 	mov	dh,4
                                                                      check_value_for_plt:
00006F28: 8B 07                                                 	mov	eax,[edi]
00006F2A: 0B 47 04                                              	or	eax,[edi+4]
00006F2D: 75 A5                                                 	jnz	incorrect_change_of_value_type
00006F2F: 38 77 0C                                              	cmp	byte [edi+12],dh
00006F32: 75 A0                                                 	jne	incorrect_change_of_value_type
00006F34: 8B 47 10                                              	mov	eax,[edi+16]
00006F37: 80 38 80                                              	cmp	byte [eax],80h
00006F3A: 75 98                                                 	jne	incorrect_change_of_value_type
00006F3C: EB 9B                                                 	jmp	change_value_type
                                                                      div_64:
00006F3E: 31 DB                                                 	xor	ebx,ebx
00006F40: 83 3F 00                                              	cmp	dword [edi],0
00006F43: 75 18                                                 	jne	divider_ok
00006F45: 83 7F 04 00                                           	cmp	dword [edi+4],0
00006F49: 75 12                                                 	jne	divider_ok
00006F4B: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
00006F52: 0F 84 5E 9A FF FF                                     	je	value_out_of_range
00006F58: E9 C7 00 00 00                                        	jmp	div_done
                                                                      divider_ok:
00006F5D: 80 7E 0D 00                                           	cmp	byte [esi+13],0
00006F61: 74 20                                                 	je	div_first_sign_ok
00006F63: 8B 06                                                 	mov	eax,[esi]
00006F65: 8B 56 04                                              	mov	edx,[esi+4]
00006F68: F7 D0                                                 	not	eax
00006F6A: F7 D2                                                 	not	edx
00006F6C: 83 C0 01                                              	add	eax,1
00006F6F: 83 D2 00                                              	adc	edx,0
00006F72: 89 06                                                 	mov	[esi],eax
00006F74: 89 56 04                                              	mov	[esi+4],edx
00006F77: 09 D0                                                 	or	eax,edx
00006F79: 0F 84 37 9A FF FF                                     	jz	value_out_of_range
00006F7F: 66 83 F3 FF                                           	xor	bx,-1
                                                                      div_first_sign_ok:
00006F83: 80 7F 0D 00                                           	cmp	byte [edi+13],0
00006F87: 74 1F                                                 	je	div_second_sign_ok
00006F89: 8B 07                                                 	mov	eax,[edi]
00006F8B: 8B 57 04                                              	mov	edx,[edi+4]
00006F8E: F7 D0                                                 	not	eax
00006F90: F7 D2                                                 	not	edx
00006F92: 83 C0 01                                              	add	eax,1
00006F95: 83 D2 00                                              	adc	edx,0
00006F98: 89 07                                                 	mov	[edi],eax
00006F9A: 89 57 04                                              	mov	[edi+4],edx
00006F9D: 09 D0                                                 	or	eax,edx
00006F9F: 0F 84 11 9A FF FF                                     	jz	value_out_of_range
00006FA5: 80 F3 FF                                              	xor	bl,-1
                                                                      div_second_sign_ok:
00006FA8: 83 7F 04 00                                           	cmp	dword [edi+4],0
00006FAC: 75 18                                                 	jne	div_high
00006FAE: 8B 0F                                                 	mov	ecx,[edi]
00006FB0: 8B 46 04                                              	mov	eax,[esi+4]
00006FB3: 31 D2                                                 	xor	edx,edx
00006FB5: F7 F1                                                 	div	ecx
00006FB7: 89 46 04                                              	mov	[esi+4],eax
00006FBA: 8B 06                                                 	mov	eax,[esi]
00006FBC: F7 F1                                                 	div	ecx
00006FBE: 89 06                                                 	mov	[esi],eax
00006FC0: 89 D0                                                 	mov	eax,edx
00006FC2: 31 D2                                                 	xor	edx,edx
00006FC4: EB 5E                                                 	jmp	div_done
                                                                      div_high:
00006FC6: 53                                                    	push	ebx
00006FC7: 8B 46 04                                              	mov	eax,[esi+4]
00006FCA: 31 D2                                                 	xor	edx,edx
00006FCC: F7 77 04                                              	div	dword [edi+4]
00006FCF: 8B 1E                                                 	mov	ebx,[esi]
00006FD1: 89 06                                                 	mov	[esi],eax
00006FD3: 83 66 04 00                                           	and	dword [esi+4],0
00006FD7: 89 D1                                                 	mov	ecx,edx
00006FD9: F7 27                                                 	mul	dword [edi]
                                                                      div_high_loop:
00006FDB: 39 D1                                                 	cmp	ecx,edx
00006FDD: 77 0F                                                 	ja	div_high_done
00006FDF: 72 18                                                 	jb	div_high_large_correction
00006FE1: 39 C3                                                 	cmp	ebx,eax
00006FE3: 73 09                                                 	jae	div_high_done
                                                                      div_high_correction:
00006FE5: FF 0E                                                 	dec	dword [esi]
00006FE7: 2B 07                                                 	sub	eax,[edi]
00006FE9: 1B 57 04                                              	sbb	edx,[edi+4]
00006FEC: 73 ED                                                 	jnc	div_high_loop
                                                                      div_high_done:
00006FEE: 29 C3                                                 	sub	ebx,eax
00006FF0: 19 D1                                                 	sbb	ecx,edx
00006FF2: 89 CA                                                 	mov	edx,ecx
00006FF4: 89 D8                                                 	mov	eax,ebx
00006FF6: 5B                                                    	pop	ebx
00006FF7: EB 2B                                                 	jmp	div_done
                                                                      div_high_large_correction:
00006FF9: 50 52                                                 	push	eax edx
00006FFB: 89 D0                                                 	mov	eax,edx
00006FFD: 29 C8                                                 	sub	eax,ecx
00006FFF: 31 D2                                                 	xor	edx,edx
00007001: F7 77 04                                              	div	dword [edi+4]
00007004: D1 E8                                                 	shr	eax,1
00007006: 74 18                                                 	jz	div_high_small_correction
00007008: 29 06                                                 	sub	[esi],eax
0000700A: 50                                                    	push	eax
0000700B: F7 67 04                                              	mul	dword [edi+4]
0000700E: 29 44 24 04                                           	sub	dword [esp+4],eax
00007012: 58                                                    	pop	eax
00007013: F7 27                                                 	mul	dword [edi]
00007015: 29 44 24 04                                           	sub	dword [esp+4],eax
00007019: 19 14 24                                              	sbb	dword [esp],edx
0000701C: 5A 58                                                 	pop	edx eax
0000701E: EB BB                                                 	jmp	div_high_loop
                                                                      div_high_small_correction:
00007020: 5A 58                                                 	pop	edx eax
00007022: EB C1                                                 	jmp	div_high_correction
                                                                      div_done:
00007024: 08 FF                                                 	or	bh,bh
00007026: 74 12                                                 	jz	remainder_ok
00007028: F7 D0                                                 	not	eax
0000702A: F7 D2                                                 	not	edx
0000702C: 83 C0 01                                              	add	eax,1
0000702F: 83 D2 00                                              	adc	edx,0
00007032: 89 C1                                                 	mov	ecx,eax
00007034: 09 D1                                                 	or	ecx,edx
00007036: 75 02                                                 	jnz	remainder_ok
00007038: F6 D7                                                 	not	bh
                                                                      remainder_ok:
0000703A: 08 DB                                                 	or	bl,bl
0000703C: 74 15                                                 	jz	div_ok
0000703E: F7 16                                                 	not	dword [esi]
00007040: F7 56 04                                              	not	dword [esi+4]
00007043: 83 06 01                                              	add	dword [esi],1
00007046: 83 56 04 00                                           	adc	dword [esi+4],0
0000704A: 8B 0E                                                 	mov	ecx,[esi]
0000704C: 0B 4E 04                                              	or	ecx,[esi+4]
0000704F: 75 02                                                 	jnz	div_ok
00007051: F6 D3                                                 	not	bl
                                                                      div_ok:
00007053: 88 5E 0D                                              	mov	[esi+13],bl
00007056: C3                                                    	ret
                                                                      store_label_reference:
00007057: 83 3D 58 A1 01 00 00                                  	cmp	[symbols_file],0
0000705E: 74 2E                                                 	je	label_reference_ok
00007060: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
00007067: 75 25                                                 	jne	label_reference_ok
00007069: A1 F0 A1 01 00                                        	mov	eax,[tagged_blocks]
0000706E: C7 40 FC 02 00 00 00                                  	mov	dword [eax-4],2
00007075: C7 40 F8 04 00 00 00                                  	mov	dword [eax-8],4
0000707C: 83 E8 0C                                              	sub	eax,8+4
0000707F: 39 F8                                                 	cmp	eax,edi
00007081: 0F 86 15 98 FF FF                                     	jbe	out_of_memory
00007087: A3 F0 A1 01 00                                        	mov	[tagged_blocks],eax
0000708C: 89 18                                                 	mov	[eax],ebx
                                                                      label_reference_ok:
0000708E: C3                                                    	ret
                                                                      convert_fp:
0000708F: 46                                                    	inc	esi
00007090: 66 83 67 08 00                                        	and	word [edi+8],0
00007095: 66 83 67 0C 00                                        	and	word [edi+12],0
0000709A: A0 B8 A2 01 00                                        	mov	al,[value_size]
0000709F: 3C 02                                                 	cmp	al,2
000070A1: 0F 84 D4 00 00 00                                     	je	convert_fp_word
000070A7: 3C 04                                                 	cmp	al,4
000070A9: 0F 84 5B 01 00 00                                     	je	convert_fp_dword
000070AF: A8 F7                                                 	test	al,not 8
000070B1: 74 05                                                 	jz	convert_fp_qword
000070B3: E8 6A 02 00 00                                        	call	recoverable_misuse
                                                                      convert_fp_qword:
000070B8: 31 C0                                                 	xor	eax,eax
000070BA: 31 D2                                                 	xor	edx,edx
000070BC: 66 81 7E 08 00 80                                     	cmp	word [esi+8],8000h
000070C2: 0F 84 A2 00 00 00                                     	je	fp_qword_store
000070C8: 66 8B 5E 08                                           	mov	bx,[esi+8]
000070CC: 8B 06                                                 	mov	eax,[esi]
000070CE: 8B 56 04                                              	mov	edx,[esi+4]
000070D1: 01 C0                                                 	add	eax,eax
000070D3: 11 D2                                                 	adc	edx,edx
000070D5: 89 D1                                                 	mov	ecx,edx
000070D7: C1 EA 0C                                              	shr	edx,12
000070DA: 0F AC C8 0C                                           	shrd	eax,ecx,12
000070DE: 73 18                                                 	jnc	fp_qword_ok
000070E0: 83 C0 01                                              	add	eax,1
000070E3: 83 D2 00                                              	adc	edx,0
000070E6: 0F BA E2 14                                           	bt	edx,20
000070EA: 73 0C                                                 	jnc	fp_qword_ok
000070EC: 81 E2 FF FF 0F 00                                     	and	edx,1 shl 20 - 1
000070F2: 66 43                                                 	inc	bx
000070F4: D1 EA                                                 	shr	edx,1
000070F6: D1 D8                                                 	rcr	eax,1
                                                                      fp_qword_ok:
000070F8: 66 81 C3 FF 03                                        	add	bx,3FFh
000070FD: 66 81 FB FF 07                                        	cmp	bx,7FFh
00007102: 0F 8D AE 98 FF FF                                     	jge	value_out_of_range
00007108: 66 83 FB 00                                           	cmp	bx,0
0000710C: 7F 4D                                                 	jg	fp_qword_exp_ok
0000710E: 81 CA 00 00 10 00                                     	or	edx,1 shl 20
00007114: 66 89 D9                                              	mov	cx,bx
00007117: 66 F7 D9                                              	neg	cx
0000711A: 66 41                                                 	inc	cx
0000711C: 66 83 F9 35                                           	cmp	cx,52+1
00007120: 0F 87 90 98 FF FF                                     	ja	value_out_of_range
00007126: 66 83 F9 20                                           	cmp	cx,32
0000712A: 72 0C                                                 	jb	fp_qword_small_shift
0000712C: 66 83 E9 20                                           	sub	cx,32
00007130: 89 D0                                                 	mov	eax,edx
00007132: 31 D2                                                 	xor	edx,edx
00007134: D3 E8                                                 	shr	eax,cl
00007136: EB 07                                                 	jmp	fp_qword_shift_done
                                                                      fp_qword_small_shift:
00007138: 89 D3                                                 	mov	ebx,edx
0000713A: D3 EA                                                 	shr	edx,cl
0000713C: 0F AD D8                                              	shrd	eax,ebx,cl
                                                                      fp_qword_shift_done:
0000713F: 66 BB 00 00                                           	mov	bx,0
00007143: 73 16                                                 	jnc	fp_qword_exp_ok
00007145: 83 C0 01                                              	add	eax,1
00007148: 83 D2 00                                              	adc	edx,0
0000714B: F7 C2 00 00 10 00                                     	test	edx,1 shl 20
00007151: 74 08                                                 	jz	fp_qword_exp_ok
00007153: 81 E2 FF FF 0F 00                                     	and	edx,1 shl 20 - 1
00007159: 66 43                                                 	inc	bx
                                                                      fp_qword_exp_ok:
0000715B: C1 E3 14                                              	shl	ebx,20
0000715E: 09 DA                                                 	or	edx,ebx
00007160: 75 08                                                 	jnz	fp_qword_store
00007162: 09 C0                                                 	or	eax,eax
00007164: 0F 84 4C 98 FF FF                                     	jz	value_out_of_range
                                                                      fp_qword_store:
0000716A: 8A 5E 0B                                              	mov	bl,[esi+11]
0000716D: C1 E3 1F                                              	shl	ebx,31
00007170: 09 DA                                                 	or	edx,ebx
00007172: 89 07                                                 	mov	[edi],eax
00007174: 89 57 04                                              	mov	[edi+4],edx
00007177: 83 C6 0D                                              	add	esi,13
0000717A: C3                                                    	ret
                                                                      convert_fp_word:
0000717B: 31 C0                                                 	xor	eax,eax
0000717D: 66 81 7E 08 00 80                                     	cmp	word [esi+8],8000h
00007183: 74 70                                                 	je	fp_word_store
00007185: 66 8B 5E 08                                           	mov	bx,[esi+8]
00007189: 66 8B 46 06                                           	mov	ax,[esi+6]
0000718D: 66 D1 E0                                              	shl	ax,1
00007190: 66 C1 E8 06                                           	shr	ax,6
00007194: 73 12                                                 	jnc	fp_word_ok
00007196: 66 40                                                 	inc	ax
00007198: 66 0F BA E0 0A                                        	bt	ax,10
0000719D: 73 09                                                 	jnc	fp_word_ok
0000719F: 66 25 FF 03                                           	and	ax,1 shl 10 - 1
000071A3: 66 43                                                 	inc	bx
000071A5: 66 D1 E8                                              	shr	ax,1
                                                                      fp_word_ok:
000071A8: 66 83 C3 0F                                           	add	bx,0Fh
000071AC: 66 83 FB 1F                                           	cmp	bx,01Fh
000071B0: 0F 8D 00 98 FF FF                                     	jge	value_out_of_range
000071B6: 66 83 FB 00                                           	cmp	bx,0
000071BA: 7F 2C                                                 	jg	fp_word_exp_ok
000071BC: 66 0D 00 04                                           	or	ax,1 shl 10
000071C0: 66 89 D9                                              	mov	cx,bx
000071C3: 66 F7 D9                                              	neg	cx
000071C6: 66 41                                                 	inc	cx
000071C8: 66 83 F9 0B                                           	cmp	cx,10+1
000071CC: 0F 87 E4 97 FF FF                                     	ja	value_out_of_range
000071D2: 66 31 DB                                              	xor	bx,bx
000071D5: 66 D3 E8                                              	shr	ax,cl
000071D8: 73 0E                                                 	jnc	fp_word_exp_ok
000071DA: 66 40                                                 	inc	ax
000071DC: 66 A9 00 04                                           	test	ax,1 shl 10
000071E0: 74 06                                                 	jz	fp_word_exp_ok
000071E2: 66 25 FF 03                                           	and	ax,1 shl 10 - 1
000071E6: 66 43                                                 	inc	bx
                                                                      fp_word_exp_ok:
000071E8: 66 C1 E3 0A                                           	shl	bx,10
000071EC: 66 09 D8                                              	or	ax,bx
000071EF: 0F 84 C1 97 FF FF                                     	jz	value_out_of_range
                                                                      fp_word_store:
000071F5: 8A 5E 0B                                              	mov	bl,[esi+11]
000071F8: 66 C1 E3 0F                                           	shl	bx,15
000071FC: 66 09 D8                                              	or	ax,bx
000071FF: 89 07                                                 	mov	[edi],eax
00007201: 31 C0                                                 	xor	eax,eax
00007203: 89 47 04                                              	mov	[edi+4],eax
00007206: 83 C6 0D                                              	add	esi,13
00007209: C3                                                    	ret
                                                                      convert_fp_dword:
0000720A: 31 C0                                                 	xor	eax,eax
0000720C: 66 81 7E 08 00 80                                     	cmp	word [esi+8],8000h
00007212: 74 6B                                                 	je	fp_dword_store
00007214: 66 8B 5E 08                                           	mov	bx,[esi+8]
00007218: 8B 46 04                                              	mov	eax,[esi+4]
0000721B: D1 E0                                                 	shl	eax,1
0000721D: C1 E8 09                                              	shr	eax,9
00007220: 73 10                                                 	jnc	fp_dword_ok
00007222: 40                                                    	inc	eax
00007223: 0F BA E0 17                                           	bt	eax,23
00007227: 73 09                                                 	jnc	fp_dword_ok
00007229: 25 FF FF 7F 00                                        	and	eax,1 shl 23 - 1
0000722E: 66 43                                                 	inc	bx
00007230: D1 E8                                                 	shr	eax,1
                                                                      fp_dword_ok:
00007232: 66 83 C3 7F                                           	add	bx,7Fh
00007236: 66 81 FB FF 00                                        	cmp	bx,0FFh
0000723B: 0F 8D 75 97 FF FF                                     	jge	value_out_of_range
00007241: 66 83 FB 00                                           	cmp	bx,0
00007245: 7F 2D                                                 	jg	fp_dword_exp_ok
00007247: 0D 00 00 80 00                                        	or	eax,1 shl 23
0000724C: 66 89 D9                                              	mov	cx,bx
0000724F: 66 F7 D9                                              	neg	cx
00007252: 66 41                                                 	inc	cx
00007254: 66 83 F9 18                                           	cmp	cx,23+1
00007258: 0F 87 58 97 FF FF                                     	ja	value_out_of_range
0000725E: 66 31 DB                                              	xor	bx,bx
00007261: D3 E8                                                 	shr	eax,cl
00007263: 73 0F                                                 	jnc	fp_dword_exp_ok
00007265: 40                                                    	inc	eax
00007266: A9 00 00 80 00                                        	test	eax,1 shl 23
0000726B: 74 07                                                 	jz	fp_dword_exp_ok
0000726D: 25 FF FF 7F 00                                        	and	eax,1 shl 23 - 1
00007272: 66 43                                                 	inc	bx
                                                                      fp_dword_exp_ok:
00007274: C1 E3 17                                              	shl	ebx,23
00007277: 09 D8                                                 	or	eax,ebx
00007279: 0F 84 37 97 FF FF                                     	jz	value_out_of_range
                                                                      fp_dword_store:
0000727F: 8A 5E 0B                                              	mov	bl,[esi+11]
00007282: C1 E3 1F                                              	shl	ebx,31
00007285: 09 D8                                                 	or	eax,ebx
00007287: 89 07                                                 	mov	[edi],eax
00007289: 31 C0                                                 	xor	eax,eax
0000728B: 89 47 04                                              	mov	[edi+4],eax
0000728E: 83 C6 0D                                              	add	esi,13
00007291: C3                                                    	ret
                                                                      get_string_value:
00007292: 46                                                    	inc	esi
00007293: AD                                                    	lods	dword [esi]
00007294: 89 C1                                                 	mov	ecx,eax
00007296: 83 F9 08                                              	cmp	ecx,8
00007299: 0F 87 17 97 FF FF                                     	ja	value_out_of_range
0000729F: 89 FA                                                 	mov	edx,edi
000072A1: 31 C0                                                 	xor	eax,eax
000072A3: AB                                                    	stos	dword [edi]
000072A4: AB                                                    	stos	dword [edi]
000072A5: 89 D7                                                 	mov	edi,edx
000072A7: F3 A4                                                 	rep	movs byte [edi],[esi]
000072A9: 89 D7                                                 	mov	edi,edx
000072AB: 46                                                    	inc	esi
000072AC: 66 83 67 08 00                                        	and	word [edi+8],0
000072B1: 66 83 67 0C 00                                        	and	word [edi+12],0
000072B6: C3                                                    	ret
                                                                
                                                                get_byte_value:
000072B7: C6 05 B8 A2 01 00 01                                  	mov	[value_size],1
000072BE: 80 0D A5 A2 01 00 01                                  	or	[operand_flags],1
000072C5: E8 1B 02 00 00                                        	call	calculate_value
000072CA: 08 C0                                                 	or	al,al
000072CC: 74 05                                                 	jz	check_byte_value
000072CE: E8 4F 00 00 00                                        	call	recoverable_misuse
                                                                      check_byte_value:
000072D3: 8B 07                                                 	mov	eax,[edi]
000072D5: 8B 57 04                                              	mov	edx,[edi+4]
000072D8: 80 7F 0D 00                                           	cmp	byte [edi+13],0
000072DC: 74 0D                                                 	je	byte_positive
000072DE: 83 FA FF                                              	cmp	edx,-1
000072E1: 75 14                                                 	jne	range_exceeded
000072E3: 3D 00 FF FF FF                                        	cmp	eax,-100h
000072E8: 72 0D                                                 	jb	range_exceeded
000072EA: C3                                                    	ret
                                                                      byte_positive:
000072EB: 85 D2                                                 	test	edx,edx
000072ED: 75 08                                                 	jnz	range_exceeded
000072EF: 3D 00 01 00 00                                        	cmp	eax,100h
000072F4: 73 01                                                 	jae	range_exceeded
                                                                      return_byte_value:
000072F6: C3                                                    	ret
                                                                      range_exceeded:
000072F7: 31 C0                                                 	xor	eax,eax
000072F9: 31 D2                                                 	xor	edx,edx
                                                                      recoverable_overflow:
000072FB: 83 3D E8 A1 01 00 00                                  	cmp	[error_line],0
00007302: 75 1D                                                 	jne	ignore_overflow
00007304: FF 35 80 A1 01 00                                     	push	[current_line]
0000730A: 8F 05 E8 A1 01 00                                     	pop	[error_line]
00007310: C7 05 EC A1 01 00 B6 09 00 00                         	mov	[error],value_out_of_range
0000731A: 80 0D BE A2 01 00 FF                                  	or	[value_undefined],-1
                                                                      ignore_overflow:
00007321: C3                                                    	ret
                                                                      recoverable_misuse:
00007322: 83 3D E8 A1 01 00 00                                  	cmp	[error_line],0
00007329: 75 16                                                 	jne	ignore_misuse
0000732B: FF 35 80 A1 01 00                                     	push	[current_line]
00007331: 8F 05 E8 A1 01 00                                     	pop	[error_line]
00007337: C7 05 EC A1 01 00 5A 0A 00 00                         	mov	[error],invalid_use_of_symbol
                                                                      ignore_misuse:
00007341: C3                                                    	ret
                                                                get_word_value:
00007342: C6 05 B8 A2 01 00 02                                  	mov	[value_size],2
00007349: 80 0D A5 A2 01 00 01                                  	or	[operand_flags],1
00007350: E8 90 01 00 00                                        	call	calculate_value
00007355: 3C 02                                                 	cmp	al,2
00007357: 72 05                                                 	jb	check_word_value
00007359: E8 C4 FF FF FF                                        	call	recoverable_misuse
                                                                      check_word_value:
0000735E: 8B 07                                                 	mov	eax,[edi]
00007360: 8B 57 04                                              	mov	edx,[edi+4]
00007363: 80 7F 0D 00                                           	cmp	byte [edi+13],0
00007367: 74 0D                                                 	je	word_positive
00007369: 83 FA FF                                              	cmp	edx,-1
0000736C: 75 89                                                 	jne	range_exceeded
0000736E: 3D 00 00 FF FF                                        	cmp	eax,-10000h
00007373: 72 82                                                 	jb	range_exceeded
00007375: C3                                                    	ret
                                                                      word_positive:
00007376: 85 D2                                                 	test	edx,edx
00007378: 0F 85 79 FF FF FF                                     	jnz	range_exceeded
0000737E: 3D 00 00 01 00                                        	cmp	eax,10000h
00007383: 0F 83 6E FF FF FF                                     	jae	range_exceeded
00007389: C3                                                    	ret
                                                                get_dword_value:
0000738A: C6 05 B8 A2 01 00 04                                  	mov	[value_size],4
00007391: 80 0D A5 A2 01 00 01                                  	or	[operand_flags],1
00007398: E8 48 01 00 00                                        	call	calculate_value
0000739D: 3C 04                                                 	cmp	al,4
0000739F: 75 25                                                 	jne	check_dword_value
000073A1: C6 05 C0 A2 01 00 02                                  	mov	[value_type],2
000073A8: 8B 07                                                 	mov	eax,[edi]
000073AA: 99                                                    	cdq
000073AB: 3B 57 04                                              	cmp	edx,[edi+4]
000073AE: 0F 85 43 FF FF FF                                     	jne	range_exceeded
000073B4: 89 D1                                                 	mov	ecx,edx
000073B6: C1 F9 1F                                              	sar	ecx,31
000073B9: 3A 0D C1 A2 01 00                                     	cmp	cl,[value_sign]
000073BF: 0F 85 32 FF FF FF                                     	jne	range_exceeded
000073C5: C3                                                    	ret
                                                                      check_dword_value:
000073C6: 8B 07                                                 	mov	eax,[edi]
000073C8: 8B 57 04                                              	mov	edx,[edi+4]
000073CB: 80 7F 0D 00                                           	cmp	byte [edi+13],0
000073CF: 74 0A                                                 	je	dword_positive
000073D1: 83 FA FF                                              	cmp	edx,-1
000073D4: 0F 85 1D FF FF FF                                     	jne	range_exceeded
000073DA: C3                                                    	ret
                                                                      dword_positive:
000073DB: 85 D2                                                 	test	edx,edx
000073DD: 0F 85 14 FF FF FF                                     	jne	range_exceeded
000073E3: C3                                                    	ret
                                                                get_pword_value:
000073E4: C6 05 B8 A2 01 00 06                                  	mov	[value_size],6
000073EB: 80 0D A5 A2 01 00 01                                  	or	[operand_flags],1
000073F2: E8 EE 00 00 00                                        	call	calculate_value
000073F7: 3C 04                                                 	cmp	al,4
000073F9: 75 05                                                 	jne	check_pword_value
000073FB: E8 22 FF FF FF                                        	call	recoverable_misuse
                                                                      check_pword_value:
00007400: 8B 07                                                 	mov	eax,[edi]
00007402: 8B 57 04                                              	mov	edx,[edi+4]
00007405: 80 7F 0D 00                                           	cmp	byte [edi+13],0
00007409: 74 0D                                                 	je	pword_positive
0000740B: 81 FA 00 00 FF FF                                     	cmp	edx,-10000h
00007411: 0F 82 E0 FE FF FF                                     	jb	range_exceeded
00007417: C3                                                    	ret
                                                                      pword_positive:
00007418: 81 FA 00 00 01 00                                     	cmp	edx,10000h
0000741E: 0F 83 D3 FE FF FF                                     	jae	range_exceeded
00007424: C3                                                    	ret
                                                                get_qword_value:
00007425: C6 05 B8 A2 01 00 08                                  	mov	[value_size],8
0000742C: 80 0D A5 A2 01 00 01                                  	or	[operand_flags],1
00007433: E8 AD 00 00 00                                        	call	calculate_value
                                                                      check_qword_value:
00007438: 8B 07                                                 	mov	eax,[edi]
0000743A: 8B 57 04                                              	mov	edx,[edi+4]
0000743D: C3                                                    	ret
                                                                get_count_value:
0000743E: C6 05 B8 A2 01 00 08                                  	mov	[value_size],8
00007445: 80 0D A5 A2 01 00 01                                  	or	[operand_flags],1
0000744C: E8 97 F0 FF FF                                        	call	calculate_expression
00007451: 66 83 7F 08 00                                        	cmp	word [edi+8],0
00007456: 0F 85 50 95 FF FF                                     	jne	invalid_value
0000745C: C6 05 C1 A2 01 00 00                                  	mov	[value_sign],0
00007463: 8A 47 0C                                              	mov	al,[edi+12]
00007466: 08 C0                                                 	or	al,al
00007468: 74 05                                                 	jz	check_count_value
0000746A: E8 B3 FE FF FF                                        	call	recoverable_misuse
                                                                      check_count_value:
0000746F: 80 7F 0D 00                                           	cmp	byte [edi+13],0
00007473: 75 0A                                                 	jne	invalid_count_value
00007475: 8B 07                                                 	mov	eax,[edi]
00007477: 8B 57 04                                              	mov	edx,[edi+4]
0000747A: 09 D2                                                 	or	edx,edx
0000747C: 75 01                                                 	jnz	invalid_count_value
0000747E: C3                                                    	ret
                                                                      invalid_count_value:
0000747F: 83 3D E8 A1 01 00 00                                  	cmp	[error_line],0
00007486: 75 14                                                 	jne	zero_count
00007488: A1 80 A1 01 00                                        	mov	eax,[current_line]
0000748D: A3 E8 A1 01 00                                        	mov	[error_line],eax
00007492: C7 05 EC A1 01 00 AC 09 00 00                         	mov	[error],invalid_value
                                                                      zero_count:
0000749C: 31 C0                                                 	xor	eax,eax
0000749E: C3                                                    	ret
                                                                get_value:
0000749F: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
000074A6: AC                                                    	lods	byte [esi]
000074A7: E8 88 98 00 00                                        	call	get_size_operator
000074AC: 3C 28                                                 	cmp	al,'('
000074AE: 0F 85 F8 94 FF FF                                     	jne	invalid_value
000074B4: A0 A4 A2 01 00                                        	mov	al,[operand_size]
000074B9: 3C 01                                                 	cmp	al,1
000074BB: 74 7D                                                 	je	value_byte
000074BD: 3C 02                                                 	cmp	al,2
000074BF: 74 6D                                                 	je	value_word
000074C1: 3C 04                                                 	cmp	al,4
000074C3: 74 60                                                 	je	value_dword
000074C5: 3C 06                                                 	cmp	al,6
000074C7: 74 52                                                 	je	value_pword
000074C9: 3C 08                                                 	cmp	al,8
000074CB: 74 41                                                 	je	value_qword
000074CD: 08 C0                                                 	or	al,al
000074CF: 0F 85 D7 94 FF FF                                     	jnz	invalid_value
000074D5: A2 B8 A2 01 00                                        	mov	[value_size],al
000074DA: E8 06 00 00 00                                        	call	calculate_value
000074DF: 8B 07                                                 	mov	eax,[edi]
000074E1: 8B 57 04                                              	mov	edx,[edi+4]
000074E4: C3                                                    	ret
                                                                      calculate_value:
000074E5: E8 FE EF FF FF                                        	call	calculate_expression
000074EA: 66 83 7F 08 00                                        	cmp	word [edi+8],0
000074EF: 0F 85 B7 94 FF FF                                     	jne	invalid_value
000074F5: 8B 47 10                                              	mov	eax,[edi+16]
000074F8: A3 30 A2 01 00                                        	mov	[symbol_identifier],eax
000074FD: 8A 47 0D                                              	mov	al,[edi+13]
00007500: A2 C1 A2 01 00                                        	mov	[value_sign],al
00007505: 8A 47 0C                                              	mov	al,[edi+12]
00007508: A2 C0 A2 01 00                                        	mov	[value_type],al
0000750D: C3                                                    	ret
                                                                      value_qword:
0000750E: E8 12 FF FF FF                                        	call	get_qword_value
                                                                      truncated_value:
00007513: C6 05 C1 A2 01 00 00                                  	mov	[value_sign],0
0000751A: C3                                                    	ret
                                                                      value_pword:
0000751B: E8 C4 FE FF FF                                        	call	get_pword_value
00007520: 0F B7 D2                                              	movzx	edx,dx
00007523: EB EE                                                 	jmp	truncated_value
                                                                      value_dword:
00007525: E8 60 FE FF FF                                        	call	get_dword_value
0000752A: 31 D2                                                 	xor	edx,edx
0000752C: EB E5                                                 	jmp	truncated_value
                                                                      value_word:
0000752E: E8 0F FE FF FF                                        	call	get_word_value
00007533: 31 D2                                                 	xor	edx,edx
00007535: 0F B7 C0                                              	movzx	eax,ax
00007538: EB D9                                                 	jmp	truncated_value
                                                                      value_byte:
0000753A: E8 78 FD FF FF                                        	call	get_byte_value
0000753F: 31 D2                                                 	xor	edx,edx
00007541: 0F B6 C0                                              	movzx	eax,al
00007544: EB CD                                                 	jmp	truncated_value
                                                                get_address_word_value:
00007546: C6 05 B9 A2 01 00 02                                  	mov	[address_size],2
0000754D: C6 05 B8 A2 01 00 02                                  	mov	[value_size],2
00007554: C6 05 D2 A2 01 00 00                                  	mov	[free_address_range],0
0000755B: EB 43                                                 	jmp	calculate_address
                                                                get_address_dword_value:
0000755D: C6 05 B9 A2 01 00 04                                  	mov	[address_size],4
00007564: C6 05 B8 A2 01 00 04                                  	mov	[value_size],4
0000756B: C6 05 D2 A2 01 00 00                                  	mov	[free_address_range],0
00007572: EB 2C                                                 	jmp	calculate_address
                                                                get_address_qword_value:
00007574: C6 05 B9 A2 01 00 08                                  	mov	[address_size],8
0000757B: C6 05 B8 A2 01 00 08                                  	mov	[value_size],8
00007582: C6 05 D2 A2 01 00 00                                  	mov	[free_address_range],0
00007589: EB 15                                                 	jmp	calculate_address
                                                                get_address_value:
0000758B: C6 05 B9 A2 01 00 00                                  	mov	[address_size],0
00007592: C6 05 B8 A2 01 00 08                                  	mov	[value_size],8
00007599: 80 0D D2 A2 01 00 FF                                  	or	[free_address_range],-1
                                                                      calculate_address:
000075A0: 80 3E 2E                                              	cmp	byte [esi],'.'
000075A3: 0F 84 F9 93 FF FF                                     	je	invalid_address
000075A9: E8 3A EF FF FF                                        	call	calculate_expression
000075AE: 8B 47 10                                              	mov	eax,[edi+16]
000075B1: A3 34 A2 01 00                                        	mov	[address_symbol],eax
000075B6: 8A 47 0D                                              	mov	al,[edi+13]
000075B9: A2 C4 A2 01 00                                        	mov	[address_sign],al
000075BE: 8A 47 0C                                              	mov	al,[edi+12]
000075C1: A2 C0 A2 01 00                                        	mov	[value_type],al
000075C6: 3C 00                                                 	cmp	al,0
000075C8: 74 6B                                                 	je	address_size_ok
000075CA: 7F 02                                                 	jg	get_address_symbol_size
000075CC: F6 D8                                                 	neg	al
                                                                      get_address_symbol_size:
000075CE: 3C 06                                                 	cmp	al,6
000075D0: 74 14                                                 	je	special_address_type_32bit
000075D2: 3C 05                                                 	cmp	al,5
000075D4: 74 10                                                 	je	special_address_type_32bit
000075D6: 77 09                                                 	ja	invalid_address_type
000075D8: A8 01                                                 	test	al,1
000075DA: 75 05                                                 	jnz	invalid_address_type
000075DC: C0 E0 05                                              	shl	al,5
000075DF: EB 07                                                 	jmp	address_symbol_ok
                                                                      invalid_address_type:
000075E1: E8 3C FD FF FF                                        	call	recoverable_misuse
                                                                      special_address_type_32bit:
000075E6: B0 40                                                 	mov	al,40h
                                                                      address_symbol_ok:
000075E8: 8A 25 B9 A2 01 00                                     	mov	ah,[address_size]
000075EE: 08 05 B9 A2 01 00                                     	or	[address_size],al
000075F4: C0 E8 04                                              	shr	al,4
000075F7: 08 E4                                                 	or	ah,ah
000075F9: 74 3A                                                 	jz	address_size_ok
000075FB: 38 E0                                                 	cmp	al,ah
000075FD: 74 36                                                 	je	address_size_ok
000075FF: 66 3D 08 04                                           	cmp	ax,0408h
00007603: 74 0A                                                 	je	address_sizes_mixed
00007605: 66 3D 04 08                                           	cmp	ax,0804h
00007609: 0F 85 61 93 FF FF                                     	jne	address_sizes_do_not_agree
                                                                      address_sizes_mixed:
0000760F: 80 3D C0 A2 01 00 04                                  	cmp	[value_type],4
00007616: 75 07                                                 	jne	address_sizes_mixed_type_ok
00007618: C6 05 C0 A2 01 00 02                                  	mov	[value_type],2
                                                                      address_sizes_mixed_type_ok:
0000761F: 8B 07                                                 	mov	eax,[edi]
00007621: 99                                                    	cdq
00007622: 3B 57 04                                              	cmp	edx,[edi+4]
00007625: 74 0E                                                 	je	address_size_ok
00007627: 83 3D E8 A1 01 00 00                                  	cmp	[error_line],0
0000762E: 75 05                                                 	jne	address_size_ok
00007630: E8 C6 FC FF FF                                        	call	recoverable_overflow
                                                                      address_size_ok:
00007635: 31 DB                                                 	xor	ebx,ebx
00007637: 31 C9                                                 	xor	ecx,ecx
00007639: 8A 0D C0 A2 01 00                                     	mov	cl,[value_type]
0000763F: C1 E1 10                                              	shl	ecx,16
00007642: 8A 2D B9 A2 01 00                                     	mov	ch,[address_size]
00007648: 66 83 7F 08 00                                        	cmp	word [edi+8],0
0000764D: 0F 84 57 01 00 00                                     	je	check_immediate_address
00007653: 8A 47 08                                              	mov	al,[edi+8]
00007656: 8A 57 0A                                              	mov	dl,[edi+10]
00007659: E8 D3 00 00 00                                        	call	get_address_register
0000765E: 8A 47 09                                              	mov	al,[edi+9]
00007661: 8A 57 0B                                              	mov	dl,[edi+11]
00007664: E8 C8 00 00 00                                        	call	get_address_register
00007669: 66 89 D8                                              	mov	ax,bx
0000766C: C0 EC 04                                              	shr	ah,4
0000766F: C0 E8 04                                              	shr	al,4
00007672: 08 FF                                                 	or	bh,bh
00007674: 74 0C                                                 	jz	check_address_registers
00007676: 08 DB                                                 	or	bl,bl
00007678: 74 08                                                 	jz	check_address_registers
0000767A: 38 E0                                                 	cmp	al,ah
0000767C: 0F 85 D1 01 00 00                                     	jne	check_vsib
                                                                      check_address_registers:
00007682: 08 E0                                                 	or	al,ah
00007684: 3C 0C                                                 	cmp	al,0Ch
00007686: 0F 83 C7 01 00 00                                     	jae	check_vsib
0000768C: 3C 06                                                 	cmp	al,6
0000768E: 0F 84 BF 01 00 00                                     	je	check_vsib
00007694: 3C 07                                                 	cmp	al,7
00007696: 0F 84 B7 01 00 00                                     	je	check_vsib
0000769C: 8A 25 B9 A2 01 00                                     	mov	ah,[address_size]
000076A2: 80 E4 0F                                              	and	ah,0Fh
000076A5: 74 08                                                 	jz	address_registers_sizes_ok
000076A7: 38 E0                                                 	cmp	al,ah
000076A9: 0F 85 F3 92 FF FF                                     	jne	invalid_address
                                                                      address_registers_sizes_ok:
000076AF: 3C 04                                                 	cmp	al,4
000076B1: 0F 84 98 00 00 00                                     	je	sib_allowed
000076B7: 3C 08                                                 	cmp	al,8
000076B9: 0F 84 90 00 00 00                                     	je	sib_allowed
000076BF: 3C 09                                                 	cmp	al,9
000076C1: 74 2F                                                 	je	check_ip_relative_address
000076C3: 80 F9 01                                              	cmp	cl,1
000076C6: 0F 87 D6 92 FF FF                                     	ja	invalid_address
000076CC: 80 3D D2 A2 01 00 00                                  	cmp	[free_address_range],0
000076D3: 0F 85 5F FD FF FF                                     	jne	check_qword_value
000076D9: E9 80 FC FF FF                                        	jmp	check_word_value
                                                                      address_sizes_do_not_match:
000076DE: 3C 0F                                                 	cmp	al,0Fh
000076E0: 0F 85 BC 92 FF FF                                     	jne	invalid_address
000076E6: 88 F8                                                 	mov	al,bh
000076E8: 24 0F                                                 	and	al,0Fh
000076EA: 38 E0                                                 	cmp	al,ah
000076EC: 0F 85 B0 92 FF FF                                     	jne	invalid_address
                                                                      check_ip_relative_address:
000076F2: 08 DB                                                 	or	bl,bl
000076F4: 0F 85 A8 92 FF FF                                     	jnz	invalid_address
000076FA: 80 FF 98                                              	cmp	bh,98h
000076FD: 74 1C                                                 	je	check_rip_relative_address
000076FF: 80 FF 94                                              	cmp	bh,94h
00007702: 0F 85 9A 92 FF FF                                     	jne	invalid_address
00007708: 80 3D D2 A2 01 00 00                                  	cmp	[free_address_range],0
0000770F: 0F 84 B1 FC FF FF                                     	je	check_dword_value
00007715: 8B 07                                                 	mov	eax,[edi]
00007717: 8B 57 04                                              	mov	edx,[edi+4]
0000771A: C3                                                    	ret
                                                                      check_rip_relative_address:
0000771B: 8B 07                                                 	mov	eax,[edi]
0000771D: 99                                                    	cdq
0000771E: 3B 57 04                                              	cmp	edx,[edi+4]
00007721: 0F 85 D0 FB FF FF                                     	jne	range_exceeded
00007727: 3A 57 0D                                              	cmp	dl,[edi+13]
0000772A: 0F 85 C7 FB FF FF                                     	jne	range_exceeded
00007730: C3                                                    	ret
                                                                      get_address_register:
00007731: 08 C0                                                 	or	al,al
00007733: 74 0B                                                 	jz	address_register_ok
00007735: 80 FA 01                                              	cmp	dl,1
00007738: 75 07                                                 	jne	scaled_register
0000773A: 08 FF                                                 	or	bh,bh
0000773C: 75 03                                                 	jnz	scaled_register
0000773E: 88 C7                                                 	mov	bh,al
                                                                      address_register_ok:
00007740: C3                                                    	ret
                                                                      scaled_register:
00007741: 08 DB                                                 	or	bl,bl
00007743: 0F 85 59 92 FF FF                                     	jnz	invalid_address
00007749: 88 C3                                                 	mov	bl,al
0000774B: 88 D1                                                 	mov	cl,dl
0000774D: EB F1                                                 	jmp	address_register_ok
                                                                      sib_allowed:
0000774F: 08 FF                                                 	or	bh,bh
00007751: 0F 85 99 00 00 00                                     	jnz	check_index_with_base
00007757: 80 F9 03                                              	cmp	cl,3
0000775A: 74 4A                                                 	je	special_index_scale
0000775C: 80 F9 05                                              	cmp	cl,5
0000775F: 74 45                                                 	je	special_index_scale
00007761: 80 F9 09                                              	cmp	cl,9
00007764: 74 40                                                 	je	special_index_scale
00007766: 80 F9 02                                              	cmp	cl,2
00007769: 0F 85 CA 00 00 00                                     	jne	check_index_scale
0000776F: 80 FB 45                                              	cmp	bl,45h
00007772: 75 32                                                 	jne	special_index_scale
00007774: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000777B: 74 29                                                 	je	special_index_scale
0000777D: 80 3D B3 A2 01 00 04                                  	cmp	[segment_register],4
00007784: 75 20                                                 	jne	special_index_scale
00007786: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000778D: 0F 85 A6 00 00 00                                     	jne	check_index_scale
00007793: 8A 07                                                 	mov	al,[edi]
00007795: 66 98                                                 	cbw
00007797: 98                                                    	cwde
00007798: 3B 07                                                 	cmp	eax,[edi]
0000779A: 0F 85 99 00 00 00                                     	jne	check_index_scale
000077A0: 99                                                    	cdq
000077A1: 3B 57 04                                              	cmp	edx,[edi+4]
000077A4: 75 04                                                 	jne	check_immediate_address
                                                                      special_index_scale:
000077A6: 88 DF                                                 	mov	bh,bl
000077A8: FE C9                                                 	dec	cl
                                                                      check_immediate_address:
000077AA: 80 3D D2 A2 01 00 00                                  	cmp	[free_address_range],0
000077B1: 0F 85 81 FC FF FF                                     	jne	check_qword_value
000077B7: A0 B9 A2 01 00                                        	mov	al,[address_size]
000077BC: 24 0F                                                 	and	al,0Fh
000077BE: 3C 02                                                 	cmp	al,2
000077C0: 0F 84 98 FB FF FF                                     	je	check_word_value
000077C6: 3C 04                                                 	cmp	al,4
000077C8: 0F 84 F8 FB FF FF                                     	je	check_dword_value
000077CE: 3C 08                                                 	cmp	al,8
000077D0: 0F 84 62 FC FF FF                                     	je	check_qword_value
000077D6: 08 C0                                                 	or	al,al
000077D8: 0F 85 CE 91 FF FF                                     	jnz	invalid_value
000077DE: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
000077E5: 0F 85 DB FB FF FF                                     	jne	check_dword_value
000077EB: E9 48 FC FF FF                                        	jmp	check_qword_value
                                                                      check_index_with_base:
000077F0: 80 F9 01                                              	cmp	cl,1
000077F3: 75 44                                                 	jne	check_index_scale
000077F5: 80 FB 44                                              	cmp	bl,44h
000077F8: 74 2C                                                 	je	swap_base_with_index
000077FA: 80 FB 84                                              	cmp	bl,84h
000077FD: 74 27                                                 	je	swap_base_with_index
000077FF: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00007806: 74 22                                                 	je	check_for_rbp_base
00007808: 80 FB 45                                              	cmp	bl,45h
0000780B: 75 0B                                                 	jne	check_for_ebp_base
0000780D: 80 3D B3 A2 01 00 03                                  	cmp	[segment_register],3
00007814: 74 10                                                 	je	swap_base_with_index
00007816: EB 92                                                 	jmp	check_immediate_address
                                                                      check_for_ebp_base:
00007818: 80 FF 45                                              	cmp	bh,45h
0000781B: 75 8D                                                 	jne	check_immediate_address
0000781D: 80 3D B3 A2 01 00 04                                  	cmp	[segment_register],4
00007824: 75 84                                                 	jne	check_immediate_address
                                                                      swap_base_with_index:
00007826: 86 DF                                                 	xchg	bl,bh
00007828: EB 80                                                 	jmp	check_immediate_address
                                                                      check_for_rbp_base:
0000782A: 80 FF 45                                              	cmp	bh,45h
0000782D: 74 F7                                                 	je	swap_base_with_index
0000782F: 80 FF 85                                              	cmp	bh,85h
00007832: 74 F2                                                 	je	swap_base_with_index
00007834: E9 71 FF FF FF                                        	jmp	check_immediate_address
                                                                      check_index_scale:
00007839: F6 C1 F0                                              	test	cl,not 1111b
0000783C: 0F 85 60 91 FF FF                                     	jnz	invalid_address
00007842: 88 C8                                                 	mov	al,cl
00007844: FE C8                                                 	dec	al
00007846: 20 C8                                                 	and	al,cl
00007848: 0F 84 5C FF FF FF                                     	jz	check_immediate_address
0000784E: E9 4F 91 FF FF                                        	jmp	invalid_address
                                                                      check_vsib:
00007853: 30 E4                                                 	xor	ah,ah
                                                                      check_vsib_base:
00007855: 84 FF                                                 	test	bh,bh
00007857: 74 29                                                 	jz	check_vsib_index
00007859: 88 F8                                                 	mov	al,bh
0000785B: C0 E8 04                                              	shr	al,4
0000785E: 3C 04                                                 	cmp	al,4
00007860: 74 0D                                                 	je	check_vsib_base_size
00007862: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00007869: 75 28                                                 	jne	swap_vsib_registers
0000786B: 3C 08                                                 	cmp	al,8
0000786D: 75 24                                                 	jne	swap_vsib_registers
                                                                      check_vsib_base_size:
0000786F: 8A 25 B9 A2 01 00                                     	mov	ah,[address_size]
00007875: 80 E4 0F                                              	and	ah,0Fh
00007878: 74 08                                                 	jz	check_vsib_index
0000787A: 38 E0                                                 	cmp	al,ah
0000787C: 0F 85 20 91 FF FF                                     	jne	invalid_address
                                                                      check_vsib_index:
00007882: 88 D8                                                 	mov	al,bl
00007884: 24 E0                                                 	and	al,0E0h
00007886: 3C C0                                                 	cmp	al,0C0h
00007888: 73 AF                                                 	jae	check_index_scale
0000788A: 3C 60                                                 	cmp	al,60h
0000788C: 74 AB                                                 	je	check_index_scale
0000788E: E9 0F 91 FF FF                                        	jmp	invalid_address
                                                                      swap_vsib_registers:
00007893: 80 F4 FF                                              	xor	ah,-1
00007896: 0F 84 06 91 FF FF                                     	jz	invalid_address
0000789C: 80 F9 01                                              	cmp	cl,1
0000789F: 0F 87 FD 90 FF FF                                     	ja	invalid_address
000078A5: 86 DF                                                 	xchg	bl,bh
000078A7: B1 01                                                 	mov	cl,1
000078A9: EB AA                                                 	jmp	check_vsib_base
                                                                
                                                                calculate_relative_offset:
000078AB: 80 3D BE A2 01 00 00                                  	cmp	[value_undefined],0
000078B2: 0F 85 93 00 00 00                                     	jne	relative_offset_ok
000078B8: 84 FF                                                 	test	bh,bh
000078BA: 0F 95 C5                                              	setne	ch
000078BD: 3E 66 3B 5D 10                                        	cmp	bx,[ds:ebp+10h]
000078C2: 74 0F                                                 	je	origin_registers_ok
000078C4: 86 FB                                                 	xchg	bh,bl
000078C6: 86 E9                                                 	xchg	ch,cl
000078C8: 3E 66 3B 5D 10                                        	cmp	bx,[ds:ebp+10h]
000078CD: 0F 85 D9 90 FF FF                                     	jne	invalid_value
                                                                      origin_registers_ok:
000078D3: 3E 66 3B 4D 12                                        	cmp	cx,[ds:ebp+10h+2]
000078D8: 0F 85 CE 90 FF FF                                     	jne	invalid_value
000078DE: 8A 1D C4 A2 01 00                                     	mov	bl,[address_sign]
000078E4: 3E 03 45 00                                           	add	eax,[ds:ebp]
000078E8: 3E 13 55 04                                           	adc	edx,[ds:ebp+4]
000078EC: 3E 12 5D 08                                           	adc	bl,[ds:ebp+8]
000078F0: 29 F8                                                 	sub	eax,edi
000078F2: 83 DA 00                                              	sbb	edx,0
000078F5: 80 DB 00                                              	sbb	bl,0
000078F8: 88 1D C1 A2 01 00                                     	mov	[value_sign],bl
000078FE: 8A 1D C0 A2 01 00                                     	mov	bl,[value_type]
00007904: 8B 0D 34 A2 01 00                                     	mov	ecx,[address_symbol]
0000790A: 89 0D 30 A2 01 00                                     	mov	[symbol_identifier],ecx
00007910: F6 C3 01                                              	test	bl,1
00007913: 75 14                                                 	jnz	relative_offset_unallowed
00007915: 80 FB 06                                              	cmp	bl,6
00007918: 74 32                                                 	je	plt_relative_offset
0000791A: 3E 8A 7D 09                                           	mov	bh,[ds:ebp+9]
0000791E: 38 FB                                                 	cmp	bl,bh
00007920: 74 0C                                                 	je	set_relative_offset_type
00007922: 66 81 FB 02 04                                        	cmp	bx,0402h
00007927: 74 05                                                 	je	set_relative_offset_type
                                                                      relative_offset_unallowed:
00007929: E8 F4 F9 FF FF                                        	call	recoverable_misuse
                                                                      set_relative_offset_type:
0000792E: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
00007935: 74 14                                                 	je	relative_offset_ok
00007937: C6 05 C0 A2 01 00 00                                  	mov	[value_type],0
0000793E: 3E 3B 4D 14                                           	cmp	ecx,[ds:ebp+14h]
00007942: 74 07                                                 	je	relative_offset_ok
00007944: C6 05 C0 A2 01 00 03                                  	mov	[value_type],3
                                                                      relative_offset_ok:
0000794B: C3                                                    	ret
                                                                      plt_relative_offset:
0000794C: C6 05 C0 A2 01 00 07                                  	mov	[value_type],7
00007953: 3E 80 7D 09 02                                        	cmp	byte [ds:ebp+9],2
00007958: 74 F1                                                 	je	relative_offset_ok
0000795A: 3E 80 7D 09 04                                        	cmp	byte [ds:ebp+9],4
0000795F: 0F 85 BD F9 FF FF                                     	jne	recoverable_misuse
00007965: C3                                                    	ret
                                                                
                                                                calculate_logical_expression:
00007966: 30 C0                                                 	xor	al,al
                                                                  calculate_embedded_logical_expression:
00007968: A2 C7 A2 01 00                                        	mov	[logical_value_wrapping],al
0000796D: E8 7E 00 00 00                                        	call	get_logical_value
                                                                      logical_loop:
00007972: 80 3E 7C                                              	cmp	byte [esi],'|'
00007975: 74 06                                                 	je	logical_or
00007977: 80 3E 26                                              	cmp	byte [esi],'&'
0000797A: 74 11                                                 	je	logical_and
0000797C: C3                                                    	ret
                                                                      logical_or:
0000797D: 46                                                    	inc	esi
0000797E: 08 C0                                                 	or	al,al
00007980: 75 1B                                                 	jnz	logical_value_already_determined
00007982: 50                                                    	push	eax
00007983: E8 68 00 00 00                                        	call	get_logical_value
00007988: 5B                                                    	pop	ebx
00007989: 08 D8                                                 	or	al,bl
0000798B: EB E5                                                 	jmp	logical_loop
                                                                      logical_and:
0000798D: 46                                                    	inc	esi
0000798E: 08 C0                                                 	or	al,al
00007990: 74 0B                                                 	jz	logical_value_already_determined
00007992: 50                                                    	push	eax
00007993: E8 58 00 00 00                                        	call	get_logical_value
00007998: 5B                                                    	pop	ebx
00007999: 20 D8                                                 	and	al,bl
0000799B: EB D5                                                 	jmp	logical_loop
                                                                      logical_value_already_determined:
0000799D: 50                                                    	push	eax
0000799E: E8 B8 CD FF FF                                        	call	skip_logical_value
000079A3: 0F 82 EF 8F FF FF                                     	jc	invalid_expression
000079A9: 58                                                    	pop	eax
000079AA: EB C6                                                 	jmp	logical_loop
                                                                  get_value_for_comparison:
000079AC: C6 05 B8 A2 01 00 08                                  	mov	[value_size],8
000079B3: 80 0D A5 A2 01 00 01                                  	or	[operand_flags],1
000079BA: AC                                                    	lods	byte [esi]
000079BB: E8 28 EB FF FF                                        	call	calculate_expression
000079C0: 80 7F 08 00                                           	cmp	byte [edi+8],0
000079C4: 75 04                                                 	jne	first_register_size_ok
000079C6: C6 47 0A 00                                           	mov	byte [edi+10],0
                                                                      first_register_size_ok:
000079CA: 80 7F 09 00                                           	cmp	byte [edi+9],0
000079CE: 75 04                                                 	jne	second_register_size_ok
000079D0: C6 47 0B 00                                           	mov	byte [edi+11],0
                                                                      second_register_size_ok:
000079D4: 8B 47 10                                              	mov	eax,[edi+16]
000079D7: A3 30 A2 01 00                                        	mov	[symbol_identifier],eax
000079DC: 8A 47 0D                                              	mov	al,[edi+13]
000079DF: A2 C1 A2 01 00                                        	mov	[value_sign],al
000079E4: 8A 5F 0C                                              	mov	bl,[edi+12]
000079E7: 8B 07                                                 	mov	eax,[edi]
000079E9: 8B 57 04                                              	mov	edx,[edi+4]
000079EC: 8B 4F 08                                              	mov	ecx,[edi+8]
000079EF: C3                                                    	ret
                                                                  get_logical_value:
000079F0: 30 C0                                                 	xor	al,al
                                                                      check_for_negation:
000079F2: 80 3E 7E                                              	cmp	byte [esi],'~'
000079F5: 75 05                                                 	jne	negation_ok
000079F7: 46                                                    	inc	esi
000079F8: 34 FF                                                 	xor	al,-1
000079FA: EB F6                                                 	jmp	check_for_negation
                                                                      negation_ok:
000079FC: 50                                                    	push	eax
000079FD: 8A 06                                                 	mov	al,[esi]
000079FF: 3C 91                                                 	cmp	al,91h
00007A01: 0F 84 67 03 00 00                                     	je	logical_expression
00007A07: 3C FF                                                 	cmp	al,0FFh
00007A09: 0F 84 89 8F FF FF                                     	je	invalid_expression
00007A0F: 3C 88                                                 	cmp	al,88h
00007A11: 0F 84 50 02 00 00                                     	je	check_for_defined
00007A17: 3C 8A                                                 	cmp	al,8Ah
00007A19: 0F 84 43 02 00 00                                     	je	check_for_earlier_defined
00007A1F: 3C 89                                                 	cmp	al,89h
00007A21: 0F 84 F8 02 00 00                                     	je	check_for_used
00007A27: 3C 30                                                 	cmp	al,'0'
00007A29: 0F 84 35 03 00 00                                     	je	given_false
00007A2F: 3C 31                                                 	cmp	al,'1'
00007A31: 0F 84 32 03 00 00                                     	je	given_true
00007A37: 3C 28                                                 	cmp	al,'('
00007A39: 0F 85 6D 8F FF FF                                     	jne	invalid_value
00007A3F: E8 68 FF FF FF                                        	call	get_value_for_comparison
00007A44: 8A 3D C1 A2 01 00                                     	mov	bh,[value_sign]
00007A4A: 50 52                                                 	push	eax edx
00007A4C: FF 35 30 A2 01 00                                     	push	[symbol_identifier]
00007A52: 53 51                                                 	push	ebx ecx
00007A54: 8A 06                                                 	mov	al,[esi]
00007A56: 08 C0                                                 	or	al,al
00007A58: 0F 84 DC 01 00 00                                     	jz	logical_number
00007A5E: 3C 0F                                                 	cmp	al,0Fh
00007A60: 0F 84 D4 01 00 00                                     	je	logical_number
00007A66: 3C 92                                                 	cmp	al,92h
00007A68: 0F 84 CC 01 00 00                                     	je	logical_number
00007A6E: 3C 26                                                 	cmp	al,'&'
00007A70: 0F 84 C4 01 00 00                                     	je	logical_number
00007A76: 3C 7C                                                 	cmp	al,'|'
00007A78: 0F 84 BC 01 00 00                                     	je	logical_number
00007A7E: 46                                                    	inc	esi
00007A7F: A2 C6 A2 01 00                                        	mov	[compare_type],al
00007A84: 80 3E 28                                              	cmp	byte [esi],'('
00007A87: 0F 85 1F 8F FF FF                                     	jne	invalid_value
00007A8D: E8 1A FF FF FF                                        	call	get_value_for_comparison
00007A92: 3A 5C 24 04                                           	cmp	bl,[esp+4]
00007A96: 75 24                                                 	jne	values_not_relative
00007A98: 08 DB                                                 	or	bl,bl
00007A9A: 74 0C                                                 	jz	check_values_registers
00007A9C: 8B 1D 30 A2 01 00                                     	mov	ebx,[symbol_identifier]
00007AA2: 3B 5C 24 08                                           	cmp	ebx,[esp+8]
00007AA6: 75 14                                                 	jne	values_not_relative
                                                                      check_values_registers:
00007AA8: 3B 0C 24                                              	cmp	ecx,[esp]
00007AAB: 74 25                                                 	je	values_relative
00007AAD: C1 C9 10                                              	ror	ecx,16
00007AB0: 86 E9                                                 	xchg	ch,cl
00007AB2: C1 C9 10                                              	ror	ecx,16
00007AB5: 86 E9                                                 	xchg	ch,cl
00007AB7: 3B 0C 24                                              	cmp	ecx,[esp]
00007ABA: 74 16                                                 	je	values_relative
                                                                      values_not_relative:
00007ABC: 80 3D C6 A2 01 00 F8                                  	cmp	[compare_type],0F8h
00007AC3: 75 08                                                 	jne	invalid_comparison
00007AC5: 83 C4 14                                              	add	esp,12+8
00007AC8: E9 98 02 00 00                                        	jmp	return_false
                                                                      invalid_comparison:
00007ACD: E8 50 F8 FF FF                                        	call	recoverable_misuse
                                                                      values_relative:
00007AD2: 5B                                                    	pop	ebx
00007AD3: C1 E3 10                                              	shl	ebx,16
00007AD6: 66 8B 1C 24                                           	mov	bx,[esp]
00007ADA: 83 C4 08                                              	add	esp,8
00007ADD: 59 5D                                                 	pop	ecx ebp
00007ADF: 80 3D C6 A2 01 00 3D                                  	cmp	[compare_type],'='
00007AE6: 74 58                                                 	je	check_equal
00007AE8: 80 3D C6 A2 01 00 F1                                  	cmp	[compare_type],0F1h
00007AEF: 0F 84 24 01 00 00                                     	je	check_not_equal
00007AF5: 80 3D C6 A2 01 00 F8                                  	cmp	[compare_type],0F8h
00007AFC: 0F 84 68 02 00 00                                     	je	return_true
00007B02: F7 C3 00 00 FF FF                                     	test	ebx,0FFFF0000h
00007B08: 74 05                                                 	jz	check_less_or_greater
00007B0A: E8 13 F8 FF FF                                        	call	recoverable_misuse
                                                                      check_less_or_greater:
00007B0F: 80 3D C6 A2 01 00 3E                                  	cmp	[compare_type],'>'
00007B16: 74 49                                                 	je	check_greater
00007B18: 80 3D C6 A2 01 00 3C                                  	cmp	[compare_type],'<'
00007B1F: 74 6E                                                 	je	check_less
00007B21: 80 3D C6 A2 01 00 F2                                  	cmp	[compare_type],0F2h
00007B28: 0F 84 8F 00 00 00                                     	je	check_not_less
00007B2E: 80 3D C6 A2 01 00 F3                                  	cmp	[compare_type],0F3h
00007B35: 0F 84 B0 00 00 00                                     	je	check_not_greater
00007B3B: E9 58 8E FF FF                                        	jmp	invalid_expression
                                                                      check_equal:
00007B40: 3A 3D C1 A2 01 00                                     	cmp	bh,[value_sign]
00007B46: 0F 85 19 02 00 00                                     	jne	return_false
00007B4C: 39 E8                                                 	cmp	eax,ebp
00007B4E: 0F 85 11 02 00 00                                     	jne	return_false
00007B54: 39 CA                                                 	cmp	edx,ecx
00007B56: 0F 85 09 02 00 00                                     	jne	return_false
00007B5C: E9 09 02 00 00                                        	jmp	return_true
                                                                      check_greater:
00007B61: 3A 3D C1 A2 01 00                                     	cmp	bh,[value_sign]
00007B67: 0F 8F FD 01 00 00                                     	jg	return_true
00007B6D: 0F 8C F2 01 00 00                                     	jl	return_false
00007B73: 39 CA                                                 	cmp	edx,ecx
00007B75: 0F 82 EF 01 00 00                                     	jb	return_true
00007B7B: 0F 87 E4 01 00 00                                     	ja	return_false
00007B81: 39 E8                                                 	cmp	eax,ebp
00007B83: 0F 82 E1 01 00 00                                     	jb	return_true
00007B89: 0F 83 D6 01 00 00                                     	jae	return_false
                                                                      check_less:
00007B8F: 3A 3D C1 A2 01 00                                     	cmp	bh,[value_sign]
00007B95: 0F 8F CA 01 00 00                                     	jg	return_false
00007B9B: 0F 8C C9 01 00 00                                     	jl	return_true
00007BA1: 39 CA                                                 	cmp	edx,ecx
00007BA3: 0F 82 BC 01 00 00                                     	jb	return_false
00007BA9: 0F 87 BB 01 00 00                                     	ja	return_true
00007BAF: 39 E8                                                 	cmp	eax,ebp
00007BB1: 0F 86 AE 01 00 00                                     	jbe	return_false
00007BB7: 0F 87 AD 01 00 00                                     	ja	return_true
                                                                      check_not_less:
00007BBD: 3A 3D C1 A2 01 00                                     	cmp	bh,[value_sign]
00007BC3: 0F 8F A1 01 00 00                                     	jg	return_true
00007BC9: 0F 8C 96 01 00 00                                     	jl	return_false
00007BCF: 39 CA                                                 	cmp	edx,ecx
00007BD1: 0F 82 93 01 00 00                                     	jb	return_true
00007BD7: 0F 87 88 01 00 00                                     	ja	return_false
00007BDD: 39 E8                                                 	cmp	eax,ebp
00007BDF: 0F 86 85 01 00 00                                     	jbe	return_true
00007BE5: 0F 87 7A 01 00 00                                     	ja	return_false
                                                                      check_not_greater:
00007BEB: 3A 3D C1 A2 01 00                                     	cmp	bh,[value_sign]
00007BF1: 0F 8F 6E 01 00 00                                     	jg	return_false
00007BF7: 0F 8C 6D 01 00 00                                     	jl	return_true
00007BFD: 39 CA                                                 	cmp	edx,ecx
00007BFF: 0F 82 60 01 00 00                                     	jb	return_false
00007C05: 0F 87 5F 01 00 00                                     	ja	return_true
00007C0B: 39 E8                                                 	cmp	eax,ebp
00007C0D: 0F 82 52 01 00 00                                     	jb	return_false
00007C13: 0F 83 51 01 00 00                                     	jae	return_true
                                                                      check_not_equal:
00007C19: 3A 3D C1 A2 01 00                                     	cmp	bh,[value_sign]
00007C1F: 0F 85 45 01 00 00                                     	jne	return_true
00007C25: 39 E8                                                 	cmp	eax,ebp
00007C27: 0F 85 3D 01 00 00                                     	jne	return_true
00007C2D: 39 CA                                                 	cmp	edx,ecx
00007C2F: 0F 85 35 01 00 00                                     	jne	return_true
00007C35: E9 2B 01 00 00                                        	jmp	return_false
                                                                      logical_number:
00007C3A: 59 5B 58 5A 58                                        	pop	ecx ebx eax edx eax
00007C3F: 08 DB                                                 	or	bl,bl
00007C41: 75 05                                                 	jnz	invalid_logical_number
00007C43: 66 09 C9                                              	or	cx,cx
00007C46: 74 05                                                 	jz	logical_number_ok
                                                                      invalid_logical_number:
00007C48: E8 D5 F6 FF FF                                        	call	recoverable_misuse
                                                                      logical_number_ok:
00007C4D: 84 FF                                                 	test	bh,bh
00007C4F: 0F 85 15 01 00 00                                     	jnz	return_true
00007C55: 09 D0                                                 	or	eax,edx
00007C57: 0F 85 0D 01 00 00                                     	jnz	return_true
00007C5D: E9 03 01 00 00                                        	jmp	return_false
                                                                      check_for_earlier_defined:
00007C62: 80 CF FF                                              	or	bh,-1
00007C65: EB 02                                                 	jmp	check_if_expression_defined
                                                                      check_for_defined:
00007C67: 30 FF                                                 	xor	bh,bh
                                                                      check_if_expression_defined:
00007C69: 80 CB FF                                              	or	bl,-1
00007C6C: 66 AD                                                 	lods	word [esi]
00007C6E: 80 FC 28                                              	cmp	ah,'('
00007C71: 0F 85 21 8D FF FF                                     	jne	invalid_expression
                                                                      check_expression:
00007C77: AC                                                    	lods	byte [esi]
00007C78: 08 C0                                                 	or	al,al
00007C7A: 74 33                                                 	jz	defined_string
00007C7C: 3C 2E                                                 	cmp	al,'.'
00007C7E: 74 2A                                                 	je	defined_fp_value
00007C80: 3C 29                                                 	cmp	al,')'
00007C82: 0F 84 93 00 00 00                                     	je	expression_checked
00007C88: 3C 21                                                 	cmp	al,'!'
00007C8A: 0F 84 08 8D FF FF                                     	je	invalid_expression
00007C90: 3C 0F                                                 	cmp	al,0Fh
00007C92: 74 E3                                                 	je	check_expression
00007C94: 3C 10                                                 	cmp	al,10h
00007C96: 74 0F                                                 	je	defined_register
00007C98: 3C 11                                                 	cmp	al,11h
00007C9A: 74 19                                                 	je	check_if_symbol_defined
00007C9C: 3C 80                                                 	cmp	al,80h
00007C9E: 73 D7                                                 	jae	check_expression
00007CA0: 0F B6 C0                                              	movzx	eax,al
00007CA3: 01 C6                                                 	add	esi,eax
00007CA5: EB D0                                                 	jmp	check_expression
                                                                      defined_register:
00007CA7: 46                                                    	inc	esi
00007CA8: EB CD                                                 	jmp	check_expression
                                                                      defined_fp_value:
00007CAA: 83 C6 0D                                              	add	esi,12+1
00007CAD: EB 6C                                                 	jmp	expression_checked
                                                                      defined_string:
00007CAF: AD                                                    	lods	dword [esi]
00007CB0: 01 C6                                                 	add	esi,eax
00007CB2: 46                                                    	inc	esi
00007CB3: EB 66                                                 	jmp	expression_checked
                                                                      check_if_symbol_defined:
00007CB5: AD                                                    	lods	dword [esi]
00007CB6: 83 F8 FF                                              	cmp	eax,-1
00007CB9: 0F 84 D9 8C FF FF                                     	je	invalid_expression
00007CBF: 83 F8 0F                                              	cmp	eax,0Fh
00007CC2: 72 B3                                                 	jb	check_expression
00007CC4: 0F 84 A5 8D FF FF                                     	je	reserved_word_used_as_symbol
00007CCA: 84 FF                                                 	test	bh,bh
00007CCC: 75 25                                                 	jnz	no_prediction
00007CCE: F6 40 08 04                                           	test	byte [eax+8],4
00007CD2: 75 1F                                                 	jnz	no_prediction
00007CD4: F6 40 08 01                                           	test	byte [eax+8],1
00007CD8: 74 32                                                 	jz	symbol_predicted_undefined
00007CDA: 66 8B 0D 5E A1 01 00                                  	mov	cx,[current_pass]
00007CE1: 66 2B 48 10                                           	sub	cx,[eax+16]
00007CE5: 74 90                                                 	jz	check_expression
00007CE7: 66 83 F9 01                                           	cmp	cx,1
00007CEB: 77 1F                                                 	ja	symbol_predicted_undefined
00007CED: 80 48 08 C0                                           	or	byte [eax+8],40h+80h
00007CF1: EB 84                                                 	jmp	check_expression
                                                                      no_prediction:
00007CF3: F6 40 08 01                                           	test	byte [eax+8],1
00007CF7: 74 1B                                                 	jz	symbol_undefined
00007CF9: 66 8B 0D 5E A1 01 00                                  	mov	cx,[current_pass]
00007D00: 66 2B 48 10                                           	sub	cx,[eax+16]
00007D04: 0F 84 6D FF FF FF                                     	jz	check_expression
00007D0A: EB 08                                                 	jmp	symbol_undefined
                                                                      symbol_predicted_undefined:
00007D0C: 80 48 08 40                                           	or	byte [eax+8],40h
00007D10: 80 60 08 7F                                           	and	byte [eax+8],not 80h
                                                                      symbol_undefined:
00007D14: 30 DB                                                 	xor	bl,bl
00007D16: E9 5C FF FF FF                                        	jmp	check_expression
                                                                      expression_checked:
00007D1B: 88 D8                                                 	mov	al,bl
00007D1D: EB 6E                                                 	jmp	logical_value_ok
                                                                      check_for_used:
00007D1F: 66 AD                                                 	lods	word [esi]
00007D21: 80 FC 02                                              	cmp	ah,2
00007D24: 0F 85 6E 8C FF FF                                     	jne	invalid_expression
00007D2A: AD                                                    	lods	dword [esi]
00007D2B: 83 F8 0F                                              	cmp	eax,0Fh
00007D2E: 0F 82 26 8D FF FF                                     	jb	invalid_use_of_symbol
00007D34: 0F 84 35 8D FF FF                                     	je	reserved_word_used_as_symbol
00007D3A: 46                                                    	inc	esi
00007D3B: F6 40 08 08                                           	test	byte [eax+8],8
00007D3F: 74 19                                                 	jz	not_used
00007D41: 66 8B 0D 5E A1 01 00                                  	mov	cx,[current_pass]
00007D48: 66 2B 48 12                                           	sub	cx,[eax+18]
00007D4C: 74 1C                                                 	jz	return_true
00007D4E: 66 83 F9 01                                           	cmp	cx,1
00007D52: 77 06                                                 	ja	not_used
00007D54: 80 48 08 30                                           	or	byte [eax+8],10h+20h
00007D58: EB 10                                                 	jmp	return_true
                                                                      not_used:
00007D5A: 80 48 08 10                                           	or	byte [eax+8],10h
00007D5E: 80 60 08 DF                                           	and	byte [eax+8],not 20h
00007D62: EB 01                                                 	jmp	return_false
                                                                      given_false:
00007D64: 46                                                    	inc	esi
                                                                      return_false:
00007D65: 30 C0                                                 	xor	al,al
00007D67: EB 24                                                 	jmp	logical_value_ok
                                                                      given_true:
00007D69: 46                                                    	inc	esi
                                                                      return_true:
00007D6A: 0C FF                                                 	or	al,-1
00007D6C: EB 1F                                                 	jmp	logical_value_ok
                                                                      logical_expression:
00007D6E: AC                                                    	lods	byte [esi]
00007D6F: 8A 15 C7 A2 01 00                                     	mov	dl,[logical_value_wrapping]
00007D75: 52                                                    	push	edx
00007D76: E8 ED FB FF FF                                        	call	calculate_embedded_logical_expression
00007D7B: 5A                                                    	pop	edx
00007D7C: 88 15 C7 A2 01 00                                     	mov	[logical_value_wrapping],dl
00007D82: 50                                                    	push	eax
00007D83: AC                                                    	lods	byte [esi]
00007D84: 3C 92                                                 	cmp	al,92h
00007D86: 0F 85 0C 8C FF FF                                     	jne	invalid_expression
00007D8C: 58                                                    	pop	eax
                                                                      logical_value_ok:
00007D8D: 5B                                                    	pop	ebx
00007D8E: 30 D8                                                 	xor	al,bl
00007D90: C3                                                    	ret
                                                                
                                                                skip_symbol:
00007D91: AC                                                    	lods	byte [esi]
00007D92: 08 C0                                                 	or	al,al
00007D94: 74 7C                                                 	jz	nothing_to_skip
00007D96: 3C 0F                                                 	cmp	al,0Fh
00007D98: 74 78                                                 	je	nothing_to_skip
00007D9A: 3C 01                                                 	cmp	al,1
00007D9C: 74 1D                                                 	je	skip_instruction
00007D9E: 3C 02                                                 	cmp	al,2
00007DA0: 74 16                                                 	je	skip_label
00007DA2: 3C 03                                                 	cmp	al,3
00007DA4: 74 12                                                 	je	skip_label
00007DA6: 3C 04                                                 	cmp	al,4
00007DA8: 74 17                                                 	je	skip_special_label
00007DAA: 3C 20                                                 	cmp	al,20h
00007DAC: 72 10                                                 	jb	skip_assembler_symbol
00007DAE: 3C 28                                                 	cmp	al,'('
00007DB0: 74 23                                                 	je	skip_expression
00007DB2: 3C 5B                                                 	cmp	al,'['
00007DB4: 74 10                                                 	je	skip_address
                                                                      skip_done:
00007DB6: F8                                                    	clc
00007DB7: C3                                                    	ret
                                                                      skip_label:
00007DB8: 83 C6 02                                              	add	esi,2
                                                                      skip_instruction:
00007DBB: 83 C6 02                                              	add	esi,2
                                                                      skip_assembler_symbol:
00007DBE: 46                                                    	inc	esi
00007DBF: EB F5                                                 	jmp	skip_done
                                                                      skip_special_label:
00007DC1: 83 C6 04                                              	add	esi,4
00007DC4: EB F0                                                 	jmp	skip_done
                                                                      skip_address:
00007DC6: 8A 06                                                 	mov	al,[esi]
00007DC8: 24 F0                                                 	and	al,11110000b
00007DCA: 3C 60                                                 	cmp	al,60h
00007DCC: 72 07                                                 	jb	skip_expression
00007DCE: 3C 70                                                 	cmp	al,70h
00007DD0: 77 03                                                 	ja	skip_expression
00007DD2: 46                                                    	inc	esi
00007DD3: EB F1                                                 	jmp	skip_address
                                                                      skip_expression:
00007DD5: AC                                                    	lods	byte [esi]
00007DD6: 08 C0                                                 	or	al,al
00007DD8: 74 32                                                 	jz	skip_string
00007DDA: 3C 2E                                                 	cmp	al,'.'
00007DDC: 74 29                                                 	je	skip_fp_value
00007DDE: 3C 29                                                 	cmp	al,')'
00007DE0: 74 D4                                                 	je	skip_done
00007DE2: 3C 5D                                                 	cmp	al,']'
00007DE4: 74 D0                                                 	je	skip_done
00007DE6: 3C 21                                                 	cmp	al,'!'
00007DE8: 74 EB                                                 	je	skip_expression
00007DEA: 3C 0F                                                 	cmp	al,0Fh
00007DEC: 74 E7                                                 	je	skip_expression
00007DEE: 3C 10                                                 	cmp	al,10h
00007DF0: 74 12                                                 	je	skip_register
00007DF2: 3C 11                                                 	cmp	al,11h
00007DF4: 74 0B                                                 	je	skip_label_value
00007DF6: 3C 80                                                 	cmp	al,80h
00007DF8: 73 DB                                                 	jae	skip_expression
00007DFA: 0F B6 C0                                              	movzx	eax,al
00007DFD: 01 C6                                                 	add	esi,eax
00007DFF: EB D4                                                 	jmp	skip_expression
                                                                      skip_label_value:
00007E01: 83 C6 03                                              	add	esi,3
                                                                      skip_register:
00007E04: 46                                                    	inc	esi
00007E05: EB CE                                                 	jmp	skip_expression
                                                                      skip_fp_value:
00007E07: 83 C6 0C                                              	add	esi,12
00007E0A: EB AA                                                 	jmp	skip_done
                                                                      skip_string:
00007E0C: AD                                                    	lods	dword [esi]
00007E0D: 01 C6                                                 	add	esi,eax
00007E0F: 46                                                    	inc	esi
00007E10: EB A4                                                 	jmp	skip_done
                                                                      nothing_to_skip:
00007E12: 4E                                                    	dec	esi
00007E13: F9                                                    	stc
00007E14: C3                                                    	ret
                                                                
                                                                expand_path:
00007E15: AC                                                    	lods	byte [esi]
00007E16: 3C 25                                                 	cmp	al,'%'
00007E18: 74 12                                                 	je	environment_variable
00007E1A: AA                                                    	stos	byte [edi]
00007E1B: 08 C0                                                 	or	al,al
00007E1D: 75 F6                                                 	jnz	expand_path
00007E1F: 3B 3D 3C A1 01 00                                     	cmp	edi,[memory_end]
00007E25: 0F 87 71 8A FF FF                                     	ja	out_of_memory
00007E2B: C3                                                    	ret
                                                                      environment_variable:
00007E2C: 89 F3                                                 	mov	ebx,esi
                                                                      find_variable_end:
00007E2E: AC                                                    	lods	byte [esi]
00007E2F: 08 C0                                                 	or	al,al
00007E31: 74 17                                                 	jz	not_environment_variable
00007E33: 3C 25                                                 	cmp	al,'%'
00007E35: 75 F7                                                 	jne	find_variable_end
00007E37: C6 46 FF 00                                           	mov	byte [esi-1],0
00007E3B: 56                                                    	push	esi
00007E3C: 89 DE                                                 	mov	esi,ebx
00007E3E: E8 EA 84 FF FF                                        	call	get_environment_variable
00007E43: 5E                                                    	pop	esi
00007E44: C6 46 FF 25                                           	mov	byte [esi-1],'%'
00007E48: EB CB                                                 	jmp	expand_path
                                                                      not_environment_variable:
00007E4A: B0 25                                                 	mov	al,'%'
00007E4C: AA                                                    	stos	byte [edi]
00007E4D: 89 DE                                                 	mov	esi,ebx
00007E4F: EB C4                                                 	jmp	expand_path
                                                                get_include_directory:
00007E51: AC                                                    	lods	byte [esi]
00007E52: 3C 3B                                                 	cmp	al,';'
00007E54: 74 07                                                 	je	include_directory_ok
00007E56: AA                                                    	stos	byte [edi]
00007E57: 08 C0                                                 	or	al,al
00007E59: 75 F6                                                 	jnz	get_include_directory
00007E5B: 4E                                                    	dec	esi
00007E5C: 4F                                                    	dec	edi
                                                                      include_directory_ok:
00007E5D: 80 7F FF 2F                                           	cmp	byte [edi-1],'/'
00007E61: 74 09                                                 	je	path_separator_ok
00007E63: 80 7F FF 5C                                           	cmp	byte [edi-1],'\'
00007E67: 74 03                                                 	je	path_separator_ok
00007E69: B0 2F                                                 	mov	al,'/'
00007E6B: AA                                                    	stos	byte [edi]
                                                                      path_separator_ok:
00007E6C: C3                                                    	ret
                                                                
                                                                include '..\formats.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                formatter:
00007E6D: 89 3D FC A1 01 00                                     	mov	[current_offset],edi
00007E73: 83 3D 54 A1 01 00 00                                  	cmp	[output_file],0
00007E7A: 0F 85 34 01 00 00                                     	jne	output_path_ok
00007E80: 8B 35 50 A1 01 00                                     	mov	esi,[input_file]
00007E86: 8B 3D 64 A1 01 00                                     	mov	edi,[free_additional_memory]
                                                                      duplicate_output_path:
00007E8C: AC                                                    	lods	byte [esi]
00007E8D: 3B 3D F4 A1 01 00                                     	cmp	edi,[structures_buffer]
00007E93: 0F 83 03 8A FF FF                                     	jae	out_of_memory
00007E99: AA                                                    	stos	byte [edi]
00007E9A: 08 C0                                                 	or	al,al
00007E9C: 75 EE                                                 	jnz	duplicate_output_path
00007E9E: 4F                                                    	dec	edi
00007E9F: 89 F8                                                 	mov	eax,edi
                                                                      find_extension:
00007EA1: 48                                                    	dec	eax
00007EA2: 3B 05 64 A1 01 00                                     	cmp	eax,[free_additional_memory]
00007EA8: 72 11                                                 	jb	extension_found
00007EAA: 80 38 5C                                              	cmp	byte [eax],'\'
00007EAD: 74 0C                                                 	je	extension_found
00007EAF: 80 38 2F                                              	cmp	byte [eax],'/'
00007EB2: 74 07                                                 	je	extension_found
00007EB4: 80 38 2E                                              	cmp	byte [eax],'.'
00007EB7: 75 E8                                                 	jne	find_extension
00007EB9: 89 C7                                                 	mov	edi,eax
                                                                      extension_found:
00007EBB: 8D 47 09                                              	lea	eax,[edi+9]
00007EBE: 3B 05 F4 A1 01 00                                     	cmp	eax,[structures_buffer]
00007EC4: 0F 83 D2 89 FF FF                                     	jae	out_of_memory
00007ECA: 83 3D A0 A2 01 00 00                                  	cmp	[file_extension],0
00007ED1: 0F 85 AA 00 00 00                                     	jne	extension_specified
00007ED7: A0 C9 A2 01 00                                        	mov	al,[output_format]
00007EDC: 3C 02                                                 	cmp	al,2
00007EDE: 74 71                                                 	je	exe_extension
00007EE0: 72 3F                                                 	jb	bin_extension
00007EE2: 3C 04                                                 	cmp	al,4
00007EE4: 74 51                                                 	je	obj_extension
00007EE6: 3C 05                                                 	cmp	al,5
00007EE8: 74 54                                                 	je	o_extension
00007EEA: 3C 03                                                 	cmp	al,3
00007EEC: 75 5F                                                 	jne	no_extension
00007EEE: 66 83 3D 62 A2 01 00 01                               	cmp	[subsystem],1
00007EF6: 74 1B                                                 	je	sys_extension
00007EF8: 66 83 3D 62 A2 01 00 0A                               	cmp	[subsystem],10
00007F00: 73 18                                                 	jae	efi_extension
00007F02: 0F BA 25 40 A2 01 00 08                               	bt	[format_flags],8
00007F0A: 73 45                                                 	jnc	exe_extension
00007F0C: B8 2E 64 6C 6C                                        	mov	eax,'.dll'
00007F11: EB 43                                                 	jmp	make_extension
                                                                      sys_extension:
00007F13: B8 2E 73 79 73                                        	mov	eax,'.sys'
00007F18: EB 3C                                                 	jmp	make_extension
                                                                      efi_extension:
00007F1A: B8 2E 65 66 69                                        	mov	eax,'.efi'
00007F1F: EB 35                                                 	jmp	make_extension
                                                                      bin_extension:
00007F21: B8 2E 62 69 6E                                        	mov	eax,'.bin'
00007F26: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
00007F2E: 73 26                                                 	jnc	make_extension
00007F30: B8 2E 63 6F 6D                                        	mov	eax,'.com'
00007F35: EB 1F                                                 	jmp	make_extension
                                                                      obj_extension:
00007F37: B8 2E 6F 62 6A                                        	mov	eax,'.obj'
00007F3C: EB 18                                                 	jmp	make_extension
                                                                      o_extension:
00007F3E: B8 2E 6F 00 00                                        	mov	eax,'.o'
00007F43: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
00007F4B: 73 09                                                 	jnc	make_extension
                                                                      no_extension:
00007F4D: 31 C0                                                 	xor	eax,eax
00007F4F: EB 05                                                 	jmp	make_extension
                                                                      exe_extension:
00007F51: B8 2E 65 78 65                                        	mov	eax,'.exe'
                                                                      make_extension:
00007F56: 87 07                                                 	xchg	eax,[edi]
00007F58: AF                                                    	scas	dword [edi]
00007F59: C6 07 00                                              	mov	byte [edi],0
00007F5C: AE                                                    	scas	byte [edi]
00007F5D: 89 FE                                                 	mov	esi,edi
00007F5F: AB                                                    	stos	dword [edi]
00007F60: 83 EF 09                                              	sub	edi,9
00007F63: 31 C0                                                 	xor	eax,eax
00007F65: BB D3 A2 01 00                                        	mov	ebx,characters
                                                                      adapt_case:
00007F6A: 8A 06                                                 	mov	al,[esi]
00007F6C: 08 C0                                                 	or	al,al
00007F6E: 74 09                                                 	jz	adapt_next
00007F70: D7                                                    	xlat	byte [ebx]
00007F71: 3A 06                                                 	cmp	al,[esi]
00007F73: 74 03                                                 	je	adapt_ok
00007F75: 80 2F 20                                              	sub	byte [edi],20h
                                                                      adapt_ok:
00007F78: 46                                                    	inc	esi
                                                                      adapt_next:
00007F79: 47                                                    	inc	edi
00007F7A: 80 3F 00                                              	cmp	byte [edi],0
00007F7D: 75 EB                                                 	jne	adapt_case
00007F7F: EB 10                                                 	jmp	extension_ok
                                                                      extension_specified:
00007F81: B0 2E                                                 	mov	al,'.'
00007F83: AA                                                    	stos	byte [edi]
00007F84: 8B 35 A0 A2 01 00                                     	mov	esi,[file_extension]
                                                                      copy_extension:
00007F8A: AC                                                    	lods	byte [esi]
00007F8B: AA                                                    	stos	byte [edi]
00007F8C: 84 C0                                                 	test	al,al
00007F8E: 75 FA                                                 	jnz	copy_extension
00007F90: 4F                                                    	dec	edi
                                                                      extension_ok:
00007F91: 89 FE                                                 	mov	esi,edi
00007F93: 8D 4E 01                                              	lea	ecx,[esi+1]
00007F96: 2B 0D 64 A1 01 00                                     	sub	ecx,[free_additional_memory]
00007F9C: 8B 3D F4 A1 01 00                                     	mov	edi,[structures_buffer]
00007FA2: 4F                                                    	dec	edi
00007FA3: FD                                                    	std
00007FA4: F3 A4                                                 	rep	movs byte [edi],[esi]
00007FA6: FC                                                    	cld
00007FA7: 47                                                    	inc	edi
00007FA8: 89 3D F4 A1 01 00                                     	mov	[structures_buffer],edi
00007FAE: 89 3D 54 A1 01 00                                     	mov	[output_file],edi
                                                                      output_path_ok:
00007FB4: 83 3D 58 A1 01 00 00                                  	cmp	[symbols_file],0
00007FBB: 74 4C                                                 	je	labels_table_ok
00007FBD: 8B 0D 3C A1 01 00                                     	mov	ecx,[memory_end]
00007FC3: 2B 0D C0 A1 01 00                                     	sub	ecx,[labels_list]
00007FC9: 8B 3D F0 A1 01 00                                     	mov	edi,[tagged_blocks]
00007FCF: 83 EF 08                                              	sub	edi,8
00007FD2: 89 0F                                                 	mov	[edi],ecx
00007FD4: 83 4F 04 FF                                           	or	dword [edi+4],-1
00007FD8: 29 CF                                                 	sub	edi,ecx
00007FDA: 3B 3D FC A1 01 00                                     	cmp	edi,[current_offset]
00007FE0: 0F 86 B6 88 FF FF                                     	jbe	out_of_memory
00007FE6: 89 3D F0 A1 01 00                                     	mov	[tagged_blocks],edi
00007FEC: 8B 35 3C A1 01 00                                     	mov	esi,[memory_end]
                                                                      copy_labels:
00007FF2: 83 EE 20                                              	sub	esi,32
00007FF5: 3B 35 C0 A1 01 00                                     	cmp	esi,[labels_list]
00007FFB: 72 0C                                                 	jb	labels_table_ok
00007FFD: B9 08 00 00 00                                        	mov	ecx,32 shr 2
00008002: F3 A5                                                 	rep	movs dword [edi],[esi]
00008004: 83 EE 20                                              	sub	esi,32
00008007: EB E9                                                 	jmp	copy_labels
                                                                      labels_table_ok:
00008009: 8B 3D FC A1 01 00                                     	mov	edi,[current_offset]
0000800F: 80 3D C9 A2 01 00 04                                  	cmp	[output_format],4
00008016: 0F 84 D1 1E 00 00                                     	je	coff_formatter
0000801C: 80 3D C9 A2 01 00 05                                  	cmp	[output_format],5
00008023: 75 0E                                                 	jne	common_formatter
00008025: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
0000802D: 0F 83 51 26 00 00                                     	jnc	elf_formatter
                                                                      common_formatter:
00008033: 89 F8                                                 	mov	eax,edi
00008035: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
0000803B: A3 74 A1 01 00                                        	mov	[real_code_size],eax
00008040: 3B 3D D8 A1 01 00                                     	cmp	edi,[undefined_data_end]
00008046: 75 06                                                 	jne	calculate_code_size
00008048: 8B 3D D4 A1 01 00                                     	mov	edi,[undefined_data_start]
                                                                      calculate_code_size:
0000804E: 89 3D FC A1 01 00                                     	mov	[current_offset],edi
00008054: 2B 3D 6C A1 01 00                                     	sub	edi,[code_start]
0000805A: 89 3D 70 A1 01 00                                     	mov	[code_size],edi
00008060: 83 25 78 A1 01 00 00                                  	and	[written_size],0
00008067: 8B 15 54 A1 01 00                                     	mov	edx,[output_file]
0000806D: E8 32 83 FF FF                                        	call	create
00008072: 0F 82 42 88 FF FF                                     	jc	write_failed
00008078: 80 3D C9 A2 01 00 03                                  	cmp	[output_format],3
0000807F: 75 19                                                 	jne	stub_written
00008081: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
00008087: 8B 0D 54 A2 01 00                                     	mov	ecx,[stub_size]
0000808D: 29 CA                                                 	sub	edx,ecx
0000808F: 01 0D 78 A1 01 00                                     	add	[written_size],ecx
00008095: E8 40 83 FF FF                                        	call	write
                                                                      stub_written:
0000809A: 80 3D C9 A2 01 00 02                                  	cmp	[output_format],2
000080A1: 75 05                                                 	jne	write_output
000080A3: E8 10 06 00 00                                        	call	write_mz_header
                                                                      write_output:
000080A8: E8 13 00 00 00                                        	call	write_code
                                                                      output_written:
000080AD: E8 0E 83 FF FF                                        	call	close
000080B2: 83 3D 58 A1 01 00 00                                  	cmp	[symbols_file],0
000080B9: 0F 85 1E 8A FF FF                                     	jne	dump_symbols
000080BF: C3                                                    	ret
                                                                      write_code:
000080C0: A1 78 A1 01 00                                        	mov	eax,[written_size]
000080C5: A3 7C A1 01 00                                        	mov	[headers_size],eax
000080CA: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
000080D0: 8B 0D 70 A1 01 00                                     	mov	ecx,[code_size]
000080D6: 01 0D 78 A1 01 00                                     	add	[written_size],ecx
000080DC: 8D 04 0A                                              	lea	eax,[edx+ecx]
000080DF: E8 F6 82 FF FF                                        	call	write
000080E4: 0F 82 D0 87 FF FF                                     	jc	write_failed
000080EA: C3                                                    	ret
                                                                format_directive:
000080EB: 3B 3D 6C A1 01 00                                     	cmp	edi,[code_start]
000080F1: 0F 85 94 89 FF FF                                     	jne	unexpected_instruction
000080F7: 8B 2D D0 A1 01 00                                     	mov	ebp,[addressing_space]
000080FD: 3E F6 45 0A 01                                        	test	byte [ds:ebp+0Ah],1
00008102: 0F 85 83 89 FF FF                                     	jnz	unexpected_instruction
00008108: 80 3D C9 A2 01 00 00                                  	cmp	[output_format],0
0000810F: 0F 85 76 89 FF FF                                     	jne	unexpected_instruction
00008115: AC                                                    	lods	byte [esi]
00008116: 3C 1C                                                 	cmp	al,1Ch
00008118: 74 65                                                 	je	format_prefix
0000811A: 3C 18                                                 	cmp	al,18h
0000811C: 0F 85 08 88 FF FF                                     	jne	invalid_argument
00008122: AC                                                    	lods	byte [esi]
                                                                      select_format:
00008123: 88 C2                                                 	mov	dl,al
00008125: C0 E8 04                                              	shr	al,4
00008128: A2 C9 A2 01 00                                        	mov	[output_format],al
0000812D: 83 E2 0F                                              	and	edx,0Fh
00008130: 09 15 40 A2 01 00                                     	or	[format_flags],edx
00008136: 3C 02                                                 	cmp	al,2
00008138: 0F 84 13 03 00 00                                     	je	format_mz
0000813E: 3C 03                                                 	cmp	al,3
00008140: 0F 84 74 08 00 00                                     	je	format_pe
00008146: 3C 04                                                 	cmp	al,4
00008148: 0F 84 BE 1A 00 00                                     	je	format_coff
0000814E: 3C 05                                                 	cmp	al,5
00008150: 0F 84 0B 22 00 00                                     	je	format_elf
                                                                      format_defined:
00008156: 80 3E 86                                              	cmp	byte [esi],86h
00008159: 0F 85 1B CE FF FF                                     	jne	instruction_assembled
0000815F: 66 83 7E 01 28                                        	cmp	word [esi+1],'('
00008164: 0F 85 C0 87 FF FF                                     	jne	invalid_argument
0000816A: 8B 46 03                                              	mov	eax,[esi+3]
0000816D: 83 C6 07                                              	add	esi,3+4
00008170: 89 35 A0 A2 01 00                                     	mov	[file_extension],esi
00008176: 8D 74 06 01                                           	lea	esi,[esi+eax+1]
0000817A: E9 FB CD FF FF                                        	jmp	instruction_assembled
                                                                      format_prefix:
0000817F: AC                                                    	lods	byte [esi]
00008180: 88 C4                                                 	mov	ah,al
00008182: AC                                                    	lods	byte [esi]
00008183: 3C 18                                                 	cmp	al,18h
00008185: 0F 85 9F 87 FF FF                                     	jne	invalid_argument
0000818B: AC                                                    	lods	byte [esi]
0000818C: 89 C2                                                 	mov	edx,eax
0000818E: C0 EA 04                                              	shr	dl,4
00008191: C0 EE 04                                              	shr	dh,4
00008194: 38 F2                                                 	cmp	dl,dh
00008196: 0F 85 8E 87 FF FF                                     	jne	invalid_argument
0000819C: 08 E0                                                 	or	al,ah
0000819E: EB 83                                                 	jmp	select_format
                                                                entry_directive:
000081A0: 0F BA 2D 40 A2 01 00 10                               	bts	[format_flags],10h
000081A8: 0F 82 F2 88 FF FF                                     	jc	setting_already_specified
000081AE: A0 C9 A2 01 00                                        	mov	al,[output_format]
000081B3: 3C 02                                                 	cmp	al,2
000081B5: 0F 84 A4 03 00 00                                     	je	mz_entry
000081BB: 3C 03                                                 	cmp	al,3
000081BD: 0F 84 6B 0F 00 00                                     	je	pe_entry
000081C3: 3C 05                                                 	cmp	al,5
000081C5: 0F 85 69 87 FF FF                                     	jne	illegal_instruction
000081CB: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
000081D3: 0F 82 CC 2C 00 00                                     	jc	elf_entry
000081D9: E9 56 87 FF FF                                        	jmp	illegal_instruction
                                                                stack_directive:
000081DE: 0F BA 2D 40 A2 01 00 11                               	bts	[format_flags],11h
000081E6: 0F 82 B4 88 FF FF                                     	jc	setting_already_specified
000081EC: A0 C9 A2 01 00                                        	mov	al,[output_format]
000081F1: 3C 02                                                 	cmp	al,2
000081F3: 0F 84 E5 03 00 00                                     	je	mz_stack
000081F9: 3C 03                                                 	cmp	al,3
000081FB: 0F 84 C4 0F 00 00                                     	je	pe_stack
00008201: E9 2E 87 FF FF                                        	jmp	illegal_instruction
                                                                heap_directive:
00008206: 0F BA 2D 40 A2 01 00 12                               	bts	[format_flags],12h
0000820E: 0F 82 8C 88 FF FF                                     	jc	setting_already_specified
00008214: A0 C9 A2 01 00                                        	mov	al,[output_format]
00008219: 3C 02                                                 	cmp	al,2
0000821B: 0F 84 49 04 00 00                                     	je	mz_heap
00008221: 3C 03                                                 	cmp	al,3
00008223: 0F 84 B1 10 00 00                                     	je	pe_heap
00008229: E9 06 87 FF FF                                        	jmp	illegal_instruction
                                                                segment_directive:
0000822E: A0 C9 A2 01 00                                        	mov	al,[output_format]
00008233: 3C 02                                                 	cmp	al,2
00008235: 0F 84 98 02 00 00                                     	je	mz_segment
0000823B: 3C 05                                                 	cmp	al,5
0000823D: 0F 84 A9 2C 00 00                                     	je	elf_segment
00008243: E9 EC 86 FF FF                                        	jmp	illegal_instruction
                                                                section_directive:
00008248: A0 C9 A2 01 00                                        	mov	al,[output_format]
0000824D: 3C 03                                                 	cmp	al,3
0000824F: 0F 84 A4 0B 00 00                                     	je	pe_section
00008255: 3C 04                                                 	cmp	al,4
00008257: 0F 84 34 1A 00 00                                     	je	coff_section
0000825D: 3C 05                                                 	cmp	al,5
0000825F: 0F 84 40 22 00 00                                     	je	elf_section
00008265: E9 CA 86 FF FF                                        	jmp	illegal_instruction
                                                                public_directive:
0000826A: A0 C9 A2 01 00                                        	mov	al,[output_format]
0000826F: 3C 04                                                 	cmp	al,4
00008271: 74 16                                                 	je	public_allowed
00008273: 3C 05                                                 	cmp	al,5
00008275: 0F 85 B9 86 FF FF                                     	jne	illegal_instruction
0000827B: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
00008283: 0F 82 AB 86 FF FF                                     	jc	illegal_instruction
                                                                      public_allowed:
00008289: C6 05 AF A2 01 00 C0                                  	mov	[base_code],0C0h
00008290: AC                                                    	lods	byte [esi]
00008291: 3C 02                                                 	cmp	al,2
00008293: 74 1A                                                 	je	public_label
00008295: 3C 1D                                                 	cmp	al,1Dh
00008297: 0F 85 8D 86 FF FF                                     	jne	invalid_argument
0000829D: AC                                                    	lods	byte [esi]
0000829E: 24 07                                                 	and	al,7
000082A0: 00 05 AF A2 01 00                                     	add	[base_code],al
000082A6: AC                                                    	lods	byte [esi]
000082A7: 3C 02                                                 	cmp	al,2
000082A9: 0F 85 7B 86 FF FF                                     	jne	invalid_argument
                                                                      public_label:
000082AF: AD                                                    	lods	dword [esi]
000082B0: 83 F8 0F                                              	cmp	eax,0Fh
000082B3: 0F 82 A1 87 FF FF                                     	jb	invalid_use_of_symbol
000082B9: 0F 84 B0 87 FF FF                                     	je	reserved_word_used_as_symbol
000082BF: 46                                                    	inc	esi
000082C0: 66 8B 15 5E A1 01 00                                  	mov	dx,[current_pass]
000082C7: 66 89 50 12                                           	mov	[eax+18],dx
000082CB: 80 48 08 08                                           	or	byte [eax+8],8
000082CF: 89 C3                                                 	mov	ebx,eax
000082D1: E8 81 ED FF FF                                        	call	store_label_reference
000082D6: 89 D8                                                 	mov	eax,ebx
000082D8: 8B 1D 64 A1 01 00                                     	mov	ebx,[free_additional_memory]
000082DE: 8D 53 10                                              	lea	edx,[ebx+10h]
000082E1: 3B 15 F4 A1 01 00                                     	cmp	edx,[structures_buffer]
000082E7: 0F 83 AF 85 FF FF                                     	jae	out_of_memory
000082ED: 89 15 64 A1 01 00                                     	mov	[free_additional_memory],edx
000082F3: 89 43 08                                              	mov	[ebx+8],eax
000082F6: A1 80 A1 01 00                                        	mov	eax,[current_line]
000082FB: 89 43 0C                                              	mov	[ebx+0Ch],eax
000082FE: AC                                                    	lods	byte [esi]
000082FF: 3C 86                                                 	cmp	al,86h
00008301: 0F 85 23 86 FF FF                                     	jne	invalid_argument
00008307: 66 AD                                                 	lods	word [esi]
00008309: 66 83 F8 28                                           	cmp	ax,'('
0000830D: 0F 85 17 86 FF FF                                     	jne	invalid_argument
00008313: 89 73 04                                              	mov	[ebx+4],esi
00008316: AD                                                    	lods	dword [esi]
00008317: 8D 74 06 01                                           	lea	esi,[esi+eax+1]
0000831B: A0 AF A2 01 00                                        	mov	al,[base_code]
00008320: 88 03                                                 	mov	[ebx],al
00008322: E9 53 CC FF FF                                        	jmp	instruction_assembled
                                                                extrn_directive:
00008327: A0 C9 A2 01 00                                        	mov	al,[output_format]
0000832C: 3C 04                                                 	cmp	al,4
0000832E: 74 16                                                 	je	extrn_allowed
00008330: 3C 05                                                 	cmp	al,5
00008332: 0F 85 FC 85 FF FF                                     	jne	illegal_instruction
00008338: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
00008340: 0F 82 EE 85 FF FF                                     	jc	illegal_instruction
                                                                      extrn_allowed:
00008346: 66 AD                                                 	lods	word [esi]
00008348: 66 83 F8 28                                           	cmp	ax,'('
0000834C: 0F 85 D8 85 FF FF                                     	jne	invalid_argument
00008352: 89 F3                                                 	mov	ebx,esi
00008354: AD                                                    	lods	dword [esi]
00008355: 8D 74 06 01                                           	lea	esi,[esi+eax+1]
00008359: 8B 15 64 A1 01 00                                     	mov	edx,[free_additional_memory]
0000835F: 8D 42 0C                                              	lea	eax,[edx+0Ch]
00008362: 3B 05 F4 A1 01 00                                     	cmp	eax,[structures_buffer]
00008368: 0F 83 2E 85 FF FF                                     	jae	out_of_memory
0000836E: A3 64 A1 01 00                                        	mov	[free_additional_memory],eax
00008373: C6 02 80                                              	mov	byte [edx],80h
00008376: 89 5A 04                                              	mov	[edx+4],ebx
00008379: AC                                                    	lods	byte [esi]
0000837A: 3C 86                                                 	cmp	al,86h
0000837C: 0F 85 A8 85 FF FF                                     	jne	invalid_argument
00008382: AC                                                    	lods	byte [esi]
00008383: 3C 02                                                 	cmp	al,2
00008385: 0F 85 9F 85 FF FF                                     	jne	invalid_argument
0000838B: AD                                                    	lods	dword [esi]
0000838C: 83 F8 0F                                              	cmp	eax,0Fh
0000838F: 0F 82 C5 86 FF FF                                     	jb	invalid_use_of_symbol
00008395: 0F 84 D4 86 FF FF                                     	je	reserved_word_used_as_symbol
0000839B: 46                                                    	inc	esi
0000839C: 89 C3                                                 	mov	ebx,eax
0000839E: 30 E4                                                 	xor	ah,ah
000083A0: AC                                                    	lods	byte [esi]
000083A1: 3C 3A                                                 	cmp	al,':'
000083A3: 74 05                                                 	je	get_extrn_size
000083A5: 4E                                                    	dec	esi
000083A6: 3C 11                                                 	cmp	al,11h
000083A8: 75 0A                                                 	jne	extrn_size_ok
                                                                      get_extrn_size:
000083AA: 66 AD                                                 	lods	word [esi]
000083AC: 3C 11                                                 	cmp	al,11h
000083AE: 0F 85 76 85 FF FF                                     	jne	invalid_argument
                                                                      extrn_size_ok:
000083B4: 89 15 34 A2 01 00                                     	mov	[address_symbol],edx
000083BA: 88 25 BA A2 01 00                                     	mov	[label_size],ah
000083C0: 0F B6 CC                                              	movzx	ecx,ah
000083C3: 89 4A 08                                              	mov	[edx+8],ecx
000083C6: 31 C0                                                 	xor	eax,eax
000083C8: 31 D2                                                 	xor	edx,edx
000083CA: 31 ED                                                 	xor	ebp,ebp
000083CC: C6 05 C4 A2 01 00 00                                  	mov	[address_sign],0
000083D3: B5 02                                                 	mov	ch,2
000083D5: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
000083DF: 0F 84 E9 CC FF FF                                     	jz	make_free_label
000083E5: B5 04                                                 	mov	ch,4
000083E7: E9 E2 CC FF FF                                        	jmp	make_free_label
                                                                mark_relocation:
000083EC: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
000083F3: 74 3D                                                 	je	relocation_ok
000083F5: 8B 2D D0 A1 01 00                                     	mov	ebp,[addressing_space]
000083FB: 3E F6 45 0A 01                                        	test	byte [ds:ebp+0Ah],1
00008400: 75 30                                                 	jnz	relocation_ok
00008402: 80 3D C9 A2 01 00 02                                  	cmp	[output_format],2
00008409: 74 77                                                 	je	mark_mz_relocation
0000840B: 80 3D C9 A2 01 00 03                                  	cmp	[output_format],3
00008412: 0F 84 9B 0F 00 00                                     	je	mark_pe_relocation
00008418: 80 3D C9 A2 01 00 04                                  	cmp	[output_format],4
0000841F: 0F 84 D1 19 00 00                                     	je	mark_coff_relocation
00008425: 80 3D C9 A2 01 00 05                                  	cmp	[output_format],5
0000842C: 0F 84 87 21 00 00                                     	je	mark_elf_relocation
                                                                      relocation_ok:
00008432: C3                                                    	ret
                                                                close_pass:
00008433: A0 C9 A2 01 00                                        	mov	al,[output_format]
00008438: 3C 03                                                 	cmp	al,3
0000843A: 0F 84 C9 16 00 00                                     	je	close_pe
00008440: 3C 04                                                 	cmp	al,4
00008442: 0F 84 8C 1A 00 00                                     	je	close_coff
00008448: 3C 05                                                 	cmp	al,5
0000844A: 0F 84 0D 22 00 00                                     	je	close_elf
00008450: C3                                                    	ret
                                                                
                                                                format_mz:
00008451: 8B 15 40 A1 01 00                                     	mov	edx,[additional_memory]
00008457: 57                                                    	push	edi
00008458: 89 D7                                                 	mov	edi,edx
0000845A: B9 07 00 00 00                                        	mov	ecx,1Ch shr 2
0000845F: 31 C0                                                 	xor	eax,eax
00008461: F3 AB                                                 	rep	stos dword [edi]
00008463: 89 3D 64 A1 01 00                                     	mov	[free_additional_memory],edi
00008469: 5F                                                    	pop	edi
0000846A: 66 C7 42 0C FF FF                                     	mov	word [edx+0Ch],0FFFFh
00008470: 66 C7 42 10 00 10                                     	mov	word [edx+10h],1000h
00008476: C6 05 CA A2 01 00 10                                  	mov	[code_type],16
0000847D: E9 D4 FC FF FF                                        	jmp	format_defined
                                                                mark_mz_relocation:
00008482: 50 53                                                 	push	eax ebx
00008484: 66 FF 05 4C A2 01 00                                  	inc	word [number_of_relocations]
0000848B: 0F 84 3A 84 FF FF                                     	jz	format_limitations_exceeded
00008491: 8B 1D 64 A1 01 00                                     	mov	ebx,[free_additional_memory]
00008497: 89 F8                                                 	mov	eax,edi
00008499: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
0000849F: 66 89 03                                              	mov	[ebx],ax
000084A2: C1 E8 10                                              	shr	eax,16
000084A5: 66 C1 E0 0C                                           	shl	ax,12
000084A9: 66 89 43 02                                           	mov	[ebx+2],ax
000084AD: 66 83 3B FF                                           	cmp	word [ebx],0FFFFh
000084B1: 75 08                                                 	jne	mz_relocation_ok
000084B3: 66 FF 43 02                                           	inc	word [ebx+2]
000084B7: 66 83 2B 10                                           	sub	word [ebx],10h
                                                                      mz_relocation_ok:
000084BB: 83 C3 04                                              	add	ebx,4
000084BE: 3B 1D F4 A1 01 00                                     	cmp	ebx,[structures_buffer]
000084C4: 0F 83 D2 83 FF FF                                     	jae	out_of_memory
000084CA: 89 1D 64 A1 01 00                                     	mov	[free_additional_memory],ebx
000084D0: 5B 58                                                 	pop	ebx eax
000084D2: C3                                                    	ret
                                                                mz_segment:
000084D3: AC                                                    	lods	byte [esi]
000084D4: 3C 02                                                 	cmp	al,2
000084D6: 0F 85 4E 84 FF FF                                     	jne	invalid_argument
000084DC: AD                                                    	lods	dword [esi]
000084DD: 83 F8 0F                                              	cmp	eax,0Fh
000084E0: 0F 82 74 85 FF FF                                     	jb	invalid_use_of_symbol
000084E6: 0F 84 83 85 FF FF                                     	je	reserved_word_used_as_symbol
000084EC: 46                                                    	inc	esi
000084ED: 89 C3                                                 	mov	ebx,eax
000084EF: 89 F8                                                 	mov	eax,edi
000084F1: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
000084F7: B9 0F 00 00 00                                        	mov	ecx,0Fh
000084FC: 83 C0 0F                                              	add	eax,0Fh
000084FF: 83 E0 0F                                              	and	eax,1111b
00008502: 29 C1                                                 	sub	ecx,eax
00008504: 89 FA                                                 	mov	edx,edi
00008506: 31 C0                                                 	xor	eax,eax
00008508: F3 AA                                                 	rep	stos byte [edi]
0000850A: 89 D0                                                 	mov	eax,edx
0000850C: E8 52 D8 FF FF                                        	call	undefined_data
00008511: 53                                                    	push	ebx
00008512: E8 61 C6 FF FF                                        	call	create_addressing_space
00008517: 5B                                                    	pop	ebx
00008518: 89 F8                                                 	mov	eax,edi
0000851A: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
00008520: C1 E8 04                                              	shr	eax,4
00008523: 3D 00 00 01 00                                        	cmp	eax,10000h
00008528: 0F 83 88 84 FF FF                                     	jae	value_out_of_range
0000852E: 89 C2                                                 	mov	edx,eax
00008530: B0 10                                                 	mov	al,16
00008532: 80 3E 13                                              	cmp	byte [esi],13h
00008535: 75 02                                                 	jne	segment_type_ok
00008537: 46                                                    	inc	esi
00008538: AC                                                    	lods	byte [esi]
                                                                      segment_type_ok:
00008539: A2 CA A2 01 00                                        	mov	[code_type],al
0000853E: 89 D0                                                 	mov	eax,edx
00008540: B5 01                                                 	mov	ch,1
00008542: C6 05 C4 A2 01 00 00                                  	mov	[address_sign],0
00008549: 31 D2                                                 	xor	edx,edx
0000854B: 31 ED                                                 	xor	ebp,ebp
0000854D: C6 05 BA A2 01 00 00                                  	mov	[label_size],0
00008554: 89 15 34 A2 01 00                                     	mov	[address_symbol],edx
0000855A: E9 6F CB FF FF                                        	jmp	make_free_label
                                                                mz_entry:
0000855F: AC                                                    	lods	byte [esi]
00008560: 3C 28                                                 	cmp	al,'('
00008562: 0F 85 C2 83 FF FF                                     	jne	invalid_argument
00008568: E8 D5 ED FF FF                                        	call	get_word_value
0000856D: 80 3D C0 A2 01 00 01                                  	cmp	[value_type],1
00008574: 74 05                                                 	je	initial_cs_ok
00008576: E8 43 00 00 00                                        	call	recoverable_invalid_address
                                                                      initial_cs_ok:
0000857B: 8B 15 40 A1 01 00                                     	mov	edx,[additional_memory]
00008581: 66 89 42 16                                           	mov	[edx+16h],ax
00008585: AC                                                    	lods	byte [esi]
00008586: 3C 3A                                                 	cmp	al,':'
00008588: 0F 85 9C 83 FF FF                                     	jne	invalid_argument
0000858E: AC                                                    	lods	byte [esi]
0000858F: 3C 28                                                 	cmp	al,'('
00008591: 0F 85 93 83 FF FF                                     	jne	invalid_argument
00008597: 0F 87 05 84 FF FF                                     	ja	invalid_address
0000859D: E8 A0 ED FF FF                                        	call	get_word_value
000085A2: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
000085A9: 0F 85 AB 84 FF FF                                     	jne	invalid_use_of_symbol
000085AF: 8B 15 40 A1 01 00                                     	mov	edx,[additional_memory]
000085B5: 66 89 42 14                                           	mov	[edx+14h],ax
000085B9: E9 BC C9 FF FF                                        	jmp	instruction_assembled
                                                                      recoverable_invalid_address:
000085BE: 83 3D E8 A1 01 00 00                                  	cmp	[error_line],0
000085C5: 75 16                                                 	jne	ignore_invalid_address
000085C7: FF 35 80 A1 01 00                                     	push	[current_line]
000085CD: 8F 05 E8 A1 01 00                                     	pop	[error_line]
000085D3: C7 05 EC A1 01 00 A2 09 00 00                         	mov	[error],invalid_address
                                                                      ignore_invalid_address:
000085DD: C3                                                    	ret
                                                                mz_stack:
000085DE: AC                                                    	lods	byte [esi]
000085DF: 3C 28                                                 	cmp	al,'('
000085E1: 0F 85 43 83 FF FF                                     	jne	invalid_argument
000085E7: E8 56 ED FF FF                                        	call	get_word_value
000085EC: 80 3E 3A                                              	cmp	byte [esi],':'
000085EF: 74 26                                                 	je	stack_pointer
000085F1: 66 83 F8 10                                           	cmp	ax,10h
000085F5: 0F 82 B1 83 FF FF                                     	jb	invalid_value
000085FB: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
00008602: 0F 85 52 84 FF FF                                     	jne	invalid_use_of_symbol
00008608: 8B 15 40 A1 01 00                                     	mov	edx,[additional_memory]
0000860E: 66 89 42 10                                           	mov	[edx+10h],ax
00008612: E9 63 C9 FF FF                                        	jmp	instruction_assembled
                                                                      stack_pointer:
00008617: 80 3D C0 A2 01 00 01                                  	cmp	[value_type],1
0000861E: 74 05                                                 	je	initial_ss_ok
00008620: E8 99 FF FF FF                                        	call	recoverable_invalid_address
                                                                      initial_ss_ok:
00008625: 8B 15 40 A1 01 00                                     	mov	edx,[additional_memory]
0000862B: 66 89 42 0E                                           	mov	[edx+0Eh],ax
0000862F: AC                                                    	lods	byte [esi]
00008630: 3C 3A                                                 	cmp	al,':'
00008632: 0F 85 F2 82 FF FF                                     	jne	invalid_argument
00008638: AC                                                    	lods	byte [esi]
00008639: 3C 28                                                 	cmp	al,'('
0000863B: 0F 85 E9 82 FF FF                                     	jne	invalid_argument
00008641: E8 FC EC FF FF                                        	call	get_word_value
00008646: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000864D: 0F 85 07 84 FF FF                                     	jne	invalid_use_of_symbol
00008653: 8B 15 40 A1 01 00                                     	mov	edx,[additional_memory]
00008659: 66 89 42 10                                           	mov	[edx+10h],ax
0000865D: 0F BA 2D 40 A2 01 00 04                               	bts	[format_flags],4
00008665: E9 10 C9 FF FF                                        	jmp	instruction_assembled
                                                                mz_heap:
0000866A: 80 3D C9 A2 01 00 02                                  	cmp	[output_format],2
00008671: 0F 85 BD 82 FF FF                                     	jne	illegal_instruction
00008677: AC                                                    	lods	byte [esi]
00008678: E8 B7 86 00 00                                        	call	get_size_operator
0000867D: 80 FC 01                                              	cmp	ah,1
00008680: 0F 84 26 83 FF FF                                     	je	invalid_value
00008686: 80 FC 02                                              	cmp	ah,2
00008689: 0F 87 1D 83 FF FF                                     	ja	invalid_value
0000868F: 3C 28                                                 	cmp	al,'('
00008691: 0F 85 93 82 FF FF                                     	jne	invalid_argument
00008697: E8 A6 EC FF FF                                        	call	get_word_value
0000869C: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
000086A3: 0F 85 B1 83 FF FF                                     	jne	invalid_use_of_symbol
000086A9: 8B 15 40 A1 01 00                                     	mov	edx,[additional_memory]
000086AF: 66 89 42 0C                                           	mov	[edx+0Ch],ax
000086B3: E9 C2 C8 FF FF                                        	jmp	instruction_assembled
                                                                write_mz_header:
000086B8: 8B 15 40 A1 01 00                                     	mov	edx,[additional_memory]
000086BE: 0F BA 25 40 A2 01 00 04                               	bt	[format_flags],4
000086C6: 72 1C                                                 	jc	mz_stack_ok
000086C8: A1 74 A1 01 00                                        	mov	eax,[real_code_size]
000086CD: 48                                                    	dec	eax
000086CE: C1 E8 04                                              	shr	eax,4
000086D1: 40                                                    	inc	eax
000086D2: 66 89 42 0E                                           	mov	[edx+0Eh],ax
000086D6: C1 E0 04                                              	shl	eax,4
000086D9: 0F B7 4A 10                                           	movzx	ecx,word [edx+10h]
000086DD: 01 C8                                                 	add	eax,ecx
000086DF: A3 74 A1 01 00                                        	mov	[real_code_size],eax
                                                                      mz_stack_ok:
000086E4: 8B 3D 64 A1 01 00                                     	mov	edi,[free_additional_memory]
000086EA: A1 4C A2 01 00                                        	mov	eax,[number_of_relocations]
000086EF: C1 E0 02                                              	shl	eax,2
000086F2: 83 C0 1C                                              	add	eax,1Ch
000086F5: 29 C7                                                 	sub	edi,eax
000086F7: 87 3D 64 A1 01 00                                     	xchg	edi,[free_additional_memory]
000086FD: B9 0F 00 00 00                                        	mov	ecx,0Fh
00008702: 83 C0 0F                                              	add	eax,0Fh
00008705: 83 E0 0F                                              	and	eax,1111b
00008708: 29 C1                                                 	sub	ecx,eax
0000870A: 30 C0                                                 	xor	al,al
0000870C: F3 AA                                                 	rep	stos byte [edi]
0000870E: 2B 3D 64 A1 01 00                                     	sub	edi,[free_additional_memory]
00008714: 89 F9                                                 	mov	ecx,edi
00008716: C1 EF 04                                              	shr	edi,4
00008719: 66 C7 02 4D 5A                                        	mov	word [edx],'MZ' 	; signature
0000871E: 66 89 7A 08                                           	mov	[edx+8],di		; header size in paragraphs
00008722: A1 4C A2 01 00                                        	mov	eax,[number_of_relocations]
00008727: 66 89 42 06                                           	mov	[edx+6],ax		; number of relocation entries
0000872B: A1 70 A1 01 00                                        	mov	eax,[code_size]
00008730: 01 C8                                                 	add	eax,ecx
00008732: 89 C6                                                 	mov	esi,eax
00008734: C1 EE 09                                              	shr	esi,9
00008737: 25 FF 01 00 00                                        	and	eax,1FFh
0000873C: 66 46                                                 	inc	si
0000873E: 66 09 C0                                              	or	ax,ax
00008741: 75 02                                                 	jnz	mz_size_ok
00008743: 66 4E                                                 	dec	si
                                                                      mz_size_ok:
00008745: 66 89 42 02                                           	mov	[edx+2],ax		; number of bytes in last page
00008749: 66 89 72 04                                           	mov	[edx+4],si		; number of pages
0000874D: A1 74 A1 01 00                                        	mov	eax,[real_code_size]
00008752: 48                                                    	dec	eax
00008753: C1 E8 04                                              	shr	eax,4
00008756: 40                                                    	inc	eax
00008757: 8B 35 70 A1 01 00                                     	mov	esi,[code_size]
0000875D: 4E                                                    	dec	esi
0000875E: C1 EE 04                                              	shr	esi,4
00008761: 46                                                    	inc	esi
00008762: 29 F0                                                 	sub	eax,esi
00008764: 66 89 42 0A                                           	mov	[edx+0Ah],ax		; minimum memory in addition to code
00008768: 66 01 42 0C                                           	add	[edx+0Ch],ax		; maximum memory in addition to code
0000876C: D6                                                    	salc
0000876D: 88 C4                                                 	mov	ah,al
0000876F: 66 09 42 0C                                           	or	[edx+0Ch],ax
00008773: 66 C7 42 18 1C 00                                     	mov	word [edx+18h],1Ch	; offset of relocation table
00008779: 01 0D 78 A1 01 00                                     	add	[written_size],ecx
0000877F: E8 56 7C FF FF                                        	call	write
00008784: 0F 82 30 81 FF FF                                     	jc	write_failed
0000878A: C3                                                    	ret
                                                                
                                                                make_stub:
0000878B: 89 15 58 A2 01 00                                     	mov	[stub_file],edx
00008791: 09 D2                                                 	or	edx,edx
00008793: 0F 85 91 00 00 00                                     	jnz	stub_from_file
00008799: 56                                                    	push	esi
0000879A: 89 FA                                                 	mov	edx,edi
0000879C: 31 C0                                                 	xor	eax,eax
0000879E: B9 20 00 00 00                                        	mov	ecx,20h
000087A3: F3 AB                                                 	rep	stos dword [edi]
000087A5: B8 80 00 00 00                                        	mov	eax,40h+default_stub_end-default_stub
000087AA: 66 B9 40 01                                           	mov	cx,100h+default_stub_end-default_stub
000087AE: 66 C7 02 4D 5A                                        	mov	word [edx],'MZ'
000087B3: C6 42 04 01                                           	mov	byte [edx+4],1
000087B7: 66 89 42 02                                           	mov	word [edx+2],ax
000087BB: C6 42 08 04                                           	mov	byte [edx+8],4
000087BF: C6 42 0A 10                                           	mov	byte [edx+0Ah],10h
000087C3: 66 C7 42 0C FF FF                                     	mov	word [edx+0Ch],0FFFFh
000087C9: 66 89 4A 10                                           	mov	word [edx+10h],cx
000087CD: 66 89 42 3C                                           	mov	word [edx+3Ch],ax
000087D1: C6 42 18 40                                           	mov	byte [edx+18h],40h
000087D5: 8D 7A 40                                              	lea	edi,[edx+40h]
000087D8: BE EA 87 00 00                                        	mov	esi,default_stub
000087DD: B9 40 00 00 00                                        	mov	ecx,default_stub_end-default_stub
000087E2: F3 A4                                                 	rep	movs byte [edi],[esi]
000087E4: 5E                                                    	pop	esi
000087E5: E9 28 01 00 00                                        	jmp	stub_ok
                                                                      default_stub:
                                                                	use16
000087EA: 0E                                                    	push	cs
000087EB: 1F                                                    	pop	ds
000087EC: BA 0E 00                                              	mov	dx,stub_message-default_stub
000087EF: B4 09                                                 	mov	ah,9
000087F1: CD 21                                                 	int	21h
000087F3: B8 01 4C                                              	mov	ax,4C01h
000087F6: CD 21                                                 	int	21h
000087F8: 54 68 69 73 20 70 72 6F 67 72 61 6D 20 63 61 6E             stub_message db 'This program cannot be run in DOS mode.',0Dh,0Ah,24h
          6E 6F 74 20 62 65 20 72 75 6E 20 69 6E 20 44 4F       
          53 20 6D 6F 64 65 2E 0D 0A 24                         
00008822: 00 00 00 00 00 00 00 00                               	rq	1
                                                                      default_stub_end:
                                                                	use32
                                                                      stub_from_file:
0000882A: 56                                                    	push	esi
0000882B: 89 D6                                                 	mov	esi,edx
0000882D: E8 CC D8 FF FF                                        	call	open_binary_file
00008832: 89 FA                                                 	mov	edx,edi
00008834: B9 1C 00 00 00                                        	mov	ecx,1Ch
00008839: 89 D6                                                 	mov	esi,edx
0000883B: E8 88 7B FF FF                                        	call	read
00008840: 0F 82 CD 00 00 00                                     	jc	binary_stub
00008846: 66 81 3E 4D 5A                                        	cmp	word [esi],'MZ'
0000884B: 0F 85 C2 00 00 00                                     	jne	binary_stub
00008851: 83 C7 1C                                              	add	edi,1Ch
00008854: 0F B7 4E 06                                           	movzx	ecx,word [esi+6]
00008858: 83 C1 03                                              	add	ecx,11b
0000885B: 83 E1 FC                                              	and	ecx,not 11b
0000885E: 83 C1 09                                              	add	ecx,(40h-1Ch) shr 2
00008861: 8D 04 8F                                              	lea	eax,[edi+ecx*4]
00008864: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
0000886A: 0F 83 2C 80 FF FF                                     	jae	out_of_memory
00008870: 31 C0                                                 	xor	eax,eax
00008872: F3 AB                                                 	rep	stos dword [edi]
00008874: BA 40 00 00 00                                        	mov	edx,40h
00008879: 66 87 56 18                                           	xchg	dx,[esi+18h]
0000887D: 30 C0                                                 	xor	al,al
0000887F: E8 68 7B FF FF                                        	call	lseek
00008884: 0F B7 4E 06                                           	movzx	ecx,word [esi+6]
00008888: C1 E1 02                                              	shl	ecx,2
0000888B: 8D 56 40                                              	lea	edx,[esi+40h]
0000888E: E8 35 7B FF FF                                        	call	read
00008893: 89 FA                                                 	mov	edx,edi
00008895: 29 F2                                                 	sub	edx,esi
00008897: C1 EA 04                                              	shr	edx,4
0000889A: 66 87 56 08                                           	xchg	dx,[esi+8]
0000889E: C1 E2 04                                              	shl	edx,4
000088A1: 30 C0                                                 	xor	al,al
000088A3: E8 44 7B FF FF                                        	call	lseek
000088A8: 0F B7 4E 04                                           	movzx	ecx,word [esi+4]
000088AC: 49                                                    	dec	ecx
000088AD: 0F 88 E9 7F FF FF                                     	js	out_of_memory
000088B3: C1 E1 09                                              	shl	ecx,9
000088B6: 0F B7 56 02                                           	movzx	edx,word [esi+2]
000088BA: 85 D2                                                 	test	edx,edx
000088BC: 75 04                                                 	jnz	stub_header_size_ok
000088BE: 66 BA 00 02                                           	mov	dx,200h
                                                                     stub_header_size_ok:
000088C2: 01 D1                                                 	add	ecx,edx
000088C4: 89 FA                                                 	mov	edx,edi
000088C6: 29 C1                                                 	sub	ecx,eax
000088C8: 74 1E                                                 	je	read_stub_code
000088CA: 72 21                                                 	jb	stub_code_ok
000088CC: 51                                                    	push	ecx
000088CD: 49                                                    	dec	ecx
000088CE: C1 E9 03                                              	shr	ecx,3
000088D1: 41                                                    	inc	ecx
000088D2: D1 E1                                                 	shl	ecx,1
000088D4: 8D 04 8F                                              	lea	eax,[edi+ecx*4]
000088D7: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
000088DD: 0F 83 B9 7F FF FF                                     	jae	out_of_memory
000088E3: 31 C0                                                 	xor	eax,eax
000088E5: F3 AB                                                 	rep	stos dword [edi]
000088E7: 59                                                    	pop	ecx
                                                                     read_stub_code:
000088E8: E8 DB 7A FF FF                                        	call	read
                                                                     stub_code_ok:
000088ED: E8 CE 7A FF FF                                        	call	close
000088F2: 89 FA                                                 	mov	edx,edi
000088F4: 29 F2                                                 	sub	edx,esi
000088F6: 66 89 D0                                              	mov	ax,dx
000088F9: 66 25 FF 01                                           	and	ax,1FFh
000088FD: 66 89 46 02                                           	mov	[esi+2],ax
00008901: 4A                                                    	dec	edx
00008902: C1 EA 09                                              	shr	edx,9
00008905: 42                                                    	inc	edx
00008906: 66 89 56 04                                           	mov	[esi+4],dx
0000890A: 89 F8                                                 	mov	eax,edi
0000890C: 29 F0                                                 	sub	eax,esi
0000890E: 89 46 3C                                              	mov	[esi+3Ch],eax
00008911: 5E                                                    	pop	esi
                                                                      stub_ok:
00008912: C3                                                    	ret
                                                                      binary_stub:
00008913: 89 FE                                                 	mov	esi,edi
00008915: B9 10 00 00 00                                        	mov	ecx,40h shr 2
0000891A: 31 C0                                                 	xor	eax,eax
0000891C: F3 AB                                                 	rep	stos dword [edi]
0000891E: B0 02                                                 	mov	al,2
00008920: 31 D2                                                 	xor	edx,edx
00008922: E8 C5 7A FF FF                                        	call	lseek
00008927: 50                                                    	push	eax
00008928: 30 C0                                                 	xor	al,al
0000892A: 31 D2                                                 	xor	edx,edx
0000892C: E8 BB 7A FF FF                                        	call	lseek
00008931: 8B 0C 24                                              	mov	ecx,[esp]
00008934: 83 C1 47                                              	add	ecx,40h+111b
00008937: 83 E1 F8                                              	and	ecx,not 111b
0000893A: 66 89 C8                                              	mov	ax,cx
0000893D: 66 25 FF 01                                           	and	ax,1FFh
00008941: 66 89 46 02                                           	mov	[esi+2],ax
00008945: 8D 81 FF 01 00 00                                     	lea	eax,[ecx+1FFh]
0000894B: C1 E8 09                                              	shr	eax,9
0000894E: 66 89 46 04                                           	mov	[esi+4],ax
00008952: 89 4E 3C                                              	mov	[esi+3Ch],ecx
00008955: 83 E9 40                                              	sub	ecx,40h
00008958: B8 00 00 01 00                                        	mov	eax,10000h
0000895D: 29 C8                                                 	sub	eax,ecx
0000895F: 76 07                                                 	jbe	binary_heap_ok
00008961: C1 E8 04                                              	shr	eax,4
00008964: 66 89 46 0A                                           	mov	[esi+0Ah],ax
                                                                      binary_heap_ok:
00008968: 66 C7 06 4D 5A                                        	mov	word [esi],'MZ'
0000896D: C6 46 08 04                                           	mov	byte [esi+8],4
00008971: 66 B8 FF FF                                           	mov	ax,0FFFFh
00008975: 66 89 46 0C                                           	mov	[esi+0Ch],ax
00008979: 66 48                                                 	dec	ax
0000897B: 66 89 46 10                                           	mov	[esi+10h],ax
0000897F: 66 83 E8 0E                                           	sub	ax,0Eh
00008983: 66 89 46 0E                                           	mov	[esi+0Eh],ax
00008987: 66 89 46 16                                           	mov	[esi+16h],ax
0000898B: 66 C7 46 14 00 01                                     	mov	word [esi+14h],100h
00008991: C6 46 18 40                                           	mov	byte [esi+18h],40h
00008995: A1 F0 A1 01 00                                        	mov	eax,[tagged_blocks]
0000899A: 29 C8                                                 	sub	eax,ecx
0000899C: 39 C7                                                 	cmp	edi,eax
0000899E: 0F 83 F8 7E FF FF                                     	jae	out_of_memory
000089A4: 89 FA                                                 	mov	edx,edi
000089A6: C1 E9 02                                              	shr	ecx,2
000089A9: 31 C0                                                 	xor	eax,eax
000089AB: F3 AB                                                 	rep	stos dword [edi]
000089AD: 59                                                    	pop	ecx
000089AE: E8 15 7A FF FF                                        	call	read
000089B3: E8 08 7A FF FF                                        	call	close
000089B8: 5E                                                    	pop	esi
000089B9: C3                                                    	ret
                                                                
                                                                format_pe:
000089BA: 31 D2                                                 	xor	edx,edx
000089BC: 66 C7 05 60 A2 01 00 4C 01                            	mov	[machine],14Ch
000089C5: 66 C7 05 62 A2 01 00 03 00                            	mov	[subsystem],3
000089CE: C7 05 64 A2 01 00 03 00 0A 00                         	mov	[subsystem_version],3 + 10 shl 16
000089D8: C7 05 68 A2 01 00 00 00 40 00                         	mov	[image_base],400000h
000089E2: 83 25 6C A2 01 00 00                                  	and	[image_base_high],0
000089E9: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
000089F3: 74 13                                                 	jz	pe_settings
000089F5: 66 C7 05 60 A2 01 00 64 86                            	mov	[machine],8664h
000089FE: C7 05 64 A2 01 00 05 00 00 00                         	mov	[subsystem_version],5 + 0 shl 16
                                                                      pe_settings:
00008A08: 80 3E 84                                              	cmp	byte [esi],84h
00008A0B: 0F 84 8E 01 00 00                                     	je	get_stub_name
00008A11: 80 3E 80                                              	cmp	byte [esi],80h
00008A14: 0F 84 1F 01 00 00                                     	je	get_pe_base
00008A1A: 80 3E 1B                                              	cmp	byte [esi],1Bh
00008A1D: 0F 85 8F 01 00 00                                     	jne	pe_settings_ok
00008A23: AC                                                    	lods	byte [esi]
00008A24: AC                                                    	lods	byte [esi]
00008A25: A8 C0                                                 	test	al,80h+40h
00008A27: 74 65                                                 	jz	subsystem_setting
00008A29: 3C 80                                                 	cmp	al,80h
00008A2B: 74 0E                                                 	je	dll_flag
00008A2D: 3C 81                                                 	cmp	al,81h
00008A2F: 74 1A                                                 	je	wdm_flag
00008A31: 3C 82                                                 	cmp	al,82h
00008A33: 74 26                                                 	je	large_flag
00008A35: 3C 83                                                 	cmp	al,83h
00008A37: 74 42                                                 	je	nx_flag
00008A39: EB CD                                                 	jmp	pe_settings
                                                                      dll_flag:
00008A3B: 0F BA 2D 40 A2 01 00 08                               	bts	[format_flags],8
00008A43: 0F 82 57 80 FF FF                                     	jc	setting_already_specified
00008A49: EB BD                                                 	jmp	pe_settings
                                                                      wdm_flag:
00008A4B: 0F BA 2D 40 A2 01 00 09                               	bts	[format_flags],9
00008A53: 0F 82 47 80 FF FF                                     	jc	setting_already_specified
00008A59: EB AD                                                 	jmp	pe_settings
                                                                      large_flag:
00008A5B: 0F BA 2D 40 A2 01 00 0B                               	bts	[format_flags],11
00008A63: 0F 82 37 80 FF FF                                     	jc	setting_already_specified
00008A69: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
00008A73: 0F 85 B1 7E FF FF                                     	jnz	invalid_argument
00008A79: EB 8D                                                 	jmp	pe_settings
                                                                      nx_flag:
00008A7B: 0F BA 2D 40 A2 01 00 0C                               	bts	[format_flags],12
00008A83: 0F 82 17 80 FF FF                                     	jc	setting_already_specified
00008A89: E9 7A FF FF FF                                        	jmp	pe_settings
                                                                      subsystem_setting:
00008A8E: 0F BA 2D 40 A2 01 00 07                               	bts	[format_flags],7
00008A96: 0F 82 04 80 FF FF                                     	jc	setting_already_specified
00008A9C: 66 83 E0 3F                                           	and	ax,3Fh
00008AA0: 66 A3 62 A2 01 00                                     	mov	[subsystem],ax
00008AA6: 66 83 F8 0A                                           	cmp	ax,10
00008AAA: 72 07                                                 	jb	subsystem_type_ok
00008AAC: 83 0D 40 A2 01 00 04                                  	or	[format_flags],4
                                                                      subsystem_type_ok:
00008AB3: 80 3E 28                                              	cmp	byte [esi],'('
00008AB6: 0F 85 4C FF FF FF                                     	jne	pe_settings
00008ABC: 46                                                    	inc	esi
00008ABD: 80 3E 2E                                              	cmp	byte [esi],'.'
00008AC0: 0F 85 E6 7E FF FF                                     	jne	invalid_value
00008AC6: 46                                                    	inc	esi
00008AC7: 52                                                    	push	edx
00008AC8: 80 7E 0B 00                                           	cmp	byte [esi+11],0
00008ACC: 0F 85 DA 7E FF FF                                     	jne	invalid_value
00008AD2: 80 7E 0A 02                                           	cmp	byte [esi+10],2
00008AD6: 0F 87 D0 7E FF FF                                     	ja	invalid_value
00008ADC: 66 8B 56 08                                           	mov	dx,[esi+8]
00008AE0: 66 81 FA 00 80                                        	cmp	dx,8000h
00008AE5: 74 42                                                 	je	zero_version
00008AE7: 8B 46 04                                              	mov	eax,[esi+4]
00008AEA: 66 83 FA 07                                           	cmp	dx,7
00008AEE: 0F 8F B8 7E FF FF                                     	jg	invalid_value
00008AF4: 66 B9 07 00                                           	mov	cx,7
00008AF8: 66 29 D1                                              	sub	cx,dx
00008AFB: 8B 46 04                                              	mov	eax,[esi+4]
00008AFE: D3 E8                                                 	shr	eax,cl
00008B00: 89 C3                                                 	mov	ebx,eax
00008B02: C1 EB 18                                              	shr	ebx,24
00008B05: 80 FB 64                                              	cmp	bl,100
00008B08: 0F 83 9E 7E FF FF                                     	jae	invalid_value
00008B0E: 25 FF FF FF 00                                        	and	eax,0FFFFFFh
00008B13: B9 64 00 00 00                                        	mov	ecx,100
00008B18: F7 E1                                                 	mul	ecx
00008B1A: 0F AC D0 18                                           	shrd	eax,edx,24
00008B1E: 73 01                                                 	jnc	version_value_ok
00008B20: 40                                                    	inc	eax
                                                                      version_value_ok:
00008B21: C1 E0 10                                              	shl	eax,16
00008B24: 66 89 D8                                              	mov	ax,bx
00008B27: EB 02                                                 	jmp	subsystem_version_ok
                                                                      zero_version:
00008B29: 31 C0                                                 	xor	eax,eax
                                                                      subsystem_version_ok:
00008B2B: 5A                                                    	pop	edx
00008B2C: 83 C6 0D                                              	add	esi,13
00008B2F: A3 64 A2 01 00                                        	mov	[subsystem_version],eax
00008B34: E9 CF FE FF FF                                        	jmp	pe_settings
                                                                      get_pe_base:
00008B39: 0F BA 2D 40 A2 01 00 0A                               	bts	[format_flags],10
00008B41: 0F 82 59 7F FF FF                                     	jc	setting_already_specified
00008B47: 66 AD                                                 	lods	word [esi]
00008B49: 80 FC 28                                              	cmp	ah,'('
00008B4C: 0F 85 D8 7D FF FF                                     	jne	invalid_argument
00008B52: 80 3E 2E                                              	cmp	byte [esi],'.'
00008B55: 0F 84 51 7E FF FF                                     	je	invalid_value
00008B5B: 52 57                                                 	push	edx edi
00008B5D: 03 3D 54 A2 01 00                                     	add	edi,[stub_size]
00008B63: F7 05 40 A2 01 00 04 00 00 00                         	test	[format_flags],4
00008B6D: 75 0C                                                 	jnz	get_peplus_base
00008B6F: E8 16 E8 FF FF                                        	call	get_dword_value
00008B74: A3 68 A2 01 00                                        	mov	[image_base],eax
00008B79: EB 10                                                 	jmp	pe_base_ok
                                                                      get_peplus_base:
00008B7B: E8 A5 E8 FF FF                                        	call	get_qword_value
00008B80: A3 68 A2 01 00                                        	mov	[image_base],eax
00008B85: 89 15 6C A2 01 00                                     	mov	[image_base_high],edx
                                                                      pe_base_ok:
00008B8B: 5F 5A                                                 	pop	edi edx
00008B8D: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
00008B94: 0F 85 C0 7E FF FF                                     	jne	invalid_use_of_symbol
00008B9A: 80 3E 84                                              	cmp	byte [esi],84h
00008B9D: 75 13                                                 	jne	pe_settings_ok
                                                                      get_stub_name:
00008B9F: AC                                                    	lods	byte [esi]
00008BA0: 66 AD                                                 	lods	word [esi]
00008BA2: 66 83 F8 28                                           	cmp	ax,'('
00008BA6: 0F 85 7E 7D FF FF                                     	jne	invalid_argument
00008BAC: AD                                                    	lods	dword [esi]
00008BAD: 89 F2                                                 	mov	edx,esi
00008BAF: 01 C6                                                 	add	esi,eax
00008BB1: 46                                                    	inc	esi
                                                                      pe_settings_ok:
00008BB2: 8B 2D 54 A2 01 00                                     	mov	ebp,[stub_size]
00008BB8: 09 ED                                                 	or	ebp,ebp
00008BBA: 74 14                                                 	jz	make_pe_stub
00008BBC: 3B 15 58 A2 01 00                                     	cmp	edx,[stub_file]
00008BC2: 74 26                                                 	je	pe_stub_ok
00008BC4: 2B 3D 54 A2 01 00                                     	sub	edi,[stub_size]
00008BCA: 89 3D 6C A1 01 00                                     	mov	[code_start],edi
                                                                      make_pe_stub:
00008BD0: E8 B6 FB FF FF                                        	call	make_stub
00008BD5: 89 F8                                                 	mov	eax,edi
00008BD7: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
00008BDD: A3 54 A2 01 00                                        	mov	[stub_size],eax
00008BE2: 89 3D 6C A1 01 00                                     	mov	[code_start],edi
00008BE8: 89 C5                                                 	mov	ebp,eax
                                                                      pe_stub_ok:
00008BEA: 89 FA                                                 	mov	edx,edi
00008BEC: B9 F8 00 00 00                                        	mov	ecx,18h+0E0h
00008BF1: F7 05 40 A2 01 00 04 00 00 00                         	test	[format_flags],4
00008BFB: 74 03                                                 	jz	zero_pe_header
00008BFD: 83 C1 10                                              	add	ecx,10h
                                                                      zero_pe_header:
00008C00: 01 CD                                                 	add	ebp,ecx
00008C02: C1 E9 02                                              	shr	ecx,2
00008C05: 31 C0                                                 	xor	eax,eax
00008C07: F3 AB                                                 	rep	stos dword [edi]
00008C09: 66 C7 02 50 45                                        	mov	word [edx],'PE' 	; signature
00008C0E: 66 A1 60 A2 01 00                                     	mov	ax,[machine]
00008C14: 66 89 42 04                                           	mov	word [edx+4],ax
00008C18: C6 42 39 10                                           	mov	byte [edx+38h+1],10h	; section alignment
00008C1C: C6 42 3D 02                                           	mov	byte [edx+3Ch+1],2	; file alignment
00008C20: C6 42 40 01                                           	mov	byte [edx+40h],1	; OS version
00008C24: A1 64 A2 01 00                                        	mov	eax,[subsystem_version]
00008C29: 89 42 48                                              	mov	[edx+48h],eax
00008C2C: 66 A1 62 A2 01 00                                     	mov	ax,[subsystem]
00008C32: 66 89 42 5C                                           	mov	[edx+5Ch],ax
00008C36: 66 83 F8 01                                           	cmp	ax,1
00008C3A: 75 0B                                                 	jne	pe_alignment_ok
00008C3C: B8 20 00 00 00                                        	mov	eax,20h
00008C41: 89 42 38                                              	mov	dword [edx+38h],eax
00008C44: 89 42 3C                                              	mov	dword [edx+3Ch],eax
                                                                      pe_alignment_ok:
00008C47: 66 C7 42 1A 01 49                                     	mov	word [edx+1Ah],VERSION_MAJOR + VERSION_MINOR shl 8
00008C4D: F7 05 40 A2 01 00 04 00 00 00                         	test	[format_flags],4
00008C57: 75 25                                                 	jnz	init_peplus_specific
00008C59: C6 42 14 E0                                           	mov	byte [edx+14h],0E0h	; size of optional header
00008C5D: C7 42 16 0F 01 0B 01                                  	mov	dword [edx+16h],10B010Fh; flags and magic value
00008C64: A1 68 A2 01 00                                        	mov	eax,[image_base]
00008C69: 89 42 34                                              	mov	[edx+34h],eax
00008C6C: C6 42 61 10                                           	mov	byte [edx+60h+1],10h	; stack reserve
00008C70: C6 42 65 10                                           	mov	byte [edx+64h+1],10h	; stack commit
00008C74: C6 42 6A 01                                           	mov	byte [edx+68h+2],1	; heap reserve
00008C78: C6 42 74 10                                           	mov	byte [edx+74h],16	; number of directories
00008C7C: EB 2E                                                 	jmp	pe_header_ok
                                                                      init_peplus_specific:
00008C7E: C6 42 14 F0                                           	mov	byte [edx+14h],0F0h	; size of optional header
00008C82: C7 42 16 2F 00 0B 02                                  	mov	dword [edx+16h],20B002Fh; flags and magic value
00008C89: A1 68 A2 01 00                                        	mov	eax,[image_base]
00008C8E: 89 42 30                                              	mov	[edx+30h],eax
00008C91: A1 6C A2 01 00                                        	mov	eax,[image_base_high]
00008C96: 89 42 34                                              	mov	[edx+34h],eax
00008C99: C6 42 61 10                                           	mov	byte [edx+60h+1],10h	; stack reserve
00008C9D: C6 42 69 10                                           	mov	byte [edx+68h+1],10h	; stack commit
00008CA1: C6 42 72 01                                           	mov	byte [edx+70h+2],1	; heap reserve
00008CA5: C6 82 84 00 00 00 10                                  	mov	byte [edx+84h],16	; number of directories
                                                                      pe_header_ok:
00008CAC: 0F BC 4A 3C                                           	bsf	ecx,[edx+3Ch]
00008CB0: 6B 1D 50 A2 01 00 28                                  	imul	ebx,[number_of_sections],28h
00008CB7: 09 DB                                                 	or	ebx,ebx
00008CB9: 75 05                                                 	jnz	reserve_space_for_section_headers
00008CBB: BB 28 00 00 00                                        	mov	ebx,28h
                                                                      reserve_space_for_section_headers:
00008CC0: 01 EB                                                 	add	ebx,ebp
00008CC2: 4B                                                    	dec	ebx
00008CC3: D3 EB                                                 	shr	ebx,cl
00008CC5: 43                                                    	inc	ebx
00008CC6: D3 E3                                                 	shl	ebx,cl
00008CC8: 29 EB                                                 	sub	ebx,ebp
00008CCA: 89 D9                                                 	mov	ecx,ebx
00008CCC: A1 F0 A1 01 00                                        	mov	eax,[tagged_blocks]
00008CD1: 29 C8                                                 	sub	eax,ecx
00008CD3: 39 C7                                                 	cmp	edi,eax
00008CD5: 0F 83 C1 7B FF FF                                     	jae	out_of_memory
00008CDB: C1 E9 02                                              	shr	ecx,2
00008CDE: 31 C0                                                 	xor	eax,eax
00008CE0: F3 AB                                                 	rep	stos dword [edi]
00008CE2: 89 F8                                                 	mov	eax,edi
00008CE4: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
00008CEA: 03 05 54 A2 01 00                                     	add	eax,[stub_size]
00008CF0: 89 42 54                                              	mov	[edx+54h],eax		; size of headers
00008CF3: 8B 4A 38                                              	mov	ecx,[edx+38h]
00008CF6: 49                                                    	dec	ecx
00008CF7: 01 C8                                                 	add	eax,ecx
00008CF9: F7 D1                                                 	not	ecx
00008CFB: 21 C8                                                 	and	eax,ecx
00008CFD: 0F BA 25 40 A2 01 00 08                               	bt	[format_flags],8
00008D05: 72 03                                                 	jc	pe_entry_init_ok
00008D07: 89 42 28                                              	mov	[edx+28h],eax		; entry point rva
                                                                      pe_entry_init_ok:
00008D0A: 83 25 50 A2 01 00 00                                  	and	[number_of_sections],0
00008D11: 0F B7 5A 14                                           	movzx	ebx,word [edx+14h]
00008D15: 8D 5C 1A 18                                           	lea	ebx,[edx+18h+ebx]
00008D19: 89 1D 5C A2 01 00                                     	mov	[current_section],ebx
00008D1F: C7 03 2E 66 6C 61                                     	mov	dword [ebx],'.fla'
00008D25: C7 43 04 74 00 00 00                                  	mov	dword [ebx+4],'t'
00008D2C: 89 7B 14                                              	mov	[ebx+14h],edi
00008D2F: 89 43 0C                                              	mov	[ebx+0Ch],eax
00008D32: C7 43 24 60 00 00 E0                                  	mov	dword [ebx+24h],0E0000060h
00008D39: 31 C9                                                 	xor	ecx,ecx
00008D3B: 30 DB                                                 	xor	bl,bl
00008D3D: F7 D0                                                 	not	eax
00008D3F: F7 D1                                                 	not	ecx
00008D41: F6 D3                                                 	not	bl
00008D43: 83 C0 01                                              	add	eax,1
00008D46: 83 D1 00                                              	adc	ecx,0
00008D49: 80 D3 00                                              	adc	bl,0
00008D4C: 01 F8                                                 	add	eax,edi
00008D4E: 83 D1 00                                              	adc	ecx,0
00008D51: 80 D3 00                                              	adc	bl,0
00008D54: F7 05 40 A2 01 00 04 00 00 00                         	test	[format_flags],4
00008D5E: 75 0B                                                 	jnz	peplus_org
00008D60: 2B 42 34                                              	sub	eax,[edx+34h]
00008D63: 83 D9 00                                              	sbb	ecx,0
00008D66: 80 DB 00                                              	sbb	bl,0
00008D69: EB 09                                                 	jmp	pe_org_ok
                                                                      peplus_org:
00008D6B: 2B 42 30                                              	sub	eax,[edx+30h]
00008D6E: 1B 4A 34                                              	sbb	ecx,[edx+34h]
00008D71: 80 DB 00                                              	sbb	bl,0
                                                                      pe_org_ok:
00008D74: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
00008D7E: 75 0B                                                 	jnz	pe64_code
00008D80: B7 02                                                 	mov	bh,2
00008D82: C6 05 CA A2 01 00 20                                  	mov	[code_type],32
00008D89: EB 09                                                 	jmp	pe_code_type_ok
                                                                      pe64_code:
00008D8B: B7 04                                                 	mov	bh,4
00008D8D: C6 05 CA A2 01 00 40                                  	mov	[code_type],64
                                                                      pe_code_type_ok:
00008D94: 0F BA 25 44 A2 01 00 00                               	bt	[resolver_flags],0
00008D9C: 72 02                                                 	jc	pe_labels_type_ok
00008D9E: 30 FF                                                 	xor	bh,bh
                                                                      pe_labels_type_ok:
00008DA0: 50 53                                                 	push	eax ebx
00008DA2: E8 ED BD FF FF                                        	call	init_addressing_space
00008DA7: 89 DD                                                 	mov	ebp,ebx
00008DA9: 5B 58                                                 	pop	ebx eax
00008DAB: 3E 89 45 00                                           	mov	[ds:ebp],eax
00008DAF: 3E 89 4D 04                                           	mov	[ds:ebp+4],ecx
00008DB3: 3E 66 89 5D 08                                        	mov	[ds:ebp+8],bx
00008DB8: 3E 89 7D 18                                           	mov	[ds:ebp+18h],edi
00008DBC: 0F BA 25 40 A2 01 00 08                               	bt	[format_flags],8
00008DC4: 73 04                                                 	jnc	dll_flag_ok
00008DC6: 80 4A 17 20                                           	or	byte [edx+16h+1],20h
                                                                      dll_flag_ok:
00008DCA: 0F BA 25 40 A2 01 00 09                               	bt	[format_flags],9
00008DD2: 73 04                                                 	jnc	wdm_flag_ok
00008DD4: 80 4A 5F 20                                           	or	byte [edx+5Eh+1],20h
                                                                      wdm_flag_ok:
00008DD8: 0F BA 25 40 A2 01 00 0B                               	bt	[format_flags],11
00008DE0: 73 04                                                 	jnc	large_flag_ok
00008DE2: 80 4A 16 20                                           	or	byte [edx+16h],20h
                                                                      large_flag_ok:
00008DE6: 0F BA 25 40 A2 01 00 0C                               	bt	[format_flags],12
00008DEE: 73 04                                                 	jnc	nx_ok
00008DF0: 80 4A 5F 01                                           	or	byte [edx+5Eh+1],1
                                                                      nx_ok:
00008DF4: E9 5D F3 FF FF                                        	jmp	format_defined
                                                                pe_section:
00008DF9: E8 76 01 00 00                                        	call	close_pe_section
00008DFE: 50 53                                                 	push	eax ebx
00008E00: E8 73 BD FF FF                                        	call	create_addressing_space
00008E05: 89 DD                                                 	mov	ebp,ebx
00008E07: 5B 58                                                 	pop	ebx eax
00008E09: 0F BA 2D 40 A2 01 00 05                               	bts	[format_flags],5
00008E11: 8D 4B 28                                              	lea	ecx,[ebx+28h]
00008E14: 03 52 54                                              	add	edx,[edx+54h]
00008E17: 2B 15 54 A2 01 00                                     	sub	edx,[stub_size]
00008E1D: 39 D1                                                 	cmp	ecx,edx
00008E1F: 76 17                                                 	jbe	new_section
00008E21: 8D 5A D8                                              	lea	ebx,[edx-28h]
00008E24: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
00008E2B: 57                                                    	push	edi
00008E2C: 89 DF                                                 	mov	edi,ebx
00008E2E: B9 02 00 00 00                                        	mov	ecx,28h shr 4
00008E33: 31 C0                                                 	xor	eax,eax
00008E35: F3 AB                                                 	rep	stos dword [edi]
00008E37: 5F                                                    	pop	edi
                                                                      new_section:
00008E38: 89 43 0C                                              	mov	[ebx+0Ch],eax
00008E3B: 66 AD                                                 	lods	word [esi]
00008E3D: 66 83 F8 28                                           	cmp	ax,'('
00008E41: 0F 85 E3 7A FF FF                                     	jne	invalid_argument
00008E47: 8D 56 04                                              	lea	edx,[esi+4]
00008E4A: 8B 0E                                                 	mov	ecx,[esi]
00008E4C: 8D 74 0E 05                                           	lea	esi,[esi+4+ecx+1]
00008E50: 83 F9 08                                              	cmp	ecx,8
00008E53: 0F 87 08 7C FF FF                                     	ja	name_too_long
00008E59: 31 C0                                                 	xor	eax,eax
00008E5B: 89 03                                                 	mov	[ebx],eax
00008E5D: 89 43 04                                              	mov	[ebx+4],eax
00008E60: 56 57                                                 	push	esi edi
00008E62: 89 DF                                                 	mov	edi,ebx
00008E64: 89 D6                                                 	mov	esi,edx
00008E66: F3 A4                                                 	rep	movs byte [edi],[esi]
00008E68: 5F 5E                                                 	pop	edi esi
00008E6A: 83 63 24 00                                           	and	dword [ebx+24h],0
00008E6E: 89 7B 14                                              	mov	[ebx+14h],edi
00008E71: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
00008E77: 89 F8                                                 	mov	eax,edi
00008E79: 31 C9                                                 	xor	ecx,ecx
00008E7B: 2B 43 0C                                              	sub	eax,[ebx+0Ch]
00008E7E: 83 D9 00                                              	sbb	ecx,0
00008E81: 3E 80 5D 08 00                                        	sbb	byte [ds:ebp+8],0
00008E86: 3E C6 45 09 02                                        	mov	byte [ds:ebp+9],2
00008E8B: C6 05 CA A2 01 00 20                                  	mov	[code_type],32
00008E92: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
00008E9C: 74 0C                                                 	jz	pe_section_code_type_ok
00008E9E: 3E C6 45 09 04                                        	mov	byte [ds:ebp+9],4
00008EA3: C6 05 CA A2 01 00 40                                  	mov	[code_type],64
                                                                      pe_section_code_type_ok:
00008EAA: F7 05 40 A2 01 00 04 00 00 00                         	test	[format_flags],4
00008EB4: 75 1C                                                 	jnz	peplus_section_org
00008EB6: 2B 42 34                                              	sub	eax,[edx+34h]
00008EB9: 83 D9 00                                              	sbb	ecx,0
00008EBC: 3E 80 5D 08 00                                        	sbb	byte [ds:ebp+8],0
00008EC1: 0F BA 25 44 A2 01 00 00                               	bt	[resolver_flags],0
00008EC9: 72 21                                                 	jc	pe_section_org_ok
00008ECB: 3E C6 45 09 00                                        	mov	byte [ds:ebp+9],0
00008ED0: EB 1A                                                 	jmp	pe_section_org_ok
                                                                      peplus_section_org:
00008ED2: 2B 42 30                                              	sub	eax,[edx+30h]
00008ED5: 1B 4A 34                                              	sbb	ecx,[edx+34h]
00008ED8: 3E 80 5D 08 00                                        	sbb	byte [ds:ebp+8],0
00008EDD: 0F BA 25 44 A2 01 00 00                               	bt	[resolver_flags],0
00008EE5: 72 05                                                 	jc	pe_section_org_ok
00008EE7: 3E C6 45 09 00                                        	mov	byte [ds:ebp+9],0
                                                                      pe_section_org_ok:
00008EEC: 3E 89 45 00                                           	mov	[ds:ebp],eax
00008EF0: 3E 89 4D 04                                           	mov	[ds:ebp+4],ecx
00008EF4: 3E 89 7D 18                                           	mov	[ds:ebp+18h],edi
                                                                      get_section_flags:
00008EF8: AC                                                    	lods	byte [esi]
00008EF9: 3C 1A                                                 	cmp	al,1Ah
00008EFB: 74 0A                                                 	je	set_directory
00008EFD: 3C 19                                                 	cmp	al,19h
00008EFF: 74 4B                                                 	je	section_flag
00008F01: 4E                                                    	dec	esi
00008F02: E9 73 C0 FF FF                                        	jmp	instruction_assembled
                                                                      set_directory:
00008F07: 0F B6 06                                              	movzx	eax,byte [esi]
00008F0A: 46                                                    	inc	esi
00008F0B: 89 D9                                                 	mov	ecx,ebx
00008F0D: F7 05 40 A2 01 00 04 00 00 00                         	test	[format_flags],4
00008F17: 75 0E                                                 	jnz	peplus_directory
00008F19: 87 4C C2 78                                           	xchg	ecx,[edx+78h+eax*8]
00008F1D: C7 44 C2 7C FF FF FF FF                               	mov	dword [edx+78h+eax*8+4],-1
00008F25: EB 12                                                 	jmp	pe_directory_set
                                                                      peplus_directory:
00008F27: 87 8C C2 88 00 00 00                                  	xchg	ecx,[edx+88h+eax*8]
00008F2E: C7 84 C2 8C 00 00 00 FF FF FF FF                      	mov	dword [edx+88h+eax*8+4],-1
                                                                      pe_directory_set:
00008F39: 09 C9                                                 	or	ecx,ecx
00008F3B: 0F 85 66 7B FF FF                                     	jnz	data_already_defined
00008F41: 53 52                                                 	push	ebx edx
00008F43: E8 D8 04 00 00                                        	call	generate_pe_data
00008F48: 5A 5B                                                 	pop	edx ebx
00008F4A: EB AC                                                 	jmp	get_section_flags
                                                                      section_flag:
00008F4C: AC                                                    	lods	byte [esi]
00008F4D: 3C 09                                                 	cmp	al,9
00008F4F: 0F 84 D5 79 FF FF                                     	je	invalid_argument
00008F55: 3C 0B                                                 	cmp	al,11
00008F57: 0F 84 CD 79 FF FF                                     	je	invalid_argument
00008F5D: 88 C1                                                 	mov	cl,al
00008F5F: B8 01 00 00 00                                        	mov	eax,1
00008F64: D3 E0                                                 	shl	eax,cl
00008F66: 85 43 24                                              	test	dword [ebx+24h],eax
00008F69: 0F 85 31 7B FF FF                                     	jnz	setting_already_specified
00008F6F: 09 43 24                                              	or	dword [ebx+24h],eax
00008F72: EB 84                                                 	jmp	get_section_flags
                                                                      close_pe_section:
00008F74: 8B 1D 5C A2 01 00                                     	mov	ebx,[current_section]
00008F7A: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
00008F80: 89 F8                                                 	mov	eax,edi
00008F82: 2B 43 14                                              	sub	eax,[ebx+14h]
00008F85: 75 0E                                                 	jnz	finish_section
00008F87: 0F BA 25 40 A2 01 00 05                               	bt	[format_flags],5
00008F8F: 72 04                                                 	jc	finish_section
00008F91: 8B 43 0C                                              	mov	eax,[ebx+0Ch]
00008F94: C3                                                    	ret
                                                                      finish_section:
00008F95: 89 43 08                                              	mov	[ebx+8],eax
00008F98: 3B 3D D8 A1 01 00                                     	cmp	edi,[undefined_data_end]
00008F9E: 75 0F                                                 	jne	align_section
00008FA0: 81 7A 38 00 10 00 00                                  	cmp	dword [edx+38h],1000h
00008FA7: 72 06                                                 	jb	align_section
00008FA9: 8B 3D D4 A1 01 00                                     	mov	edi,[undefined_data_start]
                                                                      align_section:
00008FAF: 83 25 D8 A1 01 00 00                                  	and	[undefined_data_end],0
00008FB6: 89 FD                                                 	mov	ebp,edi
00008FB8: 2B 6B 14                                              	sub	ebp,[ebx+14h]
00008FBB: 8B 4A 3C                                              	mov	ecx,[edx+3Ch]
00008FBE: 49                                                    	dec	ecx
00008FBF: 8D 44 0D 00                                           	lea	eax,[ebp+ecx]
00008FC3: F7 D1                                                 	not	ecx
00008FC5: 21 C8                                                 	and	eax,ecx
00008FC7: 89 43 10                                              	mov	[ebx+10h],eax
00008FCA: 29 E8                                                 	sub	eax,ebp
00008FCC: 89 C1                                                 	mov	ecx,eax
00008FCE: 30 C0                                                 	xor	al,al
00008FD0: F3 AA                                                 	rep	stos byte [edi]
00008FD2: A1 6C A1 01 00                                        	mov	eax,[code_start]
00008FD7: 2B 05 54 A2 01 00                                     	sub	eax,[stub_size]
00008FDD: 29 43 14                                              	sub	[ebx+14h],eax
00008FE0: 8B 4B 10                                              	mov	ecx,[ebx+10h]
00008FE3: F6 43 24 20                                           	test	byte [ebx+24h],20h
00008FE7: 74 0F                                                 	jz	pe_code_sum_ok
00008FE9: 01 4A 1C                                              	add	[edx+1Ch],ecx
00008FEC: 83 7A 2C 00                                           	cmp	dword [edx+2Ch],0
00008FF0: 75 06                                                 	jne	pe_code_sum_ok
00008FF2: 8B 43 0C                                              	mov	eax,[ebx+0Ch]
00008FF5: 89 42 2C                                              	mov	[edx+2Ch],eax
                                                                      pe_code_sum_ok:
00008FF8: F6 43 24 40                                           	test	byte [ebx+24h],40h
00008FFC: 74 1B                                                 	jz	pe_data_sum_ok
00008FFE: 01 4A 20                                              	add	[edx+20h],ecx
00009001: F7 05 40 A2 01 00 04 00 00 00                         	test	[format_flags],4
0000900B: 75 0C                                                 	jnz	pe_data_sum_ok
0000900D: 83 7A 30 00                                           	cmp	dword [edx+30h],0
00009011: 75 06                                                 	jne	pe_data_sum_ok
00009013: 8B 43 0C                                              	mov	eax,[ebx+0Ch]
00009016: 89 42 30                                              	mov	[edx+30h],eax
                                                                      pe_data_sum_ok:
00009019: 8B 43 08                                              	mov	eax,[ebx+8]
0000901C: 09 C0                                                 	or	eax,eax
0000901E: 74 0D                                                 	jz	udata_ok
00009020: 83 7B 10 00                                           	cmp	dword [ebx+10h],0
00009024: 75 07                                                 	jne	udata_ok
00009026: 80 4B 24 80                                           	or	byte [ebx+24h],80h
0000902A: 01 4A 24                                              	add	[edx+24h],ecx
                                                                      udata_ok:
0000902D: 8B 4A 38                                              	mov	ecx,[edx+38h]
00009030: 49                                                    	dec	ecx
00009031: 01 C8                                                 	add	eax,ecx
00009033: F7 D1                                                 	not	ecx
00009035: 21 C8                                                 	and	eax,ecx
00009037: 03 43 0C                                              	add	eax,[ebx+0Ch]
0000903A: 83 C3 28                                              	add	ebx,28h
0000903D: 89 1D 5C A2 01 00                                     	mov	[current_section],ebx
00009043: 66 FF 05 50 A2 01 00                                  	inc	word [number_of_sections]
0000904A: 0F 84 7B 78 FF FF                                     	jz	format_limitations_exceeded
00009050: C3                                                    	ret
                                                                data_directive:
00009051: 80 3D C9 A2 01 00 03                                  	cmp	[output_format],3
00009058: 0F 85 D6 78 FF FF                                     	jne	illegal_instruction
0000905E: AC                                                    	lods	byte [esi]
0000905F: 3C 1A                                                 	cmp	al,1Ah
00009061: 74 16                                                 	je	predefined_data_type
00009063: 3C 28                                                 	cmp	al,'('
00009065: 0F 85 BF 78 FF FF                                     	jne	invalid_argument
0000906B: E8 47 E2 FF FF                                        	call	get_byte_value
00009070: 3C 10                                                 	cmp	al,16
00009072: 72 09                                                 	jb	data_type_ok
00009074: E9 33 79 FF FF                                        	jmp	invalid_value
                                                                      predefined_data_type:
00009079: 0F B6 06                                              	movzx	eax,byte [esi]
0000907C: 46                                                    	inc	esi
                                                                      data_type_ok:
0000907D: 8B 1D 5C A2 01 00                                     	mov	ebx,[current_section]
00009083: 89 F9                                                 	mov	ecx,edi
00009085: 2B 4B 14                                              	sub	ecx,[ebx+14h]
00009088: 03 4B 0C                                              	add	ecx,[ebx+0Ch]
0000908B: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
00009091: F7 05 40 A2 01 00 04 00 00 00                         	test	[format_flags],4
0000909B: 75 06                                                 	jnz	peplus_data
0000909D: 87 4C C2 78                                           	xchg	ecx,[edx+78h+eax*8]
000090A1: EB 07                                                 	jmp	init_pe_data
                                                                      peplus_data:
000090A3: 87 8C C2 88 00 00 00                                  	xchg	ecx,[edx+88h+eax*8]
                                                                      init_pe_data:
000090AA: 09 C9                                                 	or	ecx,ecx
000090AC: 0F 85 F5 79 FF FF                                     	jnz	data_already_defined
000090B2: E8 8D C5 FF FF                                        	call	allocate_structure_data
000090B7: 66 C7 03 E4 40                                        	mov	word [ebx],data_directive-instruction_handler
000090BC: 88 43 02                                              	mov	[ebx+2],al
000090BF: 8B 15 80 A1 01 00                                     	mov	edx,[current_line]
000090C5: 89 53 04                                              	mov	[ebx+4],edx
000090C8: E8 53 03 00 00                                        	call	generate_pe_data
000090CD: E9 A8 BE FF FF                                        	jmp	instruction_assembled
                                                                      end_data:
000090D2: 80 3D C9 A2 01 00 03                                  	cmp	[output_format],3
000090D9: 0F 85 55 78 FF FF                                     	jne	illegal_instruction
000090DF: E8 7C C5 FF FF                                        	call	find_structure_data
000090E4: 0F 82 A1 79 FF FF                                     	jc	unexpected_instruction
000090EA: 0F B6 43 02                                           	movzx	eax,byte [ebx+2]
000090EE: 8B 15 5C A2 01 00                                     	mov	edx,[current_section]
000090F4: 89 F9                                                 	mov	ecx,edi
000090F6: 2B 4A 14                                              	sub	ecx,[edx+14h]
000090F9: 03 4A 0C                                              	add	ecx,[edx+0Ch]
000090FC: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
00009102: F7 05 40 A2 01 00 04 00 00 00                         	test	[format_flags],4
0000910C: 75 0D                                                 	jnz	end_peplus_data
0000910E: 2B 4C C2 78                                           	sub	ecx,[edx+78h+eax*8]
00009112: 89 4C C2 7C                                           	mov	[edx+78h+eax*8+4],ecx
00009116: E9 8F C6 FF FF                                        	jmp	remove_structure_data
                                                                      end_peplus_data:
0000911B: 2B 8C C2 88 00 00 00                                  	sub	ecx,[edx+88h+eax*8]
00009122: 89 8C C2 8C 00 00 00                                  	mov	[edx+88h+eax*8+4],ecx
00009129: E9 7C C6 FF FF                                        	jmp	remove_structure_data
                                                                pe_entry:
0000912E: AC                                                    	lods	byte [esi]
0000912F: 3C 28                                                 	cmp	al,'('
00009131: 0F 85 F3 77 FF FF                                     	jne	invalid_argument
00009137: 80 3E 2E                                              	cmp	byte [esi],'.'
0000913A: 0F 84 6C 78 FF FF                                     	je	invalid_value
00009140: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000914A: 75 3E                                                 	jnz	pe64_entry
0000914C: E8 39 E2 FF FF                                        	call	get_dword_value
00009151: B3 02                                                 	mov	bl,2
00009153: 0F BA 25 44 A2 01 00 00                               	bt	[resolver_flags],0
0000915B: 72 02                                                 	jc	check_pe_entry_label_type
0000915D: 30 DB                                                 	xor	bl,bl
                                                                      check_pe_entry_label_type:
0000915F: 38 1D C0 A2 01 00                                     	cmp	[value_type],bl
00009165: 74 05                                                 	je	pe_entry_ok
00009167: E8 52 F4 FF FF                                        	call	recoverable_invalid_address
                                                                      pe_entry_ok:
0000916C: 99                                                    	cdq
0000916D: F7 05 40 A2 01 00 04 00 00 00                         	test	[format_flags],4
00009177: 75 31                                                 	jnz	pe64_entry_type_ok
00009179: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
0000917F: 2B 42 34                                              	sub	eax,[edx+34h]
00009182: 89 42 28                                              	mov	[edx+28h],eax
00009185: E9 F0 BD FF FF                                        	jmp	instruction_assembled
                                                                      pe64_entry:
0000918A: E8 96 E2 FF FF                                        	call	get_qword_value
0000918F: B3 04                                                 	mov	bl,4
00009191: 0F BA 25 44 A2 01 00 00                               	bt	[resolver_flags],0
00009199: 72 02                                                 	jc	check_pe64_entry_label_type
0000919B: 30 DB                                                 	xor	bl,bl
                                                                      check_pe64_entry_label_type:
0000919D: 38 1D C0 A2 01 00                                     	cmp	[value_type],bl
000091A3: 74 05                                                 	je	pe64_entry_type_ok
000091A5: E8 14 F4 FF FF                                        	call	recoverable_invalid_address
                                                                      pe64_entry_type_ok:
000091AA: 8B 0D 6C A1 01 00                                     	mov	ecx,[code_start]
000091B0: 2B 41 30                                              	sub	eax,[ecx+30h]
000091B3: 1B 51 34                                              	sbb	edx,[ecx+34h]
000091B6: 74 05                                                 	jz	pe64_entry_range_ok
000091B8: E8 3E E1 FF FF                                        	call	recoverable_overflow
                                                                      pe64_entry_range_ok:
000091BD: 89 41 28                                              	mov	[ecx+28h],eax
000091C0: E9 B5 BD FF FF                                        	jmp	instruction_assembled
                                                                pe_stack:
000091C5: AC                                                    	lods	byte [esi]
000091C6: 3C 28                                                 	cmp	al,'('
000091C8: 0F 85 5C 77 FF FF                                     	jne	invalid_argument
000091CE: 80 3E 2E                                              	cmp	byte [esi],'.'
000091D1: 0F 84 D5 77 FF FF                                     	je	invalid_value
000091D7: F7 05 40 A2 01 00 04 00 00 00                         	test	[format_flags],4
000091E1: 75 5F                                                 	jnz	peplus_stack
000091E3: E8 56 E2 FF FF                                        	call	get_count_value
000091E8: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
000091EE: 89 42 60                                              	mov	[edx+60h],eax
000091F1: 80 3E 2C                                              	cmp	byte [esi],','
000091F4: 75 2F                                                 	jne	default_stack_commit
000091F6: AC                                                    	lods	byte [esi]
000091F7: AC                                                    	lods	byte [esi]
000091F8: 3C 28                                                 	cmp	al,'('
000091FA: 0F 85 2A 77 FF FF                                     	jne	invalid_argument
00009200: 80 3E 2E                                              	cmp	byte [esi],'.'
00009203: 0F 84 A3 77 FF FF                                     	je	invalid_value
00009209: E8 30 E2 FF FF                                        	call	get_count_value
0000920E: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
00009214: 89 42 64                                              	mov	[edx+64h],eax
00009217: 3B 42 60                                              	cmp	eax,[edx+60h]
0000921A: 0F 87 96 77 FF FF                                     	ja	value_out_of_range
00009220: E9 55 BD FF FF                                        	jmp	instruction_assembled
                                                                      default_stack_commit:
00009225: C7 42 64 00 10 00 00                                  	mov	dword [edx+64h],1000h
0000922C: 8B 42 60                                              	mov	eax,[edx+60h]
0000922F: 3D 00 10 00 00                                        	cmp	eax,1000h
00009234: 0F 87 40 BD FF FF                                     	ja	instruction_assembled
0000923A: 89 42 64                                              	mov	dword [edx+64h],eax
0000923D: E9 38 BD FF FF                                        	jmp	instruction_assembled
                                                                      peplus_stack:
00009242: E8 DE E1 FF FF                                        	call	get_qword_value
00009247: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000924E: 0F 85 06 78 FF FF                                     	jne	invalid_use_of_symbol
00009254: 8B 0D 6C A1 01 00                                     	mov	ecx,[code_start]
0000925A: 89 41 60                                              	mov	[ecx+60h],eax
0000925D: 89 51 64                                              	mov	[ecx+64h],edx
00009260: 80 3E 2C                                              	cmp	byte [esi],','
00009263: 75 4E                                                 	jne	default_peplus_stack_commit
00009265: AC                                                    	lods	byte [esi]
00009266: AC                                                    	lods	byte [esi]
00009267: 3C 28                                                 	cmp	al,'('
00009269: 0F 85 BB 76 FF FF                                     	jne	invalid_argument
0000926F: 80 3E 2E                                              	cmp	byte [esi],'.'
00009272: 0F 84 34 77 FF FF                                     	je	invalid_value
00009278: E8 A8 E1 FF FF                                        	call	get_qword_value
0000927D: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
00009284: 0F 85 D0 77 FF FF                                     	jne	invalid_use_of_symbol
0000928A: 8B 0D 6C A1 01 00                                     	mov	ecx,[code_start]
00009290: 89 41 68                                              	mov	[ecx+68h],eax
00009293: 89 51 6C                                              	mov	[ecx+6Ch],edx
00009296: 3B 51 64                                              	cmp	edx,[ecx+64h]
00009299: 0F 87 17 77 FF FF                                     	ja	value_out_of_range
0000929F: 0F 82 D5 BC FF FF                                     	jb	instruction_assembled
000092A5: 3B 41 60                                              	cmp	eax,[ecx+60h]
000092A8: 0F 87 08 77 FF FF                                     	ja	value_out_of_range
000092AE: E9 C7 BC FF FF                                        	jmp	instruction_assembled
                                                                      default_peplus_stack_commit:
000092B3: C7 41 68 00 10 00 00                                  	mov	dword [ecx+68h],1000h
000092BA: 83 79 64 00                                           	cmp	dword [ecx+64h],0
000092BE: 0F 85 B6 BC FF FF                                     	jne	instruction_assembled
000092C4: 8B 41 60                                              	mov	eax,[ecx+60h]
000092C7: 3D 00 10 00 00                                        	cmp	eax,1000h
000092CC: 0F 87 A8 BC FF FF                                     	ja	instruction_assembled
000092D2: 89 41 68                                              	mov	dword [ecx+68h],eax
000092D5: E9 A0 BC FF FF                                        	jmp	instruction_assembled
                                                                pe_heap:
000092DA: AC                                                    	lods	byte [esi]
000092DB: 3C 28                                                 	cmp	al,'('
000092DD: 0F 85 47 76 FF FF                                     	jne	invalid_argument
000092E3: 80 3E 2E                                              	cmp	byte [esi],'.'
000092E6: 0F 84 C0 76 FF FF                                     	je	invalid_value
000092EC: F7 05 40 A2 01 00 04 00 00 00                         	test	[format_flags],4
000092F6: 75 46                                                 	jnz	peplus_heap
000092F8: E8 41 E1 FF FF                                        	call	get_count_value
000092FD: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
00009303: 89 42 68                                              	mov	[edx+68h],eax
00009306: 80 3E 2C                                              	cmp	byte [esi],','
00009309: 0F 85 6B BC FF FF                                     	jne	instruction_assembled
0000930F: AC                                                    	lods	byte [esi]
00009310: AC                                                    	lods	byte [esi]
00009311: 3C 28                                                 	cmp	al,'('
00009313: 0F 85 11 76 FF FF                                     	jne	invalid_argument
00009319: 80 3E 2E                                              	cmp	byte [esi],'.'
0000931C: 0F 84 8A 76 FF FF                                     	je	invalid_value
00009322: E8 17 E1 FF FF                                        	call	get_count_value
00009327: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
0000932D: 89 42 6C                                              	mov	[edx+6Ch],eax
00009330: 3B 42 68                                              	cmp	eax,[edx+68h]
00009333: 0F 87 7D 76 FF FF                                     	ja	value_out_of_range
00009339: E9 3C BC FF FF                                        	jmp	instruction_assembled
                                                                      peplus_heap:
0000933E: E8 E2 E0 FF FF                                        	call	get_qword_value
00009343: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000934A: 0F 85 0A 77 FF FF                                     	jne	invalid_use_of_symbol
00009350: 8B 0D 6C A1 01 00                                     	mov	ecx,[code_start]
00009356: 89 41 70                                              	mov	[ecx+70h],eax
00009359: 89 51 74                                              	mov	[ecx+74h],edx
0000935C: 80 3E 2C                                              	cmp	byte [esi],','
0000935F: 0F 85 15 BC FF FF                                     	jne	instruction_assembled
00009365: AC                                                    	lods	byte [esi]
00009366: AC                                                    	lods	byte [esi]
00009367: 3C 28                                                 	cmp	al,'('
00009369: 0F 85 BB 75 FF FF                                     	jne	invalid_argument
0000936F: 80 3E 2E                                              	cmp	byte [esi],'.'
00009372: 0F 84 34 76 FF FF                                     	je	invalid_value
00009378: E8 A8 E0 FF FF                                        	call	get_qword_value
0000937D: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
00009384: 0F 85 D0 76 FF FF                                     	jne	invalid_use_of_symbol
0000938A: 8B 0D 6C A1 01 00                                     	mov	ecx,[code_start]
00009390: 89 41 78                                              	mov	[ecx+78h],eax
00009393: 89 51 7C                                              	mov	[ecx+7Ch],edx
00009396: 3B 51 74                                              	cmp	edx,[ecx+74h]
00009399: 0F 87 17 76 FF FF                                     	ja	value_out_of_range
0000939F: 0F 82 D5 BB FF FF                                     	jb	instruction_assembled
000093A5: 3B 41 70                                              	cmp	eax,[ecx+70h]
000093A8: 0F 87 08 76 FF FF                                     	ja	value_out_of_range
000093AE: E9 C7 BB FF FF                                        	jmp	instruction_assembled
                                                                mark_pe_relocation:
000093B3: 50 53                                                 	push	eax ebx
000093B5: F7 05 40 A2 01 00 04 00 00 00                         	test	[format_flags],4
000093BF: 74 09                                                 	jz	check_standard_pe_relocation_type
000093C1: 80 3D C0 A2 01 00 04                                  	cmp	[value_type],4
000093C8: 74 0E                                                 	je	pe_relocation_type_ok
                                                                      check_standard_pe_relocation_type:
000093CA: 80 3D C0 A2 01 00 02                                  	cmp	[value_type],2
000093D1: 74 05                                                 	je	pe_relocation_type_ok
000093D3: E8 4A DF FF FF                                        	call	recoverable_misuse
                                                                      pe_relocation_type_ok:
000093D8: 8B 1D 5C A2 01 00                                     	mov	ebx,[current_section]
000093DE: 89 F8                                                 	mov	eax,edi
000093E0: 2B 43 14                                              	sub	eax,[ebx+14h]
000093E3: 03 43 0C                                              	add	eax,[ebx+0Ch]
000093E6: 8B 1D 64 A1 01 00                                     	mov	ebx,[free_additional_memory]
000093EC: FF 05 4C A2 01 00                                     	inc	[number_of_relocations]
000093F2: 83 C3 05                                              	add	ebx,5
000093F5: 3B 1D F4 A1 01 00                                     	cmp	ebx,[structures_buffer]
000093FB: 0F 83 9B 74 FF FF                                     	jae	out_of_memory
00009401: 89 1D 64 A1 01 00                                     	mov	[free_additional_memory],ebx
00009407: 89 43 FB                                              	mov	[ebx-5],eax
0000940A: 80 3D C0 A2 01 00 02                                  	cmp	[value_type],2
00009411: 74 06                                                 	je	fixup_32bit
00009413: C6 43 FF 0A                                           	mov	byte [ebx-1],0Ah
00009417: EB 04                                                 	jmp	fixup_ok
                                                                      fixup_32bit:
00009419: C6 43 FF 03                                           	mov	byte [ebx-1],3
                                                                      fixup_ok:
0000941D: 5B 58                                                 	pop	ebx eax
0000941F: C3                                                    	ret
                                                                generate_pe_data:
00009420: 3C 02                                                 	cmp	al,2
00009422: 0F 84 D0 00 00 00                                     	je	make_pe_resource
00009428: 3C 05                                                 	cmp	al,5
0000942A: 74 01                                                 	je	make_pe_fixups
0000942C: C3                                                    	ret
                                                                make_pe_fixups:
0000942D: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
00009433: 80 62 16 FE                                           	and	byte [edx+16h],not 1
00009437: 80 4A 5E 40                                           	or	byte [edx+5Eh],40h
0000943B: 0F BA 2D 44 A2 01 00 00                               	bts	[resolver_flags],0
00009443: 72 07                                                 	jc	fixups_ready
00009445: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      fixups_ready:
0000944C: 83 25 88 A2 01 00 00                                  	and	[last_fixup_base],0
00009453: E8 1E 00 00 00                                        	call	make_fixups
00009458: 87 05 7C A2 01 00                                     	xchg	eax,[actual_fixups_size]
0000945E: 2B 05 7C A2 01 00                                     	sub	eax,[actual_fixups_size]
00009464: 77 02                                                 	ja	reserve_forward_fixups
00009466: 31 C0                                                 	xor	eax,eax
                                                                      reserve_forward_fixups:
00009468: 89 3D 80 A2 01 00                                     	mov	[reserved_fixups],edi
0000946E: 01 C7                                                 	add	edi,eax
00009470: A3 84 A2 01 00                                        	mov	[reserved_fixups_size],eax
00009475: C3                                                    	ret
                                                                      make_fixups:
00009476: 56                                                    	push	esi
00009477: 31 C9                                                 	xor	ecx,ecx
00009479: 87 0D 4C A2 01 00                                     	xchg	ecx,[number_of_relocations]
0000947F: 8B 35 64 A1 01 00                                     	mov	esi,[free_additional_memory]
00009485: 8D 04 89                                              	lea	eax,[ecx*5]
00009488: 29 C6                                                 	sub	esi,eax
0000948A: 89 35 64 A1 01 00                                     	mov	[free_additional_memory],esi
00009490: 8B 15 88 A2 01 00                                     	mov	edx,[last_fixup_base]
00009496: 8B 1D 8C A2 01 00                                     	mov	ebx,[last_fixup_header]
0000949C: 89 FD                                                 	mov	ebp,edi
0000949E: E3 46                                                 	jecxz	fixups_done
                                                                      make_fixup:
000094A0: 39 16                                                 	cmp	[esi],edx
000094A2: 72 28                                                 	jb	store_fixup
000094A4: 89 F8                                                 	mov	eax,edi
000094A6: 29 E8                                                 	sub	eax,ebp
000094A8: A9 03 00 00 00                                        	test	eax,11b
000094AD: 74 08                                                 	jz	fixups_block
000094AF: 66 31 C0                                              	xor	ax,ax
000094B2: 66 AB                                                 	stos	word [edi]
000094B4: 83 03 02                                              	add	dword [ebx],2
                                                                      fixups_block:
000094B7: 89 D0                                                 	mov	eax,edx
000094B9: 81 C2 00 10 00 00                                     	add	edx,1000h
000094BF: 39 16                                                 	cmp	[esi],edx
000094C1: 73 F4                                                 	jae	fixups_block
000094C3: AB                                                    	stos	dword [edi]
000094C4: 89 FB                                                 	mov	ebx,edi
000094C6: B8 08 00 00 00                                        	mov	eax,8
000094CB: AB                                                    	stos	dword [edi]
                                                                      store_fixup:
000094CC: 83 03 02                                              	add	dword [ebx],2
000094CF: 8A 66 01                                              	mov	ah,[esi+1]
000094D2: 80 E4 0F                                              	and	ah,0Fh
000094D5: 8A 46 04                                              	mov	al,[esi+4]
000094D8: C0 E0 04                                              	shl	al,4
000094DB: 08 C4                                                 	or	ah,al
000094DD: 8A 06                                                 	mov	al,[esi]
000094DF: 66 AB                                                 	stos	word [edi]
000094E1: 83 C6 05                                              	add	esi,5
000094E4: E2 BA                                                 	loop	make_fixup
                                                                      fixups_done:
000094E6: 89 15 88 A2 01 00                                     	mov	[last_fixup_base],edx
000094EC: 89 1D 8C A2 01 00                                     	mov	[last_fixup_header],ebx
000094F2: 5E                                                    	pop	esi
000094F3: 89 F8                                                 	mov	eax,edi
000094F5: 29 E8                                                 	sub	eax,ebp
000094F7: C3                                                    	ret
                                                                make_pe_resource:
000094F8: 80 3E 82                                              	cmp	byte [esi],82h
000094FB: 0F 85 07 06 00 00                                     	jne	resource_done
00009501: 46                                                    	inc	esi
00009502: 66 AD                                                 	lods	word [esi]
00009504: 66 83 F8 28                                           	cmp	ax,'('
00009508: 0F 85 1C 74 FF FF                                     	jne	invalid_argument
0000950E: AD                                                    	lods	dword [esi]
0000950F: 89 F2                                                 	mov	edx,esi
00009511: 8D 74 06 01                                           	lea	esi,[esi+eax+1]
00009515: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
0000951C: 74 28                                                 	je	resource_from_file
0000951E: 66 83 3D 5E A1 01 00 00                               	cmp	[current_pass],0
00009526: 75 07                                                 	jne	reserve_space_for_resource
00009528: 83 25 78 A2 01 00 00                                  	and	[resource_size],0
                                                                      reserve_space_for_resource:
0000952F: 03 3D 78 A2 01 00                                     	add	edi,[resource_size]
00009535: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
0000953B: 0F 87 5B 73 FF FF                                     	ja	out_of_memory
00009541: E9 C2 05 00 00                                        	jmp	resource_done
                                                                      resource_from_file:
00009546: 56                                                    	push	esi
00009547: 89 D6                                                 	mov	esi,edx
00009549: E8 B0 CB FF FF                                        	call	open_binary_file
0000954E: 53                                                    	push	ebx
0000954F: 8B 35 64 A1 01 00                                     	mov	esi,[free_additional_memory]
00009555: 8D 46 20                                              	lea	eax,[esi+20h]
00009558: 3B 05 F4 A1 01 00                                     	cmp	eax,[structures_buffer]
0000955E: 0F 87 38 73 FF FF                                     	ja	out_of_memory
00009564: 89 F2                                                 	mov	edx,esi
00009566: B9 20 00 00 00                                        	mov	ecx,20h
0000956B: E8 58 6E FF FF                                        	call	read
00009570: 0F 82 8C 73 FF FF                                     	jc	invalid_file_format
00009576: 31 C0                                                 	xor	eax,eax
00009578: 39 06                                                 	cmp	[esi],eax
0000957A: 0F 85 82 73 FF FF                                     	jne	invalid_file_format
00009580: 66 B8 FF FF                                           	mov	ax,0FFFFh
00009584: 39 46 08                                              	cmp	[esi+8],eax
00009587: 0F 85 75 73 FF FF                                     	jne	invalid_file_format
0000958D: 39 46 0C                                              	cmp	[esi+12],eax
00009590: 0F 85 6C 73 FF FF                                     	jne	invalid_file_format
00009596: B8 20 00 00 00                                        	mov	eax,20h
0000959B: 39 46 04                                              	cmp	[esi+4],eax
0000959E: 0F 85 5E 73 FF FF                                     	jne	invalid_file_format
                                                                      read_resource_headers:
000095A4: A9 03 00 00 00                                        	test	eax,11b
000095A9: 74 17                                                 	jz	resource_file_alignment_ok
000095AB: BA 04 00 00 00                                        	mov	edx,4
000095B0: 83 E0 03                                              	and	eax,11b
000095B3: 29 C2                                                 	sub	edx,eax
000095B5: B0 01                                                 	mov	al,1
000095B7: E8 30 6E FF FF                                        	call	lseek
000095BC: 0F 82 8D 00 00 00                                     	jc	resource_headers_ok
                                                                      resource_file_alignment_ok:
000095C2: 89 06                                                 	mov	[esi],eax
000095C4: 8D 56 0C                                              	lea	edx,[esi+12]
000095C7: B9 08 00 00 00                                        	mov	ecx,8
000095CC: E8 F7 6D FF FF                                        	call	read
000095D1: 72 7C                                                 	jc	resource_headers_ok
000095D3: 8B 4E 10                                              	mov	ecx,[esi+16]
000095D6: 01 0E                                                 	add	[esi],ecx
000095D8: 8D 56 14                                              	lea	edx,[esi+20]
000095DB: 83 E9 08                                              	sub	ecx,8
000095DE: 89 4E 10                                              	mov	[esi+16],ecx
000095E1: 8D 04 0A                                              	lea	eax,[edx+ecx]
000095E4: 3B 05 F4 A1 01 00                                     	cmp	eax,[structures_buffer]
000095EA: 0F 87 AC 72 FF FF                                     	ja	out_of_memory
000095F0: E8 D3 6D FF FF                                        	call	read
000095F5: 0F 82 07 73 FF FF                                     	jc	invalid_file_format
000095FB: 8B 16                                                 	mov	edx,[esi]
000095FD: 03 56 0C                                              	add	edx,[esi+12]
00009600: 8B 46 10                                              	mov	eax,[esi+16]
00009603: 8D 4E 14                                              	lea	ecx,[esi+20]
00009606: 8D 34 01                                              	lea	esi,[ecx+eax]
00009609: 83 C1 02                                              	add	ecx,2
0000960C: 66 83 79 FE FF                                        	cmp	word [ecx-2],0FFFFh
00009611: 74 13                                                 	je	resource_header_type_ok
                                                                      check_resource_header_type:
00009613: 39 F1                                                 	cmp	ecx,esi
00009615: 0F 83 E7 72 FF FF                                     	jae	invalid_file_format
0000961B: 66 83 39 00                                           	cmp	word [ecx],0
0000961F: 74 05                                                 	je	resource_header_type_ok
00009621: 83 C1 02                                              	add	ecx,2
00009624: EB ED                                                 	jmp	check_resource_header_type
                                                                      resource_header_type_ok:
00009626: 83 C1 02                                              	add	ecx,2
00009629: 66 83 39 FF                                           	cmp	word [ecx],0FFFFh
0000962D: 74 13                                                 	je	resource_header_name_ok
                                                                      check_resource_header_name:
0000962F: 39 F1                                                 	cmp	ecx,esi
00009631: 0F 83 CB 72 FF FF                                     	jae	invalid_file_format
00009637: 66 83 39 00                                           	cmp	word [ecx],0
0000963B: 74 05                                                 	je	resource_header_name_ok
0000963D: 83 C1 02                                              	add	ecx,2
00009640: EB ED                                                 	jmp	check_resource_header_name
                                                                      resource_header_name_ok:
00009642: 30 C0                                                 	xor	al,al
00009644: E8 A3 6D FF FF                                        	call	lseek
00009649: 0F 83 55 FF FF FF                                     	jnc	read_resource_headers
                                                                      resource_headers_ok:
0000964F: 3B 35 64 A1 01 00                                     	cmp	esi,[free_additional_memory]
00009655: 0F 84 A7 72 FF FF                                     	je	invalid_file_format
0000965B: 31 C0                                                 	xor	eax,eax
0000965D: 89 06                                                 	mov	[esi],eax
0000965F: 89 3D 74 A2 01 00                                     	mov	[resource_data],edi
00009665: 8D 47 10                                              	lea	eax,[edi+16]
00009668: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
0000966E: 0F 83 28 72 FF FF                                     	jae	out_of_memory
00009674: 31 C0                                                 	xor	eax,eax
00009676: AB                                                    	stos	dword [edi]
00009677: E8 4B 70 FF FF                                        	call	make_timestamp
0000967C: AB                                                    	stos	dword [edi]
0000967D: 31 C0                                                 	xor	eax,eax
0000967F: AB                                                    	stos	dword [edi]
00009680: AB                                                    	stos	dword [edi]
00009681: 31 DB                                                 	xor	ebx,ebx
                                                                      make_type_name_directory:
00009683: 8B 35 64 A1 01 00                                     	mov	esi,[free_additional_memory]
00009689: 31 D2                                                 	xor	edx,edx
                                                                      find_type_name:
0000968B: 83 3E 00                                              	cmp	dword [esi],0
0000968E: 74 57                                                 	je	type_name_ok
00009690: 83 C6 14                                              	add	esi,20
00009693: 66 83 3E FF                                           	cmp	word [esi],0FFFFh
00009697: 74 47                                                 	je	check_next_type_name
00009699: 09 DB                                                 	or	ebx,ebx
0000969B: 74 1D                                                 	jz	check_this_type_name
0000969D: 31 C9                                                 	xor	ecx,ecx
                                                                      compare_with_previous_type_name:
0000969F: 66 8B 04 0E                                           	mov	ax,[esi+ecx]
000096A3: 66 3B 04 0B                                           	cmp	ax,[ebx+ecx]
000096A7: 77 11                                                 	ja	check_this_type_name
000096A9: 72 35                                                 	jb	check_next_type_name
000096AB: 83 C1 02                                              	add	ecx,2
000096AE: 66 8B 04 0E                                           	mov	ax,[esi+ecx]
000096B2: 66 0B 04 0B                                           	or	ax,[ebx+ecx]
000096B6: 75 E7                                                 	jnz	compare_with_previous_type_name
000096B8: EB 26                                                 	jmp	check_next_type_name
                                                                      check_this_type_name:
000096BA: 09 D2                                                 	or	edx,edx
000096BC: 74 1D                                                 	jz	type_name_found
000096BE: 31 C9                                                 	xor	ecx,ecx
                                                                      compare_with_current_type_name:
000096C0: 66 8B 04 0E                                           	mov	ax,[esi+ecx]
000096C4: 66 3B 04 0A                                           	cmp	ax,[edx+ecx]
000096C8: 77 16                                                 	ja	check_next_type_name
000096CA: 72 0F                                                 	jb	type_name_found
000096CC: 83 C1 02                                              	add	ecx,2
000096CF: 66 8B 04 0E                                           	mov	ax,[esi+ecx]
000096D3: 66 0B 04 0A                                           	or	ax,[edx+ecx]
000096D7: 75 E7                                                 	jnz	compare_with_current_type_name
000096D9: EB 02                                                 	jmp	same_type_name
                                                                      type_name_found:
000096DB: 89 F2                                                 	mov	edx,esi
                                                                      same_type_name:
000096DD: 89 7E F0                                              	mov	[esi-16],edi
                                                                      check_next_type_name:
000096E0: 8B 46 FC                                              	mov	eax,[esi-4]
000096E3: 01 C6                                                 	add	esi,eax
000096E5: EB A4                                                 	jmp	find_type_name
                                                                      type_name_ok:
000096E7: 09 D2                                                 	or	edx,edx
000096E9: 74 25                                                 	jz	type_name_directory_done
000096EB: 89 D3                                                 	mov	ebx,edx
                                                                      make_type_name_entry:
000096ED: A1 74 A2 01 00                                        	mov	eax,[resource_data]
000096F2: 66 FF 40 0C                                           	inc	word [eax+12]
000096F6: 8D 47 08                                              	lea	eax,[edi+8]
000096F9: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
000096FF: 0F 83 97 71 FF FF                                     	jae	out_of_memory
00009705: 89 D8                                                 	mov	eax,ebx
00009707: AB                                                    	stos	dword [edi]
00009708: 31 C0                                                 	xor	eax,eax
0000970A: AB                                                    	stos	dword [edi]
0000970B: E9 73 FF FF FF                                        	jmp	make_type_name_directory
                                                                      type_name_directory_done:
00009710: BB FF FF FF FF                                        	mov	ebx,-1
                                                                      make_type_id_directory:
00009715: 8B 35 64 A1 01 00                                     	mov	esi,[free_additional_memory]
0000971B: BA 00 00 01 00                                        	mov	edx,10000h
                                                                      find_type_id:
00009720: 83 3E 00                                              	cmp	dword [esi],0
00009723: 74 21                                                 	je	type_id_ok
00009725: 83 C6 14                                              	add	esi,20
00009728: 66 83 3E FF                                           	cmp	word [esi],0FFFFh
0000972C: 75 11                                                 	jne	check_next_type_id
0000972E: 0F B7 46 02                                           	movzx	eax,word [esi+2]
00009732: 39 D8                                                 	cmp	eax,ebx
00009734: 7E 09                                                 	jle	check_next_type_id
00009736: 39 D0                                                 	cmp	eax,edx
00009738: 7F 05                                                 	jg	check_next_type_id
0000973A: 89 C2                                                 	mov	edx,eax
0000973C: 89 7E F0                                              	mov	[esi-16],edi
                                                                      check_next_type_id:
0000973F: 8B 46 FC                                              	mov	eax,[esi-4]
00009742: 01 C6                                                 	add	esi,eax
00009744: EB DA                                                 	jmp	find_type_id
                                                                      type_id_ok:
00009746: 81 FA 00 00 01 00                                     	cmp	edx,10000h
0000974C: 74 22                                                 	je	type_id_directory_done
0000974E: 89 D3                                                 	mov	ebx,edx
                                                                      make_type_id_entry:
00009750: A1 74 A2 01 00                                        	mov	eax,[resource_data]
00009755: 66 FF 40 0E                                           	inc	word [eax+14]
00009759: 8D 47 08                                              	lea	eax,[edi+8]
0000975C: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
00009762: 0F 83 34 71 FF FF                                     	jae	out_of_memory
00009768: 89 D8                                                 	mov	eax,ebx
0000976A: AB                                                    	stos	dword [edi]
0000976B: 31 C0                                                 	xor	eax,eax
0000976D: AB                                                    	stos	dword [edi]
0000976E: EB A5                                                 	jmp	make_type_id_directory
                                                                      type_id_directory_done:
00009770: 8B 35 74 A2 01 00                                     	mov	esi,[resource_data]
00009776: 83 C6 10                                              	add	esi,10h
00009779: 8B 4E FC                                              	mov	ecx,[esi-4]
0000977C: 66 09 C9                                              	or	cx,cx
0000977F: 0F 84 67 01 00 00                                     	jz	resource_directories_ok
                                                                      make_resource_directories:
00009785: 51                                                    	push	ecx
00009786: 57                                                    	push	edi
00009787: 89 FA                                                 	mov	edx,edi
00009789: 2B 15 74 A2 01 00                                     	sub	edx,[resource_data]
0000978F: 0F BA EA 1F                                           	bts	edx,31
00009793: 89 56 04                                              	mov	[esi+4],edx
00009796: 8D 47 10                                              	lea	eax,[edi+16]
00009799: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
0000979F: 0F 83 F7 70 FF FF                                     	jae	out_of_memory
000097A5: 31 C0                                                 	xor	eax,eax
000097A7: AB                                                    	stos	dword [edi]
000097A8: E8 1A 6F FF FF                                        	call	make_timestamp
000097AD: AB                                                    	stos	dword [edi]
000097AE: 31 C0                                                 	xor	eax,eax
000097B0: AB                                                    	stos	dword [edi]
000097B1: AB                                                    	stos	dword [edi]
000097B2: 89 F5                                                 	mov	ebp,esi
000097B4: 31 DB                                                 	xor	ebx,ebx
                                                                      make_resource_name_directory:
000097B6: 8B 35 64 A1 01 00                                     	mov	esi,[free_additional_memory]
000097BC: 31 D2                                                 	xor	edx,edx
                                                                      find_resource_name:
000097BE: 83 3E 00                                              	cmp	dword [esi],0
000097C1: 0F 84 80 00 00 00                                     	je	resource_name_ok
000097C7: 56                                                    	push	esi
000097C8: 39 6E 04                                              	cmp	[esi+4],ebp
000097CB: 75 6D                                                 	jne	check_next_resource_name
000097CD: 83 C6 14                                              	add	esi,20
000097D0: E8 27 00 00 00                                        	call	skip_resource_name
000097D5: 66 83 3E FF                                           	cmp	word [esi],0FFFFh
000097D9: 74 5F                                                 	je	check_next_resource_name
000097DB: 09 DB                                                 	or	ebx,ebx
000097DD: 74 32                                                 	jz	check_this_resource_name
000097DF: 31 C9                                                 	xor	ecx,ecx
                                                                      compare_with_previous_resource_name:
000097E1: 66 8B 04 0E                                           	mov	ax,[esi+ecx]
000097E5: 66 3B 04 0B                                           	cmp	ax,[ebx+ecx]
000097E9: 77 26                                                 	ja	check_this_resource_name
000097EB: 72 4D                                                 	jb	check_next_resource_name
000097ED: 83 C1 02                                              	add	ecx,2
000097F0: 66 8B 04 0E                                           	mov	ax,[esi+ecx]
000097F4: 66 0B 04 0B                                           	or	ax,[ebx+ecx]
000097F8: 75 E7                                                 	jnz	compare_with_previous_resource_name
000097FA: EB 3E                                                 	jmp	check_next_resource_name
                                                                      skip_resource_name:
000097FC: 66 83 3E FF                                           	cmp	word [esi],0FFFFh
00009800: 75 04                                                 	jne	skip_unicode_string
00009802: 83 C6 04                                              	add	esi,4
00009805: C3                                                    	ret
                                                                      skip_unicode_string:
00009806: 83 C6 02                                              	add	esi,2
00009809: 66 83 7E FE 00                                        	cmp	word [esi-2],0
0000980E: 75 F6                                                 	jne	skip_unicode_string
00009810: C3                                                    	ret
                                                                      check_this_resource_name:
00009811: 09 D2                                                 	or	edx,edx
00009813: 74 1D                                                 	jz	resource_name_found
00009815: 31 C9                                                 	xor	ecx,ecx
                                                                      compare_with_current_resource_name:
00009817: 66 8B 04 0E                                           	mov	ax,[esi+ecx]
0000981B: 66 3B 04 0A                                           	cmp	ax,[edx+ecx]
0000981F: 77 19                                                 	ja	check_next_resource_name
00009821: 72 0F                                                 	jb	resource_name_found
00009823: 83 C1 02                                              	add	ecx,2
00009826: 66 8B 04 0E                                           	mov	ax,[esi+ecx]
0000982A: 66 0B 04 0A                                           	or	ax,[edx+ecx]
0000982E: 75 E7                                                 	jnz	compare_with_current_resource_name
00009830: EB 02                                                 	jmp	same_resource_name
                                                                      resource_name_found:
00009832: 89 F2                                                 	mov	edx,esi
                                                                      same_resource_name:
00009834: 8B 04 24                                              	mov	eax,[esp]
00009837: 89 78 08                                              	mov	[eax+8],edi
                                                                      check_next_resource_name:
0000983A: 5E                                                    	pop	esi
0000983B: 8B 46 10                                              	mov	eax,[esi+16]
0000983E: 8D 74 06 14                                           	lea	esi,[esi+20+eax]
00009842: E9 77 FF FF FF                                        	jmp	find_resource_name
                                                                      resource_name_ok:
00009847: 09 D2                                                 	or	edx,edx
00009849: 74 23                                                 	jz	resource_name_directory_done
0000984B: 89 D3                                                 	mov	ebx,edx
                                                                      make_resource_name_entry:
0000984D: 8B 04 24                                              	mov	eax,[esp]
00009850: 66 FF 40 0C                                           	inc	word [eax+12]
00009854: 8D 47 08                                              	lea	eax,[edi+8]
00009857: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
0000985D: 0F 83 39 70 FF FF                                     	jae	out_of_memory
00009863: 89 D8                                                 	mov	eax,ebx
00009865: AB                                                    	stos	dword [edi]
00009866: 31 C0                                                 	xor	eax,eax
00009868: AB                                                    	stos	dword [edi]
00009869: E9 48 FF FF FF                                        	jmp	make_resource_name_directory
                                                                      resource_name_directory_done:
0000986E: BB FF FF FF FF                                        	mov	ebx,-1
                                                                      make_resource_id_directory:
00009873: 8B 35 64 A1 01 00                                     	mov	esi,[free_additional_memory]
00009879: BA 00 00 01 00                                        	mov	edx,10000h
                                                                      find_resource_id:
0000987E: 83 3E 00                                              	cmp	dword [esi],0
00009881: 74 32                                                 	je	resource_id_ok
00009883: 56                                                    	push	esi
00009884: 39 6E 04                                              	cmp	[esi+4],ebp
00009887: 75 22                                                 	jne	check_next_resource_id
00009889: 83 C6 14                                              	add	esi,20
0000988C: E8 6B FF FF FF                                        	call	skip_resource_name
00009891: 66 83 3E FF                                           	cmp	word [esi],0FFFFh
00009895: 75 14                                                 	jne	check_next_resource_id
00009897: 0F B7 46 02                                           	movzx	eax,word [esi+2]
0000989B: 39 D8                                                 	cmp	eax,ebx
0000989D: 7E 0C                                                 	jle	check_next_resource_id
0000989F: 39 D0                                                 	cmp	eax,edx
000098A1: 7F 08                                                 	jg	check_next_resource_id
000098A3: 89 C2                                                 	mov	edx,eax
000098A5: 8B 04 24                                              	mov	eax,[esp]
000098A8: 89 78 08                                              	mov	[eax+8],edi
                                                                      check_next_resource_id:
000098AB: 5E                                                    	pop	esi
000098AC: 8B 46 10                                              	mov	eax,[esi+16]
000098AF: 8D 74 06 14                                           	lea	esi,[esi+20+eax]
000098B3: EB C9                                                 	jmp	find_resource_id
                                                                      resource_id_ok:
000098B5: 81 FA 00 00 01 00                                     	cmp	edx,10000h
000098BB: 74 20                                                 	je	resource_id_directory_done
000098BD: 89 D3                                                 	mov	ebx,edx
                                                                      make_resource_id_entry:
000098BF: 8B 04 24                                              	mov	eax,[esp]
000098C2: 66 FF 40 0E                                           	inc	word [eax+14]
000098C6: 8D 47 08                                              	lea	eax,[edi+8]
000098C9: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
000098CF: 0F 83 C7 6F FF FF                                     	jae	out_of_memory
000098D5: 89 D8                                                 	mov	eax,ebx
000098D7: AB                                                    	stos	dword [edi]
000098D8: 31 C0                                                 	xor	eax,eax
000098DA: AB                                                    	stos	dword [edi]
000098DB: EB 96                                                 	jmp	make_resource_id_directory
                                                                      resource_id_directory_done:
000098DD: 58                                                    	pop	eax
000098DE: 89 EE                                                 	mov	esi,ebp
000098E0: 59                                                    	pop	ecx
000098E1: 83 C6 08                                              	add	esi,8
000098E4: 66 49                                                 	dec	cx
000098E6: 0F 85 99 FE FF FF                                     	jnz	make_resource_directories
                                                                      resource_directories_ok:
000098EC: C1 E9 10                                              	shr	ecx,16
000098EF: 0F 85 90 FE FF FF                                     	jnz	make_resource_directories
000098F5: 8B 35 74 A2 01 00                                     	mov	esi,[resource_data]
000098FB: 83 C6 10                                              	add	esi,10h
000098FE: 0F B7 46 FC                                           	movzx	eax,word [esi-4]
00009902: 0F B7 56 FE                                           	movzx	edx,word [esi-2]
00009906: 01 D0                                                 	add	eax,edx
00009908: 8D 34 C6                                              	lea	esi,[esi+eax*8]
0000990B: 57                                                    	push	edi			; address of language directories
                                                                      update_resource_directories:
0000990C: 3B 34 24                                              	cmp	esi,[esp]
0000990F: 0F 84 D9 00 00 00                                     	je	resource_directories_updated
00009915: 83 C6 10                                              	add	esi,10h
00009918: 8B 4E FC                                              	mov	ecx,[esi-4]
0000991B: 66 09 C9                                              	or	cx,cx
0000991E: 0F 84 BC 00 00 00                                     	jz	language_directories_ok
                                                                      make_language_directories:
00009924: 51                                                    	push	ecx
00009925: 57                                                    	push	edi
00009926: 89 FA                                                 	mov	edx,edi
00009928: 2B 15 74 A2 01 00                                     	sub	edx,[resource_data]
0000992E: 0F BA EA 1F                                           	bts	edx,31
00009932: 89 56 04                                              	mov	[esi+4],edx
00009935: 8D 47 10                                              	lea	eax,[edi+16]
00009938: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
0000993E: 0F 83 58 6F FF FF                                     	jae	out_of_memory
00009944: 31 C0                                                 	xor	eax,eax
00009946: AB                                                    	stos	dword [edi]
00009947: E8 7B 6D FF FF                                        	call	make_timestamp
0000994C: AB                                                    	stos	dword [edi]
0000994D: 31 C0                                                 	xor	eax,eax
0000994F: AB                                                    	stos	dword [edi]
00009950: AB                                                    	stos	dword [edi]
00009951: 89 F5                                                 	mov	ebp,esi
00009953: BB FF FF FF FF                                        	mov	ebx,-1
                                                                      make_language_id_directory:
00009958: 8B 35 64 A1 01 00                                     	mov	esi,[free_additional_memory]
0000995E: BA 00 00 01 00                                        	mov	edx,10000h
                                                                      find_language_id:
00009963: 83 3E 00                                              	cmp	dword [esi],0
00009966: 74 3E                                                 	je	language_id_ok
00009968: 56                                                    	push	esi
00009969: 39 6E 08                                              	cmp	[esi+8],ebp
0000996C: 75 2E                                                 	jne	check_next_language_id
0000996E: 83 C6 14                                              	add	esi,20
00009971: 89 F0                                                 	mov	eax,esi
00009973: E8 84 FE FF FF                                        	call	skip_resource_name
00009978: E8 7F FE FF FF                                        	call	skip_resource_name
0000997D: F7 D8                                                 	neg	eax
0000997F: 01 F0                                                 	add	eax,esi
00009981: 83 E0 03                                              	and	eax,11b
00009984: 01 C6                                                 	add	esi,eax
                                                                      get_language_id:
00009986: 0F B7 46 06                                           	movzx	eax,word [esi+6]
0000998A: 39 D8                                                 	cmp	eax,ebx
0000998C: 7E 0E                                                 	jle	check_next_language_id
0000998E: 39 D0                                                 	cmp	eax,edx
00009990: 7D 0A                                                 	jge	check_next_language_id
00009992: 89 C2                                                 	mov	edx,eax
00009994: 8B 04 24                                              	mov	eax,[esp]
00009997: A3 00 A2 01 00                                        	mov	dword [value],eax
                                                                      check_next_language_id:
0000999C: 5E                                                    	pop	esi
0000999D: 8B 46 10                                              	mov	eax,[esi+16]
000099A0: 8D 74 06 14                                           	lea	esi,[esi+20+eax]
000099A4: EB BD                                                 	jmp	find_language_id
                                                                      language_id_ok:
000099A6: 81 FA 00 00 01 00                                     	cmp	edx,10000h
000099AC: 74 23                                                 	je	language_id_directory_done
000099AE: 89 D3                                                 	mov	ebx,edx
                                                                      make_language_id_entry:
000099B0: 8B 04 24                                              	mov	eax,[esp]
000099B3: 66 FF 40 0E                                           	inc	word [eax+14]
000099B7: 8D 47 08                                              	lea	eax,[edi+8]
000099BA: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
000099C0: 0F 83 D6 6E FF FF                                     	jae	out_of_memory
000099C6: 89 D8                                                 	mov	eax,ebx
000099C8: AB                                                    	stos	dword [edi]
000099C9: A1 00 A2 01 00                                        	mov	eax,dword [value]
000099CE: AB                                                    	stos	dword [edi]
000099CF: EB 87                                                 	jmp	make_language_id_directory
                                                                      language_id_directory_done:
000099D1: 58                                                    	pop	eax
000099D2: 89 EE                                                 	mov	esi,ebp
000099D4: 59                                                    	pop	ecx
000099D5: 83 C6 08                                              	add	esi,8
000099D8: 66 49                                                 	dec	cx
000099DA: 0F 85 44 FF FF FF                                     	jnz	make_language_directories
                                                                      language_directories_ok:
000099E0: C1 E9 10                                              	shr	ecx,16
000099E3: 0F 85 3B FF FF FF                                     	jnz	make_language_directories
000099E9: E9 1E FF FF FF                                        	jmp	update_resource_directories
                                                                      resource_directories_updated:
000099EE: 8B 35 74 A2 01 00                                     	mov	esi,[resource_data]
000099F4: 57                                                    	push	edi
                                                                      make_name_strings:
000099F5: 83 C6 10                                              	add	esi,10h
000099F8: 0F B7 46 FE                                           	movzx	eax,word [esi-2]
000099FC: 0F B7 4E FC                                           	movzx	ecx,word [esi-4]
00009A00: 01 C8                                                 	add	eax,ecx
00009A02: 8D 04 C6                                              	lea	eax,[esi+eax*8]
00009A05: 50                                                    	push	eax
00009A06: 09 C9                                                 	or	ecx,ecx
00009A08: 74 3D                                                 	jz	string_entries_processed
                                                                      process_string_entries:
00009A0A: 51                                                    	push	ecx
00009A0B: 89 FA                                                 	mov	edx,edi
00009A0D: 2B 15 74 A2 01 00                                     	sub	edx,[resource_data]
00009A13: 0F BA EA 1F                                           	bts	edx,31
00009A17: 87 16                                                 	xchg	[esi],edx
00009A19: 89 FB                                                 	mov	ebx,edi
00009A1B: 66 31 C0                                              	xor	ax,ax
00009A1E: 66 AB                                                 	stos	word [edi]
                                                                      copy_string_data:
00009A20: 8D 47 02                                              	lea	eax,[edi+2]
00009A23: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
00009A29: 0F 83 6D 6E FF FF                                     	jae	out_of_memory
00009A2F: 66 8B 02                                              	mov	ax,[edx]
00009A32: 66 09 C0                                              	or	ax,ax
00009A35: 74 0A                                                 	jz	string_data_copied
00009A37: 66 AB                                                 	stos	word [edi]
00009A39: 66 FF 03                                              	inc	word [ebx]
00009A3C: 83 C2 02                                              	add	edx,2
00009A3F: EB DF                                                 	jmp	copy_string_data
                                                                      string_data_copied:
00009A41: 83 C6 08                                              	add	esi,8
00009A44: 59                                                    	pop	ecx
00009A45: E2 C3                                                 	loop	process_string_entries
                                                                      string_entries_processed:
00009A47: 5E                                                    	pop	esi
00009A48: 3B 34 24                                              	cmp	esi,[esp]
00009A4B: 72 A8                                                 	jb	make_name_strings
00009A4D: 89 F8                                                 	mov	eax,edi
00009A4F: 2B 05 74 A2 01 00                                     	sub	eax,[resource_data]
00009A55: A8 03                                                 	test	al,11b
00009A57: 74 05                                                 	jz	resource_strings_alignment_ok
00009A59: 66 31 C0                                              	xor	ax,ax
00009A5C: 66 AB                                                 	stos	word [edi]
                                                                      resource_strings_alignment_ok:
00009A5E: 5A                                                    	pop	edx
00009A5F: 5B                                                    	pop	ebx			; address of language directories
00009A60: 89 FD                                                 	mov	ebp,edi
                                                                      update_language_directories:
00009A62: 83 C3 10                                              	add	ebx,10h
00009A65: 0F B7 43 FE                                           	movzx	eax,word [ebx-2]
00009A69: 0F B7 4B FC                                           	movzx	ecx,word [ebx-4]
00009A6D: 01 C1                                                 	add	ecx,eax
                                                                      make_data_records:
00009A6F: 51                                                    	push	ecx
00009A70: 89 FE                                                 	mov	esi,edi
00009A72: 2B 35 74 A2 01 00                                     	sub	esi,[resource_data]
00009A78: 87 73 04                                              	xchg	esi,[ebx+4]
00009A7B: 8D 47 10                                              	lea	eax,[edi+16]
00009A7E: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
00009A84: 0F 83 12 6E FF FF                                     	jae	out_of_memory
00009A8A: 89 F0                                                 	mov	eax,esi
00009A8C: AB                                                    	stos	dword [edi]
00009A8D: 8B 46 0C                                              	mov	eax,[esi+12]
00009A90: AB                                                    	stos	dword [edi]
00009A91: 31 C0                                                 	xor	eax,eax
00009A93: AB                                                    	stos	dword [edi]
00009A94: AB                                                    	stos	dword [edi]
00009A95: 59                                                    	pop	ecx
00009A96: 83 C3 08                                              	add	ebx,8
00009A99: E2 D4                                                 	loop	make_data_records
00009A9B: 39 D3                                                 	cmp	ebx,edx
00009A9D: 72 C3                                                 	jb	update_language_directories
00009A9F: 5B                                                    	pop	ebx			; file handle
00009AA0: 89 EE                                                 	mov	esi,ebp
00009AA2: 89 FD                                                 	mov	ebp,edi
                                                                      update_data_records:
00009AA4: 55                                                    	push	ebp
00009AA5: 89 F9                                                 	mov	ecx,edi
00009AA7: A1 5C A2 01 00                                        	mov	eax,[current_section]
00009AAC: 2B 48 14                                              	sub	ecx,[eax+14h]
00009AAF: 03 48 0C                                              	add	ecx,[eax+0Ch]
00009AB2: 87 0E                                                 	xchg	ecx,[esi]
00009AB4: 8B 11                                                 	mov	edx,[ecx]
00009AB6: 30 C0                                                 	xor	al,al
00009AB8: E8 2F 69 FF FF                                        	call	lseek
00009ABD: 89 FA                                                 	mov	edx,edi
00009ABF: 8B 4E 04                                              	mov	ecx,[esi+4]
00009AC2: 01 CF                                                 	add	edi,ecx
00009AC4: 3B 3D F0 A1 01 00                                     	cmp	edi,[tagged_blocks]
00009ACA: 0F 87 CC 6D FF FF                                     	ja	out_of_memory
00009AD0: E8 F3 68 FF FF                                        	call	read
00009AD5: 89 F8                                                 	mov	eax,edi
00009AD7: 2B 05 74 A2 01 00                                     	sub	eax,[resource_data]
00009ADD: 83 E0 03                                              	and	eax,11b
00009AE0: 74 0B                                                 	jz	resource_data_alignment_ok
00009AE2: B9 04 00 00 00                                        	mov	ecx,4
00009AE7: 29 C1                                                 	sub	ecx,eax
00009AE9: 30 C0                                                 	xor	al,al
00009AEB: F3 AA                                                 	rep	stos byte [edi]
                                                                      resource_data_alignment_ok:
00009AED: 5D                                                    	pop	ebp
00009AEE: 83 C6 10                                              	add	esi,16
00009AF1: 39 EE                                                 	cmp	esi,ebp
00009AF3: 72 AF                                                 	jb	update_data_records
00009AF5: 5E                                                    	pop	esi
00009AF6: E8 C5 68 FF FF                                        	call	close
00009AFB: 89 F8                                                 	mov	eax,edi
00009AFD: 2B 05 74 A2 01 00                                     	sub	eax,[resource_data]
00009B03: A3 78 A2 01 00                                        	mov	[resource_size],eax
                                                                      resource_done:
00009B08: C3                                                    	ret
                                                                close_pe:
00009B09: E8 66 F4 FF FF                                        	call	close_pe_section
00009B0E: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
00009B14: 89 42 50                                              	mov	[edx+50h],eax
00009B17: E8 AB 6B FF FF                                        	call	make_timestamp
00009B1C: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
00009B22: 89 42 08                                              	mov	[edx+8],eax
00009B25: A1 50 A2 01 00                                        	mov	eax,[number_of_sections]
00009B2A: 66 89 42 06                                           	mov	[edx+6],ax
00009B2E: 6B C0 28                                              	imul	eax,28h
00009B31: 0F B7 4A 14                                           	movzx	ecx,word [edx+14h]
00009B35: 8D 44 08 18                                           	lea	eax,[eax+18h+ecx]
00009B39: 03 05 54 A2 01 00                                     	add	eax,[stub_size]
00009B3F: 8B 4A 3C                                              	mov	ecx,[edx+3Ch]
00009B42: 49                                                    	dec	ecx
00009B43: 01 C8                                                 	add	eax,ecx
00009B45: F7 D1                                                 	not	ecx
00009B47: 21 C8                                                 	and	eax,ecx
00009B49: 3B 42 54                                              	cmp	eax,[edx+54h]
00009B4C: 74 07                                                 	je	pe_sections_ok
00009B4E: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      pe_sections_ok:
00009B55: 31 C9                                                 	xor	ecx,ecx
00009B57: 83 C2 78                                              	add	edx,78h
00009B5A: F7 05 40 A2 01 00 04 00 00 00                         	test	[format_flags],4
00009B64: 74 03                                                 	jz	process_directories
00009B66: 83 C2 10                                              	add	edx,10h
                                                                      process_directories:
00009B69: 8B 04 CA                                              	mov	eax,[edx+ecx*8]
00009B6C: 09 C0                                                 	or	eax,eax
00009B6E: 74 17                                                 	jz	directory_ok
00009B70: 83 7C CA 04 FF                                        	cmp	dword [edx+ecx*8+4],-1
00009B75: 75 10                                                 	jne	directory_ok
                                                                      section_data:
00009B77: 8B 1C CA                                              	mov	ebx,[edx+ecx*8]
00009B7A: 8B 43 0C                                              	mov	eax,[ebx+0Ch]
00009B7D: 89 04 CA                                              	mov	[edx+ecx*8],eax 	; directory rva
00009B80: 8B 43 08                                              	mov	eax,[ebx+8]
00009B83: 89 44 CA 04                                           	mov	[edx+ecx*8+4],eax	; directory size
                                                                      directory_ok:
00009B87: FE C1                                                 	inc	cl
00009B89: 80 F9 10                                              	cmp	cl,10h
00009B8C: 72 DB                                                 	jb	process_directories
00009B8E: 83 7A 28 00                                           	cmp	dword [edx+5*8],0
00009B92: 75 21                                                 	jne	finish_pe_relocations
00009B94: A1 4C A2 01 00                                        	mov	eax,[number_of_relocations]
00009B99: C1 E0 02                                              	shl	eax,2
00009B9C: 29 05 64 A1 01 00                                     	sub	[free_additional_memory],eax
00009BA2: 0F BA 35 44 A2 01 00 00                               	btr	[resolver_flags],0
00009BAA: 73 2B                                                 	jnc	pe_relocations_ok
00009BAC: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
00009BB3: EB 22                                                 	jmp	pe_relocations_ok
                                                                      finish_pe_relocations:
00009BB5: 57                                                    	push	edi
00009BB6: 8B 3D 80 A2 01 00                                     	mov	edi,[reserved_fixups]
00009BBC: E8 B5 F8 FF FF                                        	call	make_fixups
00009BC1: 5F                                                    	pop	edi
00009BC2: 01 05 7C A2 01 00                                     	add	[actual_fixups_size],eax
00009BC8: 3B 05 84 A2 01 00                                     	cmp	eax,[reserved_fixups_size]
00009BCE: 74 07                                                 	je	pe_relocations_ok
00009BD0: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      pe_relocations_ok:
00009BD7: 8B 1D 6C A1 01 00                                     	mov	ebx,[code_start]
00009BDD: 2B 1D 54 A2 01 00                                     	sub	ebx,[stub_size]
00009BE3: 89 F9                                                 	mov	ecx,edi
00009BE5: 29 D9                                                 	sub	ecx,ebx
00009BE7: 89 CD                                                 	mov	ebp,ecx
00009BE9: D1 E9                                                 	shr	ecx,1
00009BEB: 31 C0                                                 	xor	eax,eax
00009BED: 99                                                    	cdq
                                                                      calculate_checksum:
00009BEE: 66 8B 13                                              	mov	dx,[ebx]
00009BF1: 01 D0                                                 	add	eax,edx
00009BF3: 66 89 C2                                              	mov	dx,ax
00009BF6: C1 E8 10                                              	shr	eax,16
00009BF9: 01 D0                                                 	add	eax,edx
00009BFB: 83 C3 02                                              	add	ebx,2
00009BFE: E2 EE                                                 	loop	calculate_checksum
00009C00: 01 E8                                                 	add	eax,ebp
00009C02: 8B 1D 6C A1 01 00                                     	mov	ebx,[code_start]
00009C08: 89 43 58                                              	mov	[ebx+58h],eax
00009C0B: C3                                                    	ret
                                                                
                                                                format_coff:
00009C0C: A1 40 A1 01 00                                        	mov	eax,[additional_memory]
00009C11: A3 48 A2 01 00                                        	mov	[symbols_stream],eax
00009C16: 89 C3                                                 	mov	ebx,eax
00009C18: 83 C0 20                                              	add	eax,20h
00009C1B: 3B 05 F4 A1 01 00                                     	cmp	eax,[structures_buffer]
00009C21: 0F 83 75 6C FF FF                                     	jae	out_of_memory
00009C27: A3 64 A1 01 00                                        	mov	[free_additional_memory],eax
00009C2C: 31 C0                                                 	xor	eax,eax
00009C2E: 88 03                                                 	mov	[ebx],al
00009C30: 89 43 04                                              	mov	[ebx+4],eax
00009C33: 89 7B 08                                              	mov	[ebx+8],edi
00009C36: B0 04                                                 	mov	al,4
00009C38: 89 43 10                                              	mov	[ebx+10h],eax
00009C3B: B0 60                                                 	mov	al,60h
00009C3D: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
00009C45: 73 05                                                 	jnc	flat_section_flags_ok
00009C47: 0D 00 00 00 E0                                        	or	eax,0E0000000h
                                                                      flat_section_flags_ok:
00009C4C: 89 43 14                                              	mov	dword [ebx+14h],eax
00009C4F: 89 1D 5C A2 01 00                                     	mov	[current_section],ebx
00009C55: 31 C0                                                 	xor	eax,eax
00009C57: A3 50 A2 01 00                                        	mov	[number_of_sections],eax
00009C5C: 89 DA                                                 	mov	edx,ebx
00009C5E: E8 31 AF FF FF                                        	call	init_addressing_space
00009C63: 89 53 14                                              	mov	[ebx+14h],edx
00009C66: C6 43 09 02                                           	mov	byte [ebx+9],2
00009C6A: C6 05 CA A2 01 00 20                                  	mov	[code_type],32
00009C71: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
00009C7B: 0F 84 D5 E4 FF FF                                     	jz	format_defined
00009C81: C6 43 09 04                                           	mov	byte [ebx+9],4
00009C85: C6 05 CA A2 01 00 40                                  	mov	[code_type],64
00009C8C: E9 C5 E4 FF FF                                        	jmp	format_defined
                                                                coff_section:
00009C91: E8 35 01 00 00                                        	call	close_coff_section
00009C96: 8B 1D 64 A1 01 00                                     	mov	ebx,[free_additional_memory]
00009C9C: 8D 43 20                                              	lea	eax,[ebx+20h]
00009C9F: 3B 05 F4 A1 01 00                                     	cmp	eax,[structures_buffer]
00009CA5: 0F 83 F1 6B FF FF                                     	jae	out_of_memory
00009CAB: A3 64 A1 01 00                                        	mov	[free_additional_memory],eax
00009CB0: 89 1D 5C A2 01 00                                     	mov	[current_section],ebx
00009CB6: FF 05 50 A2 01 00                                     	inc	[number_of_sections]
00009CBC: 31 C0                                                 	xor	eax,eax
00009CBE: 88 03                                                 	mov	[ebx],al
00009CC0: 89 7B 08                                              	mov	[ebx+8],edi
00009CC3: 89 43 10                                              	mov	[ebx+10h],eax
00009CC6: 89 43 14                                              	mov	[ebx+14h],eax
00009CC9: 89 DA                                                 	mov	edx,ebx
00009CCB: E8 A8 AE FF FF                                        	call	create_addressing_space
00009CD0: 87 D3                                                 	xchg	edx,ebx
00009CD2: 89 5A 14                                              	mov	[edx+14h],ebx
00009CD5: C6 42 09 02                                           	mov	byte [edx+9],2
00009CD9: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
00009CE3: 74 04                                                 	jz	coff_labels_type_ok
00009CE5: C6 42 09 04                                           	mov	byte [edx+9],4
                                                                      coff_labels_type_ok:
00009CE9: 66 AD                                                 	lods	word [esi]
00009CEB: 66 83 F8 28                                           	cmp	ax,'('
00009CEF: 0F 85 35 6C FF FF                                     	jne	invalid_argument
00009CF5: 89 73 04                                              	mov	[ebx+4],esi
00009CF8: 8B 0E                                                 	mov	ecx,[esi]
00009CFA: 8D 74 0E 05                                           	lea	esi,[esi+4+ecx+1]
00009CFE: 83 F9 08                                              	cmp	ecx,8
00009D01: 0F 87 5A 6D FF FF                                     	ja	name_too_long
                                                                      coff_section_flags:
00009D07: 80 3E 8C                                              	cmp	byte [esi],8Ch
00009D0A: 74 34                                                 	je	coff_section_alignment
00009D0C: 80 3E 19                                              	cmp	byte [esi],19h
00009D0F: 0F 85 8B 00 00 00                                     	jne	coff_section_settings_ok
00009D15: 46                                                    	inc	esi
00009D16: AC                                                    	lods	byte [esi]
00009D17: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
00009D1F: 72 08                                                 	jc	coff_section_flag_ok
00009D21: 3C 07                                                 	cmp	al,7
00009D23: 0F 87 01 6C FF FF                                     	ja	invalid_argument
                                                                      coff_section_flag_ok:
00009D29: 88 C1                                                 	mov	cl,al
00009D2B: B8 01 00 00 00                                        	mov	eax,1
00009D30: D3 E0                                                 	shl	eax,cl
00009D32: 85 43 14                                              	test	dword [ebx+14h],eax
00009D35: 0F 85 65 6D FF FF                                     	jnz	setting_already_specified
00009D3B: 09 43 14                                              	or	dword [ebx+14h],eax
00009D3E: EB C7                                                 	jmp	coff_section_flags
                                                                      coff_section_alignment:
00009D40: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
00009D48: 0F 83 DC 6B FF FF                                     	jnc	invalid_argument
00009D4E: 46                                                    	inc	esi
00009D4F: AC                                                    	lods	byte [esi]
00009D50: 3C 28                                                 	cmp	al,'('
00009D52: 0F 85 D2 6B FF FF                                     	jne	invalid_argument
00009D58: 80 3E 2E                                              	cmp	byte [esi],'.'
00009D5B: 0F 84 4B 6C FF FF                                     	je	invalid_value
00009D61: 53                                                    	push	ebx
00009D62: E8 D7 D6 FF FF                                        	call	get_count_value
00009D67: 5B                                                    	pop	ebx
00009D68: 89 C2                                                 	mov	edx,eax
00009D6A: 4A                                                    	dec	edx
00009D6B: 85 D0                                                 	test	eax,edx
00009D6D: 0F 85 39 6C FF FF                                     	jnz	invalid_value
00009D73: 09 C0                                                 	or	eax,eax
00009D75: 0F 84 31 6C FF FF                                     	jz	invalid_value
00009D7B: 3D 00 20 00 00                                        	cmp	eax,2000h
00009D80: 0F 87 26 6C FF FF                                     	ja	invalid_value
00009D86: 0F BC D0                                              	bsf	edx,eax
00009D89: 42                                                    	inc	edx
00009D8A: C1 E2 14                                              	shl	edx,20
00009D8D: 09 53 14                                              	or	[ebx+14h],edx
00009D90: 87 43 10                                              	xchg	[ebx+10h],eax
00009D93: 09 C0                                                 	or	eax,eax
00009D95: 0F 85 05 6D FF FF                                     	jnz	setting_already_specified
00009D9B: E9 67 FF FF FF                                        	jmp	coff_section_flags
                                                                      coff_section_settings_ok:
00009DA0: 83 7B 10 00                                           	cmp	dword [ebx+10h],0
00009DA4: 0F 85 D0 B1 FF FF                                     	jne	instruction_assembled
00009DAA: C7 43 10 04 00 00 00                                  	mov	dword [ebx+10h],4
00009DB1: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
00009DB9: 0F 83 BB B1 FF FF                                     	jnc	instruction_assembled
00009DBF: 81 4B 14 00 00 30 00                                  	or	dword [ebx+14h],300000h
00009DC6: E9 AF B1 FF FF                                        	jmp	instruction_assembled
                                                                      close_coff_section:
00009DCB: 8B 1D 5C A2 01 00                                     	mov	ebx,[current_section]
00009DD1: 89 F8                                                 	mov	eax,edi
00009DD3: 8B 53 08                                              	mov	edx,[ebx+8]
00009DD6: 29 D0                                                 	sub	eax,edx
00009DD8: 89 43 0C                                              	mov	[ebx+0Ch],eax
00009DDB: 31 C0                                                 	xor	eax,eax
00009DDD: 87 05 D8 A1 01 00                                     	xchg	[undefined_data_end],eax
00009DE3: 39 F8                                                 	cmp	eax,edi
00009DE5: 75 0E                                                 	jne	coff_section_ok
00009DE7: 3B 15 D4 A1 01 00                                     	cmp	edx,[undefined_data_start]
00009DED: 75 06                                                 	jne	coff_section_ok
00009DEF: 89 D7                                                 	mov	edi,edx
00009DF1: 80 4B 14 80                                           	or	byte [ebx+14h],80h
                                                                      coff_section_ok:
00009DF5: C3                                                    	ret
                                                                mark_coff_relocation:
00009DF6: 80 3D C0 A2 01 00 03                                  	cmp	[value_type],3
00009DFD: 74 55                                                 	je	coff_relocation_relative
00009DFF: 53 50                                                 	push	ebx eax
00009E01: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
00009E0B: 75 20                                                 	jnz	coff_64bit_relocation
00009E0D: B0 06                                                 	mov	al,6
00009E0F: 80 3D C0 A2 01 00 02                                  	cmp	[value_type],2
00009E16: 0F 84 80 00 00 00                                     	je	coff_relocation
00009E1C: 80 3D C0 A2 01 00 05                                  	cmp	[value_type],5
00009E23: 0F 85 31 6C FF FF                                     	jne	invalid_use_of_symbol
00009E29: FE C0                                                 	inc	al
00009E2B: EB 6F                                                 	jmp	coff_relocation
                                                                      coff_64bit_relocation:
00009E2D: B0 01                                                 	mov	al,1
00009E2F: 80 3D C0 A2 01 00 04                                  	cmp	[value_type],4
00009E36: 74 64                                                 	je	coff_relocation
00009E38: B0 02                                                 	mov	al,2
00009E3A: 80 3D C0 A2 01 00 02                                  	cmp	[value_type],2
00009E41: 74 59                                                 	je	coff_relocation
00009E43: 80 3D C0 A2 01 00 05                                  	cmp	[value_type],5
00009E4A: 0F 85 0A 6C FF FF                                     	jne	invalid_use_of_symbol
00009E50: FE C0                                                 	inc	al
00009E52: EB 48                                                 	jmp	coff_relocation
                                                                      coff_relocation_relative:
00009E54: 53                                                    	push	ebx
00009E55: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
00009E5D: 73 10                                                 	jnc	relative_ok
00009E5F: 8B 1D 5C A2 01 00                                     	mov	ebx,[current_section]
00009E65: 8B 5B 08                                              	mov	ebx,[ebx+8]
00009E68: 29 FB                                                 	sub	ebx,edi
00009E6A: 29 D8                                                 	sub	eax,ebx
00009E6C: 83 C0 04                                              	add	eax,4
                                                                      relative_ok:
00009E6F: 8B 1D D0 A1 01 00                                     	mov	ebx,[addressing_space]
00009E75: 50                                                    	push	eax
00009E76: B0 14                                                 	mov	al,20
00009E78: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
00009E82: 75 0C                                                 	jnz	relative_coff_64bit_relocation
00009E84: 80 7B 09 02                                           	cmp	byte [ebx+9],2
00009E88: 0F 85 CC 6B FF FF                                     	jne	invalid_use_of_symbol
00009E8E: EB 0C                                                 	jmp	coff_relocation
                                                                      relative_coff_64bit_relocation:
00009E90: B0 04                                                 	mov	al,4
00009E92: 80 7B 09 04                                           	cmp	byte [ebx+9],4
00009E96: 0F 85 BE 6B FF FF                                     	jne	invalid_use_of_symbol
                                                                      coff_relocation:
00009E9C: 8B 1D 64 A1 01 00                                     	mov	ebx,[free_additional_memory]
00009EA2: 83 C3 0C                                              	add	ebx,0Ch
00009EA5: 3B 1D F4 A1 01 00                                     	cmp	ebx,[structures_buffer]
00009EAB: 0F 83 EB 69 FF FF                                     	jae	out_of_memory
00009EB1: 89 1D 64 A1 01 00                                     	mov	[free_additional_memory],ebx
00009EB7: 88 43 F4                                              	mov	byte [ebx-0Ch],al
00009EBA: A1 5C A2 01 00                                        	mov	eax,[current_section]
00009EBF: 8B 40 08                                              	mov	eax,[eax+8]
00009EC2: F7 D8                                                 	neg	eax
00009EC4: 01 F8                                                 	add	eax,edi
00009EC6: 89 43 F8                                              	mov	[ebx-0Ch+4],eax
00009EC9: A1 30 A2 01 00                                        	mov	eax,[symbol_identifier]
00009ECE: 89 43 FC                                              	mov	[ebx-0Ch+8],eax
00009ED1: 58 5B                                                 	pop	eax ebx
00009ED3: C3                                                    	ret
                                                                close_coff:
00009ED4: E8 F2 FE FF FF                                        	call	close_coff_section
00009ED9: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
00009EE0: 74 0A                                                 	je	coff_closed
00009EE2: A1 48 A2 01 00                                        	mov	eax,[symbols_stream]
00009EE7: A3 64 A1 01 00                                        	mov	[free_additional_memory],eax
                                                                      coff_closed:
00009EEC: C3                                                    	ret
                                                                coff_formatter:
00009EED: 2B 3D 6C A1 01 00                                     	sub	edi,[code_start]
00009EF3: 89 3D 70 A1 01 00                                     	mov	[code_size],edi
00009EF9: E8 D9 00 00 00                                        	call	prepare_default_section
00009EFE: 8B 3D 64 A1 01 00                                     	mov	edi,[free_additional_memory]
00009F04: 89 FB                                                 	mov	ebx,edi
00009F06: B9 0A 00 00 00                                        	mov	ecx,28h shr 2
00009F0B: 0F AF 0D 50 A2 01 00                                  	imul	ecx,[number_of_sections]
00009F12: 83 C1 05                                              	add	ecx,14h shr 2
00009F15: 8D 04 8F                                              	lea	eax,[edi+ecx*4]
00009F18: 3B 05 F4 A1 01 00                                     	cmp	eax,[structures_buffer]
00009F1E: 0F 83 78 69 FF FF                                     	jae	out_of_memory
00009F24: 31 C0                                                 	xor	eax,eax
00009F26: F3 AB                                                 	rep	stos dword [edi]
00009F28: 66 C7 03 4C 01                                        	mov	word [ebx],14Ch
00009F2D: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
00009F37: 74 05                                                 	jz	coff_magic_ok
00009F39: 66 C7 03 64 86                                        	mov	word [ebx],8664h
                                                                      coff_magic_ok:
00009F3E: 66 C7 43 12 04 01                                     	mov	word [ebx+12h],104h
00009F44: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
00009F4C: 73 04                                                 	jnc	coff_flags_ok
00009F4E: 80 4B 12 80                                           	or	byte [ebx+12h],80h
                                                                      coff_flags_ok:
00009F52: 53                                                    	push	ebx
00009F53: E8 6F 67 FF FF                                        	call	make_timestamp
00009F58: 5B                                                    	pop	ebx
00009F59: 89 43 04                                              	mov	[ebx+4],eax
00009F5C: A1 50 A2 01 00                                        	mov	eax,[number_of_sections]
00009F61: 66 89 43 02                                           	mov	[ebx+2],ax
00009F65: 8B 35 48 A2 01 00                                     	mov	esi,[symbols_stream]
00009F6B: 31 C0                                                 	xor	eax,eax
00009F6D: 31 C9                                                 	xor	ecx,ecx
                                                                      enumerate_symbols:
00009F6F: 3B 35 64 A1 01 00                                     	cmp	esi,[free_additional_memory]
00009F75: 0F 84 C7 00 00 00                                     	je	symbols_enumerated
00009F7B: 8A 16                                                 	mov	dl,[esi]
00009F7D: 08 D2                                                 	or	dl,dl
00009F7F: 74 0F                                                 	jz	enumerate_section
00009F81: 80 FA C0                                              	cmp	dl,0C0h
00009F84: 73 1C                                                 	jae	enumerate_public
00009F86: 80 FA 80                                              	cmp	dl,80h
00009F89: 73 3D                                                 	jae	enumerate_extrn
00009F8B: 83 C6 0C                                              	add	esi,0Ch
00009F8E: EB DF                                                 	jmp	enumerate_symbols
                                                                      enumerate_section:
00009F90: 89 C2                                                 	mov	edx,eax
00009F92: C1 E2 08                                              	shl	edx,8
00009F95: 89 16                                                 	mov	[esi],edx
00009F97: 40                                                    	inc	eax
00009F98: 41                                                    	inc	ecx
00009F99: 66 89 4E 1E                                           	mov	[esi+1Eh],cx
00009F9D: 83 C6 20                                              	add	esi,20h
00009FA0: EB CD                                                 	jmp	enumerate_symbols
                                                                      enumerate_public:
00009FA2: 89 C2                                                 	mov	edx,eax
00009FA4: C1 E2 08                                              	shl	edx,8
00009FA7: 8A 16                                                 	mov	dl,[esi]
00009FA9: 89 16                                                 	mov	[esi],edx
00009FAB: 8B 56 08                                              	mov	edx,[esi+8]
00009FAE: 83 C6 10                                              	add	esi,10h
00009FB1: 40                                                    	inc	eax
00009FB2: 80 7A 0B 00                                           	cmp	byte [edx+11],0
00009FB6: 74 B7                                                 	je	enumerate_symbols
00009FB8: 8B 52 14                                              	mov	edx,[edx+20]
00009FBB: 80 3A C0                                              	cmp	byte [edx],0C0h
00009FBE: 73 AF                                                 	jae	enumerate_symbols
00009FC0: 80 3A 80                                              	cmp	byte [edx],80h
00009FC3: 72 AA                                                 	jb	enumerate_symbols
00009FC5: 40                                                    	inc	eax
00009FC6: EB A7                                                 	jmp	enumerate_symbols
                                                                      enumerate_extrn:
00009FC8: 89 C2                                                 	mov	edx,eax
00009FCA: C1 E2 08                                              	shl	edx,8
00009FCD: 8A 16                                                 	mov	dl,[esi]
00009FCF: 89 16                                                 	mov	[esi],edx
00009FD1: 83 C6 0C                                              	add	esi,0Ch
00009FD4: 40                                                    	inc	eax
00009FD5: EB 98                                                 	jmp	enumerate_symbols
                                                                      prepare_default_section:
00009FD7: 8B 1D 48 A2 01 00                                     	mov	ebx,[symbols_stream]
00009FDD: 83 7B 0C 00                                           	cmp	dword [ebx+0Ch],0
00009FE1: 75 58                                                 	jne	default_section_ok
00009FE3: 83 3D 50 A2 01 00 00                                  	cmp	[number_of_sections],0
00009FEA: 74 4F                                                 	je	default_section_ok
00009FEC: 89 DA                                                 	mov	edx,ebx
                                                                      find_references_to_default_section:
00009FEE: 3B 1D 64 A1 01 00                                     	cmp	ebx,[free_additional_memory]
00009FF4: 75 08                                                 	jne	check_reference
00009FF6: 83 05 48 A2 01 00 20                                  	add	[symbols_stream],20h
00009FFD: C3                                                    	ret
                                                                      check_reference:
00009FFE: 8A 03                                                 	mov	al,[ebx]
0000A000: 08 C0                                                 	or	al,al
0000A002: 74 32                                                 	jz	skip_other_section
0000A004: 3C C0                                                 	cmp	al,0C0h
0000A006: 73 0E                                                 	jae	check_public_reference
0000A008: 3C 80                                                 	cmp	al,80h
0000A00A: 73 05                                                 	jae	next_reference
0000A00C: 3B 53 08                                              	cmp	edx,[ebx+8]
0000A00F: 74 2A                                                 	je	default_section_ok
                                                                      next_reference:
0000A011: 83 C3 0C                                              	add	ebx,0Ch
0000A014: EB D8                                                 	jmp	find_references_to_default_section
                                                                      check_public_reference:
0000A016: 8B 43 08                                              	mov	eax,[ebx+8]
0000A019: 83 C3 10                                              	add	ebx,10h
0000A01C: F6 40 08 01                                           	test	byte [eax+8],1
0000A020: 74 CC                                                 	jz	find_references_to_default_section
0000A022: 66 8B 0D 5E A1 01 00                                  	mov	cx,[current_pass]
0000A029: 66 3B 48 10                                           	cmp	cx,[eax+16]
0000A02D: 75 BF                                                 	jne	find_references_to_default_section
0000A02F: 3B 50 14                                              	cmp	edx,[eax+20]
0000A032: 74 07                                                 	je	default_section_ok
0000A034: EB B8                                                 	jmp	find_references_to_default_section
                                                                      skip_other_section:
0000A036: 83 C3 20                                              	add	ebx,20h
0000A039: EB B3                                                 	jmp	find_references_to_default_section
                                                                      default_section_ok:
0000A03B: FF 05 50 A2 01 00                                     	inc	[number_of_sections]
0000A041: C3                                                    	ret
                                                                      symbols_enumerated:
0000A042: 89 43 0C                                              	mov	[ebx+0Ch],eax
0000A045: 89 FD                                                 	mov	ebp,edi
0000A047: 29 DD                                                 	sub	ebp,ebx
0000A049: 55                                                    	push	ebp
0000A04A: 8D 7B 14                                              	lea	edi,[ebx+14h]
0000A04D: 8B 35 48 A2 01 00                                     	mov	esi,[symbols_stream]
                                                                      find_section:
0000A053: 3B 35 64 A1 01 00                                     	cmp	esi,[free_additional_memory]
0000A059: 0F 84 16 01 00 00                                     	je	sections_finished
0000A05F: 8A 06                                                 	mov	al,[esi]
0000A061: 08 C0                                                 	or	al,al
0000A063: 74 0C                                                 	jz	section_found
0000A065: 83 C6 0C                                              	add	esi,0Ch
0000A068: 3C C0                                                 	cmp	al,0C0h
0000A06A: 72 E7                                                 	jb	find_section
0000A06C: 83 C6 04                                              	add	esi,4
0000A06F: EB E2                                                 	jmp	find_section
                                                                      section_found:
0000A071: 56 57                                                 	push	esi edi
0000A073: 8B 76 04                                              	mov	esi,[esi+4]
0000A076: 09 F6                                                 	or	esi,esi
0000A078: 74 09                                                 	jz	default_section
0000A07A: 8B 0E                                                 	mov	ecx,[esi]
0000A07C: 83 C6 04                                              	add	esi,4
0000A07F: F3 A4                                                 	rep	movs byte [edi],[esi]
0000A081: EB 09                                                 	jmp	section_name_ok
                                                                      default_section:
0000A083: B0 2E                                                 	mov	al,'.'
0000A085: AA                                                    	stos	byte [edi]
0000A086: B8 66 6C 61 74                                        	mov	eax,'flat'
0000A08B: AB                                                    	stos	dword [edi]
                                                                      section_name_ok:
0000A08C: 5F 5E                                                 	pop	edi esi
0000A08E: 8B 46 0C                                              	mov	eax,[esi+0Ch]
0000A091: 89 47 10                                              	mov	[edi+10h],eax
0000A094: 8B 46 14                                              	mov	eax,[esi+14h]
0000A097: 89 47 24                                              	mov	[edi+24h],eax
0000A09A: A8 80                                                 	test	al,80h
0000A09C: 75 0E                                                 	jnz	section_ptr_ok
0000A09E: 8B 46 08                                              	mov	eax,[esi+8]
0000A0A1: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
0000A0A7: 01 E8                                                 	add	eax,ebp
0000A0A9: 89 47 14                                              	mov	[edi+14h],eax
                                                                      section_ptr_ok:
0000A0AC: 8B 1D 6C A1 01 00                                     	mov	ebx,[code_start]
0000A0B2: 8B 15 70 A1 01 00                                     	mov	edx,[code_size]
0000A0B8: 01 D3                                                 	add	ebx,edx
0000A0BA: 01 EA                                                 	add	edx,ebp
0000A0BC: 31 C9                                                 	xor	ecx,ecx
0000A0BE: 83 C6 20                                              	add	esi,20h
                                                                      find_relocations:
0000A0C1: 3B 35 64 A1 01 00                                     	cmp	esi,[free_additional_memory]
0000A0C7: 74 43                                                 	je	section_relocations_done
0000A0C9: 8A 06                                                 	mov	al,[esi]
0000A0CB: 08 C0                                                 	or	al,al
0000A0CD: 74 3D                                                 	jz	section_relocations_done
0000A0CF: 3C 80                                                 	cmp	al,80h
0000A0D1: 72 09                                                 	jb	add_relocation
0000A0D3: 3C C0                                                 	cmp	al,0C0h
0000A0D5: 72 30                                                 	jb	next_relocation
0000A0D7: 83 C6 10                                              	add	esi,10h
0000A0DA: EB E5                                                 	jmp	find_relocations
                                                                      add_relocation:
0000A0DC: 8D 43 0A                                              	lea	eax,[ebx+0Ah]
0000A0DF: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
0000A0E5: 0F 87 B1 67 FF FF                                     	ja	out_of_memory
0000A0EB: 8B 46 04                                              	mov	eax,[esi+4]
0000A0EE: 89 03                                                 	mov	[ebx],eax
0000A0F0: 8B 46 08                                              	mov	eax,[esi+8]
0000A0F3: 8B 00                                                 	mov	eax,[eax]
0000A0F5: C1 E8 08                                              	shr	eax,8
0000A0F8: 89 43 04                                              	mov	[ebx+4],eax
0000A0FB: 66 0F B6 06                                           	movzx	ax,byte [esi]
0000A0FF: 66 89 43 08                                           	mov	[ebx+8],ax
0000A103: 83 C3 0A                                              	add	ebx,0Ah
0000A106: 41                                                    	inc	ecx
                                                                      next_relocation:
0000A107: 83 C6 0C                                              	add	esi,0Ch
0000A10A: EB B5                                                 	jmp	find_relocations
                                                                      section_relocations_done:
0000A10C: 81 F9 00 00 01 00                                     	cmp	ecx,10000h
0000A112: 72 43                                                 	jb	section_relocations_count_16bit
0000A114: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
0000A11C: 0F 83 A9 67 FF FF                                     	jnc	format_limitations_exceeded
0000A122: 66 C7 47 20 FF FF                                     	mov	word [edi+20h],0FFFFh
0000A128: 81 4F 24 00 00 00 01                                  	or	dword [edi+24h],1000000h
0000A12F: 89 57 18                                              	mov	[edi+18h],edx
0000A132: 56 57                                                 	push	esi edi
0000A134: 51                                                    	push	ecx
0000A135: 8D 73 FF                                              	lea	esi,[ebx-1]
0000A138: 83 C3 0A                                              	add	ebx,0Ah
0000A13B: 8D 7B FF                                              	lea	edi,[ebx-1]
0000A13E: 6B C9 0A                                              	imul	ecx,0Ah
0000A141: FD                                                    	std
0000A142: F3 A4                                                 	rep	movs byte [edi],[esi]
0000A144: FC                                                    	cld
0000A145: 59                                                    	pop	ecx
0000A146: 46                                                    	inc	esi
0000A147: 41                                                    	inc	ecx
0000A148: 89 0E                                                 	mov	[esi],ecx
0000A14A: 31 C0                                                 	xor	eax,eax
0000A14C: 89 46 04                                              	mov	[esi+4],eax
0000A14F: 66 89 46 08                                           	mov	[esi+8],ax
0000A153: 5F 5E                                                 	pop	edi esi
0000A155: EB 0A                                                 	jmp	section_relocations_ok
                                                                      section_relocations_count_16bit:
0000A157: 66 89 4F 20                                           	mov	[edi+20h],cx
0000A15B: 67 E3 03                                              	jcxz	section_relocations_ok
0000A15E: 89 57 18                                              	mov	[edi+18h],edx
                                                                      section_relocations_ok:
0000A161: 2B 1D 6C A1 01 00                                     	sub	ebx,[code_start]
0000A167: 89 1D 70 A1 01 00                                     	mov	[code_size],ebx
0000A16D: 83 C7 28                                              	add	edi,28h
0000A170: E9 DE FE FF FF                                        	jmp	find_section
                                                                      sections_finished:
0000A175: 8B 15 64 A1 01 00                                     	mov	edx,[free_additional_memory]
0000A17B: 8B 1D 70 A1 01 00                                     	mov	ebx,[code_size]
0000A181: 01 DD                                                 	add	ebp,ebx
0000A183: 89 6A 08                                              	mov	[edx+8],ebp
0000A186: 03 1D 6C A1 01 00                                     	add	ebx,[code_start]
0000A18C: 89 DF                                                 	mov	edi,ebx
0000A18E: 8B 4A 0C                                              	mov	ecx,[edx+0Ch]
0000A191: 6B C9 09                                              	imul	ecx,12h shr 1
0000A194: 31 C0                                                 	xor	eax,eax
0000A196: D1 E9                                                 	shr	ecx,1
0000A198: 73 02                                                 	jnc	zero_symbols_table
0000A19A: 66 AB                                                 	stos	word [edi]
                                                                      zero_symbols_table:
0000A19C: F3 AB                                                 	rep	stos dword [edi]
0000A19E: 89 FA                                                 	mov	edx,edi
0000A1A0: AB                                                    	stos	dword [edi]
0000A1A1: 8B 35 48 A2 01 00                                     	mov	esi,[symbols_stream]
                                                                      make_symbols_table:
0000A1A7: 3B 35 64 A1 01 00                                     	cmp	esi,[free_additional_memory]
0000A1AD: 0F 84 34 01 00 00                                     	je	symbols_table_ok
0000A1B3: 8A 06                                                 	mov	al,[esi]
0000A1B5: 3C C0                                                 	cmp	al,0C0h
0000A1B7: 73 37                                                 	jae	add_public_symbol
0000A1B9: 3C 80                                                 	cmp	al,80h
0000A1BB: 73 22                                                 	jae	add_extrn_symbol
0000A1BD: 08 C0                                                 	or	al,al
0000A1BF: 74 05                                                 	jz	add_section_symbol
0000A1C1: 83 C6 0C                                              	add	esi,0Ch
0000A1C4: EB E1                                                 	jmp	make_symbols_table
                                                                      add_section_symbol:
0000A1C6: E8 63 01 00 00                                        	call	store_symbol_name
0000A1CB: 0F B7 46 1E                                           	movzx	eax,word [esi+1Eh]
0000A1CF: 66 89 43 0C                                           	mov	[ebx+0Ch],ax
0000A1D3: C6 43 10 03                                           	mov	byte [ebx+10h],3
0000A1D7: 83 C6 20                                              	add	esi,20h
0000A1DA: 83 C3 12                                              	add	ebx,12h
0000A1DD: EB C8                                                 	jmp	make_symbols_table
                                                                      add_extrn_symbol:
0000A1DF: E8 4A 01 00 00                                        	call	store_symbol_name
0000A1E4: C6 43 10 02                                           	mov	byte [ebx+10h],2
0000A1E8: 83 C6 0C                                              	add	esi,0Ch
0000A1EB: 83 C3 12                                              	add	ebx,12h
0000A1EE: EB B7                                                 	jmp	make_symbols_table
                                                                      add_public_symbol:
0000A1F0: E8 39 01 00 00                                        	call	store_symbol_name
0000A1F5: 8B 46 0C                                              	mov	eax,[esi+0Ch]
0000A1F8: A3 80 A1 01 00                                        	mov	[current_line],eax
0000A1FD: 8B 46 08                                              	mov	eax,[esi+8]
0000A200: F6 40 08 01                                           	test	byte [eax+8],1
0000A204: 74 2E                                                 	jz	undefined_coff_public
0000A206: 66 8B 0D 5E A1 01 00                                  	mov	cx,[current_pass]
0000A20D: 66 3B 48 10                                           	cmp	cx,[eax+16]
0000A211: 75 21                                                 	jne	undefined_coff_public
0000A213: 8A 48 0B                                              	mov	cl,[eax+11]
0000A216: 08 C9                                                 	or	cl,cl
0000A218: 0F 84 BE 00 00 00                                     	jz	public_constant
0000A21E: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A228: 75 14                                                 	jnz	check_64bit_public_symbol
0000A22A: 80 F9 02                                              	cmp	cl,2
0000A22D: 74 18                                                 	je	public_symbol_type_ok
0000A22F: E9 26 68 FF FF                                        	jmp	invalid_use_of_symbol
                                                                      undefined_coff_public:
0000A234: A3 E4 A1 01 00                                        	mov	[error_info],eax
0000A239: E9 82 67 FF FF                                        	jmp	undefined_symbol
                                                                      check_64bit_public_symbol:
0000A23E: 80 F9 04                                              	cmp	cl,4
0000A241: 0F 85 13 68 FF FF                                     	jne	invalid_use_of_symbol
                                                                      public_symbol_type_ok:
0000A247: 8B 48 14                                              	mov	ecx,[eax+20]
0000A24A: 80 39 80                                              	cmp	byte [ecx],80h
0000A24D: 74 50                                                 	je	alias_symbol
0000A24F: 80 39 00                                              	cmp	byte [ecx],0
0000A252: 0F 85 02 68 FF FF                                     	jne	invalid_use_of_symbol
0000A258: 66 8B 49 1E                                           	mov	cx,[ecx+1Eh]
0000A25C: 66 89 4B 0C                                           	mov	[ebx+0Ch],cx
                                                                      public_symbol_section_ok:
0000A260: 0F B6 48 09                                           	movzx	ecx,byte [eax+9]
0000A264: D0 E9                                                 	shr	cl,1
0000A266: 80 E1 01                                              	and	cl,1
0000A269: F7 D9                                                 	neg	ecx
0000A26B: 3B 48 04                                              	cmp	ecx,[eax+4]
0000A26E: 0F 85 42 67 FF FF                                     	jne	value_out_of_range
0000A274: 33 08                                                 	xor	ecx,[eax]
0000A276: 0F 88 3A 67 FF FF                                     	js	value_out_of_range
0000A27C: 8B 00                                                 	mov	eax,[eax]
0000A27E: 89 43 08                                              	mov	[ebx+8],eax
0000A281: B0 02                                                 	mov	al,2
0000A283: 80 3E C0                                              	cmp	byte [esi],0C0h
0000A286: 74 09                                                 	je	store_symbol_class
0000A288: FE C0                                                 	inc	al
0000A28A: 80 3E C1                                              	cmp	byte [esi],0C1h
0000A28D: 74 02                                                 	je	store_symbol_class
0000A28F: B0 69                                                 	mov	al,105
                                                                      store_symbol_class:
0000A291: 88 43 10                                              	mov	byte [ebx+10h],al
0000A294: 83 C6 10                                              	add	esi,10h
0000A297: 83 C3 12                                              	add	ebx,12h
0000A29A: E9 08 FF FF FF                                        	jmp	make_symbols_table
                                                                      alias_symbol:
0000A29F: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
0000A2A7: 0F 83 AD 67 FF FF                                     	jnc	invalid_use_of_symbol
0000A2AD: 8B 08                                                 	mov	ecx,[eax]
0000A2AF: 0B 48 04                                              	or	ecx,[eax+4]
0000A2B2: 0F 85 A2 67 FF FF                                     	jnz	invalid_use_of_symbol
0000A2B8: C6 43 10 69                                           	mov	byte [ebx+10h],69h
0000A2BC: C6 43 11 01                                           	mov	byte [ebx+11h],1
0000A2C0: 83 C3 12                                              	add	ebx,12h
0000A2C3: 8B 48 14                                              	mov	ecx,[eax+20]
0000A2C6: 8B 09                                                 	mov	ecx,[ecx]
0000A2C8: C1 E9 08                                              	shr	ecx,8
0000A2CB: 89 0B                                                 	mov	[ebx],ecx
0000A2CD: C6 43 04 03                                           	mov	byte [ebx+4],3
0000A2D1: 83 C6 10                                              	add	esi,10h
0000A2D4: 83 C3 12                                              	add	ebx,12h
0000A2D7: E9 CB FE FF FF                                        	jmp	make_symbols_table
                                                                      public_constant:
0000A2DC: 66 C7 43 0C FF FF                                     	mov	word [ebx+0Ch],0FFFFh
0000A2E2: E9 79 FF FF FF                                        	jmp	public_symbol_section_ok
                                                                      symbols_table_ok:
0000A2E7: 89 F8                                                 	mov	eax,edi
0000A2E9: 29 D0                                                 	sub	eax,edx
0000A2EB: 89 02                                                 	mov	[edx],eax
0000A2ED: 2B 3D 6C A1 01 00                                     	sub	edi,[code_start]
0000A2F3: 89 3D 70 A1 01 00                                     	mov	[code_size],edi
0000A2F9: 83 25 78 A1 01 00 00                                  	and	[written_size],0
0000A300: 8B 15 54 A1 01 00                                     	mov	edx,[output_file]
0000A306: E8 99 60 FF FF                                        	call	create
0000A30B: 0F 82 A9 65 FF FF                                     	jc	write_failed
0000A311: 8B 15 64 A1 01 00                                     	mov	edx,[free_additional_memory]
0000A317: 59                                                    	pop	ecx
0000A318: 01 0D 78 A1 01 00                                     	add	[written_size],ecx
0000A31E: E8 B7 60 FF FF                                        	call	write
0000A323: 0F 82 91 65 FF FF                                     	jc	write_failed
0000A329: E9 7A DD FF FF                                        	jmp	write_output
                                                                      store_symbol_name:
0000A32E: 56                                                    	push	esi
0000A32F: 8B 76 04                                              	mov	esi,[esi+4]
0000A332: 09 F6                                                 	or	esi,esi
0000A334: 74 10                                                 	jz	default_name
0000A336: AD                                                    	lods	dword [esi]
0000A337: 89 C1                                                 	mov	ecx,eax
0000A339: 83 F9 08                                              	cmp	ecx,8
0000A33C: 77 17                                                 	ja	add_string
0000A33E: 57                                                    	push	edi
0000A33F: 89 DF                                                 	mov	edi,ebx
0000A341: F3 A4                                                 	rep	movs byte [edi],[esi]
0000A343: 5F 5E                                                 	pop	edi esi
0000A345: C3                                                    	ret
                                                                      default_name:
0000A346: C7 03 2E 66 6C 61                                     	mov	dword [ebx],'.fla'
0000A34C: C7 43 04 74 00 00 00                                  	mov	dword [ebx+4],'t'
0000A353: 5E                                                    	pop	esi
0000A354: C3                                                    	ret
                                                                      add_string:
0000A355: 89 F8                                                 	mov	eax,edi
0000A357: 29 D0                                                 	sub	eax,edx
0000A359: 89 43 04                                              	mov	[ebx+4],eax
0000A35C: 41                                                    	inc	ecx
0000A35D: F3 A4                                                 	rep	movs byte [edi],[esi]
0000A35F: 5E                                                    	pop	esi
0000A360: C3                                                    	ret
                                                                
                                                                format_elf:
0000A361: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A36B: 0F 85 CF 00 00 00                                     	jnz	format_elf64
0000A371: 89 FA                                                 	mov	edx,edi
0000A373: B9 0D 00 00 00                                        	mov	ecx,34h shr 2
0000A378: 8D 04 8F                                              	lea	eax,[edi+ecx*4]
0000A37B: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
0000A381: 0F 83 15 65 FF FF                                     	jae	out_of_memory
0000A387: 31 C0                                                 	xor	eax,eax
0000A389: F3 AB                                                 	rep	stos dword [edi]
0000A38B: C7 02 7F 45 4C 46                                     	mov	dword [edx],7Fh + 'ELF' shl 8
0000A391: B0 01                                                 	mov	al,1
0000A393: 88 42 04                                              	mov	[edx+4],al
0000A396: 88 42 05                                              	mov	[edx+5],al
0000A399: 88 42 06                                              	mov	[edx+6],al
0000A39C: 88 42 14                                              	mov	[edx+14h],al
0000A39F: C6 42 12 03                                           	mov	byte [edx+12h],3
0000A3A3: C6 42 28 34                                           	mov	byte [edx+28h],34h
0000A3A7: C6 42 2E 28                                           	mov	byte [edx+2Eh],28h
0000A3AB: C6 05 CA A2 01 00 20                                  	mov	[code_type],32
0000A3B2: C6 42 10 02                                           	mov	byte [edx+10h],2
0000A3B6: 66 81 3E 19 1D                                        	cmp	word [esi],1D19h
0000A3BB: 0F 84 EA 08 00 00                                     	je	format_elf_exe
0000A3C1: C6 42 10 03                                           	mov	byte [edx+10h],3
0000A3C5: 66 81 3E 1E 02                                        	cmp	word [esi],021Eh
0000A3CA: 0F 84 DB 08 00 00                                     	je	format_elf_exe
                                                                      elf_header_ok:
0000A3D0: C6 42 10 01                                           	mov	byte [edx+10h],1
0000A3D4: A1 40 A1 01 00                                        	mov	eax,[additional_memory]
0000A3D9: A3 48 A2 01 00                                        	mov	[symbols_stream],eax
0000A3DE: 89 C3                                                 	mov	ebx,eax
0000A3E0: 83 C0 20                                              	add	eax,20h
0000A3E3: 3B 05 F4 A1 01 00                                     	cmp	eax,[structures_buffer]
0000A3E9: 0F 83 AD 64 FF FF                                     	jae	out_of_memory
0000A3EF: A3 64 A1 01 00                                        	mov	[free_additional_memory],eax
0000A3F4: 31 C0                                                 	xor	eax,eax
0000A3F6: 89 1D 5C A2 01 00                                     	mov	[current_section],ebx
0000A3FC: A3 50 A2 01 00                                        	mov	[number_of_sections],eax
0000A401: 88 03                                                 	mov	[ebx],al
0000A403: 89 43 04                                              	mov	[ebx+4],eax
0000A406: 89 7B 08                                              	mov	[ebx+8],edi
0000A409: B0 07                                                 	mov	al,111b
0000A40B: 89 43 14                                              	mov	[ebx+14h],eax
0000A40E: B0 04                                                 	mov	al,4
0000A410: 89 43 10                                              	mov	[ebx+10h],eax
0000A413: 89 DA                                                 	mov	edx,ebx
0000A415: E8 7A A7 FF FF                                        	call	init_addressing_space
0000A41A: 87 D3                                                 	xchg	edx,ebx
0000A41C: 89 5A 14                                              	mov	[edx+14h],ebx
0000A41F: C6 42 09 02                                           	mov	byte [edx+9],2
0000A423: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A42D: 0F 84 23 DD FF FF                                     	jz	format_defined
0000A433: C6 42 09 04                                           	mov	byte [edx+9],4
0000A437: C6 43 10 08                                           	mov	byte [ebx+10h],8
0000A43B: E9 16 DD FF FF                                        	jmp	format_defined
                                                                      format_elf64:
0000A440: 89 FA                                                 	mov	edx,edi
0000A442: B9 10 00 00 00                                        	mov	ecx,40h shr 2
0000A447: 8D 04 8F                                              	lea	eax,[edi+ecx*4]
0000A44A: 3B 05 F0 A1 01 00                                     	cmp	eax,[tagged_blocks]
0000A450: 0F 83 46 64 FF FF                                     	jae	out_of_memory
0000A456: 31 C0                                                 	xor	eax,eax
0000A458: F3 AB                                                 	rep	stos dword [edi]
0000A45A: C7 02 7F 45 4C 46                                     	mov	dword [edx],7Fh + 'ELF' shl 8
0000A460: B0 01                                                 	mov	al,1
0000A462: 88 42 05                                              	mov	[edx+5],al
0000A465: 88 42 06                                              	mov	[edx+6],al
0000A468: 88 42 14                                              	mov	[edx+14h],al
0000A46B: C6 42 04 02                                           	mov	byte [edx+4],2
0000A46F: C6 42 12 3E                                           	mov	byte [edx+12h],62
0000A473: C6 42 34 40                                           	mov	byte [edx+34h],40h
0000A477: C6 42 3A 40                                           	mov	byte [edx+3Ah],40h
0000A47B: C6 05 CA A2 01 00 40                                  	mov	[code_type],64
0000A482: C6 42 10 02                                           	mov	byte [edx+10h],2
0000A486: 66 81 3E 19 1D                                        	cmp	word [esi],1D19h
0000A48B: 0F 84 13 09 00 00                                     	je	format_elf64_exe
0000A491: C6 42 10 03                                           	mov	byte [edx+10h],3
0000A495: 66 81 3E 1E 02                                        	cmp	word [esi],021Eh
0000A49A: 0F 84 04 09 00 00                                     	je	format_elf64_exe
0000A4A0: E9 2B FF FF FF                                        	jmp	elf_header_ok
                                                                elf_section:
0000A4A5: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
0000A4AD: 0F 82 81 64 FF FF                                     	jc	illegal_instruction
0000A4B3: E8 13 F9 FF FF                                        	call	close_coff_section
0000A4B8: 8B 1D 64 A1 01 00                                     	mov	ebx,[free_additional_memory]
0000A4BE: 8D 43 20                                              	lea	eax,[ebx+20h]
0000A4C1: 3B 05 F4 A1 01 00                                     	cmp	eax,[structures_buffer]
0000A4C7: 0F 83 CF 63 FF FF                                     	jae	out_of_memory
0000A4CD: A3 64 A1 01 00                                        	mov	[free_additional_memory],eax
0000A4D2: 89 1D 5C A2 01 00                                     	mov	[current_section],ebx
0000A4D8: 66 FF 05 50 A2 01 00                                  	inc	word [number_of_sections]
0000A4DF: 0F 84 E6 63 FF FF                                     	jz	format_limitations_exceeded
0000A4E5: 31 C0                                                 	xor	eax,eax
0000A4E7: 88 03                                                 	mov	[ebx],al
0000A4E9: 89 7B 08                                              	mov	[ebx+8],edi
0000A4EC: 89 43 10                                              	mov	[ebx+10h],eax
0000A4EF: B0 02                                                 	mov	al,10b
0000A4F1: 89 43 14                                              	mov	[ebx+14h],eax
0000A4F4: 89 DA                                                 	mov	edx,ebx
0000A4F6: E8 7D A6 FF FF                                        	call	create_addressing_space
0000A4FB: 87 D3                                                 	xchg	edx,ebx
0000A4FD: 89 5A 14                                              	mov	[edx+14h],ebx
0000A500: C6 42 09 02                                           	mov	byte [edx+9],2
0000A504: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A50E: 74 04                                                 	jz	elf_labels_type_ok
0000A510: C6 42 09 04                                           	mov	byte [edx+9],4
                                                                      elf_labels_type_ok:
0000A514: 66 AD                                                 	lods	word [esi]
0000A516: 66 83 F8 28                                           	cmp	ax,'('
0000A51A: 0F 85 0A 64 FF FF                                     	jne	invalid_argument
0000A520: 89 73 04                                              	mov	[ebx+4],esi
0000A523: 8B 0E                                                 	mov	ecx,[esi]
0000A525: 8D 74 0E 05                                           	lea	esi,[esi+4+ecx+1]
                                                                      elf_section_flags:
0000A529: 80 3E 8C                                              	cmp	byte [esi],8Ch
0000A52C: 74 27                                                 	je	elf_section_alignment
0000A52E: 80 3E 19                                              	cmp	byte [esi],19h
0000A531: 75 5C                                                 	jne	elf_section_settings_ok
0000A533: 46                                                    	inc	esi
0000A534: AC                                                    	lods	byte [esi]
0000A535: 2C 1C                                                 	sub	al,28
0000A537: 34 03                                                 	xor	al,11b
0000A539: A8 FD                                                 	test	al,not 10b
0000A53B: 0F 85 E9 63 FF FF                                     	jnz	invalid_argument
0000A541: 88 C1                                                 	mov	cl,al
0000A543: B0 01                                                 	mov	al,1
0000A545: D2 E0                                                 	shl	al,cl
0000A547: 84 43 14                                              	test	byte [ebx+14h],al
0000A54A: 0F 85 50 65 FF FF                                     	jnz	setting_already_specified
0000A550: 08 43 14                                              	or	byte [ebx+14h],al
0000A553: EB D4                                                 	jmp	elf_section_flags
                                                                      elf_section_alignment:
0000A555: 46                                                    	inc	esi
0000A556: AC                                                    	lods	byte [esi]
0000A557: 3C 28                                                 	cmp	al,'('
0000A559: 0F 85 CB 63 FF FF                                     	jne	invalid_argument
0000A55F: 80 3E 2E                                              	cmp	byte [esi],'.'
0000A562: 0F 84 44 64 FF FF                                     	je	invalid_value
0000A568: 53                                                    	push	ebx
0000A569: E8 D0 CE FF FF                                        	call	get_count_value
0000A56E: 5B                                                    	pop	ebx
0000A56F: 89 C2                                                 	mov	edx,eax
0000A571: 4A                                                    	dec	edx
0000A572: 85 D0                                                 	test	eax,edx
0000A574: 0F 85 32 64 FF FF                                     	jnz	invalid_value
0000A57A: 09 C0                                                 	or	eax,eax
0000A57C: 0F 84 2A 64 FF FF                                     	jz	invalid_value
0000A582: 87 43 10                                              	xchg	[ebx+10h],eax
0000A585: 09 C0                                                 	or	eax,eax
0000A587: 0F 85 13 65 FF FF                                     	jnz	setting_already_specified
0000A58D: EB 9A                                                 	jmp	elf_section_flags
                                                                      elf_section_settings_ok:
0000A58F: 83 7B 10 00                                           	cmp	dword [ebx+10h],0
0000A593: 0F 85 E1 A9 FF FF                                     	jne	instruction_assembled
0000A599: C7 43 10 04 00 00 00                                  	mov	dword [ebx+10h],4
0000A5A0: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A5AA: 0F 84 CA A9 FF FF                                     	jz	instruction_assembled
0000A5B0: C6 43 10 08                                           	mov	byte [ebx+10h],8
0000A5B4: E9 C1 A9 FF FF                                        	jmp	instruction_assembled
                                                                mark_elf_relocation:
0000A5B9: F7 05 40 A2 01 00 01 00 00 00                         	test	[format_flags],1
0000A5C3: 0F 85 91 64 FF FF                                     	jnz	invalid_use_of_symbol
0000A5C9: 53                                                    	push	ebx
0000A5CA: 8B 1D D0 A1 01 00                                     	mov	ebx,[addressing_space]
0000A5D0: 80 3D C0 A2 01 00 03                                  	cmp	[value_type],3
0000A5D7: 74 56                                                 	je	elf_relocation_relative
0000A5D9: 80 3D C0 A2 01 00 07                                  	cmp	[value_type],7
0000A5E0: 74 4D                                                 	je	elf_relocation_relative
0000A5E2: 50                                                    	push	eax
0000A5E3: 80 3D C0 A2 01 00 05                                  	cmp	[value_type],5
0000A5EA: 74 2C                                                 	je	elf_gotoff_relocation
0000A5EC: 0F 87 68 64 FF FF                                     	ja	invalid_use_of_symbol
0000A5F2: B0 01                                                 	mov	al,1			; R_386_32 / R_AMD64_64
0000A5F4: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A5FE: 0F 84 98 F8 FF FF                                     	jz	coff_relocation
0000A604: 80 3D C0 A2 01 00 04                                  	cmp	[value_type],4
0000A60B: 0F 84 8B F8 FF FF                                     	je	coff_relocation
0000A611: B0 0B                                                 	mov	al,11			; R_AMD64_32S
0000A613: E9 84 F8 FF FF                                        	jmp	coff_relocation
                                                                      elf_gotoff_relocation:
0000A618: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A622: 0F 85 32 64 FF FF                                     	jnz	invalid_use_of_symbol
0000A628: B0 09                                                 	mov	al,9			; R_386_GOTOFF
0000A62A: E9 6D F8 FF FF                                        	jmp	coff_relocation
                                                                      elf_relocation_relative:
0000A62F: 80 7B 09 00                                           	cmp	byte [ebx+9],0
0000A633: 0F 84 21 64 FF FF                                     	je	invalid_use_of_symbol
0000A639: 8B 1D 5C A2 01 00                                     	mov	ebx,[current_section]
0000A63F: 8B 5B 08                                              	mov	ebx,[ebx+8]
0000A642: 29 FB                                                 	sub	ebx,edi
0000A644: 29 D8                                                 	sub	eax,ebx
0000A646: 50                                                    	push	eax
0000A647: B0 02                                                 	mov	al,2			; R_386_PC32 / R_AMD64_PC32
0000A649: 80 3D C0 A2 01 00 03                                  	cmp	[value_type],3
0000A650: 0F 84 46 F8 FF FF                                     	je	coff_relocation
0000A656: B0 04                                                 	mov	al,4			; R_386_PLT32 / R_AMD64_PLT32
0000A658: E9 3F F8 FF FF                                        	jmp	coff_relocation
                                                                close_elf:
0000A65D: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
0000A665: 0F 82 94 0C 00 00                                     	jc	close_elf_exe
0000A66B: E8 5B F7 FF FF                                        	call	close_coff_section
0000A670: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
0000A677: 74 0A                                                 	je	elf_closed
0000A679: A1 48 A2 01 00                                        	mov	eax,[symbols_stream]
0000A67E: A3 64 A1 01 00                                        	mov	[free_additional_memory],eax
                                                                      elf_closed:
0000A683: C3                                                    	ret
                                                                elf_formatter:
0000A684: 89 F9                                                 	mov	ecx,edi
0000A686: 2B 0D 6C A1 01 00                                     	sub	ecx,[code_start]
0000A68C: F7 D9                                                 	neg	ecx
0000A68E: 83 E1 07                                              	and	ecx,111b
0000A691: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A69B: 75 03                                                 	jnz	align_elf_structures
0000A69D: 83 E1 03                                              	and	ecx,11b
                                                                      align_elf_structures:
0000A6A0: 30 C0                                                 	xor	al,al
0000A6A2: F3 AA                                                 	rep	stos byte [edi]
0000A6A4: 57                                                    	push	edi
0000A6A5: E8 2D F9 FF FF                                        	call	prepare_default_section
0000A6AA: 8B 35 48 A2 01 00                                     	mov	esi,[symbols_stream]
0000A6B0: 8B 3D 64 A1 01 00                                     	mov	edi,[free_additional_memory]
0000A6B6: 31 C0                                                 	xor	eax,eax
0000A6B8: B9 04 00 00 00                                        	mov	ecx,4
0000A6BD: F3 AB                                                 	rep	stos dword [edi]
0000A6BF: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A6C9: 74 07                                                 	jz	find_first_section
0000A6CB: B9 02 00 00 00                                        	mov	ecx,2
0000A6D0: F3 AB                                                 	rep	stos dword [edi]
                                                                      find_first_section:
0000A6D2: 8A 06                                                 	mov	al,[esi]
0000A6D4: 08 C0                                                 	or	al,al
0000A6D6: 74 0C                                                 	jz	first_section_found
0000A6D8: 3C C0                                                 	cmp	al,0C0h
0000A6DA: 72 03                                                 	jb	skip_other_symbol
0000A6DC: 83 C6 04                                              	add	esi,4
                                                                      skip_other_symbol:
0000A6DF: 83 C6 0C                                              	add	esi,0Ch
0000A6E2: EB EE                                                 	jmp	find_first_section
                                                                      first_section_found:
0000A6E4: 89 F3                                                 	mov	ebx,esi
0000A6E6: 89 F5                                                 	mov	ebp,esi
0000A6E8: 83 C6 20                                              	add	esi,20h
0000A6EB: 31 C9                                                 	xor	ecx,ecx
0000A6ED: 31 D2                                                 	xor	edx,edx
                                                                      find_next_section:
0000A6EF: 3B 35 64 A1 01 00                                     	cmp	esi,[free_additional_memory]
0000A6F5: 74 1C                                                 	je	make_section_symbol
0000A6F7: 8A 06                                                 	mov	al,[esi]
0000A6F9: 08 C0                                                 	or	al,al
0000A6FB: 74 16                                                 	jz	make_section_symbol
0000A6FD: 3C C0                                                 	cmp	al,0C0h
0000A6FF: 73 0D                                                 	jae	skip_public
0000A701: 3C 80                                                 	cmp	al,80h
0000A703: 73 04                                                 	jae	skip_extrn
0000A705: 80 4B 14 40                                           	or	byte [ebx+14h],40h
                                                                      skip_extrn:
0000A709: 83 C6 0C                                              	add	esi,0Ch
0000A70C: EB E1                                                 	jmp	find_next_section
                                                                      skip_public:
0000A70E: 83 C6 10                                              	add	esi,10h
0000A711: EB DC                                                 	jmp	find_next_section
                                                                      make_section_symbol:
0000A713: 89 F8                                                 	mov	eax,edi
0000A715: 87 43 04                                              	xchg	eax,[ebx+4]
0000A718: AB                                                    	stos	dword [edi]
0000A719: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A723: 75 35                                                 	jnz	elf64_section_symbol
0000A725: 31 C0                                                 	xor	eax,eax
0000A727: AB                                                    	stos	dword [edi]
0000A728: AB                                                    	stos	dword [edi]
0000A729: E8 02 00 00 00                                        	call	store_section_index
0000A72E: EB 35                                                 	jmp	section_symbol_ok
                                                                      store_section_index:
0000A730: 41                                                    	inc	ecx
0000A731: 89 C8                                                 	mov	eax,ecx
0000A733: C1 E0 08                                              	shl	eax,8
0000A736: 89 03                                                 	mov	[ebx],eax
0000A738: 66 42                                                 	inc	dx
0000A73A: 0F 84 8B 61 FF FF                                     	jz	format_limitations_exceeded
0000A740: 89 D0                                                 	mov	eax,edx
0000A742: C1 E0 10                                              	shl	eax,16
0000A745: B0 03                                                 	mov	al,3
0000A747: F6 43 14 40                                           	test	byte [ebx+14h],40h
0000A74B: 74 0B                                                 	jz	section_index_ok
0000A74D: 80 CC FF                                              	or	ah,-1
0000A750: 66 42                                                 	inc	dx
0000A752: 0F 84 73 61 FF FF                                     	jz	format_limitations_exceeded
                                                                      section_index_ok:
0000A758: AB                                                    	stos	dword [edi]
0000A759: C3                                                    	ret
                                                                      elf64_section_symbol:
0000A75A: E8 D1 FF FF FF                                        	call	store_section_index
0000A75F: 31 C0                                                 	xor	eax,eax
0000A761: AB                                                    	stos	dword [edi]
0000A762: AB                                                    	stos	dword [edi]
0000A763: AB                                                    	stos	dword [edi]
0000A764: AB                                                    	stos	dword [edi]
                                                                      section_symbol_ok:
0000A765: 89 F3                                                 	mov	ebx,esi
0000A767: 83 C6 20                                              	add	esi,20h
0000A76A: 3B 1D 64 A1 01 00                                     	cmp	ebx,[free_additional_memory]
0000A770: 0F 85 79 FF FF FF                                     	jne	find_next_section
0000A776: 66 42                                                 	inc	dx
0000A778: 0F 84 4D 61 FF FF                                     	jz	format_limitations_exceeded
0000A77E: 89 15 5C A2 01 00                                     	mov	[current_section],edx
0000A784: 8B 35 48 A2 01 00                                     	mov	esi,[symbols_stream]
                                                                      find_other_symbols:
0000A78A: 3B 35 64 A1 01 00                                     	cmp	esi,[free_additional_memory]
0000A790: 0F 84 60 01 00 00                                     	je	elf_symbol_table_ok
0000A796: 8A 06                                                 	mov	al,[esi]
0000A798: 08 C0                                                 	or	al,al
0000A79A: 74 11                                                 	jz	skip_section
0000A79C: 3C C0                                                 	cmp	al,0C0h
0000A79E: 73 12                                                 	jae	make_public_symbol
0000A7A0: 3C 80                                                 	cmp	al,80h
0000A7A2: 0F 83 0C 01 00 00                                     	jae	make_extrn_symbol
0000A7A8: 83 C6 0C                                              	add	esi,0Ch
0000A7AB: EB DD                                                 	jmp	find_other_symbols
                                                                      skip_section:
0000A7AD: 83 C6 20                                              	add	esi,20h
0000A7B0: EB D8                                                 	jmp	find_other_symbols
                                                                      make_public_symbol:
0000A7B2: 8B 46 0C                                              	mov	eax,[esi+0Ch]
0000A7B5: A3 80 A1 01 00                                        	mov	[current_line],eax
0000A7BA: 80 3E C0                                              	cmp	byte [esi],0C0h
0000A7BD: 0F 85 67 61 FF FF                                     	jne	invalid_argument
0000A7C3: 8B 5E 08                                              	mov	ebx,[esi+8]
0000A7C6: F6 43 08 01                                           	test	byte [ebx+8],1
0000A7CA: 74 3D                                                 	jz	undefined_public
0000A7CC: 66 A1 5E A1 01 00                                     	mov	ax,[current_pass]
0000A7D2: 66 3B 43 10                                           	cmp	ax,[ebx+16]
0000A7D6: 75 31                                                 	jne	undefined_public
0000A7D8: 8A 53 0B                                              	mov	dl,[ebx+11]
0000A7DB: 08 D2                                                 	or	dl,dl
0000A7DD: 74 44                                                 	jz	public_absolute
0000A7DF: 8B 43 14                                              	mov	eax,[ebx+20]
0000A7E2: 80 38 00                                              	cmp	byte [eax],0
0000A7E5: 0F 85 6F 62 FF FF                                     	jne	invalid_use_of_symbol
0000A7EB: 8B 40 04                                              	mov	eax,[eax+4]
0000A7EE: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A7F8: 75 1A                                                 	jnz	elf64_public
0000A7FA: 80 FA 02                                              	cmp	dl,2
0000A7FD: 0F 85 57 62 FF FF                                     	jne	invalid_use_of_symbol
0000A803: 66 8B 50 0E                                           	mov	dx,[eax+0Eh]
0000A807: EB 1E                                                 	jmp	section_for_public_ok
                                                                      undefined_public:
0000A809: 89 1D E4 A1 01 00                                     	mov	[error_info],ebx
0000A80F: E9 AC 61 FF FF                                        	jmp	undefined_symbol
                                                                      elf64_public:
0000A814: 80 FA 04                                              	cmp	dl,4
0000A817: 0F 85 3D 62 FF FF                                     	jne	invalid_use_of_symbol
0000A81D: 66 8B 50 06                                           	mov	dx,[eax+6]
0000A821: EB 04                                                 	jmp	section_for_public_ok
                                                                      public_absolute:
0000A823: 66 BA F1 FF                                           	mov	dx,0FFF1h
                                                                      section_for_public_ok:
0000A827: 8B 46 04                                              	mov	eax,[esi+4]
0000A82A: AB                                                    	stos	dword [edi]
0000A82B: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A835: 75 3A                                                 	jnz	elf64_public_symbol
0000A837: 0F B6 43 09                                           	movzx	eax,byte [ebx+9]
0000A83B: D0 E8                                                 	shr	al,1
0000A83D: 24 01                                                 	and	al,1
0000A83F: F7 D8                                                 	neg	eax
0000A841: 3B 43 04                                              	cmp	eax,[ebx+4]
0000A844: 0F 85 6C 61 FF FF                                     	jne	value_out_of_range
0000A84A: 33 03                                                 	xor	eax,[ebx]
0000A84C: 0F 88 64 61 FF FF                                     	js	value_out_of_range
0000A852: 8B 03                                                 	mov	eax,[ebx]
0000A854: AB                                                    	stos	dword [edi]
0000A855: 31 C0                                                 	xor	eax,eax
0000A857: 8A 43 0A                                              	mov	al,[ebx+10]
0000A85A: AB                                                    	stos	dword [edi]
0000A85B: 89 D0                                                 	mov	eax,edx
0000A85D: C1 E0 10                                              	shl	eax,16
0000A860: B0 10                                                 	mov	al,10h
0000A862: 80 7B 0A 00                                           	cmp	byte [ebx+10],0
0000A866: 74 04                                                 	je	elf_public_function
0000A868: 0C 01                                                 	or	al,1
0000A86A: EB 02                                                 	jmp	store_elf_public_info
                                                                      elf_public_function:
0000A86C: 0C 02                                                 	or	al,2
                                                                      store_elf_public_info:
0000A86E: AB                                                    	stos	dword [edi]
0000A86F: EB 31                                                 	jmp	public_symbol_ok
                                                                      elf64_public_symbol:
0000A871: 89 D0                                                 	mov	eax,edx
0000A873: C1 E0 10                                              	shl	eax,16
0000A876: B0 10                                                 	mov	al,10h
0000A878: 80 7B 0A 00                                           	cmp	byte [ebx+10],0
0000A87C: 74 04                                                 	je	elf64_public_function
0000A87E: 0C 01                                                 	or	al,1
0000A880: EB 02                                                 	jmp	store_elf64_public_info
                                                                      elf64_public_function:
0000A882: 0C 02                                                 	or	al,2
                                                                      store_elf64_public_info:
0000A884: AB                                                    	stos	dword [edi]
0000A885: 8A 43 09                                              	mov	al,[ebx+9]
0000A888: C1 E0 1E                                              	shl	eax,31-1
0000A88B: 33 43 04                                              	xor	eax,[ebx+4]
0000A88E: 0F 88 22 61 FF FF                                     	js	value_out_of_range
0000A894: 8B 03                                                 	mov	eax,[ebx]
0000A896: AB                                                    	stos	dword [edi]
0000A897: 8B 43 04                                              	mov	eax,[ebx+4]
0000A89A: AB                                                    	stos	dword [edi]
0000A89B: 8A 43 0A                                              	mov	al,[ebx+10]
0000A89E: AB                                                    	stos	dword [edi]
0000A89F: 30 C0                                                 	xor	al,al
0000A8A1: AB                                                    	stos	dword [edi]
                                                                      public_symbol_ok:
0000A8A2: 41                                                    	inc	ecx
0000A8A3: 89 C8                                                 	mov	eax,ecx
0000A8A5: C1 E0 08                                              	shl	eax,8
0000A8A8: B0 C0                                                 	mov	al,0C0h
0000A8AA: 89 06                                                 	mov	[esi],eax
0000A8AC: 83 C6 10                                              	add	esi,10h
0000A8AF: E9 D6 FE FF FF                                        	jmp	find_other_symbols
                                                                      make_extrn_symbol:
0000A8B4: 8B 46 04                                              	mov	eax,[esi+4]
0000A8B7: AB                                                    	stos	dword [edi]
0000A8B8: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A8C2: 75 0F                                                 	jnz	elf64_extrn_symbol
0000A8C4: 31 C0                                                 	xor	eax,eax
0000A8C6: AB                                                    	stos	dword [edi]
0000A8C7: 8B 46 08                                              	mov	eax,[esi+8]
0000A8CA: AB                                                    	stos	dword [edi]
0000A8CB: B8 10 00 00 00                                        	mov	eax,10h
0000A8D0: AB                                                    	stos	dword [edi]
0000A8D1: EB 11                                                 	jmp	extrn_symbol_ok
                                                                      elf64_extrn_symbol:
0000A8D3: B8 10 00 00 00                                        	mov	eax,10h
0000A8D8: AB                                                    	stos	dword [edi]
0000A8D9: 30 C0                                                 	xor	al,al
0000A8DB: AB                                                    	stos	dword [edi]
0000A8DC: AB                                                    	stos	dword [edi]
0000A8DD: 8B 46 08                                              	mov	eax,[esi+8]
0000A8E0: AB                                                    	stos	dword [edi]
0000A8E1: 31 C0                                                 	xor	eax,eax
0000A8E3: AB                                                    	stos	dword [edi]
                                                                      extrn_symbol_ok:
0000A8E4: 41                                                    	inc	ecx
0000A8E5: 89 C8                                                 	mov	eax,ecx
0000A8E7: C1 E0 08                                              	shl	eax,8
0000A8EA: B0 80                                                 	mov	al,80h
0000A8EC: 89 06                                                 	mov	[esi],eax
0000A8EE: 83 C6 0C                                              	add	esi,0Ch
0000A8F1: E9 94 FE FF FF                                        	jmp	find_other_symbols
                                                                      elf_symbol_table_ok:
0000A8F6: 89 FA                                                 	mov	edx,edi
0000A8F8: 8B 1D 64 A1 01 00                                     	mov	ebx,[free_additional_memory]
0000A8FE: 30 C0                                                 	xor	al,al
0000A900: AA                                                    	stos	byte [edi]
0000A901: 83 C7 10                                              	add	edi,16
0000A904: 89 52 01                                              	mov	[edx+1],edx
0000A907: 83 C3 10                                              	add	ebx,10h
0000A90A: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A914: 74 03                                                 	jz	make_string_table
0000A916: 83 C3 08                                              	add	ebx,8
                                                                      make_string_table:
0000A919: 39 D3                                                 	cmp	ebx,edx
0000A91B: 74 5F                                                 	je	elf_string_table_ok
0000A91D: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A927: 75 27                                                 	jnz	make_elf64_string
0000A929: 80 7B 0D 00                                           	cmp	byte [ebx+0Dh],0
0000A92D: 74 0A                                                 	je	rel_prefix_ok
0000A92F: C6 43 0D 00                                           	mov	byte [ebx+0Dh],0
0000A933: B8 2E 72 65 6C                                        	mov	eax,'.rel'
0000A938: AB                                                    	stos	dword [edi]
                                                                      rel_prefix_ok:
0000A939: 89 FE                                                 	mov	esi,edi
0000A93B: 29 D6                                                 	sub	esi,edx
0000A93D: 87 33                                                 	xchg	esi,[ebx]
0000A93F: 83 C3 10                                              	add	ebx,10h
                                                                      make_elf_string:
0000A942: 09 F6                                                 	or	esi,esi
0000A944: 74 28                                                 	jz	default_string
0000A946: AD                                                    	lods	dword [esi]
0000A947: 89 C1                                                 	mov	ecx,eax
0000A949: F3 A4                                                 	rep	movs byte [edi],[esi]
0000A94B: 30 C0                                                 	xor	al,al
0000A94D: AA                                                    	stos	byte [edi]
0000A94E: EB C9                                                 	jmp	make_string_table
                                                                      make_elf64_string:
0000A950: 80 7B 05 00                                           	cmp	byte [ebx+5],0
0000A954: 74 0D                                                 	je	elf64_rel_prefix_ok
0000A956: C6 43 05 00                                           	mov	byte [ebx+5],0
0000A95A: B8 2E 72 65 6C                                        	mov	eax,'.rel'
0000A95F: AB                                                    	stos	dword [edi]
0000A960: B0 61                                                 	mov	al,'a'
0000A962: AA                                                    	stos	byte [edi]
                                                                      elf64_rel_prefix_ok:
0000A963: 89 FE                                                 	mov	esi,edi
0000A965: 29 D6                                                 	sub	esi,edx
0000A967: 87 33                                                 	xchg	esi,[ebx]
0000A969: 83 C3 18                                              	add	ebx,18h
0000A96C: EB D4                                                 	jmp	make_elf_string
                                                                      default_string:
0000A96E: B8 2E 66 6C 61                                        	mov	eax,'.fla'
0000A973: AB                                                    	stos	dword [edi]
0000A974: 66 B8 74 00                                           	mov	ax,'t'
0000A978: 66 AB                                                 	stos	word [edi]
0000A97A: EB 9D                                                 	jmp	make_string_table
                                                                      elf_string_table_ok:
0000A97C: 89 7A 09                                              	mov	[edx+1+8],edi
0000A97F: 8B 1D 6C A1 01 00                                     	mov	ebx,[code_start]
0000A985: 89 F8                                                 	mov	eax,edi
0000A987: 2B 05 64 A1 01 00                                     	sub	eax,[free_additional_memory]
0000A98D: 31 C9                                                 	xor	ecx,ecx
0000A98F: 29 C1                                                 	sub	ecx,eax
0000A991: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A99B: 75 27                                                 	jnz	finish_elf64_header
0000A99D: 83 E1 03                                              	and	ecx,11b
0000A9A0: 01 C8                                                 	add	eax,ecx
0000A9A2: 89 43 20                                              	mov	[ebx+20h],eax
0000A9A5: A1 5C A2 01 00                                        	mov	eax,[current_section]
0000A9AA: 66 40                                                 	inc	ax
0000A9AC: 0F 84 19 5F FF FF                                     	jz	format_limitations_exceeded
0000A9B2: 66 89 43 32                                           	mov	[ebx+32h],ax
0000A9B6: 66 40                                                 	inc	ax
0000A9B8: 0F 84 0D 5F FF FF                                     	jz	format_limitations_exceeded
0000A9BE: 66 89 43 30                                           	mov	[ebx+30h],ax
0000A9C2: EB 25                                                 	jmp	elf_header_finished
                                                                      finish_elf64_header:
0000A9C4: 83 E1 07                                              	and	ecx,111b
0000A9C7: 01 C8                                                 	add	eax,ecx
0000A9C9: 89 43 28                                              	mov	[ebx+28h],eax
0000A9CC: A1 5C A2 01 00                                        	mov	eax,[current_section]
0000A9D1: 66 40                                                 	inc	ax
0000A9D3: 0F 84 F2 5E FF FF                                     	jz	format_limitations_exceeded
0000A9D9: 66 89 43 3E                                           	mov	[ebx+3Eh],ax
0000A9DD: 66 40                                                 	inc	ax
0000A9DF: 0F 84 E6 5E FF FF                                     	jz	format_limitations_exceeded
0000A9E5: 66 89 43 3C                                           	mov	[ebx+3Ch],ax
                                                                      elf_header_finished:
0000A9E9: 31 C0                                                 	xor	eax,eax
0000A9EB: 83 C1 28                                              	add	ecx,10*4
0000A9EE: F3 AA                                                 	rep	stos byte [edi]
0000A9F0: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000A9FA: 74 07                                                 	jz	elf_null_section_ok
0000A9FC: B9 18 00 00 00                                        	mov	ecx,6*4
0000AA01: F3 AA                                                 	rep	stos byte [edi]
                                                                      elf_null_section_ok:
0000AA03: 89 EE                                                 	mov	esi,ebp
0000AA05: 31 C9                                                 	xor	ecx,ecx
                                                                      make_section_entry:
0000AA07: 89 FB                                                 	mov	ebx,edi
0000AA09: 8B 46 04                                              	mov	eax,[esi+4]
0000AA0C: 8B 00                                                 	mov	eax,[eax]
0000AA0E: AB                                                    	stos	dword [edi]
0000AA0F: B8 01 00 00 00                                        	mov	eax,1
0000AA14: 83 7E 0C 00                                           	cmp	dword [esi+0Ch],0
0000AA18: 74 06                                                 	je	bss_section
0000AA1A: F6 46 14 80                                           	test	byte [esi+14h],80h
0000AA1E: 74 02                                                 	jz	section_type_ok
                                                                      bss_section:
0000AA20: B0 08                                                 	mov	al,8
                                                                      section_type_ok:
0000AA22: AB                                                    	stos	dword [edi]
0000AA23: 8B 46 14                                              	mov	eax,[esi+14h]
0000AA26: 24 3F                                                 	and	al,3Fh
0000AA28: E8 AE 00 00 00                                        	call	store_elf_machine_word
0000AA2D: 31 C0                                                 	xor	eax,eax
0000AA2F: E8 A7 00 00 00                                        	call	store_elf_machine_word
0000AA34: 8B 46 08                                              	mov	eax,[esi+8]
0000AA37: A3 68 A2 01 00                                        	mov	[image_base],eax
0000AA3C: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
0000AA42: E8 94 00 00 00                                        	call	store_elf_machine_word
0000AA47: 8B 46 0C                                              	mov	eax,[esi+0Ch]
0000AA4A: E8 8C 00 00 00                                        	call	store_elf_machine_word
0000AA4F: 31 C0                                                 	xor	eax,eax
0000AA51: AB                                                    	stos	dword [edi]
0000AA52: AB                                                    	stos	dword [edi]
0000AA53: 8B 46 10                                              	mov	eax,[esi+10h]
0000AA56: E8 80 00 00 00                                        	call	store_elf_machine_word
0000AA5B: 31 C0                                                 	xor	eax,eax
0000AA5D: E8 79 00 00 00                                        	call	store_elf_machine_word
0000AA62: 41                                                    	inc	ecx
0000AA63: 83 C6 20                                              	add	esi,20h
0000AA66: 87 3C 24                                              	xchg	edi,[esp]
0000AA69: 89 FD                                                 	mov	ebp,edi
                                                                      convert_relocations:
0000AA6B: 3B 35 64 A1 01 00                                     	cmp	esi,[free_additional_memory]
0000AA71: 74 7C                                                 	je	relocations_converted
0000AA73: 8A 06                                                 	mov	al,[esi]
0000AA75: 08 C0                                                 	or	al,al
0000AA77: 74 76                                                 	jz	relocations_converted
0000AA79: 3C 80                                                 	cmp	al,80h
0000AA7B: 72 09                                                 	jb	make_relocation_entry
0000AA7D: 3C C0                                                 	cmp	al,0C0h
0000AA7F: 72 55                                                 	jb	relocation_entry_ok
0000AA81: 83 C6 10                                              	add	esi,10h
0000AA84: EB E5                                                 	jmp	convert_relocations
                                                                      make_relocation_entry:
0000AA86: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AA90: 75 0E                                                 	jnz	make_elf64_relocation_entry
0000AA92: 8B 46 04                                              	mov	eax,[esi+4]
0000AA95: AB                                                    	stos	dword [edi]
0000AA96: 8B 46 08                                              	mov	eax,[esi+8]
0000AA99: 8B 00                                                 	mov	eax,[eax]
0000AA9B: 8A 06                                                 	mov	al,[esi]
0000AA9D: AB                                                    	stos	dword [edi]
0000AA9E: EB 36                                                 	jmp	relocation_entry_ok
                                                                      make_elf64_relocation_entry:
0000AAA0: 8B 46 04                                              	mov	eax,[esi+4]
0000AAA3: AB                                                    	stos	dword [edi]
0000AAA4: 31 C0                                                 	xor	eax,eax
0000AAA6: AB                                                    	stos	dword [edi]
0000AAA7: 0F B6 06                                              	movzx	eax,byte [esi]
0000AAAA: AB                                                    	stos	dword [edi]
0000AAAB: 8B 46 08                                              	mov	eax,[esi+8]
0000AAAE: 8B 00                                                 	mov	eax,[eax]
0000AAB0: C1 E8 08                                              	shr	eax,8
0000AAB3: AB                                                    	stos	dword [edi]
0000AAB4: 31 C0                                                 	xor	eax,eax
0000AAB6: 52                                                    	push	edx
0000AAB7: 8B 56 04                                              	mov	edx,[esi+4]
0000AABA: 03 15 68 A2 01 00                                     	add	edx,[image_base]
0000AAC0: 87 02                                                 	xchg	eax,[edx]
0000AAC2: AB                                                    	stos	dword [edi]
0000AAC3: 80 3E 01                                              	cmp	byte [esi],1
0000AAC6: 74 07                                                 	je	addend_64bit
0000AAC8: 5A                                                    	pop	edx
0000AAC9: C1 F8 1F                                              	sar	eax,31
0000AACC: AB                                                    	stos	dword [edi]
0000AACD: EB 07                                                 	jmp	relocation_entry_ok
                                                                      addend_64bit:
0000AACF: 31 C0                                                 	xor	eax,eax
0000AAD1: 87 42 04                                              	xchg	eax,[edx+4]
0000AAD4: AB                                                    	stos	dword [edi]
0000AAD5: 5A                                                    	pop	edx
                                                                      relocation_entry_ok:
0000AAD6: 83 C6 0C                                              	add	esi,0Ch
0000AAD9: EB 90                                                 	jmp	convert_relocations
                                                                      store_elf_machine_word:
0000AADB: AB                                                    	stos	dword [edi]
0000AADC: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AAE6: 74 06                                                 	jz	elf_machine_word_ok
0000AAE8: 83 27 00                                              	and	dword [edi],0
0000AAEB: 83 C7 04                                              	add	edi,4
                                                                      elf_machine_word_ok:
0000AAEE: C3                                                    	ret
                                                                      relocations_converted:
0000AAEF: 39 EF                                                 	cmp	edi,ebp
0000AAF1: 87 3C 24                                              	xchg	edi,[esp]
0000AAF4: 74 7F                                                 	je	rel_section_ok
0000AAF6: 8B 03                                                 	mov	eax,[ebx]
0000AAF8: 83 E8 04                                              	sub	eax,4
0000AAFB: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AB05: 74 01                                                 	jz	store_relocations_name_offset
0000AB07: 48                                                    	dec	eax
                                                                      store_relocations_name_offset:
0000AB08: AB                                                    	stos	dword [edi]
0000AB09: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AB13: 75 07                                                 	jnz	rela_section
0000AB15: B8 09 00 00 00                                        	mov	eax,9
0000AB1A: EB 05                                                 	jmp	store_relocations_type
                                                                      rela_section:
0000AB1C: B8 04 00 00 00                                        	mov	eax,4
                                                                      store_relocations_type:
0000AB21: AB                                                    	stos	dword [edi]
0000AB22: 30 C0                                                 	xor	al,al
0000AB24: E8 B2 FF FF FF                                        	call	store_elf_machine_word
0000AB29: E8 AD FF FF FF                                        	call	store_elf_machine_word
0000AB2E: 89 E8                                                 	mov	eax,ebp
0000AB30: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
0000AB36: E8 A0 FF FF FF                                        	call	store_elf_machine_word
0000AB3B: 8B 04 24                                              	mov	eax,[esp]
0000AB3E: 29 E8                                                 	sub	eax,ebp
0000AB40: E8 96 FF FF FF                                        	call	store_elf_machine_word
0000AB45: A1 5C A2 01 00                                        	mov	eax,[current_section]
0000AB4A: AB                                                    	stos	dword [edi]
0000AB4B: 89 C8                                                 	mov	eax,ecx
0000AB4D: AB                                                    	stos	dword [edi]
0000AB4E: 41                                                    	inc	ecx
0000AB4F: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AB59: 75 0B                                                 	jnz	finish_elf64_rela_section
0000AB5B: B8 04 00 00 00                                        	mov	eax,4
0000AB60: AB                                                    	stos	dword [edi]
0000AB61: B0 08                                                 	mov	al,8
0000AB63: AB                                                    	stos	dword [edi]
0000AB64: EB 0F                                                 	jmp	rel_section_ok
                                                                      finish_elf64_rela_section:
0000AB66: B8 08 00 00 00                                        	mov	eax,8
0000AB6B: AB                                                    	stos	dword [edi]
0000AB6C: 30 C0                                                 	xor	al,al
0000AB6E: AB                                                    	stos	dword [edi]
0000AB6F: B0 18                                                 	mov	al,24
0000AB71: AB                                                    	stos	dword [edi]
0000AB72: 30 C0                                                 	xor	al,al
0000AB74: AB                                                    	stos	dword [edi]
                                                                      rel_section_ok:
0000AB75: 3B 35 64 A1 01 00                                     	cmp	esi,[free_additional_memory]
0000AB7B: 0F 85 86 FE FF FF                                     	jne	make_section_entry
0000AB81: 58                                                    	pop	eax
0000AB82: 8B 1D 6C A1 01 00                                     	mov	ebx,[code_start]
0000AB88: 29 D8                                                 	sub	eax,ebx
0000AB8A: A3 70 A1 01 00                                        	mov	[code_size],eax
0000AB8F: B9 20 00 00 00                                        	mov	ecx,20h
0000AB94: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AB9E: 74 05                                                 	jz	adjust_elf_section_headers_offset
0000ABA0: B9 28 00 00 00                                        	mov	ecx,28h
                                                                      adjust_elf_section_headers_offset:
0000ABA5: 01 04 0B                                              	add	[ebx+ecx],eax
0000ABA8: B8 01 00 00 00                                        	mov	eax,1
0000ABAD: AB                                                    	stos	dword [edi]
0000ABAE: B0 02                                                 	mov	al,2
0000ABB0: AB                                                    	stos	dword [edi]
0000ABB1: 30 C0                                                 	xor	al,al
0000ABB3: E8 23 FF FF FF                                        	call	store_elf_machine_word
0000ABB8: E8 1E FF FF FF                                        	call	store_elf_machine_word
0000ABBD: A1 70 A1 01 00                                        	mov	eax,[code_size]
0000ABC2: E8 14 FF FF FF                                        	call	store_elf_machine_word
0000ABC7: 8B 42 01                                              	mov	eax,[edx+1]
0000ABCA: 2B 05 64 A1 01 00                                     	sub	eax,[free_additional_memory]
0000ABD0: E8 06 FF FF FF                                        	call	store_elf_machine_word
0000ABD5: A1 5C A2 01 00                                        	mov	eax,[current_section]
0000ABDA: 40                                                    	inc	eax
0000ABDB: AB                                                    	stos	dword [edi]
0000ABDC: A1 50 A2 01 00                                        	mov	eax,[number_of_sections]
0000ABE1: 40                                                    	inc	eax
0000ABE2: AB                                                    	stos	dword [edi]
0000ABE3: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000ABED: 75 0B                                                 	jnz	finish_elf64_sym_section
0000ABEF: B8 04 00 00 00                                        	mov	eax,4
0000ABF4: AB                                                    	stos	dword [edi]
0000ABF5: B0 10                                                 	mov	al,10h
0000ABF7: AB                                                    	stos	dword [edi]
0000ABF8: EB 0F                                                 	jmp	sym_section_ok
                                                                      finish_elf64_sym_section:
0000ABFA: B8 08 00 00 00                                        	mov	eax,8
0000ABFF: AB                                                    	stos	dword [edi]
0000AC00: 30 C0                                                 	xor	al,al
0000AC02: AB                                                    	stos	dword [edi]
0000AC03: B0 18                                                 	mov	al,18h
0000AC05: AB                                                    	stos	dword [edi]
0000AC06: 30 C0                                                 	xor	al,al
0000AC08: AB                                                    	stos	dword [edi]
                                                                      sym_section_ok:
0000AC09: B0 09                                                 	mov	al,1+8
0000AC0B: AB                                                    	stos	dword [edi]
0000AC0C: B0 03                                                 	mov	al,3
0000AC0E: AB                                                    	stos	dword [edi]
0000AC0F: 30 C0                                                 	xor	al,al
0000AC11: E8 C5 FE FF FF                                        	call	store_elf_machine_word
0000AC16: E8 C0 FE FF FF                                        	call	store_elf_machine_word
0000AC1B: 8B 42 01                                              	mov	eax,[edx+1]
0000AC1E: 2B 05 64 A1 01 00                                     	sub	eax,[free_additional_memory]
0000AC24: 03 05 70 A1 01 00                                     	add	eax,[code_size]
0000AC2A: E8 AC FE FF FF                                        	call	store_elf_machine_word
0000AC2F: 8B 42 09                                              	mov	eax,[edx+1+8]
0000AC32: 2B 42 01                                              	sub	eax,[edx+1]
0000AC35: E8 A1 FE FF FF                                        	call	store_elf_machine_word
0000AC3A: 31 C0                                                 	xor	eax,eax
0000AC3C: AB                                                    	stos	dword [edi]
0000AC3D: AB                                                    	stos	dword [edi]
0000AC3E: B0 01                                                 	mov	al,1
0000AC40: E8 96 FE FF FF                                        	call	store_elf_machine_word
0000AC45: 31 C0                                                 	xor	eax,eax
0000AC47: E8 8F FE FF FF                                        	call	store_elf_machine_word
0000AC4C: B8 74 61 62 00                                        	mov	eax,'tab'
0000AC51: C7 42 01 2E 73 79 6D                                  	mov	dword [edx+1],'.sym'
0000AC58: 89 42 05                                              	mov	[edx+1+4],eax
0000AC5B: C7 42 09 2E 73 74 72                                  	mov	dword [edx+1+8],'.str'
0000AC62: 89 42 0D                                              	mov	[edx+1+8+4],eax
0000AC65: 89 15 74 A2 01 00                                     	mov	[resource_data],edx
0000AC6B: C7 05 78 A1 01 00 00 00 00 00                         	mov	[written_size],0
0000AC75: 8B 15 54 A1 01 00                                     	mov	edx,[output_file]
0000AC7B: E8 24 57 FF FF                                        	call	create
0000AC80: 0F 82 34 5C FF FF                                     	jc	write_failed
0000AC86: E8 35 D4 FF FF                                        	call	write_code
0000AC8B: 89 F9                                                 	mov	ecx,edi
0000AC8D: 8B 15 64 A1 01 00                                     	mov	edx,[free_additional_memory]
0000AC93: 29 D1                                                 	sub	ecx,edx
0000AC95: 01 0D 78 A1 01 00                                     	add	[written_size],ecx
0000AC9B: E8 3A 57 FF FF                                        	call	write
0000ACA0: 0F 82 14 5C FF FF                                     	jc	write_failed
0000ACA6: E9 02 D4 FF FF                                        	jmp	output_written
                                                                
                                                                format_elf_exe:
0000ACAB: 83 C6 02                                              	add	esi,2
0000ACAE: 83 0D 40 A2 01 00 01                                  	or	[format_flags],1
0000ACB5: 80 3E 28                                              	cmp	byte [esi],'('
0000ACB8: 75 21                                                 	jne	elf_exe_brand_ok
0000ACBA: 46                                                    	inc	esi
0000ACBB: 80 3E 2E                                              	cmp	byte [esi],'.'
0000ACBE: 0F 84 E8 5C FF FF                                     	je	invalid_value
0000ACC4: 52                                                    	push	edx
0000ACC5: E8 ED C5 FF FF                                        	call	get_byte_value
0000ACCA: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000ACD1: 0F 85 83 5D FF FF                                     	jne	invalid_use_of_symbol
0000ACD7: 5A                                                    	pop	edx
0000ACD8: 88 42 07                                              	mov	[edx+7],al
                                                                      elf_exe_brand_ok:
0000ACDB: C7 05 68 A2 01 00 00 80 04 08                         	mov	[image_base],8048000h
0000ACE5: 80 3E 80                                              	cmp	byte [esi],80h
0000ACE8: 75 2D                                                 	jne	elf_exe_base_ok
0000ACEA: 66 AD                                                 	lods	word [esi]
0000ACEC: 80 FC 28                                              	cmp	ah,'('
0000ACEF: 0F 85 35 5C FF FF                                     	jne	invalid_argument
0000ACF5: 80 3E 2E                                              	cmp	byte [esi],'.'
0000ACF8: 0F 84 AE 5C FF FF                                     	je	invalid_value
0000ACFE: 52                                                    	push	edx
0000ACFF: E8 86 C6 FF FF                                        	call	get_dword_value
0000AD04: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000AD0B: 0F 85 49 5D FF FF                                     	jne	invalid_use_of_symbol
0000AD11: A3 68 A2 01 00                                        	mov	[image_base],eax
0000AD16: 5A                                                    	pop	edx
                                                                      elf_exe_base_ok:
0000AD17: C6 42 2A 20                                           	mov	byte [edx+2Ah],20h
0000AD1B: 89 FB                                                 	mov	ebx,edi
0000AD1D: B9 08 00 00 00                                        	mov	ecx,20h shr 2
0000AD22: 66 83 3D 5E A1 01 00 00                               	cmp	[current_pass],0
0000AD2A: 74 07                                                 	je	init_elf_segments
0000AD2C: 0F AF 0D 50 A2 01 00                                  	imul	ecx,[number_of_sections]
                                                                      init_elf_segments:
0000AD33: 31 C0                                                 	xor	eax,eax
0000AD35: F3 AB                                                 	rep	stos dword [edi]
0000AD37: 83 25 50 A2 01 00 00                                  	and	[number_of_sections],0
0000AD3E: C6 03 01                                              	mov	byte [ebx],1
0000AD41: 66 C7 43 1C 00 10                                     	mov	word [ebx+1Ch],1000h
0000AD47: C6 43 18 07                                           	mov	byte [ebx+18h],111b
0000AD4B: 8B 2D 68 A2 01 00                                     	mov	ebp,[image_base]
0000AD51: 83 63 04 00                                           	and	dword [ebx+4],0
0000AD55: 89 6B 08                                              	mov	[ebx+8],ebp
0000AD58: 89 6B 0C                                              	mov	[ebx+0Ch],ebp
0000AD5B: 89 F8                                                 	mov	eax,edi
0000AD5D: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
0000AD63: 01 E8                                                 	add	eax,ebp
0000AD65: 89 42 18                                              	mov	[edx+18h],eax
0000AD68: 83 25 6C A2 01 00 00                                  	and	[image_base_high],0
                                                                      elf_exe_addressing_setup:
0000AD6F: E8 20 9E FF FF                                        	call	init_addressing_space
0000AD74: E8 0C 01 00 00                                        	call	setup_elf_exe_labels_type
0000AD79: A1 6C A1 01 00                                        	mov	eax,[code_start]
0000AD7E: 31 D2                                                 	xor	edx,edx
0000AD80: 30 C9                                                 	xor	cl,cl
0000AD82: 2B 05 68 A2 01 00                                     	sub	eax,[image_base]
0000AD88: 1B 15 6C A2 01 00                                     	sbb	edx,[image_base_high]
0000AD8E: 80 D9 00                                              	sbb	cl,0
0000AD91: 89 03                                                 	mov	[ebx],eax
0000AD93: 89 53 04                                              	mov	[ebx+4],edx
0000AD96: 88 4B 08                                              	mov	[ebx+8],cl
0000AD99: 89 3D 48 A2 01 00                                     	mov	[symbols_stream],edi
0000AD9F: E9 B2 D3 FF FF                                        	jmp	format_defined
                                                                      format_elf64_exe:
0000ADA4: 83 C6 02                                              	add	esi,2
0000ADA7: 83 0D 40 A2 01 00 01                                  	or	[format_flags],1
0000ADAE: 80 3E 28                                              	cmp	byte [esi],'('
0000ADB1: 75 21                                                 	jne	elf64_exe_brand_ok
0000ADB3: 46                                                    	inc	esi
0000ADB4: 80 3E 2E                                              	cmp	byte [esi],'.'
0000ADB7: 0F 84 EF 5B FF FF                                     	je	invalid_value
0000ADBD: 52                                                    	push	edx
0000ADBE: E8 F4 C4 FF FF                                        	call	get_byte_value
0000ADC3: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000ADCA: 0F 85 8A 5C FF FF                                     	jne	invalid_use_of_symbol
0000ADD0: 5A                                                    	pop	edx
0000ADD1: 88 42 07                                              	mov	[edx+7],al
                                                                      elf64_exe_brand_ok:
0000ADD4: C7 05 68 A2 01 00 00 00 40 00                         	mov	[image_base],400000h
0000ADDE: 83 25 6C A2 01 00 00                                  	and	[image_base_high],0
0000ADE5: 80 3E 80                                              	cmp	byte [esi],80h
0000ADE8: 75 33                                                 	jne	elf64_exe_base_ok
0000ADEA: 66 AD                                                 	lods	word [esi]
0000ADEC: 80 FC 28                                              	cmp	ah,'('
0000ADEF: 0F 85 35 5B FF FF                                     	jne	invalid_argument
0000ADF5: 80 3E 2E                                              	cmp	byte [esi],'.'
0000ADF8: 0F 84 AE 5B FF FF                                     	je	invalid_value
0000ADFE: 52                                                    	push	edx
0000ADFF: E8 21 C6 FF FF                                        	call	get_qword_value
0000AE04: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000AE0B: 0F 85 49 5C FF FF                                     	jne	invalid_use_of_symbol
0000AE11: A3 68 A2 01 00                                        	mov	[image_base],eax
0000AE16: 89 15 6C A2 01 00                                     	mov	[image_base_high],edx
0000AE1C: 5A                                                    	pop	edx
                                                                      elf64_exe_base_ok:
0000AE1D: C6 42 36 38                                           	mov	byte [edx+36h],38h
0000AE21: 89 FB                                                 	mov	ebx,edi
0000AE23: B9 0E 00 00 00                                        	mov	ecx,38h shr 2
0000AE28: 66 83 3D 5E A1 01 00 00                               	cmp	[current_pass],0
0000AE30: 74 07                                                 	je	init_elf64_segments
0000AE32: 0F AF 0D 50 A2 01 00                                  	imul	ecx,[number_of_sections]
                                                                      init_elf64_segments:
0000AE39: 31 C0                                                 	xor	eax,eax
0000AE3B: F3 AB                                                 	rep	stos dword [edi]
0000AE3D: 83 25 50 A2 01 00 00                                  	and	[number_of_sections],0
0000AE44: C6 03 01                                              	mov	byte [ebx],1
0000AE47: 66 C7 43 30 00 10                                     	mov	word [ebx+30h],1000h
0000AE4D: C6 43 04 07                                           	mov	byte [ebx+4],111b
0000AE51: 8B 2D 68 A2 01 00                                     	mov	ebp,[image_base]
0000AE57: 8B 0D 6C A2 01 00                                     	mov	ecx,[image_base_high]
0000AE5D: 83 63 08 00                                           	and	dword [ebx+8],0
0000AE61: 89 6B 10                                              	mov	[ebx+10h],ebp
0000AE64: 89 4B 14                                              	mov	[ebx+10h+4],ecx
0000AE67: 89 6B 18                                              	mov	[ebx+18h],ebp
0000AE6A: 89 4B 1C                                              	mov	[ebx+18h+4],ecx
0000AE6D: 89 F8                                                 	mov	eax,edi
0000AE6F: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
0000AE75: 01 E8                                                 	add	eax,ebp
0000AE77: 83 D1 00                                              	adc	ecx,0
0000AE7A: 89 42 18                                              	mov	[edx+18h],eax
0000AE7D: 89 4A 1C                                              	mov	[edx+18h+4],ecx
0000AE80: E9 EA FE FF FF                                        	jmp	elf_exe_addressing_setup
                                                                      setup_elf_exe_labels_type:
0000AE85: A1 6C A1 01 00                                        	mov	eax,[code_start]
0000AE8A: 80 78 10 03                                           	cmp	byte [eax+10h],3
0000AE8E: 75 14                                                 	jne	elf_exe_labels_type_ok
0000AE90: C6 43 09 02                                           	mov	byte [ebx+9],2
0000AE94: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AE9E: 74 04                                                 	jz	elf_exe_labels_type_ok
0000AEA0: C6 43 09 04                                           	mov	byte [ebx+9],4
                                                                      elf_exe_labels_type_ok:
0000AEA4: C3                                                    	ret
                                                                elf_entry:
0000AEA5: AC                                                    	lods	byte [esi]
0000AEA6: 3C 28                                                 	cmp	al,'('
0000AEA8: 0F 85 7C 5A FF FF                                     	jne	invalid_argument
0000AEAE: 80 3E 2E                                              	cmp	byte [esi],'.'
0000AEB1: 0F 84 F5 5A FF FF                                     	je	invalid_value
0000AEB7: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AEC1: 75 13                                                 	jnz	elf64_entry
0000AEC3: E8 C2 C4 FF FF                                        	call	get_dword_value
0000AEC8: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
0000AECE: 89 42 18                                              	mov	[edx+18h],eax
0000AED1: E9 A4 A0 FF FF                                        	jmp	instruction_assembled
                                                                      elf64_entry:
0000AED6: E8 4A C5 FF FF                                        	call	get_qword_value
0000AEDB: 8B 1D 6C A1 01 00                                     	mov	ebx,[code_start]
0000AEE1: 89 43 18                                              	mov	[ebx+18h],eax
0000AEE4: 89 53 1C                                              	mov	[ebx+1Ch],edx
0000AEE7: E9 8E A0 FF FF                                        	jmp	instruction_assembled
                                                                elf_segment:
0000AEEC: 0F BA 25 40 A2 01 00 00                               	bt	[format_flags],0
0000AEF4: 0F 83 3A 5A FF FF                                     	jnc	illegal_instruction
0000AEFA: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000AF04: 0F 85 FC 01 00 00                                     	jnz	elf64_segment
0000AF0A: E8 54 01 00 00                                        	call	close_elf_segment
0000AF0F: 50                                                    	push	eax
0000AF10: E8 63 9C FF FF                                        	call	create_addressing_space
0000AF15: E8 6B FF FF FF                                        	call	setup_elf_exe_labels_type
0000AF1A: 89 DD                                                 	mov	ebp,ebx
0000AF1C: 8B 1D 50 A2 01 00                                     	mov	ebx,[number_of_sections]
0000AF22: C1 E3 05                                              	shl	ebx,5
0000AF25: 03 1D 6C A1 01 00                                     	add	ebx,[code_start]
0000AF2B: 83 C3 34                                              	add	ebx,34h
0000AF2E: 3B 1D 48 A2 01 00                                     	cmp	ebx,[symbols_stream]
0000AF34: 72 10                                                 	jb	new_elf_segment
0000AF36: 8B 1D 48 A2 01 00                                     	mov	ebx,[symbols_stream]
0000AF3C: 83 EB 20                                              	sub	ebx,20h
0000AF3F: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      new_elf_segment:
0000AF46: C6 03 01                                              	mov	byte [ebx],1
0000AF49: 83 63 18 00                                           	and	dword [ebx+18h],0
0000AF4D: 66 C7 43 1C 00 10                                     	mov	word [ebx+1Ch],1000h
                                                                      elf_segment_flags:
0000AF53: 80 3E 1E                                              	cmp	byte [esi],1Eh
0000AF56: 74 36                                                 	je	elf_segment_type
0000AF58: 80 3E 19                                              	cmp	byte [esi],19h
0000AF5B: 75 7A                                                 	jne	elf_segment_flags_ok
0000AF5D: 66 AD                                                 	lods	word [esi]
0000AF5F: 80 EC 1C                                              	sub	ah,28
0000AF62: 0F 86 C2 59 FF FF                                     	jbe	invalid_argument
0000AF68: 80 FC 01                                              	cmp	ah,1
0000AF6B: 74 13                                                 	je	mark_elf_segment_flag
0000AF6D: 80 FC 03                                              	cmp	ah,3
0000AF70: 0F 87 B4 59 FF FF                                     	ja	invalid_argument
0000AF76: 80 F4 01                                              	xor	ah,1
0000AF79: 80 FC 02                                              	cmp	ah,2
0000AF7C: 74 02                                                 	je	mark_elf_segment_flag
0000AF7E: FE C4                                                 	inc	ah
                                                                      mark_elf_segment_flag:
0000AF80: 84 63 18                                              	test	[ebx+18h],ah
0000AF83: 0F 85 17 5B FF FF                                     	jnz	setting_already_specified
0000AF89: 08 63 18                                              	or	[ebx+18h],ah
0000AF8C: EB C5                                                 	jmp	elf_segment_flags
                                                                      elf_segment_type:
0000AF8E: 80 3B 01                                              	cmp	byte [ebx],1
0000AF91: 0F 85 09 5B FF FF                                     	jne	setting_already_specified
0000AF97: 66 AD                                                 	lods	word [esi]
0000AF99: 8B 0D 50 A2 01 00                                     	mov	ecx,[number_of_sections]
0000AF9F: E3 1E                                                 	jecxz	elf_segment_type_ok
0000AFA1: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
0000AFA7: 83 C2 34                                              	add	edx,34h
                                                                      scan_elf_segment_types:
0000AFAA: 3B 15 48 A2 01 00                                     	cmp	edx,[symbols_stream]
0000AFB0: 73 0D                                                 	jae	elf_segment_type_ok
0000AFB2: 38 22                                                 	cmp	[edx],ah
0000AFB4: 0F 84 ED 5A FF FF                                     	je	data_already_defined
0000AFBA: 83 C2 20                                              	add	edx,20h
0000AFBD: E2 EB                                                 	loop	scan_elf_segment_types
                                                                      elf_segment_type_ok:
0000AFBF: 88 23                                                 	mov	[ebx],ah
0000AFC1: 66 C7 43 1C 01 00                                     	mov	word [ebx+1Ch],1
0000AFC7: 80 FC 50                                              	cmp	ah,50h
0000AFCA: 72 87                                                 	jb	elf_segment_flags
0000AFCC: 81 0B 00 E5 74 64                                     	or	dword [ebx],6474E500h
0000AFD2: E9 7C FF FF FF                                        	jmp	elf_segment_flags
                                                                      elf_segment_flags_ok:
0000AFD7: 5A                                                    	pop	edx
0000AFD8: 80 3B 01                                              	cmp	byte [ebx],1
0000AFDB: 75 09                                                 	jne	no_elf_segment_merging
0000AFDD: 83 3D 70 A2 01 00 00                                  	cmp	[merge_segment],0
0000AFE4: 75 4A                                                 	jne	merge_elf_segment
                                                                      no_elf_segment_merging:
0000AFE6: 89 F8                                                 	mov	eax,edi
0000AFE8: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
0000AFEE: 89 43 04                                              	mov	[ebx+4],eax
0000AFF1: 25 FF 0F 00 00                                        	and	eax,0FFFh
0000AFF6: 01 D0                                                 	add	eax,edx
0000AFF8: 89 43 08                                              	mov	[ebx+8],eax
0000AFFB: 89 43 0C                                              	mov	[ebx+0Ch],eax
0000AFFE: 31 D2                                                 	xor	edx,edx
                                                                      elf_segment_addressing_setup:
0000B000: 30 C9                                                 	xor	cl,cl
0000B002: F7 D0                                                 	not	eax
0000B004: F7 D2                                                 	not	edx
0000B006: F6 D1                                                 	not	cl
0000B008: 83 C0 01                                              	add	eax,1
0000B00B: 83 D2 00                                              	adc	edx,0
0000B00E: 80 D1 00                                              	adc	cl,0
0000B011: 01 F8                                                 	add	eax,edi
0000B013: 83 D2 00                                              	adc	edx,0
0000B016: 80 D1 00                                              	adc	cl,0
0000B019: 3E 89 45 00                                           	mov	[ds:ebp],eax
0000B01D: 3E 89 55 04                                           	mov	[ds:ebp+4],edx
0000B021: 3E 88 4D 08                                           	mov	[ds:ebp+8],cl
0000B025: FF 05 50 A2 01 00                                     	inc	[number_of_sections]
0000B02B: E9 4A 9F FF FF                                        	jmp	instruction_assembled
                                                                      merge_elf_segment:
0000B030: 31 C9                                                 	xor	ecx,ecx
0000B032: 87 0D 70 A2 01 00                                     	xchg	ecx,[merge_segment]
0000B038: 83 F9 FF                                              	cmp	ecx,-1
0000B03B: 74 1D                                                 	je	merge_elf_header
0000B03D: 8B 41 08                                              	mov	eax,[ecx+8]
0000B040: 8B 49 04                                              	mov	ecx,[ecx+4]
                                                                      elf_segment_separated_base:
0000B043: 89 43 08                                              	mov	[ebx+8],eax
0000B046: 89 43 0C                                              	mov	[ebx+0Ch],eax
0000B049: 89 4B 04                                              	mov	[ebx+4],ecx
0000B04C: 29 C8                                                 	sub	eax,ecx
0000B04E: 01 F8                                                 	add	eax,edi
0000B050: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
0000B056: 31 D2                                                 	xor	edx,edx
0000B058: EB A6                                                 	jmp	elf_segment_addressing_setup
                                                                      merge_elf_header:
0000B05A: A1 68 A2 01 00                                        	mov	eax,[image_base]
0000B05F: 31 C9                                                 	xor	ecx,ecx
0000B061: EB E0                                                 	jmp	elf_segment_separated_base
                                                                      close_elf_segment:
0000B063: 83 3D 50 A2 01 00 00                                  	cmp	[number_of_sections],0
0000B06A: 75 22                                                 	jne	finish_elf_segment
0000B06C: 3B 3D 48 A2 01 00                                     	cmp	edi,[symbols_stream]
0000B072: 75 0D                                                 	jne	first_elf_segment_ok
0000B074: 83 0D 70 A2 01 00 FF                                  	or	[merge_segment],-1
0000B07B: A1 68 A2 01 00                                        	mov	eax,[image_base]
0000B080: C3                                                    	ret
                                                                      first_elf_segment_ok:
0000B081: 83 25 70 A2 01 00 00                                  	and	[merge_segment],0
0000B088: FF 05 50 A2 01 00                                     	inc	[number_of_sections]
                                                                      finish_elf_segment:
0000B08E: 8B 1D 50 A2 01 00                                     	mov	ebx,[number_of_sections]
0000B094: 4B                                                    	dec	ebx
0000B095: C1 E3 05                                              	shl	ebx,5
0000B098: 03 1D 6C A1 01 00                                     	add	ebx,[code_start]
0000B09E: 83 C3 34                                              	add	ebx,34h
0000B0A1: 89 F8                                                 	mov	eax,edi
0000B0A3: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
0000B0A9: 2B 43 04                                              	sub	eax,[ebx+4]
0000B0AC: 89 FA                                                 	mov	edx,edi
0000B0AE: 3B 3D D8 A1 01 00                                     	cmp	edi,[undefined_data_end]
0000B0B4: 75 0B                                                 	jne	elf_segment_size_ok
0000B0B6: 80 3B 01                                              	cmp	byte [ebx],1
0000B0B9: 75 06                                                 	jne	elf_segment_size_ok
0000B0BB: 8B 3D D4 A1 01 00                                     	mov	edi,[undefined_data_start]
                                                                      elf_segment_size_ok:
0000B0C1: 89 43 14                                              	mov	[ebx+14h],eax
0000B0C4: 01 F8                                                 	add	eax,edi
0000B0C6: 29 D0                                                 	sub	eax,edx
0000B0C8: 89 43 10                                              	mov	[ebx+10h],eax
0000B0CB: 83 25 D8 A1 01 00 00                                  	and	[undefined_data_end],0
0000B0D2: 8B 43 08                                              	mov	eax,[ebx+8]
0000B0D5: 80 3B 01                                              	cmp	byte [ebx],1
0000B0D8: 74 1E                                                 	je	elf_segment_position_move_and_align
0000B0DA: 83 3D 70 A2 01 00 00                                  	cmp	[merge_segment],0
0000B0E1: 75 10                                                 	jne	elf_segment_position_move
0000B0E3: 80 3B 04                                              	cmp	byte [ebx],4
0000B0E6: 74 18                                                 	je	elf_segment_position_ok
0000B0E8: 80 3B 51                                              	cmp	byte [ebx],51h
0000B0EB: 74 13                                                 	je	elf_segment_position_ok
0000B0ED: 89 1D 70 A2 01 00                                     	mov	[merge_segment],ebx
                                                                      elf_segment_position_move:
0000B0F3: 03 43 14                                              	add	eax,[ebx+14h]
0000B0F6: EB 08                                                 	jmp	elf_segment_position_ok
                                                                      elf_segment_position_move_and_align:
0000B0F8: 03 43 14                                              	add	eax,[ebx+14h]
0000B0FB: 05 FF 0F 00 00                                        	add	eax,0FFFh
                                                                      elf_segment_position_ok:
0000B100: 25 00 F0 FF FF                                        	and	eax,not 0FFFh
0000B105: C3                                                    	ret
                                                                      elf64_segment:
0000B106: E8 3F 01 00 00                                        	call	close_elf64_segment
0000B10B: 50 52                                                 	push	eax edx
0000B10D: E8 66 9A FF FF                                        	call	create_addressing_space
0000B112: E8 6E FD FF FF                                        	call	setup_elf_exe_labels_type
0000B117: 89 DD                                                 	mov	ebp,ebx
0000B119: 8B 1D 50 A2 01 00                                     	mov	ebx,[number_of_sections]
0000B11F: 6B DB 38                                              	imul	ebx,38h
0000B122: 03 1D 6C A1 01 00                                     	add	ebx,[code_start]
0000B128: 83 C3 40                                              	add	ebx,40h
0000B12B: 3B 1D 48 A2 01 00                                     	cmp	ebx,[symbols_stream]
0000B131: 72 07                                                 	jb	new_elf64_segment
0000B133: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      new_elf64_segment:
0000B13A: C6 03 01                                              	mov	byte [ebx],1
0000B13D: 83 63 04 00                                           	and	dword [ebx+4],0
0000B141: 66 C7 43 30 00 10                                     	mov	word [ebx+30h],1000h
                                                                      elf64_segment_flags:
0000B147: 80 3E 1E                                              	cmp	byte [esi],1Eh
0000B14A: 74 36                                                 	je	elf64_segment_type
0000B14C: 80 3E 19                                              	cmp	byte [esi],19h
0000B14F: 75 7A                                                 	jne	elf64_segment_flags_ok
0000B151: 66 AD                                                 	lods	word [esi]
0000B153: 80 EC 1C                                              	sub	ah,28
0000B156: 0F 86 CE 57 FF FF                                     	jbe	invalid_argument
0000B15C: 80 FC 01                                              	cmp	ah,1
0000B15F: 74 13                                                 	je	mark_elf64_segment_flag
0000B161: 80 FC 03                                              	cmp	ah,3
0000B164: 0F 87 C0 57 FF FF                                     	ja	invalid_argument
0000B16A: 80 F4 01                                              	xor	ah,1
0000B16D: 80 FC 02                                              	cmp	ah,2
0000B170: 74 02                                                 	je	mark_elf64_segment_flag
0000B172: FE C4                                                 	inc	ah
                                                                      mark_elf64_segment_flag:
0000B174: 84 63 04                                              	test	[ebx+4],ah
0000B177: 0F 85 23 59 FF FF                                     	jnz	setting_already_specified
0000B17D: 08 63 04                                              	or	[ebx+4],ah
0000B180: EB C5                                                 	jmp	elf64_segment_flags
                                                                      elf64_segment_type:
0000B182: 80 3B 01                                              	cmp	byte [ebx],1
0000B185: 0F 85 15 59 FF FF                                     	jne	setting_already_specified
0000B18B: 66 AD                                                 	lods	word [esi]
0000B18D: 8B 0D 50 A2 01 00                                     	mov	ecx,[number_of_sections]
0000B193: E3 1E                                                 	jecxz	elf64_segment_type_ok
0000B195: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
0000B19B: 83 C2 40                                              	add	edx,40h
                                                                      scan_elf64_segment_types:
0000B19E: 3B 15 48 A2 01 00                                     	cmp	edx,[symbols_stream]
0000B1A4: 73 0D                                                 	jae	elf64_segment_type_ok
0000B1A6: 38 22                                                 	cmp	[edx],ah
0000B1A8: 0F 84 F9 58 FF FF                                     	je	data_already_defined
0000B1AE: 83 C2 38                                              	add	edx,38h
0000B1B1: E2 EB                                                 	loop	scan_elf64_segment_types
                                                                      elf64_segment_type_ok:
0000B1B3: 88 23                                                 	mov	[ebx],ah
0000B1B5: 66 C7 43 30 01 00                                     	mov	word [ebx+30h],1
0000B1BB: 80 FC 50                                              	cmp	ah,50h
0000B1BE: 72 87                                                 	jb	elf64_segment_flags
0000B1C0: 81 0B 00 E5 74 64                                     	or	dword [ebx],6474E500h
0000B1C6: E9 7C FF FF FF                                        	jmp	elf64_segment_flags
                                                                      elf64_segment_flags_ok:
0000B1CB: 5A 58                                                 	pop	edx eax
0000B1CD: 80 3B 01                                              	cmp	byte [ebx],1
0000B1D0: 75 09                                                 	jne	no_elf64_segment_merging
0000B1D2: 83 3D 70 A2 01 00 00                                  	cmp	[merge_segment],0
0000B1D9: 75 27                                                 	jne	merge_elf64_segment
                                                                      no_elf64_segment_merging:
0000B1DB: 89 F9                                                 	mov	ecx,edi
0000B1DD: 2B 0D 6C A1 01 00                                     	sub	ecx,[code_start]
0000B1E3: 89 4B 08                                              	mov	[ebx+8],ecx
0000B1E6: 81 E1 FF 0F 00 00                                     	and	ecx,0FFFh
0000B1EC: 01 C8                                                 	add	eax,ecx
0000B1EE: 83 D2 00                                              	adc	edx,0
0000B1F1: 89 43 10                                              	mov	[ebx+10h],eax
0000B1F4: 89 53 14                                              	mov	[ebx+10h+4],edx
0000B1F7: 89 43 18                                              	mov	[ebx+18h],eax
0000B1FA: 89 53 1C                                              	mov	[ebx+18h+4],edx
0000B1FD: E9 FE FD FF FF                                        	jmp	elf_segment_addressing_setup
                                                                      merge_elf64_segment:
0000B202: 31 C9                                                 	xor	ecx,ecx
0000B204: 87 0D 70 A2 01 00                                     	xchg	ecx,[merge_segment]
0000B20A: 83 F9 FF                                              	cmp	ecx,-1
0000B20D: 74 2C                                                 	je	merge_elf64_header
0000B20F: 8B 41 10                                              	mov	eax,[ecx+10h]
0000B212: 8B 51 14                                              	mov	edx,[ecx+10h+4]
0000B215: 8B 49 08                                              	mov	ecx,[ecx+8]
                                                                      elf64_segment_separated_base:
0000B218: 89 43 10                                              	mov	[ebx+10h],eax
0000B21B: 89 53 14                                              	mov	[ebx+10h+4],edx
0000B21E: 89 43 18                                              	mov	[ebx+18h],eax
0000B221: 89 53 1C                                              	mov	[ebx+18h+4],edx
0000B224: 89 4B 08                                              	mov	[ebx+8],ecx
0000B227: F7 D9                                                 	neg	ecx
0000B229: 01 F9                                                 	add	ecx,edi
0000B22B: 2B 0D 6C A1 01 00                                     	sub	ecx,[code_start]
0000B231: 01 C8                                                 	add	eax,ecx
0000B233: 83 D2 00                                              	adc	edx,0
0000B236: E9 C5 FD FF FF                                        	jmp	elf_segment_addressing_setup
                                                                      merge_elf64_header:
0000B23B: A1 68 A2 01 00                                        	mov	eax,[image_base]
0000B240: 8B 15 6C A2 01 00                                     	mov	edx,[image_base_high]
0000B246: 31 C9                                                 	xor	ecx,ecx
0000B248: EB CE                                                 	jmp	elf64_segment_separated_base
                                                                      close_elf64_segment:
0000B24A: 83 3D 50 A2 01 00 00                                  	cmp	[number_of_sections],0
0000B251: 75 28                                                 	jne	finish_elf64_segment
0000B253: 3B 3D 48 A2 01 00                                     	cmp	edi,[symbols_stream]
0000B259: 75 13                                                 	jne	first_elf64_segment_ok
0000B25B: 83 0D 70 A2 01 00 FF                                  	or	[merge_segment],-1
0000B262: A1 68 A2 01 00                                        	mov	eax,[image_base]
0000B267: 8B 15 6C A2 01 00                                     	mov	edx,[image_base_high]
0000B26D: C3                                                    	ret
                                                                      first_elf64_segment_ok:
0000B26E: 83 25 70 A2 01 00 00                                  	and	[merge_segment],0
0000B275: FF 05 50 A2 01 00                                     	inc	[number_of_sections]
                                                                      finish_elf64_segment:
0000B27B: 8B 1D 50 A2 01 00                                     	mov	ebx,[number_of_sections]
0000B281: 4B                                                    	dec	ebx
0000B282: 6B DB 38                                              	imul	ebx,38h
0000B285: 03 1D 6C A1 01 00                                     	add	ebx,[code_start]
0000B28B: 83 C3 40                                              	add	ebx,40h
0000B28E: 89 F8                                                 	mov	eax,edi
0000B290: 2B 05 6C A1 01 00                                     	sub	eax,[code_start]
0000B296: 2B 43 08                                              	sub	eax,[ebx+8]
0000B299: 89 FA                                                 	mov	edx,edi
0000B29B: 3B 3D D8 A1 01 00                                     	cmp	edi,[undefined_data_end]
0000B2A1: 75 0B                                                 	jne	elf64_segment_size_ok
0000B2A3: 80 3B 01                                              	cmp	byte [ebx],1
0000B2A6: 75 06                                                 	jne	elf64_segment_size_ok
0000B2A8: 8B 3D D4 A1 01 00                                     	mov	edi,[undefined_data_start]
                                                                      elf64_segment_size_ok:
0000B2AE: 89 43 28                                              	mov	[ebx+28h],eax
0000B2B1: 01 F8                                                 	add	eax,edi
0000B2B3: 29 D0                                                 	sub	eax,edx
0000B2B5: 89 43 20                                              	mov	[ebx+20h],eax
0000B2B8: 83 25 D8 A1 01 00 00                                  	and	[undefined_data_end],0
0000B2BF: 8B 43 10                                              	mov	eax,[ebx+10h]
0000B2C2: 8B 53 14                                              	mov	edx,[ebx+10h+4]
0000B2C5: 80 3B 01                                              	cmp	byte [ebx],1
0000B2C8: 74 21                                                 	je	elf64_segment_position_move_and_align
0000B2CA: 83 3D 70 A2 01 00 00                                  	cmp	[merge_segment],0
0000B2D1: 75 10                                                 	jne	elf64_segment_position_move
0000B2D3: 80 3B 04                                              	cmp	byte [ebx],4
0000B2D6: 74 21                                                 	je	elf64_segment_position_ok
0000B2D8: 80 3B 51                                              	cmp	byte [ebx],51h
0000B2DB: 74 1C                                                 	je	elf64_segment_position_ok
0000B2DD: 89 1D 70 A2 01 00                                     	mov	[merge_segment],ebx
                                                                      elf64_segment_position_move:
0000B2E3: 03 43 28                                              	add	eax,[ebx+28h]
0000B2E6: 83 D2 00                                              	adc	edx,0
0000B2E9: EB 0E                                                 	jmp	elf64_segment_position_ok
                                                                      elf64_segment_position_move_and_align:
0000B2EB: 03 43 28                                              	add	eax,[ebx+28h]
0000B2EE: 83 D2 00                                              	adc	edx,0
0000B2F1: 05 FF 0F 00 00                                        	add	eax,0FFFh
0000B2F6: 83 D2 00                                              	adc	edx,0
                                                                      elf64_segment_position_ok:
0000B2F9: 25 00 F0 FF FF                                        	and	eax,not 0FFFh
0000B2FE: C3                                                    	ret
                                                                close_elf_exe:
0000B2FF: F7 05 40 A2 01 00 08 00 00 00                         	test	[format_flags],8
0000B309: 75 30                                                 	jnz	close_elf64_exe
0000B30B: E8 53 FD FF FF                                        	call	close_elf_segment
0000B310: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
0000B316: A1 50 A2 01 00                                        	mov	eax,[number_of_sections]
0000B31B: C6 42 1C 34                                           	mov	byte [edx+1Ch],34h
0000B31F: 66 89 42 2C                                           	mov	[edx+2Ch],ax
0000B323: C1 E0 05                                              	shl	eax,5
0000B326: 01 D0                                                 	add	eax,edx
0000B328: 83 C0 34                                              	add	eax,34h
0000B32B: 3B 05 48 A2 01 00                                     	cmp	eax,[symbols_stream]
0000B331: 74 07                                                 	je	elf_exe_ok
0000B333: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      elf_exe_ok:
0000B33A: C3                                                    	ret
                                                                      close_elf64_exe:
0000B33B: E8 0A FF FF FF                                        	call	close_elf64_segment
0000B340: 8B 15 6C A1 01 00                                     	mov	edx,[code_start]
0000B346: A1 50 A2 01 00                                        	mov	eax,[number_of_sections]
0000B34B: C6 42 20 40                                           	mov	byte [edx+20h],40h
0000B34F: 66 89 42 38                                           	mov	[edx+38h],ax
0000B353: 6B C0 38                                              	imul	eax,38h
0000B356: 01 D0                                                 	add	eax,edx
0000B358: 83 C0 40                                              	add	eax,40h
0000B35B: 3B 05 48 A2 01 00                                     	cmp	eax,[symbols_stream]
0000B361: 74 07                                                 	je	elf64_exe_ok
0000B363: 80 0D C8 A2 01 00 FF                                  	or	[next_pass_needed],-1
                                                                      elf64_exe_ok:
0000B36A: C3                                                    	ret
                                                                
                                                                include '..\x86_64.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                simple_instruction_except64:
0000B36B: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000B372: 0F 84 BC 55 FF FF                                     	je	illegal_instruction
                                                                simple_instruction:
0000B378: AA                                                    	stos	byte [edi]
0000B379: E9 FC 9B FF FF                                        	jmp	instruction_assembled
                                                                simple_instruction_only64:
0000B37E: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000B385: 0F 85 A9 55 FF FF                                     	jne	illegal_instruction
0000B38B: EB EB                                                 	jmp	simple_instruction
                                                                simple_instruction_16bit_except64:
0000B38D: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000B394: 0F 84 9A 55 FF FF                                     	je	illegal_instruction
                                                                simple_instruction_16bit:
0000B39A: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000B3A1: 75 06                                                 	jne	size_prefix
0000B3A3: AA                                                    	stos	byte [edi]
0000B3A4: E9 D1 9B FF FF                                        	jmp	instruction_assembled
                                                                      size_prefix:
0000B3A9: 88 C4                                                 	mov	ah,al
0000B3AB: B0 66                                                 	mov	al,66h
0000B3AD: 66 AB                                                 	stos	word [edi]
0000B3AF: E9 C6 9B FF FF                                        	jmp	instruction_assembled
                                                                simple_instruction_32bit_except64:
0000B3B4: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000B3BB: 0F 84 73 55 FF FF                                     	je	illegal_instruction
                                                                simple_instruction_32bit:
0000B3C1: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000B3C8: 74 DF                                                 	je	size_prefix
0000B3CA: AA                                                    	stos	byte [edi]
0000B3CB: E9 AA 9B FF FF                                        	jmp	instruction_assembled
                                                                iret_instruction:
0000B3D0: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000B3D7: 75 9F                                                 	jne	simple_instruction
                                                                simple_instruction_64bit:
0000B3D9: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000B3E0: 0F 85 4E 55 FF FF                                     	jne	illegal_instruction
0000B3E6: 88 C4                                                 	mov	ah,al
0000B3E8: B0 48                                                 	mov	al,48h
0000B3EA: 66 AB                                                 	stos	word [edi]
0000B3EC: E9 89 9B FF FF                                        	jmp	instruction_assembled
                                                                simple_extended_instruction_64bit:
0000B3F1: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000B3F8: 0F 85 36 55 FF FF                                     	jne	illegal_instruction
0000B3FE: C6 07 48                                              	mov	byte [edi],48h
0000B401: 47                                                    	inc	edi
                                                                simple_extended_instruction:
0000B402: 88 C4                                                 	mov	ah,al
0000B404: B0 0F                                                 	mov	al,0Fh
0000B406: 66 AB                                                 	stos	word [edi]
0000B408: E9 6D 9B FF FF                                        	jmp	instruction_assembled
                                                                simple_extended_instruction_f3:
0000B40D: C6 07 F3                                              	mov	byte [edi],0F3h
0000B410: 47                                                    	inc	edi
0000B411: EB EF                                                 	jmp	simple_extended_instruction
                                                                prefix_instruction:
0000B413: AA                                                    	stos	byte [edi]
0000B414: 80 0D CF A2 01 00 01                                  	or	[prefix_flags],1
0000B41B: E9 6A 98 FF FF                                        	jmp	continue_line
                                                                segment_prefix:
0000B420: 88 C4                                                 	mov	ah,al
0000B422: C0 EC 04                                              	shr	ah,4
0000B425: 80 FC 03                                              	cmp	ah,3
0000B428: 0F 85 06 55 FF FF                                     	jne	illegal_instruction
0000B42E: 24 0F                                                 	and	al,1111b
0000B430: A2 B3 A2 01 00                                        	mov	[segment_register],al
0000B435: E8 DB 5A 00 00                                        	call	store_segment_prefix
0000B43A: 80 0D CF A2 01 00 01                                  	or	[prefix_flags],1
0000B441: E9 44 98 FF FF                                        	jmp	continue_line
                                                                bnd_prefix_instruction:
0000B446: AA                                                    	stos	byte [edi]
0000B447: 80 0D CF A2 01 00 11                                  	or	[prefix_flags],1 + 10h
0000B44E: E9 37 98 FF FF                                        	jmp	continue_line
                                                                int_instruction:
0000B453: AC                                                    	lods	byte [esi]
0000B454: E8 DB 58 00 00                                        	call	get_size_operator
0000B459: 80 FC 01                                              	cmp	ah,1
0000B45C: 0F 87 E6 54 FF FF                                     	ja	invalid_operand_size
0000B462: 3C 28                                                 	cmp	al,'('
0000B464: 0F 85 D4 54 FF FF                                     	jne	invalid_operand
0000B46A: E8 48 BE FF FF                                        	call	get_byte_value
0000B46F: 85 C0                                                 	test	eax,eax
0000B471: 79 05                                                 	jns	int_imm_ok
0000B473: E8 83 BE FF FF                                        	call	recoverable_overflow
                                                                      int_imm_ok:
0000B478: 88 C4                                                 	mov	ah,al
0000B47A: B0 CD                                                 	mov	al,0CDh
0000B47C: 66 AB                                                 	stos	word [edi]
0000B47E: E9 F7 9A FF FF                                        	jmp	instruction_assembled
                                                                aa_instruction:
0000B483: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000B48A: 0F 84 A4 54 FF FF                                     	je	illegal_instruction
0000B490: 50                                                    	push	eax
0000B491: B3 0A                                                 	mov	bl,10
0000B493: 80 3E 28                                              	cmp	byte [esi],'('
0000B496: 75 18                                                 	jne	aa_store
0000B498: 46                                                    	inc	esi
0000B499: 30 C0                                                 	xor	al,al
0000B49B: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
0000B4A1: 3C 01                                                 	cmp	al,1
0000B4A3: 0F 87 9F 54 FF FF                                     	ja	invalid_operand_size
0000B4A9: E8 09 BE FF FF                                        	call	get_byte_value
0000B4AE: 88 C3                                                 	mov	bl,al
                                                                      aa_store:
0000B4B0: 80 3D A4 A2 01 00 00                                  	cmp	[operand_size],0
0000B4B7: 0F 85 81 54 FF FF                                     	jne	invalid_operand
0000B4BD: 58                                                    	pop	eax
0000B4BE: 88 DC                                                 	mov	ah,bl
0000B4C0: 66 AB                                                 	stos	word [edi]
0000B4C2: E9 B3 9A FF FF                                        	jmp	instruction_assembled
                                                                
                                                                basic_instruction:
0000B4C7: A2 AF A2 01 00                                        	mov	[base_code],al
0000B4CC: AC                                                    	lods	byte [esi]
0000B4CD: E8 62 58 00 00                                        	call	get_size_operator
0000B4D2: 3C 10                                                 	cmp	al,10h
0000B4D4: 0F 84 AE 01 00 00                                     	je	basic_reg
0000B4DA: 3C 5B                                                 	cmp	al,'['
0000B4DC: 0F 85 5C 54 FF FF                                     	jne	invalid_operand
                                                                      basic_mem:
0000B4E2: E8 A9 58 00 00                                        	call	get_address
0000B4E7: 52 53 51                                              	push	edx ebx ecx
0000B4EA: AC                                                    	lods	byte [esi]
0000B4EB: 3C 2C                                                 	cmp	al,','
0000B4ED: 0F 85 4B 54 FF FF                                     	jne	invalid_operand
0000B4F3: AC                                                    	lods	byte [esi]
0000B4F4: E8 3B 58 00 00                                        	call	get_size_operator
0000B4F9: 3C 28                                                 	cmp	al,'('
0000B4FB: 74 31                                                 	je	basic_mem_imm
0000B4FD: 3C 10                                                 	cmp	al,10h
0000B4FF: 0F 85 39 54 FF FF                                     	jne	invalid_operand
                                                                      basic_mem_reg:
0000B505: AC                                                    	lods	byte [esi]
0000B506: E8 82 57 00 00                                        	call	convert_register
0000B50B: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000B510: 59 5B 5A                                              	pop	ecx ebx edx
0000B513: 88 E0                                                 	mov	al,ah
0000B515: 3C 01                                                 	cmp	al,1
0000B517: 74 0B                                                 	je	instruction_ready
0000B519: E8 9F 59 00 00                                        	call	operand_autodetect
0000B51E: FE 05 AF A2 01 00                                     	inc	[base_code]
                                                                      instruction_ready:
0000B524: E8 D4 5A 00 00                                        	call	store_instruction
0000B529: E9 4C 9A FF FF                                        	jmp	instruction_assembled
                                                                      basic_mem_imm:
0000B52E: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000B533: 3C 01                                                 	cmp	al,1
0000B535: 72 3F                                                 	jb	basic_mem_imm_nosize
0000B537: 74 42                                                 	je	basic_mem_imm_8bit
0000B539: 3C 02                                                 	cmp	al,2
0000B53B: 74 69                                                 	je	basic_mem_imm_16bit
0000B53D: 3C 04                                                 	cmp	al,4
0000B53F: 0F 84 CA 00 00 00                                     	je	basic_mem_imm_32bit
0000B545: 3C 08                                                 	cmp	al,8
0000B547: 0F 85 FB 53 FF FF                                     	jne	invalid_operand_size
                                                                      basic_mem_imm_64bit:
0000B54D: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000B554: 0F 85 2A 54 FF FF                                     	jne	long_immediate_not_encodable
0000B55A: E8 49 59 00 00                                        	call	operand_64bit
0000B55F: E8 02 01 00 00                                        	call	get_simm32
0000B564: 80 3D C0 A2 01 00 04                                  	cmp	[value_type],4
0000B56B: 0F 83 13 54 FF FF                                     	jae	long_immediate_not_encodable
0000B571: E9 A3 00 00 00                                        	jmp	basic_mem_imm_32bit_ok
                                                                      basic_mem_imm_nosize:
0000B576: E8 F3 02 00 00                                        	call	recoverable_unknown_size
                                                                      basic_mem_imm_8bit:
0000B57B: E8 37 BD FF FF                                        	call	get_byte_value
0000B580: A2 00 A2 01 00                                        	mov	byte [value],al
0000B585: A0 AF A2 01 00                                        	mov	al,[base_code]
0000B58A: C0 E8 03                                              	shr	al,3
0000B58D: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000B592: 59 5B 5A                                              	pop	ecx ebx edx
0000B595: C6 05 AF A2 01 00 80                                  	mov	[base_code],80h
0000B59C: E8 D2 5F 00 00                                        	call	store_instruction_with_imm8
0000B5A1: E9 D4 99 FF FF                                        	jmp	instruction_assembled
                                                                      basic_mem_imm_16bit:
0000B5A6: E8 DB 58 00 00                                        	call	operand_16bit
0000B5AB: E8 92 BD FF FF                                        	call	get_word_value
0000B5B0: 66 A3 00 A2 01 00                                     	mov	word [value],ax
0000B5B6: A0 AF A2 01 00                                        	mov	al,[base_code]
0000B5BB: C0 E8 03                                              	shr	al,3
0000B5BE: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000B5C3: 59 5B 5A                                              	pop	ecx ebx edx
0000B5C6: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000B5CD: 75 1E                                                 	jne	basic_mem_imm_16bit_store
0000B5CF: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000B5D6: 75 15                                                 	jne	basic_mem_imm_16bit_store
0000B5D8: 66 81 3D 00 A2 01 00 80 00                            	cmp	word [value],80h
0000B5E1: 72 1B                                                 	jb	basic_mem_simm_8bit
0000B5E3: 66 83 3D 00 A2 01 00 80                               	cmp	word [value],-80h
0000B5EB: 73 11                                                 	jae	basic_mem_simm_8bit
                                                                      basic_mem_imm_16bit_store:
0000B5ED: C6 05 AF A2 01 00 81                                  	mov	[base_code],81h
0000B5F4: E8 8D 5F 00 00                                        	call	store_instruction_with_imm16
0000B5F9: E9 7C 99 FF FF                                        	jmp	instruction_assembled
                                                                      basic_mem_simm_8bit:
0000B5FE: C6 05 AF A2 01 00 83                                  	mov	[base_code],83h
0000B605: E8 69 5F 00 00                                        	call	store_instruction_with_imm8
0000B60A: E9 6B 99 FF FF                                        	jmp	instruction_assembled
                                                                      basic_mem_imm_32bit:
0000B60F: E8 83 58 00 00                                        	call	operand_32bit
0000B614: E8 71 BD FF FF                                        	call	get_dword_value
                                                                      basic_mem_imm_32bit_ok:
0000B619: A3 00 A2 01 00                                        	mov	dword [value],eax
0000B61E: A0 AF A2 01 00                                        	mov	al,[base_code]
0000B623: C0 E8 03                                              	shr	al,3
0000B626: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000B62B: 59 5B 5A                                              	pop	ecx ebx edx
0000B62E: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000B635: 75 1E                                                 	jne	basic_mem_imm_32bit_store
0000B637: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000B63E: 75 15                                                 	jne	basic_mem_imm_32bit_store
0000B640: 81 3D 00 A2 01 00 80 00 00 00                         	cmp	dword [value],80h
0000B64A: 72 B2                                                 	jb	basic_mem_simm_8bit
0000B64C: 83 3D 00 A2 01 00 80                                  	cmp	dword [value],-80h
0000B653: 73 A9                                                 	jae	basic_mem_simm_8bit
                                                                      basic_mem_imm_32bit_store:
0000B655: C6 05 AF A2 01 00 81                                  	mov	[base_code],81h
0000B65C: E8 3F 5F 00 00                                        	call	store_instruction_with_imm32
0000B661: E9 14 99 FF FF                                        	jmp	instruction_assembled
                                                                      get_simm32:
0000B666: E8 BA BD FF FF                                        	call	get_qword_value
0000B66B: 89 D1                                                 	mov	ecx,edx
0000B66D: 99                                                    	cdq
0000B66E: 39 D1                                                 	cmp	ecx,edx
0000B670: 74 05                                                 	je	simm32_range_ok
0000B672: E8 84 BC FF FF                                        	call	recoverable_overflow
                                                                      simm32_range_ok:
0000B677: 80 3D C0 A2 01 00 04                                  	cmp	[value_type],4
0000B67E: 75 07                                                 	jne	get_simm32_ok
0000B680: C6 05 C0 A2 01 00 02                                  	mov	[value_type],2
                                                                      get_simm32_ok:
0000B687: C3                                                    	ret
                                                                      basic_reg:
0000B688: AC                                                    	lods	byte [esi]
0000B689: E8 FF 55 00 00                                        	call	convert_register
0000B68E: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000B693: AC                                                    	lods	byte [esi]
0000B694: 3C 2C                                                 	cmp	al,','
0000B696: 0F 85 A2 52 FF FF                                     	jne	invalid_operand
0000B69C: AC                                                    	lods	byte [esi]
0000B69D: E8 92 56 00 00                                        	call	get_size_operator
0000B6A2: 3C 10                                                 	cmp	al,10h
0000B6A4: 74 37                                                 	je	basic_reg_reg
0000B6A6: 3C 28                                                 	cmp	al,'('
0000B6A8: 74 5F                                                 	je	basic_reg_imm
0000B6AA: 3C 5B                                                 	cmp	al,'['
0000B6AC: 0F 85 8C 52 FF FF                                     	jne	invalid_operand
                                                                      basic_reg_mem:
0000B6B2: E8 D9 56 00 00                                        	call	get_address
0000B6B7: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000B6BC: 3C 01                                                 	cmp	al,1
0000B6BE: 74 11                                                 	je	basic_reg_mem_8bit
0000B6C0: E8 F8 57 00 00                                        	call	operand_autodetect
0000B6C5: 80 05 AF A2 01 00 03                                  	add	[base_code],3
0000B6CC: E9 53 FE FF FF                                        	jmp	instruction_ready
                                                                      basic_reg_mem_8bit:
0000B6D1: 80 05 AF A2 01 00 02                                  	add	[base_code],2
0000B6D8: E9 47 FE FF FF                                        	jmp	instruction_ready
                                                                      basic_reg_reg:
0000B6DD: AC                                                    	lods	byte [esi]
0000B6DE: E8 AA 55 00 00                                        	call	convert_register
0000B6E3: 8A 1D B2 A2 01 00                                     	mov	bl,[postbyte_register]
0000B6E9: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000B6EE: 88 E0                                                 	mov	al,ah
0000B6F0: 3C 01                                                 	cmp	al,1
0000B6F2: 74 0B                                                 	je	nomem_instruction_ready
0000B6F4: E8 C4 57 00 00                                        	call	operand_autodetect
0000B6F9: FE 05 AF A2 01 00                                     	inc	[base_code]
                                                                      nomem_instruction_ready:
0000B6FF: E8 8C 58 00 00                                        	call	store_nomem_instruction
0000B704: E9 71 98 FF FF                                        	jmp	instruction_assembled
                                                                      basic_reg_imm:
0000B709: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000B70E: 3C 01                                                 	cmp	al,1
0000B710: 74 3D                                                 	je	basic_reg_imm_8bit
0000B712: 3C 02                                                 	cmp	al,2
0000B714: 74 77                                                 	je	basic_reg_imm_16bit
0000B716: 3C 04                                                 	cmp	al,4
0000B718: 0F 84 EB 00 00 00                                     	je	basic_reg_imm_32bit
0000B71E: 3C 08                                                 	cmp	al,8
0000B720: 0F 85 22 52 FF FF                                     	jne	invalid_operand_size
                                                                      basic_reg_imm_64bit:
0000B726: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000B72D: 0F 85 51 52 FF FF                                     	jne	long_immediate_not_encodable
0000B733: E8 70 57 00 00                                        	call	operand_64bit
0000B738: E8 29 FF FF FF                                        	call	get_simm32
0000B73D: 80 3D C0 A2 01 00 04                                  	cmp	[value_type],4
0000B744: 0F 83 3A 52 FF FF                                     	jae	long_immediate_not_encodable
0000B74A: E9 C4 00 00 00                                        	jmp	basic_reg_imm_32bit_ok
                                                                      basic_reg_imm_8bit:
0000B74F: E8 63 BB FF FF                                        	call	get_byte_value
0000B754: 88 C2                                                 	mov	dl,al
0000B756: 8A 1D AF A2 01 00                                     	mov	bl,[base_code]
0000B75C: C0 EB 03                                              	shr	bl,3
0000B75F: 86 1D B2 A2 01 00                                     	xchg	bl,[postbyte_register]
0000B765: 08 DB                                                 	or	bl,bl
0000B767: 74 14                                                 	jz	basic_al_imm
0000B769: C6 05 AF A2 01 00 80                                  	mov	[base_code],80h
0000B770: E8 1B 58 00 00                                        	call	store_nomem_instruction
0000B775: 88 D0                                                 	mov	al,dl
0000B777: AA                                                    	stos	byte [edi]
0000B778: E9 FD 97 FF FF                                        	jmp	instruction_assembled
                                                                      basic_al_imm:
0000B77D: A0 AF A2 01 00                                        	mov	al,[base_code]
0000B782: 04 04                                                 	add	al,4
0000B784: AA                                                    	stos	byte [edi]
0000B785: 88 D0                                                 	mov	al,dl
0000B787: AA                                                    	stos	byte [edi]
0000B788: E9 ED 97 FF FF                                        	jmp	instruction_assembled
                                                                      basic_reg_imm_16bit:
0000B78D: E8 F4 56 00 00                                        	call	operand_16bit
0000B792: E8 AB BB FF FF                                        	call	get_word_value
0000B797: 66 89 C2                                              	mov	dx,ax
0000B79A: 8A 1D AF A2 01 00                                     	mov	bl,[base_code]
0000B7A0: C0 EB 03                                              	shr	bl,3
0000B7A3: 86 1D B2 A2 01 00                                     	xchg	bl,[postbyte_register]
0000B7A9: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000B7B0: 75 16                                                 	jne	basic_reg_imm_16bit_store
0000B7B2: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000B7B9: 75 0D                                                 	jne	basic_reg_imm_16bit_store
0000B7BB: 66 81 FA 80 00                                        	cmp	dx,80h
0000B7C0: 72 25                                                 	jb	basic_reg_simm_8bit
0000B7C2: 66 83 FA 80                                           	cmp	dx,-80h
0000B7C6: 73 1F                                                 	jae	basic_reg_simm_8bit
                                                                      basic_reg_imm_16bit_store:
0000B7C8: 08 DB                                                 	or	bl,bl
0000B7CA: 74 2F                                                 	jz	basic_ax_imm
0000B7CC: C6 05 AF A2 01 00 81                                  	mov	[base_code],81h
0000B7D3: E8 B8 57 00 00                                        	call	store_nomem_instruction
                                                                      basic_store_imm_16bit:
0000B7D8: 66 89 D0                                              	mov	ax,dx
0000B7DB: E8 0C CC FF FF                                        	call	mark_relocation
0000B7E0: 66 AB                                                 	stos	word [edi]
0000B7E2: E9 93 97 FF FF                                        	jmp	instruction_assembled
                                                                      basic_reg_simm_8bit:
0000B7E7: C6 05 AF A2 01 00 83                                  	mov	[base_code],83h
0000B7EE: E8 9D 57 00 00                                        	call	store_nomem_instruction
0000B7F3: 88 D0                                                 	mov	al,dl
0000B7F5: AA                                                    	stos	byte [edi]
0000B7F6: E9 7F 97 FF FF                                        	jmp	instruction_assembled
                                                                      basic_ax_imm:
0000B7FB: 80 05 AF A2 01 00 05                                  	add	[base_code],5
0000B802: E8 36 57 00 00                                        	call	store_classic_instruction_code
0000B807: EB CF                                                 	jmp	basic_store_imm_16bit
                                                                      basic_reg_imm_32bit:
0000B809: E8 89 56 00 00                                        	call	operand_32bit
0000B80E: E8 77 BB FF FF                                        	call	get_dword_value
                                                                      basic_reg_imm_32bit_ok:
0000B813: 89 C2                                                 	mov	edx,eax
0000B815: 8A 1D AF A2 01 00                                     	mov	bl,[base_code]
0000B81B: C0 EB 03                                              	shr	bl,3
0000B81E: 86 1D B2 A2 01 00                                     	xchg	bl,[postbyte_register]
0000B824: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000B82B: 75 16                                                 	jne	basic_reg_imm_32bit_store
0000B82D: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000B834: 75 0D                                                 	jne	basic_reg_imm_32bit_store
0000B836: 81 FA 80 00 00 00                                     	cmp	edx,80h
0000B83C: 72 A9                                                 	jb	basic_reg_simm_8bit
0000B83E: 83 FA 80                                              	cmp	edx,-80h
0000B841: 73 A4                                                 	jae	basic_reg_simm_8bit
                                                                      basic_reg_imm_32bit_store:
0000B843: 08 DB                                                 	or	bl,bl
0000B845: 74 19                                                 	jz	basic_eax_imm
0000B847: C6 05 AF A2 01 00 81                                  	mov	[base_code],81h
0000B84E: E8 3D 57 00 00                                        	call	store_nomem_instruction
                                                                      basic_store_imm_32bit:
0000B853: 89 D0                                                 	mov	eax,edx
0000B855: E8 92 CB FF FF                                        	call	mark_relocation
0000B85A: AB                                                    	stos	dword [edi]
0000B85B: E9 1A 97 FF FF                                        	jmp	instruction_assembled
                                                                      basic_eax_imm:
0000B860: 80 05 AF A2 01 00 05                                  	add	[base_code],5
0000B867: E8 D1 56 00 00                                        	call	store_classic_instruction_code
0000B86C: EB E5                                                 	jmp	basic_store_imm_32bit
                                                                      recoverable_unknown_size:
0000B86E: 83 3D E8 A1 01 00 00                                  	cmp	[error_line],0
0000B875: 75 16                                                 	jne	ignore_unknown_size
0000B877: FF 35 80 A1 01 00                                     	push	[current_line]
0000B87D: 8F 05 E8 A1 01 00                                     	pop	[error_line]
0000B883: C7 05 EC A1 01 00 52 09 00 00                         	mov	[error],operand_size_not_specified
                                                                      ignore_unknown_size:
0000B88D: C3                                                    	ret
                                                                single_operand_instruction:
0000B88E: C6 05 AF A2 01 00 F6                                  	mov	[base_code],0F6h
0000B895: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000B89A: AC                                                    	lods	byte [esi]
0000B89B: E8 94 54 00 00                                        	call	get_size_operator
0000B8A0: 3C 10                                                 	cmp	al,10h
0000B8A2: 74 32                                                 	je	single_reg
0000B8A4: 3C 5B                                                 	cmp	al,'['
0000B8A6: 0F 85 92 50 FF FF                                     	jne	invalid_operand
                                                                      single_mem:
0000B8AC: E8 DF 54 00 00                                        	call	get_address
0000B8B1: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000B8B6: 3C 01                                                 	cmp	al,1
0000B8B8: 74 17                                                 	je	single_mem_8bit
0000B8BA: 72 10                                                 	jb	single_mem_nosize
0000B8BC: E8 FC 55 00 00                                        	call	operand_autodetect
0000B8C1: FE 05 AF A2 01 00                                     	inc	[base_code]
0000B8C7: E9 58 FC FF FF                                        	jmp	instruction_ready
                                                                      single_mem_nosize:
0000B8CC: E8 9D FF FF FF                                        	call	recoverable_unknown_size
                                                                      single_mem_8bit:
0000B8D1: E9 4E FC FF FF                                        	jmp	instruction_ready
                                                                      single_reg:
0000B8D6: AC                                                    	lods	byte [esi]
0000B8D7: E8 B1 53 00 00                                        	call	convert_register
0000B8DC: 88 C3                                                 	mov	bl,al
0000B8DE: 88 E0                                                 	mov	al,ah
0000B8E0: 3C 01                                                 	cmp	al,1
0000B8E2: 74 0B                                                 	je	single_reg_8bit
0000B8E4: E8 D4 55 00 00                                        	call	operand_autodetect
0000B8E9: FE 05 AF A2 01 00                                     	inc	[base_code]
                                                                      single_reg_8bit:
0000B8EF: E9 0B FE FF FF                                        	jmp	nomem_instruction_ready
                                                                mov_instruction:
0000B8F4: C6 05 AF A2 01 00 88                                  	mov	[base_code],88h
0000B8FB: AC                                                    	lods	byte [esi]
0000B8FC: E8 33 54 00 00                                        	call	get_size_operator
0000B901: 3C 10                                                 	cmp	al,10h
0000B903: 0F 84 B7 02 00 00                                     	je	mov_reg
0000B909: 3C 14                                                 	cmp	al,14h
0000B90B: 0F 84 93 06 00 00                                     	je	mov_creg
0000B911: 3C 5B                                                 	cmp	al,'['
0000B913: 0F 85 25 50 FF FF                                     	jne	invalid_operand
                                                                      mov_mem:
0000B919: E8 72 54 00 00                                        	call	get_address
0000B91E: 52 53 51                                              	push	edx ebx ecx
0000B921: AC                                                    	lods	byte [esi]
0000B922: 3C 2C                                                 	cmp	al,','
0000B924: 0F 85 14 50 FF FF                                     	jne	invalid_operand
0000B92A: AC                                                    	lods	byte [esi]
0000B92B: E8 04 54 00 00                                        	call	get_size_operator
0000B930: 3C 28                                                 	cmp	al,'('
0000B932: 0F 84 C4 01 00 00                                     	je	mov_mem_imm
0000B938: 3C 10                                                 	cmp	al,10h
0000B93A: 0F 85 FE 4F FF FF                                     	jne	invalid_operand
                                                                      mov_mem_reg:
0000B940: AC                                                    	lods	byte [esi]
0000B941: 3C 30                                                 	cmp	al,30h
0000B943: 72 08                                                 	jb	mov_mem_general_reg
0000B945: 3C 40                                                 	cmp	al,40h
0000B947: 0F 82 86 01 00 00                                     	jb	mov_mem_sreg
                                                                      mov_mem_general_reg:
0000B94D: E8 3B 53 00 00                                        	call	convert_register
0000B952: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000B957: 59 5B 5A                                              	pop	ecx ebx edx
0000B95A: 80 FC 01                                              	cmp	ah,1
0000B95D: 74 21                                                 	je	mov_mem_reg_8bit
0000B95F: FE 05 AF A2 01 00                                     	inc	[base_code]
0000B965: 88 E0                                                 	mov	al,ah
0000B967: E8 51 55 00 00                                        	call	operand_autodetect
0000B96C: A0 B2 A2 01 00                                        	mov	al,[postbyte_register]
0000B971: 08 D8                                                 	or	al,bl
0000B973: 08 F8                                                 	or	al,bh
0000B975: 0F 84 EB 00 00 00                                     	jz	mov_mem_ax
0000B97B: E9 A4 FB FF FF                                        	jmp	instruction_ready
                                                                      mov_mem_reg_8bit:
0000B980: 08 D8                                                 	or	al,bl
0000B982: 08 F8                                                 	or	al,bh
0000B984: 0F 85 9A FB FF FF                                     	jnz	instruction_ready
                                                                      mov_mem_al:
0000B98A: F6 C5 22                                              	test	ch,22h
0000B98D: 75 52                                                 	jnz	mov_mem_address16_al
0000B98F: F6 C5 44                                              	test	ch,44h
0000B992: 75 2D                                                 	jnz	mov_mem_address32_al
0000B994: F6 C5 77                                              	test	ch,not 88h
0000B997: 0F 85 C9 4F FF FF                                     	jnz	invalid_address_size
0000B99D: E8 77 00 00 00                                        	call	check_mov_address64
0000B9A2: 3C 00                                                 	cmp	al,0
0000B9A4: 0F 8F A1 00 00 00                                     	jg	mov_mem_address64_al
0000B9AA: 0F 8C 74 FB FF FF                                     	jl	instruction_ready
0000B9B0: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000B9B7: 75 08                                                 	jne	mov_mem_address32_al
0000B9B9: 81 FA 00 00 01 00                                     	cmp	edx,10000h
0000B9BF: 72 20                                                 	jb	mov_mem_address16_al
                                                                      mov_mem_address32_al:
0000B9C1: E8 08 55 00 00                                        	call	store_segment_prefix_if_necessary
0000B9C6: E8 9B 5B 00 00                                        	call	address_32bit_prefix
0000B9CB: C6 05 AF A2 01 00 A2                                  	mov	[base_code],0A2h
                                                                      store_mov_address32:
0000B9D2: E8 66 55 00 00                                        	call	store_classic_instruction_code
0000B9D7: E8 FE 59 00 00                                        	call	store_address_32bit_value
0000B9DC: E9 99 95 FF FF                                        	jmp	instruction_assembled
                                                                      mov_mem_address16_al:
0000B9E1: E8 E8 54 00 00                                        	call	store_segment_prefix_if_necessary
0000B9E6: E8 6E 5B 00 00                                        	call	address_16bit_prefix
0000B9EB: C6 05 AF A2 01 00 A2                                  	mov	[base_code],0A2h
                                                                      store_mov_address16:
0000B9F2: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000B9F9: 0F 84 A3 4F FF FF                                     	je	invalid_address
0000B9FF: E8 39 55 00 00                                        	call	store_classic_instruction_code
0000BA04: 89 D0                                                 	mov	eax,edx
0000BA06: 66 AB                                                 	stos	word [edi]
0000BA08: 81 FA 00 00 01 00                                     	cmp	edx,10000h
0000BA0E: 0F 8D A2 4F FF FF                                     	jge	value_out_of_range
0000BA14: E9 61 95 FF FF                                        	jmp	instruction_assembled
                                                                      check_mov_address64:
0000BA19: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000BA20: 75 1D                                                 	jne	no_address64
0000BA22: F6 C5 88                                              	test	ch,88h
0000BA25: 75 12                                                 	jnz	address64_required
0000BA27: A1 38 A2 01 00                                        	mov	eax,[address_high]
0000BA2C: 09 C0                                                 	or	eax,eax
0000BA2E: 74 0F                                                 	jz	no_address64
0000BA30: 0F BA E2 1F                                           	bt	edx,31
0000BA34: 83 D0 00                                              	adc	eax,0
0000BA37: 74 03                                                 	jz	address64_simm32
                                                                      address64_required:
0000BA39: B0 01                                                 	mov	al,1
0000BA3B: C3                                                    	ret
                                                                      address64_simm32:
0000BA3C: B0 FF                                                 	mov	al,-1
0000BA3E: C3                                                    	ret
                                                                      no_address64:
0000BA3F: F6 C5 08                                              	test	ch,08h
0000BA42: 0F 85 1E 4F FF FF                                     	jnz	invalid_address_size
0000BA48: 30 C0                                                 	xor	al,al
0000BA4A: C3                                                    	ret
                                                                      mov_mem_address64_al:
0000BA4B: E8 7E 54 00 00                                        	call	store_segment_prefix_if_necessary
0000BA50: C6 05 AF A2 01 00 A2                                  	mov	[base_code],0A2h
                                                                      store_mov_address64:
0000BA57: E8 E1 54 00 00                                        	call	store_classic_instruction_code
0000BA5C: E8 AF 59 00 00                                        	call	store_address_64bit_value
0000BA61: E9 14 95 FF FF                                        	jmp	instruction_assembled
                                                                      mov_mem_ax:
0000BA66: F6 C5 22                                              	test	ch,22h
0000BA69: 75 44                                                 	jnz	mov_mem_address16_ax
0000BA6B: F6 C5 44                                              	test	ch,44h
0000BA6E: 75 29                                                 	jnz	mov_mem_address32_ax
0000BA70: F6 C5 77                                              	test	ch,not 88h
0000BA73: 0F 85 ED 4E FF FF                                     	jnz	invalid_address_size
0000BA79: E8 9B FF FF FF                                        	call	check_mov_address64
0000BA7E: 3C 00                                                 	cmp	al,0
0000BA80: 7F 43                                                 	jg	mov_mem_address64_ax
0000BA82: 0F 8C 9C FA FF FF                                     	jl	instruction_ready
0000BA88: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000BA8F: 75 08                                                 	jne	mov_mem_address32_ax
0000BA91: 81 FA 00 00 01 00                                     	cmp	edx,10000h
0000BA97: 72 16                                                 	jb	mov_mem_address16_ax
                                                                      mov_mem_address32_ax:
0000BA99: E8 30 54 00 00                                        	call	store_segment_prefix_if_necessary
0000BA9E: E8 C3 5A 00 00                                        	call	address_32bit_prefix
0000BAA3: C6 05 AF A2 01 00 A3                                  	mov	[base_code],0A3h
0000BAAA: E9 23 FF FF FF                                        	jmp	store_mov_address32
                                                                      mov_mem_address16_ax:
0000BAAF: E8 1A 54 00 00                                        	call	store_segment_prefix_if_necessary
0000BAB4: E8 A0 5A 00 00                                        	call	address_16bit_prefix
0000BAB9: C6 05 AF A2 01 00 A3                                  	mov	[base_code],0A3h
0000BAC0: E9 2D FF FF FF                                        	jmp	store_mov_address16
                                                                      mov_mem_address64_ax:
0000BAC5: E8 04 54 00 00                                        	call	store_segment_prefix_if_necessary
0000BACA: C6 05 AF A2 01 00 A3                                  	mov	[base_code],0A3h
0000BAD1: EB 84                                                 	jmp	store_mov_address64
                                                                      mov_mem_sreg:
0000BAD3: 2C 31                                                 	sub	al,31h
0000BAD5: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000BADA: 59 5B 5A                                              	pop	ecx ebx edx
0000BADD: 8A 25 A4 A2 01 00                                     	mov	ah,[operand_size]
0000BAE3: 08 E4                                                 	or	ah,ah
0000BAE5: 74 09                                                 	jz	mov_mem_sreg_store
0000BAE7: 80 FC 02                                              	cmp	ah,2
0000BAEA: 0F 85 58 4E FF FF                                     	jne	invalid_operand_size
                                                                      mov_mem_sreg_store:
0000BAF0: C6 05 AF A2 01 00 8C                                  	mov	[base_code],8Ch
0000BAF7: E9 28 FA FF FF                                        	jmp	instruction_ready
                                                                      mov_mem_imm:
0000BAFC: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000BB01: 3C 01                                                 	cmp	al,1
0000BB03: 72 3C                                                 	jb	mov_mem_imm_nosize
0000BB05: 74 3F                                                 	je	mov_mem_imm_8bit
0000BB07: 3C 02                                                 	cmp	al,2
0000BB09: 74 60                                                 	je	mov_mem_imm_16bit
0000BB0B: 3C 04                                                 	cmp	al,4
0000BB0D: 0F 84 83 00 00 00                                     	je	mov_mem_imm_32bit
0000BB13: 3C 08                                                 	cmp	al,8
0000BB15: 0F 85 2D 4E FF FF                                     	jne	invalid_operand_size
                                                                      mov_mem_imm_64bit:
0000BB1B: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000BB22: 0F 85 5C 4E FF FF                                     	jne	long_immediate_not_encodable
0000BB28: E8 7B 53 00 00                                        	call	operand_64bit
0000BB2D: E8 34 FB FF FF                                        	call	get_simm32
0000BB32: 80 3D C0 A2 01 00 04                                  	cmp	[value_type],4
0000BB39: 0F 83 45 4E FF FF                                     	jae	long_immediate_not_encodable
0000BB3F: EB 5F                                                 	jmp	mov_mem_imm_32bit_store
                                                                      mov_mem_imm_nosize:
0000BB41: E8 28 FD FF FF                                        	call	recoverable_unknown_size
                                                                      mov_mem_imm_8bit:
0000BB46: E8 6C B7 FF FF                                        	call	get_byte_value
0000BB4B: A2 00 A2 01 00                                        	mov	byte [value],al
0000BB50: C6 05 B2 A2 01 00 00                                  	mov	[postbyte_register],0
0000BB57: C6 05 AF A2 01 00 C6                                  	mov	[base_code],0C6h
0000BB5E: 59 5B 5A                                              	pop	ecx ebx edx
0000BB61: E8 0D 5A 00 00                                        	call	store_instruction_with_imm8
0000BB66: E9 0F 94 FF FF                                        	jmp	instruction_assembled
                                                                      mov_mem_imm_16bit:
0000BB6B: E8 16 53 00 00                                        	call	operand_16bit
0000BB70: E8 CD B7 FF FF                                        	call	get_word_value
0000BB75: 66 A3 00 A2 01 00                                     	mov	word [value],ax
0000BB7B: C6 05 B2 A2 01 00 00                                  	mov	[postbyte_register],0
0000BB82: C6 05 AF A2 01 00 C7                                  	mov	[base_code],0C7h
0000BB89: 59 5B 5A                                              	pop	ecx ebx edx
0000BB8C: E8 F5 59 00 00                                        	call	store_instruction_with_imm16
0000BB91: E9 E4 93 FF FF                                        	jmp	instruction_assembled
                                                                      mov_mem_imm_32bit:
0000BB96: E8 FC 52 00 00                                        	call	operand_32bit
0000BB9B: E8 EA B7 FF FF                                        	call	get_dword_value
                                                                      mov_mem_imm_32bit_store:
0000BBA0: A3 00 A2 01 00                                        	mov	dword [value],eax
0000BBA5: C6 05 B2 A2 01 00 00                                  	mov	[postbyte_register],0
0000BBAC: C6 05 AF A2 01 00 C7                                  	mov	[base_code],0C7h
0000BBB3: 59 5B 5A                                              	pop	ecx ebx edx
0000BBB6: E8 E5 59 00 00                                        	call	store_instruction_with_imm32
0000BBBB: E9 BA 93 FF FF                                        	jmp	instruction_assembled
                                                                      mov_reg:
0000BBC0: AC                                                    	lods	byte [esi]
0000BBC1: 88 C4                                                 	mov	ah,al
0000BBC3: 80 EC 10                                              	sub	ah,10h
0000BBC6: 20 C4                                                 	and	ah,al
0000BBC8: F6 C4 F0                                              	test	ah,0F0h
0000BBCB: 0F 85 52 03 00 00                                     	jnz	mov_sreg
0000BBD1: E8 B7 50 00 00                                        	call	convert_register
0000BBD6: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000BBDB: AC                                                    	lods	byte [esi]
0000BBDC: 3C 2C                                                 	cmp	al,','
0000BBDE: 0F 85 5A 4D FF FF                                     	jne	invalid_operand
0000BBE4: AC                                                    	lods	byte [esi]
0000BBE5: E8 4A 51 00 00                                        	call	get_size_operator
0000BBEA: 3C 5B                                                 	cmp	al,'['
0000BBEC: 0F 84 18 01 00 00                                     	je	mov_reg_mem
0000BBF2: 3C 28                                                 	cmp	al,'('
0000BBF4: 0F 84 34 02 00 00                                     	je	mov_reg_imm
0000BBFA: 3C 14                                                 	cmp	al,14h
0000BBFC: 0F 84 9A 00 00 00                                     	je	mov_reg_creg
0000BC02: 3C 10                                                 	cmp	al,10h
0000BC04: 0F 85 34 4D FF FF                                     	jne	invalid_operand
                                                                      mov_reg_reg:
0000BC0A: AC                                                    	lods	byte [esi]
0000BC0B: 88 C4                                                 	mov	ah,al
0000BC0D: 80 EC 10                                              	sub	ah,10h
0000BC10: 20 C4                                                 	and	ah,al
0000BC12: F6 C4 F0                                              	test	ah,0F0h
0000BC15: 75 26                                                 	jnz	mov_reg_sreg
0000BC17: E8 71 50 00 00                                        	call	convert_register
0000BC1C: 8A 1D B2 A2 01 00                                     	mov	bl,[postbyte_register]
0000BC22: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000BC27: 88 E0                                                 	mov	al,ah
0000BC29: 3C 01                                                 	cmp	al,1
0000BC2B: 74 0B                                                 	je	mov_reg_reg_8bit
0000BC2D: E8 8B 52 00 00                                        	call	operand_autodetect
0000BC32: FE 05 AF A2 01 00                                     	inc	[base_code]
                                                                      mov_reg_reg_8bit:
0000BC38: E9 C2 FA FF FF                                        	jmp	nomem_instruction_ready
                                                                      mov_reg_sreg:
0000BC3D: 8A 1D B2 A2 01 00                                     	mov	bl,[postbyte_register]
0000BC43: 88 C4                                                 	mov	ah,al
0000BC45: 24 0F                                                 	and	al,1111b
0000BC47: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000BC4C: C0 EC 04                                              	shr	ah,4
0000BC4F: 80 FC 03                                              	cmp	ah,3
0000BC52: 0F 85 E6 4C FF FF                                     	jne	invalid_operand
0000BC58: FE 0D B2 A2 01 00                                     	dec	[postbyte_register]
0000BC5E: 80 3D A4 A2 01 00 08                                  	cmp	[operand_size],8
0000BC65: 74 1D                                                 	je	mov_reg_sreg64
0000BC67: 80 3D A4 A2 01 00 04                                  	cmp	[operand_size],4
0000BC6E: 74 1B                                                 	je	mov_reg_sreg32
0000BC70: 80 3D A4 A2 01 00 02                                  	cmp	[operand_size],2
0000BC77: 0F 85 CB 4C FF FF                                     	jne	invalid_operand_size
0000BC7D: E8 04 52 00 00                                        	call	operand_16bit
0000BC82: EB 0C                                                 	jmp	mov_reg_sreg_store
                                                                      mov_reg_sreg64:
0000BC84: E8 1F 52 00 00                                        	call	operand_64bit
0000BC89: EB 05                                                 	jmp	mov_reg_sreg_store
                                                                      mov_reg_sreg32:
0000BC8B: E8 07 52 00 00                                        	call	operand_32bit
                                                                      mov_reg_sreg_store:
0000BC90: C6 05 AF A2 01 00 8C                                  	mov	[base_code],8Ch
0000BC97: E9 63 FA FF FF                                        	jmp	nomem_instruction_ready
                                                                      mov_reg_creg:
0000BC9C: AC                                                    	lods	byte [esi]
0000BC9D: 88 C3                                                 	mov	bl,al
0000BC9F: C0 E8 04                                              	shr	al,4
0000BCA2: 3C 04                                                 	cmp	al,4
0000BCA4: 0F 87 94 4C FF FF                                     	ja	invalid_operand
0000BCAA: 04 20                                                 	add	al,20h
0000BCAC: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000BCB1: 80 E3 0F                                              	and	bl,1111b
0000BCB4: 86 1D B2 A2 01 00                                     	xchg	bl,[postbyte_register]
0000BCBA: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000BCC1: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000BCC8: 74 2E                                                 	je	mov_reg_creg_64bit
0000BCCA: 80 3D A4 A2 01 00 04                                  	cmp	[operand_size],4
0000BCD1: 0F 85 71 4C FF FF                                     	jne	invalid_operand_size
0000BCD7: 80 3D B2 A2 01 00 08                                  	cmp	[postbyte_register],8
0000BCDE: 75 13                                                 	jne	mov_reg_creg_store
0000BCE0: 80 3D B0 A2 01 00 20                                  	cmp	[extended_code],20h
0000BCE7: 75 0A                                                 	jne	mov_reg_creg_store
0000BCE9: B0 F0                                                 	mov	al,0F0h
0000BCEB: AA                                                    	stos	byte [edi]
0000BCEC: C6 05 B2 A2 01 00 00                                  	mov	[postbyte_register],0
                                                                      mov_reg_creg_store:
0000BCF3: E9 07 FA FF FF                                        	jmp	nomem_instruction_ready
                                                                      mov_reg_creg_64bit:
0000BCF8: 80 3D A4 A2 01 00 08                                  	cmp	[operand_size],8
0000BCFF: 0F 85 43 4C FF FF                                     	jne	invalid_operand_size
0000BD05: E9 F5 F9 FF FF                                        	jmp	nomem_instruction_ready
                                                                      mov_reg_mem:
0000BD0A: 80 05 AF A2 01 00 02                                  	add	[base_code],2
0000BD11: E8 7A 50 00 00                                        	call	get_address
0000BD16: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000BD1B: 3C 01                                                 	cmp	al,1
0000BD1D: 74 1F                                                 	je	mov_reg_mem_8bit
0000BD1F: FE 05 AF A2 01 00                                     	inc	[base_code]
0000BD25: E8 93 51 00 00                                        	call	operand_autodetect
0000BD2A: A0 B2 A2 01 00                                        	mov	al,[postbyte_register]
0000BD2F: 08 D8                                                 	or	al,bl
0000BD31: 08 F8                                                 	or	al,bh
0000BD33: 0F 84 85 00 00 00                                     	jz	mov_ax_mem
0000BD39: E9 E6 F7 FF FF                                        	jmp	instruction_ready
                                                                      mov_reg_mem_8bit:
0000BD3E: A0 B2 A2 01 00                                        	mov	al,[postbyte_register]
0000BD43: 08 D8                                                 	or	al,bl
0000BD45: 08 F8                                                 	or	al,bh
0000BD47: 74 05                                                 	jz	mov_al_mem
0000BD49: E9 D6 F7 FF FF                                        	jmp	instruction_ready
                                                                      mov_al_mem:
0000BD4E: F6 C5 22                                              	test	ch,22h
0000BD51: 75 44                                                 	jnz	mov_al_mem_address16
0000BD53: F6 C5 44                                              	test	ch,44h
0000BD56: 75 29                                                 	jnz	mov_al_mem_address32
0000BD58: F6 C5 77                                              	test	ch,not 88h
0000BD5B: 0F 85 05 4C FF FF                                     	jnz	invalid_address_size
0000BD61: E8 B3 FC FF FF                                        	call	check_mov_address64
0000BD66: 3C 00                                                 	cmp	al,0
0000BD68: 7F 43                                                 	jg	mov_al_mem_address64
0000BD6A: 0F 8C B4 F7 FF FF                                     	jl	instruction_ready
0000BD70: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000BD77: 75 08                                                 	jne	mov_al_mem_address32
0000BD79: 81 FA 00 00 01 00                                     	cmp	edx,10000h
0000BD7F: 72 16                                                 	jb	mov_al_mem_address16
                                                                      mov_al_mem_address32:
0000BD81: E8 48 51 00 00                                        	call	store_segment_prefix_if_necessary
0000BD86: E8 DB 57 00 00                                        	call	address_32bit_prefix
0000BD8B: C6 05 AF A2 01 00 A0                                  	mov	[base_code],0A0h
0000BD92: E9 3B FC FF FF                                        	jmp	store_mov_address32
                                                                      mov_al_mem_address16:
0000BD97: E8 32 51 00 00                                        	call	store_segment_prefix_if_necessary
0000BD9C: E8 B8 57 00 00                                        	call	address_16bit_prefix
0000BDA1: C6 05 AF A2 01 00 A0                                  	mov	[base_code],0A0h
0000BDA8: E9 45 FC FF FF                                        	jmp	store_mov_address16
                                                                      mov_al_mem_address64:
0000BDAD: E8 1C 51 00 00                                        	call	store_segment_prefix_if_necessary
0000BDB2: C6 05 AF A2 01 00 A0                                  	mov	[base_code],0A0h
0000BDB9: E9 99 FC FF FF                                        	jmp	store_mov_address64
                                                                      mov_ax_mem:
0000BDBE: F6 C5 22                                              	test	ch,22h
0000BDC1: 75 44                                                 	jnz	mov_ax_mem_address16
0000BDC3: F6 C5 44                                              	test	ch,44h
0000BDC6: 75 29                                                 	jnz	mov_ax_mem_address32
0000BDC8: F6 C5 77                                              	test	ch,not 88h
0000BDCB: 0F 85 95 4B FF FF                                     	jnz	invalid_address_size
0000BDD1: E8 43 FC FF FF                                        	call	check_mov_address64
0000BDD6: 3C 00                                                 	cmp	al,0
0000BDD8: 7F 43                                                 	jg	mov_ax_mem_address64
0000BDDA: 0F 8C 44 F7 FF FF                                     	jl	instruction_ready
0000BDE0: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000BDE7: 75 08                                                 	jne	mov_ax_mem_address32
0000BDE9: 81 FA 00 00 01 00                                     	cmp	edx,10000h
0000BDEF: 72 16                                                 	jb	mov_ax_mem_address16
                                                                      mov_ax_mem_address32:
0000BDF1: E8 D8 50 00 00                                        	call	store_segment_prefix_if_necessary
0000BDF6: E8 6B 57 00 00                                        	call	address_32bit_prefix
0000BDFB: C6 05 AF A2 01 00 A1                                  	mov	[base_code],0A1h
0000BE02: E9 CB FB FF FF                                        	jmp	store_mov_address32
                                                                      mov_ax_mem_address16:
0000BE07: E8 C2 50 00 00                                        	call	store_segment_prefix_if_necessary
0000BE0C: E8 48 57 00 00                                        	call	address_16bit_prefix
0000BE11: C6 05 AF A2 01 00 A1                                  	mov	[base_code],0A1h
0000BE18: E9 D5 FB FF FF                                        	jmp	store_mov_address16
                                                                      mov_ax_mem_address64:
0000BE1D: E8 AC 50 00 00                                        	call	store_segment_prefix_if_necessary
0000BE22: C6 05 AF A2 01 00 A1                                  	mov	[base_code],0A1h
0000BE29: E9 29 FC FF FF                                        	jmp	store_mov_address64
                                                                      mov_reg_imm:
0000BE2E: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000BE33: 3C 01                                                 	cmp	al,1
0000BE35: 74 54                                                 	je	mov_reg_imm_8bit
0000BE37: 3C 02                                                 	cmp	al,2
0000BE39: 74 66                                                 	je	mov_reg_imm_16bit
0000BE3B: 3C 04                                                 	cmp	al,4
0000BE3D: 0F 84 81 00 00 00                                     	je	mov_reg_imm_32bit
0000BE43: 3C 08                                                 	cmp	al,8
0000BE45: 0F 85 FD 4A FF FF                                     	jne	invalid_operand_size
                                                                      mov_reg_imm_64bit:
0000BE4B: E8 58 50 00 00                                        	call	operand_64bit
0000BE50: E8 D0 B5 FF FF                                        	call	get_qword_value
0000BE55: 89 D1                                                 	mov	ecx,edx
0000BE57: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000BE5E: 75 12                                                 	jne	mov_reg_imm_64bit_store
0000BE60: 80 3D C0 A2 01 00 04                                  	cmp	[value_type],4
0000BE67: 73 09                                                 	jae	mov_reg_imm_64bit_store
0000BE69: 99                                                    	cdq
0000BE6A: 39 D1                                                 	cmp	ecx,edx
0000BE6C: 0F 84 94 00 00 00                                     	je	mov_reg_64bit_imm_32bit
                                                                      mov_reg_imm_64bit_store:
0000BE72: 50 51                                                 	push	eax ecx
0000BE74: B0 B8                                                 	mov	al,0B8h
0000BE76: E8 69 00 00 00                                        	call	store_mov_reg_imm_code
0000BE7B: 5A 58                                                 	pop	edx eax
0000BE7D: E8 6A C5 FF FF                                        	call	mark_relocation
0000BE82: AB                                                    	stos	dword [edi]
0000BE83: 89 D0                                                 	mov	eax,edx
0000BE85: AB                                                    	stos	dword [edi]
0000BE86: E9 EF 90 FF FF                                        	jmp	instruction_assembled
                                                                      mov_reg_imm_8bit:
0000BE8B: E8 27 B4 FF FF                                        	call	get_byte_value
0000BE90: 88 C2                                                 	mov	dl,al
0000BE92: B0 B0                                                 	mov	al,0B0h
0000BE94: E8 4B 00 00 00                                        	call	store_mov_reg_imm_code
0000BE99: 88 D0                                                 	mov	al,dl
0000BE9B: AA                                                    	stos	byte [edi]
0000BE9C: E9 D9 90 FF FF                                        	jmp	instruction_assembled
                                                                      mov_reg_imm_16bit:
0000BEA1: E8 9C B4 FF FF                                        	call	get_word_value
0000BEA6: 66 89 C2                                              	mov	dx,ax
0000BEA9: E8 D8 4F 00 00                                        	call	operand_16bit
0000BEAE: B0 B8                                                 	mov	al,0B8h
0000BEB0: E8 2F 00 00 00                                        	call	store_mov_reg_imm_code
0000BEB5: 66 89 D0                                              	mov	ax,dx
0000BEB8: E8 2F C5 FF FF                                        	call	mark_relocation
0000BEBD: 66 AB                                                 	stos	word [edi]
0000BEBF: E9 B6 90 FF FF                                        	jmp	instruction_assembled
                                                                      mov_reg_imm_32bit:
0000BEC4: E8 CE 4F 00 00                                        	call	operand_32bit
0000BEC9: E8 BC B4 FF FF                                        	call	get_dword_value
0000BECE: 89 C2                                                 	mov	edx,eax
0000BED0: B0 B8                                                 	mov	al,0B8h
0000BED2: E8 0D 00 00 00                                        	call	store_mov_reg_imm_code
                                                                      mov_store_imm_32bit:
0000BED7: 89 D0                                                 	mov	eax,edx
0000BED9: E8 0E C5 FF FF                                        	call	mark_relocation
0000BEDE: AB                                                    	stos	dword [edi]
0000BEDF: E9 96 90 FF FF                                        	jmp	instruction_assembled
                                                                      store_mov_reg_imm_code:
0000BEE4: 8A 25 B2 A2 01 00                                     	mov	ah,[postbyte_register]
0000BEEA: F6 C4 08                                              	test	ah,1000b
0000BEED: 74 07                                                 	jz	mov_reg_imm_prefix_ok
0000BEEF: 80 0D A7 A2 01 00 41                                  	or	[rex_prefix],41h
                                                                      mov_reg_imm_prefix_ok:
0000BEF6: 80 E4 07                                              	and	ah,111b
0000BEF9: 00 E0                                                 	add	al,ah
0000BEFB: A2 AF A2 01 00                                        	mov	[base_code],al
0000BF00: E8 38 50 00 00                                        	call	store_classic_instruction_code
0000BF05: C3                                                    	ret
                                                                      mov_reg_64bit_imm_32bit:
0000BF06: 89 C2                                                 	mov	edx,eax
0000BF08: 8A 1D B2 A2 01 00                                     	mov	bl,[postbyte_register]
0000BF0E: C6 05 B2 A2 01 00 00                                  	mov	[postbyte_register],0
0000BF15: C6 05 AF A2 01 00 C7                                  	mov	[base_code],0C7h
0000BF1C: E8 6F 50 00 00                                        	call	store_nomem_instruction
0000BF21: EB B4                                                 	jmp	mov_store_imm_32bit
                                                                      mov_sreg:
0000BF23: 88 C4                                                 	mov	ah,al
0000BF25: 24 0F                                                 	and	al,1111b
0000BF27: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000BF2C: C0 EC 04                                              	shr	ah,4
0000BF2F: 80 FC 03                                              	cmp	ah,3
0000BF32: 0F 85 06 4A FF FF                                     	jne	invalid_operand
0000BF38: 3C 02                                                 	cmp	al,2
0000BF3A: 0F 84 F4 49 FF FF                                     	je	illegal_instruction
0000BF40: FE 0D B2 A2 01 00                                     	dec	[postbyte_register]
0000BF46: AC                                                    	lods	byte [esi]
0000BF47: 3C 2C                                                 	cmp	al,','
0000BF49: 0F 85 EF 49 FF FF                                     	jne	invalid_operand
0000BF4F: AC                                                    	lods	byte [esi]
0000BF50: E8 DF 4D 00 00                                        	call	get_size_operator
0000BF55: 3C 5B                                                 	cmp	al,'['
0000BF57: 74 29                                                 	je	mov_sreg_mem
0000BF59: 3C 10                                                 	cmp	al,10h
0000BF5B: 0F 85 DD 49 FF FF                                     	jne	invalid_operand
                                                                      mov_sreg_reg:
0000BF61: AC                                                    	lods	byte [esi]
0000BF62: E8 26 4D 00 00                                        	call	convert_register
0000BF67: 08 E4                                                 	or	ah,ah
0000BF69: 74 0B                                                 	jz	mov_sreg_reg_size_ok
0000BF6B: 80 FC 02                                              	cmp	ah,2
0000BF6E: 0F 85 D4 49 FF FF                                     	jne	invalid_operand_size
0000BF74: 88 C3                                                 	mov	bl,al
                                                                      mov_sreg_reg_size_ok:
0000BF76: C6 05 AF A2 01 00 8E                                  	mov	[base_code],8Eh
0000BF7D: E9 7D F7 FF FF                                        	jmp	nomem_instruction_ready
                                                                      mov_sreg_mem:
0000BF82: E8 09 4E 00 00                                        	call	get_address
0000BF87: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000BF8C: 08 C0                                                 	or	al,al
0000BF8E: 74 08                                                 	jz	mov_sreg_mem_size_ok
0000BF90: 3C 02                                                 	cmp	al,2
0000BF92: 0F 85 B0 49 FF FF                                     	jne	invalid_operand_size
                                                                      mov_sreg_mem_size_ok:
0000BF98: C6 05 AF A2 01 00 8E                                  	mov	[base_code],8Eh
0000BF9F: E9 80 F5 FF FF                                        	jmp	instruction_ready
                                                                      mov_creg:
0000BFA4: AC                                                    	lods	byte [esi]
0000BFA5: 88 C4                                                 	mov	ah,al
0000BFA7: C0 EC 04                                              	shr	ah,4
0000BFAA: 80 FC 04                                              	cmp	ah,4
0000BFAD: 0F 87 8B 49 FF FF                                     	ja	invalid_operand
0000BFB3: 80 C4 22                                              	add	ah,22h
0000BFB6: 88 25 B0 A2 01 00                                     	mov	[extended_code],ah
0000BFBC: 24 0F                                                 	and	al,1111b
0000BFBE: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000BFC3: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000BFCA: AC                                                    	lods	byte [esi]
0000BFCB: 3C 2C                                                 	cmp	al,','
0000BFCD: 0F 85 6B 49 FF FF                                     	jne	invalid_operand
0000BFD3: E8 A6 4C 00 00                                        	call	take_register
0000BFD8: 88 C3                                                 	mov	bl,al
0000BFDA: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000BFE1: 74 2A                                                 	je	mov_creg_64bit
0000BFE3: 80 FC 04                                              	cmp	ah,4
0000BFE6: 0F 85 5C 49 FF FF                                     	jne	invalid_operand_size
0000BFEC: 80 3D B2 A2 01 00 08                                  	cmp	[postbyte_register],8
0000BFF3: 75 13                                                 	jne	mov_creg_store
0000BFF5: 80 3D B0 A2 01 00 22                                  	cmp	[extended_code],22h
0000BFFC: 75 0A                                                 	jne	mov_creg_store
0000BFFE: B0 F0                                                 	mov	al,0F0h
0000C000: AA                                                    	stos	byte [edi]
0000C001: C6 05 B2 A2 01 00 00                                  	mov	[postbyte_register],0
                                                                      mov_creg_store:
0000C008: E9 F2 F6 FF FF                                        	jmp	nomem_instruction_ready
                                                                      mov_creg_64bit:
0000C00D: 80 FC 08                                              	cmp	ah,8
0000C010: 74 F6                                                 	je	mov_creg_store
0000C012: E9 31 49 FF FF                                        	jmp	invalid_operand_size
                                                                test_instruction:
0000C017: C6 05 AF A2 01 00 84                                  	mov	[base_code],84h
0000C01E: AC                                                    	lods	byte [esi]
0000C01F: E8 10 4D 00 00                                        	call	get_size_operator
0000C024: 3C 10                                                 	cmp	al,10h
0000C026: 0F 84 13 01 00 00                                     	je	test_reg
0000C02C: 3C 5B                                                 	cmp	al,'['
0000C02E: 0F 85 0A 49 FF FF                                     	jne	invalid_operand
                                                                      test_mem:
0000C034: E8 57 4D 00 00                                        	call	get_address
0000C039: 52 53 51                                              	push	edx ebx ecx
0000C03C: AC                                                    	lods	byte [esi]
0000C03D: 3C 2C                                                 	cmp	al,','
0000C03F: 0F 85 F9 48 FF FF                                     	jne	invalid_operand
0000C045: AC                                                    	lods	byte [esi]
0000C046: E8 E9 4C 00 00                                        	call	get_size_operator
0000C04B: 3C 28                                                 	cmp	al,'('
0000C04D: 74 2C                                                 	je	test_mem_imm
0000C04F: 3C 10                                                 	cmp	al,10h
0000C051: 0F 85 E7 48 FF FF                                     	jne	invalid_operand
                                                                      test_mem_reg:
0000C057: AC                                                    	lods	byte [esi]
0000C058: E8 30 4C 00 00                                        	call	convert_register
0000C05D: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000C062: 59 5B 5A                                              	pop	ecx ebx edx
0000C065: 88 E0                                                 	mov	al,ah
0000C067: 3C 01                                                 	cmp	al,1
0000C069: 74 0B                                                 	je	test_mem_reg_8bit
0000C06B: E8 4D 4E 00 00                                        	call	operand_autodetect
0000C070: FE 05 AF A2 01 00                                     	inc	[base_code]
                                                                      test_mem_reg_8bit:
0000C076: E9 A9 F4 FF FF                                        	jmp	instruction_ready
                                                                      test_mem_imm:
0000C07B: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000C080: 3C 01                                                 	cmp	al,1
0000C082: 72 3C                                                 	jb	test_mem_imm_nosize
0000C084: 74 3F                                                 	je	test_mem_imm_8bit
0000C086: 3C 02                                                 	cmp	al,2
0000C088: 74 60                                                 	je	test_mem_imm_16bit
0000C08A: 3C 04                                                 	cmp	al,4
0000C08C: 0F 84 83 00 00 00                                     	je	test_mem_imm_32bit
0000C092: 3C 08                                                 	cmp	al,8
0000C094: 0F 85 AE 48 FF FF                                     	jne	invalid_operand_size
                                                                      test_mem_imm_64bit:
0000C09A: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000C0A1: 0F 85 DD 48 FF FF                                     	jne	long_immediate_not_encodable
0000C0A7: E8 FC 4D 00 00                                        	call	operand_64bit
0000C0AC: E8 B5 F5 FF FF                                        	call	get_simm32
0000C0B1: 80 3D C0 A2 01 00 04                                  	cmp	[value_type],4
0000C0B8: 0F 83 C6 48 FF FF                                     	jae	long_immediate_not_encodable
0000C0BE: EB 5F                                                 	jmp	test_mem_imm_32bit_store
                                                                      test_mem_imm_nosize:
0000C0C0: E8 A9 F7 FF FF                                        	call	recoverable_unknown_size
                                                                      test_mem_imm_8bit:
0000C0C5: E8 ED B1 FF FF                                        	call	get_byte_value
0000C0CA: A2 00 A2 01 00                                        	mov	byte [value],al
0000C0CF: C6 05 B2 A2 01 00 00                                  	mov	[postbyte_register],0
0000C0D6: C6 05 AF A2 01 00 F6                                  	mov	[base_code],0F6h
0000C0DD: 59 5B 5A                                              	pop	ecx ebx edx
0000C0E0: E8 8E 54 00 00                                        	call	store_instruction_with_imm8
0000C0E5: E9 90 8E FF FF                                        	jmp	instruction_assembled
                                                                      test_mem_imm_16bit:
0000C0EA: E8 97 4D 00 00                                        	call	operand_16bit
0000C0EF: E8 4E B2 FF FF                                        	call	get_word_value
0000C0F4: 66 A3 00 A2 01 00                                     	mov	word [value],ax
0000C0FA: C6 05 B2 A2 01 00 00                                  	mov	[postbyte_register],0
0000C101: C6 05 AF A2 01 00 F7                                  	mov	[base_code],0F7h
0000C108: 59 5B 5A                                              	pop	ecx ebx edx
0000C10B: E8 76 54 00 00                                        	call	store_instruction_with_imm16
0000C110: E9 65 8E FF FF                                        	jmp	instruction_assembled
                                                                      test_mem_imm_32bit:
0000C115: E8 7D 4D 00 00                                        	call	operand_32bit
0000C11A: E8 6B B2 FF FF                                        	call	get_dword_value
                                                                      test_mem_imm_32bit_store:
0000C11F: A3 00 A2 01 00                                        	mov	dword [value],eax
0000C124: C6 05 B2 A2 01 00 00                                  	mov	[postbyte_register],0
0000C12B: C6 05 AF A2 01 00 F7                                  	mov	[base_code],0F7h
0000C132: 59 5B 5A                                              	pop	ecx ebx edx
0000C135: E8 66 54 00 00                                        	call	store_instruction_with_imm32
0000C13A: E9 3B 8E FF FF                                        	jmp	instruction_assembled
                                                                      test_reg:
0000C13F: AC                                                    	lods	byte [esi]
0000C140: E8 48 4B 00 00                                        	call	convert_register
0000C145: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000C14A: AC                                                    	lods	byte [esi]
0000C14B: 3C 2C                                                 	cmp	al,','
0000C14D: 0F 85 EB 47 FF FF                                     	jne	invalid_operand
0000C153: AC                                                    	lods	byte [esi]
0000C154: E8 DB 4B 00 00                                        	call	get_size_operator
0000C159: 3C 5B                                                 	cmp	al,'['
0000C15B: 0F 84 52 01 00 00                                     	je	test_reg_mem
0000C161: 3C 28                                                 	cmp	al,'('
0000C163: 74 2F                                                 	je	test_reg_imm
0000C165: 3C 10                                                 	cmp	al,10h
0000C167: 0F 85 D1 47 FF FF                                     	jne	invalid_operand
                                                                      test_reg_reg:
0000C16D: AC                                                    	lods	byte [esi]
0000C16E: E8 1A 4B 00 00                                        	call	convert_register
0000C173: 8A 1D B2 A2 01 00                                     	mov	bl,[postbyte_register]
0000C179: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000C17E: 88 E0                                                 	mov	al,ah
0000C180: 3C 01                                                 	cmp	al,1
0000C182: 74 0B                                                 	je	test_reg_reg_8bit
0000C184: E8 34 4D 00 00                                        	call	operand_autodetect
0000C189: FE 05 AF A2 01 00                                     	inc	[base_code]
                                                                      test_reg_reg_8bit:
0000C18F: E9 6B F5 FF FF                                        	jmp	nomem_instruction_ready
                                                                      test_reg_imm:
0000C194: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000C199: 3C 01                                                 	cmp	al,1
0000C19B: 74 3D                                                 	je	test_reg_imm_8bit
0000C19D: 3C 02                                                 	cmp	al,2
0000C19F: 74 79                                                 	je	test_reg_imm_16bit
0000C1A1: 3C 04                                                 	cmp	al,4
0000C1A3: 0F 84 C0 00 00 00                                     	je	test_reg_imm_32bit
0000C1A9: 3C 08                                                 	cmp	al,8
0000C1AB: 0F 85 97 47 FF FF                                     	jne	invalid_operand_size
                                                                      test_reg_imm_64bit:
0000C1B1: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000C1B8: 0F 85 C6 47 FF FF                                     	jne	long_immediate_not_encodable
0000C1BE: E8 E5 4C 00 00                                        	call	operand_64bit
0000C1C3: E8 9E F4 FF FF                                        	call	get_simm32
0000C1C8: 80 3D C0 A2 01 00 04                                  	cmp	[value_type],4
0000C1CF: 0F 83 AF 47 FF FF                                     	jae	long_immediate_not_encodable
0000C1D5: E9 99 00 00 00                                        	jmp	test_reg_imm_32bit_store
                                                                      test_reg_imm_8bit:
0000C1DA: E8 D8 B0 FF FF                                        	call	get_byte_value
0000C1DF: 88 C2                                                 	mov	dl,al
0000C1E1: 8A 1D B2 A2 01 00                                     	mov	bl,[postbyte_register]
0000C1E7: C6 05 B2 A2 01 00 00                                  	mov	[postbyte_register],0
0000C1EE: C6 05 AF A2 01 00 F6                                  	mov	[base_code],0F6h
0000C1F5: 08 DB                                                 	or	bl,bl
0000C1F7: 74 0D                                                 	jz	test_al_imm
0000C1F9: E8 92 4D 00 00                                        	call	store_nomem_instruction
0000C1FE: 88 D0                                                 	mov	al,dl
0000C200: AA                                                    	stos	byte [edi]
0000C201: E9 74 8D FF FF                                        	jmp	instruction_assembled
                                                                      test_al_imm:
0000C206: C6 05 AF A2 01 00 A8                                  	mov	[base_code],0A8h
0000C20D: E8 2B 4D 00 00                                        	call	store_classic_instruction_code
0000C212: 88 D0                                                 	mov	al,dl
0000C214: AA                                                    	stos	byte [edi]
0000C215: E9 60 8D FF FF                                        	jmp	instruction_assembled
                                                                      test_reg_imm_16bit:
0000C21A: E8 67 4C 00 00                                        	call	operand_16bit
0000C21F: E8 1E B1 FF FF                                        	call	get_word_value
0000C224: 66 89 C2                                              	mov	dx,ax
0000C227: 8A 1D B2 A2 01 00                                     	mov	bl,[postbyte_register]
0000C22D: C6 05 B2 A2 01 00 00                                  	mov	[postbyte_register],0
0000C234: C6 05 AF A2 01 00 F7                                  	mov	[base_code],0F7h
0000C23B: 08 DB                                                 	or	bl,bl
0000C23D: 74 14                                                 	jz	test_ax_imm
0000C23F: E8 4C 4D 00 00                                        	call	store_nomem_instruction
0000C244: 66 89 D0                                              	mov	ax,dx
0000C247: E8 A0 C1 FF FF                                        	call	mark_relocation
0000C24C: 66 AB                                                 	stos	word [edi]
0000C24E: E9 27 8D FF FF                                        	jmp	instruction_assembled
                                                                      test_ax_imm:
0000C253: C6 05 AF A2 01 00 A9                                  	mov	[base_code],0A9h
0000C25A: E8 DE 4C 00 00                                        	call	store_classic_instruction_code
0000C25F: 66 89 D0                                              	mov	ax,dx
0000C262: 66 AB                                                 	stos	word [edi]
0000C264: E9 11 8D FF FF                                        	jmp	instruction_assembled
                                                                      test_reg_imm_32bit:
0000C269: E8 29 4C 00 00                                        	call	operand_32bit
0000C26E: E8 17 B1 FF FF                                        	call	get_dword_value
                                                                      test_reg_imm_32bit_store:
0000C273: 89 C2                                                 	mov	edx,eax
0000C275: 8A 1D B2 A2 01 00                                     	mov	bl,[postbyte_register]
0000C27B: C6 05 B2 A2 01 00 00                                  	mov	[postbyte_register],0
0000C282: C6 05 AF A2 01 00 F7                                  	mov	[base_code],0F7h
0000C289: 08 DB                                                 	or	bl,bl
0000C28B: 74 12                                                 	jz	test_eax_imm
0000C28D: E8 FE 4C 00 00                                        	call	store_nomem_instruction
0000C292: 89 D0                                                 	mov	eax,edx
0000C294: E8 53 C1 FF FF                                        	call	mark_relocation
0000C299: AB                                                    	stos	dword [edi]
0000C29A: E9 DB 8C FF FF                                        	jmp	instruction_assembled
                                                                      test_eax_imm:
0000C29F: C6 05 AF A2 01 00 A9                                  	mov	[base_code],0A9h
0000C2A6: E8 92 4C 00 00                                        	call	store_classic_instruction_code
0000C2AB: 89 D0                                                 	mov	eax,edx
0000C2AD: AB                                                    	stos	dword [edi]
0000C2AE: E9 C7 8C FF FF                                        	jmp	instruction_assembled
                                                                      test_reg_mem:
0000C2B3: E8 D8 4A 00 00                                        	call	get_address
0000C2B8: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000C2BD: 3C 01                                                 	cmp	al,1
0000C2BF: 74 0B                                                 	je	test_reg_mem_8bit
0000C2C1: E8 F7 4B 00 00                                        	call	operand_autodetect
0000C2C6: FE 05 AF A2 01 00                                     	inc	[base_code]
                                                                      test_reg_mem_8bit:
0000C2CC: E9 53 F2 FF FF                                        	jmp	instruction_ready
                                                                xchg_instruction:
0000C2D1: C6 05 AF A2 01 00 86                                  	mov	[base_code],86h
0000C2D8: AC                                                    	lods	byte [esi]
0000C2D9: E8 56 4A 00 00                                        	call	get_size_operator
0000C2DE: 3C 10                                                 	cmp	al,10h
0000C2E0: 74 2C                                                 	je	xchg_reg
0000C2E2: 3C 5B                                                 	cmp	al,'['
0000C2E4: 0F 85 54 46 FF FF                                     	jne	invalid_operand
                                                                      xchg_mem:
0000C2EA: E8 A1 4A 00 00                                        	call	get_address
0000C2EF: 52 53 51                                              	push	edx ebx ecx
0000C2F2: AC                                                    	lods	byte [esi]
0000C2F3: 3C 2C                                                 	cmp	al,','
0000C2F5: 0F 85 43 46 FF FF                                     	jne	invalid_operand
0000C2FB: AC                                                    	lods	byte [esi]
0000C2FC: E8 33 4A 00 00                                        	call	get_size_operator
0000C301: 3C 10                                                 	cmp	al,10h
0000C303: 0F 84 4E FD FF FF                                     	je	test_mem_reg
0000C309: E9 30 46 FF FF                                        	jmp	invalid_operand
                                                                      xchg_reg:
0000C30E: AC                                                    	lods	byte [esi]
0000C30F: E8 79 49 00 00                                        	call	convert_register
0000C314: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000C319: AC                                                    	lods	byte [esi]
0000C31A: 3C 2C                                                 	cmp	al,','
0000C31C: 0F 85 1C 46 FF FF                                     	jne	invalid_operand
0000C322: AC                                                    	lods	byte [esi]
0000C323: E8 0C 4A 00 00                                        	call	get_size_operator
0000C328: 3C 5B                                                 	cmp	al,'['
0000C32A: 74 87                                                 	je	test_reg_mem
0000C32C: 3C 10                                                 	cmp	al,10h
0000C32E: 0F 85 0A 46 FF FF                                     	jne	invalid_operand
                                                                      xchg_reg_reg:
0000C334: AC                                                    	lods	byte [esi]
0000C335: E8 53 49 00 00                                        	call	convert_register
0000C33A: 88 C3                                                 	mov	bl,al
0000C33C: 88 E0                                                 	mov	al,ah
0000C33E: 3C 01                                                 	cmp	al,1
0000C340: 74 52                                                 	je	xchg_reg_reg_8bit
0000C342: E8 76 4B 00 00                                        	call	operand_autodetect
0000C347: 80 3D B2 A2 01 00 00                                  	cmp	[postbyte_register],0
0000C34E: 74 0A                                                 	je	xchg_ax_reg
0000C350: 08 DB                                                 	or	bl,bl
0000C352: 75 3A                                                 	jnz	xchg_reg_reg_store
0000C354: 8A 1D B2 A2 01 00                                     	mov	bl,[postbyte_register]
                                                                      xchg_ax_reg:
0000C35A: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C361: 75 09                                                 	jne	xchg_ax_reg_ok
0000C363: 80 FC 04                                              	cmp	ah,4
0000C366: 75 04                                                 	jne	xchg_ax_reg_ok
0000C368: 08 DB                                                 	or	bl,bl
0000C36A: 74 22                                                 	jz	xchg_reg_reg_store
                                                                      xchg_ax_reg_ok:
0000C36C: F6 C3 08                                              	test	bl,1000b
0000C36F: 74 0A                                                 	jz	xchg_ax_reg_store
0000C371: 80 0D A7 A2 01 00 41                                  	or	[rex_prefix],41h
0000C378: 80 E3 07                                              	and	bl,111b
                                                                      xchg_ax_reg_store:
0000C37B: 80 C3 90                                              	add	bl,90h
0000C37E: 88 1D AF A2 01 00                                     	mov	[base_code],bl
0000C384: E8 B4 4B 00 00                                        	call	store_classic_instruction_code
0000C389: E9 EC 8B FF FF                                        	jmp	instruction_assembled
                                                                      xchg_reg_reg_store:
0000C38E: FE 05 AF A2 01 00                                     	inc	[base_code]
                                                                      xchg_reg_reg_8bit:
0000C394: E9 66 F3 FF FF                                        	jmp	nomem_instruction_ready
                                                                push_instruction:
0000C399: A2 B7 A2 01 00                                        	mov	[push_size],al
                                                                      push_next:
0000C39E: AC                                                    	lods	byte [esi]
0000C39F: E8 90 49 00 00                                        	call	get_size_operator
0000C3A4: 3C 10                                                 	cmp	al,10h
0000C3A6: 0F 84 A5 00 00 00                                     	je	push_reg
0000C3AC: 3C 28                                                 	cmp	al,'('
0000C3AE: 0F 84 EB 01 00 00                                     	je	push_imm
0000C3B4: 3C 5B                                                 	cmp	al,'['
0000C3B6: 0F 85 82 45 FF FF                                     	jne	invalid_operand
                                                                      push_mem:
0000C3BC: E8 CF 49 00 00                                        	call	get_address
0000C3C1: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000C3C6: 8A 25 B7 A2 01 00                                     	mov	ah,[push_size]
0000C3CC: 3C 02                                                 	cmp	al,2
0000C3CE: 74 26                                                 	je	push_mem_16bit
0000C3D0: 3C 04                                                 	cmp	al,4
0000C3D2: 74 32                                                 	je	push_mem_32bit
0000C3D4: 3C 08                                                 	cmp	al,8
0000C3D6: 74 4B                                                 	je	push_mem_64bit
0000C3D8: 08 C0                                                 	or	al,al
0000C3DA: 0F 85 68 45 FF FF                                     	jnz	invalid_operand_size
0000C3E0: 80 FC 02                                              	cmp	ah,2
0000C3E3: 74 11                                                 	je	push_mem_16bit
0000C3E5: 80 FC 04                                              	cmp	ah,4
0000C3E8: 74 1C                                                 	je	push_mem_32bit
0000C3EA: 80 FC 08                                              	cmp	ah,8
0000C3ED: 74 34                                                 	je	push_mem_64bit
0000C3EF: E8 7A F4 FF FF                                        	call	recoverable_unknown_size
0000C3F4: EB 43                                                 	jmp	push_mem_store
                                                                      push_mem_16bit:
0000C3F6: F6 C4 FD                                              	test	ah,not 2
0000C3F9: 0F 85 49 45 FF FF                                     	jnz	invalid_operand_size
0000C3FF: E8 82 4A 00 00                                        	call	operand_16bit
0000C404: EB 33                                                 	jmp	push_mem_store
                                                                      push_mem_32bit:
0000C406: F6 C4 FB                                              	test	ah,not 4
0000C409: 0F 85 39 45 FF FF                                     	jnz	invalid_operand_size
0000C40F: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C416: 0F 84 18 45 FF FF                                     	je	illegal_instruction
0000C41C: E8 76 4A 00 00                                        	call	operand_32bit
0000C421: EB 16                                                 	jmp	push_mem_store
                                                                      push_mem_64bit:
0000C423: F6 C4 F7                                              	test	ah,not 8
0000C426: 0F 85 1C 45 FF FF                                     	jnz	invalid_operand_size
0000C42C: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C433: 0F 85 FB 44 FF FF                                     	jne	illegal_instruction
                                                                      push_mem_store:
0000C439: C6 05 AF A2 01 00 FF                                  	mov	[base_code],0FFh
0000C440: C6 05 B2 A2 01 00 06                                  	mov	[postbyte_register],110b
0000C447: E8 B1 4B 00 00                                        	call	store_instruction
0000C44C: E9 BE 02 00 00                                        	jmp	push_done
                                                                      push_reg:
0000C451: AC                                                    	lods	byte [esi]
0000C452: 88 C4                                                 	mov	ah,al
0000C454: 80 EC 10                                              	sub	ah,10h
0000C457: 20 C4                                                 	and	ah,al
0000C459: F6 C4 F0                                              	test	ah,0F0h
0000C45C: 75 7E                                                 	jnz	push_sreg
0000C45E: E8 2A 48 00 00                                        	call	convert_register
0000C463: A8 08                                                 	test	al,1000b
0000C465: 74 09                                                 	jz	push_reg_ok
0000C467: 80 0D A7 A2 01 00 41                                  	or	[rex_prefix],41h
0000C46E: 24 07                                                 	and	al,111b
                                                                      push_reg_ok:
0000C470: 04 50                                                 	add	al,50h
0000C472: A2 AF A2 01 00                                        	mov	[base_code],al
0000C477: 88 E0                                                 	mov	al,ah
0000C479: 8A 25 B7 A2 01 00                                     	mov	ah,[push_size]
0000C47F: 3C 02                                                 	cmp	al,2
0000C481: 74 41                                                 	je	push_reg_16bit
0000C483: 3C 04                                                 	cmp	al,4
0000C485: 74 20                                                 	je	push_reg_32bit
0000C487: 3C 08                                                 	cmp	al,8
0000C489: 0F 85 B9 44 FF FF                                     	jne	invalid_operand_size
                                                                      push_reg_64bit:
0000C48F: F6 C4 F7                                              	test	ah,not 8
0000C492: 0F 85 B0 44 FF FF                                     	jnz	invalid_operand_size
0000C498: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C49F: 0F 85 8F 44 FF FF                                     	jne	illegal_instruction
0000C4A5: EB 2B                                                 	jmp	push_reg_store
                                                                      push_reg_32bit:
0000C4A7: F6 C4 FB                                              	test	ah,not 4
0000C4AA: 0F 85 98 44 FF FF                                     	jnz	invalid_operand_size
0000C4B0: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C4B7: 0F 84 77 44 FF FF                                     	je	illegal_instruction
0000C4BD: E8 D5 49 00 00                                        	call	operand_32bit
0000C4C2: EB 0E                                                 	jmp	push_reg_store
                                                                      push_reg_16bit:
0000C4C4: F6 C4 FD                                              	test	ah,not 2
0000C4C7: 0F 85 7B 44 FF FF                                     	jnz	invalid_operand_size
0000C4CD: E8 B4 49 00 00                                        	call	operand_16bit
                                                                      push_reg_store:
0000C4D2: E8 66 4A 00 00                                        	call	store_classic_instruction_code
0000C4D7: E9 33 02 00 00                                        	jmp	push_done
                                                                      push_sreg:
0000C4DC: 88 C3                                                 	mov	bl,al
0000C4DE: 8A 15 A4 A2 01 00                                     	mov	dl,[operand_size]
0000C4E4: 8A 35 B7 A2 01 00                                     	mov	dh,[push_size]
0000C4EA: 80 FA 02                                              	cmp	dl,2
0000C4ED: 74 23                                                 	je	push_sreg16
0000C4EF: 80 FA 04                                              	cmp	dl,4
0000C4F2: 74 2E                                                 	je	push_sreg32
0000C4F4: 80 FA 08                                              	cmp	dl,8
0000C4F7: 74 46                                                 	je	push_sreg64
0000C4F9: 08 D2                                                 	or	dl,dl
0000C4FB: 0F 85 47 44 FF FF                                     	jnz	invalid_operand_size
0000C501: 80 FE 02                                              	cmp	dh,2
0000C504: 74 0C                                                 	je	push_sreg16
0000C506: 80 FE 04                                              	cmp	dh,4
0000C509: 74 17                                                 	je	push_sreg32
0000C50B: 80 FE 08                                              	cmp	dh,8
0000C50E: 74 2F                                                 	je	push_sreg64
0000C510: EB 43                                                 	jmp	push_sreg_store
                                                                      push_sreg16:
0000C512: F6 C6 FD                                              	test	dh,not 2
0000C515: 0F 85 2D 44 FF FF                                     	jnz	invalid_operand_size
0000C51B: E8 66 49 00 00                                        	call	operand_16bit
0000C520: EB 33                                                 	jmp	push_sreg_store
                                                                      push_sreg32:
0000C522: F6 C6 FB                                              	test	dh,not 4
0000C525: 0F 85 1D 44 FF FF                                     	jnz	invalid_operand_size
0000C52B: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C532: 0F 84 FC 43 FF FF                                     	je	illegal_instruction
0000C538: E8 5A 49 00 00                                        	call	operand_32bit
0000C53D: EB 16                                                 	jmp	push_sreg_store
                                                                      push_sreg64:
0000C53F: F6 C6 F7                                              	test	dh,not 8
0000C542: 0F 85 00 44 FF FF                                     	jnz	invalid_operand_size
0000C548: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C54F: 0F 85 DF 43 FF FF                                     	jne	illegal_instruction
                                                                      push_sreg_store:
0000C555: 88 D8                                                 	mov	al,bl
0000C557: 3C 40                                                 	cmp	al,40h
0000C559: 0F 83 DF 43 FF FF                                     	jae	invalid_operand
0000C55F: 2C 31                                                 	sub	al,31h
0000C561: 0F 82 D7 43 FF FF                                     	jc	invalid_operand
0000C567: 3C 04                                                 	cmp	al,4
0000C569: 73 1C                                                 	jae	push_sreg_386
0000C56B: C0 E0 03                                              	shl	al,3
0000C56E: 04 06                                                 	add	al,6
0000C570: A2 AF A2 01 00                                        	mov	[base_code],al
0000C575: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C57C: 0F 84 B2 43 FF FF                                     	je	illegal_instruction
0000C582: E9 4B FF FF FF                                        	jmp	push_reg_store
                                                                      push_sreg_386:
0000C587: 2C 04                                                 	sub	al,4
0000C589: C0 E0 03                                              	shl	al,3
0000C58C: 04 A0                                                 	add	al,0A0h
0000C58E: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000C593: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000C59A: E9 33 FF FF FF                                        	jmp	push_reg_store
                                                                      push_imm:
0000C59F: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000C5A4: 8A 25 B7 A2 01 00                                     	mov	ah,[push_size]
0000C5AA: 08 C0                                                 	or	al,al
0000C5AC: 74 0C                                                 	je	push_imm_size_ok
0000C5AE: 08 E4                                                 	or	ah,ah
0000C5B0: 74 08                                                 	je	push_imm_size_ok
0000C5B2: 38 E0                                                 	cmp	al,ah
0000C5B4: 0F 85 8E 43 FF FF                                     	jne	invalid_operand_size
                                                                      push_imm_size_ok:
0000C5BA: 3C 02                                                 	cmp	al,2
0000C5BC: 0F 84 E5 00 00 00                                     	je	push_imm_16bit
0000C5C2: 3C 04                                                 	cmp	al,4
0000C5C4: 0F 84 18 01 00 00                                     	je	push_imm_32bit
0000C5CA: 3C 08                                                 	cmp	al,8
0000C5CC: 0F 84 FA 00 00 00                                     	je	push_imm_64bit
0000C5D2: 80 FC 02                                              	cmp	ah,2
0000C5D5: 0F 84 97 00 00 00                                     	je	push_imm_optimized_16bit
0000C5DB: 80 FC 04                                              	cmp	ah,4
0000C5DE: 74 56                                                 	je	push_imm_optimized_32bit
0000C5E0: 80 FC 08                                              	cmp	ah,8
0000C5E3: 74 1A                                                 	je	push_imm_optimized_64bit
0000C5E5: 08 C0                                                 	or	al,al
0000C5E7: 0F 85 5B 43 FF FF                                     	jnz	invalid_operand_size
0000C5ED: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000C5F4: 74 7C                                                 	je	push_imm_optimized_16bit
0000C5F6: 80 3D CA A2 01 00 20                                  	cmp	[code_type],32
0000C5FD: 74 37                                                 	je	push_imm_optimized_32bit
                                                                      push_imm_optimized_64bit:
0000C5FF: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C606: 0F 85 28 43 FF FF                                     	jne	illegal_instruction
0000C60C: E8 55 F0 FF FF                                        	call	get_simm32
0000C611: 89 C2                                                 	mov	edx,eax
0000C613: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000C61A: 0F 85 DB 00 00 00                                     	jne	push_imm_32bit_store
0000C620: 83 F8 80                                              	cmp	eax,-80h
0000C623: 0F 8C D2 00 00 00                                     	jl	push_imm_32bit_store
0000C629: 3D 80 00 00 00                                        	cmp	eax,80h
0000C62E: 0F 8D C7 00 00 00                                     	jge	push_imm_32bit_store
0000C634: EB 5E                                                 	jmp	push_imm_8bit
                                                                      push_imm_optimized_32bit:
0000C636: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C63D: 0F 84 F1 42 FF FF                                     	je	illegal_instruction
0000C643: E8 42 AD FF FF                                        	call	get_dword_value
0000C648: 89 C2                                                 	mov	edx,eax
0000C64A: E8 48 48 00 00                                        	call	operand_32bit
0000C64F: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000C656: 0F 85 9F 00 00 00                                     	jne	push_imm_32bit_store
0000C65C: 83 F8 80                                              	cmp	eax,-80h
0000C65F: 0F 8C 96 00 00 00                                     	jl	push_imm_32bit_store
0000C665: 3D 80 00 00 00                                        	cmp	eax,80h
0000C66A: 0F 8D 8B 00 00 00                                     	jge	push_imm_32bit_store
0000C670: EB 22                                                 	jmp	push_imm_8bit
                                                                      push_imm_optimized_16bit:
0000C672: E8 CB AC FF FF                                        	call	get_word_value
0000C677: 66 89 C2                                              	mov	dx,ax
0000C67A: E8 07 48 00 00                                        	call	operand_16bit
0000C67F: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000C686: 75 2C                                                 	jne	push_imm_16bit_store
0000C688: 66 83 F8 80                                           	cmp	ax,-80h
0000C68C: 7C 26                                                 	jl	push_imm_16bit_store
0000C68E: 66 3D 80 00                                           	cmp	ax,80h
0000C692: 7D 20                                                 	jge	push_imm_16bit_store
                                                                      push_imm_8bit:
0000C694: 88 C4                                                 	mov	ah,al
0000C696: C6 05 AF A2 01 00 6A                                  	mov	[base_code],6Ah
0000C69D: E8 9B 48 00 00                                        	call	store_classic_instruction_code
0000C6A2: 88 E0                                                 	mov	al,ah
0000C6A4: AA                                                    	stos	byte [edi]
0000C6A5: EB 68                                                 	jmp	push_done
                                                                      push_imm_16bit:
0000C6A7: E8 96 AC FF FF                                        	call	get_word_value
0000C6AC: 66 89 C2                                              	mov	dx,ax
0000C6AF: E8 D2 47 00 00                                        	call	operand_16bit
                                                                      push_imm_16bit_store:
0000C6B4: C6 05 AF A2 01 00 68                                  	mov	[base_code],68h
0000C6BB: E8 7D 48 00 00                                        	call	store_classic_instruction_code
0000C6C0: 66 89 D0                                              	mov	ax,dx
0000C6C3: E8 24 BD FF FF                                        	call	mark_relocation
0000C6C8: 66 AB                                                 	stos	word [edi]
0000C6CA: EB 43                                                 	jmp	push_done
                                                                      push_imm_64bit:
0000C6CC: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C6D3: 0F 85 5B 42 FF FF                                     	jne	illegal_instruction
0000C6D9: E8 88 EF FF FF                                        	call	get_simm32
0000C6DE: 89 C2                                                 	mov	edx,eax
0000C6E0: EB 19                                                 	jmp	push_imm_32bit_store
                                                                      push_imm_32bit:
0000C6E2: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C6E9: 0F 84 45 42 FF FF                                     	je	illegal_instruction
0000C6EF: E8 96 AC FF FF                                        	call	get_dword_value
0000C6F4: 89 C2                                                 	mov	edx,eax
0000C6F6: E8 9C 47 00 00                                        	call	operand_32bit
                                                                      push_imm_32bit_store:
0000C6FB: C6 05 AF A2 01 00 68                                  	mov	[base_code],68h
0000C702: E8 36 48 00 00                                        	call	store_classic_instruction_code
0000C707: 89 D0                                                 	mov	eax,edx
0000C709: E8 DE BC FF FF                                        	call	mark_relocation
0000C70E: AB                                                    	stos	dword [edi]
                                                                      push_done:
0000C70F: AC                                                    	lods	byte [esi]
0000C710: 4E                                                    	dec	esi
0000C711: 3C 0F                                                 	cmp	al,0Fh
0000C713: 0F 84 61 88 FF FF                                     	je	instruction_assembled
0000C719: 08 C0                                                 	or	al,al
0000C71B: 0F 84 59 88 FF FF                                     	jz	instruction_assembled
                                                                ;	 mov	 [operand_size],0
                                                                ;	 mov	 [operand_flags],0
                                                                ;	 mov	 [operand_prefix],0
                                                                ;	 mov	 [rex_prefix],0
0000C721: 83 25 A4 A2 01 00 00                                  	and	dword [operand_size],0
0000C728: E9 71 FC FF FF                                        	jmp	push_next
                                                                pop_instruction:
0000C72D: A2 B7 A2 01 00                                        	mov	[push_size],al
                                                                      pop_next:
0000C732: AC                                                    	lods	byte [esi]
0000C733: E8 FC 45 00 00                                        	call	get_size_operator
0000C738: 3C 10                                                 	cmp	al,10h
0000C73A: 0F 84 9D 00 00 00                                     	je	pop_reg
0000C740: 3C 5B                                                 	cmp	al,'['
0000C742: 0F 85 F6 41 FF FF                                     	jne	invalid_operand
                                                                      pop_mem:
0000C748: E8 43 46 00 00                                        	call	get_address
0000C74D: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000C752: 8A 25 B7 A2 01 00                                     	mov	ah,[push_size]
0000C758: 3C 02                                                 	cmp	al,2
0000C75A: 74 26                                                 	je	pop_mem_16bit
0000C75C: 3C 04                                                 	cmp	al,4
0000C75E: 74 32                                                 	je	pop_mem_32bit
0000C760: 3C 08                                                 	cmp	al,8
0000C762: 74 4B                                                 	je	pop_mem_64bit
0000C764: 08 C0                                                 	or	al,al
0000C766: 0F 85 DC 41 FF FF                                     	jnz	invalid_operand_size
0000C76C: 80 FC 02                                              	cmp	ah,2
0000C76F: 74 11                                                 	je	pop_mem_16bit
0000C771: 80 FC 04                                              	cmp	ah,4
0000C774: 74 1C                                                 	je	pop_mem_32bit
0000C776: 80 FC 08                                              	cmp	ah,8
0000C779: 74 34                                                 	je	pop_mem_64bit
0000C77B: E8 EE F0 FF FF                                        	call	recoverable_unknown_size
0000C780: EB 43                                                 	jmp	pop_mem_store
                                                                      pop_mem_16bit:
0000C782: F6 C4 FD                                              	test	ah,not 2
0000C785: 0F 85 BD 41 FF FF                                     	jnz	invalid_operand_size
0000C78B: E8 F6 46 00 00                                        	call	operand_16bit
0000C790: EB 33                                                 	jmp	pop_mem_store
                                                                      pop_mem_32bit:
0000C792: F6 C4 FB                                              	test	ah,not 4
0000C795: 0F 85 AD 41 FF FF                                     	jnz	invalid_operand_size
0000C79B: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C7A2: 0F 84 8C 41 FF FF                                     	je	illegal_instruction
0000C7A8: E8 EA 46 00 00                                        	call	operand_32bit
0000C7AD: EB 16                                                 	jmp	pop_mem_store
                                                                      pop_mem_64bit:
0000C7AF: F6 C4 F7                                              	test	ah,not 8
0000C7B2: 0F 85 90 41 FF FF                                     	jnz	invalid_operand_size
0000C7B8: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C7BF: 0F 85 6F 41 FF FF                                     	jne	illegal_instruction
                                                                      pop_mem_store:
0000C7C5: C6 05 AF A2 01 00 8F                                  	mov	[base_code],08Fh
0000C7CC: C6 05 B2 A2 01 00 00                                  	mov	[postbyte_register],0
0000C7D3: E8 25 48 00 00                                        	call	store_instruction
0000C7D8: E9 8B 00 00 00                                        	jmp	pop_done
                                                                      pop_reg:
0000C7DD: AC                                                    	lods	byte [esi]
0000C7DE: 88 C4                                                 	mov	ah,al
0000C7E0: 80 EC 10                                              	sub	ah,10h
0000C7E3: 20 C4                                                 	and	ah,al
0000C7E5: F6 C4 F0                                              	test	ah,0F0h
0000C7E8: 0F 85 98 00 00 00                                     	jnz	pop_sreg
0000C7EE: E8 9A 44 00 00                                        	call	convert_register
0000C7F3: A8 08                                                 	test	al,1000b
0000C7F5: 74 09                                                 	jz	pop_reg_ok
0000C7F7: 80 0D A7 A2 01 00 41                                  	or	[rex_prefix],41h
0000C7FE: 24 07                                                 	and	al,111b
                                                                      pop_reg_ok:
0000C800: 04 58                                                 	add	al,58h
0000C802: A2 AF A2 01 00                                        	mov	[base_code],al
0000C807: 88 E0                                                 	mov	al,ah
0000C809: 8A 25 B7 A2 01 00                                     	mov	ah,[push_size]
0000C80F: 3C 02                                                 	cmp	al,2
0000C811: 74 42                                                 	je	pop_reg_16bit
0000C813: 3C 04                                                 	cmp	al,4
0000C815: 74 21                                                 	je	pop_reg_32bit
0000C817: 3C 08                                                 	cmp	al,8
0000C819: 74 05                                                 	je	pop_reg_64bit
0000C81B: E9 28 41 FF FF                                        	jmp	invalid_operand_size
                                                                      pop_reg_64bit:
0000C820: F6 C4 F7                                              	test	ah,not 8
0000C823: 0F 85 1F 41 FF FF                                     	jnz	invalid_operand_size
0000C829: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C830: 0F 85 FE 40 FF FF                                     	jne	illegal_instruction
0000C836: EB 2B                                                 	jmp	pop_reg_store
                                                                      pop_reg_32bit:
0000C838: F6 C4 FB                                              	test	ah,not 4
0000C83B: 0F 85 07 41 FF FF                                     	jnz	invalid_operand_size
0000C841: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C848: 0F 84 E6 40 FF FF                                     	je	illegal_instruction
0000C84E: E8 44 46 00 00                                        	call	operand_32bit
0000C853: EB 0E                                                 	jmp	pop_reg_store
                                                                      pop_reg_16bit:
0000C855: F6 C4 FD                                              	test	ah,not 2
0000C858: 0F 85 EA 40 FF FF                                     	jnz	invalid_operand_size
0000C85E: E8 23 46 00 00                                        	call	operand_16bit
                                                                      pop_reg_store:
0000C863: E8 D5 46 00 00                                        	call	store_classic_instruction_code
                                                                      pop_done:
0000C868: AC                                                    	lods	byte [esi]
0000C869: 4E                                                    	dec	esi
0000C86A: 3C 0F                                                 	cmp	al,0Fh
0000C86C: 0F 84 08 87 FF FF                                     	je	instruction_assembled
0000C872: 08 C0                                                 	or	al,al
0000C874: 0F 84 00 87 FF FF                                     	jz	instruction_assembled
                                                                ;	 mov	 [operand_size],0
                                                                ;	 mov	 [operand_flags],0
                                                                ;	 mov	 [operand_prefix],0
                                                                ;	 mov	 [rex_prefix],0
0000C87A: 83 25 A4 A2 01 00 00                                  	and	dword [operand_size],0
0000C881: E9 AC FE FF FF                                        	jmp	pop_next
                                                                      pop_sreg:
0000C886: 8A 15 A4 A2 01 00                                     	mov	dl,[operand_size]
0000C88C: 8A 35 B7 A2 01 00                                     	mov	dh,[push_size]
0000C892: 3C 32                                                 	cmp	al,32h
0000C894: 0F 84 9F 00 00 00                                     	je	pop_cs
0000C89A: 88 C3                                                 	mov	bl,al
0000C89C: 80 FA 02                                              	cmp	dl,2
0000C89F: 74 23                                                 	je	pop_sreg16
0000C8A1: 80 FA 04                                              	cmp	dl,4
0000C8A4: 74 2E                                                 	je	pop_sreg32
0000C8A6: 80 FA 08                                              	cmp	dl,8
0000C8A9: 74 46                                                 	je	pop_sreg64
0000C8AB: 08 D2                                                 	or	dl,dl
0000C8AD: 0F 85 95 40 FF FF                                     	jnz	invalid_operand_size
0000C8B3: 80 FE 02                                              	cmp	dh,2
0000C8B6: 74 0C                                                 	je	pop_sreg16
0000C8B8: 80 FE 04                                              	cmp	dh,4
0000C8BB: 74 17                                                 	je	pop_sreg32
0000C8BD: 80 FE 08                                              	cmp	dh,8
0000C8C0: 74 2F                                                 	je	pop_sreg64
0000C8C2: EB 43                                                 	jmp	pop_sreg_store
                                                                      pop_sreg16:
0000C8C4: F6 C6 FD                                              	test	dh,not 2
0000C8C7: 0F 85 7B 40 FF FF                                     	jnz	invalid_operand_size
0000C8CD: E8 B4 45 00 00                                        	call	operand_16bit
0000C8D2: EB 33                                                 	jmp	pop_sreg_store
                                                                      pop_sreg32:
0000C8D4: F6 C6 FB                                              	test	dh,not 4
0000C8D7: 0F 85 6B 40 FF FF                                     	jnz	invalid_operand_size
0000C8DD: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C8E4: 0F 84 4A 40 FF FF                                     	je	illegal_instruction
0000C8EA: E8 A8 45 00 00                                        	call	operand_32bit
0000C8EF: EB 16                                                 	jmp	pop_sreg_store
                                                                      pop_sreg64:
0000C8F1: F6 C6 F7                                              	test	dh,not 8
0000C8F4: 0F 85 4E 40 FF FF                                     	jnz	invalid_operand_size
0000C8FA: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C901: 0F 85 2D 40 FF FF                                     	jne	illegal_instruction
                                                                      pop_sreg_store:
0000C907: 88 D8                                                 	mov	al,bl
0000C909: 3C 40                                                 	cmp	al,40h
0000C90B: 0F 83 2D 40 FF FF                                     	jae	invalid_operand
0000C911: 2C 31                                                 	sub	al,31h
0000C913: 0F 82 25 40 FF FF                                     	jc	invalid_operand
0000C919: 3C 04                                                 	cmp	al,4
0000C91B: 73 54                                                 	jae	pop_sreg_386
0000C91D: C0 E0 03                                              	shl	al,3
0000C920: 04 07                                                 	add	al,7
0000C922: A2 AF A2 01 00                                        	mov	[base_code],al
0000C927: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000C92E: 0F 84 00 40 FF FF                                     	je	illegal_instruction
0000C934: E9 2A FF FF FF                                        	jmp	pop_reg_store
                                                                      pop_cs:
0000C939: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000C940: 0F 85 EE 3F FF FF                                     	jne	illegal_instruction
0000C946: 80 FA 02                                              	cmp	dl,2
0000C949: 74 15                                                 	je	pop_cs_store
0000C94B: 08 D2                                                 	or	dl,dl
0000C94D: 0F 85 F5 3F FF FF                                     	jnz	invalid_operand_size
0000C953: 80 FE 02                                              	cmp	dh,2
0000C956: 74 08                                                 	je	pop_cs_store
0000C958: 08 F6                                                 	or	dh,dh
0000C95A: 0F 85 D4 3F FF FF                                     	jnz	illegal_instruction
                                                                      pop_cs_store:
0000C960: F6 C6 FD                                              	test	dh,not 2
0000C963: 0F 85 DF 3F FF FF                                     	jnz	invalid_operand_size
0000C969: B0 0F                                                 	mov	al,0Fh
0000C96B: AA                                                    	stos	byte [edi]
0000C96C: E9 F7 FE FF FF                                        	jmp	pop_done
                                                                      pop_sreg_386:
0000C971: 2C 04                                                 	sub	al,4
0000C973: C0 E0 03                                              	shl	al,3
0000C976: 04 A1                                                 	add	al,0A1h
0000C978: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000C97D: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000C984: E9 DA FE FF FF                                        	jmp	pop_reg_store
                                                                inc_instruction:
0000C989: A2 AF A2 01 00                                        	mov	[base_code],al
0000C98E: AC                                                    	lods	byte [esi]
0000C98F: E8 A0 43 00 00                                        	call	get_size_operator
0000C994: 3C 10                                                 	cmp	al,10h
0000C996: 74 48                                                 	je	inc_reg
0000C998: 3C 5B                                                 	cmp	al,'['
0000C99A: 74 06                                                 	je	inc_mem
0000C99C: 0F 85 9C 3F FF FF                                     	jne	invalid_operand
                                                                      inc_mem:
0000C9A2: E8 E9 43 00 00                                        	call	get_address
0000C9A7: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000C9AC: 3C 01                                                 	cmp	al,1
0000C9AE: 74 1E                                                 	je	inc_mem_8bit
0000C9B0: 72 17                                                 	jb	inc_mem_nosize
0000C9B2: E8 06 45 00 00                                        	call	operand_autodetect
0000C9B7: B0 FF                                                 	mov	al,0FFh
0000C9B9: 86 05 AF A2 01 00                                     	xchg	al,[base_code]
0000C9BF: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000C9C4: E9 5B EB FF FF                                        	jmp	instruction_ready
                                                                      inc_mem_nosize:
0000C9C9: E8 A0 EE FF FF                                        	call	recoverable_unknown_size
                                                                      inc_mem_8bit:
0000C9CE: B0 FE                                                 	mov	al,0FEh
0000C9D0: 86 05 AF A2 01 00                                     	xchg	al,[base_code]
0000C9D6: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000C9DB: E9 44 EB FF FF                                        	jmp	instruction_ready
                                                                      inc_reg:
0000C9E0: AC                                                    	lods	byte [esi]
0000C9E1: E8 A7 42 00 00                                        	call	convert_register
0000C9E6: 88 C3                                                 	mov	bl,al
0000C9E8: B0 FE                                                 	mov	al,0FEh
0000C9EA: 86 05 AF A2 01 00                                     	xchg	al,[base_code]
0000C9F0: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000C9F5: 88 E0                                                 	mov	al,ah
0000C9F7: 3C 01                                                 	cmp	al,1
0000C9F9: 74 2F                                                 	je	inc_reg_8bit
0000C9FB: E8 BD 44 00 00                                        	call	operand_autodetect
0000CA00: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000CA07: 74 1B                                                 	je	inc_reg_long_form
0000CA09: A0 B2 A2 01 00                                        	mov	al,[postbyte_register]
0000CA0E: C0 E0 03                                              	shl	al,3
0000CA11: 00 D8                                                 	add	al,bl
0000CA13: 04 40                                                 	add	al,40h
0000CA15: A2 AF A2 01 00                                        	mov	[base_code],al
0000CA1A: E8 1E 45 00 00                                        	call	store_classic_instruction_code
0000CA1F: E9 56 85 FF FF                                        	jmp	instruction_assembled
                                                                      inc_reg_long_form:
0000CA24: FE 05 AF A2 01 00                                     	inc	[base_code]
                                                                      inc_reg_8bit:
0000CA2A: E9 D0 EC FF FF                                        	jmp	nomem_instruction_ready
                                                                set_instruction:
0000CA2F: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000CA36: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000CA3B: AC                                                    	lods	byte [esi]
0000CA3C: E8 F3 42 00 00                                        	call	get_size_operator
0000CA41: 3C 10                                                 	cmp	al,10h
0000CA43: 74 26                                                 	je	set_reg
0000CA45: 3C 5B                                                 	cmp	al,'['
0000CA47: 0F 85 F1 3E FF FF                                     	jne	invalid_operand
                                                                      set_mem:
0000CA4D: E8 3E 43 00 00                                        	call	get_address
0000CA52: 80 3D A4 A2 01 00 01                                  	cmp	[operand_size],1
0000CA59: 0F 87 E9 3E FF FF                                     	ja	invalid_operand_size
0000CA5F: C6 05 B2 A2 01 00 00                                  	mov	[postbyte_register],0
0000CA66: E9 B9 EA FF FF                                        	jmp	instruction_ready
                                                                      set_reg:
0000CA6B: AC                                                    	lods	byte [esi]
0000CA6C: E8 1C 42 00 00                                        	call	convert_register
0000CA71: 80 FC 01                                              	cmp	ah,1
0000CA74: 0F 85 CE 3E FF FF                                     	jne	invalid_operand_size
0000CA7A: 88 C3                                                 	mov	bl,al
0000CA7C: C6 05 B2 A2 01 00 00                                  	mov	[postbyte_register],0
0000CA83: E9 77 EC FF FF                                        	jmp	nomem_instruction_ready
                                                                arpl_instruction:
0000CA88: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000CA8F: 0F 84 9F 3E FF FF                                     	je	illegal_instruction
0000CA95: C6 05 AF A2 01 00 63                                  	mov	[base_code],63h
0000CA9C: AC                                                    	lods	byte [esi]
0000CA9D: E8 92 42 00 00                                        	call	get_size_operator
0000CAA2: 3C 10                                                 	cmp	al,10h
0000CAA4: 74 2E                                                 	je	arpl_reg
0000CAA6: 3C 5B                                                 	cmp	al,'['
0000CAA8: 0F 85 90 3E FF FF                                     	jne	invalid_operand
0000CAAE: E8 DD 42 00 00                                        	call	get_address
0000CAB3: AC                                                    	lods	byte [esi]
0000CAB4: 3C 2C                                                 	cmp	al,','
0000CAB6: 0F 85 82 3E FF FF                                     	jne	invalid_operand
0000CABC: E8 BD 41 00 00                                        	call	take_register
0000CAC1: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000CAC6: 80 FC 02                                              	cmp	ah,2
0000CAC9: 0F 85 79 3E FF FF                                     	jne	invalid_operand_size
0000CACF: E9 50 EA FF FF                                        	jmp	instruction_ready
                                                                      arpl_reg:
0000CAD4: AC                                                    	lods	byte [esi]
0000CAD5: E8 B3 41 00 00                                        	call	convert_register
0000CADA: 80 FC 02                                              	cmp	ah,2
0000CADD: 0F 85 65 3E FF FF                                     	jne	invalid_operand_size
0000CAE3: 88 C3                                                 	mov	bl,al
0000CAE5: AC                                                    	lods	byte [esi]
0000CAE6: 3C 2C                                                 	cmp	al,','
0000CAE8: 0F 85 50 3E FF FF                                     	jne	invalid_operand
0000CAEE: E8 8B 41 00 00                                        	call	take_register
0000CAF3: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000CAF8: E9 02 EC FF FF                                        	jmp	nomem_instruction_ready
                                                                bound_instruction:
0000CAFD: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000CB04: 0F 84 2A 3E FF FF                                     	je	illegal_instruction
0000CB0A: E8 6F 41 00 00                                        	call	take_register
0000CB0F: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000CB14: AC                                                    	lods	byte [esi]
0000CB15: 3C 2C                                                 	cmp	al,','
0000CB17: 0F 85 21 3E FF FF                                     	jne	invalid_operand
0000CB1D: AC                                                    	lods	byte [esi]
0000CB1E: E8 11 42 00 00                                        	call	get_size_operator
0000CB23: 3C 5B                                                 	cmp	al,'['
0000CB25: 0F 85 13 3E FF FF                                     	jne	invalid_operand
0000CB2B: E8 60 42 00 00                                        	call	get_address
0000CB30: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000CB35: 3C 02                                                 	cmp	al,2
0000CB37: 74 08                                                 	je	bound_store
0000CB39: 3C 04                                                 	cmp	al,4
0000CB3B: 0F 85 07 3E FF FF                                     	jne	invalid_operand_size
                                                                      bound_store:
0000CB41: E8 77 43 00 00                                        	call	operand_autodetect
0000CB46: C6 05 AF A2 01 00 62                                  	mov	[base_code],62h
0000CB4D: E9 D2 E9 FF FF                                        	jmp	instruction_ready
                                                                enter_instruction:
0000CB52: AC                                                    	lods	byte [esi]
0000CB53: E8 DC 41 00 00                                        	call	get_size_operator
0000CB58: 80 FC 02                                              	cmp	ah,2
0000CB5B: 74 08                                                 	je	enter_imm16_size_ok
0000CB5D: 08 E4                                                 	or	ah,ah
0000CB5F: 0F 85 E3 3D FF FF                                     	jnz	invalid_operand_size
                                                                      enter_imm16_size_ok:
0000CB65: 3C 28                                                 	cmp	al,'('
0000CB67: 0F 85 D1 3D FF FF                                     	jne	invalid_operand
0000CB6D: E8 D0 A7 FF FF                                        	call	get_word_value
0000CB72: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
0000CB79: 75 15                                                 	jne	enter_imm16_ok
0000CB7B: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000CB82: 0F 85 D2 3E FF FF                                     	jne	invalid_use_of_symbol
0000CB88: 85 C0                                                 	test	eax,eax
0000CB8A: 0F 88 26 3E FF FF                                     	js	value_out_of_range
                                                                      enter_imm16_ok:
0000CB90: 50                                                    	push	eax
0000CB91: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000CB98: AC                                                    	lods	byte [esi]
0000CB99: 3C 2C                                                 	cmp	al,','
0000CB9B: 0F 85 9D 3D FF FF                                     	jne	invalid_operand
0000CBA1: AC                                                    	lods	byte [esi]
0000CBA2: E8 8D 41 00 00                                        	call	get_size_operator
0000CBA7: 80 FC 01                                              	cmp	ah,1
0000CBAA: 74 08                                                 	je	enter_imm8_size_ok
0000CBAC: 08 E4                                                 	or	ah,ah
0000CBAE: 0F 85 94 3D FF FF                                     	jnz	invalid_operand_size
                                                                      enter_imm8_size_ok:
0000CBB4: 3C 28                                                 	cmp	al,'('
0000CBB6: 0F 85 82 3D FF FF                                     	jne	invalid_operand
0000CBBC: E8 F6 A6 FF FF                                        	call	get_byte_value
0000CBC1: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
0000CBC8: 75 08                                                 	jne	enter_imm8_ok
0000CBCA: 85 C0                                                 	test	eax,eax
0000CBCC: 0F 88 E4 3D FF FF                                     	js	value_out_of_range
                                                                      enter_imm8_ok:
0000CBD2: 88 C2                                                 	mov	dl,al
0000CBD4: 5B                                                    	pop	ebx
0000CBD5: B0 C8                                                 	mov	al,0C8h
0000CBD7: AA                                                    	stos	byte [edi]
0000CBD8: 66 89 D8                                              	mov	ax,bx
0000CBDB: 66 AB                                                 	stos	word [edi]
0000CBDD: 88 D0                                                 	mov	al,dl
0000CBDF: AA                                                    	stos	byte [edi]
0000CBE0: E9 95 83 FF FF                                        	jmp	instruction_assembled
                                                                ret_instruction_only64:
0000CBE5: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000CBEC: 0F 85 42 3D FF FF                                     	jne	illegal_instruction
0000CBF2: EB 20                                                 	jmp	ret_instruction
                                                                ret_instruction_32bit_except64:
0000CBF4: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000CBFB: 0F 84 33 3D FF FF                                     	je	illegal_instruction
                                                                ret_instruction_32bit:
0000CC01: E8 91 42 00 00                                        	call	operand_32bit
0000CC06: EB 0C                                                 	jmp	ret_instruction
                                                                ret_instruction_16bit:
0000CC08: E8 79 42 00 00                                        	call	operand_16bit
0000CC0D: EB 05                                                 	jmp	ret_instruction
                                                                ret_instruction_64bit:
0000CC0F: E8 94 42 00 00                                        	call	operand_64bit
                                                                ret_instruction:
0000CC14: 80 25 CF A2 01 00 EF                                  	and	[prefix_flags],not 10h
                                                                      ret_common:
0000CC1B: A2 AF A2 01 00                                        	mov	[base_code],al
0000CC20: AC                                                    	lods	byte [esi]
0000CC21: 4E                                                    	dec	esi
0000CC22: 08 C0                                                 	or	al,al
0000CC24: 74 63                                                 	jz	simple_ret
0000CC26: 3C 0F                                                 	cmp	al,0Fh
0000CC28: 74 5F                                                 	je	simple_ret
0000CC2A: AC                                                    	lods	byte [esi]
0000CC2B: E8 04 41 00 00                                        	call	get_size_operator
0000CC30: 08 E4                                                 	or	ah,ah
0000CC32: 74 0A                                                 	jz	ret_imm
0000CC34: 80 FC 02                                              	cmp	ah,2
0000CC37: 74 05                                                 	je	ret_imm
0000CC39: E9 0A 3D FF FF                                        	jmp	invalid_operand_size
                                                                      ret_imm:
0000CC3E: 3C 28                                                 	cmp	al,'('
0000CC40: 0F 85 F8 3C FF FF                                     	jne	invalid_operand
0000CC46: E8 F7 A6 FF FF                                        	call	get_word_value
0000CC4B: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
0000CC52: 75 15                                                 	jne	ret_imm_ok
0000CC54: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000CC5B: 0F 85 F9 3D FF FF                                     	jne	invalid_use_of_symbol
0000CC61: 85 C0                                                 	test	eax,eax
0000CC63: 0F 88 4D 3D FF FF                                     	js	value_out_of_range
                                                                      ret_imm_ok:
0000CC69: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000CC70: 75 05                                                 	jne	ret_imm_store
0000CC72: 66 09 C0                                              	or	ax,ax
0000CC75: 74 12                                                 	jz	simple_ret
                                                                      ret_imm_store:
0000CC77: 66 89 C2                                              	mov	dx,ax
0000CC7A: E8 BE 42 00 00                                        	call	store_classic_instruction_code
0000CC7F: 66 89 D0                                              	mov	ax,dx
0000CC82: 66 AB                                                 	stos	word [edi]
0000CC84: E9 F1 82 FF FF                                        	jmp	instruction_assembled
                                                                      simple_ret:
0000CC89: FE 05 AF A2 01 00                                     	inc	[base_code]
0000CC8F: E8 A9 42 00 00                                        	call	store_classic_instruction_code
0000CC94: E9 E1 82 FF FF                                        	jmp	instruction_assembled
                                                                retf_instruction:
0000CC99: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000CCA0: 0F 85 75 FF FF FF                                     	jne	ret_common
                                                                retf_instruction_64bit:
0000CCA6: E8 FD 41 00 00                                        	call	operand_64bit
0000CCAB: E9 6B FF FF FF                                        	jmp	ret_common
                                                                retf_instruction_32bit:
0000CCB0: E8 E2 41 00 00                                        	call	operand_32bit
0000CCB5: E9 61 FF FF FF                                        	jmp	ret_common
                                                                retf_instruction_16bit:
0000CCBA: E8 C7 41 00 00                                        	call	operand_16bit
0000CCBF: E9 57 FF FF FF                                        	jmp	ret_common
                                                                lea_instruction:
0000CCC4: C6 05 AF A2 01 00 8D                                  	mov	[base_code],8Dh
0000CCCB: E8 AE 3F 00 00                                        	call	take_register
0000CCD0: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000CCD5: AC                                                    	lods	byte [esi]
0000CCD6: 3C 2C                                                 	cmp	al,','
0000CCD8: 0F 85 60 3C FF FF                                     	jne	invalid_operand
0000CCDE: 30 C0                                                 	xor	al,al
0000CCE0: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
0000CCE6: 50                                                    	push	eax
0000CCE7: AC                                                    	lods	byte [esi]
0000CCE8: E8 47 40 00 00                                        	call	get_size_operator
0000CCED: 3C 5B                                                 	cmp	al,'['
0000CCEF: 0F 85 49 3C FF FF                                     	jne	invalid_operand
0000CCF5: 80 0D A5 A2 01 00 01                                  	or	[operand_flags],1
0000CCFC: E8 8F 40 00 00                                        	call	get_address
0000CD01: 58                                                    	pop	eax
0000CD02: A2 A4 A2 01 00                                        	mov	[operand_size],al
0000CD07: E8 B1 41 00 00                                        	call	operand_autodetect
0000CD0C: E9 13 E8 FF FF                                        	jmp	instruction_ready
                                                                ls_instruction:
0000CD11: 08 C0                                                 	or	al,al
0000CD13: 74 14                                                 	jz	les_instruction
0000CD15: 3C 03                                                 	cmp	al,3
0000CD17: 74 19                                                 	jz	lds_instruction
0000CD19: 04 B0                                                 	add	al,0B0h
0000CD1B: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000CD20: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000CD27: EB 1D                                                 	jmp	ls_code_ok
                                                                      les_instruction:
0000CD29: C6 05 AF A2 01 00 C4                                  	mov	[base_code],0C4h
0000CD30: EB 07                                                 	jmp	ls_short_code
                                                                      lds_instruction:
0000CD32: C6 05 AF A2 01 00 C5                                  	mov	[base_code],0C5h
                                                                      ls_short_code:
0000CD39: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000CD40: 0F 84 EE 3B FF FF                                     	je	illegal_instruction
                                                                      ls_code_ok:
0000CD46: E8 33 3F 00 00                                        	call	take_register
0000CD4B: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000CD50: AC                                                    	lods	byte [esi]
0000CD51: 3C 2C                                                 	cmp	al,','
0000CD53: 0F 85 E5 3B FF FF                                     	jne	invalid_operand
0000CD59: 80 05 A4 A2 01 00 02                                  	add	[operand_size],2
0000CD60: AC                                                    	lods	byte [esi]
0000CD61: E8 CE 3F 00 00                                        	call	get_size_operator
0000CD66: 3C 5B                                                 	cmp	al,'['
0000CD68: 0F 85 D0 3B FF FF                                     	jne	invalid_operand
0000CD6E: E8 1D 40 00 00                                        	call	get_address
0000CD73: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000CD78: 3C 04                                                 	cmp	al,4
0000CD7A: 74 0D                                                 	je	ls_16bit
0000CD7C: 3C 06                                                 	cmp	al,6
0000CD7E: 74 13                                                 	je	ls_32bit
0000CD80: 3C 0A                                                 	cmp	al,10
0000CD82: 74 19                                                 	je	ls_64bit
0000CD84: E9 BF 3B FF FF                                        	jmp	invalid_operand_size
                                                                      ls_16bit:
0000CD89: E8 F8 40 00 00                                        	call	operand_16bit
0000CD8E: E9 91 E7 FF FF                                        	jmp	instruction_ready
                                                                      ls_32bit:
0000CD93: E8 FF 40 00 00                                        	call	operand_32bit
0000CD98: E9 87 E7 FF FF                                        	jmp	instruction_ready
                                                                      ls_64bit:
0000CD9D: E8 06 41 00 00                                        	call	operand_64bit
0000CDA2: E9 7D E7 FF FF                                        	jmp	instruction_ready
                                                                sh_instruction:
0000CDA7: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000CDAC: AC                                                    	lods	byte [esi]
0000CDAD: E8 82 3F 00 00                                        	call	get_size_operator
0000CDB2: 3C 10                                                 	cmp	al,10h
0000CDB4: 0F 84 E8 00 00 00                                     	je	sh_reg
0000CDBA: 3C 5B                                                 	cmp	al,'['
0000CDBC: 0F 85 7C 3B FF FF                                     	jne	invalid_operand
                                                                      sh_mem:
0000CDC2: E8 C9 3F 00 00                                        	call	get_address
0000CDC7: 52 53 51                                              	push	edx ebx ecx
0000CDCA: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000CDCF: 50                                                    	push	eax
0000CDD0: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000CDD7: AC                                                    	lods	byte [esi]
0000CDD8: 3C 2C                                                 	cmp	al,','
0000CDDA: 0F 85 5E 3B FF FF                                     	jne	invalid_operand
0000CDE0: AC                                                    	lods	byte [esi]
0000CDE1: E8 4E 3F 00 00                                        	call	get_size_operator
0000CDE6: 3C 28                                                 	cmp	al,'('
0000CDE8: 74 3D                                                 	je	sh_mem_imm
0000CDEA: 3C 10                                                 	cmp	al,10h
0000CDEC: 0F 85 4C 3B FF FF                                     	jne	invalid_operand
                                                                      sh_mem_reg:
0000CDF2: AC                                                    	lods	byte [esi]
0000CDF3: 3C 11                                                 	cmp	al,11h
0000CDF5: 0F 85 43 3B FF FF                                     	jne	invalid_operand
0000CDFB: 58 59 5B 5A                                           	pop	eax ecx ebx edx
0000CDFF: 3C 01                                                 	cmp	al,1
0000CE01: 74 18                                                 	je	sh_mem_cl_8bit
0000CE03: 72 11                                                 	jb	sh_mem_cl_nosize
0000CE05: E8 B3 40 00 00                                        	call	operand_autodetect
0000CE0A: C6 05 AF A2 01 00 D3                                  	mov	[base_code],0D3h
0000CE11: E9 0E E7 FF FF                                        	jmp	instruction_ready
                                                                      sh_mem_cl_nosize:
0000CE16: E8 53 EA FF FF                                        	call	recoverable_unknown_size
                                                                      sh_mem_cl_8bit:
0000CE1B: C6 05 AF A2 01 00 D2                                  	mov	[base_code],0D2h
0000CE22: E9 FD E6 FF FF                                        	jmp	instruction_ready
                                                                      sh_mem_imm:
0000CE27: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000CE2C: 08 C0                                                 	or	al,al
0000CE2E: 74 08                                                 	jz	sh_mem_imm_size_ok
0000CE30: 3C 01                                                 	cmp	al,1
0000CE32: 0F 85 10 3B FF FF                                     	jne	invalid_operand_size
                                                                      sh_mem_imm_size_ok:
0000CE38: E8 7A A4 FF FF                                        	call	get_byte_value
0000CE3D: A2 00 A2 01 00                                        	mov	byte [value],al
0000CE42: 58 59 5B 5A                                           	pop	eax ecx ebx edx
0000CE46: 3C 01                                                 	cmp	al,1
0000CE48: 74 32                                                 	je	sh_mem_imm_8bit
0000CE4A: 72 2B                                                 	jb	sh_mem_imm_nosize
0000CE4C: E8 6C 40 00 00                                        	call	operand_autodetect
0000CE51: 80 3D 00 A2 01 00 01                                  	cmp	byte [value],1
0000CE58: 74 11                                                 	je	sh_mem_1
0000CE5A: C6 05 AF A2 01 00 C1                                  	mov	[base_code],0C1h
0000CE61: E8 0D 47 00 00                                        	call	store_instruction_with_imm8
0000CE66: E9 0F 81 FF FF                                        	jmp	instruction_assembled
                                                                      sh_mem_1:
0000CE6B: C6 05 AF A2 01 00 D1                                  	mov	[base_code],0D1h
0000CE72: E9 AD E6 FF FF                                        	jmp	instruction_ready
                                                                      sh_mem_imm_nosize:
0000CE77: E8 F2 E9 FF FF                                        	call	recoverable_unknown_size
                                                                      sh_mem_imm_8bit:
0000CE7C: 80 3D 00 A2 01 00 01                                  	cmp	byte [value],1
0000CE83: 74 11                                                 	je	sh_mem_1_8bit
0000CE85: C6 05 AF A2 01 00 C0                                  	mov	[base_code],0C0h
0000CE8C: E8 E2 46 00 00                                        	call	store_instruction_with_imm8
0000CE91: E9 E4 80 FF FF                                        	jmp	instruction_assembled
                                                                      sh_mem_1_8bit:
0000CE96: C6 05 AF A2 01 00 D0                                  	mov	[base_code],0D0h
0000CE9D: E9 82 E6 FF FF                                        	jmp	instruction_ready
                                                                      sh_reg:
0000CEA2: AC                                                    	lods	byte [esi]
0000CEA3: E8 E5 3D 00 00                                        	call	convert_register
0000CEA8: 66 89 C3                                              	mov	bx,ax
0000CEAB: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000CEB2: AC                                                    	lods	byte [esi]
0000CEB3: 3C 2C                                                 	cmp	al,','
0000CEB5: 0F 85 83 3A FF FF                                     	jne	invalid_operand
0000CEBB: AC                                                    	lods	byte [esi]
0000CEBC: E8 73 3E 00 00                                        	call	get_size_operator
0000CEC1: 3C 28                                                 	cmp	al,'('
0000CEC3: 74 34                                                 	je	sh_reg_imm
0000CEC5: 3C 10                                                 	cmp	al,10h
0000CEC7: 0F 85 71 3A FF FF                                     	jne	invalid_operand
                                                                      sh_reg_reg:
0000CECD: AC                                                    	lods	byte [esi]
0000CECE: 3C 11                                                 	cmp	al,11h
0000CED0: 0F 85 68 3A FF FF                                     	jne	invalid_operand
0000CED6: 88 F8                                                 	mov	al,bh
0000CED8: 3C 01                                                 	cmp	al,1
0000CEDA: 74 11                                                 	je	sh_reg_cl_8bit
0000CEDC: E8 DC 3F 00 00                                        	call	operand_autodetect
0000CEE1: C6 05 AF A2 01 00 D3                                  	mov	[base_code],0D3h
0000CEE8: E9 12 E8 FF FF                                        	jmp	nomem_instruction_ready
                                                                      sh_reg_cl_8bit:
0000CEED: C6 05 AF A2 01 00 D2                                  	mov	[base_code],0D2h
0000CEF4: E9 06 E8 FF FF                                        	jmp	nomem_instruction_ready
                                                                      sh_reg_imm:
0000CEF9: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000CEFE: 08 C0                                                 	or	al,al
0000CF00: 74 08                                                 	jz	sh_reg_imm_size_ok
0000CF02: 3C 01                                                 	cmp	al,1
0000CF04: 0F 85 3E 3A FF FF                                     	jne	invalid_operand_size
                                                                      sh_reg_imm_size_ok:
0000CF0A: 53                                                    	push	ebx
0000CF0B: E8 A7 A3 FF FF                                        	call	get_byte_value
0000CF10: 88 C2                                                 	mov	dl,al
0000CF12: 5B                                                    	pop	ebx
0000CF13: 88 F8                                                 	mov	al,bh
0000CF15: 3C 01                                                 	cmp	al,1
0000CF17: 74 2A                                                 	je	sh_reg_imm_8bit
0000CF19: E8 9F 3F 00 00                                        	call	operand_autodetect
0000CF1E: 80 FA 01                                              	cmp	dl,1
0000CF21: 74 14                                                 	je	sh_reg_1
0000CF23: C6 05 AF A2 01 00 C1                                  	mov	[base_code],0C1h
0000CF2A: E8 61 40 00 00                                        	call	store_nomem_instruction
0000CF2F: 88 D0                                                 	mov	al,dl
0000CF31: AA                                                    	stos	byte [edi]
0000CF32: E9 43 80 FF FF                                        	jmp	instruction_assembled
                                                                      sh_reg_1:
0000CF37: C6 05 AF A2 01 00 D1                                  	mov	[base_code],0D1h
0000CF3E: E9 BC E7 FF FF                                        	jmp	nomem_instruction_ready
                                                                      sh_reg_imm_8bit:
0000CF43: 80 FA 01                                              	cmp	dl,1
0000CF46: 74 14                                                 	je	sh_reg_1_8bit
0000CF48: C6 05 AF A2 01 00 C0                                  	mov	[base_code],0C0h
0000CF4F: E8 3C 40 00 00                                        	call	store_nomem_instruction
0000CF54: 88 D0                                                 	mov	al,dl
0000CF56: AA                                                    	stos	byte [edi]
0000CF57: E9 1E 80 FF FF                                        	jmp	instruction_assembled
                                                                      sh_reg_1_8bit:
0000CF5C: C6 05 AF A2 01 00 D0                                  	mov	[base_code],0D0h
0000CF63: E9 97 E7 FF FF                                        	jmp	nomem_instruction_ready
                                                                shd_instruction:
0000CF68: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000CF6F: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000CF74: AC                                                    	lods	byte [esi]
0000CF75: E8 BA 3D 00 00                                        	call	get_size_operator
0000CF7A: 3C 10                                                 	cmp	al,10h
0000CF7C: 0F 84 93 00 00 00                                     	je	shd_reg
0000CF82: 3C 5B                                                 	cmp	al,'['
0000CF84: 0F 85 B4 39 FF FF                                     	jne	invalid_operand
                                                                      shd_mem:
0000CF8A: E8 01 3E 00 00                                        	call	get_address
0000CF8F: 52 53 51                                              	push	edx ebx ecx
0000CF92: AC                                                    	lods	byte [esi]
0000CF93: 3C 2C                                                 	cmp	al,','
0000CF95: 0F 85 A3 39 FF FF                                     	jne	invalid_operand
0000CF9B: E8 DE 3C 00 00                                        	call	take_register
0000CFA0: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000CFA5: AC                                                    	lods	byte [esi]
0000CFA6: 3C 2C                                                 	cmp	al,','
0000CFA8: 0F 85 90 39 FF FF                                     	jne	invalid_operand
0000CFAE: 88 E0                                                 	mov	al,ah
0000CFB0: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000CFB7: 50                                                    	push	eax
0000CFB8: AC                                                    	lods	byte [esi]
0000CFB9: E8 76 3D 00 00                                        	call	get_size_operator
0000CFBE: 3C 28                                                 	cmp	al,'('
0000CFC0: 74 25                                                 	je	shd_mem_reg_imm
0000CFC2: 3C 10                                                 	cmp	al,10h
0000CFC4: 0F 85 74 39 FF FF                                     	jne	invalid_operand
0000CFCA: AC                                                    	lods	byte [esi]
0000CFCB: 3C 11                                                 	cmp	al,11h
0000CFCD: 0F 85 6B 39 FF FF                                     	jne	invalid_operand
0000CFD3: 58 59 5B 5A                                           	pop	eax ecx ebx edx
0000CFD7: E8 E1 3E 00 00                                        	call	operand_autodetect
0000CFDC: FE 05 B0 A2 01 00                                     	inc	[extended_code]
0000CFE2: E9 3D E5 FF FF                                        	jmp	instruction_ready
                                                                      shd_mem_reg_imm:
0000CFE7: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000CFEC: 08 C0                                                 	or	al,al
0000CFEE: 74 08                                                 	jz	shd_mem_reg_imm_size_ok
0000CFF0: 3C 01                                                 	cmp	al,1
0000CFF2: 0F 85 50 39 FF FF                                     	jne	invalid_operand_size
                                                                      shd_mem_reg_imm_size_ok:
0000CFF8: E8 BA A2 FF FF                                        	call	get_byte_value
0000CFFD: A2 00 A2 01 00                                        	mov	byte [value],al
0000D002: 58 59 5B 5A                                           	pop	eax ecx ebx edx
0000D006: E8 B2 3E 00 00                                        	call	operand_autodetect
0000D00B: E8 63 45 00 00                                        	call	store_instruction_with_imm8
0000D010: E9 65 7F FF FF                                        	jmp	instruction_assembled
                                                                      shd_reg:
0000D015: AC                                                    	lods	byte [esi]
0000D016: E8 72 3C 00 00                                        	call	convert_register
0000D01B: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000D020: AC                                                    	lods	byte [esi]
0000D021: 3C 2C                                                 	cmp	al,','
0000D023: 0F 85 15 39 FF FF                                     	jne	invalid_operand
0000D029: E8 50 3C 00 00                                        	call	take_register
0000D02E: 8A 1D B2 A2 01 00                                     	mov	bl,[postbyte_register]
0000D034: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000D039: 88 E0                                                 	mov	al,ah
0000D03B: 50 53                                                 	push	eax ebx
0000D03D: AC                                                    	lods	byte [esi]
0000D03E: 3C 2C                                                 	cmp	al,','
0000D040: 0F 85 F8 38 FF FF                                     	jne	invalid_operand
0000D046: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000D04D: AC                                                    	lods	byte [esi]
0000D04E: E8 E1 3C 00 00                                        	call	get_size_operator
0000D053: 3C 28                                                 	cmp	al,'('
0000D055: 74 23                                                 	je	shd_reg_reg_imm
0000D057: 3C 10                                                 	cmp	al,10h
0000D059: 0F 85 DF 38 FF FF                                     	jne	invalid_operand
0000D05F: AC                                                    	lods	byte [esi]
0000D060: 3C 11                                                 	cmp	al,11h
0000D062: 0F 85 D6 38 FF FF                                     	jne	invalid_operand
0000D068: 5B 58                                                 	pop	ebx eax
0000D06A: E8 4E 3E 00 00                                        	call	operand_autodetect
0000D06F: FE 05 B0 A2 01 00                                     	inc	[extended_code]
0000D075: E9 85 E6 FF FF                                        	jmp	nomem_instruction_ready
                                                                      shd_reg_reg_imm:
0000D07A: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000D07F: 08 C0                                                 	or	al,al
0000D081: 74 08                                                 	jz	shd_reg_reg_imm_size_ok
0000D083: 3C 01                                                 	cmp	al,1
0000D085: 0F 85 BD 38 FF FF                                     	jne	invalid_operand_size
                                                                      shd_reg_reg_imm_size_ok:
0000D08B: E8 27 A2 FF FF                                        	call	get_byte_value
0000D090: 88 C2                                                 	mov	dl,al
0000D092: 5B 58                                                 	pop	ebx eax
0000D094: E8 24 3E 00 00                                        	call	operand_autodetect
0000D099: E8 F2 3E 00 00                                        	call	store_nomem_instruction
0000D09E: 88 D0                                                 	mov	al,dl
0000D0A0: AA                                                    	stos	byte [edi]
0000D0A1: E9 D4 7E FF FF                                        	jmp	instruction_assembled
                                                                movx_instruction:
0000D0A6: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000D0AD: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000D0B2: E8 C7 3B 00 00                                        	call	take_register
0000D0B7: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000D0BC: 88 E0                                                 	mov	al,ah
0000D0BE: 50                                                    	push	eax
0000D0BF: AC                                                    	lods	byte [esi]
0000D0C0: 3C 2C                                                 	cmp	al,','
0000D0C2: 0F 85 76 38 FF FF                                     	jne	invalid_operand
0000D0C8: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000D0CF: AC                                                    	lods	byte [esi]
0000D0D0: E8 5F 3C 00 00                                        	call	get_size_operator
0000D0D5: 3C 10                                                 	cmp	al,10h
0000D0D7: 74 49                                                 	je	movx_reg
0000D0D9: 3C 5B                                                 	cmp	al,'['
0000D0DB: 0F 85 5D 38 FF FF                                     	jne	invalid_operand
0000D0E1: E8 AA 3C 00 00                                        	call	get_address
0000D0E6: 58                                                    	pop	eax
0000D0E7: 8A 25 A4 A2 01 00                                     	mov	ah,[operand_size]
0000D0ED: 08 E4                                                 	or	ah,ah
0000D0EF: 74 26                                                 	jz	movx_unknown_size
0000D0F1: 38 C4                                                 	cmp	ah,al
0000D0F3: 0F 83 4F 38 FF FF                                     	jae	invalid_operand_size
0000D0F9: 80 FC 01                                              	cmp	ah,1
0000D0FC: 74 0F                                                 	je	movx_mem_store
0000D0FE: 80 FC 02                                              	cmp	ah,2
0000D101: 0F 85 41 38 FF FF                                     	jne	invalid_operand_size
0000D107: FE 05 B0 A2 01 00                                     	inc	[extended_code]
                                                                      movx_mem_store:
0000D10D: E8 AB 3D 00 00                                        	call	operand_autodetect
0000D112: E9 0D E4 FF FF                                        	jmp	instruction_ready
                                                                      movx_unknown_size:
0000D117: 3C 02                                                 	cmp	al,2
0000D119: 74 F2                                                 	je	movx_mem_store
0000D11B: E8 4E E7 FF FF                                        	call	recoverable_unknown_size
0000D120: EB EB                                                 	jmp	movx_mem_store
                                                                      movx_reg:
0000D122: AC                                                    	lods	byte [esi]
0000D123: E8 65 3B 00 00                                        	call	convert_register
0000D128: 5B                                                    	pop	ebx
0000D129: 86 D8                                                 	xchg	bl,al
0000D12B: 38 C4                                                 	cmp	ah,al
0000D12D: 0F 83 15 38 FF FF                                     	jae	invalid_operand_size
0000D133: 80 FC 01                                              	cmp	ah,1
0000D136: 74 0A                                                 	je	movx_reg_8bit
0000D138: 80 FC 02                                              	cmp	ah,2
0000D13B: 74 0F                                                 	je	movx_reg_16bit
0000D13D: E9 06 38 FF FF                                        	jmp	invalid_operand_size
                                                                      movx_reg_8bit:
0000D142: E8 76 3D 00 00                                        	call	operand_autodetect
0000D147: E9 B3 E5 FF FF                                        	jmp	nomem_instruction_ready
                                                                      movx_reg_16bit:
0000D14C: E8 6C 3D 00 00                                        	call	operand_autodetect
0000D151: FE 05 B0 A2 01 00                                     	inc	[extended_code]
0000D157: E9 A3 E5 FF FF                                        	jmp	nomem_instruction_ready
                                                                movsxd_instruction:
0000D15C: A2 AF A2 01 00                                        	mov	[base_code],al
0000D161: E8 18 3B 00 00                                        	call	take_register
0000D166: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000D16B: 80 FC 08                                              	cmp	ah,8
0000D16E: 0F 85 D4 37 FF FF                                     	jne	invalid_operand_size
0000D174: AC                                                    	lods	byte [esi]
0000D175: 3C 2C                                                 	cmp	al,','
0000D177: 0F 85 C1 37 FF FF                                     	jne	invalid_operand
0000D17D: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000D184: AC                                                    	lods	byte [esi]
0000D185: E8 AA 3B 00 00                                        	call	get_size_operator
0000D18A: 3C 10                                                 	cmp	al,10h
0000D18C: 74 2D                                                 	je	movsxd_reg
0000D18E: 3C 5B                                                 	cmp	al,'['
0000D190: 0F 85 A8 37 FF FF                                     	jne	invalid_operand
0000D196: E8 F5 3B 00 00                                        	call	get_address
0000D19B: 80 3D A4 A2 01 00 04                                  	cmp	[operand_size],4
0000D1A2: 74 0D                                                 	je	movsxd_mem_store
0000D1A4: 80 3D A4 A2 01 00 00                                  	cmp	[operand_size],0
0000D1AB: 0F 85 97 37 FF FF                                     	jne	invalid_operand_size
                                                                      movsxd_mem_store:
0000D1B1: E8 F2 3C 00 00                                        	call	operand_64bit
0000D1B6: E9 69 E3 FF FF                                        	jmp	instruction_ready
                                                                      movsxd_reg:
0000D1BB: AC                                                    	lods	byte [esi]
0000D1BC: E8 CC 3A 00 00                                        	call	convert_register
0000D1C1: 80 FC 04                                              	cmp	ah,4
0000D1C4: 0F 85 7E 37 FF FF                                     	jne	invalid_operand_size
0000D1CA: 88 C3                                                 	mov	bl,al
0000D1CC: E8 D7 3C 00 00                                        	call	operand_64bit
0000D1D1: E9 29 E5 FF FF                                        	jmp	nomem_instruction_ready
                                                                bt_instruction:
0000D1D6: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000D1DB: C0 E0 03                                              	shl	al,3
0000D1DE: 04 83                                                 	add	al,83h
0000D1E0: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000D1E5: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000D1EC: AC                                                    	lods	byte [esi]
0000D1ED: E8 42 3B 00 00                                        	call	get_size_operator
0000D1F2: 3C 10                                                 	cmp	al,10h
0000D1F4: 0F 84 99 00 00 00                                     	je	bt_reg
0000D1FA: 3C 5B                                                 	cmp	al,'['
0000D1FC: 0F 85 3C 37 FF FF                                     	jne	invalid_operand
0000D202: E8 89 3B 00 00                                        	call	get_address
0000D207: 50 53 51                                              	push	eax ebx ecx
0000D20A: AC                                                    	lods	byte [esi]
0000D20B: 3C 2C                                                 	cmp	al,','
0000D20D: 0F 85 2B 37 FF FF                                     	jne	invalid_operand
0000D213: 80 3E 28                                              	cmp	byte [esi],'('
0000D216: 74 24                                                 	je	bt_mem_imm
0000D218: 80 3E 11                                              	cmp	byte [esi],11h
0000D21B: 75 06                                                 	jne	bt_mem_reg
0000D21D: 80 7E 02 28                                           	cmp	byte [esi+2],'('
0000D221: 74 19                                                 	je	bt_mem_imm
                                                                      bt_mem_reg:
0000D223: E8 56 3A 00 00                                        	call	take_register
0000D228: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000D22D: 59 5B 5A                                              	pop	ecx ebx edx
0000D230: 88 E0                                                 	mov	al,ah
0000D232: E8 86 3C 00 00                                        	call	operand_autodetect
0000D237: E9 E8 E2 FF FF                                        	jmp	instruction_ready
                                                                      bt_mem_imm:
0000D23C: 30 C0                                                 	xor	al,al
0000D23E: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
0000D244: 50                                                    	push	eax
0000D245: AC                                                    	lods	byte [esi]
0000D246: E8 E9 3A 00 00                                        	call	get_size_operator
0000D24B: 3C 28                                                 	cmp	al,'('
0000D24D: 0F 85 EB 36 FF FF                                     	jne	invalid_operand
0000D253: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000D258: 08 C0                                                 	or	al,al
0000D25A: 74 08                                                 	jz	bt_mem_imm_size_ok
0000D25C: 3C 01                                                 	cmp	al,1
0000D25E: 0F 85 E4 36 FF FF                                     	jne	invalid_operand_size
                                                                      bt_mem_imm_size_ok:
0000D264: E8 4E A0 FF FF                                        	call	get_byte_value
0000D269: A2 00 A2 01 00                                        	mov	byte [value],al
0000D26E: 58                                                    	pop	eax
0000D26F: 08 C0                                                 	or	al,al
0000D271: 74 19                                                 	jz	bt_mem_imm_nosize
0000D273: E8 45 3C 00 00                                        	call	operand_autodetect
                                                                      bt_mem_imm_store:
0000D278: 59 5B 5A                                              	pop	ecx ebx edx
0000D27B: C6 05 B0 A2 01 00 BA                                  	mov	[extended_code],0BAh
0000D282: E8 EC 42 00 00                                        	call	store_instruction_with_imm8
0000D287: E9 EE 7C FF FF                                        	jmp	instruction_assembled
                                                                      bt_mem_imm_nosize:
0000D28C: E8 DD E5 FF FF                                        	call	recoverable_unknown_size
0000D291: EB E5                                                 	jmp	bt_mem_imm_store
                                                                      bt_reg:
0000D293: AC                                                    	lods	byte [esi]
0000D294: E8 F4 39 00 00                                        	call	convert_register
0000D299: 88 C3                                                 	mov	bl,al
0000D29B: AC                                                    	lods	byte [esi]
0000D29C: 3C 2C                                                 	cmp	al,','
0000D29E: 0F 85 9A 36 FF FF                                     	jne	invalid_operand
0000D2A4: 80 3E 28                                              	cmp	byte [esi],'('
0000D2A7: 74 21                                                 	je	bt_reg_imm
0000D2A9: 80 3E 11                                              	cmp	byte [esi],11h
0000D2AC: 75 06                                                 	jne	bt_reg_reg
0000D2AE: 80 7E 02 28                                           	cmp	byte [esi+2],'('
0000D2B2: 74 16                                                 	je	bt_reg_imm
                                                                      bt_reg_reg:
0000D2B4: E8 C5 39 00 00                                        	call	take_register
0000D2B9: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000D2BE: 88 E0                                                 	mov	al,ah
0000D2C0: E8 F8 3B 00 00                                        	call	operand_autodetect
0000D2C5: E9 35 E4 FF FF                                        	jmp	nomem_instruction_ready
                                                                      bt_reg_imm:
0000D2CA: 30 C0                                                 	xor	al,al
0000D2CC: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
0000D2D2: 50 53                                                 	push	eax ebx
0000D2D4: AC                                                    	lods	byte [esi]
0000D2D5: E8 5A 3A 00 00                                        	call	get_size_operator
0000D2DA: 3C 28                                                 	cmp	al,'('
0000D2DC: 0F 85 5C 36 FF FF                                     	jne	invalid_operand
0000D2E2: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000D2E7: 08 C0                                                 	or	al,al
0000D2E9: 74 08                                                 	jz	bt_reg_imm_size_ok
0000D2EB: 3C 01                                                 	cmp	al,1
0000D2ED: 0F 85 55 36 FF FF                                     	jne	invalid_operand_size
                                                                      bt_reg_imm_size_ok:
0000D2F3: E8 BF 9F FF FF                                        	call	get_byte_value
0000D2F8: A2 00 A2 01 00                                        	mov	byte [value],al
0000D2FD: 5B 58                                                 	pop	ebx eax
0000D2FF: E8 B9 3B 00 00                                        	call	operand_autodetect
                                                                      bt_reg_imm_store:
0000D304: C6 05 B0 A2 01 00 BA                                  	mov	[extended_code],0BAh
0000D30B: E8 80 3C 00 00                                        	call	store_nomem_instruction
0000D310: A0 00 A2 01 00                                        	mov	al,byte [value]
0000D315: AA                                                    	stos	byte [edi]
0000D316: E9 5F 7C FF FF                                        	jmp	instruction_assembled
                                                                bs_instruction:
0000D31B: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000D320: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000D327: E8 1D 00 00 00                                        	call	get_reg_mem
0000D32C: 72 0F                                                 	jc	bs_reg_reg
0000D32E: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000D333: E8 85 3B 00 00                                        	call	operand_autodetect
0000D338: E9 E7 E1 FF FF                                        	jmp	instruction_ready
                                                                      bs_reg_reg:
0000D33D: 88 E0                                                 	mov	al,ah
0000D33F: E8 79 3B 00 00                                        	call	operand_autodetect
0000D344: E9 B6 E3 FF FF                                        	jmp	nomem_instruction_ready
                                                                      get_reg_mem:
0000D349: E8 30 39 00 00                                        	call	take_register
0000D34E: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000D353: AC                                                    	lods	byte [esi]
0000D354: 3C 2C                                                 	cmp	al,','
0000D356: 0F 85 E2 35 FF FF                                     	jne	invalid_operand
0000D35C: AC                                                    	lods	byte [esi]
0000D35D: E8 D2 39 00 00                                        	call	get_size_operator
0000D362: 3C 10                                                 	cmp	al,10h
0000D364: 74 0F                                                 	je	get_reg_reg
0000D366: 3C 5B                                                 	cmp	al,'['
0000D368: 0F 85 BC 35 FF FF                                     	jne	invalid_argument
0000D36E: E8 1D 3A 00 00                                        	call	get_address
0000D373: F8                                                    	clc
0000D374: C3                                                    	ret
                                                                      get_reg_reg:
0000D375: AC                                                    	lods	byte [esi]
0000D376: E8 12 39 00 00                                        	call	convert_register
0000D37B: 88 C3                                                 	mov	bl,al
0000D37D: F9                                                    	stc
0000D37E: C3                                                    	ret
                                                                ud_instruction:
0000D37F: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000D384: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000D38B: E8 B9 FF FF FF                                        	call	get_reg_mem
0000D390: 72 12                                                 	jc	ud_reg_reg
0000D392: 80 3D A4 A2 01 00 04                                  	cmp	[operand_size],4
0000D399: 0F 85 A9 35 FF FF                                     	jne	invalid_operand_size
0000D39F: E9 80 E1 FF FF                                        	jmp	instruction_ready
                                                                      ud_reg_reg:
0000D3A4: 80 FC 04                                              	cmp	ah,4
0000D3A7: 0F 85 9B 35 FF FF                                     	jne	invalid_operand_size
0000D3AD: E9 4D E3 FF FF                                        	jmp	nomem_instruction_ready
                                                                
                                                                imul_instruction:
0000D3B2: C6 05 AF A2 01 00 F6                                  	mov	[base_code],0F6h
0000D3B9: C6 05 B2 A2 01 00 05                                  	mov	[postbyte_register],5
0000D3C0: AC                                                    	lods	byte [esi]
0000D3C1: E8 6E 39 00 00                                        	call	get_size_operator
0000D3C6: 3C 10                                                 	cmp	al,10h
0000D3C8: 74 32                                                 	je	imul_reg
0000D3CA: 3C 5B                                                 	cmp	al,'['
0000D3CC: 0F 85 6C 35 FF FF                                     	jne	invalid_operand
                                                                      imul_mem:
0000D3D2: E8 B9 39 00 00                                        	call	get_address
0000D3D7: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000D3DC: 3C 01                                                 	cmp	al,1
0000D3DE: 74 17                                                 	je	imul_mem_8bit
0000D3E0: 72 10                                                 	jb	imul_mem_nosize
0000D3E2: E8 D6 3A 00 00                                        	call	operand_autodetect
0000D3E7: FE 05 AF A2 01 00                                     	inc	[base_code]
0000D3ED: E9 32 E1 FF FF                                        	jmp	instruction_ready
                                                                      imul_mem_nosize:
0000D3F2: E8 77 E4 FF FF                                        	call	recoverable_unknown_size
                                                                      imul_mem_8bit:
0000D3F7: E9 28 E1 FF FF                                        	jmp	instruction_ready
                                                                      imul_reg:
0000D3FC: AC                                                    	lods	byte [esi]
0000D3FD: E8 8B 38 00 00                                        	call	convert_register
0000D402: 80 3E 2C                                              	cmp	byte [esi],','
0000D405: 74 18                                                 	je	imul_reg_
0000D407: 88 C3                                                 	mov	bl,al
0000D409: 88 E0                                                 	mov	al,ah
0000D40B: 3C 01                                                 	cmp	al,1
0000D40D: 74 0B                                                 	je	imul_reg_8bit
0000D40F: E8 A9 3A 00 00                                        	call	operand_autodetect
0000D414: FE 05 AF A2 01 00                                     	inc	[base_code]
                                                                      imul_reg_8bit:
0000D41A: E9 E0 E2 FF FF                                        	jmp	nomem_instruction_ready
                                                                      imul_reg_:
0000D41F: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000D424: 46                                                    	inc	esi
0000D425: 80 3E 28                                              	cmp	byte [esi],'('
0000D428: 0F 84 33 01 00 00                                     	je	imul_reg_imm
0000D42E: 80 3E 11                                              	cmp	byte [esi],11h
0000D431: 75 0A                                                 	jne	imul_reg_noimm
0000D433: 80 7E 02 28                                           	cmp	byte [esi+2],'('
0000D437: 0F 84 24 01 00 00                                     	je	imul_reg_imm
                                                                      imul_reg_noimm:
0000D43D: AC                                                    	lods	byte [esi]
0000D43E: E8 F1 38 00 00                                        	call	get_size_operator
0000D443: 3C 10                                                 	cmp	al,10h
0000D445: 0F 84 1F 01 00 00                                     	je	imul_reg_reg
0000D44B: 3C 5B                                                 	cmp	al,'['
0000D44D: 0F 85 EB 34 FF FF                                     	jne	invalid_operand
                                                                      imul_reg_mem:
0000D453: E8 38 39 00 00                                        	call	get_address
0000D458: 52 53 51                                              	push	edx ebx ecx
0000D45B: 80 3E 2C                                              	cmp	byte [esi],','
0000D45E: 74 20                                                 	je	imul_reg_mem_imm
0000D460: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000D465: E8 53 3A 00 00                                        	call	operand_autodetect
0000D46A: 59 5B 5A                                              	pop	ecx ebx edx
0000D46D: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000D474: C6 05 B0 A2 01 00 AF                                  	mov	[extended_code],0AFh
0000D47B: E9 A4 E0 FF FF                                        	jmp	instruction_ready
                                                                      imul_reg_mem_imm:
0000D480: 46                                                    	inc	esi
0000D481: AC                                                    	lods	byte [esi]
0000D482: E8 AD 38 00 00                                        	call	get_size_operator
0000D487: 3C 28                                                 	cmp	al,'('
0000D489: 0F 85 AF 34 FF FF                                     	jne	invalid_operand
0000D48F: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000D494: 3C 02                                                 	cmp	al,2
0000D496: 74 32                                                 	je	imul_reg_mem_imm_16bit
0000D498: 3C 04                                                 	cmp	al,4
0000D49A: 74 70                                                 	je	imul_reg_mem_imm_32bit
0000D49C: 3C 08                                                 	cmp	al,8
0000D49E: 0F 85 A4 34 FF FF                                     	jne	invalid_operand_size
                                                                      imul_reg_mem_imm_64bit:
0000D4A4: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000D4AB: 0F 85 D3 34 FF FF                                     	jne	long_immediate_not_encodable
0000D4B1: E8 F2 39 00 00                                        	call	operand_64bit
0000D4B6: E8 AB E1 FF FF                                        	call	get_simm32
0000D4BB: 80 3D C0 A2 01 00 04                                  	cmp	[value_type],4
0000D4C2: 0F 83 BC 34 FF FF                                     	jae	long_immediate_not_encodable
0000D4C8: EB 4C                                                 	jmp	imul_reg_mem_imm_32bit_ok
                                                                      imul_reg_mem_imm_16bit:
0000D4CA: E8 B7 39 00 00                                        	call	operand_16bit
0000D4CF: E8 6E 9E FF FF                                        	call	get_word_value
0000D4D4: 66 A3 00 A2 01 00                                     	mov	word [value],ax
0000D4DA: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000D4E1: 75 15                                                 	jne	imul_reg_mem_imm_16bit_store
0000D4E3: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000D4EA: 75 0C                                                 	jne	imul_reg_mem_imm_16bit_store
0000D4EC: 66 83 F8 80                                           	cmp	ax,-80h
0000D4F0: 7C 06                                                 	jl	imul_reg_mem_imm_16bit_store
0000D4F2: 66 3D 80 00                                           	cmp	ax,80h
0000D4F6: 7C 55                                                 	jl	imul_reg_mem_imm_8bit_store
                                                                      imul_reg_mem_imm_16bit_store:
0000D4F8: 59 5B 5A                                              	pop	ecx ebx edx
0000D4FB: C6 05 AF A2 01 00 69                                  	mov	[base_code],69h
0000D502: E8 7F 40 00 00                                        	call	store_instruction_with_imm16
0000D507: E9 6E 7A FF FF                                        	jmp	instruction_assembled
                                                                      imul_reg_mem_imm_32bit:
0000D50C: E8 86 39 00 00                                        	call	operand_32bit
0000D511: E8 74 9E FF FF                                        	call	get_dword_value
                                                                      imul_reg_mem_imm_32bit_ok:
0000D516: A3 00 A2 01 00                                        	mov	dword [value],eax
0000D51B: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000D522: 75 15                                                 	jne	imul_reg_mem_imm_32bit_store
0000D524: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000D52B: 75 0C                                                 	jne	imul_reg_mem_imm_32bit_store
0000D52D: 83 F8 80                                              	cmp	eax,-80h
0000D530: 7C 07                                                 	jl	imul_reg_mem_imm_32bit_store
0000D532: 3D 80 00 00 00                                        	cmp	eax,80h
0000D537: 7C 14                                                 	jl	imul_reg_mem_imm_8bit_store
                                                                      imul_reg_mem_imm_32bit_store:
0000D539: 59 5B 5A                                              	pop	ecx ebx edx
0000D53C: C6 05 AF A2 01 00 69                                  	mov	[base_code],69h
0000D543: E8 58 40 00 00                                        	call	store_instruction_with_imm32
0000D548: E9 2D 7A FF FF                                        	jmp	instruction_assembled
                                                                      imul_reg_mem_imm_8bit_store:
0000D54D: 59 5B 5A                                              	pop	ecx ebx edx
0000D550: C6 05 AF A2 01 00 6B                                  	mov	[base_code],6Bh
0000D557: E8 17 40 00 00                                        	call	store_instruction_with_imm8
0000D55C: E9 19 7A FF FF                                        	jmp	instruction_assembled
                                                                      imul_reg_imm:
0000D561: 8A 1D B2 A2 01 00                                     	mov	bl,[postbyte_register]
0000D567: 4E                                                    	dec	esi
0000D568: EB 27                                                 	jmp	imul_reg_reg_imm
                                                                      imul_reg_reg:
0000D56A: AC                                                    	lods	byte [esi]
0000D56B: E8 1D 37 00 00                                        	call	convert_register
0000D570: 88 C3                                                 	mov	bl,al
0000D572: 80 3E 2C                                              	cmp	byte [esi],','
0000D575: 74 1A                                                 	je	imul_reg_reg_imm
0000D577: 88 E0                                                 	mov	al,ah
0000D579: E8 3F 39 00 00                                        	call	operand_autodetect
0000D57E: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000D585: C6 05 B0 A2 01 00 AF                                  	mov	[extended_code],0AFh
0000D58C: E9 6E E1 FF FF                                        	jmp	nomem_instruction_ready
                                                                      imul_reg_reg_imm:
0000D591: 46                                                    	inc	esi
0000D592: AC                                                    	lods	byte [esi]
0000D593: E8 9C 37 00 00                                        	call	get_size_operator
0000D598: 3C 28                                                 	cmp	al,'('
0000D59A: 0F 85 9E 33 FF FF                                     	jne	invalid_operand
0000D5A0: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000D5A5: 3C 02                                                 	cmp	al,2
0000D5A7: 74 33                                                 	je	imul_reg_reg_imm_16bit
0000D5A9: 3C 04                                                 	cmp	al,4
0000D5AB: 74 77                                                 	je	imul_reg_reg_imm_32bit
0000D5AD: 3C 08                                                 	cmp	al,8
0000D5AF: 0F 85 93 33 FF FF                                     	jne	invalid_operand_size
                                                                      imul_reg_reg_imm_64bit:
0000D5B5: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000D5BC: 0F 85 C2 33 FF FF                                     	jne	long_immediate_not_encodable
0000D5C2: E8 E1 38 00 00                                        	call	operand_64bit
0000D5C7: 53                                                    	push	ebx
0000D5C8: E8 99 E0 FF FF                                        	call	get_simm32
0000D5CD: 80 3D C0 A2 01 00 04                                  	cmp	[value_type],4
0000D5D4: 0F 83 AA 33 FF FF                                     	jae	long_immediate_not_encodable
0000D5DA: EB 53                                                 	jmp	imul_reg_reg_imm_32bit_ok
                                                                      imul_reg_reg_imm_16bit:
0000D5DC: E8 A5 38 00 00                                        	call	operand_16bit
0000D5E1: 53                                                    	push	ebx
0000D5E2: E8 5B 9D FF FF                                        	call	get_word_value
0000D5E7: 5B                                                    	pop	ebx
0000D5E8: 66 89 C2                                              	mov	dx,ax
0000D5EB: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000D5F2: 75 15                                                 	jne	imul_reg_reg_imm_16bit_store
0000D5F4: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000D5FB: 75 0C                                                 	jne	imul_reg_reg_imm_16bit_store
0000D5FD: 66 83 F8 80                                           	cmp	ax,-80h
0000D601: 7C 06                                                 	jl	imul_reg_reg_imm_16bit_store
0000D603: 66 3D 80 00                                           	cmp	ax,80h
0000D607: 7C 60                                                 	jl	imul_reg_reg_imm_8bit_store
                                                                      imul_reg_reg_imm_16bit_store:
0000D609: C6 05 AF A2 01 00 69                                  	mov	[base_code],69h
0000D610: E8 7B 39 00 00                                        	call	store_nomem_instruction
0000D615: 66 89 D0                                              	mov	ax,dx
0000D618: E8 CF AD FF FF                                        	call	mark_relocation
0000D61D: 66 AB                                                 	stos	word [edi]
0000D61F: E9 56 79 FF FF                                        	jmp	instruction_assembled
                                                                      imul_reg_reg_imm_32bit:
0000D624: E8 6E 38 00 00                                        	call	operand_32bit
0000D629: 53                                                    	push	ebx
0000D62A: E8 5B 9D FF FF                                        	call	get_dword_value
                                                                      imul_reg_reg_imm_32bit_ok:
0000D62F: 5B                                                    	pop	ebx
0000D630: 89 C2                                                 	mov	edx,eax
0000D632: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000D639: 75 15                                                 	jne	imul_reg_reg_imm_32bit_store
0000D63B: 80 3D BB A2 01 00 00                                  	cmp	[size_declared],0
0000D642: 75 0C                                                 	jne	imul_reg_reg_imm_32bit_store
0000D644: 83 F8 80                                              	cmp	eax,-80h
0000D647: 7C 07                                                 	jl	imul_reg_reg_imm_32bit_store
0000D649: 3D 80 00 00 00                                        	cmp	eax,80h
0000D64E: 7C 19                                                 	jl	imul_reg_reg_imm_8bit_store
                                                                      imul_reg_reg_imm_32bit_store:
0000D650: C6 05 AF A2 01 00 69                                  	mov	[base_code],69h
0000D657: E8 34 39 00 00                                        	call	store_nomem_instruction
0000D65C: 89 D0                                                 	mov	eax,edx
0000D65E: E8 89 AD FF FF                                        	call	mark_relocation
0000D663: AB                                                    	stos	dword [edi]
0000D664: E9 11 79 FF FF                                        	jmp	instruction_assembled
                                                                      imul_reg_reg_imm_8bit_store:
0000D669: C6 05 AF A2 01 00 6B                                  	mov	[base_code],6Bh
0000D670: E8 1B 39 00 00                                        	call	store_nomem_instruction
0000D675: 88 D0                                                 	mov	al,dl
0000D677: AA                                                    	stos	byte [edi]
0000D678: E9 FD 78 FF FF                                        	jmp	instruction_assembled
                                                                in_instruction:
0000D67D: E8 FC 35 00 00                                        	call	take_register
0000D682: 08 C0                                                 	or	al,al
0000D684: 0F 85 B4 32 FF FF                                     	jnz	invalid_operand
0000D68A: AC                                                    	lods	byte [esi]
0000D68B: 3C 2C                                                 	cmp	al,','
0000D68D: 0F 85 AB 32 FF FF                                     	jne	invalid_operand
0000D693: 88 E0                                                 	mov	al,ah
0000D695: 50                                                    	push	eax
0000D696: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000D69D: AC                                                    	lods	byte [esi]
0000D69E: E8 91 36 00 00                                        	call	get_size_operator
0000D6A3: 3C 28                                                 	cmp	al,'('
0000D6A5: 74 41                                                 	je	in_imm
0000D6A7: 3C 10                                                 	cmp	al,10h
0000D6A9: 74 05                                                 	je	in_reg
0000D6AB: E9 8E 32 FF FF                                        	jmp	invalid_operand
                                                                      in_reg:
0000D6B0: AC                                                    	lods	byte [esi]
0000D6B1: 3C 22                                                 	cmp	al,22h
0000D6B3: 0F 85 85 32 FF FF                                     	jne	invalid_operand
0000D6B9: 58                                                    	pop	eax
0000D6BA: 3C 01                                                 	cmp	al,1
0000D6BC: 74 22                                                 	je	in_al_dx
0000D6BE: 3C 02                                                 	cmp	al,2
0000D6C0: 74 08                                                 	je	in_ax_dx
0000D6C2: 3C 04                                                 	cmp	al,4
0000D6C4: 0F 85 7E 32 FF FF                                     	jne	invalid_operand_size
                                                                      in_ax_dx:
0000D6CA: E8 EE 37 00 00                                        	call	operand_autodetect
0000D6CF: C6 05 AF A2 01 00 ED                                  	mov	[base_code],0EDh
0000D6D6: E8 62 38 00 00                                        	call	store_classic_instruction_code
0000D6DB: E9 9A 78 FF FF                                        	jmp	instruction_assembled
                                                                      in_al_dx:
0000D6E0: B0 EC                                                 	mov	al,0ECh
0000D6E2: AA                                                    	stos	byte [edi]
0000D6E3: E9 92 78 FF FF                                        	jmp	instruction_assembled
                                                                      in_imm:
0000D6E8: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000D6ED: 08 C0                                                 	or	al,al
0000D6EF: 74 08                                                 	jz	in_imm_size_ok
0000D6F1: 3C 01                                                 	cmp	al,1
0000D6F3: 0F 85 4F 32 FF FF                                     	jne	invalid_operand_size
                                                                      in_imm_size_ok:
0000D6F9: E8 B9 9B FF FF                                        	call	get_byte_value
0000D6FE: 88 C2                                                 	mov	dl,al
0000D700: 58                                                    	pop	eax
0000D701: 3C 01                                                 	cmp	al,1
0000D703: 74 25                                                 	je	in_al_imm
0000D705: 3C 02                                                 	cmp	al,2
0000D707: 74 08                                                 	je	in_ax_imm
0000D709: 3C 04                                                 	cmp	al,4
0000D70B: 0F 85 37 32 FF FF                                     	jne	invalid_operand_size
                                                                      in_ax_imm:
0000D711: E8 A7 37 00 00                                        	call	operand_autodetect
0000D716: C6 05 AF A2 01 00 E5                                  	mov	[base_code],0E5h
0000D71D: E8 1B 38 00 00                                        	call	store_classic_instruction_code
0000D722: 88 D0                                                 	mov	al,dl
0000D724: AA                                                    	stos	byte [edi]
0000D725: E9 50 78 FF FF                                        	jmp	instruction_assembled
                                                                      in_al_imm:
0000D72A: B0 E4                                                 	mov	al,0E4h
0000D72C: AA                                                    	stos	byte [edi]
0000D72D: 88 D0                                                 	mov	al,dl
0000D72F: AA                                                    	stos	byte [edi]
0000D730: E9 45 78 FF FF                                        	jmp	instruction_assembled
                                                                out_instruction:
0000D735: AC                                                    	lods	byte [esi]
0000D736: E8 F9 35 00 00                                        	call	get_size_operator
0000D73B: 3C 28                                                 	cmp	al,'('
0000D73D: 74 5E                                                 	je	out_imm
0000D73F: 3C 10                                                 	cmp	al,10h
0000D741: 0F 85 F7 31 FF FF                                     	jne	invalid_operand
0000D747: AC                                                    	lods	byte [esi]
0000D748: 3C 22                                                 	cmp	al,22h
0000D74A: 0F 85 EE 31 FF FF                                     	jne	invalid_operand
0000D750: AC                                                    	lods	byte [esi]
0000D751: 3C 2C                                                 	cmp	al,','
0000D753: 0F 85 E5 31 FF FF                                     	jne	invalid_operand
0000D759: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000D760: E8 19 35 00 00                                        	call	take_register
0000D765: 08 C0                                                 	or	al,al
0000D767: 0F 85 D1 31 FF FF                                     	jnz	invalid_operand
0000D76D: 88 E0                                                 	mov	al,ah
0000D76F: 3C 01                                                 	cmp	al,1
0000D771: 74 22                                                 	je	out_dx_al
0000D773: 3C 02                                                 	cmp	al,2
0000D775: 74 08                                                 	je	out_dx_ax
0000D777: 3C 04                                                 	cmp	al,4
0000D779: 0F 85 C9 31 FF FF                                     	jne	invalid_operand_size
                                                                      out_dx_ax:
0000D77F: E8 39 37 00 00                                        	call	operand_autodetect
0000D784: C6 05 AF A2 01 00 EF                                  	mov	[base_code],0EFh
0000D78B: E8 AD 37 00 00                                        	call	store_classic_instruction_code
0000D790: E9 E5 77 FF FF                                        	jmp	instruction_assembled
                                                                      out_dx_al:
0000D795: B0 EE                                                 	mov	al,0EEh
0000D797: AA                                                    	stos	byte [edi]
0000D798: E9 DD 77 FF FF                                        	jmp	instruction_assembled
                                                                      out_imm:
0000D79D: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000D7A2: 08 C0                                                 	or	al,al
0000D7A4: 74 08                                                 	jz	out_imm_size_ok
0000D7A6: 3C 01                                                 	cmp	al,1
0000D7A8: 0F 85 9A 31 FF FF                                     	jne	invalid_operand_size
                                                                      out_imm_size_ok:
0000D7AE: E8 04 9B FF FF                                        	call	get_byte_value
0000D7B3: 88 C2                                                 	mov	dl,al
0000D7B5: AC                                                    	lods	byte [esi]
0000D7B6: 3C 2C                                                 	cmp	al,','
0000D7B8: 0F 85 80 31 FF FF                                     	jne	invalid_operand
0000D7BE: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000D7C5: E8 B4 34 00 00                                        	call	take_register
0000D7CA: 08 C0                                                 	or	al,al
0000D7CC: 0F 85 6C 31 FF FF                                     	jnz	invalid_operand
0000D7D2: 88 E0                                                 	mov	al,ah
0000D7D4: 3C 01                                                 	cmp	al,1
0000D7D6: 74 25                                                 	je	out_imm_al
0000D7D8: 3C 02                                                 	cmp	al,2
0000D7DA: 74 08                                                 	je	out_imm_ax
0000D7DC: 3C 04                                                 	cmp	al,4
0000D7DE: 0F 85 64 31 FF FF                                     	jne	invalid_operand_size
                                                                      out_imm_ax:
0000D7E4: E8 D4 36 00 00                                        	call	operand_autodetect
0000D7E9: C6 05 AF A2 01 00 E7                                  	mov	[base_code],0E7h
0000D7F0: E8 48 37 00 00                                        	call	store_classic_instruction_code
0000D7F5: 88 D0                                                 	mov	al,dl
0000D7F7: AA                                                    	stos	byte [edi]
0000D7F8: E9 7D 77 FF FF                                        	jmp	instruction_assembled
                                                                      out_imm_al:
0000D7FD: B0 E6                                                 	mov	al,0E6h
0000D7FF: AA                                                    	stos	byte [edi]
0000D800: 88 D0                                                 	mov	al,dl
0000D802: AA                                                    	stos	byte [edi]
0000D803: E9 72 77 FF FF                                        	jmp	instruction_assembled
                                                                
                                                                call_instruction:
0000D808: C6 05 B2 A2 01 00 02                                  	mov	[postbyte_register],10b
0000D80F: C6 05 AF A2 01 00 E8                                  	mov	[base_code],0E8h
0000D816: C6 05 B0 A2 01 00 9A                                  	mov	[extended_code],9Ah
0000D81D: EB 15                                                 	jmp	process_jmp
                                                                jmp_instruction:
0000D81F: C6 05 B2 A2 01 00 04                                  	mov	[postbyte_register],100b
0000D826: C6 05 AF A2 01 00 E9                                  	mov	[base_code],0E9h
0000D82D: C6 05 B0 A2 01 00 EA                                  	mov	[extended_code],0EAh
                                                                      process_jmp:
0000D834: AC                                                    	lods	byte [esi]
0000D835: E8 41 35 00 00                                        	call	get_jump_operator
0000D83A: F6 05 CF A2 01 00 10                                  	test	[prefix_flags],10h
0000D841: 74 1B                                                 	jz	jmp_type_ok
0000D843: F6 05 B6 A2 01 00 FD                                  	test	[jump_type],not 2
0000D84A: 0F 85 E4 30 FF FF                                     	jnz	illegal_instruction
0000D850: C6 05 B6 A2 01 00 02                                  	mov	[jump_type],2
0000D857: 80 25 CF A2 01 00 EF                                  	and	[prefix_flags],not 10h
                                                                      jmp_type_ok:
0000D85E: E8 D1 34 00 00                                        	call	get_size_operator
0000D863: 3C 28                                                 	cmp	al,'('
0000D865: 0F 84 78 01 00 00                                     	je	jmp_imm
0000D86B: C6 05 AF A2 01 00 FF                                  	mov	[base_code],0FFh
0000D872: 3C 10                                                 	cmp	al,10h
0000D874: 0F 84 0F 01 00 00                                     	je	jmp_reg
0000D87A: 3C 5B                                                 	cmp	al,'['
0000D87C: 0F 85 BC 30 FF FF                                     	jne	invalid_operand
                                                                      jmp_mem:
0000D882: 80 3D B6 A2 01 00 01                                  	cmp	[jump_type],1
0000D889: 0F 84 A5 30 FF FF                                     	je	illegal_instruction
0000D88F: E8 FC 34 00 00                                        	call	get_address
0000D894: 89 C2                                                 	mov	edx,eax
0000D896: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000D89B: 08 C0                                                 	or	al,al
0000D89D: 74 21                                                 	jz	jmp_mem_size_not_specified
0000D89F: 3C 02                                                 	cmp	al,2
0000D8A1: 0F 84 CB 00 00 00                                     	je	jmp_mem_16bit
0000D8A7: 3C 04                                                 	cmp	al,4
0000D8A9: 0F 84 91 00 00 00                                     	je	jmp_mem_32bit
0000D8AF: 3C 06                                                 	cmp	al,6
0000D8B1: 74 62                                                 	je	jmp_mem_48bit
0000D8B3: 3C 08                                                 	cmp	al,8
0000D8B5: 74 36                                                 	je	jmp_mem_64bit
0000D8B7: 3C 0A                                                 	cmp	al,10
0000D8B9: 74 77                                                 	je	jmp_mem_80bit
0000D8BB: E9 88 30 FF FF                                        	jmp	invalid_operand_size
                                                                      jmp_mem_size_not_specified:
0000D8C0: 80 3D B6 A2 01 00 03                                  	cmp	[jump_type],3
0000D8C7: 74 43                                                 	je	jmp_mem_far
0000D8C9: 80 3D B6 A2 01 00 02                                  	cmp	[jump_type],2
0000D8D0: 74 05                                                 	je	jmp_mem_near
0000D8D2: E8 97 DF FF FF                                        	call	recoverable_unknown_size
                                                                      jmp_mem_near:
0000D8D7: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000D8DE: 0F 84 8E 00 00 00                                     	je	jmp_mem_16bit
0000D8E4: 80 3D CA A2 01 00 20                                  	cmp	[code_type],32
0000D8EB: 74 6E                                                 	je	jmp_mem_near_32bit
                                                                      jmp_mem_64bit:
0000D8ED: 80 3D B6 A2 01 00 03                                  	cmp	[jump_type],3
0000D8F4: 0F 84 4E 30 FF FF                                     	je	invalid_operand_size
0000D8FA: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000D901: 0F 85 2D 30 FF FF                                     	jne	illegal_instruction
0000D907: E9 18 DC FF FF                                        	jmp	instruction_ready
                                                                      jmp_mem_far:
0000D90C: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000D913: 74 24                                                 	je	jmp_mem_far_32bit
                                                                      jmp_mem_48bit:
0000D915: E8 7D 35 00 00                                        	call	operand_32bit
                                                                      jmp_mem_far_store:
0000D91A: 80 3D B6 A2 01 00 02                                  	cmp	[jump_type],2
0000D921: 0F 84 21 30 FF FF                                     	je	invalid_operand_size
0000D927: FE 05 B2 A2 01 00                                     	inc	[postbyte_register]
0000D92D: E9 F2 DB FF FF                                        	jmp	instruction_ready
                                                                      jmp_mem_80bit:
0000D932: E8 71 35 00 00                                        	call	operand_64bit
0000D937: EB E1                                                 	jmp	jmp_mem_far_store
                                                                      jmp_mem_far_32bit:
0000D939: E8 48 35 00 00                                        	call	operand_16bit
0000D93E: EB DA                                                 	jmp	jmp_mem_far_store
                                                                      jmp_mem_32bit:
0000D940: 80 3D B6 A2 01 00 03                                  	cmp	[jump_type],3
0000D947: 74 F0                                                 	je	jmp_mem_far_32bit
0000D949: 80 3D B6 A2 01 00 02                                  	cmp	[jump_type],2
0000D950: 74 09                                                 	je	jmp_mem_near_32bit
0000D952: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000D959: 74 DE                                                 	je	jmp_mem_far_32bit
                                                                      jmp_mem_near_32bit:
0000D95B: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000D962: 0F 84 CC 2F FF FF                                     	je	illegal_instruction
0000D968: E8 2A 35 00 00                                        	call	operand_32bit
0000D96D: E9 B2 DB FF FF                                        	jmp	instruction_ready
                                                                      jmp_mem_16bit:
0000D972: 80 3D B6 A2 01 00 03                                  	cmp	[jump_type],3
0000D979: 0F 84 C9 2F FF FF                                     	je	invalid_operand_size
0000D97F: E8 02 35 00 00                                        	call	operand_16bit
0000D984: E9 9B DB FF FF                                        	jmp	instruction_ready
                                                                      jmp_reg:
0000D989: F6 05 B6 A2 01 00 01                                  	test	[jump_type],1
0000D990: 0F 85 A8 2F FF FF                                     	jnz	invalid_operand
0000D996: AC                                                    	lods	byte [esi]
0000D997: E8 F1 32 00 00                                        	call	convert_register
0000D99C: 88 C3                                                 	mov	bl,al
0000D99E: 88 E0                                                 	mov	al,ah
0000D9A0: 3C 02                                                 	cmp	al,2
0000D9A2: 74 35                                                 	je	jmp_reg_16bit
0000D9A4: 3C 04                                                 	cmp	al,4
0000D9A6: 74 1A                                                 	je	jmp_reg_32bit
0000D9A8: 3C 08                                                 	cmp	al,8
0000D9AA: 0F 85 98 2F FF FF                                     	jne	invalid_operand_size
                                                                      jmp_reg_64bit:
0000D9B0: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000D9B7: 0F 85 77 2F FF FF                                     	jne	illegal_instruction
0000D9BD: E9 3D DD FF FF                                        	jmp	nomem_instruction_ready
                                                                      jmp_reg_32bit:
0000D9C2: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000D9C9: 0F 84 65 2F FF FF                                     	je	illegal_instruction
0000D9CF: E8 C3 34 00 00                                        	call	operand_32bit
0000D9D4: E9 26 DD FF FF                                        	jmp	nomem_instruction_ready
                                                                      jmp_reg_16bit:
0000D9D9: E8 A8 34 00 00                                        	call	operand_16bit
0000D9DE: E9 1C DD FF FF                                        	jmp	nomem_instruction_ready
                                                                      jmp_imm:
0000D9E3: 80 3E 2E                                              	cmp	byte [esi],'.'
0000D9E6: 0F 84 C0 2F FF FF                                     	je	invalid_value
0000D9EC: 89 F3                                                 	mov	ebx,esi
0000D9EE: 4E                                                    	dec	esi
0000D9EF: E8 9D A3 FF FF                                        	call	skip_symbol
0000D9F4: 87 F3                                                 	xchg	esi,ebx
0000D9F6: 80 3B 3A                                              	cmp	byte [ebx],':'
0000D9F9: 0F 84 9A 01 00 00                                     	je	jmp_far
0000D9FF: 80 3D B6 A2 01 00 03                                  	cmp	[jump_type],3
0000DA06: 0F 84 32 2F FF FF                                     	je	invalid_operand
                                                                      jmp_near:
0000DA0C: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000DA11: 3C 02                                                 	cmp	al,2
0000DA13: 0F 84 AD 00 00 00                                     	je	jmp_imm_16bit
0000DA19: 3C 04                                                 	cmp	al,4
0000DA1B: 74 22                                                 	je	jmp_imm_32bit
0000DA1D: 3C 08                                                 	cmp	al,8
0000DA1F: 74 71                                                 	je	jmp_imm_64bit
0000DA21: 08 C0                                                 	or	al,al
0000DA23: 0F 85 1F 2F FF FF                                     	jnz	invalid_operand_size
0000DA29: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000DA30: 0F 84 90 00 00 00                                     	je	jmp_imm_16bit
0000DA36: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000DA3D: 74 53                                                 	je	jmp_imm_64bit
                                                                      jmp_imm_32bit:
0000DA3F: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000DA46: 0F 84 FC 2E FF FF                                     	je	invalid_operand_size
0000DA4C: E8 0C 9B FF FF                                        	call	get_address_dword_value
0000DA51: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000DA58: 75 04                                                 	jne	jmp_imm_32bit_prefix_ok
0000DA5A: C6 07 66                                              	mov	byte [edi],66h
0000DA5D: 47                                                    	inc	edi
                                                                      jmp_imm_32bit_prefix_ok:
0000DA5E: E8 A2 00 00 00                                        	call	calculate_jump_offset
0000DA63: 99                                                    	cdq
0000DA64: E8 AE 00 00 00                                        	call	check_for_short_jump
0000DA69: 72 50                                                 	jc	jmp_short
                                                                      jmp_imm_32bit_store:
0000DA6B: 89 C2                                                 	mov	edx,eax
0000DA6D: 83 EA 03                                              	sub	edx,3
0000DA70: 71 0D                                                 	jno	jmp_imm_32bit_ok
0000DA72: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000DA79: 0F 84 F4 00 00 00                                     	je	jump_out_of_range
                                                                      jmp_imm_32bit_ok:
0000DA7F: A0 AF A2 01 00                                        	mov	al,[base_code]
0000DA84: AA                                                    	stos	byte [edi]
0000DA85: 89 D0                                                 	mov	eax,edx
0000DA87: E8 60 A9 FF FF                                        	call	mark_relocation
0000DA8C: AB                                                    	stos	dword [edi]
0000DA8D: E9 E8 74 FF FF                                        	jmp	instruction_assembled
                                                                      jmp_imm_64bit:
0000DA92: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000DA99: 0F 85 A9 2E FF FF                                     	jne	invalid_operand_size
0000DA9F: E8 D0 9A FF FF                                        	call	get_address_qword_value
0000DAA4: E8 5C 00 00 00                                        	call	calculate_jump_offset
0000DAA9: 89 D1                                                 	mov	ecx,edx
0000DAAB: 99                                                    	cdq
0000DAAC: 39 CA                                                 	cmp	edx,ecx
0000DAAE: 0F 85 BF 00 00 00                                     	jne	jump_out_of_range
0000DAB4: E8 5E 00 00 00                                        	call	check_for_short_jump
0000DAB9: 73 B0                                                 	jnc	jmp_imm_32bit_store
                                                                      jmp_short:
0000DABB: 88 C4                                                 	mov	ah,al
0000DABD: B0 EB                                                 	mov	al,0EBh
0000DABF: 66 AB                                                 	stos	word [edi]
0000DAC1: E9 B4 74 FF FF                                        	jmp	instruction_assembled
                                                                      jmp_imm_16bit:
0000DAC6: E8 7B 9A FF FF                                        	call	get_address_word_value
0000DACB: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000DAD2: 74 04                                                 	je	jmp_imm_16bit_prefix_ok
0000DAD4: C6 07 66                                              	mov	byte [edi],66h
0000DAD7: 47                                                    	inc	edi
                                                                      jmp_imm_16bit_prefix_ok:
0000DAD8: E8 28 00 00 00                                        	call	calculate_jump_offset
0000DADD: 98                                                    	cwde
0000DADE: 99                                                    	cdq
0000DADF: E8 33 00 00 00                                        	call	check_for_short_jump
0000DAE4: 72 D5                                                 	jc	jmp_short
0000DAE6: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000DAED: 0F 85 67 2F FF FF                                     	jne	invalid_use_of_symbol
0000DAF3: 89 C2                                                 	mov	edx,eax
0000DAF5: 4A                                                    	dec	edx
0000DAF6: A0 AF A2 01 00                                        	mov	al,[base_code]
0000DAFB: AA                                                    	stos	byte [edi]
0000DAFC: 89 D0                                                 	mov	eax,edx
0000DAFE: 66 AB                                                 	stos	word [edi]
0000DB00: E9 75 74 FF FF                                        	jmp	instruction_assembled
                                                                      calculate_jump_offset:
0000DB05: 83 C7 02                                              	add	edi,2
0000DB08: 8B 2D D0 A1 01 00                                     	mov	ebp,[addressing_space]
0000DB0E: E8 98 9D FF FF                                        	call	calculate_relative_offset
0000DB13: 83 EF 02                                              	sub	edi,2
0000DB16: C3                                                    	ret
                                                                      check_for_short_jump:
0000DB17: 80 3D B6 A2 01 00 01                                  	cmp	[jump_type],1
0000DB1E: 74 22                                                 	je	forced_short
0000DB20: 77 1E                                                 	ja	no_short_jump
0000DB22: 80 3D AF A2 01 00 E8                                  	cmp	[base_code],0E8h
0000DB29: 74 15                                                 	je	no_short_jump
0000DB2B: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000DB32: 75 0C                                                 	jne	no_short_jump
0000DB34: 3D 80 00 00 00                                        	cmp	eax,80h
0000DB39: 72 36                                                 	jb	short_jump
0000DB3B: 83 F8 80                                              	cmp	eax,-80h
0000DB3E: 73 31                                                 	jae	short_jump
                                                                      no_short_jump:
0000DB40: F8                                                    	clc
0000DB41: C3                                                    	ret
                                                                      forced_short:
0000DB42: 80 3D AF A2 01 00 E8                                  	cmp	[base_code],0E8h
0000DB49: 0F 84 E5 2D FF FF                                     	je	illegal_instruction
0000DB4F: 80 3D C8 A2 01 00 00                                  	cmp	[next_pass_needed],0
0000DB56: 75 0D                                                 	jne	jmp_short_value_type_ok
0000DB58: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000DB5F: 0F 85 F5 2E FF FF                                     	jne	invalid_use_of_symbol
                                                                      jmp_short_value_type_ok:
0000DB65: 83 F8 80                                              	cmp	eax,-80h
0000DB68: 73 07                                                 	jae	short_jump
0000DB6A: 3D 80 00 00 00                                        	cmp	eax,80h
0000DB6F: 73 02                                                 	jae	jump_out_of_range
                                                                      short_jump:
0000DB71: F9                                                    	stc
0000DB72: C3                                                    	ret
                                                                      jump_out_of_range:
0000DB73: 83 3D E8 A1 01 00 00                                  	cmp	[error_line],0
0000DB7A: 0F 85 FA 73 FF FF                                     	jne	instruction_assembled
0000DB80: A1 80 A1 01 00                                        	mov	eax,[current_line]
0000DB85: A3 E8 A1 01 00                                        	mov	[error_line],eax
0000DB8A: C7 05 EC A1 01 00 8E 09 00 00                         	mov	[error],relative_jump_out_of_range
0000DB94: E9 E1 73 FF FF                                        	jmp	instruction_assembled
                                                                      jmp_far:
0000DB99: 80 3D B6 A2 01 00 02                                  	cmp	[jump_type],2
0000DBA0: 0F 84 98 2D FF FF                                     	je	invalid_operand
0000DBA6: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000DBAD: 0F 84 81 2D FF FF                                     	je	illegal_instruction
0000DBB3: A0 B0 A2 01 00                                        	mov	al,[extended_code]
0000DBB8: A2 AF A2 01 00                                        	mov	[base_code],al
0000DBBD: E8 80 97 FF FF                                        	call	get_word_value
0000DBC2: 50                                                    	push	eax
0000DBC3: 46                                                    	inc	esi
0000DBC4: AC                                                    	lods	byte [esi]
0000DBC5: 3C 28                                                 	cmp	al,'('
0000DBC7: 0F 85 71 2D FF FF                                     	jne	invalid_operand
0000DBCD: A0 C0 A2 01 00                                        	mov	al,[value_type]
0000DBD2: 50                                                    	push	eax
0000DBD3: FF 35 30 A2 01 00                                     	push	[symbol_identifier]
0000DBD9: 80 3E 2E                                              	cmp	byte [esi],'.'
0000DBDC: 0F 84 CA 2D FF FF                                     	je	invalid_value
0000DBE2: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000DBE7: 3C 04                                                 	cmp	al,4
0000DBE9: 74 15                                                 	je	jmp_far_16bit
0000DBEB: 3C 06                                                 	cmp	al,6
0000DBED: 74 45                                                 	je	jmp_far_32bit
0000DBEF: 08 C0                                                 	or	al,al
0000DBF1: 0F 85 51 2D FF FF                                     	jnz	invalid_operand_size
0000DBF7: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000DBFE: 75 34                                                 	jne	jmp_far_32bit
                                                                      jmp_far_16bit:
0000DC00: E8 3D 97 FF FF                                        	call	get_word_value
0000DC05: 89 C3                                                 	mov	ebx,eax
0000DC07: E8 7A 32 00 00                                        	call	operand_16bit
0000DC0C: E8 2C 33 00 00                                        	call	store_classic_instruction_code
0000DC11: 66 89 D8                                              	mov	ax,bx
0000DC14: E8 D3 A7 FF FF                                        	call	mark_relocation
0000DC19: 66 AB                                                 	stos	word [edi]
                                                                      jmp_far_segment:
0000DC1B: 8F 05 30 A2 01 00                                     	pop	[symbol_identifier]
0000DC21: 58                                                    	pop	eax
0000DC22: A2 C0 A2 01 00                                        	mov	[value_type],al
0000DC27: 58                                                    	pop	eax
0000DC28: E8 BF A7 FF FF                                        	call	mark_relocation
0000DC2D: 66 AB                                                 	stos	word [edi]
0000DC2F: E9 46 73 FF FF                                        	jmp	instruction_assembled
                                                                      jmp_far_32bit:
0000DC34: E8 51 97 FF FF                                        	call	get_dword_value
0000DC39: 89 C3                                                 	mov	ebx,eax
0000DC3B: E8 57 32 00 00                                        	call	operand_32bit
0000DC40: E8 F8 32 00 00                                        	call	store_classic_instruction_code
0000DC45: 89 D8                                                 	mov	eax,ebx
0000DC47: E8 A0 A7 FF FF                                        	call	mark_relocation
0000DC4C: AB                                                    	stos	dword [edi]
0000DC4D: EB CC                                                 	jmp	jmp_far_segment
                                                                conditional_jump:
0000DC4F: A2 AF A2 01 00                                        	mov	[base_code],al
0000DC54: 80 25 CF A2 01 00 EF                                  	and	[prefix_flags],not 10h
0000DC5B: AC                                                    	lods	byte [esi]
0000DC5C: E8 1A 31 00 00                                        	call	get_jump_operator
0000DC61: 80 3D B6 A2 01 00 03                                  	cmp	[jump_type],3
0000DC68: 0F 84 D0 2C FF FF                                     	je	invalid_operand
0000DC6E: E8 C1 30 00 00                                        	call	get_size_operator
0000DC73: 3C 28                                                 	cmp	al,'('
0000DC75: 0F 85 C3 2C FF FF                                     	jne	invalid_operand
0000DC7B: 80 3E 2E                                              	cmp	byte [esi],'.'
0000DC7E: 0F 84 28 2D FF FF                                     	je	invalid_value
0000DC84: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000DC89: 3C 02                                                 	cmp	al,2
0000DC8B: 0F 84 B7 00 00 00                                     	je	conditional_jump_16bit
0000DC91: 3C 04                                                 	cmp	al,4
0000DC93: 74 22                                                 	je	conditional_jump_32bit
0000DC95: 3C 08                                                 	cmp	al,8
0000DC97: 74 78                                                 	je	conditional_jump_64bit
0000DC99: 08 C0                                                 	or	al,al
0000DC9B: 0F 85 A7 2C FF FF                                     	jnz	invalid_operand_size
0000DCA1: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000DCA8: 0F 84 9A 00 00 00                                     	je	conditional_jump_16bit
0000DCAE: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000DCB5: 74 5A                                                 	je	conditional_jump_64bit
                                                                      conditional_jump_32bit:
0000DCB7: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000DCBE: 0F 84 84 2C FF FF                                     	je	invalid_operand_size
0000DCC4: E8 94 98 FF FF                                        	call	get_address_dword_value
0000DCC9: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000DCD0: 75 04                                                 	jne	conditional_jump_32bit_prefix_ok
0000DCD2: C6 07 66                                              	mov	byte [edi],66h
0000DCD5: 47                                                    	inc	edi
                                                                      conditional_jump_32bit_prefix_ok:
0000DCD6: E8 2A FE FF FF                                        	call	calculate_jump_offset
0000DCDB: 99                                                    	cdq
0000DCDC: E8 36 FE FF FF                                        	call	check_for_short_jump
0000DCE1: 72 57                                                 	jc	conditional_jump_short
                                                                      conditional_jump_32bit_store:
0000DCE3: 89 C2                                                 	mov	edx,eax
0000DCE5: 83 EA 04                                              	sub	edx,4
0000DCE8: 71 0D                                                 	jno	conditional_jump_32bit_range_ok
0000DCEA: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000DCF1: 0F 84 7C FE FF FF                                     	je	jump_out_of_range
                                                                      conditional_jump_32bit_range_ok:
0000DCF7: 8A 25 AF A2 01 00                                     	mov	ah,[base_code]
0000DCFD: 80 C4 10                                              	add	ah,10h
0000DD00: B0 0F                                                 	mov	al,0Fh
0000DD02: 66 AB                                                 	stos	word [edi]
0000DD04: 89 D0                                                 	mov	eax,edx
0000DD06: E8 E1 A6 FF FF                                        	call	mark_relocation
0000DD0B: AB                                                    	stos	dword [edi]
0000DD0C: E9 69 72 FF FF                                        	jmp	instruction_assembled
                                                                      conditional_jump_64bit:
0000DD11: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000DD18: 0F 85 2A 2C FF FF                                     	jne	invalid_operand_size
0000DD1E: E8 51 98 FF FF                                        	call	get_address_qword_value
0000DD23: E8 DD FD FF FF                                        	call	calculate_jump_offset
0000DD28: 89 D1                                                 	mov	ecx,edx
0000DD2A: 99                                                    	cdq
0000DD2B: 39 CA                                                 	cmp	edx,ecx
0000DD2D: 0F 85 40 FE FF FF                                     	jne	jump_out_of_range
0000DD33: E8 DF FD FF FF                                        	call	check_for_short_jump
0000DD38: 73 A9                                                 	jnc	conditional_jump_32bit_store
                                                                      conditional_jump_short:
0000DD3A: 88 C4                                                 	mov	ah,al
0000DD3C: A0 AF A2 01 00                                        	mov	al,[base_code]
0000DD41: 66 AB                                                 	stos	word [edi]
0000DD43: E9 32 72 FF FF                                        	jmp	instruction_assembled
                                                                      conditional_jump_16bit:
0000DD48: E8 F9 97 FF FF                                        	call	get_address_word_value
0000DD4D: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000DD54: 74 04                                                 	je	conditional_jump_16bit_prefix_ok
0000DD56: C6 07 66                                              	mov	byte [edi],66h
0000DD59: 47                                                    	inc	edi
                                                                      conditional_jump_16bit_prefix_ok:
0000DD5A: E8 A6 FD FF FF                                        	call	calculate_jump_offset
0000DD5F: 98                                                    	cwde
0000DD60: 99                                                    	cdq
0000DD61: E8 B1 FD FF FF                                        	call	check_for_short_jump
0000DD66: 72 D2                                                 	jc	conditional_jump_short
0000DD68: 80 3D C0 A2 01 00 00                                  	cmp	[value_type],0
0000DD6F: 0F 85 E5 2C FF FF                                     	jne	invalid_use_of_symbol
0000DD75: 89 C2                                                 	mov	edx,eax
0000DD77: 66 83 EA 02                                           	sub	dx,2
0000DD7B: 8A 25 AF A2 01 00                                     	mov	ah,[base_code]
0000DD81: 80 C4 10                                              	add	ah,10h
0000DD84: B0 0F                                                 	mov	al,0Fh
0000DD86: 66 AB                                                 	stos	word [edi]
0000DD88: 89 D0                                                 	mov	eax,edx
0000DD8A: 66 AB                                                 	stos	word [edi]
0000DD8C: E9 E9 71 FF FF                                        	jmp	instruction_assembled
                                                                loop_instruction_16bit:
0000DD91: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000DD98: 0F 84 96 2B FF FF                                     	je	illegal_instruction
0000DD9E: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000DDA5: 74 28                                                 	je	loop_instruction
0000DDA7: C6 05 A6 A2 01 00 67                                  	mov	[operand_prefix],67h
0000DDAE: EB 1F                                                 	jmp	loop_instruction
                                                                loop_instruction_32bit:
0000DDB0: 80 3D CA A2 01 00 20                                  	cmp	[code_type],32
0000DDB7: 74 16                                                 	je	loop_instruction
0000DDB9: C6 05 A6 A2 01 00 67                                  	mov	[operand_prefix],67h
0000DDC0: EB 0D                                                       jmp     loop_instruction
                                                                loop_instruction_64bit:
0000DDC2: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000DDC9: 0F 85 65 2B FF FF                                     	jne	illegal_instruction
                                                                loop_instruction:
0000DDCF: A2 AF A2 01 00                                        	mov	[base_code],al
0000DDD4: AC                                                    	lods	byte [esi]
0000DDD5: E8 A1 2F 00 00                                        	call	get_jump_operator
0000DDDA: 80 3D B6 A2 01 00 01                                  	cmp	[jump_type],1
0000DDE1: 0F 87 57 2B FF FF                                     	ja	invalid_operand
0000DDE7: E8 48 2F 00 00                                        	call	get_size_operator
0000DDEC: 3C 28                                                 	cmp	al,'('
0000DDEE: 0F 85 4A 2B FF FF                                     	jne	invalid_operand
0000DDF4: 80 3E 2E                                              	cmp	byte [esi],'.'
0000DDF7: 0F 84 AF 2B FF FF                                     	je	invalid_value
0000DDFD: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000DE02: 3C 02                                                 	cmp	al,2
0000DE04: 0F 84 9D 00 00 00                                     	je	loop_jump_16bit
0000DE0A: 3C 04                                                 	cmp	al,4
0000DE0C: 74 22                                                 	je	loop_jump_32bit
0000DE0E: 3C 08                                                 	cmp	al,8
0000DE10: 74 6C                                                 	je	loop_jump_64bit
0000DE12: 08 C0                                                 	or	al,al
0000DE14: 0F 85 2E 2B FF FF                                     	jnz	invalid_operand_size
0000DE1A: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000DE21: 0F 84 80 00 00 00                                     	je	loop_jump_16bit
0000DE27: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000DE2E: 74 4E                                                 	je	loop_jump_64bit
                                                                      loop_jump_32bit:
0000DE30: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000DE37: 0F 84 0B 2B FF FF                                     	je	invalid_operand_size
0000DE3D: E8 1B 97 FF FF                                        	call	get_address_dword_value
0000DE42: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000DE49: 75 04                                                 	jne	loop_jump_32bit_prefix_ok
0000DE4B: C6 07 66                                              	mov	byte [edi],66h
0000DE4E: 47                                                    	inc	edi
                                                                      loop_jump_32bit_prefix_ok:
0000DE4F: E8 18 00 00 00                                        	call	loop_counter_size
0000DE54: E8 AC FC FF FF                                        	call	calculate_jump_offset
0000DE59: 99                                                    	cdq
                                                                      make_loop_jump:
0000DE5A: E8 B8 FC FF FF                                        	call	check_for_short_jump
0000DE5F: 0F 82 D5 FE FF FF                                     	jc	conditional_jump_short
0000DE65: 66 AF                                                 	scas	word [edi]
0000DE67: E9 07 FD FF FF                                        	jmp	jump_out_of_range
                                                                      loop_counter_size:
0000DE6C: 80 3D A6 A2 01 00 00                                  	cmp	[operand_prefix],0
0000DE73: 74 08                                                 	je	loop_counter_size_ok
0000DE75: 50                                                    	push	eax
0000DE76: A0 A6 A2 01 00                                        	mov	al,[operand_prefix]
0000DE7B: AA                                                    	stos	byte [edi]
0000DE7C: 58                                                    	pop	eax
                                                                      loop_counter_size_ok:
0000DE7D: C3                                                    	ret
                                                                      loop_jump_64bit:
0000DE7E: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000DE85: 0F 85 BD 2A FF FF                                     	jne	invalid_operand_size
0000DE8B: E8 E4 96 FF FF                                        	call	get_address_qword_value
0000DE90: E8 D7 FF FF FF                                        	call	loop_counter_size
0000DE95: E8 6B FC FF FF                                        	call	calculate_jump_offset
0000DE9A: 89 D1                                                 	mov	ecx,edx
0000DE9C: 99                                                    	cdq
0000DE9D: 39 CA                                                 	cmp	edx,ecx
0000DE9F: 0F 85 CE FC FF FF                                     	jne	jump_out_of_range
0000DEA5: EB B3                                                 	jmp	make_loop_jump
                                                                      loop_jump_16bit:
0000DEA7: E8 9A 96 FF FF                                        	call	get_address_word_value
0000DEAC: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
0000DEB3: 74 04                                                 	je	loop_jump_16bit_prefix_ok
0000DEB5: C6 07 66                                              	mov	byte [edi],66h
0000DEB8: 47                                                    	inc	edi
                                                                      loop_jump_16bit_prefix_ok:
0000DEB9: E8 AE FF FF FF                                        	call	loop_counter_size
0000DEBE: E8 42 FC FF FF                                        	call	calculate_jump_offset
0000DEC3: 98                                                    	cwde
0000DEC4: 99                                                    	cdq
0000DEC5: EB 93                                                 	jmp	make_loop_jump
                                                                
                                                                movs_instruction:
0000DEC7: AC                                                    	lods	byte [esi]
0000DEC8: E8 67 2E 00 00                                        	call	get_size_operator
0000DECD: 3C 5B                                                 	cmp	al,'['
0000DECF: 0F 85 69 2A FF FF                                     	jne	invalid_operand
0000DED5: E8 B6 2E 00 00                                        	call	get_address
0000DEDA: 09 C0                                                 	or	eax,eax
0000DEDC: 0F 85 C0 2A FF FF                                     	jnz	invalid_address
0000DEE2: 08 EB                                                 	or	bl,ch
0000DEE4: 0F 85 B8 2A FF FF                                     	jnz	invalid_address
0000DEEA: 80 3D B3 A2 01 00 01                                  	cmp	[segment_register],1
0000DEF1: 0F 87 AB 2A FF FF                                     	ja	invalid_address
0000DEF7: 53                                                    	push	ebx
0000DEF8: AC                                                    	lods	byte [esi]
0000DEF9: 3C 2C                                                 	cmp	al,','
0000DEFB: 0F 85 3D 2A FF FF                                     	jne	invalid_operand
0000DF01: AC                                                    	lods	byte [esi]
0000DF02: E8 2D 2E 00 00                                        	call	get_size_operator
0000DF07: 3C 5B                                                 	cmp	al,'['
0000DF09: 0F 85 2F 2A FF FF                                     	jne	invalid_operand
0000DF0F: E8 7C 2E 00 00                                        	call	get_address
0000DF14: 5A                                                    	pop	edx
0000DF15: 09 C0                                                 	or	eax,eax
0000DF17: 0F 85 85 2A FF FF                                     	jnz	invalid_address
0000DF1D: 08 EB                                                 	or	bl,ch
0000DF1F: 0F 85 7D 2A FF FF                                     	jnz	invalid_address
0000DF25: 88 F0                                                 	mov	al,dh
0000DF27: 88 FC                                                 	mov	ah,bh
0000DF29: C0 E8 04                                              	shr	al,4
0000DF2C: C0 EC 04                                              	shr	ah,4
0000DF2F: 38 E0                                                 	cmp	al,ah
0000DF31: 0F 85 39 2A FF FF                                     	jne	address_sizes_do_not_agree
0000DF37: 80 E7 07                                              	and	bh,111b
0000DF3A: 80 E6 07                                              	and	dh,111b
0000DF3D: 80 FF 06                                              	cmp	bh,6
0000DF40: 0F 85 5C 2A FF FF                                     	jne	invalid_address
0000DF46: 80 FE 07                                              	cmp	dh,7
0000DF49: 0F 85 53 2A FF FF                                     	jne	invalid_address
0000DF4F: 3C 02                                                 	cmp	al,2
0000DF51: 74 1A                                                 	je	movs_address_16bit
0000DF53: 3C 04                                                 	cmp	al,4
0000DF55: 74 0F                                                 	je	movs_address_32bit
0000DF57: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000DF5E: 0F 85 02 2A FF FF                                     	jne	invalid_address_size
0000DF64: EB 19                                                 	jmp	movs_store
                                                                      movs_address_32bit:
0000DF66: E8 FB 35 00 00                                        	call	address_32bit_prefix
0000DF6B: EB 12                                                 	jmp	movs_store
                                                                      movs_address_16bit:
0000DF6D: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000DF74: 0F 84 EC 29 FF FF                                     	je	invalid_address_size
0000DF7A: E8 DA 35 00 00                                        	call	address_16bit_prefix
                                                                      movs_store:
0000DF7F: 31 DB                                                 	xor	ebx,ebx
0000DF81: E8 48 2F 00 00                                        	call	store_segment_prefix_if_necessary
0000DF86: B0 A4                                                 	mov	al,0A4h
                                                                      movs_check_size:
0000DF88: 8A 1D A4 A2 01 00                                     	mov	bl,[operand_size]
0000DF8E: 80 FB 01                                              	cmp	bl,1
0000DF91: 0F 84 E1 D3 FF FF                                     	je	simple_instruction
0000DF97: FE C0                                                 	inc	al
0000DF99: 80 FB 02                                              	cmp	bl,2
0000DF9C: 0F 84 F8 D3 FF FF                                     	je	simple_instruction_16bit
0000DFA2: 80 FB 04                                              	cmp	bl,4
0000DFA5: 0F 84 16 D4 FF FF                                     	je	simple_instruction_32bit
0000DFAB: 80 FB 08                                              	cmp	bl,8
0000DFAE: 0F 84 25 D4 FF FF                                     	je	simple_instruction_64bit
0000DFB4: 08 DB                                                 	or	bl,bl
0000DFB6: 0F 85 8C 29 FF FF                                     	jnz	invalid_operand_size
0000DFBC: E8 AD D8 FF FF                                        	call	recoverable_unknown_size
0000DFC1: E9 B2 D3 FF FF                                        	jmp	simple_instruction
                                                                lods_instruction:
0000DFC6: AC                                                    	lods	byte [esi]
0000DFC7: E8 68 2D 00 00                                        	call	get_size_operator
0000DFCC: 3C 5B                                                 	cmp	al,'['
0000DFCE: 0F 85 6A 29 FF FF                                     	jne	invalid_operand
0000DFD4: E8 B7 2D 00 00                                        	call	get_address
0000DFD9: 09 C0                                                 	or	eax,eax
0000DFDB: 0F 85 C1 29 FF FF                                     	jnz	invalid_address
0000DFE1: 08 EB                                                 	or	bl,ch
0000DFE3: 0F 85 B9 29 FF FF                                     	jnz	invalid_address
0000DFE9: 80 FF 26                                              	cmp	bh,26h
0000DFEC: 74 24                                                 	je	lods_address_16bit
0000DFEE: 80 FF 46                                              	cmp	bh,46h
0000DFF1: 74 18                                                 	je	lods_address_32bit
0000DFF3: 80 FF 86                                              	cmp	bh,86h
0000DFF6: 0F 85 A6 29 FF FF                                     	jne	invalid_address
0000DFFC: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000E003: 0F 85 5D 29 FF FF                                     	jne	invalid_address_size
0000E009: EB 19                                                 	jmp	lods_store
                                                                      lods_address_32bit:
0000E00B: E8 56 35 00 00                                        	call	address_32bit_prefix
0000E010: EB 12                                                 	jmp	lods_store
                                                                      lods_address_16bit:
0000E012: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000E019: 0F 84 47 29 FF FF                                     	je	invalid_address_size
0000E01F: E8 35 35 00 00                                        	call	address_16bit_prefix
                                                                      lods_store:
0000E024: 31 DB                                                 	xor	ebx,ebx
0000E026: E8 A3 2E 00 00                                        	call	store_segment_prefix_if_necessary
0000E02B: B0 AC                                                 	mov	al,0ACh
0000E02D: E9 56 FF FF FF                                        	jmp	movs_check_size
                                                                stos_instruction:
0000E032: A2 AF A2 01 00                                        	mov	[base_code],al
0000E037: AC                                                    	lods	byte [esi]
0000E038: E8 F7 2C 00 00                                        	call	get_size_operator
0000E03D: 3C 5B                                                 	cmp	al,'['
0000E03F: 0F 85 F9 28 FF FF                                     	jne	invalid_operand
0000E045: E8 46 2D 00 00                                        	call	get_address
0000E04A: 09 C0                                                 	or	eax,eax
0000E04C: 0F 85 50 29 FF FF                                     	jnz	invalid_address
0000E052: 08 EB                                                 	or	bl,ch
0000E054: 0F 85 48 29 FF FF                                     	jnz	invalid_address
0000E05A: 80 FF 27                                              	cmp	bh,27h
0000E05D: 74 24                                                 	je	stos_address_16bit
0000E05F: 80 FF 47                                              	cmp	bh,47h
0000E062: 74 18                                                 	je	stos_address_32bit
0000E064: 80 FF 87                                              	cmp	bh,87h
0000E067: 0F 85 35 29 FF FF                                     	jne	invalid_address
0000E06D: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000E074: 0F 85 EC 28 FF FF                                     	jne	invalid_address_size
0000E07A: EB 19                                                 	jmp	stos_store
                                                                      stos_address_32bit:
0000E07C: E8 E5 34 00 00                                        	call	address_32bit_prefix
0000E081: EB 12                                                 	jmp	stos_store
                                                                      stos_address_16bit:
0000E083: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000E08A: 0F 84 D6 28 FF FF                                     	je	invalid_address_size
0000E090: E8 C4 34 00 00                                        	call	address_16bit_prefix
                                                                      stos_store:
0000E095: 80 3D B3 A2 01 00 01                                  	cmp	[segment_register],1
0000E09C: 0F 87 00 29 FF FF                                     	ja	invalid_address
0000E0A2: A0 AF A2 01 00                                        	mov	al,[base_code]
0000E0A7: E9 DC FE FF FF                                        	jmp	movs_check_size
                                                                cmps_instruction:
0000E0AC: AC                                                    	lods	byte [esi]
0000E0AD: E8 82 2C 00 00                                        	call	get_size_operator
0000E0B2: 3C 5B                                                 	cmp	al,'['
0000E0B4: 0F 85 84 28 FF FF                                     	jne	invalid_operand
0000E0BA: E8 D1 2C 00 00                                        	call	get_address
0000E0BF: 09 C0                                                 	or	eax,eax
0000E0C1: 0F 85 DB 28 FF FF                                     	jnz	invalid_address
0000E0C7: 08 EB                                                 	or	bl,ch
0000E0C9: 0F 85 D3 28 FF FF                                     	jnz	invalid_address
0000E0CF: A0 B3 A2 01 00                                        	mov	al,[segment_register]
0000E0D4: 50 53                                                 	push	eax ebx
0000E0D6: AC                                                    	lods	byte [esi]
0000E0D7: 3C 2C                                                 	cmp	al,','
0000E0D9: 0F 85 5F 28 FF FF                                     	jne	invalid_operand
0000E0DF: AC                                                    	lods	byte [esi]
0000E0E0: E8 4F 2C 00 00                                        	call	get_size_operator
0000E0E5: 3C 5B                                                 	cmp	al,'['
0000E0E7: 0F 85 51 28 FF FF                                     	jne	invalid_operand
0000E0ED: E8 9E 2C 00 00                                        	call	get_address
0000E0F2: 09 C0                                                 	or	eax,eax
0000E0F4: 0F 85 A8 28 FF FF                                     	jnz	invalid_address
0000E0FA: 08 EB                                                 	or	bl,ch
0000E0FC: 0F 85 A0 28 FF FF                                     	jnz	invalid_address
0000E102: 5A 58                                                 	pop	edx eax
0000E104: 80 3D B3 A2 01 00 01                                  	cmp	[segment_register],1
0000E10B: 0F 87 91 28 FF FF                                     	ja	invalid_address
0000E111: A2 B3 A2 01 00                                        	mov	[segment_register],al
0000E116: 88 F0                                                 	mov	al,dh
0000E118: 88 FC                                                 	mov	ah,bh
0000E11A: C0 E8 04                                              	shr	al,4
0000E11D: C0 EC 04                                              	shr	ah,4
0000E120: 38 E0                                                 	cmp	al,ah
0000E122: 0F 85 48 28 FF FF                                     	jne	address_sizes_do_not_agree
0000E128: 80 E7 07                                              	and	bh,111b
0000E12B: 80 E6 07                                              	and	dh,111b
0000E12E: 80 FF 07                                              	cmp	bh,7
0000E131: 0F 85 6B 28 FF FF                                     	jne	invalid_address
0000E137: 80 FE 06                                              	cmp	dh,6
0000E13A: 0F 85 62 28 FF FF                                     	jne	invalid_address
0000E140: 3C 02                                                 	cmp	al,2
0000E142: 74 1A                                                 	je	cmps_address_16bit
0000E144: 3C 04                                                 	cmp	al,4
0000E146: 74 0F                                                 	je	cmps_address_32bit
0000E148: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000E14F: 0F 85 11 28 FF FF                                     	jne	invalid_address_size
0000E155: EB 19                                                 	jmp	cmps_store
                                                                      cmps_address_32bit:
0000E157: E8 0A 34 00 00                                        	call	address_32bit_prefix
0000E15C: EB 12                                                 	jmp	cmps_store
                                                                      cmps_address_16bit:
0000E15E: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000E165: 0F 84 FB 27 FF FF                                     	je	invalid_address_size
0000E16B: E8 E9 33 00 00                                        	call	address_16bit_prefix
                                                                      cmps_store:
0000E170: 31 DB                                                 	xor	ebx,ebx
0000E172: E8 57 2D 00 00                                        	call	store_segment_prefix_if_necessary
0000E177: B0 A6                                                 	mov	al,0A6h
0000E179: E9 0A FE FF FF                                        	jmp	movs_check_size
                                                                ins_instruction:
0000E17E: AC                                                    	lods	byte [esi]
0000E17F: E8 B0 2B 00 00                                        	call	get_size_operator
0000E184: 3C 5B                                                 	cmp	al,'['
0000E186: 0F 85 B2 27 FF FF                                     	jne	invalid_operand
0000E18C: E8 FF 2B 00 00                                        	call	get_address
0000E191: 09 C0                                                 	or	eax,eax
0000E193: 0F 85 09 28 FF FF                                     	jnz	invalid_address
0000E199: 08 EB                                                 	or	bl,ch
0000E19B: 0F 85 01 28 FF FF                                     	jnz	invalid_address
0000E1A1: 80 FF 27                                              	cmp	bh,27h
0000E1A4: 74 24                                                 	je	ins_address_16bit
0000E1A6: 80 FF 47                                              	cmp	bh,47h
0000E1A9: 74 18                                                 	je	ins_address_32bit
0000E1AB: 80 FF 87                                              	cmp	bh,87h
0000E1AE: 0F 85 EE 27 FF FF                                     	jne	invalid_address
0000E1B4: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000E1BB: 0F 85 A5 27 FF FF                                     	jne	invalid_address_size
0000E1C1: EB 19                                                 	jmp	ins_store
                                                                      ins_address_32bit:
0000E1C3: E8 9E 33 00 00                                        	call	address_32bit_prefix
0000E1C8: EB 12                                                 	jmp	ins_store
                                                                      ins_address_16bit:
0000E1CA: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000E1D1: 0F 84 8F 27 FF FF                                     	je	invalid_address_size
0000E1D7: E8 7D 33 00 00                                        	call	address_16bit_prefix
                                                                      ins_store:
0000E1DC: 80 3D B3 A2 01 00 01                                  	cmp	[segment_register],1
0000E1E3: 0F 87 B9 27 FF FF                                     	ja	invalid_address
0000E1E9: AC                                                    	lods	byte [esi]
0000E1EA: 3C 2C                                                 	cmp	al,','
0000E1EC: 0F 85 4C 27 FF FF                                     	jne	invalid_operand
0000E1F2: AC                                                    	lods	byte [esi]
0000E1F3: 3C 10                                                 	cmp	al,10h
0000E1F5: 0F 85 43 27 FF FF                                     	jne	invalid_operand
0000E1FB: AC                                                    	lods	byte [esi]
0000E1FC: 3C 22                                                 	cmp	al,22h
0000E1FE: 0F 85 3A 27 FF FF                                     	jne	invalid_operand
0000E204: B0 6C                                                 	mov	al,6Ch
                                                                      ins_check_size:
0000E206: 80 3D A4 A2 01 00 08                                  	cmp	[operand_size],8
0000E20D: 0F 85 75 FD FF FF                                     	jne	movs_check_size
0000E213: E9 30 27 FF FF                                        	jmp	invalid_operand_size
                                                                outs_instruction:
0000E218: AC                                                    	lods	byte [esi]
0000E219: 3C 10                                                 	cmp	al,10h
0000E21B: 0F 85 1D 27 FF FF                                     	jne	invalid_operand
0000E221: AC                                                    	lods	byte [esi]
0000E222: 3C 22                                                 	cmp	al,22h
0000E224: 0F 85 14 27 FF FF                                     	jne	invalid_operand
0000E22A: AC                                                    	lods	byte [esi]
0000E22B: 3C 2C                                                 	cmp	al,','
0000E22D: 0F 85 0B 27 FF FF                                     	jne	invalid_operand
0000E233: AC                                                    	lods	byte [esi]
0000E234: E8 FB 2A 00 00                                        	call	get_size_operator
0000E239: 3C 5B                                                 	cmp	al,'['
0000E23B: 0F 85 FD 26 FF FF                                     	jne	invalid_operand
0000E241: E8 4A 2B 00 00                                        	call	get_address
0000E246: 09 C0                                                 	or	eax,eax
0000E248: 0F 85 54 27 FF FF                                     	jnz	invalid_address
0000E24E: 08 EB                                                 	or	bl,ch
0000E250: 0F 85 4C 27 FF FF                                     	jnz	invalid_address
0000E256: 80 FF 26                                              	cmp	bh,26h
0000E259: 74 24                                                 	je	outs_address_16bit
0000E25B: 80 FF 46                                              	cmp	bh,46h
0000E25E: 74 18                                                 	je	outs_address_32bit
0000E260: 80 FF 86                                              	cmp	bh,86h
0000E263: 0F 85 39 27 FF FF                                     	jne	invalid_address
0000E269: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000E270: 0F 85 F0 26 FF FF                                     	jne	invalid_address_size
0000E276: EB 19                                                 	jmp	outs_store
                                                                      outs_address_32bit:
0000E278: E8 E9 32 00 00                                        	call	address_32bit_prefix
0000E27D: EB 12                                                 	jmp	outs_store
                                                                      outs_address_16bit:
0000E27F: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000E286: 0F 84 DA 26 FF FF                                     	je	invalid_address_size
0000E28C: E8 C8 32 00 00                                        	call	address_16bit_prefix
                                                                      outs_store:
0000E291: 31 DB                                                 	xor	ebx,ebx
0000E293: E8 36 2C 00 00                                        	call	store_segment_prefix_if_necessary
0000E298: B0 6E                                                 	mov	al,6Eh
0000E29A: E9 67 FF FF FF                                        	jmp	ins_check_size
                                                                xlat_instruction:
0000E29F: AC                                                    	lods	byte [esi]
0000E2A0: E8 8F 2A 00 00                                        	call	get_size_operator
0000E2A5: 3C 5B                                                 	cmp	al,'['
0000E2A7: 0F 85 91 26 FF FF                                     	jne	invalid_operand
0000E2AD: E8 DE 2A 00 00                                        	call	get_address
0000E2B2: 09 C0                                                 	or	eax,eax
0000E2B4: 0F 85 E8 26 FF FF                                     	jnz	invalid_address
0000E2BA: 08 EB                                                 	or	bl,ch
0000E2BC: 0F 85 E0 26 FF FF                                     	jnz	invalid_address
0000E2C2: 80 FF 23                                              	cmp	bh,23h
0000E2C5: 74 24                                                 	je	xlat_address_16bit
0000E2C7: 80 FF 43                                              	cmp	bh,43h
0000E2CA: 74 18                                                 	je	xlat_address_32bit
0000E2CC: 80 FF 83                                              	cmp	bh,83h
0000E2CF: 0F 85 CD 26 FF FF                                     	jne	invalid_address
0000E2D5: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000E2DC: 0F 85 84 26 FF FF                                     	jne	invalid_address_size
0000E2E2: EB 19                                                 	jmp	xlat_store
                                                                      xlat_address_32bit:
0000E2E4: E8 7D 32 00 00                                        	call	address_32bit_prefix
0000E2E9: EB 12                                                 	jmp	xlat_store
                                                                      xlat_address_16bit:
0000E2EB: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000E2F2: 0F 84 6E 26 FF FF                                     	je	invalid_address_size
0000E2F8: E8 5C 32 00 00                                        	call	address_16bit_prefix
                                                                      xlat_store:
0000E2FD: E8 CC 2B 00 00                                        	call	store_segment_prefix_if_necessary
0000E302: B0 D7                                                 	mov	al,0D7h
0000E304: 80 3D A4 A2 01 00 01                                  	cmp	[operand_size],1
0000E30B: 0F 86 67 D0 FF FF                                     	jbe	simple_instruction
0000E311: E9 32 26 FF FF                                        	jmp	invalid_operand_size
                                                                
                                                                pm_word_instruction:
0000E316: 88 C4                                                 	mov	ah,al
0000E318: C0 EC 04                                              	shr	ah,4
0000E31B: 24 07                                                 	and	al,111b
0000E31D: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000E324: 88 25 B0 A2 01 00                                     	mov	[extended_code],ah
0000E32A: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000E32F: AC                                                    	lods	byte [esi]
0000E330: E8 FF 29 00 00                                        	call	get_size_operator
0000E335: 3C 10                                                 	cmp	al,10h
0000E337: 74 23                                                 	je	pm_reg
                                                                      pm_mem:
0000E339: 3C 5B                                                 	cmp	al,'['
0000E33B: 0F 85 FD 25 FF FF                                     	jne	invalid_operand
0000E341: E8 4A 2A 00 00                                        	call	get_address
0000E346: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000E34B: 3C 02                                                 	cmp	al,2
0000E34D: 74 08                                                 	je	pm_mem_store
0000E34F: 08 C0                                                 	or	al,al
0000E351: 0F 85 F1 25 FF FF                                     	jnz	invalid_operand_size
                                                                      pm_mem_store:
0000E357: E9 C8 D1 FF FF                                        	jmp	instruction_ready
                                                                      pm_reg:
0000E35C: AC                                                    	lods	byte [esi]
0000E35D: E8 2B 29 00 00                                        	call	convert_register
0000E362: 88 C3                                                 	mov	bl,al
0000E364: 80 FC 02                                              	cmp	ah,2
0000E367: 0F 85 DB 25 FF FF                                     	jne	invalid_operand_size
0000E36D: E9 8D D3 FF FF                                        	jmp	nomem_instruction_ready
                                                                pm_store_word_instruction:
0000E372: 88 C4                                                 	mov	ah,al
0000E374: C0 EC 04                                              	shr	ah,4
0000E377: 24 07                                                 	and	al,111b
0000E379: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000E380: 88 25 B0 A2 01 00                                     	mov	[extended_code],ah
0000E386: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000E38B: AC                                                    	lods	byte [esi]
0000E38C: E8 A3 29 00 00                                        	call	get_size_operator
0000E391: 3C 10                                                 	cmp	al,10h
0000E393: 75 A4                                                 	jne	pm_mem
0000E395: AC                                                    	lods	byte [esi]
0000E396: E8 F2 28 00 00                                        	call	convert_register
0000E39B: 88 C3                                                 	mov	bl,al
0000E39D: 88 E0                                                 	mov	al,ah
0000E39F: E8 19 2B 00 00                                        	call	operand_autodetect
0000E3A4: E9 56 D3 FF FF                                        	jmp	nomem_instruction_ready
                                                                lgdt_instruction:
0000E3A9: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000E3B0: C6 05 B0 A2 01 00 01                                  	mov	[extended_code],1
0000E3B7: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000E3BC: AC                                                    	lods	byte [esi]
0000E3BD: E8 72 29 00 00                                        	call	get_size_operator
0000E3C2: 3C 5B                                                 	cmp	al,'['
0000E3C4: 0F 85 74 25 FF FF                                     	jne	invalid_operand
0000E3CA: E8 C1 29 00 00                                        	call	get_address
0000E3CF: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000E3D4: 3C 06                                                 	cmp	al,6
0000E3D6: 74 1D                                                 	je	lgdt_mem_48bit
0000E3D8: 3C 0A                                                 	cmp	al,10
0000E3DA: 74 0A                                                 	je	lgdt_mem_80bit
0000E3DC: 08 C0                                                 	or	al,al
0000E3DE: 0F 85 64 25 FF FF                                     	jnz	invalid_operand_size
0000E3E4: EB 2A                                                 	jmp	lgdt_mem_store
                                                                      lgdt_mem_80bit:
0000E3E6: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000E3ED: 0F 85 41 25 FF FF                                     	jne	illegal_instruction
0000E3F3: EB 1B                                                 	jmp	lgdt_mem_store
                                                                      lgdt_mem_48bit:
0000E3F5: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000E3FC: 0F 84 32 25 FF FF                                     	je	illegal_instruction
0000E402: 80 3D B2 A2 01 00 02                                  	cmp	[postbyte_register],2
0000E409: 72 05                                                 	jb	lgdt_mem_store
0000E40B: E8 87 2A 00 00                                        	call	operand_32bit
                                                                      lgdt_mem_store:
0000E410: E9 0F D1 FF FF                                        	jmp	instruction_ready
                                                                lar_instruction:
0000E415: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000E41A: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000E421: E8 58 28 00 00                                        	call	take_register
0000E426: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000E42B: AC                                                    	lods	byte [esi]
0000E42C: 3C 2C                                                 	cmp	al,','
0000E42E: 0F 85 0A 25 FF FF                                     	jne	invalid_operand
0000E434: 30 C0                                                 	xor	al,al
0000E436: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
0000E43C: E8 7C 2A 00 00                                        	call	operand_autodetect
0000E441: AC                                                    	lods	byte [esi]
0000E442: E8 ED 28 00 00                                        	call	get_size_operator
0000E447: 3C 10                                                 	cmp	al,10h
0000E449: 74 23                                                 	je	lar_reg_reg
0000E44B: 3C 5B                                                 	cmp	al,'['
0000E44D: 0F 85 EB 24 FF FF                                     	jne	invalid_operand
0000E453: E8 38 29 00 00                                        	call	get_address
0000E458: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000E45D: 08 C0                                                 	or	al,al
0000E45F: 74 08                                                 	jz	lar_reg_mem
0000E461: 3C 02                                                 	cmp	al,2
0000E463: 0F 85 DF 24 FF FF                                     	jne	invalid_operand_size
                                                                      lar_reg_mem:
0000E469: E9 B6 D0 FF FF                                        	jmp	instruction_ready
                                                                      lar_reg_reg:
0000E46E: AC                                                    	lods	byte [esi]
0000E46F: E8 19 28 00 00                                        	call	convert_register
0000E474: 80 FC 02                                              	cmp	ah,2
0000E477: 0F 85 CB 24 FF FF                                     	jne	invalid_operand_size
0000E47D: 88 C3                                                 	mov	bl,al
0000E47F: E9 7B D2 FF FF                                        	jmp	nomem_instruction_ready
                                                                invlpg_instruction:
0000E484: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000E48B: C6 05 B0 A2 01 00 01                                  	mov	[extended_code],1
0000E492: C6 05 B2 A2 01 00 07                                  	mov	[postbyte_register],7
0000E499: AC                                                    	lods	byte [esi]
0000E49A: E8 95 28 00 00                                        	call	get_size_operator
0000E49F: 3C 5B                                                 	cmp	al,'['
0000E4A1: 0F 85 97 24 FF FF                                     	jne	invalid_operand
0000E4A7: E8 E4 28 00 00                                        	call	get_address
0000E4AC: E9 73 D0 FF FF                                        	jmp	instruction_ready
                                                                simple_instruction_f2_0f_01:
0000E4B1: C6 07 F2                                              	mov	byte [edi],0F2h
0000E4B4: 47                                                    	inc	edi
0000E4B5: EB 13                                                 	jmp	simple_instruction_0f_01
                                                                simple_instruction_f3_0f_01:
0000E4B7: C6 07 F3                                              	mov	byte [edi],0F3h
0000E4BA: 47                                                    	inc	edi
0000E4BB: EB 0D                                                 	jmp	simple_instruction_0f_01
                                                                swapgs_instruction:
0000E4BD: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000E4C4: 0F 85 6A 24 FF FF                                     	jne	illegal_instruction
                                                                simple_instruction_0f_01:
0000E4CA: 88 C4                                                 	mov	ah,al
0000E4CC: B0 0F                                                 	mov	al,0Fh
0000E4CE: AA                                                    	stos	byte [edi]
0000E4CF: B0 01                                                 	mov	al,1
0000E4D1: 66 AB                                                 	stos	word [edi]
0000E4D3: E9 A2 6A FF FF                                        	jmp	instruction_assembled
                                                                
                                                                basic_486_instruction:
0000E4D8: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000E4DF: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000E4E4: AC                                                    	lods	byte [esi]
0000E4E5: E8 4A 28 00 00                                        	call	get_size_operator
0000E4EA: 3C 10                                                 	cmp	al,10h
0000E4EC: 74 3C                                                 	je	basic_486_reg
0000E4EE: 3C 5B                                                 	cmp	al,'['
0000E4F0: 0F 85 48 24 FF FF                                     	jne	invalid_operand
0000E4F6: E8 95 28 00 00                                        	call	get_address
0000E4FB: 52 53 51                                              	push	edx ebx ecx
0000E4FE: AC                                                    	lods	byte [esi]
0000E4FF: 3C 2C                                                 	cmp	al,','
0000E501: 0F 85 37 24 FF FF                                     	jne	invalid_operand
0000E507: E8 72 27 00 00                                        	call	take_register
0000E50C: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000E511: 59 5B 5A                                              	pop	ecx ebx edx
0000E514: 88 E0                                                 	mov	al,ah
0000E516: 3C 01                                                 	cmp	al,1
0000E518: 74 0B                                                 	je	basic_486_mem_reg_8bit
0000E51A: E8 9E 29 00 00                                        	call	operand_autodetect
0000E51F: FE 05 B0 A2 01 00                                     	inc	[extended_code]
                                                                      basic_486_mem_reg_8bit:
0000E525: E9 FA CF FF FF                                        	jmp	instruction_ready
                                                                      basic_486_reg:
0000E52A: AC                                                    	lods	byte [esi]
0000E52B: E8 5D 27 00 00                                        	call	convert_register
0000E530: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000E535: AC                                                    	lods	byte [esi]
0000E536: 3C 2C                                                 	cmp	al,','
0000E538: 0F 85 00 24 FF FF                                     	jne	invalid_operand
0000E53E: E8 3B 27 00 00                                        	call	take_register
0000E543: 88 C3                                                 	mov	bl,al
0000E545: 86 1D B2 A2 01 00                                     	xchg	bl,[postbyte_register]
0000E54B: 88 E0                                                 	mov	al,ah
0000E54D: 3C 01                                                 	cmp	al,1
0000E54F: 74 0B                                                 	je	basic_486_reg_reg_8bit
0000E551: E8 67 29 00 00                                        	call	operand_autodetect
0000E556: FE 05 B0 A2 01 00                                     	inc	[extended_code]
                                                                      basic_486_reg_reg_8bit:
0000E55C: E9 9E D1 FF FF                                        	jmp	nomem_instruction_ready
                                                                bswap_instruction:
0000E561: E8 18 27 00 00                                        	call	take_register
0000E566: A8 08                                                 	test	al,1000b
0000E568: 74 09                                                 	jz	bswap_reg_code_ok
0000E56A: 80 0D A7 A2 01 00 41                                  	or	[rex_prefix],41h
0000E571: 24 07                                                 	and	al,111b
                                                                      bswap_reg_code_ok:
0000E573: 04 C8                                                 	add	al,0C8h
0000E575: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000E57A: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000E581: 80 FC 08                                              	cmp	ah,8
0000E584: 74 18                                                 	je	bswap_reg64
0000E586: 80 FC 04                                              	cmp	ah,4
0000E589: 0F 85 B9 23 FF FF                                     	jne	invalid_operand_size
0000E58F: E8 03 29 00 00                                        	call	operand_32bit
0000E594: E8 A4 29 00 00                                        	call	store_classic_instruction_code
0000E599: E9 DC 69 FF FF                                        	jmp	instruction_assembled
                                                                      bswap_reg64:
0000E59E: E8 05 29 00 00                                        	call	operand_64bit
0000E5A3: E8 95 29 00 00                                        	call	store_classic_instruction_code
0000E5A8: E9 CD 69 FF FF                                        	jmp	instruction_assembled
                                                                cmpxchgx_instruction:
0000E5AD: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000E5B4: C6 05 B0 A2 01 00 C7                                  	mov	[extended_code],0C7h
0000E5BB: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000E5C0: AC                                                    	lods	byte [esi]
0000E5C1: E8 6E 27 00 00                                        	call	get_size_operator
0000E5C6: 3C 5B                                                 	cmp	al,'['
0000E5C8: 0F 85 70 23 FF FF                                     	jne	invalid_operand
0000E5CE: E8 BD 27 00 00                                        	call	get_address
0000E5D3: B4 01                                                 	mov	ah,1
0000E5D5: 86 25 B2 A2 01 00                                     	xchg	[postbyte_register],ah
0000E5DB: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000E5E0: 08 C0                                                 	or	al,al
0000E5E2: 74 08                                                 	jz	cmpxchgx_size_ok
0000E5E4: 38 E0                                                 	cmp	al,ah
0000E5E6: 0F 85 5C 23 FF FF                                     	jne	invalid_operand_size
                                                                      cmpxchgx_size_ok:
0000E5EC: 80 FC 10                                              	cmp	ah,16
0000E5EF: 75 05                                                 	jne	cmpxchgx_store
0000E5F1: E8 B2 28 00 00                                        	call	operand_64bit
                                                                      cmpxchgx_store:
0000E5F6: E9 29 CF FF FF                                        	jmp	instruction_ready
                                                                nop_instruction:
0000E5FB: 8A 26                                                 	mov	ah,[esi]
0000E5FD: 80 FC 10                                              	cmp	ah,10h
0000E600: 74 10                                                 	je	extended_nop
0000E602: 80 FC 11                                              	cmp	ah,11h
0000E605: 74 0B                                                 	je	extended_nop
0000E607: 80 FC 5B                                              	cmp	ah,'['
0000E60A: 74 06                                                 	je	extended_nop
0000E60C: AA                                                    	stos	byte [edi]
0000E60D: E9 68 69 FF FF                                        	jmp	instruction_assembled
                                                                      extended_nop:
0000E612: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000E619: C6 05 B0 A2 01 00 1F                                  	mov	[extended_code],1Fh
0000E620: C6 05 B2 A2 01 00 00                                  	mov	[postbyte_register],0
0000E627: AC                                                    	lods	byte [esi]
0000E628: E8 07 27 00 00                                        	call	get_size_operator
0000E62D: 3C 10                                                 	cmp	al,10h
0000E62F: 74 20                                                 	je	extended_nop_reg
0000E631: 3C 5B                                                 	cmp	al,'['
0000E633: 0F 85 05 23 FF FF                                     	jne	invalid_operand
0000E639: E8 52 27 00 00                                        	call	get_address
0000E63E: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000E643: 08 C0                                                 	or	al,al
0000E645: 74 05                                                 	jz	extended_nop_store
0000E647: E8 71 28 00 00                                        	call	operand_autodetect
                                                                      extended_nop_store:
0000E64C: E9 D3 CE FF FF                                        	jmp	instruction_ready
                                                                      extended_nop_reg:
0000E651: AC                                                    	lods	byte [esi]
0000E652: E8 36 26 00 00                                        	call	convert_register
0000E657: 88 C3                                                 	mov	bl,al
0000E659: 88 E0                                                 	mov	al,ah
0000E65B: E8 5D 28 00 00                                        	call	operand_autodetect
0000E660: E9 9A D0 FF FF                                        	jmp	nomem_instruction_ready
                                                                
                                                                basic_fpu_instruction:
0000E665: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000E66A: C6 05 AF A2 01 00 D8                                  	mov	[base_code],0D8h
0000E671: AC                                                    	lods	byte [esi]
0000E672: E8 BD 26 00 00                                        	call	get_size_operator
0000E677: 3C 10                                                 	cmp	al,10h
0000E679: 74 54                                                 	je	basic_fpu_streg
0000E67B: 3C 5B                                                 	cmp	al,'['
0000E67D: 74 20                                                 	je	basic_fpu_mem
0000E67F: 4E                                                    	dec	esi
0000E680: 8A 25 B2 A2 01 00                                     	mov	ah,[postbyte_register]
0000E686: 80 FC 02                                              	cmp	ah,2
0000E689: 0F 82 AF 22 FF FF                                     	jb	invalid_operand
0000E68F: 80 FC 03                                              	cmp	ah,3
0000E692: 0F 87 A6 22 FF FF                                     	ja	invalid_operand
0000E698: B3 01                                                 	mov	bl,1
0000E69A: E9 60 D0 FF FF                                        	jmp	nomem_instruction_ready
                                                                      basic_fpu_mem:
0000E69F: E8 EC 26 00 00                                        	call	get_address
0000E6A4: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000E6A9: 3C 04                                                 	cmp	al,4
0000E6AB: 74 11                                                 	je	basic_fpu_mem_32bit
0000E6AD: 3C 08                                                 	cmp	al,8
0000E6AF: 74 12                                                 	je	basic_fpu_mem_64bit
0000E6B1: 08 C0                                                 	or	al,al
0000E6B3: 0F 85 8F 22 FF FF                                     	jnz	invalid_operand_size
0000E6B9: E8 B0 D1 FF FF                                        	call	recoverable_unknown_size
                                                                      basic_fpu_mem_32bit:
0000E6BE: E9 61 CE FF FF                                        	jmp	instruction_ready
                                                                      basic_fpu_mem_64bit:
0000E6C3: C6 05 AF A2 01 00 DC                                  	mov	[base_code],0DCh
0000E6CA: E9 55 CE FF FF                                        	jmp	instruction_ready
                                                                      basic_fpu_streg:
0000E6CF: AC                                                    	lods	byte [esi]
0000E6D0: E8 08 26 00 00                                        	call	convert_fpu_register
0000E6D5: 88 C3                                                 	mov	bl,al
0000E6D7: 8A 25 B2 A2 01 00                                     	mov	ah,[postbyte_register]
0000E6DD: 80 FC 02                                              	cmp	ah,2
0000E6E0: 74 65                                                 	je	basic_fpu_single_streg
0000E6E2: 80 FC 03                                              	cmp	ah,3
0000E6E5: 74 60                                                 	je	basic_fpu_single_streg
0000E6E7: 08 C0                                                 	or	al,al
0000E6E9: 74 3D                                                 	jz	basic_fpu_st0
0000E6EB: F6 C4 06                                              	test	ah,110b
0000E6EE: 74 07                                                 	jz	basic_fpu_streg_st0
0000E6F0: 80 35 B2 A2 01 00 01                                  	xor	[postbyte_register],1
                                                                      basic_fpu_streg_st0:
0000E6F7: AC                                                    	lods	byte [esi]
0000E6F8: 3C 2C                                                 	cmp	al,','
0000E6FA: 0F 85 3E 22 FF FF                                     	jne	invalid_operand
0000E700: AC                                                    	lods	byte [esi]
0000E701: E8 2E 26 00 00                                        	call	get_size_operator
0000E706: 3C 10                                                 	cmp	al,10h
0000E708: 0F 85 30 22 FF FF                                     	jne	invalid_operand
0000E70E: AC                                                    	lods	byte [esi]
0000E70F: E8 C9 25 00 00                                        	call	convert_fpu_register
0000E714: 08 C0                                                 	or	al,al
0000E716: 0F 85 22 22 FF FF                                     	jnz	invalid_operand
0000E71C: C6 05 AF A2 01 00 DC                                  	mov	[base_code],0DCh
0000E723: E9 D7 CF FF FF                                        	jmp	nomem_instruction_ready
                                                                      basic_fpu_st0:
0000E728: AC                                                    	lods	byte [esi]
0000E729: 3C 2C                                                 	cmp	al,','
0000E72B: 0F 85 0D 22 FF FF                                     	jne	invalid_operand
0000E731: AC                                                    	lods	byte [esi]
0000E732: E8 FD 25 00 00                                        	call	get_size_operator
0000E737: 3C 10                                                 	cmp	al,10h
0000E739: 0F 85 FF 21 FF FF                                     	jne	invalid_operand
0000E73F: AC                                                    	lods	byte [esi]
0000E740: E8 98 25 00 00                                        	call	convert_fpu_register
0000E745: 88 C3                                                 	mov	bl,al
                                                                      basic_fpu_single_streg:
0000E747: C6 05 AF A2 01 00 D8                                  	mov	[base_code],0D8h
0000E74E: E9 AC CF FF FF                                        	jmp	nomem_instruction_ready
                                                                simple_fpu_instruction:
0000E753: 88 C4                                                 	mov	ah,al
0000E755: 80 CC C0                                              	or	ah,11000000b
0000E758: B0 D9                                                 	mov	al,0D9h
0000E75A: 66 AB                                                 	stos	word [edi]
0000E75C: E9 19 68 FF FF                                        	jmp	instruction_assembled
                                                                fi_instruction:
0000E761: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000E766: AC                                                    	lods	byte [esi]
0000E767: E8 C8 25 00 00                                        	call	get_size_operator
0000E76C: 3C 5B                                                 	cmp	al,'['
0000E76E: 0F 85 CA 21 FF FF                                     	jne	invalid_operand
0000E774: E8 17 26 00 00                                        	call	get_address
0000E779: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000E77E: 3C 02                                                 	cmp	al,2
0000E780: 74 1D                                                 	je	fi_mem_16bit
0000E782: 3C 04                                                 	cmp	al,4
0000E784: 74 0D                                                 	je	fi_mem_32bit
0000E786: 08 C0                                                 	or	al,al
0000E788: 0F 85 BA 21 FF FF                                     	jnz	invalid_operand_size
0000E78E: E8 DB D0 FF FF                                        	call	recoverable_unknown_size
                                                                      fi_mem_32bit:
0000E793: C6 05 AF A2 01 00 DA                                  	mov	[base_code],0DAh
0000E79A: E9 85 CD FF FF                                        	jmp	instruction_ready
                                                                      fi_mem_16bit:
0000E79F: C6 05 AF A2 01 00 DE                                  	mov	[base_code],0DEh
0000E7A6: E9 79 CD FF FF                                        	jmp	instruction_ready
                                                                fld_instruction:
0000E7AB: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000E7B0: AC                                                    	lods	byte [esi]
0000E7B1: E8 7E 25 00 00                                        	call	get_size_operator
0000E7B6: 3C 10                                                 	cmp	al,10h
0000E7B8: 74 6E                                                 	je	fld_streg
0000E7BA: 3C 5B                                                 	cmp	al,'['
0000E7BC: 0F 85 7C 21 FF FF                                     	jne	invalid_operand
0000E7C2: E8 C9 25 00 00                                        	call	get_address
0000E7C7: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000E7CC: 3C 04                                                 	cmp	al,4
0000E7CE: 74 15                                                 	je	fld_mem_32bit
0000E7D0: 3C 08                                                 	cmp	al,8
0000E7D2: 74 1D                                                 	je	fld_mem_64bit
0000E7D4: 3C 0A                                                 	cmp	al,10
0000E7D6: 74 25                                                 	je	fld_mem_80bit
0000E7D8: 08 C0                                                 	or	al,al
0000E7DA: 0F 85 68 21 FF FF                                     	jnz	invalid_operand_size
0000E7E0: E8 89 D0 FF FF                                        	call	recoverable_unknown_size
                                                                      fld_mem_32bit:
0000E7E5: C6 05 AF A2 01 00 D9                                  	mov	[base_code],0D9h
0000E7EC: E9 33 CD FF FF                                        	jmp	instruction_ready
                                                                      fld_mem_64bit:
0000E7F1: C6 05 AF A2 01 00 DD                                  	mov	[base_code],0DDh
0000E7F8: E9 27 CD FF FF                                        	jmp	instruction_ready
                                                                      fld_mem_80bit:
0000E7FD: A0 B2 A2 01 00                                        	mov	al,[postbyte_register]
0000E802: 3C 00                                                 	cmp	al,0
0000E804: 74 0F                                                 	je	fld_mem_80bit_store
0000E806: FE 0D B2 A2 01 00                                     	dec	[postbyte_register]
0000E80C: 3C 03                                                 	cmp	al,3
0000E80E: 74 05                                                 	je	fld_mem_80bit_store
0000E810: E9 33 21 FF FF                                        	jmp	invalid_operand_size
                                                                      fld_mem_80bit_store:
0000E815: 80 05 B2 A2 01 00 05                                  	add	[postbyte_register],5
0000E81C: C6 05 AF A2 01 00 DB                                  	mov	[base_code],0DBh
0000E823: E9 FC CC FF FF                                        	jmp	instruction_ready
                                                                      fld_streg:
0000E828: AC                                                    	lods	byte [esi]
0000E829: E8 AF 24 00 00                                        	call	convert_fpu_register
0000E82E: 88 C3                                                 	mov	bl,al
0000E830: 80 3D B2 A2 01 00 02                                  	cmp	[postbyte_register],2
0000E837: 73 0C                                                 	jae	fst_streg
0000E839: C6 05 AF A2 01 00 D9                                  	mov	[base_code],0D9h
0000E840: E9 BA CE FF FF                                        	jmp	nomem_instruction_ready
                                                                      fst_streg:
0000E845: C6 05 AF A2 01 00 DD                                  	mov	[base_code],0DDh
0000E84C: E9 AE CE FF FF                                        	jmp	nomem_instruction_ready
                                                                fild_instruction:
0000E851: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000E856: AC                                                    	lods	byte [esi]
0000E857: E8 D8 24 00 00                                        	call	get_size_operator
0000E85C: 3C 5B                                                 	cmp	al,'['
0000E85E: 0F 85 DA 20 FF FF                                     	jne	invalid_operand
0000E864: E8 27 25 00 00                                        	call	get_address
0000E869: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000E86E: 3C 02                                                 	cmp	al,2
0000E870: 74 21                                                 	je	fild_mem_16bit
0000E872: 3C 04                                                 	cmp	al,4
0000E874: 74 11                                                 	je	fild_mem_32bit
0000E876: 3C 08                                                 	cmp	al,8
0000E878: 74 25                                                 	je	fild_mem_64bit
0000E87A: 08 C0                                                 	or	al,al
0000E87C: 0F 85 C6 20 FF FF                                     	jnz	invalid_operand_size
0000E882: E8 E7 CF FF FF                                        	call	recoverable_unknown_size
                                                                      fild_mem_32bit:
0000E887: C6 05 AF A2 01 00 DB                                  	mov	[base_code],0DBh
0000E88E: E9 91 CC FF FF                                        	jmp	instruction_ready
                                                                      fild_mem_16bit:
0000E893: C6 05 AF A2 01 00 DF                                  	mov	[base_code],0DFh
0000E89A: E9 85 CC FF FF                                        	jmp	instruction_ready
                                                                      fild_mem_64bit:
0000E89F: A0 B2 A2 01 00                                        	mov	al,[postbyte_register]
0000E8A4: 3C 01                                                 	cmp	al,1
0000E8A6: 74 24                                                 	je	fisttp_64bit_store
0000E8A8: 72 0F                                                 	jb	fild_mem_64bit_store
0000E8AA: FE 0D B2 A2 01 00                                     	dec	[postbyte_register]
0000E8B0: 3C 03                                                 	cmp	al,3
0000E8B2: 74 05                                                 	je	fild_mem_64bit_store
0000E8B4: E9 8F 20 FF FF                                        	jmp	invalid_operand_size
                                                                      fild_mem_64bit_store:
0000E8B9: 80 05 B2 A2 01 00 05                                  	add	[postbyte_register],5
0000E8C0: C6 05 AF A2 01 00 DF                                  	mov	[base_code],0DFh
0000E8C7: E9 58 CC FF FF                                        	jmp	instruction_ready
                                                                      fisttp_64bit_store:
0000E8CC: C6 05 AF A2 01 00 DD                                  	mov	[base_code],0DDh
0000E8D3: E9 4C CC FF FF                                        	jmp	instruction_ready
                                                                fbld_instruction:
0000E8D8: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000E8DD: AC                                                    	lods	byte [esi]
0000E8DE: E8 51 24 00 00                                        	call	get_size_operator
0000E8E3: 3C 5B                                                 	cmp	al,'['
0000E8E5: 0F 85 53 20 FF FF                                     	jne	invalid_operand
0000E8EB: E8 A0 24 00 00                                        	call	get_address
0000E8F0: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000E8F5: 08 C0                                                 	or	al,al
0000E8F7: 74 09                                                 	jz	fbld_mem_80bit
0000E8F9: 3C 0A                                                 	cmp	al,10
0000E8FB: 74 05                                                 	je	fbld_mem_80bit
0000E8FD: E9 46 20 FF FF                                        	jmp	invalid_operand_size
                                                                      fbld_mem_80bit:
0000E902: C6 05 AF A2 01 00 DF                                  	mov	[base_code],0DFh
0000E909: E9 16 CC FF FF                                        	jmp	instruction_ready
                                                                faddp_instruction:
0000E90E: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000E913: C6 05 AF A2 01 00 DE                                  	mov	[base_code],0DEh
0000E91A: 89 F2                                                 	mov	edx,esi
0000E91C: AC                                                    	lods	byte [esi]
0000E91D: E8 12 24 00 00                                        	call	get_size_operator
0000E922: 3C 10                                                 	cmp	al,10h
0000E924: 74 09                                                 	je	faddp_streg
0000E926: 89 D6                                                 	mov	esi,edx
0000E928: B3 01                                                 	mov	bl,1
0000E92A: E9 D0 CD FF FF                                        	jmp	nomem_instruction_ready
                                                                      faddp_streg:
0000E92F: AC                                                    	lods	byte [esi]
0000E930: E8 A8 23 00 00                                        	call	convert_fpu_register
0000E935: 88 C3                                                 	mov	bl,al
0000E937: AC                                                    	lods	byte [esi]
0000E938: 3C 2C                                                 	cmp	al,','
0000E93A: 0F 85 FE 1F FF FF                                     	jne	invalid_operand
0000E940: AC                                                    	lods	byte [esi]
0000E941: E8 EE 23 00 00                                        	call	get_size_operator
0000E946: 3C 10                                                 	cmp	al,10h
0000E948: 0F 85 F0 1F FF FF                                     	jne	invalid_operand
0000E94E: AC                                                    	lods	byte [esi]
0000E94F: E8 89 23 00 00                                        	call	convert_fpu_register
0000E954: 08 C0                                                 	or	al,al
0000E956: 0F 85 E2 1F FF FF                                     	jnz	invalid_operand
0000E95C: E9 9E CD FF FF                                        	jmp	nomem_instruction_ready
                                                                fcompp_instruction:
0000E961: 66 B8 DE D9                                           	mov	ax,0D9DEh
0000E965: 66 AB                                                 	stos	word [edi]
0000E967: E9 0E 66 FF FF                                        	jmp	instruction_assembled
                                                                fucompp_instruction:
0000E96C: 66 B8 DA E9                                           	mov	ax,0E9DAh
0000E970: 66 AB                                                 	stos	word [edi]
0000E972: E9 03 66 FF FF                                        	jmp	instruction_assembled
                                                                fxch_instruction:
0000E977: 66 BA D9 01                                           	mov	dx,01D9h
0000E97B: EB 0A                                                 	jmp	fpu_single_operand
                                                                ffreep_instruction:
0000E97D: 66 BA DF 00                                           	mov	dx,00DFh
0000E981: EB 04                                                 	jmp	fpu_single_operand
                                                                ffree_instruction:
0000E983: B2 DD                                                 	mov	dl,0DDh
0000E985: 88 C6                                                 	mov	dh,al
                                                                      fpu_single_operand:
0000E987: 89 F3                                                 	mov	ebx,esi
0000E989: AC                                                    	lods	byte [esi]
0000E98A: E8 A5 23 00 00                                        	call	get_size_operator
0000E98F: 3C 10                                                 	cmp	al,10h
0000E991: 74 1A                                                 	je	fpu_streg
0000E993: 08 F6                                                 	or	dh,dh
0000E995: 0F 84 A3 1F FF FF                                     	jz	invalid_operand
0000E99B: 89 DE                                                 	mov	esi,ebx
0000E99D: C0 E6 03                                              	shl	dh,3
0000E9A0: 80 CE C1                                              	or	dh,11000001b
0000E9A3: 66 89 D0                                              	mov	ax,dx
0000E9A6: 66 AB                                                 	stos	word [edi]
0000E9A8: E9 CD 65 FF FF                                        	jmp	instruction_assembled
                                                                      fpu_streg:
0000E9AD: AC                                                    	lods	byte [esi]
0000E9AE: E8 2A 23 00 00                                        	call	convert_fpu_register
0000E9B3: C0 E6 03                                              	shl	dh,3
0000E9B6: 08 C6                                                 	or	dh,al
0000E9B8: 80 CE C0                                              	or	dh,11000000b
0000E9BB: 66 89 D0                                              	mov	ax,dx
0000E9BE: 66 AB                                                 	stos	word [edi]
0000E9C0: E9 B5 65 FF FF                                        	jmp	instruction_assembled
                                                                
                                                                fstenv_instruction:
0000E9C5: C6 07 9B                                              	mov	byte [edi],9Bh
0000E9C8: 47                                                    	inc	edi
                                                                fldenv_instruction:
0000E9C9: C6 05 AF A2 01 00 D9                                  	mov	[base_code],0D9h
0000E9D0: EB 37                                                 	jmp	fpu_mem
                                                                fstenv_instruction_16bit:
0000E9D2: C6 07 9B                                              	mov	byte [edi],9Bh
0000E9D5: 47                                                    	inc	edi
                                                                fldenv_instruction_16bit:
0000E9D6: E8 AB 24 00 00                                        	call	operand_16bit
0000E9DB: EB EC                                                 	jmp	fldenv_instruction
                                                                fstenv_instruction_32bit:
0000E9DD: C6 07 9B                                              	mov	byte [edi],9Bh
0000E9E0: 47                                                    	inc	edi
                                                                fldenv_instruction_32bit:
0000E9E1: E8 B1 24 00 00                                        	call	operand_32bit
0000E9E6: EB E1                                                 	jmp	fldenv_instruction
                                                                fsave_instruction_32bit:
0000E9E8: C6 07 9B                                              	mov	byte [edi],9Bh
0000E9EB: 47                                                    	inc	edi
                                                                fnsave_instruction_32bit:
0000E9EC: E8 A6 24 00 00                                        	call	operand_32bit
0000E9F1: EB 0F                                                 	jmp	fnsave_instruction
                                                                fsave_instruction_16bit:
0000E9F3: C6 07 9B                                              	mov	byte [edi],9Bh
0000E9F6: 47                                                    	inc	edi
                                                                fnsave_instruction_16bit:
0000E9F7: E8 8A 24 00 00                                        	call	operand_16bit
0000E9FC: EB 04                                                 	jmp	fnsave_instruction
                                                                fsave_instruction:
0000E9FE: C6 07 9B                                              	mov	byte [edi],9Bh
0000EA01: 47                                                    	inc	edi
                                                                fnsave_instruction:
0000EA02: C6 05 AF A2 01 00 DD                                  	mov	[base_code],0DDh
                                                                      fpu_mem:
0000EA09: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000EA0E: AC                                                    	lods	byte [esi]
0000EA0F: E8 20 23 00 00                                        	call	get_size_operator
0000EA14: 3C 5B                                                 	cmp	al,'['
0000EA16: 0F 85 22 1F FF FF                                     	jne	invalid_operand
0000EA1C: E8 6F 23 00 00                                        	call	get_address
0000EA21: 80 3D A4 A2 01 00 00                                  	cmp	[operand_size],0
0000EA28: 0F 85 1A 1F FF FF                                     	jne	invalid_operand_size
0000EA2E: E9 F1 CA FF FF                                        	jmp	instruction_ready
                                                                fstcw_instruction:
0000EA33: C6 07 9B                                              	mov	byte [edi],9Bh
0000EA36: 47                                                    	inc	edi
                                                                fldcw_instruction:
0000EA37: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000EA3C: C6 05 AF A2 01 00 D9                                  	mov	[base_code],0D9h
0000EA43: AC                                                    	lods	byte [esi]
0000EA44: E8 EB 22 00 00                                        	call	get_size_operator
0000EA49: 3C 5B                                                 	cmp	al,'['
0000EA4B: 0F 85 ED 1E FF FF                                     	jne	invalid_operand
0000EA51: E8 3A 23 00 00                                        	call	get_address
0000EA56: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000EA5B: 08 C0                                                 	or	al,al
0000EA5D: 74 09                                                 	jz	fldcw_mem_16bit
0000EA5F: 3C 02                                                 	cmp	al,2
0000EA61: 74 05                                                 	je	fldcw_mem_16bit
0000EA63: E9 E0 1E FF FF                                        	jmp	invalid_operand_size
                                                                      fldcw_mem_16bit:
0000EA68: E9 B7 CA FF FF                                        	jmp	instruction_ready
                                                                fstsw_instruction:
0000EA6D: B0 9B                                                 	mov	al,9Bh
0000EA6F: AA                                                    	stos	byte [edi]
                                                                fnstsw_instruction:
0000EA70: C6 05 AF A2 01 00 DD                                  	mov	[base_code],0DDh
0000EA77: C6 05 B2 A2 01 00 07                                  	mov	[postbyte_register],7
0000EA7E: AC                                                    	lods	byte [esi]
0000EA7F: E8 B0 22 00 00                                        	call	get_size_operator
0000EA84: 3C 10                                                 	cmp	al,10h
0000EA86: 74 24                                                 	je	fstsw_reg
0000EA88: 3C 5B                                                 	cmp	al,'['
0000EA8A: 0F 85 AE 1E FF FF                                     	jne	invalid_operand
0000EA90: E8 FB 22 00 00                                        	call	get_address
0000EA95: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000EA9A: 08 C0                                                 	or	al,al
0000EA9C: 74 09                                                 	jz	fstsw_mem_16bit
0000EA9E: 3C 02                                                 	cmp	al,2
0000EAA0: 74 05                                                 	je	fstsw_mem_16bit
0000EAA2: E9 A1 1E FF FF                                        	jmp	invalid_operand_size
                                                                      fstsw_mem_16bit:
0000EAA7: E9 78 CA FF FF                                        	jmp	instruction_ready
                                                                      fstsw_reg:
0000EAAC: AC                                                    	lods	byte [esi]
0000EAAD: E8 DB 21 00 00                                        	call	convert_register
0000EAB2: 66 3D 00 02                                           	cmp	ax,0200h
0000EAB6: 0F 85 82 1E FF FF                                     	jne	invalid_operand
0000EABC: 66 B8 DF E0                                           	mov	ax,0E0DFh
0000EAC0: 66 AB                                                 	stos	word [edi]
0000EAC2: E9 B3 64 FF FF                                        	jmp	instruction_assembled
                                                                finit_instruction:
0000EAC7: C6 07 9B                                              	mov	byte [edi],9Bh
0000EACA: 47                                                    	inc	edi
                                                                fninit_instruction:
0000EACB: 88 C4                                                 	mov	ah,al
0000EACD: B0 DB                                                 	mov	al,0DBh
0000EACF: 66 AB                                                 	stos	word [edi]
0000EAD1: E9 A4 64 FF FF                                        	jmp	instruction_assembled
                                                                fcmov_instruction:
0000EAD6: B6 DA                                                 	mov	dh,0DAh
0000EAD8: EB 06                                                 	jmp	fcomi_streg
                                                                fcomi_instruction:
0000EADA: B6 DB                                                 	mov	dh,0DBh
0000EADC: EB 02                                                 	jmp	fcomi_streg
                                                                fcomip_instruction:
0000EADE: B6 DF                                                 	mov	dh,0DFh
                                                                      fcomi_streg:
0000EAE0: 88 C2                                                 	mov	dl,al
0000EAE2: AC                                                    	lods	byte [esi]
0000EAE3: E8 4C 22 00 00                                        	call	get_size_operator
0000EAE8: 3C 10                                                 	cmp	al,10h
0000EAEA: 0F 85 4E 1E FF FF                                     	jne	invalid_operand
0000EAF0: AC                                                    	lods	byte [esi]
0000EAF1: E8 E7 21 00 00                                        	call	convert_fpu_register
0000EAF6: 88 C4                                                 	mov	ah,al
0000EAF8: 80 3E 2C                                              	cmp	byte [esi],','
0000EAFB: 74 0B                                                 	je	fcomi_st0_streg
0000EAFD: 00 D4                                                 	add	ah,dl
0000EAFF: 88 F0                                                 	mov	al,dh
0000EB01: 66 AB                                                 	stos	word [edi]
0000EB03: E9 72 64 FF FF                                        	jmp	instruction_assembled
                                                                      fcomi_st0_streg:
0000EB08: 08 E4                                                 	or	ah,ah
0000EB0A: 0F 85 2E 1E FF FF                                     	jnz	invalid_operand
0000EB10: 46                                                    	inc	esi
0000EB11: AC                                                    	lods	byte [esi]
0000EB12: E8 1D 22 00 00                                        	call	get_size_operator
0000EB17: 3C 10                                                 	cmp	al,10h
0000EB19: 0F 85 1F 1E FF FF                                     	jne	invalid_operand
0000EB1F: AC                                                    	lods	byte [esi]
0000EB20: E8 B8 21 00 00                                        	call	convert_fpu_register
0000EB25: 88 C4                                                 	mov	ah,al
0000EB27: 00 D4                                                 	add	ah,dl
0000EB29: 88 F0                                                 	mov	al,dh
0000EB2B: 66 AB                                                 	stos	word [edi]
0000EB2D: E9 48 64 FF FF                                        	jmp	instruction_assembled
                                                                
                                                                basic_mmx_instruction:
0000EB32: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000EB39: A2 B0 A2 01 00                                        	mov	[extended_code],al
                                                                      mmx_instruction:
0000EB3E: AC                                                    	lods	byte [esi]
0000EB3F: E8 F0 21 00 00                                        	call	get_size_operator
0000EB44: 3C 10                                                 	cmp	al,10h
0000EB46: 0F 85 F2 1D FF FF                                     	jne	invalid_operand
0000EB4C: AC                                                    	lods	byte [esi]
0000EB4D: E8 9D 21 00 00                                        	call	convert_mmx_register
0000EB52: E8 AB 03 00 00                                        	call	make_mmx_prefix
0000EB57: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000EB5C: AC                                                    	lods	byte [esi]
0000EB5D: 3C 2C                                                 	cmp	al,','
0000EB5F: 0F 85 D9 1D FF FF                                     	jne	invalid_operand
0000EB65: AC                                                    	lods	byte [esi]
0000EB66: E8 C9 21 00 00                                        	call	get_size_operator
0000EB6B: 3C 10                                                 	cmp	al,10h
0000EB6D: 74 12                                                 	je	mmx_mmreg_mmreg
0000EB6F: 3C 5B                                                 	cmp	al,'['
0000EB71: 0F 85 C7 1D FF FF                                     	jne	invalid_operand
                                                                      mmx_mmreg_mem:
0000EB77: E8 14 22 00 00                                        	call	get_address
0000EB7C: E9 A3 C9 FF FF                                        	jmp	instruction_ready
                                                                      mmx_mmreg_mmreg:
0000EB81: AC                                                    	lods	byte [esi]
0000EB82: E8 68 21 00 00                                        	call	convert_mmx_register
0000EB87: 88 C3                                                 	mov	bl,al
0000EB89: E9 71 CB FF FF                                        	jmp	nomem_instruction_ready
                                                                mmx_bit_shift_instruction:
0000EB8E: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000EB95: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000EB9A: AC                                                    	lods	byte [esi]
0000EB9B: E8 94 21 00 00                                        	call	get_size_operator
0000EBA0: 3C 10                                                 	cmp	al,10h
0000EBA2: 0F 85 96 1D FF FF                                     	jne	invalid_operand
0000EBA8: AC                                                    	lods	byte [esi]
0000EBA9: E8 41 21 00 00                                        	call	convert_mmx_register
0000EBAE: E8 4F 03 00 00                                        	call	make_mmx_prefix
0000EBB3: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000EBB8: AC                                                    	lods	byte [esi]
0000EBB9: 3C 2C                                                 	cmp	al,','
0000EBBB: 0F 85 7D 1D FF FF                                     	jne	invalid_operand
0000EBC1: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000EBC8: AC                                                    	lods	byte [esi]
0000EBC9: E8 66 21 00 00                                        	call	get_size_operator
0000EBCE: 3C 10                                                 	cmp	al,10h
0000EBD0: 74 AF                                                 	je	mmx_mmreg_mmreg
0000EBD2: 3C 28                                                 	cmp	al,'('
0000EBD4: 74 09                                                 	je	mmx_ps_mmreg_imm8
0000EBD6: 3C 5B                                                 	cmp	al,'['
0000EBD8: 74 9D                                                 	je	mmx_mmreg_mem
0000EBDA: E9 5F 1D FF FF                                        	jmp	invalid_operand
                                                                      mmx_ps_mmreg_imm8:
0000EBDF: E8 D3 86 FF FF                                        	call	get_byte_value
0000EBE4: A2 00 A2 01 00                                        	mov	byte [value],al
0000EBE9: F6 05 A4 A2 01 00 FE                                  	test	[operand_size],not 1
0000EBF0: 0F 85 B6 1D FF FF                                     	jnz	invalid_value
0000EBF6: 8A 1D B0 A2 01 00                                     	mov	bl,[extended_code]
0000EBFC: 88 D8                                                 	mov	al,bl
0000EBFE: C0 EB 04                                              	shr	bl,4
0000EC01: 24 0F                                                 	and	al,1111b
0000EC03: 04 70                                                 	add	al,70h
0000EC05: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000EC0A: 80 EB 0C                                              	sub	bl,0Ch
0000EC0D: D0 E3                                                 	shl	bl,1
0000EC0F: 86 1D B2 A2 01 00                                     	xchg	bl,[postbyte_register]
0000EC15: E8 76 23 00 00                                        	call	store_nomem_instruction
0000EC1A: A0 00 A2 01 00                                        	mov	al,byte [value]
0000EC1F: AA                                                    	stos	byte [edi]
0000EC20: E9 55 63 FF FF                                        	jmp	instruction_assembled
                                                                pmovmskb_instruction:
0000EC25: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000EC2C: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000EC31: E8 48 20 00 00                                        	call	take_register
0000EC36: 80 FC 04                                              	cmp	ah,4
0000EC39: 74 16                                                 	je	pmovmskb_reg_size_ok
0000EC3B: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000EC42: 0F 85 00 1D FF FF                                     	jne	invalid_operand_size
0000EC48: 80 FC 08                                              	cmp	ah,8
0000EC4B: 0F 85 F7 1C FF FF                                     	jnz	invalid_operand_size
                                                                      pmovmskb_reg_size_ok:
0000EC51: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000EC56: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000EC5D: AC                                                    	lods	byte [esi]
0000EC5E: 3C 2C                                                 	cmp	al,','
0000EC60: 0F 85 D8 1C FF FF                                     	jne	invalid_operand
0000EC66: AC                                                    	lods	byte [esi]
0000EC67: E8 C8 20 00 00                                        	call	get_size_operator
0000EC6C: 3C 10                                                 	cmp	al,10h
0000EC6E: 0F 85 CA 1C FF FF                                     	jne	invalid_operand
0000EC74: AC                                                    	lods	byte [esi]
0000EC75: E8 75 20 00 00                                        	call	convert_mmx_register
0000EC7A: 88 C3                                                 	mov	bl,al
0000EC7C: E8 81 02 00 00                                        	call	make_mmx_prefix
0000EC81: 80 3D B0 A2 01 00 C5                                  	cmp	[extended_code],0C5h
0000EC88: 74 4D                                                 	je	mmx_nomem_imm8
0000EC8A: E9 70 CA FF FF                                        	jmp	nomem_instruction_ready
                                                                      mmx_imm8:
0000EC8F: 53 51 52                                              	push	ebx ecx edx
0000EC92: 30 C9                                                 	xor	cl,cl
0000EC94: 86 0D A4 A2 01 00                                     	xchg	cl,[operand_size]
0000EC9A: AC                                                    	lods	byte [esi]
0000EC9B: 3C 2C                                                 	cmp	al,','
0000EC9D: 0F 85 9B 1C FF FF                                     	jne	invalid_operand
0000ECA3: AC                                                    	lods	byte [esi]
0000ECA4: E8 8B 20 00 00                                        	call	get_size_operator
0000ECA9: F6 C4 FE                                              	test	ah,not 1
0000ECAC: 0F 85 96 1C FF FF                                     	jnz	invalid_operand_size
0000ECB2: 88 0D A4 A2 01 00                                     	mov	[operand_size],cl
0000ECB8: 3C 28                                                 	cmp	al,'('
0000ECBA: 0F 85 7E 1C FF FF                                     	jne	invalid_operand
0000ECC0: E8 F2 85 FF FF                                        	call	get_byte_value
0000ECC5: A2 00 A2 01 00                                        	mov	byte [value],al
0000ECCA: 5A 59 5B                                              	pop	edx ecx ebx
0000ECCD: E8 A1 28 00 00                                        	call	store_instruction_with_imm8
0000ECD2: E9 A3 62 FF FF                                        	jmp	instruction_assembled
                                                                      mmx_nomem_imm8:
0000ECD7: E8 B4 22 00 00                                        	call	store_nomem_instruction
0000ECDC: E8 05 00 00 00                                        	call	append_imm8
0000ECE1: E9 94 62 FF FF                                        	jmp	instruction_assembled
                                                                      append_imm8:
0000ECE6: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000ECED: AC                                                    	lods	byte [esi]
0000ECEE: 3C 2C                                                 	cmp	al,','
0000ECF0: 0F 85 48 1C FF FF                                     	jne	invalid_operand
0000ECF6: AC                                                    	lods	byte [esi]
0000ECF7: E8 38 20 00 00                                        	call	get_size_operator
0000ECFC: F6 C4 FE                                              	test	ah,not 1
0000ECFF: 0F 85 43 1C FF FF                                     	jnz	invalid_operand_size
0000ED05: 3C 28                                                 	cmp	al,'('
0000ED07: 0F 85 31 1C FF FF                                     	jne	invalid_operand
0000ED0D: E8 A5 85 FF FF                                        	call	get_byte_value
0000ED12: AA                                                    	stosb
0000ED13: C3                                                    	ret
                                                                pinsrw_instruction:
0000ED14: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000ED19: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000ED20: AC                                                    	lods	byte [esi]
0000ED21: E8 0E 20 00 00                                        	call	get_size_operator
0000ED26: 3C 10                                                 	cmp	al,10h
0000ED28: 0F 85 10 1C FF FF                                     	jne	invalid_operand
0000ED2E: AC                                                    	lods	byte [esi]
0000ED2F: E8 BB 1F 00 00                                        	call	convert_mmx_register
0000ED34: E8 C9 01 00 00                                        	call	make_mmx_prefix
0000ED39: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000ED3E: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000ED45: AC                                                    	lods	byte [esi]
0000ED46: 3C 2C                                                 	cmp	al,','
0000ED48: 0F 85 F0 1B FF FF                                     	jne	invalid_operand
0000ED4E: AC                                                    	lods	byte [esi]
0000ED4F: E8 E0 1F 00 00                                        	call	get_size_operator
0000ED54: 3C 10                                                 	cmp	al,10h
0000ED56: 74 2C                                                 	je	pinsrw_mmreg_reg
0000ED58: 3C 5B                                                 	cmp	al,'['
0000ED5A: 0F 85 DE 1B FF FF                                     	jne	invalid_operand
0000ED60: E8 2B 20 00 00                                        	call	get_address
0000ED65: 80 3D A4 A2 01 00 00                                  	cmp	[operand_size],0
0000ED6C: 0F 84 1D FF FF FF                                     	je	mmx_imm8
0000ED72: 80 3D A4 A2 01 00 02                                  	cmp	[operand_size],2
0000ED79: 0F 85 C9 1B FF FF                                     	jne	invalid_operand_size
0000ED7F: E9 0B FF FF FF                                        	jmp	mmx_imm8
                                                                      pinsrw_mmreg_reg:
0000ED84: AC                                                    	lods	byte [esi]
0000ED85: E8 03 1F 00 00                                        	call	convert_register
0000ED8A: 80 FC 04                                              	cmp	ah,4
0000ED8D: 0F 85 B5 1B FF FF                                     	jne	invalid_operand_size
0000ED93: 88 C3                                                 	mov	bl,al
0000ED95: E9 3D FF FF FF                                        	jmp	mmx_nomem_imm8
                                                                pshufw_instruction:
0000ED9A: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
0000EDA1: A2 A8 A2 01 00                                        	mov	[opcode_prefix],al
0000EDA6: EB 0C                                                 	jmp	pshuf_instruction
                                                                pshufd_instruction:
0000EDA8: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
0000EDAF: A2 A8 A2 01 00                                        	mov	[opcode_prefix],al
                                                                      pshuf_instruction:
0000EDB4: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000EDBB: C6 05 B0 A2 01 00 70                                  	mov	[extended_code],70h
0000EDC2: AC                                                    	lods	byte [esi]
0000EDC3: E8 6C 1F 00 00                                        	call	get_size_operator
0000EDC8: 3C 10                                                 	cmp	al,10h
0000EDCA: 0F 85 6E 1B FF FF                                     	jne	invalid_operand
0000EDD0: AC                                                    	lods	byte [esi]
0000EDD1: E8 19 1F 00 00                                        	call	convert_mmx_register
0000EDD6: 3A 25 B5 A2 01 00                                     	cmp	ah,[mmx_size]
0000EDDC: 0F 85 66 1B FF FF                                     	jne	invalid_operand_size
0000EDE2: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000EDE7: AC                                                    	lods	byte [esi]
0000EDE8: 3C 2C                                                 	cmp	al,','
0000EDEA: 0F 85 4E 1B FF FF                                     	jne	invalid_operand
0000EDF0: AC                                                    	lods	byte [esi]
0000EDF1: E8 3E 1F 00 00                                        	call	get_size_operator
0000EDF6: 3C 10                                                 	cmp	al,10h
0000EDF8: 74 12                                                 	je	pshuf_mmreg_mmreg
0000EDFA: 3C 5B                                                 	cmp	al,'['
0000EDFC: 0F 85 3C 1B FF FF                                     	jne	invalid_operand
0000EE02: E8 89 1F 00 00                                        	call	get_address
0000EE07: E9 83 FE FF FF                                        	jmp	mmx_imm8
                                                                      pshuf_mmreg_mmreg:
0000EE0C: AC                                                    	lods	byte [esi]
0000EE0D: E8 DD 1E 00 00                                        	call	convert_mmx_register
0000EE12: 88 C3                                                 	mov	bl,al
0000EE14: E9 BE FE FF FF                                        	jmp	mmx_nomem_imm8
                                                                movd_instruction:
0000EE19: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000EE20: C6 05 B0 A2 01 00 7E                                  	mov	[extended_code],7Eh
0000EE27: AC                                                    	lods	byte [esi]
0000EE28: E8 07 1F 00 00                                        	call	get_size_operator
0000EE2D: 3C 10                                                 	cmp	al,10h
0000EE2F: 74 24                                                 	je	movd_reg
0000EE31: 3C 5B                                                 	cmp	al,'['
0000EE33: 0F 85 05 1B FF FF                                     	jne	invalid_operand
0000EE39: E8 52 1F 00 00                                        	call	get_address
0000EE3E: F6 05 A4 A2 01 00 FB                                  	test	[operand_size],not 4
0000EE45: 0F 85 FD 1A FF FF                                     	jnz	invalid_operand_size
0000EE4B: E8 89 00 00 00                                        	call	get_mmx_source_register
0000EE50: E9 CF C6 FF FF                                        	jmp	instruction_ready
                                                                      movd_reg:
0000EE55: AC                                                    	lods	byte [esi]
0000EE56: 3C B0                                                 	cmp	al,0B0h
0000EE58: 73 1A                                                 	jae	movd_mmreg
0000EE5A: E8 2E 1E 00 00                                        	call	convert_register
0000EE5F: 80 FC 04                                              	cmp	ah,4
0000EE62: 0F 85 E0 1A FF FF                                     	jne	invalid_operand_size
0000EE68: 88 C3                                                 	mov	bl,al
0000EE6A: E8 6A 00 00 00                                        	call	get_mmx_source_register
0000EE6F: E9 8B C8 FF FF                                        	jmp	nomem_instruction_ready
                                                                      movd_mmreg:
0000EE74: C6 05 B0 A2 01 00 6E                                  	mov	[extended_code],6Eh
0000EE7B: E8 6F 1E 00 00                                        	call	convert_mmx_register
0000EE80: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000EE85: E8 78 00 00 00                                        	call	make_mmx_prefix
0000EE8A: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000EE91: AC                                                    	lods	byte [esi]
0000EE92: 3C 2C                                                 	cmp	al,','
0000EE94: 0F 85 A4 1A FF FF                                     	jne	invalid_operand
0000EE9A: AC                                                    	lods	byte [esi]
0000EE9B: E8 94 1E 00 00                                        	call	get_size_operator
0000EEA0: 3C 10                                                 	cmp	al,10h
0000EEA2: 74 1F                                                 	je	movd_mmreg_reg
0000EEA4: 3C 5B                                                 	cmp	al,'['
0000EEA6: 0F 85 92 1A FF FF                                     	jne	invalid_operand
0000EEAC: E8 DF 1E 00 00                                        	call	get_address
0000EEB1: F6 05 A4 A2 01 00 FB                                  	test	[operand_size],not 4
0000EEB8: 0F 85 8A 1A FF FF                                     	jnz	invalid_operand_size
0000EEBE: E9 61 C6 FF FF                                        	jmp	instruction_ready
                                                                      movd_mmreg_reg:
0000EEC3: AC                                                    	lods	byte [esi]
0000EEC4: E8 C4 1D 00 00                                        	call	convert_register
0000EEC9: 80 FC 04                                              	cmp	ah,4
0000EECC: 0F 85 76 1A FF FF                                     	jne	invalid_operand_size
0000EED2: 88 C3                                                 	mov	bl,al
0000EED4: E9 26 C8 FF FF                                        	jmp	nomem_instruction_ready
                                                                      get_mmx_source_register:
0000EED9: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000EEE0: AC                                                    	lods	byte [esi]
0000EEE1: 3C 2C                                                 	cmp	al,','
0000EEE3: 0F 85 55 1A FF FF                                     	jne	invalid_operand
0000EEE9: AC                                                    	lods	byte [esi]
0000EEEA: E8 45 1E 00 00                                        	call	get_size_operator
0000EEEF: 3C 10                                                 	cmp	al,10h
0000EEF1: 0F 85 47 1A FF FF                                     	jne	invalid_operand
0000EEF7: AC                                                    	lods	byte [esi]
0000EEF8: E8 F2 1D 00 00                                        	call	convert_mmx_register
0000EEFD: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
                                                                      make_mmx_prefix:
0000EF02: 80 3D A4 A2 01 00 10                                  	cmp	[operand_size],16
0000EF09: 75 07                                                 	jne	no_mmx_prefix
0000EF0B: C6 05 A6 A2 01 00 66                                  	mov	[operand_prefix],66h
                                                                      no_mmx_prefix:
0000EF12: C3                                                    	ret
                                                                movq_instruction:
0000EF13: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000EF1A: AC                                                    	lods	byte [esi]
0000EF1B: E8 14 1E 00 00                                        	call	get_size_operator
0000EF20: 3C 10                                                 	cmp	al,10h
0000EF22: 74 32                                                 	je	movq_reg
0000EF24: 3C 5B                                                 	cmp	al,'['
0000EF26: 0F 85 12 1A FF FF                                     	jne	invalid_operand
0000EF2C: E8 5F 1E 00 00                                        	call	get_address
0000EF31: F6 05 A4 A2 01 00 F7                                  	test	[operand_size],not 8
0000EF38: 0F 85 0A 1A FF FF                                     	jnz	invalid_operand_size
0000EF3E: E8 96 FF FF FF                                        	call	get_mmx_source_register
0000EF43: B0 7F                                                 	mov	al,7Fh
0000EF45: 80 FC 08                                              	cmp	ah,8
0000EF48: 74 02                                                 	je	movq_mem_ready
0000EF4A: B0 D6                                                 	mov	al,0D6h
                                                                     movq_mem_ready:
0000EF4C: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000EF51: E9 CE C5 FF FF                                        	jmp	instruction_ready
                                                                     movq_reg:
0000EF56: AC                                                    	lods	byte [esi]
0000EF57: 3C B0                                                 	cmp	al,0B0h
0000EF59: 73 26                                                 	jae	movq_mmreg
0000EF5B: E8 2D 1D 00 00                                        	call	convert_register
0000EF60: 80 FC 08                                              	cmp	ah,8
0000EF63: 0F 85 DF 19 FF FF                                     	jne	invalid_operand_size
0000EF69: 88 C3                                                 	mov	bl,al
0000EF6B: C6 05 B0 A2 01 00 7E                                  	mov	[extended_code],7Eh
0000EF72: E8 31 1F 00 00                                        	call	operand_64bit
0000EF77: E8 5D FF FF FF                                        	call	get_mmx_source_register
0000EF7C: E9 7E C7 FF FF                                        	jmp	nomem_instruction_ready
                                                                     movq_mmreg:
0000EF81: E8 69 1D 00 00                                        	call	convert_mmx_register
0000EF86: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000EF8B: C6 05 B0 A2 01 00 6F                                  	mov	[extended_code],6Fh
0000EF92: 88 25 B5 A2 01 00                                     	mov	[mmx_size],ah
0000EF98: 80 FC 10                                              	cmp	ah,16
0000EF9B: 75 0E                                                 	jne	movq_mmreg_
0000EF9D: C6 05 B0 A2 01 00 7E                                  	mov	[extended_code],7Eh
0000EFA4: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
                                                                      movq_mmreg_:
0000EFAB: AC                                                    	lods	byte [esi]
0000EFAC: 3C 2C                                                 	cmp	al,','
0000EFAE: 0F 85 8A 19 FF FF                                     	jne	invalid_operand
0000EFB4: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000EFBB: AC                                                    	lods	byte [esi]
0000EFBC: E8 73 1D 00 00                                        	call	get_size_operator
0000EFC1: 3C 10                                                 	cmp	al,10h
0000EFC3: 74 1F                                                 	je	movq_mmreg_reg
0000EFC5: 3C 5B                                                 	cmp	al,'['
0000EFC7: 0F 85 71 19 FF FF                                     	jne	invalid_operand
0000EFCD: E8 BE 1D 00 00                                        	call	get_address
0000EFD2: F6 05 A4 A2 01 00 F7                                  	test	[operand_size],not 8
0000EFD9: 0F 85 69 19 FF FF                                     	jnz	invalid_operand_size
0000EFDF: E9 40 C5 FF FF                                        	jmp	instruction_ready
                                                                      movq_mmreg_reg:
0000EFE4: AC                                                    	lods	byte [esi]
0000EFE5: 3C B0                                                 	cmp	al,0B0h
0000EFE7: 73 3F                                                 	jae	movq_mmreg_mmreg
0000EFE9: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000EFF0: E8 98 1C 00 00                                        	call	convert_register
0000EFF5: 80 FC 08                                              	cmp	ah,8
0000EFF8: 0F 85 4A 19 FF FF                                     	jne	invalid_operand_size
0000EFFE: C6 05 B0 A2 01 00 6E                                  	mov	[extended_code],6Eh
0000F005: C6 05 A8 A2 01 00 00                                  	mov	[opcode_prefix],0
0000F00C: 88 C3                                                 	mov	bl,al
0000F00E: 80 3D B5 A2 01 00 10                                  	cmp	[mmx_size],16
0000F015: 75 07                                                 	jne	movq_mmreg_reg_store
0000F017: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                      movq_mmreg_reg_store:
0000F01E: E8 85 1E 00 00                                        	call	operand_64bit
0000F023: E9 D7 C6 FF FF                                        	jmp	nomem_instruction_ready
                                                                      movq_mmreg_mmreg:
0000F028: E8 C2 1C 00 00                                        	call	convert_mmx_register
0000F02D: 3A 25 B5 A2 01 00                                     	cmp	ah,[mmx_size]
0000F033: 0F 85 0F 19 FF FF                                     	jne	invalid_operand_size
0000F039: 88 C3                                                 	mov	bl,al
0000F03B: E9 BF C6 FF FF                                        	jmp	nomem_instruction_ready
                                                                movdq_instruction:
0000F040: A2 A8 A2 01 00                                        	mov	[opcode_prefix],al
0000F045: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F04C: C6 05 B0 A2 01 00 6F                                  	mov	[extended_code],6Fh
0000F053: AC                                                    	lods	byte [esi]
0000F054: E8 DB 1C 00 00                                        	call	get_size_operator
0000F059: 3C 10                                                 	cmp	al,10h
0000F05B: 74 3B                                                 	je	movdq_mmreg
0000F05D: 3C 5B                                                 	cmp	al,'['
0000F05F: 0F 85 D9 18 FF FF                                     	jne	invalid_operand
0000F065: E8 26 1D 00 00                                        	call	get_address
0000F06A: AC                                                    	lods	byte [esi]
0000F06B: 3C 2C                                                 	cmp	al,','
0000F06D: 0F 85 CB 18 FF FF                                     	jne	invalid_operand
0000F073: AC                                                    	lods	byte [esi]
0000F074: E8 BB 1C 00 00                                        	call	get_size_operator
0000F079: 3C 10                                                 	cmp	al,10h
0000F07B: 0F 85 BD 18 FF FF                                     	jne	invalid_operand
0000F081: AC                                                    	lods	byte [esi]
0000F082: E8 9E 1C 00 00                                        	call	convert_xmm_register
0000F087: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000F08C: C6 05 B0 A2 01 00 7F                                  	mov	[extended_code],7Fh
0000F093: E9 8C C4 FF FF                                        	jmp	instruction_ready
                                                                      movdq_mmreg:
0000F098: AC                                                    	lods	byte [esi]
0000F099: E8 87 1C 00 00                                        	call	convert_xmm_register
0000F09E: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000F0A3: AC                                                    	lods	byte [esi]
0000F0A4: 3C 2C                                                 	cmp	al,','
0000F0A6: 0F 85 92 18 FF FF                                     	jne	invalid_operand
0000F0AC: AC                                                    	lods	byte [esi]
0000F0AD: E8 82 1C 00 00                                        	call	get_size_operator
0000F0B2: 3C 10                                                 	cmp	al,10h
0000F0B4: 74 12                                                 	je	movdq_mmreg_mmreg
0000F0B6: 3C 5B                                                 	cmp	al,'['
0000F0B8: 0F 85 80 18 FF FF                                     	jne	invalid_operand
0000F0BE: E8 CD 1C 00 00                                        	call	get_address
0000F0C3: E9 5C C4 FF FF                                        	jmp	instruction_ready
                                                                      movdq_mmreg_mmreg:
0000F0C8: AC                                                    	lods	byte [esi]
0000F0C9: E8 57 1C 00 00                                        	call	convert_xmm_register
0000F0CE: 88 C3                                                 	mov	bl,al
0000F0D0: E9 2A C6 FF FF                                        	jmp	nomem_instruction_ready
                                                                lddqu_instruction:
0000F0D5: AC                                                    	lods	byte [esi]
0000F0D6: E8 59 1C 00 00                                        	call	get_size_operator
0000F0DB: 3C 10                                                 	cmp	al,10h
0000F0DD: 0F 85 5B 18 FF FF                                     	jne	invalid_operand
0000F0E3: AC                                                    	lods	byte [esi]
0000F0E4: E8 3C 1C 00 00                                        	call	convert_xmm_register
0000F0E9: 50                                                    	push	eax
0000F0EA: AC                                                    	lods	byte [esi]
0000F0EB: 3C 2C                                                 	cmp	al,','
0000F0ED: 0F 85 4B 18 FF FF                                     	jne	invalid_operand
0000F0F3: AC                                                    	lods	byte [esi]
0000F0F4: E8 3B 1C 00 00                                        	call	get_size_operator
0000F0F9: 3C 5B                                                 	cmp	al,'['
0000F0FB: 0F 85 3D 18 FF FF                                     	jne	invalid_operand
0000F101: E8 8A 1C 00 00                                        	call	get_address
0000F106: 58                                                    	pop	eax
0000F107: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000F10C: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
0000F113: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F11A: C6 05 B0 A2 01 00 F0                                  	mov	[extended_code],0F0h
0000F121: E9 FE C3 FF FF                                        	jmp	instruction_ready
                                                                
                                                                movdq2q_instruction:
0000F126: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
0000F12D: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
0000F134: EB 0E                                                 	jmp	movq2dq_
                                                                movq2dq_instruction:
0000F136: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0000F13D: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
                                                                      movq2dq_:
0000F144: AC                                                    	lods	byte [esi]
0000F145: E8 EA 1B 00 00                                        	call	get_size_operator
0000F14A: 3C 10                                                 	cmp	al,10h
0000F14C: 0F 85 EC 17 FF FF                                     	jne	invalid_operand
0000F152: AC                                                    	lods	byte [esi]
0000F153: E8 97 1B 00 00                                        	call	convert_mmx_register
0000F158: 3A 25 B5 A2 01 00                                     	cmp	ah,[mmx_size]
0000F15E: 0F 85 E4 17 FF FF                                     	jne	invalid_operand_size
0000F164: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000F169: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000F170: AC                                                    	lods	byte [esi]
0000F171: 3C 2C                                                 	cmp	al,','
0000F173: 0F 85 C5 17 FF FF                                     	jne	invalid_operand
0000F179: AC                                                    	lods	byte [esi]
0000F17A: E8 B5 1B 00 00                                        	call	get_size_operator
0000F17F: 3C 10                                                 	cmp	al,10h
0000F181: 0F 85 B7 17 FF FF                                     	jne	invalid_operand
0000F187: AC                                                    	lods	byte [esi]
0000F188: E8 62 1B 00 00                                        	call	convert_mmx_register
0000F18D: 80 35 B5 A2 01 00 18                                  	xor	[mmx_size],8+16
0000F194: 3A 25 B5 A2 01 00                                     	cmp	ah,[mmx_size]
0000F19A: 0F 85 A8 17 FF FF                                     	jne	invalid_operand_size
0000F1A0: 88 C3                                                 	mov	bl,al
0000F1A2: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F1A9: C6 05 B0 A2 01 00 D6                                  	mov	[extended_code],0D6h
0000F1B0: E9 4A C5 FF FF                                        	jmp	nomem_instruction_ready
                                                                
                                                                sse_ps_instruction_imm8:
0000F1B5: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
                                                                sse_ps_instruction:
0000F1BC: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
0000F1C3: E9 DF 00 00 00                                        	jmp	sse_instruction
                                                                sse_pd_instruction_imm8:
0000F1C8: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
                                                                sse_pd_instruction:
0000F1CF: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
0000F1D6: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
0000F1DD: E9 C5 00 00 00                                        	jmp	sse_instruction
                                                                sse_ss_instruction:
0000F1E2: C6 05 B5 A2 01 00 04                                  	mov	[mmx_size],4
0000F1E9: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0000F1F0: E9 B2 00 00 00                                        	jmp	sse_instruction
                                                                sse_sd_instruction:
0000F1F5: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
0000F1FC: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
0000F203: E9 9F 00 00 00                                        	jmp	sse_instruction
                                                                cmp_pd_instruction:
0000F208: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                cmp_ps_instruction:
0000F20F: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
0000F216: A2 00 A2 01 00                                        	mov	byte [value],al
0000F21B: B0 C2                                                 	mov	al,0C2h
0000F21D: E9 85 00 00 00                                        	jmp	sse_instruction
                                                                cmp_ss_instruction:
0000F222: C6 05 B5 A2 01 00 04                                  	mov	[mmx_size],4
0000F229: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0000F230: EB 25                                                 	jmp	cmp_sx_instruction
                                                                cmpsd_instruction:
0000F232: B0 A7                                                 	mov	al,0A7h
0000F234: 8A 26                                                 	mov	ah,[esi]
0000F236: 08 E4                                                 	or	ah,ah
0000F238: 0F 84 83 C1 FF FF                                     	jz	simple_instruction_32bit
0000F23E: 80 FC 0F                                              	cmp	ah,0Fh
0000F241: 0F 84 7A C1 FF FF                                     	je	simple_instruction_32bit
0000F247: B0 FF                                                 	mov	al,-1
                                                                cmp_sd_instruction:
0000F249: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
0000F250: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
                                                                      cmp_sx_instruction:
0000F257: A2 00 A2 01 00                                        	mov	byte [value],al
0000F25C: B0 C2                                                 	mov	al,0C2h
0000F25E: EB 47                                                 	jmp	sse_instruction
                                                                comiss_instruction:
0000F260: C6 05 B5 A2 01 00 04                                  	mov	[mmx_size],4
0000F267: EB 3E                                                 	jmp	sse_instruction
                                                                comisd_instruction:
0000F269: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
0000F270: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
0000F277: EB 2E                                                 	jmp	sse_instruction
                                                                cvtdq2pd_instruction:
0000F279: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
                                                                cvtps2pd_instruction:
0000F280: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
0000F287: EB 1E                                                 	jmp	sse_instruction
                                                                cvtpd2dq_instruction:
0000F289: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
0000F290: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
0000F297: EB 0E                                                 	jmp	sse_instruction
                                                                movshdup_instruction:
0000F299: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
0000F2A0: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
                                                                sse_instruction:
0000F2A7: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F2AE: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000F2B3: AC                                                    	lods	byte [esi]
0000F2B4: E8 7B 1A 00 00                                        	call	get_size_operator
0000F2B9: 3C 10                                                 	cmp	al,10h
0000F2BB: 0F 85 7D 16 FF FF                                     	jne	invalid_operand
                                                                      sse_xmmreg:
0000F2C1: AC                                                    	lods	byte [esi]
0000F2C2: E8 5E 1A 00 00                                        	call	convert_xmm_register
                                                                      sse_reg:
0000F2C7: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000F2CC: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000F2D3: AC                                                    	lods	byte [esi]
0000F2D4: 3C 2C                                                 	cmp	al,','
0000F2D6: 0F 85 62 16 FF FF                                     	jne	invalid_operand
0000F2DC: AC                                                    	lods	byte [esi]
0000F2DD: E8 52 1A 00 00                                        	call	get_size_operator
0000F2E2: 3C 10                                                 	cmp	al,10h
0000F2E4: 74 7A                                                 	je	sse_xmmreg_xmmreg
                                                                      sse_reg_mem:
0000F2E6: 3C 5B                                                 	cmp	al,'['
0000F2E8: 0F 85 50 16 FF FF                                     	jne	invalid_operand
0000F2EE: E8 9D 1A 00 00                                        	call	get_address
0000F2F3: 80 3D A4 A2 01 00 00                                  	cmp	[operand_size],0
0000F2FA: 74 11                                                 	je	sse_mem_size_ok
0000F2FC: A0 B5 A2 01 00                                        	mov	al,[mmx_size]
0000F301: 38 05 A4 A2 01 00                                     	cmp	[operand_size],al
0000F307: 0F 85 3B 16 FF FF                                     	jne	invalid_operand_size
                                                                      sse_mem_size_ok:
0000F30D: A0 B0 A2 01 00                                        	mov	al,[extended_code]
0000F312: 8A 25 B1 A2 01 00                                     	mov	ah,[supplemental_code]
0000F318: 3C C2                                                 	cmp	al,0C2h
0000F31A: 74 2D                                                 	je	sse_cmp_mem_ok
0000F31C: 66 3D 3A 44                                           	cmp	ax,443Ah
0000F320: 74 27                                                 	je	sse_cmp_mem_ok
0000F322: 80 3D AB A2 01 00 01                                  	cmp	[immediate_size],1
0000F329: 0F 84 60 F9 FF FF                                     	je	mmx_imm8
0000F32F: 80 3D AB A2 01 00 FF                                  	cmp	[immediate_size],-1
0000F336: 75 0C                                                 	jne	sse_ok
0000F338: E8 A7 00 00 00                                        	call	take_additional_xmm0
0000F33D: C6 05 AB A2 01 00 00                                  	mov	[immediate_size],0
                                                                      sse_ok:
0000F344: E9 DB C1 FF FF                                        	jmp	instruction_ready
                                                                      sse_cmp_mem_ok:
0000F349: 80 3D 00 A2 01 00 FF                                  	cmp	byte [value],-1
0000F350: 0F 84 39 F9 FF FF                                     	je	mmx_imm8
0000F356: E8 18 22 00 00                                        	call	store_instruction_with_imm8
0000F35B: E9 1A 5C FF FF                                        	jmp	instruction_assembled
                                                                      sse_xmmreg_xmmreg:
0000F360: 80 3D A6 A2 01 00 66                                  	cmp	[operand_prefix],66h
0000F367: 75 1A                                                 	jne	sse_xmmreg_xmmreg_ok
0000F369: 80 3D B0 A2 01 00 12                                  	cmp	[extended_code],12h
0000F370: 0F 84 C8 15 FF FF                                     	je	invalid_operand
0000F376: 80 3D B0 A2 01 00 16                                  	cmp	[extended_code],16h
0000F37D: 0F 84 BB 15 FF FF                                     	je	invalid_operand
                                                                      sse_xmmreg_xmmreg_ok:
0000F383: AC                                                    	lods	byte [esi]
0000F384: E8 9C 19 00 00                                        	call	convert_xmm_register
0000F389: 88 C3                                                 	mov	bl,al
0000F38B: A0 B0 A2 01 00                                        	mov	al,[extended_code]
0000F390: 8A 25 B1 A2 01 00                                     	mov	ah,[supplemental_code]
0000F396: 3C C2                                                 	cmp	al,0C2h
0000F398: 74 2D                                                 	je	sse_cmp_nomem_ok
0000F39A: 66 3D 3A 44                                           	cmp	ax,443Ah
0000F39E: 74 27                                                 	je	sse_cmp_nomem_ok
0000F3A0: 80 3D AB A2 01 00 01                                  	cmp	[immediate_size],1
0000F3A7: 0F 84 2A F9 FF FF                                     	je	mmx_nomem_imm8
0000F3AD: 80 3D AB A2 01 00 FF                                  	cmp	[immediate_size],-1
0000F3B4: 75 0C                                                 	jne	sse_nomem_ok
0000F3B6: E8 29 00 00 00                                        	call	take_additional_xmm0
0000F3BB: C6 05 AB A2 01 00 00                                  	mov	[immediate_size],0
                                                                      sse_nomem_ok:
0000F3C2: E9 38 C3 FF FF                                        	jmp	nomem_instruction_ready
                                                                      sse_cmp_nomem_ok:
0000F3C7: 80 3D 00 A2 01 00 FF                                  	cmp	byte [value],-1
0000F3CE: 0F 84 03 F9 FF FF                                     	je	mmx_nomem_imm8
0000F3D4: E8 B7 1B 00 00                                        	call	store_nomem_instruction
0000F3D9: A0 00 A2 01 00                                        	mov	al,byte [value]
0000F3DE: AA                                                    	stosb
0000F3DF: E9 96 5B FF FF                                        	jmp	instruction_assembled
                                                                      take_additional_xmm0:
0000F3E4: 80 3E 2C                                              	cmp	byte [esi],','
0000F3E7: 75 18                                                 	jne	additional_xmm0_ok
0000F3E9: 46                                                    	inc	esi
0000F3EA: AC                                                    	lods	byte [esi]
0000F3EB: 3C 10                                                 	cmp	al,10h
0000F3ED: 0F 85 4B 15 FF FF                                     	jne	invalid_operand
0000F3F3: AC                                                    	lods	byte [esi]
0000F3F4: E8 2C 19 00 00                                        	call	convert_xmm_register
0000F3F9: 84 C0                                                 	test	al,al
0000F3FB: 0F 85 3D 15 FF FF                                     	jnz	invalid_operand
                                                                      additional_xmm0_ok:
0000F401: C3                                                    	ret
                                                                
                                                                pslldq_instruction:
0000F402: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000F407: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
0000F40E: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F415: C6 05 B0 A2 01 00 73                                  	mov	[extended_code],73h
0000F41C: AC                                                    	lods	byte [esi]
0000F41D: E8 12 19 00 00                                        	call	get_size_operator
0000F422: 3C 10                                                 	cmp	al,10h
0000F424: 0F 85 14 15 FF FF                                     	jne	invalid_operand
0000F42A: AC                                                    	lods	byte [esi]
0000F42B: E8 F5 18 00 00                                        	call	convert_xmm_register
0000F430: 88 C3                                                 	mov	bl,al
0000F432: E9 A0 F8 FF FF                                        	jmp	mmx_nomem_imm8
                                                                movpd_instruction:
0000F437: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                movps_instruction:
0000F43E: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F445: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000F44A: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
0000F451: EB 43                                                 	jmp	sse_mov_instruction
                                                                movss_instruction:
0000F453: C6 05 B5 A2 01 00 04                                  	mov	[mmx_size],4
0000F45A: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0000F461: EB 23                                                 	jmp	sse_movs
                                                                movsd_instruction:
0000F463: B0 A5                                                 	mov	al,0A5h
0000F465: 8A 26                                                 	mov	ah,[esi]
0000F467: 08 E4                                                 	or	ah,ah
0000F469: 0F 84 52 BF FF FF                                     	jz	simple_instruction_32bit
0000F46F: 80 FC 0F                                              	cmp	ah,0Fh
0000F472: 0F 84 49 BF FF FF                                     	je	simple_instruction_32bit
0000F478: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
0000F47F: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
                                                                      sse_movs:
0000F486: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F48D: C6 05 B0 A2 01 00 10                                  	mov	[extended_code],10h
0000F494: EB 00                                                 	jmp	sse_mov_instruction
                                                                sse_mov_instruction:
0000F496: AC                                                    	lods	byte [esi]
0000F497: E8 98 18 00 00                                        	call	get_size_operator
0000F49C: 3C 10                                                 	cmp	al,10h
0000F49E: 0F 84 1D FE FF FF                                     	je	sse_xmmreg
                                                                      sse_mem:
0000F4A4: 3C 5B                                                 	cmp	al,'['
0000F4A6: 0F 85 92 14 FF FF                                     	jne	invalid_operand
0000F4AC: FE 05 B0 A2 01 00                                     	inc	[extended_code]
0000F4B2: E8 D9 18 00 00                                        	call	get_address
0000F4B7: 80 3D A4 A2 01 00 00                                  	cmp	[operand_size],0
0000F4BE: 74 18                                                 	je	sse_mem_xmmreg
0000F4C0: A0 B5 A2 01 00                                        	mov	al,[mmx_size]
0000F4C5: 38 05 A4 A2 01 00                                     	cmp	[operand_size],al
0000F4CB: 0F 85 77 14 FF FF                                     	jne	invalid_operand_size
0000F4D1: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
                                                                      sse_mem_xmmreg:
0000F4D8: AC                                                    	lods	byte [esi]
0000F4D9: 3C 2C                                                 	cmp	al,','
0000F4DB: 0F 85 5D 14 FF FF                                     	jne	invalid_operand
0000F4E1: AC                                                    	lods	byte [esi]
0000F4E2: E8 4D 18 00 00                                        	call	get_size_operator
0000F4E7: 3C 10                                                 	cmp	al,10h
0000F4E9: 0F 85 4F 14 FF FF                                     	jne	invalid_operand
0000F4EF: AC                                                    	lods	byte [esi]
0000F4F0: E8 30 18 00 00                                        	call	convert_xmm_register
0000F4F5: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000F4FA: E9 25 C0 FF FF                                        	jmp	instruction_ready
                                                                movlpd_instruction:
0000F4FF: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                movlps_instruction:
0000F506: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F50D: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000F512: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
0000F519: AC                                                    	lods	byte [esi]
0000F51A: E8 15 18 00 00                                        	call	get_size_operator
0000F51F: 3C 10                                                 	cmp	al,10h
0000F521: 75 81                                                 	jne	sse_mem
0000F523: AC                                                    	lods	byte [esi]
0000F524: E8 FC 17 00 00                                        	call	convert_xmm_register
0000F529: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000F52E: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000F535: AC                                                    	lods	byte [esi]
0000F536: 3C 2C                                                 	cmp	al,','
0000F538: 0F 85 00 14 FF FF                                     	jne	invalid_operand
0000F53E: AC                                                    	lods	byte [esi]
0000F53F: E8 F0 17 00 00                                        	call	get_size_operator
0000F544: E9 9D FD FF FF                                        	jmp	sse_reg_mem
                                                                movhlps_instruction:
0000F549: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F550: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000F555: C6 05 B5 A2 01 00 00                                  	mov	[mmx_size],0
0000F55C: AC                                                    	lods	byte [esi]
0000F55D: E8 D2 17 00 00                                        	call	get_size_operator
0000F562: 3C 10                                                 	cmp	al,10h
0000F564: 0F 85 D4 13 FF FF                                     	jne	invalid_operand
0000F56A: AC                                                    	lods	byte [esi]
0000F56B: E8 B5 17 00 00                                        	call	convert_xmm_register
0000F570: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000F575: AC                                                    	lods	byte [esi]
0000F576: 3C 2C                                                 	cmp	al,','
0000F578: 0F 85 C0 13 FF FF                                     	jne	invalid_operand
0000F57E: AC                                                    	lods	byte [esi]
0000F57F: E8 B0 17 00 00                                        	call	get_size_operator
0000F584: 3C 10                                                 	cmp	al,10h
0000F586: 0F 84 F7 FD FF FF                                     	je	sse_xmmreg_xmmreg_ok
0000F58C: E9 AD 13 FF FF                                        	jmp	invalid_operand
                                                                maskmovq_instruction:
0000F591: B1 08                                                 	mov	cl,8
0000F593: EB 09                                                 	jmp	maskmov_instruction
                                                                maskmovdqu_instruction:
0000F595: B1 10                                                 	mov	cl,16
0000F597: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                      maskmov_instruction:
0000F59E: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F5A5: C6 05 B0 A2 01 00 F7                                  	mov	[extended_code],0F7h
0000F5AC: AC                                                    	lods	byte [esi]
0000F5AD: E8 82 17 00 00                                        	call	get_size_operator
0000F5B2: 3C 10                                                 	cmp	al,10h
0000F5B4: 0F 85 84 13 FF FF                                     	jne	invalid_operand
0000F5BA: AC                                                    	lods	byte [esi]
0000F5BB: E8 2F 17 00 00                                        	call	convert_mmx_register
0000F5C0: 38 CC                                                 	cmp	ah,cl
0000F5C2: 0F 85 80 13 FF FF                                     	jne	invalid_operand_size
0000F5C8: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000F5CD: AC                                                    	lods	byte [esi]
0000F5CE: 3C 2C                                                 	cmp	al,','
0000F5D0: 0F 85 68 13 FF FF                                     	jne	invalid_operand
0000F5D6: AC                                                    	lods	byte [esi]
0000F5D7: E8 58 17 00 00                                        	call	get_size_operator
0000F5DC: 3C 10                                                 	cmp	al,10h
0000F5DE: 0F 85 5A 13 FF FF                                     	jne	invalid_operand
0000F5E4: AC                                                    	lods	byte [esi]
0000F5E5: E8 05 17 00 00                                        	call	convert_mmx_register
0000F5EA: 88 C3                                                 	mov	bl,al
0000F5EC: E9 0E C1 FF FF                                        	jmp	nomem_instruction_ready
                                                                movmskpd_instruction:
0000F5F1: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                movmskps_instruction:
0000F5F8: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F5FF: C6 05 B0 A2 01 00 50                                  	mov	[extended_code],50h
0000F606: E8 73 16 00 00                                        	call	take_register
0000F60B: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000F610: 80 FC 04                                              	cmp	ah,4
0000F613: 74 16                                                 	je	movmskps_reg_ok
0000F615: 80 FC 08                                              	cmp	ah,8
0000F618: 0F 85 2A 13 FF FF                                     	jne	invalid_operand_size
0000F61E: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000F625: 0F 85 13 13 FF FF                                     	jne	invalid_operand
                                                                      movmskps_reg_ok:
0000F62B: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000F632: AC                                                    	lods	byte [esi]
0000F633: 3C 2C                                                 	cmp	al,','
0000F635: 0F 85 03 13 FF FF                                     	jne	invalid_operand
0000F63B: AC                                                    	lods	byte [esi]
0000F63C: E8 F3 16 00 00                                        	call	get_size_operator
0000F641: 3C 10                                                 	cmp	al,10h
0000F643: 0F 84 3A FD FF FF                                     	je	sse_xmmreg_xmmreg_ok
0000F649: E9 F0 12 FF FF                                        	jmp	invalid_operand
                                                                
                                                                cvtpi2pd_instruction:
0000F64E: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                cvtpi2ps_instruction:
0000F655: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F65C: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000F661: AC                                                    	lods	byte [esi]
0000F662: E8 CD 16 00 00                                        	call	get_size_operator
0000F667: 3C 10                                                 	cmp	al,10h
0000F669: 0F 85 CF 12 FF FF                                     	jne	invalid_operand
0000F66F: AC                                                    	lods	byte [esi]
0000F670: E8 B0 16 00 00                                        	call	convert_xmm_register
0000F675: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000F67A: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000F681: AC                                                    	lods	byte [esi]
0000F682: 3C 2C                                                 	cmp	al,','
0000F684: 0F 85 B4 12 FF FF                                     	jne	invalid_operand
0000F68A: AC                                                    	lods	byte [esi]
0000F68B: E8 A4 16 00 00                                        	call	get_size_operator
0000F690: 3C 10                                                 	cmp	al,10h
0000F692: 74 28                                                 	je	cvtpi_xmmreg_xmmreg
0000F694: 3C 5B                                                 	cmp	al,'['
0000F696: 0F 85 A2 12 FF FF                                     	jne	invalid_operand
0000F69C: E8 EF 16 00 00                                        	call	get_address
0000F6A1: 80 3D A4 A2 01 00 00                                  	cmp	[operand_size],0
0000F6A8: 74 0D                                                 	je	cvtpi_size_ok
0000F6AA: 80 3D A4 A2 01 00 08                                  	cmp	[operand_size],8
0000F6B1: 0F 85 91 12 FF FF                                     	jne	invalid_operand_size
                                                                      cvtpi_size_ok:
0000F6B7: E9 68 BE FF FF                                        	jmp	instruction_ready
                                                                      cvtpi_xmmreg_xmmreg:
0000F6BC: AC                                                    	lods	byte [esi]
0000F6BD: E8 2D 16 00 00                                        	call	convert_mmx_register
0000F6C2: 80 FC 08                                              	cmp	ah,8
0000F6C5: 0F 85 7D 12 FF FF                                     	jne	invalid_operand_size
0000F6CB: 88 C3                                                 	mov	bl,al
0000F6CD: E9 2D C0 FF FF                                        	jmp	nomem_instruction_ready
                                                                cvtsi2ss_instruction:
0000F6D2: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0000F6D9: EB 07                                                 	jmp	cvtsi_instruction
                                                                cvtsi2sd_instruction:
0000F6DB: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
                                                                      cvtsi_instruction:
0000F6E2: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F6E9: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000F6EE: AC                                                    	lods	byte [esi]
0000F6EF: E8 40 16 00 00                                        	call	get_size_operator
0000F6F4: 3C 10                                                 	cmp	al,10h
0000F6F6: 0F 85 42 12 FF FF                                     	jne	invalid_operand
0000F6FC: AC                                                    	lods	byte [esi]
0000F6FD: E8 23 16 00 00                                        	call	convert_xmm_register
0000F702: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
                                                                      cvtsi_xmmreg:
0000F707: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000F70E: AC                                                    	lods	byte [esi]
0000F70F: 3C 2C                                                 	cmp	al,','
0000F711: 0F 85 27 12 FF FF                                     	jne	invalid_operand
0000F717: AC                                                    	lods	byte [esi]
0000F718: E8 17 16 00 00                                        	call	get_size_operator
0000F71D: 3C 10                                                 	cmp	al,10h
0000F71F: 74 36                                                 	je	cvtsi_xmmreg_reg
0000F721: 3C 5B                                                 	cmp	al,'['
0000F723: 0F 85 15 12 FF FF                                     	jne	invalid_operand
0000F729: E8 62 16 00 00                                        	call	get_address
0000F72E: 80 3D A4 A2 01 00 00                                  	cmp	[operand_size],0
0000F735: 74 1B                                                 	je	cvtsi_size_ok
0000F737: 80 3D A4 A2 01 00 04                                  	cmp	[operand_size],4
0000F73E: 74 12                                                 	je	cvtsi_size_ok
0000F740: 80 3D A4 A2 01 00 08                                  	cmp	[operand_size],8
0000F747: 0F 85 FB 11 FF FF                                     	jne	invalid_operand_size
0000F74D: E8 56 17 00 00                                        	call	operand_64bit
                                                                      cvtsi_size_ok:
0000F752: E9 CD BD FF FF                                        	jmp	instruction_ready
                                                                      cvtsi_xmmreg_reg:
0000F757: AC                                                    	lods	byte [esi]
0000F758: E8 30 15 00 00                                        	call	convert_register
0000F75D: 80 FC 04                                              	cmp	ah,4
0000F760: 74 0E                                                 	je	cvtsi_xmmreg_reg_store
0000F762: 80 FC 08                                              	cmp	ah,8
0000F765: 0F 85 DD 11 FF FF                                     	jne	invalid_operand_size
0000F76B: E8 38 17 00 00                                        	call	operand_64bit
                                                                      cvtsi_xmmreg_reg_store:
0000F770: 88 C3                                                 	mov	bl,al
0000F772: E9 88 BF FF FF                                        	jmp	nomem_instruction_ready
                                                                cvtps2pi_instruction:
0000F777: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
0000F77E: EB 0E                                                 	jmp	cvtpd_instruction
                                                                cvtpd2pi_instruction:
0000F780: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
0000F787: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
                                                                      cvtpd_instruction:
0000F78E: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F795: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000F79A: AC                                                    	lods	byte [esi]
0000F79B: E8 94 15 00 00                                        	call	get_size_operator
0000F7A0: 3C 10                                                 	cmp	al,10h
0000F7A2: 0F 85 96 11 FF FF                                     	jne	invalid_operand
0000F7A8: AC                                                    	lods	byte [esi]
0000F7A9: E8 41 15 00 00                                        	call	convert_mmx_register
0000F7AE: 80 FC 08                                              	cmp	ah,8
0000F7B1: 0F 85 91 11 FF FF                                     	jne	invalid_operand_size
0000F7B7: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000F7BE: E9 04 FB FF FF                                        	jmp	sse_reg
                                                                cvtss2si_instruction:
0000F7C3: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0000F7CA: C6 05 B5 A2 01 00 04                                  	mov	[mmx_size],4
0000F7D1: EB 0E                                                 	jmp	cvt2si_instruction
                                                                cvtsd2si_instruction:
0000F7D3: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
0000F7DA: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
                                                                      cvt2si_instruction:
0000F7E1: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000F7E6: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F7ED: E8 8C 14 00 00                                        	call	take_register
0000F7F2: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000F7F9: 80 FC 04                                              	cmp	ah,4
0000F7FC: 0F 84 C5 FA FF FF                                     	je	sse_reg
0000F802: 80 FC 08                                              	cmp	ah,8
0000F805: 0F 85 3D 11 FF FF                                     	jne	invalid_operand_size
0000F80B: E8 98 16 00 00                                        	call	operand_64bit
0000F810: E9 B2 FA FF FF                                        	jmp	sse_reg
                                                                
                                                                ssse3_instruction:
0000F815: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F81C: C6 05 B0 A2 01 00 38                                  	mov	[extended_code],38h
0000F823: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
0000F828: E9 11 F3 FF FF                                        	jmp	mmx_instruction
                                                                palignr_instruction:
0000F82D: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F834: C6 05 B0 A2 01 00 3A                                  	mov	[extended_code],3Ah
0000F83B: C6 05 B1 A2 01 00 0F                                  	mov	[supplemental_code],0Fh
0000F842: AC                                                    	lods	byte [esi]
0000F843: E8 EC 14 00 00                                        	call	get_size_operator
0000F848: 3C 10                                                 	cmp	al,10h
0000F84A: 0F 85 EE 10 FF FF                                     	jne	invalid_operand
0000F850: AC                                                    	lods	byte [esi]
0000F851: E8 99 14 00 00                                        	call	convert_mmx_register
0000F856: E8 A7 F6 FF FF                                        	call	make_mmx_prefix
0000F85B: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000F860: AC                                                    	lods	byte [esi]
0000F861: 3C 2C                                                 	cmp	al,','
0000F863: 0F 85 D5 10 FF FF                                     	jne	invalid_operand
0000F869: AC                                                    	lods	byte [esi]
0000F86A: E8 C5 14 00 00                                        	call	get_size_operator
0000F86F: 3C 10                                                 	cmp	al,10h
0000F871: 74 12                                                 	je	palignr_mmreg_mmreg
0000F873: 3C 5B                                                 	cmp	al,'['
0000F875: 0F 85 C3 10 FF FF                                     	jne	invalid_operand
0000F87B: E8 10 15 00 00                                        	call	get_address
0000F880: E9 0A F4 FF FF                                        	jmp	mmx_imm8
                                                                      palignr_mmreg_mmreg:
0000F885: AC                                                    	lods	byte [esi]
0000F886: E8 64 14 00 00                                        	call	convert_mmx_register
0000F88B: 88 C3                                                 	mov	bl,al
0000F88D: E9 45 F4 FF FF                                        	jmp	mmx_nomem_imm8
                                                                amd3dnow_instruction:
0000F892: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000F899: C6 05 B0 A2 01 00 0F                                  	mov	[extended_code],0Fh
0000F8A0: A2 00 A2 01 00                                        	mov	byte [value],al
0000F8A5: AC                                                    	lods	byte [esi]
0000F8A6: E8 89 14 00 00                                        	call	get_size_operator
0000F8AB: 3C 10                                                 	cmp	al,10h
0000F8AD: 0F 85 8B 10 FF FF                                     	jne	invalid_operand
0000F8B3: AC                                                    	lods	byte [esi]
0000F8B4: E8 36 14 00 00                                        	call	convert_mmx_register
0000F8B9: 80 FC 08                                              	cmp	ah,8
0000F8BC: 0F 85 86 10 FF FF                                     	jne	invalid_operand_size
0000F8C2: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000F8C7: AC                                                    	lods	byte [esi]
0000F8C8: 3C 2C                                                 	cmp	al,','
0000F8CA: 0F 85 6E 10 FF FF                                     	jne	invalid_operand
0000F8D0: AC                                                    	lods	byte [esi]
0000F8D1: E8 5E 14 00 00                                        	call	get_size_operator
0000F8D6: 3C 10                                                 	cmp	al,10h
0000F8D8: 74 17                                                 	je	amd3dnow_mmreg_mmreg
0000F8DA: 3C 5B                                                 	cmp	al,'['
0000F8DC: 0F 85 5C 10 FF FF                                     	jne	invalid_operand
0000F8E2: E8 A9 14 00 00                                        	call	get_address
0000F8E7: E8 87 1C 00 00                                        	call	store_instruction_with_imm8
0000F8EC: E9 89 56 FF FF                                        	jmp	instruction_assembled
                                                                      amd3dnow_mmreg_mmreg:
0000F8F1: AC                                                    	lods	byte [esi]
0000F8F2: E8 F8 13 00 00                                        	call	convert_mmx_register
0000F8F7: 80 FC 08                                              	cmp	ah,8
0000F8FA: 0F 85 48 10 FF FF                                     	jne	invalid_operand_size
0000F900: 88 C3                                                 	mov	bl,al
0000F902: E8 89 16 00 00                                        	call	store_nomem_instruction
0000F907: A0 00 A2 01 00                                        	mov	al,byte [value]
0000F90C: AA                                                    	stos	byte [edi]
0000F90D: E9 68 56 FF FF                                        	jmp	instruction_assembled
                                                                
                                                                sse4_instruction_38_xmm0:
0000F912: C6 05 AB A2 01 00 FF                                  	mov	[immediate_size],-1
0000F919: EB 0E                                                 	jmp	sse4_instruction_38
                                                                sse4_instruction_66_38_xmm0:
0000F91B: C6 05 AB A2 01 00 FF                                  	mov	[immediate_size],-1
                                                                sse4_instruction_66_38:
0000F922: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                sse4_instruction_38:
0000F929: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
0000F930: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
0000F935: B0 38                                                 	mov	al,38h
0000F937: E9 6B F9 FF FF                                        	jmp	sse_instruction
                                                                sse4_ss_instruction_66_3a_imm8:
0000F93C: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
0000F943: B1 04                                                 	mov	cl,4
0000F945: EB 14                                                 	jmp	sse4_instruction_66_3a_setup
                                                                sse4_sd_instruction_66_3a_imm8:
0000F947: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
0000F94E: B1 08                                                 	mov	cl,8
0000F950: EB 09                                                 	jmp	sse4_instruction_66_3a_setup
                                                                sse4_instruction_66_3a_imm8:
0000F952: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
0000F959: B1 10                                                 	mov	cl,16
                                                                      sse4_instruction_66_3a_setup:
0000F95B: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                      sse4_instruction_3a_setup:
0000F962: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
0000F967: B0 3A                                                 	mov	al,3Ah
0000F969: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
0000F96F: E9 33 F9 FF FF                                        	jmp	sse_instruction
                                                                sse4_instruction_3a_imm8:
0000F974: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
0000F97B: B1 10                                                 	mov	cl,16
0000F97D: EB E3                                                 	jmp	sse4_instruction_3a_setup
                                                                pclmulqdq_instruction:
0000F97F: A2 00 A2 01 00                                        	mov	byte [value],al
0000F984: B0 44                                                 	mov	al,44h
0000F986: B1 10                                                 	mov	cl,16
0000F988: EB D1                                                 	jmp	sse4_instruction_66_3a_setup
                                                                extractps_instruction:
0000F98A: E8 B6 00 00 00                                        	call	setup_66_0f_3a
0000F98F: AC                                                    	lods	byte [esi]
0000F990: E8 9F 13 00 00                                        	call	get_size_operator
0000F995: 3C 10                                                 	cmp	al,10h
0000F997: 74 57                                                 	je	extractps_reg
0000F999: 3C 5B                                                 	cmp	al,'['
0000F99B: 0F 85 9D 0F FF FF                                     	jne	invalid_operand
0000F9A1: E8 EA 13 00 00                                        	call	get_address
0000F9A6: 80 3D A4 A2 01 00 04                                  	cmp	[operand_size],4
0000F9AD: 74 0D                                                 	je	extractps_size_ok
0000F9AF: 80 3D A4 A2 01 00 00                                  	cmp	[operand_size],0
0000F9B6: 0F 85 8C 0F FF FF                                     	jne	invalid_operand_size
                                                                      extractps_size_ok:
0000F9BC: 52 53 51                                              	push	edx ebx ecx
0000F9BF: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000F9C6: AC                                                    	lods	byte [esi]
0000F9C7: 3C 2C                                                 	cmp	al,','
0000F9C9: 0F 85 6F 0F FF FF                                     	jne	invalid_operand
0000F9CF: AC                                                    	lods	byte [esi]
0000F9D0: E8 5F 13 00 00                                        	call	get_size_operator
0000F9D5: 3C 10                                                 	cmp	al,10h
0000F9D7: 0F 85 61 0F FF FF                                     	jne	invalid_operand
0000F9DD: AC                                                    	lods	byte [esi]
0000F9DE: E8 42 13 00 00                                        	call	convert_xmm_register
0000F9E3: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000F9E8: 59 5B 5A                                              	pop	ecx ebx edx
0000F9EB: E9 9F F2 FF FF                                        	jmp	mmx_imm8
                                                                      extractps_reg:
0000F9F0: AC                                                    	lods	byte [esi]
0000F9F1: E8 97 12 00 00                                        	call	convert_register
0000F9F6: 50                                                    	push	eax
0000F9F7: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000F9FE: AC                                                    	lods	byte [esi]
0000F9FF: 3C 2C                                                 	cmp	al,','
0000FA01: 0F 85 37 0F FF FF                                     	jne	invalid_operand
0000FA07: AC                                                    	lods	byte [esi]
0000FA08: E8 27 13 00 00                                        	call	get_size_operator
0000FA0D: 3C 10                                                 	cmp	al,10h
0000FA0F: 0F 85 29 0F FF FF                                     	jne	invalid_operand
0000FA15: AC                                                    	lods	byte [esi]
0000FA16: E8 0A 13 00 00                                        	call	convert_xmm_register
0000FA1B: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000FA20: 5B                                                    	pop	ebx
0000FA21: 88 F8                                                 	mov	al,bh
0000FA23: 3C 04                                                 	cmp	al,4
0000FA25: 0F 84 AC F2 FF FF                                     	je	mmx_nomem_imm8
0000FA2B: 3C 08                                                 	cmp	al,8
0000FA2D: 0F 85 15 0F FF FF                                     	jne	invalid_operand_size
0000FA33: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000FA3A: 0F 85 F4 0E FF FF                                     	jne	illegal_instruction
0000FA40: E9 92 F2 FF FF                                        	jmp	mmx_nomem_imm8
                                                                      setup_66_0f_3a:
0000FA45: C6 05 B0 A2 01 00 3A                                  	mov	[extended_code],3Ah
0000FA4C: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
0000FA51: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000FA58: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
0000FA5F: C3                                                    	ret
                                                                insertps_instruction:
0000FA60: E8 E0 FF FF FF                                        	call	setup_66_0f_3a
0000FA65: AC                                                    	lods	byte [esi]
0000FA66: E8 C9 12 00 00                                        	call	get_size_operator
0000FA6B: 3C 10                                                 	cmp	al,10h
0000FA6D: 0F 85 CB 0E FF FF                                     	jne	invalid_operand
0000FA73: AC                                                    	lods	byte [esi]
0000FA74: E8 AC 12 00 00                                        	call	convert_xmm_register
0000FA79: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000FA7E: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000FA85: AC                                                    	lods	byte [esi]
0000FA86: 3C 2C                                                 	cmp	al,','
0000FA88: 0F 85 B0 0E FF FF                                     	jne	invalid_operand
0000FA8E: AC                                                    	lods	byte [esi]
0000FA8F: E8 A0 12 00 00                                        	call	get_size_operator
0000FA94: 3C 10                                                 	cmp	al,10h
0000FA96: 74 28                                                 	je	insertps_xmmreg_reg
0000FA98: 3C 5B                                                 	cmp	al,'['
0000FA9A: 0F 85 9E 0E FF FF                                     	jne	invalid_operand
0000FAA0: E8 EB 12 00 00                                        	call	get_address
0000FAA5: 80 3D A4 A2 01 00 04                                  	cmp	[operand_size],4
0000FAAC: 74 0D                                                 	je	insertps_size_ok
0000FAAE: 80 3D A4 A2 01 00 00                                  	cmp	[operand_size],0
0000FAB5: 0F 85 8D 0E FF FF                                     	jne	invalid_operand_size
                                                                      insertps_size_ok:
0000FABB: E9 CF F1 FF FF                                        	jmp	mmx_imm8
                                                                      insertps_xmmreg_reg:
0000FAC0: AC                                                    	lods	byte [esi]
0000FAC1: E8 29 12 00 00                                        	call	convert_mmx_register
0000FAC6: 88 C3                                                 	mov	bl,al
0000FAC8: E9 0A F2 FF FF                                        	jmp	mmx_nomem_imm8
                                                                pextrq_instruction:
0000FACD: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
0000FAD4: EB 19                                                 	jmp	pextr_instruction
                                                                pextrd_instruction:
0000FAD6: C6 05 B5 A2 01 00 04                                  	mov	[mmx_size],4
0000FADD: EB 10                                                 	jmp	pextr_instruction
                                                                pextrw_instruction:
0000FADF: C6 05 B5 A2 01 00 02                                  	mov	[mmx_size],2
0000FAE6: EB 07                                                 	jmp	pextr_instruction
                                                                pextrb_instruction:
0000FAE8: C6 05 B5 A2 01 00 01                                  	mov	[mmx_size],1
                                                                      pextr_instruction:
0000FAEF: E8 51 FF FF FF                                        	call	setup_66_0f_3a
0000FAF4: AC                                                    	lods	byte [esi]
0000FAF5: E8 3A 12 00 00                                        	call	get_size_operator
0000FAFA: 3C 10                                                 	cmp	al,10h
0000FAFC: 74 64                                                 	je	pextr_reg
0000FAFE: 3C 5B                                                 	cmp	al,'['
0000FB00: 0F 85 38 0E FF FF                                     	jne	invalid_operand
0000FB06: E8 85 12 00 00                                        	call	get_address
0000FB0B: A0 B5 A2 01 00                                        	mov	al,[mmx_size]
0000FB10: 3A 05 A4 A2 01 00                                     	cmp	al,[operand_size]
0000FB16: 74 0D                                                 	je	pextr_size_ok
0000FB18: 80 3D A4 A2 01 00 00                                  	cmp	[operand_size],0
0000FB1F: 0F 85 23 0E FF FF                                     	jne	invalid_operand_size
                                                                      pextr_size_ok:
0000FB25: 3C 08                                                 	cmp	al,8
0000FB27: 75 05                                                 	jne	pextr_prefix_ok
0000FB29: E8 7A 13 00 00                                        	call	operand_64bit
                                                                      pextr_prefix_ok:
0000FB2E: 52 53 51                                              	push	edx ebx ecx
0000FB31: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000FB38: AC                                                    	lods	byte [esi]
0000FB39: 3C 2C                                                 	cmp	al,','
0000FB3B: 0F 85 FD 0D FF FF                                     	jne	invalid_operand
0000FB41: AC                                                    	lods	byte [esi]
0000FB42: E8 ED 11 00 00                                        	call	get_size_operator
0000FB47: 3C 10                                                 	cmp	al,10h
0000FB49: 0F 85 EF 0D FF FF                                     	jne	invalid_operand
0000FB4F: AC                                                    	lods	byte [esi]
0000FB50: E8 D0 11 00 00                                        	call	convert_xmm_register
0000FB55: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000FB5A: 59 5B 5A                                              	pop	ecx ebx edx
0000FB5D: E9 2D F1 FF FF                                        	jmp	mmx_imm8
                                                                      pextr_reg:
0000FB62: AC                                                    	lods	byte [esi]
0000FB63: E8 25 11 00 00                                        	call	convert_register
0000FB68: 80 3D B5 A2 01 00 04                                  	cmp	[mmx_size],4
0000FB6F: 77 18                                                 	ja	pextrq_reg
0000FB71: 80 FC 04                                              	cmp	ah,4
0000FB74: 74 1D                                                 	je	pextr_reg_size_ok
0000FB76: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0000FB7D: 75 05                                                 	jne	pextr_invalid_size
0000FB7F: 80 FC 08                                              	cmp	ah,8
0000FB82: 74 0F                                                 	je	pextr_reg_size_ok
                                                                      pextr_invalid_size:
0000FB84: E9 BF 0D FF FF                                        	jmp	invalid_operand_size
                                                                      pextrq_reg:
0000FB89: 80 FC 08                                              	cmp	ah,8
0000FB8C: 75 F6                                                 	jne	pextr_invalid_size
0000FB8E: E8 15 13 00 00                                        	call	operand_64bit
                                                                      pextr_reg_size_ok:
0000FB93: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000FB9A: 50                                                    	push	eax
0000FB9B: AC                                                    	lods	byte [esi]
0000FB9C: 3C 2C                                                 	cmp	al,','
0000FB9E: 0F 85 9A 0D FF FF                                     	jne	invalid_operand
0000FBA4: AC                                                    	lods	byte [esi]
0000FBA5: E8 8A 11 00 00                                        	call	get_size_operator
0000FBAA: 3C 10                                                 	cmp	al,10h
0000FBAC: 0F 85 8C 0D FF FF                                     	jne	invalid_operand
0000FBB2: AC                                                    	lods	byte [esi]
0000FBB3: E8 37 11 00 00                                        	call	convert_mmx_register
0000FBB8: 89 C3                                                 	mov	ebx,eax
0000FBBA: 58                                                    	pop	eax
0000FBBB: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000FBC0: 88 E0                                                 	mov	al,ah
0000FBC2: 80 3D B5 A2 01 00 02                                  	cmp	[mmx_size],2
0000FBC9: 75 18                                                 	jne	pextr_reg_store
0000FBCB: C6 05 A8 A2 01 00 00                                  	mov	[opcode_prefix],0
0000FBD2: C6 05 B0 A2 01 00 C5                                  	mov	[extended_code],0C5h
0000FBD9: E8 24 F3 FF FF                                        	call	make_mmx_prefix
0000FBDE: E9 F4 F0 FF FF                                        	jmp	mmx_nomem_imm8
                                                                      pextr_reg_store:
0000FBE3: 80 FF 10                                              	cmp	bh,16
0000FBE6: 0F 85 5C 0D FF FF                                     	jne	invalid_operand_size
0000FBEC: 86 1D B2 A2 01 00                                     	xchg	bl,[postbyte_register]
0000FBF2: E9 E0 F0 FF FF                                        	jmp	mmx_nomem_imm8
                                                                pinsrb_instruction:
0000FBF7: C6 05 B5 A2 01 00 01                                  	mov	[mmx_size],1
0000FBFE: EB 15                                                 	jmp	pinsr_instruction
                                                                pinsrd_instruction:
0000FC00: C6 05 B5 A2 01 00 04                                  	mov	[mmx_size],4
0000FC07: EB 0C                                                 	jmp	pinsr_instruction
                                                                pinsrq_instruction:
0000FC09: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
0000FC10: E8 93 12 00 00                                        	call	operand_64bit
                                                                      pinsr_instruction:
0000FC15: E8 2B FE FF FF                                        	call	setup_66_0f_3a
0000FC1A: AC                                                    	lods	byte [esi]
0000FC1B: E8 14 11 00 00                                        	call	get_size_operator
0000FC20: 3C 10                                                 	cmp	al,10h
0000FC22: 0F 85 16 0D FF FF                                     	jne	invalid_operand
0000FC28: AC                                                    	lods	byte [esi]
0000FC29: E8 F7 10 00 00                                        	call	convert_xmm_register
0000FC2E: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
                                                                      pinsr_xmmreg:
0000FC33: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000FC3A: AC                                                    	lods	byte [esi]
0000FC3B: 3C 2C                                                 	cmp	al,','
0000FC3D: 0F 85 FB 0C FF FF                                     	jne	invalid_operand
0000FC43: AC                                                    	lods	byte [esi]
0000FC44: E8 EB 10 00 00                                        	call	get_size_operator
0000FC49: 3C 10                                                 	cmp	al,10h
0000FC4B: 74 30                                                 	je	pinsr_xmmreg_reg
0000FC4D: 3C 5B                                                 	cmp	al,'['
0000FC4F: 0F 85 E9 0C FF FF                                     	jne	invalid_operand
0000FC55: E8 36 11 00 00                                        	call	get_address
0000FC5A: 80 3D A4 A2 01 00 00                                  	cmp	[operand_size],0
0000FC61: 0F 84 28 F0 FF FF                                     	je	mmx_imm8
0000FC67: A0 B5 A2 01 00                                        	mov	al,[mmx_size]
0000FC6C: 3A 05 A4 A2 01 00                                     	cmp	al,[operand_size]
0000FC72: 0F 84 17 F0 FF FF                                     	je	mmx_imm8
0000FC78: E9 CB 0C FF FF                                        	jmp	invalid_operand_size
                                                                      pinsr_xmmreg_reg:
0000FC7D: AC                                                    	lods	byte [esi]
0000FC7E: E8 0A 10 00 00                                        	call	convert_register
0000FC83: 88 C3                                                 	mov	bl,al
0000FC85: 80 3D B5 A2 01 00 08                                  	cmp	[mmx_size],8
0000FC8C: 74 0E                                                 	je	pinsrq_xmmreg_reg
0000FC8E: 80 FC 04                                              	cmp	ah,4
0000FC91: 0F 84 40 F0 FF FF                                     	je	mmx_nomem_imm8
0000FC97: E9 AC 0C FF FF                                        	jmp	invalid_operand_size
                                                                      pinsrq_xmmreg_reg:
0000FC9C: 80 FC 08                                              	cmp	ah,8
0000FC9F: 0F 84 32 F0 FF FF                                     	je	mmx_nomem_imm8
0000FCA5: E9 9E 0C FF FF                                        	jmp	invalid_operand_size
                                                                pmovsxbw_instruction:
0000FCAA: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
0000FCB1: EB 2B                                                 	jmp	pmovsx_instruction
                                                                pmovsxbd_instruction:
0000FCB3: C6 05 B5 A2 01 00 04                                  	mov	[mmx_size],4
0000FCBA: EB 22                                                 	jmp	pmovsx_instruction
                                                                pmovsxbq_instruction:
0000FCBC: C6 05 B5 A2 01 00 02                                  	mov	[mmx_size],2
0000FCC3: EB 19                                                 	jmp	pmovsx_instruction
                                                                pmovsxwd_instruction:
0000FCC5: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
0000FCCC: EB 10                                                 	jmp	pmovsx_instruction
                                                                pmovsxwq_instruction:
0000FCCE: C6 05 B5 A2 01 00 04                                  	mov	[mmx_size],4
0000FCD5: EB 07                                                 	jmp	pmovsx_instruction
                                                                pmovsxdq_instruction:
0000FCD7: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
                                                                      pmovsx_instruction:
0000FCDE: E8 70 00 00 00                                        	call	setup_66_0f_38
0000FCE3: AC                                                    	lods	byte [esi]
0000FCE4: E8 4B 10 00 00                                        	call	get_size_operator
0000FCE9: 3C 10                                                 	cmp	al,10h
0000FCEB: 0F 85 4D 0C FF FF                                     	jne	invalid_operand
0000FCF1: AC                                                    	lods	byte [esi]
0000FCF2: E8 2E 10 00 00                                        	call	convert_xmm_register
0000FCF7: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000FCFC: AC                                                    	lods	byte [esi]
0000FCFD: 3C 2C                                                 	cmp	al,','
0000FCFF: 0F 85 39 0C FF FF                                     	jne	invalid_operand
0000FD05: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000FD0C: AC                                                    	lods	byte [esi]
0000FD0D: E8 22 10 00 00                                        	call	get_size_operator
0000FD12: 3C 10                                                 	cmp	al,10h
0000FD14: 74 30                                                 	je	pmovsx_xmmreg_reg
0000FD16: 3C 5B                                                 	cmp	al,'['
0000FD18: 0F 85 20 0C FF FF                                     	jne	invalid_operand
0000FD1E: E8 6D 10 00 00                                        	call	get_address
0000FD23: 80 3D A4 A2 01 00 00                                  	cmp	[operand_size],0
0000FD2A: 0F 84 F4 B7 FF FF                                     	je	instruction_ready
0000FD30: A0 B5 A2 01 00                                        	mov	al,[mmx_size]
0000FD35: 3A 05 A4 A2 01 00                                     	cmp	al,[operand_size]
0000FD3B: 0F 85 07 0C FF FF                                     	jne	invalid_operand_size
0000FD41: E9 DE B7 FF FF                                        	jmp	instruction_ready
                                                                      pmovsx_xmmreg_reg:
0000FD46: AC                                                    	lods	byte [esi]
0000FD47: E8 D9 0F 00 00                                        	call	convert_xmm_register
0000FD4C: 88 C3                                                 	mov	bl,al
0000FD4E: E9 AC B9 FF FF                                        	jmp	nomem_instruction_ready
                                                                      setup_66_0f_38:
0000FD53: C6 05 B0 A2 01 00 38                                  	mov	[extended_code],38h
0000FD5A: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
0000FD5F: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000FD66: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
0000FD6D: C3                                                    	ret
                                                                
                                                                xsaves_instruction_64bit:
0000FD6E: E8 35 11 00 00                                        	call	operand_64bit
                                                                xsaves_instruction:
0000FD73: B4 C7                                                 	mov	ah,0C7h
0000FD75: EB 09                                                 	jmp	xsave_common
                                                                fxsave_instruction_64bit:
0000FD77: E8 2C 11 00 00                                        	call	operand_64bit
                                                                fxsave_instruction:
0000FD7C: B4 AE                                                 	mov	ah,0AEh
0000FD7E: 30 C9                                                 	xor	cl,cl
                                                                      xsave_common:
0000FD80: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000FD87: 88 25 B0 A2 01 00                                     	mov	[extended_code],ah
0000FD8D: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000FD92: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
0000FD98: AC                                                    	lods	byte [esi]
0000FD99: E8 96 0F 00 00                                        	call	get_size_operator
0000FD9E: 3C 5B                                                 	cmp	al,'['
0000FDA0: 0F 85 98 0B FF FF                                     	jne	invalid_operand
0000FDA6: E8 E5 0F 00 00                                        	call	get_address
0000FDAB: 8A 25 A4 A2 01 00                                     	mov	ah,[operand_size]
0000FDB1: 08 E4                                                 	or	ah,ah
0000FDB3: 74 0C                                                 	jz	xsave_size_ok
0000FDB5: 3A 25 B5 A2 01 00                                     	cmp	ah,[mmx_size]
0000FDBB: 0F 85 87 0B FF FF                                     	jne	invalid_operand_size
                                                                      xsave_size_ok:
0000FDC1: E9 5E B7 FF FF                                        	jmp	instruction_ready
                                                                clflush_instruction:
0000FDC6: B4 AE                                                 	mov	ah,0AEh
0000FDC8: B1 01                                                 	mov	cl,1
0000FDCA: EB B4                                                 	jmp	xsave_common
                                                                cldemote_instruction:
0000FDCC: B4 1C                                                 	mov	ah,1Ch
0000FDCE: B1 01                                                 	mov	cl,1
0000FDD0: EB AE                                                 	jmp	xsave_common
                                                                stmxcsr_instruction:
0000FDD2: B4 AE                                                 	mov	ah,0AEh
0000FDD4: B1 04                                                 	mov	cl,4
0000FDD6: EB A8                                                 	jmp	xsave_common
                                                                prefetch_instruction:
0000FDD8: C6 05 B0 A2 01 00 18                                  	mov	[extended_code],18h
                                                                      prefetch_mem_8bit:
0000FDDF: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000FDE6: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000FDEB: AC                                                    	lods	byte [esi]
0000FDEC: E8 43 0F 00 00                                        	call	get_size_operator
0000FDF1: 3C 5B                                                 	cmp	al,'['
0000FDF3: 0F 85 45 0B FF FF                                     	jne	invalid_operand
0000FDF9: 08 E4                                                 	or	ah,ah
0000FDFB: 74 09                                                 	jz	prefetch_size_ok
0000FDFD: 80 FC 01                                              	cmp	ah,1
0000FE00: 0F 85 42 0B FF FF                                     	jne	invalid_operand_size
                                                                      prefetch_size_ok:
0000FE06: E8 85 0F 00 00                                        	call	get_address
0000FE0B: E9 14 B7 FF FF                                        	jmp	instruction_ready
                                                                amd_prefetch_instruction:
0000FE10: C6 05 B0 A2 01 00 0D                                  	mov	[extended_code],0Dh
0000FE17: EB C6                                                 	jmp	prefetch_mem_8bit
                                                                clflushopt_instruction:
0000FE19: C6 05 B0 A2 01 00 AE                                  	mov	[extended_code],0AEh
0000FE20: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
0000FE27: EB B6                                                 	jmp	prefetch_mem_8bit
                                                                pcommit_instruction:
0000FE29: C6 07 66                                              	mov	byte [edi],66h
0000FE2C: 47                                                    	inc	edi
                                                                fence_instruction:
0000FE2D: 88 C3                                                 	mov	bl,al
0000FE2F: 66 B8 0F AE                                           	mov	ax,0AE0Fh
0000FE33: 66 AB                                                 	stos	word [edi]
0000FE35: 88 D8                                                 	mov	al,bl
0000FE37: AA                                                    	stos	byte [edi]
0000FE38: E9 3D 51 FF FF                                        	jmp	instruction_assembled
                                                                pause_instruction:
0000FE3D: 66 B8 F3 90                                           	mov	ax,90F3h
0000FE41: 66 AB                                                 	stos	word [edi]
0000FE43: E9 32 51 FF FF                                        	jmp	instruction_assembled
                                                                movntq_instruction:
0000FE48: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
0000FE4F: EB 0E                                                 	jmp	movnt_instruction
                                                                movntpd_instruction:
0000FE51: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                movntps_instruction:
0000FE58: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
                                                                      movnt_instruction:
0000FE5F: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000FE64: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000FE6B: AC                                                    	lods	byte [esi]
0000FE6C: E8 C3 0E 00 00                                        	call	get_size_operator
0000FE71: 3C 5B                                                 	cmp	al,'['
0000FE73: 0F 85 C5 0A FF FF                                     	jne	invalid_operand
0000FE79: E8 12 0F 00 00                                        	call	get_address
0000FE7E: AC                                                    	lods	byte [esi]
0000FE7F: 3C 2C                                                 	cmp	al,','
0000FE81: 0F 85 B7 0A FF FF                                     	jne	invalid_operand
0000FE87: AC                                                    	lods	byte [esi]
0000FE88: E8 A7 0E 00 00                                        	call	get_size_operator
0000FE8D: 3C 10                                                 	cmp	al,10h
0000FE8F: 0F 85 A9 0A FF FF                                     	jne	invalid_operand
0000FE95: AC                                                    	lods	byte [esi]
0000FE96: E8 54 0E 00 00                                        	call	convert_mmx_register
0000FE9B: 3A 25 B5 A2 01 00                                     	cmp	ah,[mmx_size]
0000FEA1: 0F 85 A1 0A FF FF                                     	jne	invalid_operand_size
0000FEA7: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000FEAC: E9 73 B6 FF FF                                        	jmp	instruction_ready
                                                                
                                                                movntsd_instruction:
0000FEB1: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
0000FEB8: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
0000FEBF: EB 0E                                                 	jmp	movnts_instruction
                                                                movntss_instruction:
0000FEC1: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0000FEC8: C6 05 B5 A2 01 00 04                                  	mov	[mmx_size],4
                                                                      movnts_instruction:
0000FECF: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000FED4: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000FEDB: AC                                                    	lods	byte [esi]
0000FEDC: E8 53 0E 00 00                                        	call	get_size_operator
0000FEE1: 3C 5B                                                 	cmp	al,'['
0000FEE3: 0F 85 55 0A FF FF                                     	jne	invalid_operand
0000FEE9: E8 A2 0E 00 00                                        	call	get_address
0000FEEE: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0000FEF3: 3A 05 B5 A2 01 00                                     	cmp	al,[mmx_size]
0000FEF9: 74 08                                                 	je	movnts_size_ok
0000FEFB: 84 C0                                                 	test	al,al
0000FEFD: 0F 85 45 0A FF FF                                     	jnz	invalid_operand_size
                                                                      movnts_size_ok:
0000FF03: AC                                                    	lods	byte [esi]
0000FF04: 3C 2C                                                 	cmp	al,','
0000FF06: 0F 85 32 0A FF FF                                     	jne	invalid_operand
0000FF0C: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0000FF13: AC                                                    	lods	byte [esi]
0000FF14: E8 1B 0E 00 00                                        	call	get_size_operator
0000FF19: 3C 10                                                 	cmp	al,10h
0000FF1B: 0F 85 1D 0A FF FF                                     	jne	invalid_operand
0000FF21: AC                                                    	lods	byte [esi]
0000FF22: E8 FE 0D 00 00                                        	call	convert_xmm_register
0000FF27: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000FF2C: E9 F3 B5 FF FF                                        	jmp	instruction_ready
                                                                
                                                                movdiri_instruction:
0000FF31: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
0000FF36: B0 38                                                 	mov	al,38h
                                                                movnti_instruction:
0000FF38: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0000FF3F: A2 B0 A2 01 00                                        	mov	[extended_code],al
0000FF44: AC                                                    	lods	byte [esi]
0000FF45: E8 EA 0D 00 00                                        	call	get_size_operator
0000FF4A: 3C 5B                                                 	cmp	al,'['
0000FF4C: 0F 85 EC 09 FF FF                                     	jne	invalid_operand
0000FF52: E8 39 0E 00 00                                        	call	get_address
0000FF57: AC                                                    	lods	byte [esi]
0000FF58: 3C 2C                                                 	cmp	al,','
0000FF5A: 0F 85 DE 09 FF FF                                     	jne	invalid_operand
0000FF60: E8 19 0D 00 00                                        	call	take_register
0000FF65: 80 FC 04                                              	cmp	ah,4
0000FF68: 74 0E                                                 	je	movnti_store
0000FF6A: 80 FC 08                                              	cmp	ah,8
0000FF6D: 0F 85 D5 09 FF FF                                     	jne	invalid_operand_size
0000FF73: E8 30 0F 00 00                                        	call	operand_64bit
                                                                      movnti_store:
0000FF78: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000FF7D: E9 A2 B5 FF FF                                        	jmp	instruction_ready
                                                                monitor_instruction:
0000FF82: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000FF87: 80 3E 00                                              	cmp	byte [esi],0
0000FF8A: 74 4D                                                 	je	monitor_instruction_store
0000FF8C: 80 3E 0F                                              	cmp	byte [esi],0Fh
0000FF8F: 74 48                                                 	je	monitor_instruction_store
0000FF91: E8 E8 0C 00 00                                        	call	take_register
0000FF96: 66 3D 00 04                                           	cmp	ax,0400h
0000FF9A: 0F 85 9E 09 FF FF                                     	jne	invalid_operand
0000FFA0: AC                                                    	lods	byte [esi]
0000FFA1: 3C 2C                                                 	cmp	al,','
0000FFA3: 0F 85 95 09 FF FF                                     	jne	invalid_operand
0000FFA9: E8 D0 0C 00 00                                        	call	take_register
0000FFAE: 66 3D 01 04                                           	cmp	ax,0401h
0000FFB2: 0F 85 86 09 FF FF                                     	jne	invalid_operand
0000FFB8: 80 3D B2 A2 01 00 C8                                  	cmp	[postbyte_register],0C8h
0000FFBF: 75 18                                                 	jne	monitor_instruction_store
0000FFC1: AC                                                    	lods	byte [esi]
0000FFC2: 3C 2C                                                 	cmp	al,','
0000FFC4: 0F 85 74 09 FF FF                                     	jne	invalid_operand
0000FFCA: E8 AF 0C 00 00                                        	call	take_register
0000FFCF: 66 3D 02 04                                           	cmp	ax,0402h
0000FFD3: 0F 85 65 09 FF FF                                     	jne	invalid_operand
                                                                      monitor_instruction_store:
0000FFD9: 66 B8 0F 01                                           	mov	ax,010Fh
0000FFDD: 66 AB                                                 	stos	word [edi]
0000FFDF: A0 B2 A2 01 00                                        	mov	al,[postbyte_register]
0000FFE4: AA                                                    	stos	byte [edi]
0000FFE5: E9 90 4F FF FF                                        	jmp	instruction_assembled
                                                                pconfig_instruction:
0000FFEA: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0000FFEF: EB E8                                                 	jmp	monitor_instruction_store
                                                                movntdqa_instruction:
0000FFF1: E8 5D FD FF FF                                        	call	setup_66_0f_38
0000FFF6: AC                                                    	lods	byte [esi]
0000FFF7: E8 38 0D 00 00                                        	call	get_size_operator
0000FFFC: 3C 10                                                 	cmp	al,10h
0000FFFE: 0F 85 3A 09 FF FF                                     	jne	invalid_operand
00010004: AC                                                    	lods	byte [esi]
00010005: E8 1B 0D 00 00                                        	call	convert_xmm_register
0001000A: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0001000F: AC                                                    	lods	byte [esi]
00010010: 3C 2C                                                 	cmp	al,','
00010012: 0F 85 26 09 FF FF                                     	jne	invalid_operand
00010018: AC                                                    	lods	byte [esi]
00010019: E8 16 0D 00 00                                        	call	get_size_operator
0001001E: 3C 5B                                                 	cmp	al,'['
00010020: 0F 85 18 09 FF FF                                     	jne	invalid_operand
00010026: E8 65 0D 00 00                                        	call	get_address
0001002B: E9 F4 B4 FF FF                                        	jmp	instruction_ready
                                                                
                                                                extrq_instruction:
00010030: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00010037: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0001003E: C6 05 B0 A2 01 00 78                                  	mov	[extended_code],78h
00010045: AC                                                    	lods	byte [esi]
00010046: E8 E9 0C 00 00                                        	call	get_size_operator
0001004B: 3C 10                                                 	cmp	al,10h
0001004D: 0F 85 EB 08 FF FF                                     	jne	invalid_operand
00010053: AC                                                    	lods	byte [esi]
00010054: E8 CC 0C 00 00                                        	call	convert_xmm_register
00010059: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0001005E: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
00010065: AC                                                    	lods	byte [esi]
00010066: 3C 2C                                                 	cmp	al,','
00010068: 0F 85 D0 08 FF FF                                     	jne	invalid_operand
0001006E: AC                                                    	lods	byte [esi]
0001006F: E8 C0 0C 00 00                                        	call	get_size_operator
00010074: 3C 10                                                 	cmp	al,10h
00010076: 74 2E                                                 	je	extrq_xmmreg_xmmreg
00010078: F6 C4 FE                                              	test	ah,not 1
0001007B: 0F 85 C7 08 FF FF                                     	jnz	invalid_operand_size
00010081: 3C 28                                                 	cmp	al,'('
00010083: 0F 85 B5 08 FF FF                                     	jne	invalid_operand
00010089: 30 DB                                                 	xor	bl,bl
0001008B: 86 1D B2 A2 01 00                                     	xchg	bl,[postbyte_register]
00010091: E8 FA 0E 00 00                                        	call	store_nomem_instruction
00010096: E8 1C 72 FF FF                                        	call	get_byte_value
0001009B: AA                                                    	stosb
0001009C: E8 45 EC FF FF                                        	call	append_imm8
000100A1: E9 D4 4E FF FF                                        	jmp	instruction_assembled
                                                                      extrq_xmmreg_xmmreg:
000100A6: FE 05 B0 A2 01 00                                     	inc	[extended_code]
000100AC: AC                                                    	lods	byte [esi]
000100AD: E8 73 0C 00 00                                        	call	convert_xmm_register
000100B2: 88 C3                                                 	mov	bl,al
000100B4: E9 46 B6 FF FF                                        	jmp	nomem_instruction_ready
                                                                insertq_instruction:
000100B9: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
000100C0: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
000100C7: C6 05 B0 A2 01 00 78                                  	mov	[extended_code],78h
000100CE: AC                                                    	lods	byte [esi]
000100CF: E8 60 0C 00 00                                        	call	get_size_operator
000100D4: 3C 10                                                 	cmp	al,10h
000100D6: 0F 85 62 08 FF FF                                     	jne	invalid_operand
000100DC: AC                                                    	lods	byte [esi]
000100DD: E8 43 0C 00 00                                        	call	convert_xmm_register
000100E2: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000100E7: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
000100EE: AC                                                    	lods	byte [esi]
000100EF: 3C 2C                                                 	cmp	al,','
000100F1: 0F 85 47 08 FF FF                                     	jne	invalid_operand
000100F7: AC                                                    	lods	byte [esi]
000100F8: E8 37 0C 00 00                                        	call	get_size_operator
000100FD: 3C 10                                                 	cmp	al,10h
000100FF: 0F 85 39 08 FF FF                                     	jne	invalid_operand
00010105: AC                                                    	lods	byte [esi]
00010106: E8 1A 0C 00 00                                        	call	convert_xmm_register
0001010B: 88 C3                                                 	mov	bl,al
0001010D: 80 3E 2C                                              	cmp	byte [esi],','
00010110: 74 0B                                                 	je	insertq_with_imm
00010112: FE 05 B0 A2 01 00                                     	inc	[extended_code]
00010118: E9 E2 B5 FF FF                                        	jmp	nomem_instruction_ready
                                                                      insertq_with_imm:
0001011D: E8 6E 0E 00 00                                        	call	store_nomem_instruction
00010122: E8 BF EB FF FF                                        	call	append_imm8
00010127: E8 BA EB FF FF                                        	call	append_imm8
0001012C: E9 49 4E FF FF                                        	jmp	instruction_assembled
                                                                
                                                                crc32_instruction:
00010131: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
00010138: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0001013F: C6 05 B0 A2 01 00 38                                  	mov	[extended_code],38h
00010146: C6 05 B1 A2 01 00 F0                                  	mov	[supplemental_code],0F0h
0001014D: E8 2C 0B 00 00                                        	call	take_register
00010152: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00010157: 80 FC 04                                              	cmp	ah,4
0001015A: 74 16                                                 	je	crc32_reg_size_ok
0001015C: 80 FC 08                                              	cmp	ah,8
0001015F: 0F 85 D9 07 FF FF                                     	jne	invalid_operand
00010165: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0001016C: 0F 85 C2 07 FF FF                                     	jne	illegal_instruction
                                                                      crc32_reg_size_ok:
00010172: AC                                                    	lods	byte [esi]
00010173: 3C 2C                                                 	cmp	al,','
00010175: 0F 85 C3 07 FF FF                                     	jne	invalid_operand
0001017B: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
00010182: AC                                                    	lods	byte [esi]
00010183: E8 AC 0B 00 00                                        	call	get_size_operator
00010188: 3C 10                                                 	cmp	al,10h
0001018A: 74 31                                                 	je	crc32_reg_reg
0001018C: 3C 5B                                                 	cmp	al,'['
0001018E: 0F 85 AA 07 FF FF                                     	jne	invalid_operand
00010194: E8 F7 0B 00 00                                        	call	get_address
00010199: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0001019E: 84 C0                                                 	test	al,al
000101A0: 74 14                                                 	jz	crc32_unknown_size
000101A2: 3C 01                                                 	cmp	al,1
000101A4: 74 0B                                                 	je	crc32_reg_mem_store
000101A6: FE 05 B1 A2 01 00                                     	inc	[supplemental_code]
000101AC: E8 0C 0D 00 00                                        	call	operand_autodetect
                                                                      crc32_reg_mem_store:
000101B1: E9 6E B3 FF FF                                        	jmp	instruction_ready
                                                                      crc32_unknown_size:
000101B6: E8 B3 B6 FF FF                                        	call	recoverable_unknown_size
000101BB: EB F4                                                 	jmp	crc32_reg_mem_store
                                                                      crc32_reg_reg:
000101BD: AC                                                    	lods	byte [esi]
000101BE: E8 CA 0A 00 00                                        	call	convert_register
000101C3: 88 C3                                                 	mov	bl,al
000101C5: 88 E0                                                 	mov	al,ah
000101C7: 3C 01                                                 	cmp	al,1
000101C9: 74 0B                                                 	je	crc32_reg_reg_store
000101CB: FE 05 B1 A2 01 00                                     	inc	[supplemental_code]
000101D1: E8 E7 0C 00 00                                        	call	operand_autodetect
                                                                      crc32_reg_reg_store:
000101D6: E9 24 B5 FF FF                                        	jmp	nomem_instruction_ready
                                                                popcnt_instruction:
000101DB: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
000101E2: E9 34 D1 FF FF                                        	jmp	bs_instruction
                                                                movbe_instruction:
000101E7: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
000101EC: C6 05 B0 A2 01 00 38                                  	mov	[extended_code],38h
000101F3: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
000101FA: AC                                                    	lods	byte [esi]
000101FB: E8 34 0B 00 00                                        	call	get_size_operator
00010200: 3C 5B                                                 	cmp	al,'['
00010202: 74 3E                                                 	je	movbe_mem
00010204: 3C 10                                                 	cmp	al,10h
00010206: 0F 85 32 07 FF FF                                     	jne	invalid_operand
0001020C: AC                                                    	lods	byte [esi]
0001020D: E8 7B 0A 00 00                                        	call	convert_register
00010212: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00010217: AC                                                    	lods	byte [esi]
00010218: 3C 2C                                                 	cmp	al,','
0001021A: 0F 85 1E 07 FF FF                                     	jne	invalid_operand
00010220: AC                                                    	lods	byte [esi]
00010221: E8 0E 0B 00 00                                        	call	get_size_operator
00010226: 3C 5B                                                 	cmp	al,'['
00010228: 0F 85 FC 06 FF FF                                     	jne	invalid_argument
0001022E: E8 5D 0B 00 00                                        	call	get_address
00010233: A0 A4 A2 01 00                                        	mov	al,[operand_size]
00010238: E8 80 0C 00 00                                        	call	operand_autodetect
0001023D: E9 E2 B2 FF FF                                        	jmp	instruction_ready
                                                                      movbe_mem:
00010242: FE 05 B1 A2 01 00                                     	inc	[supplemental_code]
00010248: E8 43 0B 00 00                                        	call	get_address
0001024D: 52 53 51                                              	push	edx ebx ecx
00010250: AC                                                    	lods	byte [esi]
00010251: 3C 2C                                                 	cmp	al,','
00010253: 0F 85 E5 06 FF FF                                     	jne	invalid_operand
00010259: E8 20 0A 00 00                                        	call	take_register
0001025E: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00010263: 59 5B 5A                                              	pop	ecx ebx edx
00010266: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0001026B: E8 4D 0C 00 00                                        	call	operand_autodetect
00010270: E9 AF B2 FF FF                                        	jmp	instruction_ready
                                                                adx_instruction:
00010275: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0001027C: C6 05 B0 A2 01 00 38                                  	mov	[extended_code],38h
00010283: C6 05 B1 A2 01 00 F6                                  	mov	[supplemental_code],0F6h
0001028A: A2 A6 A2 01 00                                        	mov	[operand_prefix],al
0001028F: E8 B5 D0 FF FF                                        	call	get_reg_mem
00010294: 72 1F                                                 	jc	adx_reg_reg
00010296: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0001029B: 3C 04                                                 	cmp	al,4
0001029D: 0F 84 81 B2 FF FF                                     	je	instruction_ready
000102A3: 3C 08                                                 	cmp	al,8
000102A5: 0F 85 9D 06 FF FF                                     	jne	invalid_operand_size
000102AB: E8 F8 0B 00 00                                        	call	operand_64bit
000102B0: E9 6F B2 FF FF                                        	jmp	instruction_ready
                                                                      adx_reg_reg:
000102B5: 80 FC 04                                              	cmp	ah,4
000102B8: 0F 84 41 B4 FF FF                                     	je	nomem_instruction_ready
000102BE: 80 FC 08                                              	cmp	ah,8
000102C1: 0F 85 81 06 FF FF                                     	jne	invalid_operand_size
000102C7: E8 DC 0B 00 00                                        	call	operand_64bit
000102CC: E9 2E B4 FF FF                                        	jmp	nomem_instruction_ready
                                                                rdpid_instruction:
000102D1: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000102D6: C6 05 B0 A2 01 00 C7                                  	mov	[extended_code],0C7h
000102DD: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
000102E4: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
000102EB: E8 8E 09 00 00                                        	call	take_register
000102F0: 88 C3                                                 	mov	bl,al
000102F2: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
000102F9: 74 0E                                                 	je	rdpid_64bit
000102FB: 80 FC 04                                              	cmp	ah,4
000102FE: 0F 85 44 06 FF FF                                     	jne	invalid_operand_size
00010304: E9 F6 B3 FF FF                                        	jmp	nomem_instruction_ready
                                                                      rdpid_64bit:
00010309: 80 FC 08                                              	cmp	ah,8
0001030C: 0F 85 36 06 FF FF                                     	jne	invalid_operand_size
00010312: E9 E8 B3 FF FF                                        	jmp	nomem_instruction_ready
                                                                ptwrite_instruction:
00010317: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0001031E: C6 05 B0 A2 01 00 AE                                  	mov	[extended_code],0AEh
00010325: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0001032A: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00010331: AC                                                    	lods	byte [esi]
00010332: E8 FD 09 00 00                                        	call	get_size_operator
00010337: 3C 10                                                 	cmp	al,10h
00010339: 74 3D                                                 	je	ptwrite_reg
                                                                      ptwrite_mem:
0001033B: 3C 5B                                                 	cmp	al,'['
0001033D: 0F 85 FB 05 FF FF                                     	jne	invalid_operand
00010343: E8 48 0A 00 00                                        	call	get_address
00010348: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0001034D: 3C 04                                                 	cmp	al,4
0001034F: 74 18                                                 	je	ptwrite_mem_store
00010351: 3C 08                                                 	cmp	al,8
00010353: 74 0F                                                 	je	ptwrite_mem_64bit
00010355: 08 C0                                                 	or	al,al
00010357: 0F 85 EB 05 FF FF                                     	jnz	invalid_operand_size
0001035D: E8 0C B5 FF FF                                        	call	recoverable_unknown_size
00010362: EB 05                                                 	jmp	ptwrite_mem_store
                                                                      ptwrite_mem_64bit:
00010364: E8 3F 0B 00 00                                        	call	operand_64bit
                                                                      ptwrite_mem_store:
00010369: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0001036E: E8 4A 0B 00 00                                        	call	operand_autodetect
00010373: E9 AC B1 FF FF                                        	jmp	instruction_ready
                                                                      ptwrite_reg:
00010378: AC                                                    	lods	byte [esi]
00010379: E8 0F 09 00 00                                        	call	convert_register
0001037E: 88 C3                                                 	mov	bl,al
00010380: 88 E0                                                 	mov	al,ah
00010382: 3C 04                                                 	cmp	al,4
00010384: 0F 84 75 B3 FF FF                                     	je	nomem_instruction_ready
0001038A: 3C 08                                                 	cmp	al,8
0001038C: 0F 85 B6 05 FF FF                                     	jne	invalid_operand_size
00010392: E8 11 0B 00 00                                        	call	operand_64bit
00010397: E9 63 B3 FF FF                                        	jmp	nomem_instruction_ready
                                                                
                                                                vmclear_instruction:
0001039C: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
000103A3: EB 07                                                 	jmp	vmx_instruction
                                                                vmxon_instruction:
000103A5: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
                                                                vmx_instruction:
000103AC: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000103B1: C6 05 B0 A2 01 00 C7                                  	mov	[extended_code],0C7h
000103B8: AC                                                    	lods	byte [esi]
000103B9: E8 76 09 00 00                                        	call	get_size_operator
000103BE: 3C 5B                                                 	cmp	al,'['
000103C0: 0F 85 78 05 FF FF                                     	jne	invalid_operand
000103C6: E8 C5 09 00 00                                        	call	get_address
000103CB: A0 A4 A2 01 00                                        	mov	al,[operand_size]
000103D0: 08 C0                                                 	or	al,al
000103D2: 74 08                                                 	jz	vmx_size_ok
000103D4: 3C 08                                                 	cmp	al,8
000103D6: 0F 85 6C 05 FF FF                                     	jne	invalid_operand_size
                                                                      vmx_size_ok:
000103DC: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
000103E3: E9 3C B1 FF FF                                        	jmp	instruction_ready
                                                                vmread_instruction:
000103E8: C6 05 B0 A2 01 00 78                                  	mov	[extended_code],78h
000103EF: AC                                                    	lods	byte [esi]
000103F0: E8 3F 09 00 00                                        	call	get_size_operator
000103F5: 3C 10                                                 	cmp	al,10h
000103F7: 74 27                                                 	je	vmread_nomem
000103F9: 3C 5B                                                 	cmp	al,'['
000103FB: 0F 85 3D 05 FF FF                                     	jne	invalid_operand
00010401: E8 8A 09 00 00                                        	call	get_address
00010406: AC                                                    	lods	byte [esi]
00010407: 3C 2C                                                 	cmp	al,','
00010409: 0F 85 2F 05 FF FF                                     	jne	invalid_operand
0001040F: E8 6A 08 00 00                                        	call	take_register
00010414: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00010419: E8 33 00 00 00                                        	call	vmread_check_size
0001041E: EB BC                                                 	jmp	vmx_size_ok
                                                                      vmread_nomem:
00010420: AC                                                    	lods	byte [esi]
00010421: E8 67 08 00 00                                        	call	convert_register
00010426: 50                                                    	push	eax
00010427: E8 25 00 00 00                                        	call	vmread_check_size
0001042C: AC                                                    	lods	byte [esi]
0001042D: 3C 2C                                                 	cmp	al,','
0001042F: 0F 85 09 05 FF FF                                     	jne	invalid_operand
00010435: E8 44 08 00 00                                        	call	take_register
0001043A: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0001043F: E8 0D 00 00 00                                        	call	vmread_check_size
00010444: 5B                                                    	pop	ebx
00010445: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0001044C: E9 AE B2 FF FF                                        	jmp	nomem_instruction_ready
                                                                      vmread_check_size:
00010451: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00010458: 74 0E                                                 	je	vmread_long
0001045A: 80 3D A4 A2 01 00 04                                  	cmp	[operand_size],4
00010461: 0F 85 E1 04 FF FF                                     	jne	invalid_operand_size
00010467: C3                                                    	ret
                                                                      vmread_long:
00010468: 80 3D A4 A2 01 00 08                                  	cmp	[operand_size],8
0001046F: 0F 85 D3 04 FF FF                                     	jne	invalid_operand_size
00010475: C3                                                    	ret
                                                                vmwrite_instruction:
00010476: C6 05 B0 A2 01 00 79                                  	mov	[extended_code],79h
0001047D: E8 FC 07 00 00                                        	call	take_register
00010482: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00010487: AC                                                    	lods	byte [esi]
00010488: 3C 2C                                                 	cmp	al,','
0001048A: 0F 85 AE 04 FF FF                                     	jne	invalid_operand
00010490: AC                                                    	lods	byte [esi]
00010491: E8 9E 08 00 00                                        	call	get_size_operator
00010496: 3C 10                                                 	cmp	al,10h
00010498: 74 17                                                 	je	vmwrite_nomem
0001049A: 3C 5B                                                 	cmp	al,'['
0001049C: 0F 85 9C 04 FF FF                                     	jne	invalid_operand
000104A2: E8 E9 08 00 00                                        	call	get_address
000104A7: E8 A5 FF FF FF                                        	call	vmread_check_size
000104AC: E9 2B FF FF FF                                        	jmp	vmx_size_ok
                                                                      vmwrite_nomem:
000104B1: AC                                                    	lods	byte [esi]
000104B2: E8 D6 07 00 00                                        	call	convert_register
000104B7: 88 C3                                                 	mov	bl,al
000104B9: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
000104C0: E9 3A B2 FF FF                                        	jmp	nomem_instruction_ready
                                                                vmx_inv_instruction:
000104C5: E8 89 F8 FF FF                                        	call	setup_66_0f_38
000104CA: E8 AF 07 00 00                                        	call	take_register
000104CF: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000104D4: E8 78 FF FF FF                                        	call	vmread_check_size
000104D9: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
000104E0: AC                                                    	lods	byte [esi]
000104E1: 3C 2C                                                 	cmp	al,','
000104E3: 0F 85 55 04 FF FF                                     	jne	invalid_operand
000104E9: AC                                                    	lods	byte [esi]
000104EA: E8 45 08 00 00                                        	call	get_size_operator
000104EF: 3C 5B                                                 	cmp	al,'['
000104F1: 0F 85 47 04 FF FF                                     	jne	invalid_operand
000104F7: E8 94 08 00 00                                        	call	get_address
000104FC: A0 A4 A2 01 00                                        	mov	al,[operand_size]
00010501: 08 C0                                                 	or	al,al
00010503: 0F 84 D3 FE FF FF                                     	jz	vmx_size_ok
00010509: 3C 10                                                 	cmp	al,16
0001050B: 0F 85 37 04 FF FF                                     	jne	invalid_operand_size
00010511: E9 C6 FE FF FF                                        	jmp	vmx_size_ok
                                                                simple_svm_instruction:
00010516: 50                                                    	push	eax
00010517: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0001051E: C6 05 B0 A2 01 00 01                                  	mov	[extended_code],1
00010525: E8 54 07 00 00                                        	call	take_register
0001052A: 08 C0                                                 	or	al,al
0001052C: 0F 85 0C 04 FF FF                                     	jnz	invalid_operand
                                                                      simple_svm_detect_size:
00010532: 80 FC 02                                              	cmp	ah,2
00010535: 74 14                                                 	je	simple_svm_16bit
00010537: 80 FC 04                                              	cmp	ah,4
0001053A: 74 27                                                 	je	simple_svm_32bit
0001053C: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00010543: 0F 85 FF 03 FF FF                                     	jne	invalid_operand_size
00010549: EB 24                                                 	jmp	simple_svm_store
                                                                      simple_svm_16bit:
0001054B: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
00010552: 74 1B                                                 	je	simple_svm_store
00010554: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0001055B: 0F 84 E7 03 FF FF                                     	je	invalid_operand_size
00010561: EB 09                                                 	jmp	prefixed_svm_store
                                                                      simple_svm_32bit:
00010563: 80 3D CA A2 01 00 20                                  	cmp	[code_type],32
0001056A: 74 03                                                 	je	simple_svm_store
                                                                      prefixed_svm_store:
0001056C: B0 67                                                 	mov	al,67h
0001056E: AA                                                    	stos	byte [edi]
                                                                      simple_svm_store:
0001056F: E8 C9 09 00 00                                        	call	store_classic_instruction_code
00010574: 58                                                    	pop	eax
00010575: AA                                                    	stos	byte [edi]
00010576: E9 FF 49 FF FF                                        	jmp	instruction_assembled
                                                                skinit_instruction:
0001057B: E8 FE 06 00 00                                        	call	take_register
00010580: 66 3D 00 04                                           	cmp	ax,0400h
00010584: 0F 85 B4 03 FF FF                                     	jne	invalid_operand
0001058A: B0 DE                                                 	mov	al,0DEh
0001058C: E9 39 DF FF FF                                        	jmp	simple_instruction_0f_01
                                                                clzero_instruction:
00010591: E8 E8 06 00 00                                        	call	take_register
00010596: 08 C0                                                 	or	al,al
00010598: 0F 85 A0 03 FF FF                                     	jnz	invalid_operand
0001059E: B0 FC                                                 	mov	al,0FCh
000105A0: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
000105A7: 74 0E                                                 	je	clzero_64bit
000105A9: 80 FC 04                                              	cmp	ah,4
000105AC: 0F 85 8C 03 FF FF                                     	jne	invalid_operand
000105B2: E9 13 DF FF FF                                        	jmp	simple_instruction_0f_01
                                                                      clzero_64bit:
000105B7: 80 FC 08                                              	cmp	ah,8
000105BA: 0F 85 7E 03 FF FF                                     	jne	invalid_operand
000105C0: E9 05 DF FF FF                                        	jmp	simple_instruction_0f_01
                                                                invlpga_instruction:
000105C5: 50                                                    	push	eax
000105C6: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
000105CD: C6 05 B0 A2 01 00 01                                  	mov	[extended_code],1
000105D4: E8 A5 06 00 00                                        	call	take_register
000105D9: 08 C0                                                 	or	al,al
000105DB: 0F 85 5D 03 FF FF                                     	jnz	invalid_operand
000105E1: 88 E3                                                 	mov	bl,ah
000105E3: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
000105EA: AC                                                    	lods	byte [esi]
000105EB: 3C 2C                                                 	cmp	al,','
000105ED: 0F 85 4B 03 FF FF                                     	jne	invalid_operand
000105F3: E8 86 06 00 00                                        	call	take_register
000105F8: 66 3D 01 04                                           	cmp	ax,0401h
000105FC: 0F 85 3C 03 FF FF                                     	jne	invalid_operand
00010602: 88 DC                                                 	mov	ah,bl
00010604: E9 29 FF FF FF                                        	jmp	simple_svm_detect_size
                                                                
                                                                rdrand_instruction:
00010609: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00010610: C6 05 B0 A2 01 00 C7                                  	mov	[extended_code],0C7h
00010617: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0001061C: E8 5D 06 00 00                                        	call	take_register
00010621: 88 C3                                                 	mov	bl,al
00010623: 88 E0                                                 	mov	al,ah
00010625: E8 93 08 00 00                                        	call	operand_autodetect
0001062A: E9 D0 B0 FF FF                                        	jmp	nomem_instruction_ready
                                                                rdfsbase_instruction:
0001062F: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00010636: 0F 85 F8 02 FF FF                                     	jne	illegal_instruction
0001063C: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00010643: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0001064A: C6 05 B0 A2 01 00 AE                                  	mov	[extended_code],0AEh
00010651: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00010656: E8 23 06 00 00                                        	call	take_register
0001065B: 88 C3                                                 	mov	bl,al
0001065D: 88 E0                                                 	mov	al,ah
0001065F: 80 FC 02                                              	cmp	ah,2
00010662: 0F 84 E0 02 FF FF                                     	je	invalid_operand_size
00010668: E8 50 08 00 00                                        	call	operand_autodetect
0001066D: E9 8D B0 FF FF                                        	jmp	nomem_instruction_ready
                                                                
                                                                xabort_instruction:
00010672: AC                                                    	lods	byte [esi]
00010673: E8 BC 06 00 00                                        	call	get_size_operator
00010678: 80 FC 01                                              	cmp	ah,1
0001067B: 0F 87 C7 02 FF FF                                     	ja	invalid_operand_size
00010681: 3C 28                                                 	cmp	al,'('
00010683: 0F 85 B5 02 FF FF                                     	jne	invalid_operand
00010689: E8 29 6C FF FF                                        	call	get_byte_value
0001068E: 88 C2                                                 	mov	dl,al
00010690: 66 B8 C6 F8                                           	mov	ax,0F8C6h
00010694: 66 AB                                                 	stos	word [edi]
00010696: 88 D0                                                 	mov	al,dl
00010698: AA                                                    	stos	byte [edi]
00010699: E9 DC 48 FF FF                                        	jmp	instruction_assembled
                                                                xbegin_instruction:
0001069E: AC                                                    	lods	byte [esi]
0001069F: 3C 28                                                 	cmp	al,'('
000106A1: 0F 85 97 02 FF FF                                     	jne	invalid_operand
000106A7: A0 CA A2 01 00                                        	mov	al,[code_type]
000106AC: 3C 40                                                 	cmp	al,64
000106AE: 74 2E                                                 	je	xbegin_64bit
000106B0: 3C 20                                                 	cmp	al,32
000106B2: 74 23                                                 	je	xbegin_32bit
                                                                      xbegin_16bit:
000106B4: E8 8D 6E FF FF                                        	call	get_address_word_value
000106B9: 83 C7 04                                              	add	edi,4
000106BC: 8B 2D D0 A1 01 00                                     	mov	ebp,[addressing_space]
000106C2: E8 E4 71 FF FF                                        	call	calculate_relative_offset
000106C7: 83 EF 04                                              	sub	edi,4
000106CA: C1 E0 10                                              	shl	eax,16
000106CD: 66 B8 C7 F8                                           	mov	ax,0F8C7h
000106D1: AB                                                    	stos	dword [edi]
000106D2: E9 A3 48 FF FF                                        	jmp	instruction_assembled
                                                                      xbegin_32bit:
000106D7: E8 81 6E FF FF                                        	call	get_address_dword_value
000106DC: EB 05                                                 	jmp	xbegin_address_ok
                                                                      xbegin_64bit:
000106DE: E8 91 6E FF FF                                        	call	get_address_qword_value
                                                                      xbegin_address_ok:
000106E3: 83 C7 05                                              	add	edi,5
000106E6: 8B 2D D0 A1 01 00                                     	mov	ebp,[addressing_space]
000106EC: E8 BA 71 FF FF                                        	call	calculate_relative_offset
000106F1: 83 EF 05                                              	sub	edi,5
000106F4: 89 C2                                                 	mov	edx,eax
000106F6: 98                                                    	cwde
000106F7: 39 D0                                                 	cmp	eax,edx
000106F9: 75 12                                                 	jne	xbegin_rel32
000106FB: B0 66                                                 	mov	al,66h
000106FD: AA                                                    	stos	byte [edi]
000106FE: 89 D0                                                 	mov	eax,edx
00010700: C1 E0 10                                              	shl	eax,16
00010703: 66 B8 C7 F8                                           	mov	ax,0F8C7h
00010707: AB                                                    	stos	dword [edi]
00010708: E9 6D 48 FF FF                                        	jmp	instruction_assembled
                                                                      xbegin_rel32:
0001070D: 83 EA 01                                              	sub	edx,1
00010710: 71 0D                                                 	jno	xbegin_rel32_ok
00010712: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00010719: 0F 84 54 D4 FF FF                                     	je	jump_out_of_range
                                                                      xbegin_rel32_ok:
0001071F: 66 B8 C7 F8                                           	mov	ax,0F8C7h
00010723: 66 AB                                                 	stos	word [edi]
00010725: 89 D0                                                 	mov	eax,edx
00010727: AB                                                    	stos	dword [edi]
00010728: E9 4D 48 FF FF                                        	jmp	instruction_assembled
                                                                
                                                                bndcl_instruction:
0001072D: B4 F3                                                 	mov	ah,0F3h
0001072F: EB 02                                                 	jmp	bndc_instruction
                                                                bndcu_instruction:
00010731: B4 F2                                                 	mov	ah,0F2h
                                                                      bndc_instruction:
00010733: 88 25 A8 A2 01 00                                     	mov	[opcode_prefix],ah
00010739: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00010740: A2 B0 A2 01 00                                        	mov	[extended_code],al
00010745: E8 D2 00 00 00                                        	call	take_bnd_register
0001074A: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0001074F: E8 9E 01 00 00                                        	call	get_bnd_size
00010754: A2 A4 A2 01 00                                        	mov	[operand_size],al
00010759: AC                                                    	lods	byte [esi]
0001075A: 3C 2C                                                 	cmp	al,','
0001075C: 0F 85 DC 01 FF FF                                     	jne	invalid_operand
00010762: AC                                                    	lods	byte [esi]
00010763: E8 CC 05 00 00                                        	call	get_size_operator
00010768: 3C 5B                                                 	cmp	al,'['
0001076A: 74 15                                                 	je	bndc_mem
0001076C: 3C 10                                                 	cmp	al,10h
0001076E: 0F 85 CA 01 FF FF                                     	jne	invalid_operand
00010774: AC                                                    	lods	byte [esi]
00010775: E8 13 05 00 00                                        	call	convert_register
0001077A: 88 C3                                                 	mov	bl,al
0001077C: E9 7E AF FF FF                                        	jmp	nomem_instruction_ready
                                                                      bndc_mem:
00010781: E8 11 06 00 00                                        	call	get_address_of_required_size
00010786: E9 99 AD FF FF                                        	jmp	instruction_ready
                                                                bndmov_instruction:
0001078B: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00010792: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00010799: A2 B0 A2 01 00                                        	mov	[extended_code],al
0001079E: E8 4F 01 00 00                                        	call	get_bnd_size
000107A3: D0 E0                                                 	shl	al,1
000107A5: A2 A4 A2 01 00                                        	mov	[operand_size],al
000107AA: AC                                                    	lods	byte [esi]
000107AB: 3C 14                                                 	cmp	al,14h
000107AD: 74 30                                                 	je	bndmov_reg
000107AF: E8 80 05 00 00                                        	call	get_size_operator
000107B4: 3C 5B                                                 	cmp	al,'['
000107B6: 0F 85 82 01 FF FF                                     	jne	invalid_operand
000107BC: FE 05 B0 A2 01 00                                     	inc	[extended_code]
000107C2: E8 D0 05 00 00                                        	call	get_address_of_required_size
000107C7: AC                                                    	lods	byte [esi]
000107C8: 3C 2C                                                 	cmp	al,','
000107CA: 0F 85 6E 01 FF FF                                     	jne	invalid_operand
000107D0: E8 47 00 00 00                                        	call	take_bnd_register
000107D5: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000107DA: E9 45 AD FF FF                                        	jmp	instruction_ready
                                                                       bndmov_reg:
000107DF: AC                                                    	lods	byte [esi]
000107E0: E8 41 00 00 00                                        	call	convert_bnd_register
000107E5: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000107EA: AC                                                    	lods	byte [esi]
000107EB: 3C 2C                                                 	cmp	al,','
000107ED: 0F 85 4B 01 FF FF                                     	jne	invalid_operand
000107F3: AC                                                    	lods	byte [esi]
000107F4: 3C 14                                                 	cmp	al,14h
000107F6: 74 17                                                 	je	bndmov_reg_reg
000107F8: E8 37 05 00 00                                        	call	get_size_operator
000107FD: 3C 5B                                                 	cmp	al,'['
000107FF: 0F 85 39 01 FF FF                                     	jne	invalid_operand
00010805: E8 8D 05 00 00                                        	call	get_address_of_required_size
0001080A: E9 15 AD FF FF                                        	jmp	instruction_ready
                                                                      bndmov_reg_reg:
0001080F: AC                                                    	lods	byte [esi]
00010810: E8 11 00 00 00                                        	call	convert_bnd_register
00010815: 88 C3                                                 	mov	bl,al
00010817: E9 E3 AE FF FF                                        	jmp	nomem_instruction_ready
                                                                    take_bnd_register:
0001081C: AC                                                    	lods	byte [esi]
0001081D: 3C 14                                                 	cmp	al,14h
0001081F: 0F 85 19 01 FF FF                                     	jne	invalid_operand
00010825: AC                                                    	lods	byte [esi]
                                                                    convert_bnd_register:
00010826: 88 C4                                                 	mov	ah,al
00010828: C0 EC 04                                              	shr	ah,4
0001082B: 80 FC 06                                              	cmp	ah,6
0001082E: 0F 85 0A 01 FF FF                                     	jne	invalid_operand
00010834: 24 0F                                                 	and	al,1111b
00010836: C3                                                    	ret
                                                                bndmk_instruction:
00010837: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0001083E: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00010845: A2 B0 A2 01 00                                        	mov	[extended_code],al
0001084A: E8 CD FF FF FF                                        	call	take_bnd_register
0001084F: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00010854: AC                                                    	lods	byte [esi]
00010855: 3C 2C                                                 	cmp	al,','
00010857: 0F 85 E1 00 FF FF                                     	jne	invalid_operand
0001085D: AC                                                    	lods	byte [esi]
0001085E: E8 D1 04 00 00                                        	call	get_size_operator
00010863: 3C 5B                                                 	cmp	al,'['
00010865: 0F 85 D3 00 FF FF                                     	jne	invalid_operand
0001086B: E8 82 00 00 00                                        	call	get_bnd_size
00010870: E8 AC 05 00 00                                        	call	get_address_prefixes
00010875: E8 8B 00 00 00                                        	call	get_address_component
0001087A: 80 7E FF 5D                                           	cmp	byte [esi-1],']'
0001087E: 74 54                                                 	je	bndmk_ready
00010880: AC                                                    	lods	byte [esi]
00010881: 3C 2C                                                 	cmp	al,','
00010883: 0F 85 B5 00 FF FF                                     	jne	invalid_operand
00010889: AC                                                    	lods	byte [esi]
0001088A: 3C 28                                                 	cmp	al,'('
0001088C: 0F 85 AC 00 FF FF                                     	jne	invalid_operand
00010892: 08 DA                                                 	or	dl,bl
00010894: 0A 15 C4 A2 01 00                                     	or	dl,[address_sign]
0001089A: 0B 15 38 A2 01 00                                     	or	edx,[address_high]
000108A0: 0F 85 FC 00 FF FF                                     	jnz	invalid_address
000108A6: 88 3D C5 A2 01 00                                     	mov	[address_register],bh
000108AC: E8 54 00 00 00                                        	call	get_address_component
000108B1: AC                                                    	lods	byte [esi]
000108B2: 3C 5D                                                 	cmp	al,']'
000108B4: 0F 85 84 00 FF FF                                     	jne	invalid_operand
000108BA: 08 FF                                                 	or	bh,bh
000108BC: 74 10                                                 	jz	bndmk_selected_base
000108BE: 38 FB                                                 	cmp	bl,bh
000108C0: 74 0A                                                 	je	bndmk_to_index
000108C2: 08 DB                                                 	or	bl,bl
000108C4: 0F 85 D8 00 FF FF                                     	jnz	invalid_address
000108CA: 88 FB                                                 	mov	bl,bh
                                                                      bndmk_to_index:
000108CC: FE C1                                                 	inc	cl
                                                                      bndmk_selected_base:
000108CE: 8A 3D C5 A2 01 00                                     	mov	bh,[address_register]
                                                                      bndmk_ready:
000108D4: 66 09 DB                                              	or	bx,bx
000108D7: 0F 84 47 AC FF FF                                     	jz	instruction_ready
000108DD: 80 3D BC A2 01 00 00                                  	cmp	[address_size_declared],0
000108E4: 0F 85 3A AC FF FF                                     	jne	instruction_ready
000108EA: 80 E5 F0                                              	and	ch,not 0Fh
000108ED: E9 32 AC FF FF                                        	jmp	instruction_ready
                                                                    get_bnd_size:
000108F2: B0 04                                                 	mov	al,4
000108F4: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
000108FB: 75 02                                                 	jne	bnd_size_ok
000108FD: 04 04                                                 	add	al,4
                                                                      bnd_size_ok:
000108FF: A2 B9 A2 01 00                                        	mov	[address_size],al
00010904: C3                                                    	ret
                                                                    get_address_component:
00010905: C6 05 D2 A2 01 00 00                                  	mov	[free_address_range],0
0001090C: E8 8F 6C FF FF                                        	call	calculate_address
00010911: 89 15 38 A2 01 00                                     	mov	[address_high],edx
00010917: 89 C2                                                 	mov	edx,eax
00010919: 66 09 DB                                              	or	bx,bx
0001091C: 74 13                                                 	jz	address_component_ok
0001091E: 88 D8                                                 	mov	al,bl
00010920: 08 F8                                                 	or	al,bh
00010922: C0 E8 04                                              	shr	al,4
00010925: 3A 05 B9 A2 01 00                                     	cmp	al,[address_size]
0001092B: 0F 85 71 00 FF FF                                     	jne	invalid_address
                                                                      address_component_ok:
00010931: C3                                                    	ret
                                                                bndldx_instruction:
00010932: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00010939: A2 B0 A2 01 00                                        	mov	[extended_code],al
0001093E: E8 D9 FE FF FF                                        	call	take_bnd_register
00010943: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00010948: AC                                                    	lods	byte [esi]
00010949: 3C 2C                                                 	cmp	al,','
0001094B: 0F 85 ED FF FE FF                                     	jne	invalid_operand
00010951: E8 2E 00 00 00                                        	call	take_bnd_mib
00010956: E9 79 FF FF FF                                        	jmp	bndmk_ready
                                                                bndstx_instruction:
0001095B: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00010962: A2 B0 A2 01 00                                        	mov	[extended_code],al
00010967: E8 18 00 00 00                                        	call	take_bnd_mib
0001096C: AC                                                    	lods	byte [esi]
0001096D: 3C 2C                                                 	cmp	al,','
0001096F: 0F 85 C9 FF FE FF                                     	jne	invalid_operand
00010975: E8 A2 FE FF FF                                        	call	take_bnd_register
0001097A: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0001097F: E9 50 FF FF FF                                        	jmp	bndmk_ready
                                                                    take_bnd_mib:
00010984: AC                                                    	lods	byte [esi]
00010985: 3C 5B                                                 	cmp	al,'['
00010987: 0F 85 B1 FF FE FF                                     	jne	invalid_operand
0001098D: E8 60 FF FF FF                                        	call	get_bnd_size
00010992: E8 8A 04 00 00                                        	call	get_address_prefixes
00010997: E8 69 FF FF FF                                        	call	get_address_component
0001099C: 80 7E FF 5D                                           	cmp	byte [esi-1],']'
000109A0: 74 7D                                                 	je	bnd_mib_ok
000109A2: AC                                                    	lods	byte [esi]
000109A3: 3C 2C                                                 	cmp	al,','
000109A5: 0F 85 93 FF FE FF                                     	jne	invalid_operand
000109AB: AC                                                    	lods	byte [esi]
000109AC: 3C 28                                                 	cmp	al,'('
000109AE: 0F 85 8A FF FE FF                                     	jne	invalid_operand
000109B4: A0 C4 A2 01 00                                        	mov	al,[address_sign]
000109B9: 50 53 51 52                                           	push	eax ebx ecx edx
000109BD: FF 35 34 A2 01 00                                     	push	[address_symbol]
000109C3: E8 3D FF FF FF                                        	call	get_address_component
000109C8: AC                                                    	lods	byte [esi]
000109C9: 3C 5D                                                 	cmp	al,']'
000109CB: 0F 85 6D FF FE FF                                     	jne	invalid_operand
000109D1: 08 DA                                                 	or	dl,bl
000109D3: 0A 15 C4 A2 01 00                                     	or	dl,[address_sign]
000109D9: 0B 15 38 A2 01 00                                     	or	edx,[address_high]
000109DF: 0F 85 BD FF FE FF                                     	jnz	invalid_address
000109E5: 88 3D C5 A2 01 00                                     	mov	[address_register],bh
000109EB: 8F 05 34 A2 01 00                                     	pop	[address_symbol]
000109F1: 5A 59 5B 58                                           	pop	edx ecx ebx eax
000109F5: A2 C4 A2 01 00                                        	mov	[address_sign],al
000109FA: 08 DB                                                 	or	bl,bl
000109FC: 74 13                                                 	jz	mib_place_index
000109FE: 08 FF                                                 	or	bh,bh
00010A00: 0F 85 9C FF FE FF                                     	jnz	invalid_address
00010A06: 80 F9 01                                              	cmp	cl,1
00010A09: 0F 85 93 FF FE FF                                     	jne	invalid_address
00010A0F: 88 DF                                                 	mov	bh,bl
                                                                      mib_place_index:
00010A11: 8A 1D C5 A2 01 00                                     	mov	bl,[address_register]
00010A17: 30 C9                                                 	xor	cl,cl
00010A19: 08 DB                                                 	or	bl,bl
00010A1B: 74 02                                                 	jz	bnd_mib_ok
00010A1D: FE C1                                                 	inc	cl
                                                                      bnd_mib_ok:
00010A1F: C3                                                    	ret
                                                                
                                                                tpause_instruction:
00010A20: C6 05 B2 A2 01 00 06                                  	mov	[postbyte_register],6
00010A27: C6 05 B0 A2 01 00 AE                                  	mov	[extended_code],0AEh
00010A2E: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00010A35: A2 A8 A2 01 00                                        	mov	[opcode_prefix],al
00010A3A: E8 3F 02 00 00                                        	call	take_register
00010A3F: 80 FC 04                                              	cmp	ah,4
00010A42: 0F 85 00 FF FE FF                                     	jne	invalid_operand_size
00010A48: 88 C3                                                 	mov	bl,al
00010A4A: 80 3E 2C                                              	cmp	byte [esi],','
00010A4D: 0F 85 AC AC FF FF                                     	jne	nomem_instruction_ready
00010A53: 46                                                    	inc	esi
00010A54: E8 25 02 00 00                                        	call	take_register
00010A59: 66 3D 02 04                                           	cmp	ax,0402h
00010A5D: 0F 85 DB FE FE FF                                     	jne	invalid_operand
00010A63: AC                                                    	lods	byte [esi]
00010A64: 3C 2C                                                 	cmp	al,','
00010A66: 0F 85 D2 FE FE FF                                     	jne	invalid_operand
00010A6C: E8 0D 02 00 00                                        	call	take_register
00010A71: 66 3D 00 04                                           	cmp	ax,0400h
00010A75: 0F 85 C3 FE FE FF                                     	jne	invalid_operand
00010A7B: E9 7F AC FF FF                                        	jmp	nomem_instruction_ready
                                                                umonitor_instruction:
00010A80: C6 05 B2 A2 01 00 06                                  	mov	[postbyte_register],6
00010A87: C6 05 B0 A2 01 00 AE                                  	mov	[extended_code],0AEh
00010A8E: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00010A95: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00010A9C: E8 DD 01 00 00                                        	call	take_register
00010AA1: 88 C3                                                 	mov	bl,al
00010AA3: 88 E0                                                 	mov	al,ah
00010AA5: E8 13 04 00 00                                        	call	operand_autodetect
00010AAA: E9 50 AC FF FF                                        	jmp	nomem_instruction_ready
                                                                movdir64b_instruction:
00010AAF: E8 9F F2 FF FF                                        	call	setup_66_0f_38
00010AB4: E8 C5 01 00 00                                        	call	take_register
00010AB9: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00010ABE: 30 C0                                                 	xor	al,al
00010AC0: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
00010AC6: 50                                                    	push	eax
00010AC7: AC                                                    	lods	byte [esi]
00010AC8: 3C 2C                                                 	cmp	al,','
00010ACA: 0F 85 6E FE FE FF                                     	jne	invalid_operand
00010AD0: AC                                                    	lods	byte [esi]
00010AD1: E8 5E 02 00 00                                        	call	get_size_operator
00010AD6: 3C 5B                                                 	cmp	al,'['
00010AD8: 0F 85 60 FE FE FF                                     	jne	invalid_operand
00010ADE: E8 AD 02 00 00                                        	call	get_address
00010AE3: A0 A4 A2 01 00                                        	mov	al,[operand_size]
00010AE8: 08 C0                                                 	or	al,al
00010AEA: 74 08                                                 	jz	movdir64b_ready
00010AEC: 3C 40                                                 	cmp	al,64
00010AEE: 0F 85 54 FE FE FF                                     	jne	invalid_operand_size
                                                                      movdir64b_ready:
00010AF4: 57                                                    	push	edi
00010AF5: E8 03 05 00 00                                        	call	store_instruction
00010AFA: 5B 58                                                 	pop	ebx eax
00010AFC: 8A 0D CA A2 01 00                                     	mov	cl,[code_type]
00010B02: 80 3B 67                                              	cmp	byte [ebx],67h
00010B05: 75 09                                                 	jne	movdir64b_size_check
00010B07: D0 E9                                                 	shr	cl,1
00010B09: 80 F9 10                                              	cmp	cl,16
00010B0C: 73 02                                                 	jae	movdir64b_size_check
00010B0E: B1 20                                                 	mov	cl,32
                                                                      movdir64b_size_check:
00010B10: C0 E0 03                                              	shl	al,3
00010B13: 38 C8                                                 	cmp	al,cl
00010B15: 0F 85 2D FE FE FF                                     	jne	invalid_operand_size
00010B1B: E9 5A 44 FF FF                                        	jmp	instruction_assembled
                                                                
                                                                setssbsy_instruction:
00010B20: C1 E0 18                                              	shl	eax,24
00010B23: 0D F3 0F 01 00                                        	or	eax,010FF3h
00010B28: AB                                                    	stos	dword [edi]
00010B29: E9 4C 44 FF FF                                        	jmp	instruction_assembled
                                                                rstorssp_instruction:
00010B2E: B4 01                                                 	mov	ah,1
00010B30: EB 02                                                 	jmp	setup_clrssbsy
                                                                clrssbsy_instruction:
00010B32: B4 AE                                                 	mov	ah,0AEh
                                                                      setup_clrssbsy:
00010B34: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00010B3B: 88 25 B0 A2 01 00                                     	mov	[extended_code],ah
00010B41: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00010B46: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00010B4D: AC                                                    	lods	byte [esi]
00010B4E: E8 E1 01 00 00                                        	call	get_size_operator
00010B53: 3C 5B                                                 	cmp	al,'['
00010B55: 0F 85 E3 FD FE FF                                     	jne	invalid_operand
00010B5B: E8 30 02 00 00                                        	call	get_address
00010B60: F6 05 A4 A2 01 00 F7                                  	test	[operand_size],not 8
00010B67: 0F 85 DB FD FE FF                                     	jnz	invalid_operand_size
00010B6D: E9 B2 A9 FF FF                                        	jmp	instruction_ready
                                                                rdsspq_instruction:
00010B72: C6 05 A7 A2 01 00 48                                  	mov	[rex_prefix],48h
                                                                rdsspd_instruction:
00010B79: B4 1E                                                 	mov	ah,1Eh
00010B7B: EB 09                                                 	jmp	setup_incssp
                                                                incsspq_instruction:
00010B7D: C6 05 A7 A2 01 00 48                                  	mov	[rex_prefix],48h
                                                                incsspd_instruction:
00010B84: B4 AE                                                 	mov	ah,0AEh
                                                                      setup_incssp:
00010B86: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00010B8D: 88 25 B0 A2 01 00                                     	mov	[extended_code],ah
00010B93: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00010B98: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00010B9F: AC                                                    	lods	byte [esi]
00010BA0: E8 8F 01 00 00                                        	call	get_size_operator
00010BA5: 3C 10                                                 	cmp	al,10h
00010BA7: 0F 85 91 FD FE FF                                     	jne	invalid_operand
00010BAD: AC                                                    	lods	byte [esi]
00010BAE: E8 DA 00 00 00                                        	call	convert_register
00010BB3: 88 C3                                                 	mov	bl,al
00010BB5: E8 05 00 00 00                                        	call	cet_size_check
00010BBA: E9 40 AB FF FF                                        	jmp	nomem_instruction_ready
                                                                      cet_size_check:
00010BBF: 80 3D A7 A2 01 00 00                                  	cmp	[rex_prefix],0
00010BC6: 74 0F                                                 	je	cet_dword
00010BC8: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00010BCF: 0F 85 5F FD FE FF                                     	jne	illegal_instruction
00010BD5: D0 EC                                                 	shr	ah,1
                                                                      cet_dword:
00010BD7: 80 FC 04                                              	cmp	ah,4
00010BDA: 0F 85 68 FD FE FF                                     	jne	invalid_operand_size
00010BE0: C3                                                    	ret
                                                                wrussq_instruction:
00010BE1: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                wrssq_instruction:
00010BE8: C6 05 A7 A2 01 00 48                                  	mov	[rex_prefix],48h
00010BEF: EB 07                                                 	jmp	wrssd_instruction
                                                                wrussd_instruction:
00010BF1: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                wrssd_instruction:
00010BF8: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00010BFF: C6 05 B0 A2 01 00 38                                  	mov	[extended_code],38h
00010C06: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00010C0B: AC                                                    	lods	byte [esi]
00010C0C: E8 23 01 00 00                                        	call	get_size_operator
00010C11: 3C 10                                                 	cmp	al,10h
00010C13: 74 30                                                 	je	wrss_reg
00010C15: 3C 5B                                                 	cmp	al,'['
00010C17: 0F 85 21 FD FE FF                                     	jne	invalid_operand
00010C1D: E8 6E 01 00 00                                        	call	get_address
00010C22: 52 53 51                                              	push	edx ebx ecx
00010C25: AC                                                    	lods	byte [esi]
00010C26: 3C 2C                                                 	cmp	al,','
00010C28: 0F 85 10 FD FE FF                                     	jne	invalid_operand
00010C2E: E8 4B 00 00 00                                        	call	take_register
00010C33: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00010C38: 59 5B 5A                                              	pop	ecx ebx edx
00010C3B: E8 7F FF FF FF                                        	call	cet_size_check
00010C40: E9 DF A8 FF FF                                        	jmp	instruction_ready
                                                                      wrss_reg:
00010C45: AC                                                    	lods	byte [esi]
00010C46: E8 42 00 00 00                                        	call	convert_register
00010C4B: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00010C50: AC                                                    	lods	byte [esi]
00010C51: 3C 2C                                                 	cmp	al,','
00010C53: 0F 85 E5 FC FE FF                                     	jne	invalid_operand
00010C59: E8 20 00 00 00                                        	call	take_register
00010C5E: 88 C3                                                 	mov	bl,al
00010C60: 86 1D B2 A2 01 00                                     	xchg	bl,[postbyte_register]
00010C66: E8 54 FF FF FF                                        	call	cet_size_check
00010C6B: E9 8F AA FF FF                                        	jmp	nomem_instruction_ready
                                                                endbr_instruction:
00010C70: C1 E0 18                                              	shl	eax,24
00010C73: 0D F3 0F 1E 00                                        	or	eax,1E0FF3h
00010C78: AB                                                    	stos	dword [edi]
00010C79: E9 FC 42 FF FF                                        	jmp	instruction_assembled
                                                                
                                                                take_register:
00010C7E: AC                                                    	lods	byte [esi]
00010C7F: E8 B0 00 00 00                                        	call	get_size_operator
00010C84: 3C 10                                                 	cmp	al,10h
00010C86: 0F 85 B2 FC FE FF                                     	jne	invalid_operand
00010C8C: AC                                                    	lods	byte [esi]
                                                                convert_register:
00010C8D: 88 C4                                                 	mov	ah,al
00010C8F: C0 EC 04                                              	shr	ah,4
00010C92: 24 0F                                                 	and	al,0Fh
00010C94: 80 FC 08                                              	cmp	ah,8
00010C97: 74 1D                                                 	je	match_register_size
00010C99: 80 FC 04                                              	cmp	ah,4
00010C9C: 0F 87 9C FC FE FF                                     	ja	invalid_operand
00010CA2: 80 FC 01                                              	cmp	ah,1
00010CA5: 77 0F                                                 	ja	match_register_size
00010CA7: 3C 04                                                 	cmp	al,4
00010CA9: 72 0B                                                 	jb	match_register_size
00010CAB: 08 E4                                                 	or	ah,ah
00010CAD: 74 23                                                 	jz	high_byte_register
00010CAF: 80 0D A7 A2 01 00 40                                  	or	[rex_prefix],40h
                                                                      match_register_size:
00010CB6: 3A 25 A4 A2 01 00                                     	cmp	ah,[operand_size]
00010CBC: 74 13                                                 	je	register_size_ok
00010CBE: 80 3D A4 A2 01 00 00                                  	cmp	[operand_size],0
00010CC5: 0F 85 91 FC FE FF                                     	jne	operand_sizes_do_not_match
00010CCB: 88 25 A4 A2 01 00                                     	mov	[operand_size],ah
                                                                      register_size_ok:
00010CD1: C3                                                    	ret
                                                                      high_byte_register:
00010CD2: B4 01                                                 	mov	ah,1
00010CD4: 80 0D A7 A2 01 00 10                                  	or	[rex_prefix],10h
00010CDB: EB D9                                                 	jmp	match_register_size
                                                                convert_fpu_register:
00010CDD: 88 C4                                                 	mov	ah,al
00010CDF: C0 EC 04                                              	shr	ah,4
00010CE2: 24 07                                                 	and	al,111b
00010CE4: 80 FC 0A                                              	cmp	ah,10
00010CE7: 0F 85 51 FC FE FF                                     	jne	invalid_operand
00010CED: EB C7                                                 	jmp	match_register_size
                                                                convert_mmx_register:
00010CEF: 88 C4                                                 	mov	ah,al
00010CF1: C0 EC 04                                              	shr	ah,4
00010CF4: 80 FC 0C                                              	cmp	ah,0Ch
00010CF7: 74 15                                                 	je	xmm_register
00010CF9: 0F 87 3F FC FE FF                                     	ja	invalid_operand
00010CFF: 24 07                                                 	and	al,111b
00010D01: 80 FC 0B                                              	cmp	ah,0Bh
00010D04: 0F 85 34 FC FE FF                                     	jne	invalid_operand
00010D0A: B4 08                                                 	mov	ah,8
00010D0C: EB A8                                                 	jmp	match_register_size
                                                                      xmm_register:
00010D0E: 24 0F                                                 	and	al,0Fh
00010D10: B4 10                                                 	mov	ah,16
00010D12: 3C 08                                                 	cmp	al,8
00010D14: 72 A0                                                 	jb	match_register_size
00010D16: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00010D1D: 0F 85 1B FC FE FF                                     	jne	invalid_operand
00010D23: EB 91                                                 	jmp	match_register_size
                                                                convert_xmm_register:
00010D25: 88 C4                                                 	mov	ah,al
00010D27: C0 EC 04                                              	shr	ah,4
00010D2A: 80 FC 0C                                              	cmp	ah,0Ch
00010D2D: 74 DF                                                 	je	xmm_register
00010D2F: E9 0A FC FE FF                                        	jmp	invalid_operand
                                                                get_size_operator:
00010D34: 30 E4                                                 	xor	ah,ah
00010D36: 3C 11                                                 	cmp	al,11h
00010D38: 75 2E                                                 	jne	no_size_operator
00010D3A: C6 05 BB A2 01 00 01                                  	mov	[size_declared],1
00010D41: 66 AD                                                 	lods	word [esi]
00010D43: 86 C4                                                 	xchg	al,ah
00010D45: 80 0D A5 A2 01 00 01                                  	or	[operand_flags],1
00010D4C: 3A 25 A4 A2 01 00                                     	cmp	ah,[operand_size]
00010D52: 74 13                                                 	je	size_operator_ok
00010D54: 80 3D A4 A2 01 00 00                                  	cmp	[operand_size],0
00010D5B: 0F 85 FB FB FE FF                                     	jne	operand_sizes_do_not_match
00010D61: 88 25 A4 A2 01 00                                     	mov	[operand_size],ah
                                                                      size_operator_ok:
00010D67: C3                                                    	ret
                                                                      no_size_operator:
00010D68: C6 05 BB A2 01 00 00                                  	mov	[size_declared],0
00010D6F: 3C 5B                                                 	cmp	al,'['
00010D71: 75 F4                                                 	jne	size_operator_ok
00010D73: 80 25 A5 A2 01 00 FE                                  	and	[operand_flags],not 1
00010D7A: C3                                                    	ret
                                                                get_jump_operator:
00010D7B: C6 05 B6 A2 01 00 00                                  	mov	[jump_type],0
00010D82: 3C 12                                                 	cmp	al,12h
00010D84: 75 09                                                 	jne	jump_operator_ok
00010D86: 66 AD                                                 	lods	word [esi]
00010D88: A2 B6 A2 01 00                                        	mov	[jump_type],al
00010D8D: 88 E0                                                 	mov	al,ah
                                                                      jump_operator_ok:
00010D8F: C3                                                    	ret
                                                                get_address:
00010D90: 80 25 B9 A2 01 00 00                                  	and	[address_size],0
                                                                    get_address_of_required_size:
00010D97: E8 85 00 00 00                                        	call	get_address_prefixes
00010D9C: 80 25 D2 A2 01 00 00                                  	and	[free_address_range],0
00010DA3: E8 F8 67 FF FF                                        	call	calculate_address
00010DA8: 80 7E FF 5D                                           	cmp	byte [esi-1],']'
00010DAC: 0F 85 F0 FB FE FF                                     	jne	invalid_address
00010DB2: 89 15 38 A2 01 00                                     	mov	[address_high],edx
00010DB8: 89 C2                                                 	mov	edx,eax
00010DBA: 80 3D BC A2 01 00 00                                  	cmp	[address_size_declared],0
00010DC1: 75 5D                                                 	jne	address_ok
00010DC3: 80 3D B3 A2 01 00 04                                  	cmp	[segment_register],4
00010DCA: 77 54                                                 	ja	address_ok
00010DCC: 66 09 DB                                              	or	bx,bx
00010DCF: 75 4C                                                 	jnz	clear_address_size
00010DD1: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00010DD8: 75 46                                                 	jne	address_ok
                                                                      calculate_relative_address:
00010DDA: 8B 15 34 A2 01 00                                     	mov	edx,[address_symbol]
00010DE0: 89 15 30 A2 01 00                                     	mov	[symbol_identifier],edx
00010DE6: 8B 15 38 A2 01 00                                     	mov	edx,[address_high]
00010DEC: 8B 2D D0 A1 01 00                                     	mov	ebp,[addressing_space]
00010DF2: E8 B4 6A FF FF                                        	call	calculate_relative_offset
00010DF7: 89 15 38 A2 01 00                                     	mov	[address_high],edx
00010DFD: 99                                                    	cdq
00010DFE: 3B 15 38 A2 01 00                                     	cmp	edx,[address_high]
00010E04: 74 05                                                 	je	address_high_ok
00010E06: E8 F0 64 FF FF                                        	call	recoverable_overflow
                                                                      address_high_ok:
00010E0B: 89 C2                                                 	mov	edx,eax
00010E0D: C1 C9 10                                              	ror	ecx,16
00010E10: 8A 0D C0 A2 01 00                                     	mov	cl,[value_type]
00010E16: C1 C1 10                                              	rol	ecx,16
00010E19: 66 BB 00 99                                           	mov	bx,9900h
                                                                      clear_address_size:
00010E1D: 80 E5 F0                                              	and	ch,not 0Fh
                                                                      address_ok:
00010E20: C3                                                    	ret
                                                                get_address_prefixes:
00010E21: 80 25 B3 A2 01 00 00                                  	and	[segment_register],0
00010E28: 80 25 BC A2 01 00 00                                  	and	[address_size_declared],0
00010E2F: A0 CA A2 01 00                                        	mov	al,[code_type]
00010E34: C0 E8 03                                              	shr	al,3
00010E37: A2 B8 A2 01 00                                        	mov	[value_size],al
00010E3C: 8A 06                                                 	mov	al,[esi]
00010E3E: 24 F0                                                 	and	al,11110000b
00010E40: 3C 60                                                 	cmp	al,60h
00010E42: 75 0C                                                 	jne	get_address_size_prefix
00010E44: AC                                                    	lods	byte [esi]
00010E45: 2C 60                                                 	sub	al,60h
00010E47: A2 B3 A2 01 00                                        	mov	[segment_register],al
00010E4C: 8A 06                                                 	mov	al,[esi]
00010E4E: 24 F0                                                 	and	al,11110000b
                                                                      get_address_size_prefix:
00010E50: 3C 70                                                 	cmp	al,70h
00010E52: 75 31                                                 	jne	address_size_prefix_ok
00010E54: AC                                                    	lods	byte [esi]
00010E55: 2C 70                                                 	sub	al,70h
00010E57: 3C 02                                                 	cmp	al,2
00010E59: 0F 82 07 FB FE FF                                     	jb	invalid_address_size
00010E5F: 3C 08                                                 	cmp	al,8
00010E61: 0F 87 FF FA FE FF                                     	ja	invalid_address_size
00010E67: A2 B8 A2 01 00                                        	mov	[value_size],al
00010E6C: 80 0D BC A2 01 00 01                                  	or	[address_size_declared],1
00010E73: 08 05 B9 A2 01 00                                     	or	[address_size],al
00010E79: 3A 05 B9 A2 01 00                                     	cmp	al,[address_size]
00010E7F: 0F 85 E1 FA FE FF                                     	jne	invalid_address_size
                                                                      address_size_prefix_ok:
00010E85: C3                                                    	ret
                                                                operand_16bit:
00010E86: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
00010E8D: 74 18                                                 	je	size_prefix_ok
00010E8F: C6 05 A6 A2 01 00 66                                  	mov	[operand_prefix],66h
00010E96: C3                                                    	ret
                                                                operand_32bit:
00010E97: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
00010E9E: 75 07                                                 	jne	size_prefix_ok
00010EA0: C6 05 A6 A2 01 00 66                                  	mov	[operand_prefix],66h
                                                                      size_prefix_ok:
00010EA7: C3                                                    	ret
                                                                operand_64bit:
00010EA8: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00010EAF: 0F 85 7F FA FE FF                                     	jne	illegal_instruction
00010EB5: 80 0D A7 A2 01 00 48                                  	or	[rex_prefix],48h
00010EBC: C3                                                    	ret
                                                                operand_autodetect:
00010EBD: 3C 02                                                 	cmp	al,2
00010EBF: 74 C5                                                 	je	operand_16bit
00010EC1: 3C 04                                                 	cmp	al,4
00010EC3: 74 D2                                                 	je	operand_32bit
00010EC5: 3C 08                                                 	cmp	al,8
00010EC7: 74 DF                                                 	je	operand_64bit
00010EC9: E9 7A FA FE FF                                        	jmp	invalid_operand_size
                                                                store_segment_prefix_if_necessary:
00010ECE: A0 B3 A2 01 00                                        	mov	al,[segment_register]
00010ED3: 08 C0                                                 	or	al,al
00010ED5: 74 58                                                 	jz	segment_prefix_ok
00010ED7: 3C 04                                                 	cmp	al,4
00010ED9: 77 51                                                 	ja	segment_prefix_386
00010EDB: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00010EE2: 74 4B                                                 	je	segment_prefix_ok
00010EE4: 3C 03                                                 	cmp	al,3
00010EE6: 74 17                                                 	je	ss_prefix
00010EE8: 72 38                                                 	jb	segment_prefix_86
00010EEA: 80 FB 25                                              	cmp	bl,25h
00010EED: 74 33                                                 	je	segment_prefix_86
00010EEF: 80 FF 25                                              	cmp	bh,25h
00010EF2: 74 2E                                                 	je	segment_prefix_86
00010EF4: 80 FF 45                                              	cmp	bh,45h
00010EF7: 74 29                                                 	je	segment_prefix_86
00010EF9: 80 FF 44                                              	cmp	bh,44h
00010EFC: 74 24                                                 	je	segment_prefix_86
00010EFE: C3                                                    	ret
                                                                      ss_prefix:
00010EFF: 80 FB 25                                              	cmp	bl,25h
00010F02: 74 2B                                                 	je	segment_prefix_ok
00010F04: 80 FF 25                                              	cmp	bh,25h
00010F07: 74 26                                                 	je	segment_prefix_ok
00010F09: 80 FF 45                                              	cmp	bh,45h
00010F0C: 74 21                                                 	je	segment_prefix_ok
00010F0E: 80 FF 44                                              	cmp	bh,44h
00010F11: 74 1C                                                 	je	segment_prefix_ok
00010F13: EB 0D                                                 	jmp	segment_prefix_86
                                                                store_segment_prefix:
00010F15: A0 B3 A2 01 00                                        	mov	al,[segment_register]
00010F1A: 08 C0                                                 	or	al,al
00010F1C: 74 11                                                 	jz	segment_prefix_ok
00010F1E: 3C 05                                                 	cmp	al,5
00010F20: 73 0A                                                 	jae	segment_prefix_386
                                                                      segment_prefix_86:
00010F22: FE C8                                                 	dec	al
00010F24: C0 E0 03                                              	shl	al,3
00010F27: 04 26                                                 	add	al,26h
00010F29: AA                                                    	stos	byte [edi]
00010F2A: EB 03                                                 	jmp	segment_prefix_ok
                                                                      segment_prefix_386:
00010F2C: 04 5F                                                 	add	al,64h-5
00010F2E: AA                                                    	stos	byte [edi]
                                                                      segment_prefix_ok:
00010F2F: C3                                                    	ret
                                                                store_instruction_code:
00010F30: 80 3D A9 A2 01 00 00                                  	cmp	[vex_required],0
00010F37: 0F 85 4C 32 00 00                                     	jne	store_vex_instruction_code
                                                                store_classic_instruction_code:
00010F3D: A0 A6 A2 01 00                                        	mov	al,[operand_prefix]
00010F42: 08 C0                                                 	or	al,al
00010F44: 74 01                                                 	jz	operand_prefix_ok
00010F46: AA                                                    	stos	byte [edi]
                                                                      operand_prefix_ok:
00010F47: A0 A8 A2 01 00                                        	mov	al,[opcode_prefix]
00010F4C: 08 C0                                                 	or	al,al
00010F4E: 74 01                                                 	jz	opcode_prefix_ok
00010F50: AA                                                    	stos	byte [edi]
                                                                      opcode_prefix_ok:
00010F51: A0 A7 A2 01 00                                        	mov	al,[rex_prefix]
00010F56: A8 40                                                 	test	al,40h
00010F58: 74 16                                                 	jz	rex_prefix_ok
00010F5A: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00010F61: 0F 85 D7 F9 FE FF                                     	jne	invalid_operand
00010F67: A8 B0                                                 	test	al,0B0h
00010F69: 0F 85 0B FA FE FF                                     	jnz	disallowed_combination_of_registers
00010F6F: AA                                                    	stos	byte [edi]
                                                                      rex_prefix_ok:
00010F70: A0 AF A2 01 00                                        	mov	al,[base_code]
00010F75: AA                                                    	stos	byte [edi]
00010F76: 3C 0F                                                 	cmp	al,0Fh
00010F78: 75 0E                                                 	jne	instruction_code_ok
                                                                      store_extended_code:
00010F7A: A0 B0 A2 01 00                                        	mov	al,[extended_code]
00010F7F: AA                                                    	stos	byte [edi]
00010F80: 3C 38                                                 	cmp	al,38h
00010F82: 74 05                                                 	je	store_supplemental_code
00010F84: 3C 3A                                                 	cmp	al,3Ah
00010F86: 74 01                                                 	je	store_supplemental_code
                                                                      instruction_code_ok:
00010F88: C3                                                    	ret
                                                                      store_supplemental_code:
00010F89: A0 B1 A2 01 00                                        	mov	al,[supplemental_code]
00010F8E: AA                                                    	stos	byte [edi]
00010F8F: C3                                                    	ret
                                                                store_nomem_instruction:
00010F90: F6 05 B2 A2 01 00 10                                  	test	[postbyte_register],10000b
00010F97: 74 0E                                                 	jz	nomem_reg_high_code_ok
00010F99: 80 0D A9 A2 01 00 10                                  	or	[vex_required],10h
00010FA0: 80 25 B2 A2 01 00 0F                                  	and	[postbyte_register],1111b
                                                                      nomem_reg_high_code_ok:
00010FA7: F6 05 B2 A2 01 00 08                                  	test	[postbyte_register],1000b
00010FAE: 74 0E                                                 	jz	nomem_reg_code_ok
00010FB0: 80 0D A7 A2 01 00 44                                  	or	[rex_prefix],44h
00010FB7: 80 25 B2 A2 01 00 07                                  	and	[postbyte_register],111b
                                                                      nomem_reg_code_ok:
00010FBE: F6 C3 10                                              	test	bl,10000b
00010FC1: 74 11                                                 	jz	nomem_rm_high_code_ok
00010FC3: 80 0D A7 A2 01 00 42                                  	or	[rex_prefix],42h
00010FCA: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00010FD1: 80 E3 0F                                              	and	bl,1111b
                                                                      nomem_rm_high_code_ok:
00010FD4: F6 C3 08                                              	test	bl,1000b
00010FD7: 74 0A                                                 	jz	nomem_rm_code_ok
00010FD9: 80 0D A7 A2 01 00 41                                  	or	[rex_prefix],41h
00010FE0: 80 E3 07                                              	and	bl,111b
                                                                      nomem_rm_code_ok:
00010FE3: 80 25 BD A2 01 00 00                                  	and	[displacement_compression],0
00010FEA: E8 41 FF FF FF                                        	call	store_instruction_code
00010FEF: A0 B2 A2 01 00                                        	mov	al,[postbyte_register]
00010FF4: C0 E0 03                                              	shl	al,3
00010FF7: 08 D8                                                 	or	al,bl
00010FF9: 0C C0                                                 	or	al,11000000b
00010FFB: AA                                                    	stos	byte [edi]
00010FFC: C3                                                    	ret
                                                                store_instruction:
00010FFD: 89 3D FC A1 01 00                                     	mov	[current_offset],edi
00011003: 80 25 BD A2 01 00 00                                  	and	[displacement_compression],0
0001100A: F6 05 B2 A2 01 00 10                                  	test	[postbyte_register],10000b
00011011: 74 0E                                                 	jz	reg_high_code_ok
00011013: 80 0D A9 A2 01 00 10                                  	or	[vex_required],10h
0001101A: 80 25 B2 A2 01 00 0F                                  	and	[postbyte_register],1111b
                                                                      reg_high_code_ok:
00011021: F6 05 B2 A2 01 00 08                                  	test	[postbyte_register],1000b
00011028: 74 0E                                                 	jz	reg_code_ok
0001102A: 80 0D A7 A2 01 00 44                                  	or	[rex_prefix],44h
00011031: 80 25 B2 A2 01 00 07                                  	and	[postbyte_register],111b
                                                                      reg_code_ok:
00011038: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0001103F: 75 28                                                 	jne	address_value_ok
00011041: 31 C0                                                 	xor	eax,eax
00011043: 0F BA E2 1F                                           	bt	edx,31
00011047: 1B 05 38 A2 01 00                                     	sbb	eax,[address_high]
0001104D: 74 1A                                                 	jz	address_value_ok
0001104F: 83 3D 38 A2 01 00 00                                  	cmp	[address_high],0
00011056: 75 0C                                                 	jne	address_value_out_of_range
00011058: F6 C5 44                                              	test	ch,44h
0001105B: 75 0C                                                 	jnz	address_value_ok
0001105D: 66 F7 C3 80 80                                        	test	bx,8080h
00011062: 74 05                                                 	jz	address_value_ok
                                                                      address_value_out_of_range:
00011064: E8 92 62 FF FF                                        	call	recoverable_overflow
                                                                      address_value_ok:
00011069: E8 60 FE FF FF                                        	call	store_segment_prefix_if_necessary
0001106E: F6 05 A9 A2 01 00 04                                  	test	[vex_required],4
00011075: 0F 85 41 01 00 00                                     	jnz	address_vsib
0001107B: 66 09 DB                                              	or	bx,bx
0001107E: 0F 84 0E 03 00 00                                     	jz	address_immediate
00011084: 66 81 FB 00 98                                        	cmp	bx,9800h
00011089: 0F 84 0B 04 00 00                                     	je	address_rip_based
0001108F: 66 81 FB 00 94                                        	cmp	bx,9400h
00011094: 0F 84 FD 03 00 00                                     	je	address_eip_based
0001109A: 66 81 FB 00 99                                        	cmp	bx,9900h
0001109F: 0F 84 0C 04 00 00                                     	je	address_relative
000110A5: 88 D8                                                 	mov	al,bl
000110A7: 08 F8                                                 	or	al,bh
000110A9: 24 F0                                                 	and	al,11110000b
000110AB: 3C 80                                                 	cmp	al,80h
000110AD: 0F 84 4F 01 00 00                                     	je	postbyte_64bit
000110B3: 3C 40                                                 	cmp	al,40h
000110B5: 0F 84 40 01 00 00                                     	je	postbyte_32bit
000110BB: 3C 20                                                 	cmp	al,20h
000110BD: 0F 85 DF F8 FE FF                                     	jne	invalid_address
000110C3: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
000110CA: 0F 84 96 F8 FE FF                                     	je	invalid_address_size
000110D0: E8 84 04 00 00                                        	call	address_16bit_prefix
000110D5: F6 C5 22                                              	test	ch,22h
000110D8: 0F 94 05 BD A2 01 00                                  	setz	[displacement_compression]
000110DF: E8 4C FE FF FF                                        	call	store_instruction_code
000110E4: 38 FB                                                 	cmp	bl,bh
000110E6: 76 02                                                 	jbe	determine_16bit_address
000110E8: 86 DF                                                 	xchg	bl,bh
                                                                      determine_16bit_address:
000110EA: 66 81 FB 00 26                                        	cmp	bx,2600h
000110EF: 74 45                                                 	je	address_si
000110F1: 66 81 FB 00 27                                        	cmp	bx,2700h
000110F6: 74 42                                                 	je	address_di
000110F8: 66 81 FB 00 23                                        	cmp	bx,2300h
000110FD: 74 3F                                                 	je	address_bx
000110FF: 66 81 FB 00 25                                        	cmp	bx,2500h
00011104: 74 3C                                                 	je	address_bp
00011106: 66 81 FB 25 26                                        	cmp	bx,2625h
0001110B: 74 21                                                 	je	address_bp_si
0001110D: 66 81 FB 25 27                                        	cmp	bx,2725h
00011112: 74 1E                                                 	je	address_bp_di
00011114: 66 81 FB 23 27                                        	cmp	bx,2723h
00011119: 74 0F                                                 	je	address_bx_di
0001111B: 66 81 FB 23 26                                        	cmp	bx,2623h
00011120: 0F 85 7C F8 FE FF                                     	jne	invalid_address
                                                                      address_bx_si:
00011126: 30 C0                                                 	xor	al,al
00011128: EB 1A                                                 	jmp	postbyte_16bit
                                                                      address_bx_di:
0001112A: B0 01                                                 	mov	al,1
0001112C: EB 16                                                 	jmp	postbyte_16bit
                                                                      address_bp_si:
0001112E: B0 02                                                 	mov	al,10b
00011130: EB 12                                                 	jmp	postbyte_16bit
                                                                      address_bp_di:
00011132: B0 03                                                 	mov	al,11b
00011134: EB 0E                                                 	jmp	postbyte_16bit
                                                                      address_si:
00011136: B0 04                                                 	mov	al,100b
00011138: EB 0A                                                 	jmp	postbyte_16bit
                                                                      address_di:
0001113A: B0 05                                                 	mov	al,101b
0001113C: EB 06                                                 	jmp	postbyte_16bit
                                                                      address_bx:
0001113E: B0 07                                                 	mov	al,111b
00011140: EB 02                                                 	jmp	postbyte_16bit
                                                                      address_bp:
00011142: B0 06                                                 	mov	al,110b
                                                                      postbyte_16bit:
00011144: F6 C5 22                                              	test	ch,22h
00011147: 75 3D                                                 	jnz	address_16bit_value
00011149: 08 ED                                                 	or	ch,ch
0001114B: 0F 85 1F F8 FE FF                                     	jnz	address_sizes_do_not_agree
00011151: 81 FA 00 00 01 00                                     	cmp	edx,10000h
00011157: 0F 8D 59 F8 FE FF                                     	jge	value_out_of_range
0001115D: 81 FA 00 80 FF FF                                     	cmp	edx,-8000h
00011163: 0F 8C 4D F8 FE FF                                     	jl	value_out_of_range
00011169: 66 09 D2                                              	or	dx,dx
0001116C: 74 3D                                                 	jz	address
0001116E: 80 3D BD A2 01 00 02                                  	cmp	[displacement_compression],2
00011175: 77 22                                                 	ja	address_8bit_value
00011177: 74 0D                                                 	je	address_16bit_value
00011179: 66 81 FA 80 00                                        	cmp	dx,80h
0001117E: 72 19                                                 	jb	address_8bit_value
00011180: 66 83 FA 80                                           	cmp	dx,-80h
00011184: 73 13                                                 	jae	address_8bit_value
                                                                      address_16bit_value:
00011186: 0C 80                                                 	or	al,10000000b
00011188: 8A 0D B2 A2 01 00                                     	mov	cl,[postbyte_register]
0001118E: C0 E1 03                                              	shl	cl,3
00011191: 08 C8                                                 	or	al,cl
00011193: AA                                                    	stos	byte [edi]
00011194: 89 D0                                                 	mov	eax,edx
00011196: 66 AB                                                 	stos	word [edi]
00011198: C3                                                    	ret
                                                                      address_8bit_value:
00011199: 0C 40                                                 	or	al,01000000b
0001119B: 8A 0D B2 A2 01 00                                     	mov	cl,[postbyte_register]
000111A1: C0 E1 03                                              	shl	cl,3
000111A4: 08 C8                                                 	or	al,cl
000111A6: AA                                                    	stos	byte [edi]
000111A7: 88 D0                                                 	mov	al,dl
000111A9: AA                                                    	stos	byte [edi]
000111AA: C3                                                    	ret
                                                                      address:
000111AB: 3C 06                                                 	cmp	al,110b
000111AD: 74 EA                                                 	je	address_8bit_value
000111AF: 8A 0D B2 A2 01 00                                     	mov	cl,[postbyte_register]
000111B5: C0 E1 03                                              	shl	cl,3
000111B8: 08 C8                                                 	or	al,cl
000111BA: AA                                                    	stos	byte [edi]
000111BB: C3                                                    	ret
                                                                      address_vsib:
000111BC: 88 D8                                                 	mov	al,bl
000111BE: C0 E8 04                                              	shr	al,4
000111C1: A8 01                                                 	test	al,1
000111C3: 74 10                                                 	jz	vsib_high_code_ok
000111C5: 80 0D AA A2 01 00 10                                  	or	[vex_register],10000b
000111CC: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
000111D3: 34 01                                                 	xor	al,1
                                                                      vsib_high_code_ok:
000111D5: 3C 06                                                 	cmp	al,6
000111D7: 74 08                                                 	je	vsib_index_ok
000111D9: 3C 0C                                                 	cmp	al,0Ch
000111DB: 0F 82 C1 F7 FE FF                                     	jb	invalid_address
                                                                      vsib_index_ok:
000111E1: 88 F8                                                 	mov	al,bh
000111E3: C0 E8 04                                              	shr	al,4
000111E6: 3C 04                                                 	cmp	al,4
000111E8: 74 11                                                 	je	postbyte_32bit
000111EA: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
000111F1: 74 1C                                                 	je	address_prefix_ok
000111F3: 84 C0                                                 	test	al,al
000111F5: 0F 85 A7 F7 FE FF                                     	jnz	invalid_address
                                                                      postbyte_32bit:
000111FB: E8 66 03 00 00                                        	call	address_32bit_prefix
00011200: EB 0D                                                 	jmp	address_prefix_ok
                                                                      postbyte_64bit:
00011202: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00011209: 0F 85 57 F7 FE FF                                     	jne	invalid_address_size
                                                                      address_prefix_ok:
0001120F: 80 FB 44                                              	cmp	bl,44h
00011212: 0F 84 8A F7 FE FF                                     	je	invalid_address
00011218: 80 FB 84                                              	cmp	bl,84h
0001121B: 0F 84 81 F7 FE FF                                     	je	invalid_address
00011221: F6 C7 08                                              	test	bh,1000b
00011224: 74 07                                                 	jz	base_code_ok
00011226: 80 0D A7 A2 01 00 41                                  	or	[rex_prefix],41h
                                                                      base_code_ok:
0001122D: F6 C3 08                                              	test	bl,1000b
00011230: 74 07                                                 	jz	index_code_ok
00011232: 80 0D A7 A2 01 00 42                                  	or	[rex_prefix],42h
                                                                      index_code_ok:
00011239: F6 C5 CC                                              	test	ch,44h or 88h
0001123C: 0F 94 05 BD A2 01 00                                  	setz	[displacement_compression]
00011243: E8 E8 FC FF FF                                        	call	store_instruction_code
00011248: 08 C9                                                 	or	cl,cl
0001124A: 0F 84 DE 00 00 00                                     	jz	only_base_register
                                                                      base_and_index:
00011250: B0 04                                                 	mov	al,100b
00011252: 30 E4                                                 	xor	ah,ah
00011254: 80 F9 01                                              	cmp	cl,1
00011257: 74 17                                                 	je	scale_ok
00011259: 80 F9 02                                              	cmp	cl,2
0001125C: 74 0F                                                 	je	scale_1
0001125E: 80 F9 04                                              	cmp	cl,4
00011261: 74 05                                                 	je	scale_2
00011263: 80 CC C0                                              	or	ah,11000000b
00011266: EB 08                                                 	jmp	scale_ok
                                                                      scale_2:
00011268: 80 CC 80                                              	or	ah,10000000b
0001126B: EB 03                                                 	jmp	scale_ok
                                                                      scale_1:
0001126D: 80 CC 40                                              	or	ah,01000000b
                                                                      scale_ok:
00011270: 08 FF                                                 	or	bh,bh
00011272: 74 70                                                 	jz	only_index_register
00011274: 80 E3 07                                              	and	bl,111b
00011277: C0 E3 03                                              	shl	bl,3
0001127A: 08 DC                                                 	or	ah,bl
0001127C: 80 E7 07                                              	and	bh,111b
0001127F: 08 FC                                                 	or	ah,bh
                                                                      sib_ready:
00011281: F6 C5 CC                                              	test	ch,44h or 88h
00011284: 75 29                                                 	jnz	sib_address_32bit_value
00011286: 08 ED                                                 	or	ch,ch
00011288: 0F 85 E2 F6 FE FF                                     	jnz	address_sizes_do_not_agree
0001128E: 80 FF 05                                              	cmp	bh,5
00011291: 74 04                                                 	je	address_value
00011293: 09 D2                                                 	or	edx,edx
00011295: 74 3F                                                 	jz	sib_address
                                                                      address_value:
00011297: 80 3D BD A2 01 00 02                                  	cmp	[displacement_compression],2
0001129E: 77 23                                                 	ja	sib_address_8bit_value
000112A0: 74 0D                                                 	je	sib_address_32bit_value
000112A2: 81 FA 80 00 00 00                                     	cmp	edx,80h
000112A8: 72 19                                                 	jb	sib_address_8bit_value
000112AA: 83 FA 80                                              	cmp	edx,-80h
000112AD: 73 14                                                 	jnb	sib_address_8bit_value
                                                                      sib_address_32bit_value:
000112AF: 0C 80                                                 	or	al,10000000b
000112B1: 8A 0D B2 A2 01 00                                     	mov	cl,[postbyte_register]
000112B7: C0 E1 03                                              	shl	cl,3
000112BA: 08 C8                                                 	or	al,cl
000112BC: 66 AB                                                 	stos	word [edi]
000112BE: E9 17 01 00 00                                        	jmp	store_address_32bit_value
                                                                      sib_address_8bit_value:
000112C3: 0C 40                                                 	or	al,01000000b
000112C5: 8A 0D B2 A2 01 00                                     	mov	cl,[postbyte_register]
000112CB: C0 E1 03                                              	shl	cl,3
000112CE: 08 C8                                                 	or	al,cl
000112D0: 66 AB                                                 	stos	word [edi]
000112D2: 88 D0                                                 	mov	al,dl
000112D4: AA                                                    	stos	byte [edi]
000112D5: C3                                                    	ret
                                                                      sib_address:
000112D6: 8A 0D B2 A2 01 00                                     	mov	cl,[postbyte_register]
000112DC: C0 E1 03                                              	shl	cl,3
000112DF: 08 C8                                                 	or	al,cl
000112E1: 66 AB                                                 	stos	word [edi]
000112E3: C3                                                    	ret
                                                                      only_index_register:
000112E4: 80 CC 05                                              	or	ah,101b
000112E7: 80 E3 07                                              	and	bl,111b
000112EA: C0 E3 03                                              	shl	bl,3
000112ED: 08 DC                                                 	or	ah,bl
000112EF: 8A 0D B2 A2 01 00                                     	mov	cl,[postbyte_register]
000112F5: C0 E1 03                                              	shl	cl,3
000112F8: 08 C8                                                 	or	al,cl
000112FA: 66 AB                                                 	stos	word [edi]
000112FC: F6 C5 CC                                              	test	ch,44h or 88h
000112FF: 0F 85 D5 00 00 00                                     	jnz	store_address_32bit_value
00011305: 08 ED                                                 	or	ch,ch
00011307: 0F 85 59 F6 FE FF                                     	jnz	invalid_address_size
0001130D: 80 3D BD A2 01 00 02                                  	cmp	[displacement_compression],2
00011314: 0F 86 C0 00 00 00                                     	jbe	store_address_32bit_value
0001131A: 8B 15 3C A2 01 00                                     	mov	edx,[uncompressed_displacement]
00011320: E9 B5 00 00 00                                        	jmp	store_address_32bit_value
                                                                      zero_index_register:
00011325: B3 04                                                 	mov	bl,4
00011327: B1 01                                                 	mov	cl,1
00011329: E9 22 FF FF FF                                        	jmp	base_and_index
                                                                      only_base_register:
0001132E: 88 F8                                                 	mov	al,bh
00011330: 24 07                                                 	and	al,111b
00011332: 3C 04                                                 	cmp	al,4
00011334: 74 EF                                                 	je	zero_index_register
00011336: F6 C5 CC                                              	test	ch,44h or 88h
00011339: 75 24                                                 	jnz	simple_address_32bit_value
0001133B: 08 ED                                                 	or	ch,ch
0001133D: 0F 85 2D F6 FE FF                                     	jnz	address_sizes_do_not_agree
00011343: 09 D2                                                 	or	edx,edx
00011345: 74 3A                                                 	jz	simple_address
00011347: 80 3D BD A2 01 00 02                                  	cmp	[displacement_compression],2
0001134E: 77 1F                                                 	ja	simple_address_8bit_value
00011350: 74 0D                                                 	je	simple_address_32bit_value
00011352: 81 FA 80 00 00 00                                     	cmp	edx,80h
00011358: 72 15                                                 	jb	simple_address_8bit_value
0001135A: 83 FA 80                                              	cmp	edx,-80h
0001135D: 73 10                                                 	jnb	simple_address_8bit_value
                                                                      simple_address_32bit_value:
0001135F: 0C 80                                                 	or	al,10000000b
00011361: 8A 0D B2 A2 01 00                                     	mov	cl,[postbyte_register]
00011367: C0 E1 03                                              	shl	cl,3
0001136A: 08 C8                                                 	or	al,cl
0001136C: AA                                                    	stos	byte [edi]
0001136D: EB 6B                                                 	jmp	store_address_32bit_value
                                                                      simple_address_8bit_value:
0001136F: 0C 40                                                 	or	al,01000000b
00011371: 8A 0D B2 A2 01 00                                     	mov	cl,[postbyte_register]
00011377: C0 E1 03                                              	shl	cl,3
0001137A: 08 C8                                                 	or	al,cl
0001137C: AA                                                    	stos	byte [edi]
0001137D: 88 D0                                                 	mov	al,dl
0001137F: AA                                                    	stos	byte [edi]
00011380: C3                                                    	ret
                                                                      simple_address:
00011381: 3C 05                                                 	cmp	al,5
00011383: 74 EA                                                 	je	simple_address_8bit_value
00011385: 8A 0D B2 A2 01 00                                     	mov	cl,[postbyte_register]
0001138B: C0 E1 03                                              	shl	cl,3
0001138E: 08 C8                                                 	or	al,cl
00011390: AA                                                    	stos	byte [edi]
00011391: C3                                                    	ret
                                                                      address_immediate:
00011392: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00011399: 0F 84 A7 00 00 00                                     	je	address_immediate_sib
0001139F: F6 C5 CC                                              	test	ch,44h or 88h
000113A2: 75 1E                                                 	jnz	address_immediate_32bit
000113A4: F6 C5 22                                              	test	ch,22h
000113A7: 0F 85 77 01 00 00                                     	jnz	address_immediate_16bit
000113AD: 08 ED                                                 	or	ch,ch
000113AF: 0F 85 B1 F5 FE FF                                     	jnz	invalid_address_size
000113B5: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
000113BC: 0F 84 47 01 00 00                                     	je	addressing_16bit
                                                                      address_immediate_32bit:
000113C2: E8 9F 01 00 00                                        	call	address_32bit_prefix
000113C7: E8 64 FB FF FF                                        	call	store_instruction_code
                                                                      store_immediate_address:
000113CC: B0 05                                                 	mov	al,101b
000113CE: 8A 0D B2 A2 01 00                                     	mov	cl,[postbyte_register]
000113D4: C0 E1 03                                              	shl	cl,3
000113D7: 08 C8                                                 	or	al,cl
000113D9: AA                                                    	stos	byte [edi]
                                                                      store_address_32bit_value:
000113DA: F6 C5 F0                                              	test	ch,0F0h
000113DD: 74 2D                                                 	jz	address_32bit_relocation_ok
000113DF: 89 C8                                                 	mov	eax,ecx
000113E1: C1 E8 10                                              	shr	eax,16
000113E4: 3C 04                                                 	cmp	al,4
000113E6: 75 02                                                 	jne	address_32bit_relocation
000113E8: B0 02                                                 	mov	al,2
                                                                      address_32bit_relocation:
000113EA: 86 05 C0 A2 01 00                                     	xchg	[value_type],al
000113F0: 8B 1D 34 A2 01 00                                     	mov	ebx,[address_symbol]
000113F6: 87 1D 30 A2 01 00                                     	xchg	ebx,[symbol_identifier]
000113FC: E8 EB 6F FF FF                                        	call	mark_relocation
00011401: A2 C0 A2 01 00                                        	mov	[value_type],al
00011406: 89 1D 30 A2 01 00                                     	mov	[symbol_identifier],ebx
                                                                      address_32bit_relocation_ok:
0001140C: 89 D0                                                 	mov	eax,edx
0001140E: AB                                                    	stos	dword [edi]
0001140F: C3                                                    	ret
                                                                      store_address_64bit_value:
00011410: F6 C5 F0                                              	test	ch,0F0h
00011413: 74 27                                                 	jz	address_64bit_relocation_ok
00011415: 89 C8                                                 	mov	eax,ecx
00011417: C1 E8 10                                              	shr	eax,16
0001141A: 86 05 C0 A2 01 00                                     	xchg	[value_type],al
00011420: 8B 1D 34 A2 01 00                                     	mov	ebx,[address_symbol]
00011426: 87 1D 30 A2 01 00                                     	xchg	ebx,[symbol_identifier]
0001142C: E8 BB 6F FF FF                                        	call	mark_relocation
00011431: A2 C0 A2 01 00                                        	mov	[value_type],al
00011436: 89 1D 30 A2 01 00                                     	mov	[symbol_identifier],ebx
                                                                      address_64bit_relocation_ok:
0001143C: 89 D0                                                 	mov	eax,edx
0001143E: AB                                                    	stos	dword [edi]
0001143F: A1 38 A2 01 00                                        	mov	eax,[address_high]
00011444: AB                                                    	stos	dword [edi]
00011445: C3                                                    	ret
                                                                      address_immediate_sib:
00011446: F6 C5 44                                              	test	ch,44h
00011449: 75 35                                                 	jnz	address_immediate_sib_32bit
0001144B: F6 C5 77                                              	test	ch,not 88h
0001144E: 0F 85 12 F5 FE FF                                     	jnz	invalid_address_size
00011454: F7 C2 00 00 00 80                                     	test	edx,80000000h
0001145A: 74 09                                                 	jz	address_immediate_sib_store
0001145C: 83 3D 38 A2 01 00 00                                  	cmp	[address_high],0
00011463: 74 2B                                                 	je	address_immediate_sib_nosignextend
                                                                      address_immediate_sib_store:
00011465: E8 C6 FA FF FF                                        	call	store_instruction_code
0001146A: B0 04                                                 	mov	al,100b
0001146C: B4 25                                                 	mov	ah,100101b
0001146E: 8A 0D B2 A2 01 00                                     	mov	cl,[postbyte_register]
00011474: C0 E1 03                                              	shl	cl,3
00011477: 08 C8                                                 	or	al,cl
00011479: 66 AB                                                 	stos	word [edi]
0001147B: E9 5A FF FF FF                                        	jmp	store_address_32bit_value
                                                                      address_immediate_sib_32bit:
00011480: F7 C1 00 00 FF 00                                     	test	ecx,0FF0000h
00011486: 75 08                                                 	jnz	address_immediate_sib_nosignextend
00011488: F7 C2 00 00 00 80                                     	test	edx,80000000h
0001148E: 74 D5                                                 	jz	address_immediate_sib_store
                                                                      address_immediate_sib_nosignextend:
00011490: E8 D1 00 00 00                                        	call	address_32bit_prefix
00011495: EB CE                                                 	jmp	address_immediate_sib_store
                                                                      address_eip_based:
00011497: B0 67                                                 	mov	al,67h
00011499: AA                                                    	stos	byte [edi]
                                                                      address_rip_based:
0001149A: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
000114A1: 0F 85 FB F4 FE FF                                     	jne	invalid_address
000114A7: E8 84 FA FF FF                                        	call	store_instruction_code
000114AC: E9 1B FF FF FF                                        	jmp	store_immediate_address
                                                                      address_relative:
000114B1: E8 7A FA FF FF                                        	call	store_instruction_code
000114B6: 0F B6 05 AB A2 01 00                                  	movzx	eax,[immediate_size]
000114BD: 01 F8                                                 	add	eax,edi
000114BF: 2B 05 FC A1 01 00                                     	sub	eax,[current_offset]
000114C5: 83 C0 05                                              	add	eax,5
000114C8: 29 C2                                                 	sub	edx,eax
000114CA: 71 05                                                 	jno	address_relative_ok
000114CC: E8 2A 5E FF FF                                        	call	recoverable_overflow
                                                                      address_relative_ok:
000114D1: B0 05                                                 	mov	al,101b
000114D3: 8A 0D B2 A2 01 00                                     	mov	cl,[postbyte_register]
000114D9: C0 E1 03                                              	shl	cl,3
000114DC: 08 C8                                                 	or	al,cl
000114DE: AA                                                    	stos	byte [edi]
000114DF: C1 E9 10                                              	shr	ecx,16
000114E2: 86 0D C0 A2 01 00                                     	xchg	[value_type],cl
000114E8: 8B 1D 34 A2 01 00                                     	mov	ebx,[address_symbol]
000114EE: 87 1D 30 A2 01 00                                     	xchg	ebx,[symbol_identifier]
000114F4: 89 D0                                                 	mov	eax,edx
000114F6: E8 F1 6E FF FF                                        	call	mark_relocation
000114FB: 88 0D C0 A2 01 00                                     	mov	[value_type],cl
00011501: 89 1D 30 A2 01 00                                     	mov	[symbol_identifier],ebx
00011507: AB                                                    	stos	dword [edi]
00011508: C3                                                    	ret
                                                                      addressing_16bit:
00011509: 81 FA 00 00 01 00                                     	cmp	edx,10000h
0001150F: 0F 8D AD FE FF FF                                     	jge	address_immediate_32bit
00011515: 81 FA 00 80 FF FF                                     	cmp	edx,-8000h
0001151B: 0F 8C A1 FE FF FF                                     	jl	address_immediate_32bit
00011521: 0F B7 D2                                              	movzx	edx,dx
                                                                      address_immediate_16bit:
00011524: E8 30 00 00 00                                        	call	address_16bit_prefix
00011529: E8 02 FA FF FF                                        	call	store_instruction_code
0001152E: B0 06                                                 	mov	al,110b
00011530: 8A 0D B2 A2 01 00                                     	mov	cl,[postbyte_register]
00011536: C0 E1 03                                              	shl	cl,3
00011539: 08 C8                                                 	or	al,cl
0001153B: AA                                                    	stos	byte [edi]
0001153C: 89 D0                                                 	mov	eax,edx
0001153E: 66 AB                                                 	stos	word [edi]
00011540: 81 FA 00 00 01 00                                     	cmp	edx,10000h
00011546: 0F 8D 6A F4 FE FF                                     	jge	value_out_of_range
0001154C: 81 FA 00 80 FF FF                                     	cmp	edx,-8000h
00011552: 0F 8C 5E F4 FE FF                                     	jl	value_out_of_range
00011558: C3                                                    	ret
                                                                      address_16bit_prefix:
00011559: 80 3D CA A2 01 00 10                                  	cmp	[code_type],16
00011560: 74 10                                                 	je	instruction_prefix_ok
00011562: B0 67                                                 	mov	al,67h
00011564: AA                                                    	stos	byte [edi]
00011565: C3                                                    	ret
                                                                      address_32bit_prefix:
00011566: 80 3D CA A2 01 00 20                                  	cmp	[code_type],32
0001156D: 74 03                                                 	je	instruction_prefix_ok
0001156F: B0 67                                                 	mov	al,67h
00011571: AA                                                    	stos	byte [edi]
                                                                      instruction_prefix_ok:
00011572: C3                                                    	ret
                                                                store_instruction_with_imm8:
00011573: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
0001157A: E8 7E FA FF FF                                        	call	store_instruction
0001157F: A0 00 A2 01 00                                        	mov	al,byte [value]
00011584: AA                                                    	stos	byte [edi]
00011585: C3                                                    	ret
                                                                store_instruction_with_imm16:
00011586: C6 05 AB A2 01 00 02                                  	mov	[immediate_size],2
0001158D: E8 6B FA FF FF                                        	call	store_instruction
00011592: 66 A1 00 A2 01 00                                     	mov	ax,word [value]
00011598: E8 4F 6E FF FF                                        	call	mark_relocation
0001159D: 66 AB                                                 	stos	word [edi]
0001159F: C3                                                    	ret
                                                                store_instruction_with_imm32:
000115A0: C6 05 AB A2 01 00 04                                  	mov	[immediate_size],4
000115A7: E8 51 FA FF FF                                        	call	store_instruction
000115AC: A1 00 A2 01 00                                        	mov	eax,dword [value]
000115B1: E8 36 6E FF FF                                        	call	mark_relocation
000115B6: AB                                                    	stos	dword [edi]
000115B7: C3                                                    	ret
                                                                
                                                                include '..\avx.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                avx_single_source_pd_instruction_er_evex:
000115B8: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
                                                                avx_single_source_pd_instruction_er:
000115BF: 80 0D A5 A2 01 00 0E                                  	or	[operand_flags],2+4+8
000115C6: EB 27                                                 	jmp	avx_pd_instruction
                                                                avx_single_source_pd_instruction_sae_evex:
000115C8: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
000115CF: 80 0D A5 A2 01 00 06                                  	or	[operand_flags],2+4
000115D6: EB 17                                                 	jmp	avx_pd_instruction
                                                                avx_pd_instruction_imm8:
000115D8: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
000115DF: EB 0E                                                 	jmp	avx_pd_instruction
                                                                avx_pd_instruction_er:
000115E1: 80 0D A5 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_pd_instruction_sae:
000115E8: 80 0D A5 A2 01 00 04                                  	or	[operand_flags],4
                                                                avx_pd_instruction:
000115EF: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
000115F6: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
000115FD: 66 B9 00 08                                           	mov	cx,0800h
00011601: E9 E3 01 00 00                                        	jmp	avx_instruction_with_broadcast
                                                                avx_pd_instruction_38_evex:
00011606: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
0001160D: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00011612: B0 38                                                 	mov	al,38h
00011614: EB D9                                                 	jmp	avx_pd_instruction
                                                                avx_cvtps2dq_instruction:
00011616: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
0001161D: EB 0E                                                 	jmp	avx_single_source_ps_instruction_er
                                                                avx_cvtudq2ps_instruction:
0001161F: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
                                                                avx_single_source_ps_instruction_er_evex:
00011626: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
                                                                avx_single_source_ps_instruction_er:
0001162D: 80 0D A5 A2 01 00 0E                                  	or	[operand_flags],2+4+8
00011634: EB 27                                                 	jmp	avx_ps_instruction
                                                                avx_single_source_ps_instruction_noevex:
00011636: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
0001163D: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00011644: EB 17                                                 	jmp	avx_ps_instruction
                                                                avx_ps_instruction_imm8:
00011646: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
0001164D: EB 0E                                                 	jmp	avx_ps_instruction
                                                                avx_ps_instruction_er:
0001164F: 80 0D A5 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_ps_instruction_sae:
00011656: 80 0D A5 A2 01 00 04                                  	or	[operand_flags],4
                                                                avx_ps_instruction:
0001165D: 66 B9 00 04                                           	mov	cx,0400h
00011661: E9 83 01 00 00                                        	jmp	avx_instruction_with_broadcast
                                                                avx_ps_instruction_66_38_evex:
00011666: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
0001166D: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00011674: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00011679: B0 38                                                 	mov	al,38h
0001167B: EB E0                                                 	jmp	avx_ps_instruction
                                                                avx_sd_instruction_er:
0001167D: 80 0D A5 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_sd_instruction_sae:
00011684: 80 0D A5 A2 01 00 04                                  	or	[operand_flags],4
                                                                avx_sd_instruction:
0001168B: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
00011692: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
00011699: B1 08                                                 	mov	cl,8
0001169B: E9 47 01 00 00                                        	jmp	avx_instruction
                                                                avx_ss_instruction_er:
000116A0: 80 0D A5 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_ss_instruction_sae:
000116A7: 80 0D A5 A2 01 00 04                                  	or	[operand_flags],4
                                                                avx_ss_instruction:
000116AE: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
000116B5: B1 04                                                 	mov	cl,4
000116B7: E9 2B 01 00 00                                        	jmp	avx_instruction
                                                                avx_ss_instruction_noevex:
000116BC: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
000116C3: EB E9                                                 	jmp	avx_ss_instruction
                                                                avx_single_source_q_instruction_38_evex:
000116C5: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx_q_instruction_38_evex:
000116CC: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
                                                                avx_q_instruction_38:
000116D3: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
000116D8: B0 38                                                 	mov	al,38h
000116DA: EB 37                                                 	jmp	avx_q_instruction
                                                                avx_q_instruction_38_w1_evex:
000116DC: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
                                                                avx_q_instruction_38_w1:
000116E3: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
000116EA: EB E7                                                 	jmp	avx_q_instruction_38
                                                                avx_q_instruction_3a_imm8_w1:
000116EC: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
000116F3: EB 07                                                 	jmp	avx_q_instruction_3a_imm8
                                                                avx_q_instruction_3a_imm8_evex:
000116F5: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
                                                                avx_q_instruction_3a_imm8:
000116FC: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
00011703: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00011708: B0 3A                                                 	mov	al,3Ah
0001170A: EB 07                                                 	jmp	avx_q_instruction
                                                                avx_q_instruction_evex:
0001170C: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
                                                                avx_q_instruction:
00011713: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
0001171A: B5 08                                                 	mov	ch,8
0001171C: E9 87 00 00 00                                        	jmp	avx_pi_instruction
                                                                avx_single_source_d_instruction_38_evex_w1:
00011721: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx_single_source_d_instruction_38_evex:
00011728: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
                                                                avx_single_source_d_instruction_38:
0001172F: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
00011736: EB 07                                                 	jmp	avx_d_instruction_38
                                                                avx_d_instruction_38_evex:
00011738: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
                                                                avx_d_instruction_38:
0001173F: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00011744: B0 38                                                 	mov	al,38h
00011746: EB 2E                                                 	jmp	avx_d_instruction
                                                                avx_d_instruction_3a_imm8_evex:
00011748: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
0001174F: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00011756: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
0001175B: B0 3A                                                 	mov	al,3Ah
0001175D: EB 17                                                 	jmp	avx_d_instruction
                                                                avx_single_source_d_instruction_imm8:
0001175F: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
00011766: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
0001176D: EB 07                                                 	jmp	avx_d_instruction
                                                                avx_d_instruction_evex:
0001176F: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
                                                                avx_d_instruction:
00011776: B5 04                                                 	mov	ch,4
00011778: EB 2E                                                 	jmp	avx_pi_instruction
                                                                avx_bw_instruction_3a_imm8_w1_evex:
0001177A: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx_bw_instruction_3a_imm8_evex:
00011781: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
00011788: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
0001178F: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00011794: B0 3A                                                 	mov	al,3Ah
00011796: EB 0E                                                 	jmp	avx_bw_instruction
                                                                avx_single_source_bw_instruction_38:
00011798: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx_bw_instruction_38:
0001179F: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
000117A4: B0 38                                                 	mov	al,38h
                                                                avx_bw_instruction:
000117A6: 30 ED                                                 	xor	ch,ch
                                                                      avx_pi_instruction:
000117A8: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
000117AF: 30 C9                                                 	xor	cl,cl
000117B1: EB 36                                                 	jmp	avx_instruction_with_broadcast
                                                                avx_bw_instruction_38_w1_evex:
000117B3: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx_bw_instruction_38_evex:
000117BA: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
000117C1: EB DC                                                 	jmp	avx_bw_instruction_38
                                                                avx_pd_instruction_noevex:
000117C3: 30 C9                                                 	xor	cl,cl
000117C5: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
000117CC: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
000117D3: EB 12                                                 	jmp	avx_instruction
                                                                avx_ps_instruction_noevex:
000117D5: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
000117DC: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
000117E3: 30 C9                                                 	xor	cl,cl
000117E5: EB 00                                                 	jmp	avx_instruction
                                                                avx_instruction:
000117E7: 30 ED                                                 	xor	ch,ch
                                                                      avx_instruction_with_broadcast:
000117E9: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
000117EF: 88 2D AD A2 01 00                                     	mov	[broadcast_size],ch
000117F5: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
000117FC: A2 B0 A2 01 00                                        	mov	[extended_code],al
                                                                      avx_xop_common:
00011801: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
00011808: AC                                                    	lods	byte [esi]
00011809: E8 26 F5 FF FF                                        	call	get_size_operator
0001180E: 3C 10                                                 	cmp	al,10h
00011810: 0F 85 28 F1 FE FF                                     	jne	invalid_operand
                                                                      avx_reg:
00011816: AC                                                    	lods	byte [esi]
00011817: E8 30 29 00 00                                        	call	convert_avx_register
0001181C: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00011821: E8 B6 02 00 00                                        	call	take_avx512_mask
                                                                      avx_vex_reg:
00011826: F6 05 A5 A2 01 00 02                                  	test	[operand_flags],2
0001182D: 75 13                                                 	jnz	avx_vex_reg_ok
0001182F: AC                                                    	lods	byte [esi]
00011830: 3C 2C                                                 	cmp	al,','
00011832: 0F 85 06 F1 FE FF                                     	jne	invalid_operand
00011838: E8 00 29 00 00                                        	call	take_avx_register
0001183D: A2 AA A2 01 00                                        	mov	[vex_register],al
                                                                      avx_vex_reg_ok:
00011842: A0 B5 A2 01 00                                        	mov	al,[mmx_size]
00011847: 08 C0                                                 	or	al,al
00011849: 74 1D                                                 	jz	avx_regs_size_ok
0001184B: 8A 25 A4 A2 01 00                                     	mov	ah,[operand_size]
00011851: 08 E4                                                 	or	ah,ah
00011853: 74 13                                                 	jz	avx_regs_size_ok
00011855: 38 E0                                                 	cmp	al,ah
00011857: 74 0F                                                 	je	avx_regs_size_ok
00011859: 0F 87 E9 F0 FE FF                                     	ja	invalid_operand_size
0001185F: 80 FC 10                                              	cmp	ah,16
00011862: 0F 85 E0 F0 FE FF                                     	jne	invalid_operand_size
                                                                      avx_regs_size_ok:
00011868: AC                                                    	lods	byte [esi]
00011869: 3C 2C                                                 	cmp	al,','
0001186B: 0F 85 CD F0 FE FF                                     	jne	invalid_operand
                                                                      avx_regs_rm:
00011871: E8 FD 00 00 00                                        	call	take_avx_rm
00011876: 72 59                                                 	jc	avx_regs_reg
00011878: A0 AB A2 01 00                                        	mov	al,[immediate_size]
0001187D: 3C 01                                                 	cmp	al,1
0001187F: 0F 84 0A D4 FF FF                                     	je	mmx_imm8
00011885: 0F 82 99 9C FF FF                                     	jb	instruction_ready
0001188B: 3C FC                                                 	cmp	al,-4
0001188D: 0F 84 B6 DA FF FF                                     	je	sse_cmp_mem_ok
00011893: 80 3E 2C                                              	cmp	byte [esi],','
00011896: 0F 85 A2 F0 FE FF                                     	jne	invalid_operand
0001189C: 46                                                    	inc	esi
0001189D: E8 9B 28 00 00                                        	call	take_avx_register
000118A2: C0 E0 04                                              	shl	al,4
000118A5: 0F 82 93 F0 FE FF                                     	jc	invalid_operand
000118AB: 08 05 00 A2 01 00                                     	or	byte [value],al
000118B1: A8 80                                                 	test	al,80h
000118B3: 74 0D                                                 	jz	avx_regs_mem_reg_store
000118B5: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
000118BC: 0F 85 7C F0 FE FF                                     	jne	invalid_operand
                                                                      avx_regs_mem_reg_store:
000118C2: E8 E0 01 00 00                                        	call	take_imm4_if_needed
000118C7: E8 A7 FC FF FF                                        	call	store_instruction_with_imm8
000118CC: E9 A9 36 FF FF                                        	jmp	instruction_assembled
                                                                      avx_regs_reg:
000118D1: 88 C3                                                 	mov	bl,al
000118D3: E8 84 02 00 00                                        	call	take_avx512_rounding
000118D8: A0 AB A2 01 00                                        	mov	al,[immediate_size]
000118DD: 3C 01                                                 	cmp	al,1
000118DF: 0F 84 F2 D3 FF FF                                     	je	mmx_nomem_imm8
000118E5: 0F 82 14 9E FF FF                                     	jb	nomem_instruction_ready
000118EB: 3C FC                                                 	cmp	al,-4
000118ED: 0F 84 D4 DA FF FF                                     	je	sse_cmp_nomem_ok
000118F3: AC                                                    	lods	byte [esi]
000118F4: 3C 2C                                                 	cmp	al,','
000118F6: 0F 85 42 F0 FE FF                                     	jne	invalid_operand
000118FC: 88 D8                                                 	mov	al,bl
000118FE: C0 E0 04                                              	shl	al,4
00011901: 0F 82 37 F0 FE FF                                     	jc	invalid_operand
00011907: 08 05 00 A2 01 00                                     	or	byte [value],al
0001190D: A8 80                                                 	test	al,80h
0001190F: 74 0D                                                 	jz	avx_regs_reg_
00011911: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00011918: 0F 85 20 F0 FE FF                                     	jne	invalid_operand
                                                                      avx_regs_reg_:
0001191E: E8 50 00 00 00                                        	call	take_avx_rm
00011923: 72 23                                                 	jc	avx_regs_reg_reg
00011925: 80 3D AB A2 01 00 FE                                  	cmp	[immediate_size],-2
0001192C: 0F 8F 0C F0 FE FF                                     	jg	invalid_operand
00011932: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
00011939: E8 69 01 00 00                                        	call	take_imm4_if_needed
0001193E: E8 30 FC FF FF                                        	call	store_instruction_with_imm8
00011943: E9 32 36 FF FF                                        	jmp	instruction_assembled
                                                                      avx_regs_reg_reg:
00011948: C0 E0 04                                              	shl	al,4
0001194B: 0F 82 ED EF FE FF                                     	jc	invalid_operand
00011951: 80 25 00 A2 01 00 0F                                  	and	byte [value],1111b
00011958: 08 05 00 A2 01 00                                     	or	byte [value],al
0001195E: E8 44 01 00 00                                        	call	take_imm4_if_needed
00011963: E8 28 F6 FF FF                                        	call	store_nomem_instruction
00011968: A0 00 A2 01 00                                        	mov	al,byte [value]
0001196D: AA                                                    	stos	byte [edi]
0001196E: E9 07 36 FF FF                                        	jmp	instruction_assembled
                                                                      take_avx_rm:
00011973: 30 C9                                                 	xor	cl,cl
00011975: 86 0D A4 A2 01 00                                     	xchg	cl,[operand_size]
0001197B: AC                                                    	lods	byte [esi]
0001197C: E8 B3 F3 FF FF                                        	call	get_size_operator
00011981: 3C 5B                                                 	cmp	al,'['
00011983: 74 35                                                 	je	take_avx_mem
00011985: 3C 10                                                 	cmp	al,10h
00011987: 0F 85 B1 EF FE FF                                     	jne	invalid_operand
0001198D: 88 0D A4 A2 01 00                                     	mov	[operand_size],cl
00011993: AC                                                    	lods	byte [esi]
00011994: E8 B3 27 00 00                                        	call	convert_avx_register
00011999: 08 C9                                                 	or	cl,cl
0001199B: 75 1B                                                 	jnz	avx_reg_ok
0001199D: 0A 0D B5 A2 01 00                                     	or	cl,[mmx_size]
000119A3: 74 13                                                 	jz	avx_reg_ok
000119A5: 38 CC                                                 	cmp	ah,cl
000119A7: 74 0F                                                 	je	avx_reg_ok
000119A9: 0F 82 99 EF FE FF                                     	jb	invalid_operand_size
000119AF: 80 FC 10                                              	cmp	ah,16
000119B2: 0F 85 90 EF FE FF                                     	jne	invalid_operand_size
                                                                      avx_reg_ok:
000119B8: F9                                                    	stc
000119B9: C3                                                    	ret
                                                                      take_avx_mem:
000119BA: 51                                                    	push	ecx
000119BB: E8 D0 F3 FF FF                                        	call	get_address
000119C0: 80 3E 7B                                              	cmp	byte [esi],'{'
000119C3: 0F 85 80 00 00 00                                     	jne	avx_mem_ok
000119C9: 46                                                    	inc	esi
000119CA: AC                                                    	lods	byte [esi]
000119CB: 3C 1F                                                 	cmp	al,1Fh
000119CD: 0F 85 6B EF FE FF                                     	jne	invalid_operand
000119D3: 8A 06                                                 	mov	al,[esi]
000119D5: C0 E8 04                                              	shr	al,4
000119D8: 3C 01                                                 	cmp	al,1
000119DA: 0F 85 5E EF FE FF                                     	jne	invalid_operand
000119E0: A0 B5 A2 01 00                                        	mov	al,[mmx_size]
000119E5: 08 C0                                                 	or	al,al
000119E7: 75 26                                                 	jnz	avx_mem_broadcast_check
000119E9: 8B 04 24                                              	mov	eax,[esp]
000119EC: 08 C0                                                 	or	al,al
000119EE: 75 1F                                                 	jnz	avx_mem_broadcast_check
000119F0: A0 AD A2 01 00                                        	mov	al,[broadcast_size]
000119F5: A2 B5 A2 01 00                                        	mov	[mmx_size],al
000119FA: 88 CC                                                 	mov	ah,cl
000119FC: AC                                                    	lods	byte [esi]
000119FD: 24 0F                                                 	and	al,1111b
000119FF: 88 C1                                                 	mov	cl,al
00011A01: A0 AD A2 01 00                                        	mov	al,[broadcast_size]
00011A06: D2 E0                                                 	shl	al,cl
00011A08: 88 04 24                                              	mov	[esp],al
00011A0B: 88 E1                                                 	mov	cl,ah
00011A0D: EB 2A                                                 	jmp	avx_mem_broadcast_ok
                                                                      avx_mem_broadcast_check:
00011A0F: 0F BC C0                                              	bsf	eax,eax
00011A12: 86 05 AD A2 01 00                                     	xchg	al,[broadcast_size]
00011A18: A2 B5 A2 01 00                                        	mov	[mmx_size],al
00011A1D: 0F BC C0                                              	bsf	eax,eax
00011A20: 0F 84 18 EF FE FF                                     	jz	invalid_operand
00011A26: 8A 25 AD A2 01 00                                     	mov	ah,[broadcast_size]
00011A2C: 28 C4                                                 	sub	ah,al
00011A2E: AC                                                    	lods	byte [esi]
00011A2F: 24 0F                                                 	and	al,1111b
00011A31: 38 E0                                                 	cmp	al,ah
00011A33: 0F 85 0F EF FE FF                                     	jne	invalid_operand_size
                                                                      avx_mem_broadcast_ok:
00011A39: 80 0D A9 A2 01 00 40                                  	or	[vex_required],40h
00011A40: AC                                                    	lods	byte [esi]
00011A41: 3C 7D                                                 	cmp	al,'}'
00011A43: 0F 85 F5 EE FE FF                                     	jne	invalid_operand
                                                                      avx_mem_ok:
00011A49: 58                                                    	pop	eax
00011A4A: 08 C0                                                 	or	al,al
00011A4C: 74 21                                                 	jz	avx_mem_size_deciding
00011A4E: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
00011A54: 80 3D B5 A2 01 00 00                                  	cmp	[mmx_size],0
00011A5B: 75 39                                                 	jne	avx_mem_size_enforced
00011A5D: 08 C0                                                 	or	al,al
00011A5F: 74 0C                                                 	jz	avx_mem_size_ok
00011A61: 3A 05 A4 A2 01 00                                     	cmp	al,[operand_size]
00011A67: 0F 85 EF EE FE FF                                     	jne	operand_sizes_do_not_match
                                                                      avx_mem_size_ok:
00011A6D: F8                                                    	clc
00011A6E: C3                                                    	ret
                                                                      avx_mem_size_deciding:
00011A6F: A0 A4 A2 01 00                                        	mov	al,[operand_size]
00011A74: 80 3D B5 A2 01 00 00                                  	cmp	[mmx_size],0
00011A7B: 75 19                                                 	jne	avx_mem_size_enforced
00011A7D: 3C 10                                                 	cmp	al,16
00011A7F: 74 EC                                                 	je	avx_mem_size_ok
00011A81: 3C 20                                                 	cmp	al,32
00011A83: 74 E8                                                 	je	avx_mem_size_ok
00011A85: 3C 40                                                 	cmp	al,64
00011A87: 74 E4                                                 	je	avx_mem_size_ok
00011A89: 08 C0                                                 	or	al,al
00011A8B: 0F 85 B7 EE FE FF                                     	jnz	invalid_operand_size
00011A91: E8 D8 9D FF FF                                        	call	recoverable_unknown_size
                                                                      avx_mem_size_enforced:
00011A96: 08 C0                                                 	or	al,al
00011A98: 74 D3                                                 	jz	avx_mem_size_ok
00011A9A: 3A 05 B5 A2 01 00                                     	cmp	al,[mmx_size]
00011AA0: 74 CB                                                 	je	avx_mem_size_ok
00011AA2: E9 A1 EE FE FF                                        	jmp	invalid_operand_size
                                                                      take_imm4_if_needed:
00011AA7: 80 3D AB A2 01 00 FD                                  	cmp	[immediate_size],-3
00011AAE: 75 2B                                                 	jne	imm4_ok
00011AB0: 53 51 52                                              	push	ebx ecx edx
00011AB3: AC                                                    	lods	byte [esi]
00011AB4: 3C 2C                                                 	cmp	al,','
00011AB6: 0F 85 82 EE FE FF                                     	jne	invalid_operand
00011ABC: AC                                                    	lods	byte [esi]
00011ABD: 3C 28                                                 	cmp	al,'('
00011ABF: 0F 85 79 EE FE FF                                     	jne	invalid_operand
00011AC5: E8 ED 57 FF FF                                        	call	get_byte_value
00011ACA: A8 F0                                                 	test	al,11110000b
00011ACC: 0F 85 E4 EE FE FF                                     	jnz	value_out_of_range
00011AD2: 08 05 00 A2 01 00                                     	or	byte [value],al
00011AD8: 5A 59 5B                                              	pop	edx ecx ebx
                                                                      imm4_ok:
00011ADB: C3                                                    	ret
                                                                      take_avx512_mask:
00011ADC: 80 3E 7B                                              	cmp	byte [esi],'{'
00011ADF: 75 7A                                                 	jne	avx512_masking_ok
00011AE1: F6 05 A5 A2 01 00 10                                  	test	[operand_flags],10h
00011AE8: 0F 85 50 EE FE FF                                     	jnz	invalid_operand
00011AEE: 46                                                    	inc	esi
00011AEF: AC                                                    	lods	byte [esi]
00011AF0: 3C 14                                                 	cmp	al,14h
00011AF2: 0F 85 46 EE FE FF                                     	jne	invalid_operand
00011AF8: AC                                                    	lods	byte [esi]
00011AF9: 88 C4                                                 	mov	ah,al
00011AFB: C0 EC 04                                              	shr	ah,4
00011AFE: 80 FC 05                                              	cmp	ah,5
00011B01: 0F 85 37 EE FE FF                                     	jne	invalid_operand
00011B07: 24 07                                                 	and	al,111b
00011B09: 08 C0                                                 	or	al,al
00011B0B: 0F 84 2D EE FE FF                                     	jz	invalid_operand
00011B11: A2 AC A2 01 00                                        	mov	[mask_register],al
00011B16: 80 0D A9 A2 01 00 20                                  	or	[vex_required],20h
00011B1D: AC                                                    	lods	byte [esi]
00011B1E: 3C 7D                                                 	cmp	al,'}'
00011B20: 0F 85 18 EE FE FF                                     	jne	invalid_operand
00011B26: 80 3E 7B                                              	cmp	byte [esi],'{'
00011B29: 75 30                                                 	jne	avx512_masking_ok
00011B2B: F6 05 A5 A2 01 00 20                                  	test	[operand_flags],20h
00011B32: 0F 85 06 EE FE FF                                     	jnz	invalid_operand
00011B38: 46                                                    	inc	esi
00011B39: AC                                                    	lods	byte [esi]
00011B3A: 3C 1F                                                 	cmp	al,1Fh
00011B3C: 0F 85 FC ED FE FF                                     	jne	invalid_operand
00011B42: AC                                                    	lods	byte [esi]
00011B43: 08 C0                                                 	or	al,al
00011B45: 0F 85 F3 ED FE FF                                     	jnz	invalid_operand
00011B4B: 80 0D AC A2 01 00 80                                  	or	[mask_register],80h
00011B52: AC                                                    	lods	byte [esi]
00011B53: 3C 7D                                                 	cmp	al,'}'
00011B55: 0F 85 E3 ED FE FF                                     	jne	invalid_operand
                                                                      avx512_masking_ok:
00011B5B: C3                                                    	retn
                                                                      take_avx512_rounding:
00011B5C: F6 05 A5 A2 01 00 0C                                  	test	[operand_flags],4+8
00011B63: 0F 84 8A 00 00 00                                     	jz	avx512_rounding_done
00011B69: F6 05 A5 A2 01 00 08                                  	test	[operand_flags],8
00011B70: 74 12                                                 	jz	avx512_rounding_allowed
00011B72: 80 3D B5 A2 01 00 00                                  	cmp	[mmx_size],0
00011B79: 75 09                                                 	jne	avx512_rounding_allowed
00011B7B: 80 3D A4 A2 01 00 40                                  	cmp	[operand_size],64
00011B82: 75 6F                                                 	jne	avx512_rounding_done
                                                                      avx512_rounding_allowed:
00011B84: 80 3E 2C                                              	cmp	byte [esi],','
00011B87: 75 6A                                                 	jne	avx512_rounding_done
00011B89: 80 7E 01 7B                                           	cmp	byte [esi+1],'{'
00011B8D: 75 64                                                 	jne	avx512_rounding_done
00011B8F: 83 C6 02                                              	add	esi,2
00011B92: C6 05 AE A2 01 00 00                                  	mov	[rounding_mode],0
00011B99: 80 0D A9 A2 01 00 40                                  	or	[vex_required],40h
00011BA0: F6 05 A5 A2 01 00 08                                  	test	[operand_flags],8
00011BA7: 74 2F                                                 	jz	take_sae
00011BA9: 80 0D A9 A2 01 00 80                                  	or	[vex_required],80h
00011BB0: AC                                                    	lods	byte [esi]
00011BB1: 3C 1F                                                 	cmp	al,1Fh
00011BB3: 0F 85 85 ED FE FF                                     	jne	invalid_operand
00011BB9: AC                                                    	lods	byte [esi]
00011BBA: 88 C4                                                 	mov	ah,al
00011BBC: C0 EC 04                                              	shr	ah,4
00011BBF: 80 FC 02                                              	cmp	ah,2
00011BC2: 0F 85 76 ED FE FF                                     	jne	invalid_operand
00011BC8: 24 03                                                 	and	al,11b
00011BCA: A2 AE A2 01 00                                        	mov	[rounding_mode],al
00011BCF: AC                                                    	lods	byte [esi]
00011BD0: 3C 2D                                                 	cmp	al,'-'
00011BD2: 0F 85 66 ED FE FF                                     	jne	invalid_operand
                                                                      take_sae:
00011BD8: AC                                                    	lods	byte [esi]
00011BD9: 3C 1F                                                 	cmp	al,1Fh
00011BDB: 0F 85 5D ED FE FF                                     	jne	invalid_operand
00011BE1: AC                                                    	lods	byte [esi]
00011BE2: 3C 30                                                 	cmp	al,30h
00011BE4: 0F 85 54 ED FE FF                                     	jne	invalid_operand
00011BEA: AC                                                    	lods	byte [esi]
00011BEB: 3C 7D                                                 	cmp	al,'}'
00011BED: 0F 85 4B ED FE FF                                     	jne	invalid_operand
                                                                      avx512_rounding_done:
00011BF3: C3                                                    	retn
                                                                
                                                                avx_movdqu_instruction:
00011BF4: B4 F3                                                 	mov	ah,0F3h
00011BF6: EB 02                                                 	jmp	avx_movdq_instruction
                                                                avx_movdqa_instruction:
00011BF8: B4 66                                                 	mov	ah,66h
                                                                      avx_movdq_instruction:
00011BFA: 88 25 A8 A2 01 00                                     	mov	[opcode_prefix],ah
00011C00: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00011C07: EB 3C                                                 	jmp	avx_movps_instruction
                                                                avx512_movdqu16_instruction:
00011C09: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_movdqu8_instruction:
00011C10: B4 F2                                                 	mov	ah,0F2h
00011C12: EB 14                                                 	jmp	avx_movdq_instruction_evex
                                                                avx512_movdqu64_instruction:
00011C14: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_movdqu32_instruction:
00011C1B: B4 F3                                                 	mov	ah,0F3h
00011C1D: EB 09                                                 	jmp	avx_movdq_instruction_evex
                                                                avx512_movdqa64_instruction:
00011C1F: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_movdqa32_instruction:
00011C26: B4 66                                                 	mov	ah,66h
                                                                      avx_movdq_instruction_evex:
00011C28: 88 25 A8 A2 01 00                                     	mov	[opcode_prefix],ah
00011C2E: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00011C35: EB 0E                                                 	jmp	avx_movps_instruction
                                                                avx_movpd_instruction:
00011C37: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00011C3E: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
                                                                avx_movps_instruction:
00011C45: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
00011C4C: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00011C53: A2 B0 A2 01 00                                        	mov	[extended_code],al
00011C58: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
00011C5F: 30 C0                                                 	xor	al,al
00011C61: A2 B5 A2 01 00                                        	mov	[mmx_size],al
00011C66: A2 AD A2 01 00                                        	mov	[broadcast_size],al
00011C6B: AC                                                    	lods	byte [esi]
00011C6C: E8 C3 F0 FF FF                                        	call	get_size_operator
00011C71: 3C 10                                                 	cmp	al,10h
00011C73: 0F 84 9D FB FF FF                                     	je	avx_reg
00011C79: FE 05 B0 A2 01 00                                     	inc	[extended_code]
00011C7F: F6 05 B0 A2 01 00 01                                  	test	[extended_code],1
00011C86: 75 07                                                 	jnz	avx_mem
00011C88: 80 05 B0 A2 01 00 0F                                  	add	[extended_code],-1+10h
                                                                      avx_mem:
00011C8F: 3C 5B                                                 	cmp	al,'['
00011C91: 0F 85 A7 EC FE FF                                     	jne	invalid_operand
00011C97: E8 F4 F0 FF FF                                        	call	get_address
00011C9C: 80 0D A5 A2 01 00 20                                  	or	[operand_flags],20h
00011CA3: E8 34 FE FF FF                                        	call	take_avx512_mask
00011CA8: AC                                                    	lods	byte [esi]
00011CA9: 3C 2C                                                 	cmp	al,','
00011CAB: 0F 85 8D EC FE FF                                     	jne	invalid_operand
00011CB1: E8 87 24 00 00                                        	call	take_avx_register
00011CB6: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00011CBB: E9 64 98 FF FF                                        	jmp	instruction_ready
                                                                avx_movntpd_instruction:
00011CC0: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
                                                                avx_movntdq_instruction:
00011CC7: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                avx_movntps_instruction:
00011CCE: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00011CD5: A2 B0 A2 01 00                                        	mov	[extended_code],al
00011CDA: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
00011CE1: 80 0D A5 A2 01 00 10                                  	or	[operand_flags],10h
00011CE8: C6 05 B5 A2 01 00 00                                  	mov	[mmx_size],0
00011CEF: AC                                                    	lods	byte [esi]
00011CF0: E8 3F F0 FF FF                                        	call	get_size_operator
00011CF5: EB 98                                                 	jmp	avx_mem
                                                                avx_compress_q_instruction:
00011CF7: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx_compress_d_instruction:
00011CFE: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00011D05: C6 05 B5 A2 01 00 00                                  	mov	[mmx_size],0
00011D0C: E8 42 E0 FF FF                                        	call	setup_66_0f_38
00011D11: AC                                                    	lods	byte [esi]
00011D12: E8 1D F0 FF FF                                        	call	get_size_operator
00011D17: 3C 10                                                 	cmp	al,10h
00011D19: 0F 85 70 FF FF FF                                     	jne	avx_mem
00011D1F: AC                                                    	lods	byte [esi]
00011D20: E8 27 24 00 00                                        	call	convert_avx_register
00011D25: 88 C3                                                 	mov	bl,al
00011D27: E8 B0 FD FF FF                                        	call	take_avx512_mask
00011D2C: AC                                                    	lods	byte [esi]
00011D2D: 3C 2C                                                 	cmp	al,','
00011D2F: 0F 85 09 EC FE FF                                     	jne	invalid_operand
00011D35: E8 03 24 00 00                                        	call	take_avx_register
00011D3A: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00011D3F: E9 BB 99 FF FF                                        	jmp	nomem_instruction_ready
                                                                avx_lddqu_instruction:
00011D44: B4 F2                                                 	mov	ah,0F2h
00011D46: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
                                                                      avx_load_instruction:
00011D4D: 88 25 A8 A2 01 00                                     	mov	[opcode_prefix],ah
00011D53: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00011D5A: A2 B0 A2 01 00                                        	mov	[extended_code],al
00011D5F: C6 05 B5 A2 01 00 00                                  	mov	[mmx_size],0
00011D66: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
00011D6D: E8 CB 23 00 00                                        	call	take_avx_register
00011D72: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00011D77: AC                                                    	lods	byte [esi]
00011D78: 3C 2C                                                 	cmp	al,','
00011D7A: 0F 85 BE EB FE FF                                     	jne	invalid_operand
00011D80: AC                                                    	lods	byte [esi]
00011D81: E8 AE EF FF FF                                        	call	get_size_operator
00011D86: 3C 5B                                                 	cmp	al,'['
00011D88: 0F 85 B0 EB FE FF                                     	jne	invalid_operand
00011D8E: E8 FD EF FF FF                                        	call	get_address
00011D93: E9 8C 97 FF FF                                        	jmp	instruction_ready
                                                                avx_movntdqa_instruction:
00011D98: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00011D9D: B0 38                                                 	mov	al,38h
00011D9F: B4 66                                                 	mov	ah,66h
00011DA1: EB AA                                                 	jmp	avx_load_instruction
                                                                avx_movq_instruction:
00011DA3: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
00011DAA: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
00011DB1: EB 07                                                 	jmp	avx_mov_instruction
                                                                avx_movd_instruction:
00011DB3: C6 05 B5 A2 01 00 04                                  	mov	[mmx_size],4
                                                                      avx_mov_instruction:
00011DBA: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
00011DC1: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00011DC8: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00011DCF: C6 05 B0 A2 01 00 7E                                  	mov	[extended_code],7Eh
00011DD6: AC                                                    	lods	byte [esi]
00011DD7: E8 58 EF FF FF                                        	call	get_size_operator
00011DDC: 3C 10                                                 	cmp	al,10h
00011DDE: 74 72                                                 	je	avx_movd_reg
00011DE0: 3C 5B                                                 	cmp	al,'['
00011DE2: 0F 85 56 EB FE FF                                     	jne	invalid_operand
00011DE8: E8 A3 EF FF FF                                        	call	get_address
00011DED: A0 B5 A2 01 00                                        	mov	al,[mmx_size]
00011DF2: F6 D0                                                 	not	al
00011DF4: 20 05 A4 A2 01 00                                     	and	[operand_size],al
00011DFA: 0F 85 48 EB FE FF                                     	jnz	invalid_operand_size
00011E00: AC                                                    	lods	byte [esi]
00011E01: 3C 2C                                                 	cmp	al,','
00011E03: 0F 85 35 EB FE FF                                     	jne	invalid_operand
00011E09: AC                                                    	lods	byte [esi]
00011E0A: E8 25 EF FF FF                                        	call	get_size_operator
00011E0F: 3C 10                                                 	cmp	al,10h
00011E11: 0F 85 27 EB FE FF                                     	jne	invalid_operand
00011E17: AC                                                    	lods	byte [esi]
00011E18: E8 2F 23 00 00                                        	call	convert_avx_register
00011E1D: 80 FC 10                                              	cmp	ah,16
00011E20: 0F 85 22 EB FE FF                                     	jne	invalid_operand_size
00011E26: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00011E2B: 80 3D B5 A2 01 00 08                                  	cmp	[mmx_size],8
00011E32: 0F 85 EC 96 FF FF                                     	jne	instruction_ready
00011E38: 80 25 A7 A2 01 00 F7                                  	and	[rex_prefix],not 8
00011E3F: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
00011E46: C6 05 B0 A2 01 00 D6                                  	mov	[extended_code],0D6h
00011E4D: E9 D2 96 FF FF                                        	jmp	instruction_ready
                                                                      avx_movd_reg:
00011E52: AC                                                    	lods	byte [esi]
00011E53: 3C C0                                                 	cmp	al,0C0h
00011E55: 73 64                                                 	jae	avx_movd_xmmreg
00011E57: E8 31 EE FF FF                                        	call	convert_register
00011E5C: 3A 25 B5 A2 01 00                                     	cmp	ah,[mmx_size]
00011E62: 0F 85 E0 EA FE FF                                     	jne	invalid_operand_size
00011E68: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
00011E6F: 88 C3                                                 	mov	bl,al
00011E71: AC                                                    	lods	byte [esi]
00011E72: 3C 2C                                                 	cmp	al,','
00011E74: 0F 85 C4 EA FE FF                                     	jne	invalid_operand
00011E7A: AC                                                    	lods	byte [esi]
00011E7B: E8 B4 EE FF FF                                        	call	get_size_operator
00011E80: 3C 10                                                 	cmp	al,10h
00011E82: 0F 85 B6 EA FE FF                                     	jne	invalid_operand
00011E88: AC                                                    	lods	byte [esi]
00011E89: E8 BE 22 00 00                                        	call	convert_avx_register
00011E8E: 80 FC 10                                              	cmp	ah,16
00011E91: 0F 85 B1 EA FE FF                                     	jne	invalid_operand_size
00011E97: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
                                                                      avx_movd_reg_ready:
00011E9C: F6 05 A7 A2 01 00 08                                  	test	[rex_prefix],8
00011EA3: 0F 84 56 98 FF FF                                     	jz	nomem_instruction_ready
00011EA9: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00011EB0: 0F 85 7E EA FE FF                                     	jne	illegal_instruction
00011EB6: E9 44 98 FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_movd_xmmreg:
00011EBB: 80 2D B0 A2 01 00 10                                  	sub	[extended_code],10h
00011EC2: E8 85 22 00 00                                        	call	convert_avx_register
00011EC7: 80 FC 10                                              	cmp	ah,16
00011ECA: 0F 85 78 EA FE FF                                     	jne	invalid_operand_size
00011ED0: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00011ED5: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
00011EDC: AC                                                    	lods	byte [esi]
00011EDD: 3C 2C                                                 	cmp	al,','
00011EDF: 0F 85 59 EA FE FF                                     	jne	invalid_operand
00011EE5: AC                                                    	lods	byte [esi]
00011EE6: E8 49 EE FF FF                                        	call	get_size_operator
00011EEB: 3C 10                                                 	cmp	al,10h
00011EED: 74 2E                                                 	je	avx_movd_xmmreg_reg
00011EEF: 3C 5B                                                 	cmp	al,'['
00011EF1: 0F 85 47 EA FE FF                                     	jne	invalid_operand
00011EF7: E8 94 EE FF FF                                        	call	get_address
00011EFC: A0 B5 A2 01 00                                        	mov	al,[mmx_size]
00011F01: 3C 08                                                 	cmp	al,8
00011F03: 75 05                                                 	jne	avx_movd_xmmreg_mem_ready
00011F05: E8 57 00 00 00                                        	call	avx_movq_xmmreg_xmmreg_opcode
                                                                      avx_movd_xmmreg_mem_ready:
00011F0A: F6 D0                                                 	not	al
00011F0C: 84 05 A4 A2 01 00                                     	test	[operand_size],al
00011F12: 0F 85 30 EA FE FF                                     	jnz	invalid_operand_size
00011F18: E9 07 96 FF FF                                        	jmp	instruction_ready
                                                                      avx_movd_xmmreg_reg:
00011F1D: AC                                                    	lods	byte [esi]
00011F1E: 3C C0                                                 	cmp	al,0C0h
00011F20: 73 18                                                 	jae	avx_movq_xmmreg_xmmreg
00011F22: E8 66 ED FF FF                                        	call	convert_register
00011F27: 3A 25 B5 A2 01 00                                     	cmp	ah,[mmx_size]
00011F2D: 0F 85 15 EA FE FF                                     	jne	invalid_operand_size
00011F33: 88 C3                                                 	mov	bl,al
00011F35: E9 62 FF FF FF                                        	jmp	avx_movd_reg_ready
                                                                      avx_movq_xmmreg_xmmreg:
00011F3A: 80 3D B5 A2 01 00 08                                  	cmp	[mmx_size],8
00011F41: 0F 85 F7 E9 FE FF                                     	jne	invalid_operand
00011F47: E8 15 00 00 00                                        	call	avx_movq_xmmreg_xmmreg_opcode
00011F4C: E8 FB 21 00 00                                        	call	convert_avx_register
00011F51: 80 FC 10                                              	cmp	ah,16
00011F54: 0F 85 EE E9 FE FF                                     	jne	invalid_operand_size
00011F5A: 88 C3                                                 	mov	bl,al
00011F5C: E9 9E 97 FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_movq_xmmreg_xmmreg_opcode:
00011F61: 80 25 A7 A2 01 00 F7                                  	and	[rex_prefix],not 8
00011F68: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
00011F6F: 80 05 B0 A2 01 00 10                                  	add	[extended_code],10h
00011F76: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00011F7D: C3                                                    	ret
                                                                avx_movddup_instruction:
00011F7E: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
00011F85: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
00011F8C: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00011F93: A2 B0 A2 01 00                                        	mov	[extended_code],al
00011F98: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
00011F9F: 30 C0                                                 	xor	al,al
00011FA1: A2 B5 A2 01 00                                        	mov	[mmx_size],al
00011FA6: A2 AD A2 01 00                                        	mov	[broadcast_size],al
00011FAB: AC                                                    	lods	byte [esi]
00011FAC: E8 83 ED FF FF                                        	call	get_size_operator
00011FB1: 3C 10                                                 	cmp	al,10h
00011FB3: 0F 85 85 E9 FE FF                                     	jne	invalid_operand
00011FB9: AC                                                    	lods	byte [esi]
00011FBA: E8 8D 21 00 00                                        	call	convert_avx_register
00011FBF: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00011FC4: 80 FC 10                                              	cmp	ah,16
00011FC7: 77 07                                                 	ja	avx_movddup_size_ok
00011FC9: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
                                                                      avx_movddup_size_ok:
00011FD0: E8 07 FB FF FF                                        	call	take_avx512_mask
00011FD5: E9 68 F8 FF FF                                        	jmp	avx_vex_reg_ok
                                                                avx_movlpd_instruction:
00011FDA: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00011FE1: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
                                                                avx_movlps_instruction:
00011FE8: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00011FEF: A2 B0 A2 01 00                                        	mov	[extended_code],al
00011FF4: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
00011FFB: C6 05 AD A2 01 00 00                                  	mov	[broadcast_size],0
00012002: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
00012009: AC                                                    	lods	byte [esi]
0001200A: E8 25 ED FF FF                                        	call	get_size_operator
0001200F: 3C 10                                                 	cmp	al,10h
00012011: 75 4B                                                 	jne	avx_movlps_mem
00012013: AC                                                    	lods	byte [esi]
00012014: E8 33 21 00 00                                        	call	convert_avx_register
00012019: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0001201E: AC                                                    	lods	byte [esi]
0001201F: 3C 2C                                                 	cmp	al,','
00012021: 0F 85 17 E9 FE FF                                     	jne	invalid_operand
00012027: E8 11 21 00 00                                        	call	take_avx_register
0001202C: A2 AA A2 01 00                                        	mov	[vex_register],al
00012031: 80 3D A4 A2 01 00 10                                  	cmp	[operand_size],16
00012038: 0F 85 00 E9 FE FF                                     	jne	invalid_operand
0001203E: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
00012045: AC                                                    	lods	byte [esi]
00012046: 3C 2C                                                 	cmp	al,','
00012048: 0F 85 F0 E8 FE FF                                     	jne	invalid_operand
0001204E: E8 20 F9 FF FF                                        	call	take_avx_rm
00012053: 0F 82 E5 E8 FE FF                                     	jc	invalid_operand
00012059: E9 C6 94 FF FF                                        	jmp	instruction_ready
                                                                      avx_movlps_mem:
0001205E: 3C 5B                                                 	cmp	al,'['
00012060: 0F 85 D8 E8 FE FF                                     	jne	invalid_operand
00012066: E8 25 ED FF FF                                        	call	get_address
                                                                      avx_movlps_mem_:
0001206B: A0 A4 A2 01 00                                        	mov	al,[operand_size]
00012070: 08 C0                                                 	or	al,al
00012072: 74 13                                                 	jz	avx_movlps_mem_size_ok
00012074: 3A 05 B5 A2 01 00                                     	cmp	al,[mmx_size]
0001207A: 0F 85 C8 E8 FE FF                                     	jne	invalid_operand_size
00012080: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
                                                                      avx_movlps_mem_size_ok:
00012087: AC                                                    	lods	byte [esi]
00012088: 3C 2C                                                 	cmp	al,','
0001208A: 0F 85 AE E8 FE FF                                     	jne	invalid_operand
00012090: E8 A8 20 00 00                                        	call	take_avx_register
00012095: 80 FC 10                                              	cmp	ah,16
00012098: 0F 85 A0 E8 FE FF                                     	jne	invalid_operand
0001209E: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000120A3: FE 05 B0 A2 01 00                                     	inc	[extended_code]
000120A9: E9 76 94 FF FF                                        	jmp	instruction_ready
                                                                avx_movhlps_instruction:
000120AE: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
000120B5: A2 B0 A2 01 00                                        	mov	[extended_code],al
000120BA: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
000120C1: E8 77 20 00 00                                        	call	take_avx_register
000120C6: 80 FC 10                                              	cmp	ah,16
000120C9: 0F 85 6F E8 FE FF                                     	jne	invalid_operand
000120CF: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000120D4: AC                                                    	lods	byte [esi]
000120D5: 3C 2C                                                 	cmp	al,','
000120D7: 0F 85 61 E8 FE FF                                     	jne	invalid_operand
000120DD: E8 5B 20 00 00                                        	call	take_avx_register
000120E2: A2 AA A2 01 00                                        	mov	[vex_register],al
000120E7: AC                                                    	lods	byte [esi]
000120E8: 3C 2C                                                 	cmp	al,','
000120EA: 0F 85 4E E8 FE FF                                     	jne	invalid_operand
000120F0: E8 48 20 00 00                                        	call	take_avx_register
000120F5: 88 C3                                                 	mov	bl,al
000120F7: E9 03 96 FF FF                                        	jmp	nomem_instruction_ready
                                                                avx_movsd_instruction:
000120FC: B0 F2                                                 	mov	al,0F2h
000120FE: B1 08                                                 	mov	cl,8
00012100: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
00012107: EB 04                                                 	jmp	avx_movs_instruction
                                                                avx_movss_instruction:
00012109: B0 F3                                                 	mov	al,0F3h
0001210B: B1 04                                                 	mov	cl,4
                                                                      avx_movs_instruction:
0001210D: A2 A8 A2 01 00                                        	mov	[opcode_prefix],al
00012112: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
00012118: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
0001211F: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00012126: C6 05 B0 A2 01 00 10                                  	mov	[extended_code],10h
0001212D: AC                                                    	lods	byte [esi]
0001212E: E8 01 EC FF FF                                        	call	get_size_operator
00012133: 3C 10                                                 	cmp	al,10h
00012135: 0F 85 96 00 00 00                                     	jne	avx_movs_mem
0001213B: AC                                                    	lods	byte [esi]
0001213C: E8 0B 20 00 00                                        	call	convert_avx_register
00012141: 80 FC 10                                              	cmp	ah,16
00012144: 0F 85 F4 E7 FE FF                                     	jne	invalid_operand
0001214A: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0001214F: E8 88 F9 FF FF                                        	call	take_avx512_mask
00012154: 30 C9                                                 	xor	cl,cl
00012156: 86 0D A4 A2 01 00                                     	xchg	cl,[operand_size]
0001215C: AC                                                    	lods	byte [esi]
0001215D: 3C 2C                                                 	cmp	al,','
0001215F: 0F 85 D9 E7 FE FF                                     	jne	invalid_operand
00012165: AC                                                    	lods	byte [esi]
00012166: E8 C9 EB FF FF                                        	call	get_size_operator
0001216B: 3C 10                                                 	cmp	al,10h
0001216D: 75 3B                                                 	jne	avx_movs_reg_mem
0001216F: 88 0D A4 A2 01 00                                     	mov	[operand_size],cl
00012175: AC                                                    	lods	byte [esi]
00012176: E8 D1 1F 00 00                                        	call	convert_avx_register
0001217B: A2 AA A2 01 00                                        	mov	[vex_register],al
00012180: AC                                                    	lods	byte [esi]
00012181: 3C 2C                                                 	cmp	al,','
00012183: 0F 85 B5 E7 FE FF                                     	jne	invalid_operand
00012189: E8 AF 1F 00 00                                        	call	take_avx_register
0001218E: 88 C3                                                 	mov	bl,al
00012190: 80 FB 08                                              	cmp	bl,8
00012193: 0F 82 66 95 FF FF                                     	jb	nomem_instruction_ready
00012199: FE 05 B0 A2 01 00                                     	inc	[extended_code]
0001219F: 86 1D B2 A2 01 00                                     	xchg	bl,[postbyte_register]
000121A5: E9 55 95 FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_movs_reg_mem:
000121AA: 3C 5B                                                 	cmp	al,'['
000121AC: 0F 85 8C E7 FE FF                                     	jne	invalid_operand
000121B2: E8 D9 EB FF FF                                        	call	get_address
000121B7: A0 A4 A2 01 00                                        	mov	al,[operand_size]
000121BC: 08 C0                                                 	or	al,al
000121BE: 74 0C                                                 	jz	avx_movs_reg_mem_ok
000121C0: 3A 05 B5 A2 01 00                                     	cmp	al,[mmx_size]
000121C6: 0F 85 7C E7 FE FF                                     	jne	invalid_operand_size
                                                                      avx_movs_reg_mem_ok:
000121CC: E9 53 93 FF FF                                        	jmp	instruction_ready
                                                                      avx_movs_mem:
000121D1: 3C 5B                                                 	cmp	al,'['
000121D3: 0F 85 65 E7 FE FF                                     	jne	invalid_operand
000121D9: E8 B2 EB FF FF                                        	call	get_address
000121DE: 80 0D A5 A2 01 00 20                                  	or	[operand_flags],20h
000121E5: E8 F2 F8 FF FF                                        	call	take_avx512_mask
000121EA: E9 7C FE FF FF                                        	jmp	avx_movlps_mem_
                                                                
                                                                avx_comiss_instruction:
000121EF: 80 0D A5 A2 01 00 16                                  	or	[operand_flags],2+4+10h
000121F6: B1 04                                                 	mov	cl,4
000121F8: E9 EA F5 FF FF                                        	jmp	avx_instruction
                                                                avx_comisd_instruction:
000121FD: 80 0D A5 A2 01 00 16                                  	or	[operand_flags],2+4+10h
00012204: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
0001220B: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
00012212: B1 08                                                 	mov	cl,8
00012214: E9 CE F5 FF FF                                        	jmp	avx_instruction
                                                                avx_movshdup_instruction:
00012219: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
00012220: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00012227: 30 C9                                                 	xor	cl,cl
00012229: E9 B9 F5 FF FF                                        	jmp	avx_instruction
                                                                avx_cvtqq2pd_instruction:
0001222E: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00012235: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
0001223C: 80 0D A5 A2 01 00 0E                                  	or	[operand_flags],2+4+8
00012243: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
0001224A: 66 B9 00 08                                           	mov	cx,0800h
0001224E: E9 96 F5 FF FF                                        	jmp	avx_instruction_with_broadcast
                                                                avx_pshuf_w_instruction:
00012253: A2 A8 A2 01 00                                        	mov	[opcode_prefix],al
00012258: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
0001225F: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
00012266: B0 70                                                 	mov	al,70h
00012268: 30 C9                                                 	xor	cl,cl
0001226A: E9 78 F5 FF FF                                        	jmp	avx_instruction
                                                                avx_single_source_128bit_instruction_38_noevex:
0001226F: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx_128bit_instruction_38_noevex:
00012276: B1 10                                                 	mov	cl,16
00012278: EB 0B                                                 	jmp	avx_instruction_38_noevex
                                                                avx_single_source_instruction_38_noevex:
0001227A: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
00012281: EB 00                                                 	jmp	avx_pi_instruction_38_noevex
                                                                avx_pi_instruction_38_noevex:
00012283: 30 C9                                                 	xor	cl,cl
                                                                      avx_instruction_38_noevex:
00012285: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
                                                                      avx_instruction_38:
0001228C: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00012293: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00012298: B0 38                                                 	mov	al,38h
0001229A: E9 48 F5 FF FF                                        	jmp	avx_instruction
                                                                avx_ss_instruction_3a_imm8_noevex:
0001229F: B1 04                                                 	mov	cl,4
000122A1: EB 2A                                                 	jmp	avx_instruction_3a_imm8_noevex
                                                                avx_sd_instruction_3a_imm8_noevex:
000122A3: B1 08                                                 	mov	cl,8
000122A5: EB 26                                                 	jmp	avx_instruction_3a_imm8_noevex
                                                                avx_single_source_128bit_instruction_3a_imm8_noevex:
000122A7: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx_128bit_instruction_3a_imm8_noevex:
000122AE: B1 10                                                 	mov	cl,16
000122B0: EB 1B                                                 	jmp	avx_instruction_3a_imm8_noevex
                                                                avx_triple_source_instruction_3a_noevex:
000122B2: 30 C9                                                 	xor	cl,cl
000122B4: C6 05 AB A2 01 00 FF                                  	mov	[immediate_size],-1
000122BB: C6 05 00 A2 01 00 00                                  	mov	byte [value],0
000122C2: EB 10                                                 	jmp	avx_instruction_3a_noevex
                                                                avx_single_source_instruction_3a_imm8_noevex:
000122C4: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx_pi_instruction_3a_imm8_noevex:
000122CB: 30 C9                                                 	xor	cl,cl
                                                                      avx_instruction_3a_imm8_noevex:
000122CD: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
                                                                      avx_instruction_3a_noevex:
000122D4: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
                                                                      avx_instruction_3a:
000122DB: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
000122E2: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
000122E7: B0 3A                                                 	mov	al,3Ah
000122E9: E9 F9 F4 FF FF                                        	jmp	avx_instruction
                                                                avx_pi_instruction_3a_imm8:
000122EE: 30 C9                                                 	xor	cl,cl
000122F0: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
000122F7: EB E2                                                 	jmp	avx_instruction_3a
                                                                avx_pclmulqdq_instruction:
000122F9: A2 00 A2 01 00                                        	mov	byte [value],al
000122FE: C6 05 AB A2 01 00 FC                                  	mov	[immediate_size],-4
00012305: 30 C9                                                 	xor	cl,cl
00012307: B0 44                                                 	mov	al,44h
00012309: 80 0D A5 A2 01 00 10                                  	or	[operand_flags],10h
00012310: EB C9                                                 	jmp	avx_instruction_3a
                                                                avx_instruction_38_nomask:
00012312: 80 0D A5 A2 01 00 10                                  	or	[operand_flags],10h
00012319: 30 C9                                                 	xor	cl,cl
0001231B: E9 6C FF FF FF                                        	jmp	avx_instruction_38
                                                                
                                                                avx512_single_source_pd_instruction_sae_imm8:
00012320: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx512_pd_instruction_sae_imm8:
00012327: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
0001232E: 66 B9 00 08                                           	mov	cx,0800h
00012332: EB 1E                                                 	jmp	avx512_instruction_sae_imm8
                                                                avx512_single_source_ps_instruction_sae_imm8:
00012334: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx512_ps_instruction_sae_imm8:
0001233B: 66 B9 00 04                                           	mov	cx,0400h
0001233F: EB 11                                                 	jmp	avx512_instruction_sae_imm8
                                                                avx512_sd_instruction_sae_imm8:
00012341: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
00012348: 66 B9 08 00                                           	mov	cx,0008h
0001234C: EB 04                                                 	jmp	avx512_instruction_sae_imm8
                                                                avx512_ss_instruction_sae_imm8:
0001234E: 66 B9 04 00                                           	mov	cx,0004h
                                                                      avx512_instruction_sae_imm8:
00012352: 80 0D A5 A2 01 00 04                                  	or	[operand_flags],4
                                                                      avx512_instruction_imm8:
00012359: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00012360: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00012367: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
0001236E: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00012373: B0 3A                                                 	mov	al,3Ah
00012375: E9 6F F4 FF FF                                        	jmp	avx_instruction_with_broadcast
                                                                avx512_pd_instruction_er:
0001237A: 80 0D A5 A2 01 00 0C                                  	or	[operand_flags],4+8
00012381: EB 0E                                                 	jmp	avx512_pd_instruction
                                                                avx512_single_source_pd_instruction_sae:
00012383: 80 0D A5 A2 01 00 04                                  	or	[operand_flags],4
                                                                avx512_single_source_pd_instruction:
0001238A: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx512_pd_instruction:
00012391: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
00012398: 66 B9 00 08                                           	mov	cx,0800h
0001239C: EB 4A                                                 	jmp	avx512_instruction
                                                                avx512_ps_instruction_er:
0001239E: 80 0D A5 A2 01 00 0C                                  	or	[operand_flags],4+8
000123A5: EB 0E                                                 	jmp	avx512_ps_instruction
                                                                avx512_single_source_ps_instruction_sae:
000123A7: 80 0D A5 A2 01 00 04                                  	or	[operand_flags],4
                                                                avx512_single_source_ps_instruction:
000123AE: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
                                                                avx512_ps_instruction:
000123B5: 66 B9 00 04                                           	mov	cx,0400h
000123B9: EB 2D                                                 	jmp	avx512_instruction
                                                                avx512_sd_instruction_er:
000123BB: 80 0D A5 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx512_sd_instruction_sae:
000123C2: 80 0D A5 A2 01 00 04                                  	or	[operand_flags],4
                                                                avx512_sd_instruction:
000123C9: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
000123D0: 66 B9 08 00                                           	mov	cx,0008h
000123D4: EB 12                                                 	jmp	avx512_instruction
                                                                avx512_ss_instruction_er:
000123D6: 80 0D A5 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx512_ss_instruction_sae:
000123DD: 80 0D A5 A2 01 00 04                                  	or	[operand_flags],4
                                                                avx512_ss_instruction:
000123E4: 66 B9 04 00                                           	mov	cx,0004h
                                                                      avx512_instruction:
000123E8: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
000123EF: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
000123F6: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
000123FB: B0 38                                                 	mov	al,38h
000123FD: E9 E7 F3 FF FF                                        	jmp	avx_instruction_with_broadcast
                                                                avx512_exp2pd_instruction:
00012402: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
00012409: 80 0D A5 A2 01 00 06                                  	or	[operand_flags],2+4
00012410: 66 B9 40 08                                           	mov	cx,0840h
00012414: EB D2                                                 	jmp	avx512_instruction
                                                                avx512_exp2ps_instruction:
00012416: 80 0D A5 A2 01 00 06                                  	or	[operand_flags],2+4
0001241D: 66 B9 40 04                                           	mov	cx,0440h
00012421: EB C5                                                 	jmp	avx512_instruction
                                                                
                                                                fma_instruction_pd:
00012423: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
0001242A: 66 B9 00 08                                           	mov	cx,0800h
0001242E: EB 17                                                 	jmp	fma_instruction
                                                                fma_instruction_ps:
00012430: 66 B9 00 04                                           	mov	cx,0400h
00012434: EB 11                                                 	jmp	fma_instruction
                                                                fma_instruction_sd:
00012436: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
0001243D: 66 B9 08 00                                           	mov	cx,0008h
00012441: EB 04                                                 	jmp	fma_instruction
                                                                fma_instruction_ss:
00012443: 66 B9 04 00                                           	mov	cx,0004h
                                                                      fma_instruction:
00012447: 80 0D A5 A2 01 00 0C                                  	or	[operand_flags],4+8
0001244E: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00012455: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
0001245A: B0 38                                                 	mov	al,38h
0001245C: E9 88 F3 FF FF                                        	jmp	avx_instruction_with_broadcast
                                                                
                                                                fma4_instruction_p:
00012461: 30 C9                                                 	xor	cl,cl
00012463: EB 06                                                 	jmp	fma4_instruction
                                                                fma4_instruction_sd:
00012465: B1 08                                                 	mov	cl,8
00012467: EB 02                                                 	jmp	fma4_instruction
                                                                fma4_instruction_ss:
00012469: B1 04                                                 	mov	cl,4
                                                                      fma4_instruction:
0001246B: C6 05 AB A2 01 00 FE                                  	mov	[immediate_size],-2
00012472: C6 05 00 A2 01 00 00                                  	mov	byte [value],0
00012479: E9 56 FE FF FF                                        	jmp	avx_instruction_3a_noevex
                                                                
                                                                avx_cmp_pd_instruction:
0001247E: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00012485: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
0001248C: 66 B9 00 08                                           	mov	cx,0800h
00012490: EB 25                                                 	jmp	avx_cmp_instruction
                                                                avx_cmp_ps_instruction:
00012492: 66 B9 00 04                                           	mov	cx,0400h
00012496: EB 1F                                                 	jmp	avx_cmp_instruction
                                                                avx_cmp_sd_instruction:
00012498: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
0001249F: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
000124A6: 66 B9 08 00                                           	mov	cx,0008h
000124AA: EB 0B                                                 	jmp	avx_cmp_instruction
                                                                avx_cmp_ss_instruction:
000124AC: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
000124B3: 66 B9 04 00                                           	mov	cx,0004h
                                                                      avx_cmp_instruction:
000124B7: A2 00 A2 01 00                                        	mov	byte [value],al
000124BC: C6 05 AB A2 01 00 FC                                  	mov	[immediate_size],-4
000124C3: 80 0D A5 A2 01 00 24                                  	or	[operand_flags],4+20h
000124CA: B0 C2                                                 	mov	al,0C2h
000124CC: E9 83 00 00 00                                        	jmp	avx_cmp_common
                                                                avx_cmpeqq_instruction:
000124D1: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
000124D8: B5 08                                                 	mov	ch,8
000124DA: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
000124DF: B0 38                                                 	mov	al,38h
000124E1: EB 61                                                 	jmp	avx_cmp_pi_instruction
                                                                avx_cmpeqd_instruction:
000124E3: B5 04                                                 	mov	ch,4
000124E5: EB 5D                                                 	jmp	avx_cmp_pi_instruction
                                                                avx_cmpeqb_instruction:
000124E7: 30 ED                                                 	xor	ch,ch
000124E9: EB 59                                                 	jmp	avx_cmp_pi_instruction
                                                                avx512_cmp_uq_instruction:
000124EB: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
000124F2: B5 08                                                 	mov	ch,8
000124F4: B4 1E                                                 	mov	ah,1Eh
000124F6: EB 31                                                 	jmp	avx_cmp_pi_instruction_evex
                                                                avx512_cmp_ud_instruction:
000124F8: B5 04                                                 	mov	ch,4
000124FA: B4 1E                                                 	mov	ah,1Eh
000124FC: EB 2B                                                 	jmp	avx_cmp_pi_instruction_evex
                                                                avx512_cmp_q_instruction:
000124FE: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
00012505: B5 08                                                 	mov	ch,8
00012507: B4 1F                                                 	mov	ah,1Fh
00012509: EB 1E                                                 	jmp	avx_cmp_pi_instruction_evex
                                                                avx512_cmp_d_instruction:
0001250B: B5 04                                                 	mov	ch,4
0001250D: B4 1F                                                 	mov	ah,1Fh
0001250F: EB 18                                                 	jmp	avx_cmp_pi_instruction_evex
                                                                avx512_cmp_uw_instruction:
00012511: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_cmp_ub_instruction:
00012518: 30 ED                                                 	xor	ch,ch
0001251A: B4 3E                                                 	mov	ah,3Eh
0001251C: EB 0B                                                 	jmp	avx_cmp_pi_instruction_evex
                                                                avx512_cmp_w_instruction:
0001251E: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_cmp_b_instruction:
00012525: 30 ED                                                 	xor	ch,ch
00012527: B4 3F                                                 	mov	ah,3Fh
                                                                      avx_cmp_pi_instruction_evex:
00012529: A2 00 A2 01 00                                        	mov	byte [value],al
0001252E: C6 05 AB A2 01 00 FC                                  	mov	[immediate_size],-4
00012535: 88 25 B1 A2 01 00                                     	mov	[supplemental_code],ah
0001253B: B0 3A                                                 	mov	al,3Ah
0001253D: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
                                                                      avx_cmp_pi_instruction:
00012544: 30 C9                                                 	xor	cl,cl
00012546: 80 0D A5 A2 01 00 20                                  	or	[operand_flags],20h
0001254D: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                      avx_cmp_common:
00012554: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
0001255A: 88 2D AD A2 01 00                                     	mov	[broadcast_size],ch
00012560: A2 B0 A2 01 00                                        	mov	[extended_code],al
00012565: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0001256C: AC                                                    	lods	byte [esi]
0001256D: E8 C2 E7 FF FF                                        	call	get_size_operator
00012572: 3C 14                                                 	cmp	al,14h
00012574: 74 14                                                 	je	avx_maskreg
00012576: 3C 10                                                 	cmp	al,10h
00012578: 0F 85 C0 E3 FE FF                                     	jne	invalid_operand
0001257E: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00012585: E9 8C F2 FF FF                                        	jmp	avx_reg
                                                                      avx_maskreg:
0001258A: 80 3D A4 A2 01 00 00                                  	cmp	[operand_size],0
00012591: 0F 85 B1 E3 FE FF                                     	jne	invalid_operand_size
00012597: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
0001259E: AC                                                    	lods	byte [esi]
0001259F: E8 75 01 00 00                                        	call	convert_mask_register
000125A4: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000125A9: E8 2E F5 FF FF                                        	call	take_avx512_mask
000125AE: E9 73 F2 FF FF                                        	jmp	avx_vex_reg
                                                                avx512_fpclasspd_instruction:
000125B3: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
000125BA: 66 B9 00 08                                           	mov	cx,0800h
000125BE: EB 17                                                 	jmp	avx_fpclass_instruction
                                                                avx512_fpclassps_instruction:
000125C0: 66 B9 00 04                                           	mov	cx,0400h
000125C4: EB 11                                                 	jmp	avx_fpclass_instruction
                                                                avx512_fpclasssd_instruction:
000125C6: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
000125CD: 66 B9 08 00                                           	mov	cx,0008h
000125D1: EB 04                                                 	jmp	avx_fpclass_instruction
                                                                avx512_fpclassss_instruction:
000125D3: 66 B9 04 00                                           	mov	cx,0004h
                                                                      avx_fpclass_instruction:
000125D7: 88 2D AD A2 01 00                                     	mov	[broadcast_size],ch
000125DD: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
000125E3: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
000125EA: E8 56 D4 FF FF                                        	call	setup_66_0f_3a
000125EF: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
000125F6: AC                                                    	lods	byte [esi]
000125F7: 3C 14                                                 	cmp	al,14h
000125F9: 74 8F                                                 	je	avx_maskreg
000125FB: E9 3E E3 FE FF                                        	jmp	invalid_operand
                                                                avx512_ptestnmd_instruction:
00012600: B5 04                                                 	mov	ch,4
00012602: EB 14                                                 	jmp	avx512_ptestnm_instruction
                                                                avx512_ptestnmq_instruction:
00012604: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
0001260B: B5 08                                                 	mov	ch,8
0001260D: EB 09                                                 	jmp	avx512_ptestnm_instruction
                                                                avx512_ptestnmw_instruction:
0001260F: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_ptestnmb_instruction:
00012616: 30 ED                                                 	xor	ch,ch
                                                                      avx512_ptestnm_instruction:
00012618: B4 F3                                                 	mov	ah,0F3h
0001261A: EB 1A                                                 	jmp	avx512_ptest_instruction
                                                                avx512_ptestmd_instruction:
0001261C: B5 04                                                 	mov	ch,4
0001261E: EB 14                                                 	jmp	avx512_ptestm_instruction
                                                                avx512_ptestmq_instruction:
00012620: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
00012627: B5 08                                                 	mov	ch,8
00012629: EB 09                                                 	jmp	avx512_ptestm_instruction
                                                                avx512_ptestmw_instruction:
0001262B: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_ptestmb_instruction:
00012632: 30 ED                                                 	xor	ch,ch
                                                                      avx512_ptestm_instruction:
00012634: B4 66                                                 	mov	ah,66h
                                                                      avx512_ptest_instruction:
00012636: 30 C9                                                 	xor	cl,cl
00012638: 88 25 A8 A2 01 00                                     	mov	[opcode_prefix],ah
0001263E: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00012643: B0 38                                                 	mov	al,38h
00012645: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
0001264C: E9 03 FF FF FF                                        	jmp	avx_cmp_common
                                                                
                                                                mask_shift_instruction_q:
00012651: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                mask_shift_instruction_d:
00012658: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
0001265F: 80 0D AB A2 01 00 01                                  	or	[immediate_size],1
00012666: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
0001266D: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00012672: B0 3A                                                 	mov	al,3Ah
00012674: EB 3E                                                 	jmp	mask_instruction
                                                                mask_instruction_single_source_b:
00012676: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
0001267D: EB 0E                                                 	jmp	mask_instruction_single_source_w
                                                                mask_instruction_single_source_d:
0001267F: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                mask_instruction_single_source_q:
00012686: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                mask_instruction_single_source_w:
0001268D: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
00012694: EB 1E                                                 	jmp	mask_instruction
                                                                mask_instruction_b:
00012696: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
0001269D: EB 0E                                                 	jmp	mask_instruction_w
                                                                mask_instruction_d:
0001269F: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                mask_instruction_q:
000126A6: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                mask_instruction_w:
000126AD: C6 05 A4 A2 01 00 20                                  	mov	[operand_size],32
                                                                mask_instruction:
000126B4: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
000126BB: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
000126C2: A2 B0 A2 01 00                                        	mov	[extended_code],al
000126C7: E8 43 00 00 00                                        	call	take_mask_register
000126CC: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000126D1: F6 05 A5 A2 01 00 02                                  	test	[operand_flags],2
000126D8: 75 13                                                 	jnz	mask_instruction_nds_ok
000126DA: AC                                                    	lods	byte [esi]
000126DB: 3C 2C                                                 	cmp	al,','
000126DD: 0F 85 5B E2 FE FF                                     	jne	invalid_operand
000126E3: E8 27 00 00 00                                        	call	take_mask_register
000126E8: A2 AA A2 01 00                                        	mov	[vex_register],al
                                                                      mask_instruction_nds_ok:
000126ED: AC                                                    	lods	byte [esi]
000126EE: 3C 2C                                                 	cmp	al,','
000126F0: 0F 85 48 E2 FE FF                                     	jne	invalid_operand
000126F6: E8 14 00 00 00                                        	call	take_mask_register
000126FB: 88 C3                                                 	mov	bl,al
000126FD: 80 3D AB A2 01 00 00                                  	cmp	[immediate_size],0
00012704: 0F 85 CD C5 FF FF                                     	jne	mmx_nomem_imm8
0001270A: E9 F0 8F FF FF                                        	jmp	nomem_instruction_ready
                                                                take_mask_register:
0001270F: AC                                                    	lods	byte [esi]
00012710: 3C 14                                                 	cmp	al,14h
00012712: 0F 85 26 E2 FE FF                                     	jne	invalid_operand
00012718: AC                                                    	lods	byte [esi]
                                                                convert_mask_register:
00012719: 88 C4                                                 	mov	ah,al
0001271B: C0 EC 04                                              	shr	ah,4
0001271E: 80 FC 05                                              	cmp	ah,5
00012721: 0F 85 17 E2 FE FF                                     	jne	invalid_operand
00012727: 24 0F                                                 	and	al,1111b
00012729: C3                                                    	ret
                                                                kmov_instruction:
0001272A: A2 B5 A2 01 00                                        	mov	[mmx_size],al
0001272F: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
00012736: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0001273D: C6 05 B0 A2 01 00 90                                  	mov	[extended_code],90h
00012744: AC                                                    	lods	byte [esi]
00012745: 3C 14                                                 	cmp	al,14h
00012747: 74 6D                                                 	je	kmov_maskreg
00012749: 3C 10                                                 	cmp	al,10h
0001274B: 0F 84 10 01 00 00                                     	je	kmov_reg
00012751: E8 DE E5 FF FF                                        	call	get_size_operator
00012756: FE 05 B0 A2 01 00                                     	inc	[extended_code]
0001275C: 3C 5B                                                 	cmp	al,'['
0001275E: 0F 85 C6 E1 FE FF                                     	jne	invalid_argument
00012764: E8 27 E6 FF FF                                        	call	get_address
00012769: AC                                                    	lods	byte [esi]
0001276A: 3C 2C                                                 	cmp	al,','
0001276C: 0F 85 CC E1 FE FF                                     	jne	invalid_operand
00012772: E8 98 FF FF FF                                        	call	take_mask_register
00012777: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
                                                                      kmov_with_mem:
0001277C: 8A 25 B5 A2 01 00                                     	mov	ah,[mmx_size]
00012782: A0 A4 A2 01 00                                        	mov	al,[operand_size]
00012787: 08 C0                                                 	or	al,al
00012789: 74 08                                                 	jz	kmov_mem_size_ok
0001278B: 38 E0                                                 	cmp	al,ah
0001278D: 0F 85 B5 E1 FE FF                                     	jne	invalid_operand_size
                                                                      kmov_mem_size_ok:
00012793: E8 05 00 00 00                                        	call	setup_kmov_prefix
00012798: E9 87 8D FF FF                                        	jmp	instruction_ready
                                                                      setup_kmov_prefix:
0001279D: 80 FC 04                                              	cmp	ah,4
000127A0: 72 07                                                 	jb	kmov_w_ok
000127A2: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                      kmov_w_ok:
000127A9: F6 C4 05                                              	test	ah,1 or 4
000127AC: 74 07                                                 	jz	kmov_prefix_ok
000127AE: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                      kmov_prefix_ok:
000127B5: C3                                                    	ret
                                                                      kmov_maskreg:
000127B6: AC                                                    	lods	byte [esi]
000127B7: E8 5D FF FF FF                                        	call	convert_mask_register
000127BC: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000127C1: AC                                                    	lods	byte [esi]
000127C2: 3C 2C                                                 	cmp	al,','
000127C4: 0F 85 74 E1 FE FF                                     	jne	invalid_operand
000127CA: AC                                                    	lods	byte [esi]
000127CB: 3C 14                                                 	cmp	al,14h
000127CD: 74 18                                                 	je	kmov_maskreg_maskreg
000127CF: 3C 10                                                 	cmp	al,10h
000127D1: 74 2C                                                 	je	kmov_maskreg_reg
000127D3: E8 5C E5 FF FF                                        	call	get_size_operator
000127D8: 3C 5B                                                 	cmp	al,'['
000127DA: 0F 85 4A E1 FE FF                                     	jne	invalid_argument
000127E0: E8 AB E5 FF FF                                        	call	get_address
000127E5: EB 95                                                 	jmp	kmov_with_mem
                                                                      kmov_maskreg_maskreg:
000127E7: AC                                                    	lods	byte [esi]
000127E8: E8 2C FF FF FF                                        	call	convert_mask_register
000127ED: 88 C3                                                 	mov	bl,al
000127EF: 8A 25 B5 A2 01 00                                     	mov	ah,[mmx_size]
000127F5: E8 A3 FF FF FF                                        	call	setup_kmov_prefix
000127FA: E9 00 8F FF FF                                        	jmp	nomem_instruction_ready
                                                                      kmov_maskreg_reg:
000127FF: 80 05 B0 A2 01 00 02                                  	add	[extended_code],2
00012806: AC                                                    	lods	byte [esi]
00012807: E8 81 E4 FF FF                                        	call	convert_register
                                                                      kmov_with_reg:
0001280C: 88 C3                                                 	mov	bl,al
0001280E: A0 B5 A2 01 00                                        	mov	al,[mmx_size]
00012813: B4 04                                                 	mov	ah,4
00012815: 38 E0                                                 	cmp	al,ah
00012817: 76 02                                                 	jbe	kmov_reg_size_check
00012819: 88 C4                                                 	mov	ah,al
                                                                      kmov_reg_size_check:
0001281B: 3A 25 A4 A2 01 00                                     	cmp	ah,[operand_size]
00012821: 0F 85 21 E1 FE FF                                     	jne	invalid_operand_size
00012827: 3C 08                                                 	cmp	al,8
00012829: 74 16                                                 	je	kmov_f2_w1
0001282B: 3C 02                                                 	cmp	al,2
0001282D: 77 26                                                 	ja	kmov_f2
0001282F: 0F 84 CA 8E FF FF                                     	je	nomem_instruction_ready
00012835: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
0001283C: E9 BE 8E FF FF                                        	jmp	nomem_instruction_ready
                                                                      kmov_f2_w1:
00012841: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
00012848: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0001284F: 0F 85 DF E0 FE FF                                     	jne	illegal_instruction
                                                                      kmov_f2:
00012855: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
0001285C: E9 9E 8E FF FF                                        	jmp	nomem_instruction_ready
                                                                      kmov_reg:
00012861: 80 05 B0 A2 01 00 03                                  	add	[extended_code],3
00012868: AC                                                    	lods	byte [esi]
00012869: E8 1F E4 FF FF                                        	call	convert_register
0001286E: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00012873: AC                                                    	lods	byte [esi]
00012874: 3C 2C                                                 	cmp	al,','
00012876: 0F 85 C2 E0 FE FF                                     	jne	invalid_operand
0001287C: E8 8E FE FF FF                                        	call	take_mask_register
00012881: EB 89                                                 	jmp	kmov_with_reg
                                                                avx512_pmov_m2_instruction_w1:
00012883: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_pmov_m2_instruction:
0001288A: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00012891: E8 51 00 00 00                                        	call	setup_f3_0f_38
00012896: E8 A2 18 00 00                                        	call	take_avx_register
0001289B: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000128A0: AC                                                    	lods	byte [esi]
000128A1: 3C 2C                                                 	cmp	al,','
000128A3: 0F 85 95 E0 FE FF                                     	jne	invalid_operand
000128A9: E8 61 FE FF FF                                        	call	take_mask_register
000128AE: 88 C3                                                 	mov	bl,al
000128B0: E9 4A 8E FF FF                                        	jmp	nomem_instruction_ready
                                                                avx512_pmov_2m_instruction_w1:
000128B5: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_pmov_2m_instruction:
000128BC: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
000128C3: E8 1F 00 00 00                                        	call	setup_f3_0f_38
000128C8: E8 42 FE FF FF                                        	call	take_mask_register
000128CD: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000128D2: AC                                                    	lods	byte [esi]
000128D3: 3C 2C                                                 	cmp	al,','
000128D5: 0F 85 63 E0 FE FF                                     	jne	invalid_operand
000128DB: E8 5D 18 00 00                                        	call	take_avx_register
000128E0: 88 C3                                                 	mov	bl,al
000128E2: E9 18 8E FF FF                                        	jmp	nomem_instruction_ready
                                                                      setup_f3_0f_38:
000128E7: C6 05 B0 A2 01 00 38                                  	mov	[extended_code],38h
000128EE: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
000128F3: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
000128FA: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00012901: C3                                                    	ret
                                                                
                                                                vzeroall_instruction:
00012902: C6 05 A4 A2 01 00 20                                  	mov	[operand_size],32
                                                                vzeroupper_instruction:
00012909: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00012910: A2 B0 A2 01 00                                        	mov	[extended_code],al
00012915: 80 25 BD A2 01 00 00                                  	and	[displacement_compression],0
0001291C: E8 68 18 00 00                                        	call	store_vex_instruction_code
00012921: E9 54 26 FF FF                                        	jmp	instruction_assembled
                                                                vstmxcsr_instruction:
00012926: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
0001292D: E9 A0 D4 FF FF                                        	jmp	stmxcsr_instruction
                                                                
                                                                avx_perm2f128_instruction:
00012932: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00012939: 30 ED                                                 	xor	ch,ch
                                                                      avx_instruction_imm8_without_128bit:
0001293B: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
00012942: B4 3A                                                 	mov	ah,3Ah
00012944: EB 21                                                 	jmp	avx_instruction_without_128bit
                                                                avx512_shuf_q_instruction:
00012946: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
0001294D: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00012954: B5 08                                                 	mov	ch,8
00012956: EB E3                                                 	jmp	avx_instruction_imm8_without_128bit
                                                                avx512_shuf_d_instruction:
00012958: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
0001295F: B5 04                                                 	mov	ch,4
00012961: EB D8                                                 	jmp	avx_instruction_imm8_without_128bit
                                                                avx_permd_instruction:
00012963: B4 38                                                 	mov	ah,38h
00012965: B5 04                                                 	mov	ch,4
                                                                      avx_instruction_without_128bit:
00012967: 30 C9                                                 	xor	cl,cl
00012969: E8 1D 00 00 00                                        	call	setup_avx_66_supplemental
0001296E: E8 CA 17 00 00                                        	call	take_avx_register
00012973: 80 FC 20                                              	cmp	ah,32
00012976: 0F 82 CC DF FE FF                                     	jb	invalid_operand_size
0001297C: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00012981: E8 56 F1 FF FF                                        	call	take_avx512_mask
00012986: E9 9B EE FF FF                                        	jmp	avx_vex_reg
                                                                      setup_avx_66_supplemental:
0001298B: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00012992: 88 2D AD A2 01 00                                     	mov	[broadcast_size],ch
00012998: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
0001299E: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
000129A5: 88 25 B0 A2 01 00                                     	mov	[extended_code],ah
000129AB: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
000129B0: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
000129B7: C3                                                    	ret
                                                                avx_permq_instruction:
000129B8: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
000129BF: B5 08                                                 	mov	ch,8
000129C1: EB 0D                                                 	jmp	avx_permil_instruction
                                                                avx_permilpd_instruction:
000129C3: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
000129CA: B5 08                                                 	mov	ch,8
000129CC: EB 02                                                 	jmp	avx_permil_instruction
                                                                avx_permilps_instruction:
000129CE: B5 04                                                 	mov	ch,4
                                                                      avx_permil_instruction:
000129D0: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
000129D7: 30 C9                                                 	xor	cl,cl
000129D9: B4 3A                                                 	mov	ah,3Ah
000129DB: E8 AB FF FF FF                                        	call	setup_avx_66_supplemental
000129E0: E8 58 17 00 00                                        	call	take_avx_register
000129E5: 80 3D B1 A2 01 00 04                                  	cmp	[supplemental_code],4
000129EC: 73 09                                                 	jae	avx_permil_size_ok
000129EE: 80 FC 20                                              	cmp	ah,32
000129F1: 0F 82 51 DF FE FF                                     	jb	invalid_operand_size
                                                                      avx_permil_size_ok:
000129F7: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000129FC: E8 DB F0 FF FF                                        	call	take_avx512_mask
00012A01: AC                                                    	lods	byte [esi]
00012A02: 3C 2C                                                 	cmp	al,','
00012A04: 0F 85 34 DF FE FF                                     	jne	invalid_operand
00012A0A: E8 64 EF FF FF                                        	call	take_avx_rm
00012A0F: 0F 83 7A C2 FF FF                                     	jnc	mmx_imm8
00012A15: 88 C3                                                 	mov	bl,al
00012A17: 80 3E 2C                                              	cmp	byte [esi],','
00012A1A: 0F 85 1E DF FE FF                                     	jne	invalid_operand
00012A20: 8A 46 01                                              	mov	al,[esi+1]
00012A23: 3C 11                                                 	cmp	al,11h
00012A25: 75 03                                                 	jne	avx_permil_rm_or_imm8
00012A27: 8A 46 03                                              	mov	al,[esi+3]
                                                                      avx_permil_rm_or_imm8:
00012A2A: 3C 28                                                 	cmp	al,'('
00012A2C: 0F 84 A5 C2 FF FF                                     	je	mmx_nomem_imm8
00012A32: 88 1D AA A2 01 00                                     	mov	[vex_register],bl
00012A38: 46                                                    	inc	esi
00012A39: C6 05 B0 A2 01 00 38                                  	mov	[extended_code],38h
00012A40: A0 B1 A2 01 00                                        	mov	al,[supplemental_code]
00012A45: 3C 04                                                 	cmp	al,4
00012A47: 72 0C                                                 	jb	avx_permq_rm
00012A49: 80 05 B1 A2 01 00 08                                  	add	[supplemental_code],8
00012A50: E9 1C EE FF FF                                        	jmp	avx_regs_rm
                                                                      avx_permq_rm:
00012A55: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00012A5C: C0 E0 05                                              	shl	al,5
00012A5F: F6 D8                                                 	neg	al
00012A61: 04 36                                                 	add	al,36h
00012A63: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00012A68: E9 04 EE FF FF                                        	jmp	avx_regs_rm
                                                                vpermil_2pd_instruction:
00012A6D: C6 05 AB A2 01 00 FE                                  	mov	[immediate_size],-2
00012A74: A2 00 A2 01 00                                        	mov	byte [value],al
00012A79: B0 49                                                 	mov	al,49h
00012A7B: EB 1E                                                 	jmp	vpermil2_instruction_setup
                                                                vpermil_2ps_instruction:
00012A7D: C6 05 AB A2 01 00 FE                                  	mov	[immediate_size],-2
00012A84: A2 00 A2 01 00                                        	mov	byte [value],al
00012A89: B0 48                                                 	mov	al,48h
00012A8B: EB 0E                                                 	jmp	vpermil2_instruction_setup
                                                                vpermil2_instruction:
00012A8D: C6 05 AB A2 01 00 FD                                  	mov	[immediate_size],-3
00012A94: C6 05 00 A2 01 00 00                                  	mov	byte [value],0
                                                                      vpermil2_instruction_setup:
00012A9B: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00012AA2: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00012AA9: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00012AAE: B0 3A                                                 	mov	al,3Ah
00012AB0: 30 C9                                                 	xor	cl,cl
00012AB2: E9 30 ED FF FF                                        	jmp	avx_instruction
                                                                
                                                                avx_shift_q_instruction_evex:
00012AB7: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
                                                                avx_shift_q_instruction:
00012ABE: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
00012AC5: B1 08                                                 	mov	cl,8
00012AC7: EB 06                                                 	jmp	avx_shift_instruction
                                                                avx_shift_d_instruction:
00012AC9: B1 04                                                 	mov	cl,4
00012ACB: EB 02                                                 	jmp	avx_shift_instruction
                                                                avx_shift_bw_instruction:
00012ACD: 30 C9                                                 	xor	cl,cl
                                                                       avx_shift_instruction:
00012ACF: 88 0D AD A2 01 00                                     	mov	[broadcast_size],cl
00012AD5: C6 05 B5 A2 01 00 00                                  	mov	[mmx_size],0
00012ADC: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00012AE3: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00012AEA: A2 B0 A2 01 00                                        	mov	[extended_code],al
00012AEF: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
00012AF6: E8 42 16 00 00                                        	call	take_avx_register
00012AFB: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00012B00: E8 D7 EF FF FF                                        	call	take_avx512_mask
00012B05: AC                                                    	lods	byte [esi]
00012B06: 3C 2C                                                 	cmp	al,','
00012B08: 0F 85 30 DE FE FF                                     	jne	invalid_operand
00012B0E: 30 C9                                                 	xor	cl,cl
00012B10: 86 0D A4 A2 01 00                                     	xchg	cl,[operand_size]
00012B16: AC                                                    	lods	byte [esi]
00012B17: E8 18 E2 FF FF                                        	call	get_size_operator
00012B1C: 3C 5B                                                 	cmp	al,'['
00012B1E: 0F 84 C0 00 00 00                                     	je	avx_shift_reg_mem
00012B24: 88 0D A4 A2 01 00                                     	mov	[operand_size],cl
00012B2A: 3C 10                                                 	cmp	al,10h
00012B2C: 0F 85 0C DE FE FF                                     	jne	invalid_operand
00012B32: AC                                                    	lods	byte [esi]
00012B33: E8 14 16 00 00                                        	call	convert_avx_register
00012B38: A2 AA A2 01 00                                        	mov	[vex_register],al
00012B3D: AC                                                    	lods	byte [esi]
00012B3E: 3C 2C                                                 	cmp	al,','
00012B40: 0F 85 F8 DD FE FF                                     	jne	invalid_operand
00012B46: 56                                                    	push	esi
00012B47: 30 C9                                                 	xor	cl,cl
00012B49: 86 0D A4 A2 01 00                                     	xchg	cl,[operand_size]
00012B4F: AC                                                    	lods	byte [esi]
00012B50: E8 DF E1 FF FF                                        	call	get_size_operator
00012B55: 3C 10                                                 	cmp	al,10h
00012B57: 74 48                                                 	je	avx_shift_reg_reg_reg
00012B59: 5E                                                    	pop	esi
00012B5A: 3C 5B                                                 	cmp	al,'['
00012B5C: 74 57                                                 	je	avx_shift_reg_reg_mem
00012B5E: 86 0D A4 A2 01 00                                     	xchg	cl,[operand_size]
00012B64: F6 C1 FE                                              	test	cl,not 1
00012B67: 0F 85 DB DD FE FF                                     	jnz	invalid_operand_size
00012B6D: 4E                                                    	dec	esi
00012B6E: E8 07 00 00 00                                        	call	convert_avx_shift_opcode
00012B73: 88 C3                                                 	mov	bl,al
00012B75: E9 5D C1 FF FF                                        	jmp	mmx_nomem_imm8
                                                                      convert_avx_shift_opcode:
00012B7A: A0 B0 A2 01 00                                        	mov	al,[extended_code]
00012B7F: 88 C4                                                 	mov	ah,al
00012B81: 80 E4 0F                                              	and	ah,1111b
00012B84: 80 C4 70                                              	add	ah,70h
00012B87: 88 25 B0 A2 01 00                                     	mov	[extended_code],ah
00012B8D: C0 E8 04                                              	shr	al,4
00012B90: 2C 0C                                                 	sub	al,0Ch
00012B92: D0 E0                                                 	shl	al,1
00012B94: 86 05 B2 A2 01 00                                     	xchg	al,[postbyte_register]
00012B9A: 86 05 AA A2 01 00                                     	xchg	al,[vex_register]
00012BA0: C3                                                    	ret
                                                                      avx_shift_reg_reg_reg:
00012BA1: 58                                                    	pop	eax
00012BA2: AC                                                    	lods	byte [esi]
00012BA3: E8 7D E1 FF FF                                        	call	convert_xmm_register
00012BA8: 86 0D A4 A2 01 00                                     	xchg	cl,[operand_size]
00012BAE: 88 C3                                                 	mov	bl,al
00012BB0: E9 4A 8B FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_shift_reg_reg_mem:
00012BB5: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
00012BBC: 51                                                    	push	ecx
00012BBD: AC                                                    	lods	byte [esi]
00012BBE: E8 71 E1 FF FF                                        	call	get_size_operator
00012BC3: E8 C8 E1 FF FF                                        	call	get_address
00012BC8: 58                                                    	pop	eax
00012BC9: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
00012BCF: 84 C0                                                 	test	al,al
00012BD1: 0F 84 4D 89 FF FF                                     	jz	instruction_ready
00012BD7: 3C 10                                                 	cmp	al,16
00012BD9: 0F 85 69 DD FE FF                                     	jne	invalid_operand_size
00012BDF: E9 40 89 FF FF                                        	jmp	instruction_ready
                                                                      avx_shift_reg_mem:
00012BE4: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00012BEB: E8 CA ED FF FF                                        	call	take_avx_mem
00012BF0: E8 85 FF FF FF                                        	call	convert_avx_shift_opcode
00012BF5: E9 95 C0 FF FF                                        	jmp	mmx_imm8
                                                                avx_shift_dq_instruction:
00012BFA: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00012BFF: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00012C06: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00012C0D: C6 05 B0 A2 01 00 73                                  	mov	[extended_code],73h
00012C14: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
00012C1B: C6 05 B5 A2 01 00 00                                  	mov	[mmx_size],0
00012C22: E8 16 15 00 00                                        	call	take_avx_register
00012C27: A2 AA A2 01 00                                        	mov	[vex_register],al
00012C2C: AC                                                    	lods	byte [esi]
00012C2D: 3C 2C                                                 	cmp	al,','
00012C2F: 0F 85 09 DD FE FF                                     	jne	invalid_operand
00012C35: AC                                                    	lods	byte [esi]
00012C36: E8 F9 E0 FF FF                                        	call	get_size_operator
00012C3B: 3C 5B                                                 	cmp	al,'['
00012C3D: 74 15                                                 	je	avx_shift_dq_reg_mem
00012C3F: 3C 10                                                 	cmp	al,10h
00012C41: 0F 85 F7 DC FE FF                                     	jne	invalid_operand
00012C47: AC                                                    	lods	byte [esi]
00012C48: E8 FF 14 00 00                                        	call	convert_avx_register
00012C4D: 88 C3                                                 	mov	bl,al
00012C4F: E9 83 C0 FF FF                                        	jmp	mmx_nomem_imm8
                                                                      avx_shift_dq_reg_mem:
00012C54: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00012C5B: E8 30 E1 FF FF                                        	call	get_address
00012C60: E9 2A C0 FF FF                                        	jmp	mmx_imm8
                                                                avx512_rotate_q_instruction:
00012C65: B1 08                                                 	mov	cl,8
00012C67: 08 0D A7 A2 01 00                                     	or	[rex_prefix],cl
00012C6D: EB 02                                                 	jmp	avx512_rotate_instruction
                                                                avx512_rotate_d_instruction:
00012C6F: B1 04                                                 	mov	cl,4
                                                                      avx512_rotate_instruction:
00012C71: 88 0D AD A2 01 00                                     	mov	[broadcast_size],cl
00012C77: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00012C7C: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00012C83: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00012C8A: C6 05 B0 A2 01 00 72                                  	mov	[extended_code],72h
00012C91: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00012C98: C6 05 B5 A2 01 00 00                                  	mov	[mmx_size],0
00012C9F: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
00012CA6: E8 92 14 00 00                                        	call	take_avx_register
00012CAB: A2 AA A2 01 00                                        	mov	[vex_register],al
00012CB0: E8 27 EE FF FF                                        	call	take_avx512_mask
00012CB5: E9 88 EB FF FF                                        	jmp	avx_vex_reg_ok
                                                                
                                                                avx_pmovsxbq_instruction:
00012CBA: B1 02                                                 	mov	cl,2
00012CBC: EB 06                                                 	jmp	avx_pmovsx_instruction
                                                                avx_pmovsxbd_instruction:
00012CBE: B1 04                                                 	mov	cl,4
00012CC0: EB 02                                                 	jmp	avx_pmovsx_instruction
                                                                avx_pmovsxbw_instruction:
00012CC2: B1 08                                                 	mov	cl,8
                                                                      avx_pmovsx_instruction:
00012CC4: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
00012CCA: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
00012CD1: E8 7D D0 FF FF                                        	call	setup_66_0f_38
00012CD6: E8 62 14 00 00                                        	call	take_avx_register
00012CDB: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00012CE0: E8 F7 ED FF FF                                        	call	take_avx512_mask
00012CE5: AC                                                    	lods	byte [esi]
00012CE6: 3C 2C                                                 	cmp	al,','
00012CE8: 0F 85 50 DC FE FF                                     	jne	invalid_operand
00012CEE: 30 C0                                                 	xor	al,al
00012CF0: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
00012CF6: 0F BC C8                                              	bsf	ecx,eax
00012CF9: 80 E9 04                                              	sub	cl,4
00012CFC: D2 25 B5 A2 01 00                                     	shl	[mmx_size],cl
00012D02: 50                                                    	push	eax
00012D03: AC                                                    	lods	byte [esi]
00012D04: E8 2B E0 FF FF                                        	call	get_size_operator
00012D09: 3C 10                                                 	cmp	al,10h
00012D0B: 74 2D                                                 	je	avx_pmovsx_reg_reg
00012D0D: 3C 5B                                                 	cmp	al,'['
00012D0F: 0F 85 29 DC FE FF                                     	jne	invalid_operand
00012D15: E8 76 E0 FF FF                                        	call	get_address
00012D1A: 58                                                    	pop	eax
00012D1B: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
00012D21: 08 C0                                                 	or	al,al
00012D23: 0F 84 FB 87 FF FF                                     	jz	instruction_ready
00012D29: 3A 05 B5 A2 01 00                                     	cmp	al,[mmx_size]
00012D2F: 0F 85 13 DC FE FF                                     	jne	invalid_operand_size
00012D35: E9 EA 87 FF FF                                        	jmp	instruction_ready
                                                                      avx_pmovsx_reg_reg:
00012D3A: AC                                                    	lods	byte [esi]
00012D3B: E8 0C 14 00 00                                        	call	convert_avx_register
00012D40: 88 C3                                                 	mov	bl,al
00012D42: 3A 25 B5 A2 01 00                                     	cmp	ah,[mmx_size]
00012D48: 74 0F                                                 	je	avx_pmovsx_xmmreg_reg_size_ok
00012D4A: 0F 82 F8 DB FE FF                                     	jb	invalid_operand_size
00012D50: 80 FC 10                                              	cmp	ah,16
00012D53: 0F 85 EF DB FE FF                                     	jne	invalid_operand_size
                                                                      avx_pmovsx_xmmreg_reg_size_ok:
00012D59: 58                                                    	pop	eax
00012D5A: A2 A4 A2 01 00                                        	mov	[operand_size],al
00012D5F: E9 9B 89 FF FF                                        	jmp	nomem_instruction_ready
                                                                avx512_pmovqb_instruction:
00012D64: B1 02                                                 	mov	cl,2
00012D66: EB 06                                                 	jmp	avx512_pmov_instruction
                                                                avx512_pmovdb_instruction:
00012D68: B1 04                                                 	mov	cl,4
00012D6A: EB 02                                                 	jmp	avx512_pmov_instruction
                                                                avx512_pmovwb_instruction:
00012D6C: B1 08                                                 	mov	cl,8
                                                                      avx512_pmov_instruction:
00012D6E: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
00012D74: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00012D7B: C6 05 B0 A2 01 00 38                                  	mov	[extended_code],38h
00012D82: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00012D87: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00012D8E: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00012D95: AC                                                    	lods	byte [esi]
00012D96: E8 99 DF FF FF                                        	call	get_size_operator
00012D9B: 3C 10                                                 	cmp	al,10h
00012D9D: 74 67                                                 	je	avx512_pmov_reg
00012D9F: 3C 5B                                                 	cmp	al,'['
00012DA1: 0F 85 97 DB FE FF                                     	jne	invalid_operand
00012DA7: E8 E4 DF FF FF                                        	call	get_address
00012DAC: 80 0D A5 A2 01 00 20                                  	or	[operand_flags],20h
00012DB3: E8 19 00 00 00                                        	call	avx512_pmov_common
00012DB8: 08 C0                                                 	or	al,al
00012DBA: 0F 84 64 87 FF FF                                     	jz	instruction_ready
00012DC0: 3A 05 B5 A2 01 00                                     	cmp	al,[mmx_size]
00012DC6: 0F 85 7C DB FE FF                                     	jne	invalid_operand_size
00012DCC: E9 53 87 FF FF                                        	jmp	instruction_ready
                                                                      avx512_pmov_common:
00012DD1: E8 06 ED FF FF                                        	call	take_avx512_mask
00012DD6: 30 C0                                                 	xor	al,al
00012DD8: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
00012DDE: 50                                                    	push	eax
00012DDF: AC                                                    	lods	byte [esi]
00012DE0: 3C 2C                                                 	cmp	al,','
00012DE2: 0F 85 56 DB FE FF                                     	jne	invalid_operand
00012DE8: E8 50 13 00 00                                        	call	take_avx_register
00012DED: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00012DF2: 88 E0                                                 	mov	al,ah
00012DF4: 88 CC                                                 	mov	ah,cl
00012DF6: 0F BC C8                                              	bsf	ecx,eax
00012DF9: 80 E9 04                                              	sub	cl,4
00012DFC: D2 25 B5 A2 01 00                                     	shl	[mmx_size],cl
00012E02: 88 E1                                                 	mov	cl,ah
00012E04: 58                                                    	pop	eax
00012E05: C3                                                    	ret
                                                                      avx512_pmov_reg:
00012E06: AC                                                    	lods	byte [esi]
00012E07: E8 40 13 00 00                                        	call	convert_avx_register
00012E0C: 88 C3                                                 	mov	bl,al
00012E0E: E8 BE FF FF FF                                        	call	avx512_pmov_common
00012E13: 3A 05 B5 A2 01 00                                     	cmp	al,[mmx_size]
00012E19: 0F 84 E0 88 FF FF                                     	je	nomem_instruction_ready
00012E1F: 0F 82 23 DB FE FF                                     	jb	invalid_operand_size
00012E25: 3C 10                                                 	cmp	al,16
00012E27: 0F 85 1B DB FE FF                                     	jne	invalid_operand_size
00012E2D: E9 CD 88 FF FF                                        	jmp	nomem_instruction_ready
                                                                
                                                                avx_broadcast_128_instruction_noevex:
00012E32: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00012E39: B1 10                                                 	mov	cl,10h
00012E3B: EB 4D                                                 	jmp	avx_broadcast_instruction
                                                                avx512_broadcast_32x2_instruction:
00012E3D: B1 08                                                 	mov	cl,08h
00012E3F: EB 15                                                 	jmp	avx_broadcast_instruction_evex
                                                                avx512_broadcast_32x4_instruction:
00012E41: B1 10                                                 	mov	cl,10h
00012E43: EB 11                                                 	jmp	avx_broadcast_instruction_evex
                                                                avx512_broadcast_32x8_instruction:
00012E45: B1 20                                                 	mov	cl,20h
00012E47: EB 0D                                                 	jmp	avx_broadcast_instruction_evex
                                                                avx512_broadcast_64x2_instruction:
00012E49: B1 10                                                 	mov	cl,10h
00012E4B: EB 02                                                 	jmp	avx_broadcast_instruction_w1_evex
                                                                avx512_broadcast_64x4_instruction:
00012E4D: B1 20                                                 	mov	cl,20h
                                                                      avx_broadcast_instruction_w1_evex:
00012E4F: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                      avx_broadcast_instruction_evex:
00012E56: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00012E5D: EB 2B                                                 	jmp	avx_broadcast_instruction
                                                                avx_broadcastss_instruction:
00012E5F: B1 04                                                 	mov	cl,4
00012E61: EB 27                                                 	jmp	avx_broadcast_instruction
                                                                avx_broadcastsd_instruction:
00012E63: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
00012E6A: B1 08                                                 	mov	cl,8
00012E6C: EB 1C                                                 	jmp	avx_broadcast_instruction
                                                                avx_pbroadcastb_instruction:
00012E6E: B1 01                                                 	mov	cl,1
00012E70: EB 11                                                 	jmp	avx_broadcast_pi_instruction
                                                                avx_pbroadcastw_instruction:
00012E72: B1 02                                                 	mov	cl,2
00012E74: EB 0D                                                 	jmp	avx_broadcast_pi_instruction
                                                                avx_pbroadcastd_instruction:
00012E76: B1 04                                                 	mov	cl,4
00012E78: EB 09                                                 	jmp	avx_broadcast_pi_instruction
                                                                avx_pbroadcastq_instruction:
00012E7A: B1 08                                                 	mov	cl,8
00012E7C: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
                                                                      avx_broadcast_pi_instruction:
00012E83: 80 0D A5 A2 01 00 40                                  	or	[operand_flags],40h
                                                                      avx_broadcast_instruction:
00012E8A: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00012E91: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00012E96: B0 38                                                 	mov	al,38h
00012E98: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
00012E9E: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00012EA5: A2 B0 A2 01 00                                        	mov	[extended_code],al
00012EAA: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
00012EB1: E8 87 12 00 00                                        	call	take_avx_register
00012EB6: 3A 25 B5 A2 01 00                                     	cmp	ah,[mmx_size]
00012EBC: 0F 84 86 DA FE FF                                     	je	invalid_operand_size
00012EC2: F6 05 A5 A2 01 00 40                                  	test	[operand_flags],40h
00012EC9: 75 1B                                                 	jnz	avx_broadcast_destination_size_ok
00012ECB: 80 3D B5 A2 01 00 04                                  	cmp	[mmx_size],4
00012ED2: 74 12                                                 	je	avx_broadcast_destination_size_ok
00012ED4: 80 3D B1 A2 01 00 59                                  	cmp	[supplemental_code],59h
00012EDB: 74 09                                                 	je	avx_broadcast_destination_size_ok
00012EDD: 80 FC 10                                              	cmp	ah,16
00012EE0: 0F 84 62 DA FE FF                                     	je	invalid_operand_size
                                                                      avx_broadcast_destination_size_ok:
00012EE6: 30 E4                                                 	xor	ah,ah
00012EE8: 86 25 A4 A2 01 00                                     	xchg	ah,[operand_size]
00012EEE: 50                                                    	push	eax
00012EEF: E8 E8 EB FF FF                                        	call	take_avx512_mask
00012EF4: AC                                                    	lods	byte [esi]
00012EF5: 3C 2C                                                 	cmp	al,','
00012EF7: 0F 85 41 DA FE FF                                     	jne	invalid_operand
00012EFD: AC                                                    	lods	byte [esi]
00012EFE: E8 31 DE FF FF                                        	call	get_size_operator
00012F03: 3C 10                                                 	cmp	al,10h
00012F05: 74 40                                                 	je	avx_broadcast_reg_reg
00012F07: 3C 5B                                                 	cmp	al,'['
00012F09: 0F 85 2F DA FE FF                                     	jne	invalid_operand
00012F0F: E8 7C DE FF FF                                        	call	get_address
00012F14: 58                                                    	pop	eax
00012F15: 86 25 A4 A2 01 00                                     	xchg	ah,[operand_size]
00012F1B: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00012F20: A0 AD A2 01 00                                        	mov	al,[broadcast_size]
00012F25: A0 B5 A2 01 00                                        	mov	al,[mmx_size]
00012F2A: 38 E0                                                 	cmp	al,ah
00012F2C: 0F 84 F2 85 FF FF                                     	je	instruction_ready
00012F32: 08 C0                                                 	or	al,al
00012F34: 0F 84 EA 85 FF FF                                     	jz	instruction_ready
00012F3A: 08 E4                                                 	or	ah,ah
00012F3C: 0F 84 E2 85 FF FF                                     	jz	instruction_ready
00012F42: E9 01 DA FE FF                                        	jmp	invalid_operand_size
                                                                      avx_broadcast_reg_reg:
00012F47: AC                                                    	lods	byte [esi]
00012F48: F6 05 A5 A2 01 00 40                                  	test	[operand_flags],40h
00012F4F: 74 0C                                                 	jz	avx_broadcast_reg_avx_reg
00012F51: 3C 60                                                 	cmp	al,60h
00012F53: 72 47                                                 	jb	avx_broadcast_reg_general_reg
00012F55: 3C 80                                                 	cmp	al,80h
00012F57: 72 04                                                 	jb	avx_broadcast_reg_avx_reg
00012F59: 3C C0                                                 	cmp	al,0C0h
00012F5B: 72 3F                                                 	jb	avx_broadcast_reg_general_reg
                                                                      avx_broadcast_reg_avx_reg:
00012F5D: E8 EA 11 00 00                                        	call	convert_avx_register
00012F62: 88 C3                                                 	mov	bl,al
00012F64: A0 B5 A2 01 00                                        	mov	al,[mmx_size]
00012F69: 08 C0                                                 	or	al,al
00012F6B: 74 11                                                 	jz	avx_broadcast_reg_avx_reg_size_ok
00012F6D: 80 FC 10                                              	cmp	ah,16
00012F70: 0F 85 D2 D9 FE FF                                     	jne	invalid_operand_size
00012F76: 38 E0                                                 	cmp	al,ah
00012F78: 0F 83 C0 D9 FE FF                                     	jae	invalid_operand
                                                                      avx_broadcast_reg_avx_reg_size_ok:
00012F7E: 58                                                    	pop	eax
00012F7F: 86 25 A4 A2 01 00                                     	xchg	ah,[operand_size]
00012F85: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00012F8A: F6 05 A9 A2 01 00 02                                  	test	[vex_required],2
00012F91: 0F 85 A7 D9 FE FF                                     	jnz	invalid_operand
00012F97: E9 63 87 FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_broadcast_reg_general_reg:
00012F9C: E8 EC DC FF FF                                        	call	convert_register
00012FA1: 88 C3                                                 	mov	bl,al
00012FA3: A0 B5 A2 01 00                                        	mov	al,[mmx_size]
00012FA8: 08 C0                                                 	or	al,al
00012FAA: 74 13                                                 	jz	avx_broadcast_reg_general_reg_size_ok
00012FAC: 38 E0                                                 	cmp	al,ah
00012FAE: 74 0F                                                 	je	avx_broadcast_reg_general_reg_size_ok
00012FB0: 0F 87 92 D9 FE FF                                     	ja	invalid_operand_size
00012FB6: 80 FC 04                                              	cmp	ah,4
00012FB9: 0F 85 89 D9 FE FF                                     	jne	invalid_operand_size
                                                                      avx_broadcast_reg_general_reg_size_ok:
00012FBF: 3C 04                                                 	cmp	al,4
00012FC1: 72 0D                                                 	jb	avx_broadcast_reg_general_reg_ready
00012FC3: 3C 08                                                 	cmp	al,8
00012FC5: B0 03                                                 	mov	al,3
00012FC7: 75 07                                                 	jne	avx_broadcast_reg_general_reg_ready
00012FC9: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                      avx_broadcast_reg_general_reg_ready:
00012FD0: 04 79                                                 	add	al,7Ah-1
00012FD2: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00012FD7: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00012FDE: 58                                                    	pop	eax
00012FDF: 86 25 A4 A2 01 00                                     	xchg	ah,[operand_size]
00012FE5: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00012FEA: E9 10 87 FF FF                                        	jmp	nomem_instruction_ready
                                                                
                                                                avx512_extract_64x4_instruction:
00012FEF: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_extract_32x8_instruction:
00012FF6: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00012FFD: B1 20                                                 	mov	cl,32
00012FFF: EB 1B                                                 	jmp	avx_extractf_instruction
                                                                avx512_extract_64x2_instruction:
00013001: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_extract_32x4_instruction:
00013008: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
0001300F: B1 10                                                 	mov	cl,16
00013011: EB 09                                                 	jmp	avx_extractf_instruction
                                                                avx_extractf128_instruction:
00013013: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
0001301A: B1 10                                                 	mov	cl,16
                                                                      avx_extractf_instruction:
0001301C: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
00013022: E8 1E CA FF FF                                        	call	setup_66_0f_3a
00013027: AC                                                    	lods	byte [esi]
00013028: E8 07 DD FF FF                                        	call	get_size_operator
0001302D: 3C 10                                                 	cmp	al,10h
0001302F: 74 4E                                                 	je	avx_extractf_reg
00013031: 3C 5B                                                 	cmp	al,'['
00013033: 0F 85 05 D9 FE FF                                     	jne	invalid_operand
00013039: E8 52 DD FF FF                                        	call	get_address
0001303E: 30 C0                                                 	xor	al,al
00013040: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
00013046: 08 C0                                                 	or	al,al
00013048: 74 0C                                                 	jz	avx_extractf_mem_size_ok
0001304A: 3A 05 B5 A2 01 00                                     	cmp	al,[mmx_size]
00013050: 0F 85 F2 D8 FE FF                                     	jne	invalid_operand_size
                                                                      avx_extractf_mem_size_ok:
00013056: E8 81 EA FF FF                                        	call	take_avx512_mask
0001305B: AC                                                    	lods	byte [esi]
0001305C: 3C 2C                                                 	cmp	al,','
0001305E: 0F 85 DA D8 FE FF                                     	jne	invalid_operand
00013064: E8 D4 10 00 00                                        	call	take_avx_register
00013069: 3A 25 B5 A2 01 00                                     	cmp	ah,[mmx_size]
0001306F: 0F 86 D3 D8 FE FF                                     	jbe	invalid_operand_size
00013075: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0001307A: E9 10 BC FF FF                                        	jmp	mmx_imm8
                                                                      avx_extractf_reg:
0001307F: AC                                                    	lods	byte [esi]
00013080: E8 C7 10 00 00                                        	call	convert_avx_register
00013085: 3A 25 B5 A2 01 00                                     	cmp	ah,[mmx_size]
0001308B: 0F 85 B7 D8 FE FF                                     	jne	invalid_operand_size
00013091: 50                                                    	push	eax
00013092: E8 45 EA FF FF                                        	call	take_avx512_mask
00013097: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0001309E: AC                                                    	lods	byte [esi]
0001309F: 3C 2C                                                 	cmp	al,','
000130A1: 0F 85 97 D8 FE FF                                     	jne	invalid_operand
000130A7: E8 91 10 00 00                                        	call	take_avx_register
000130AC: 3A 25 B5 A2 01 00                                     	cmp	ah,[mmx_size]
000130B2: 0F 86 90 D8 FE FF                                     	jbe	invalid_operand_size
000130B8: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000130BD: 5B                                                    	pop	ebx
000130BE: E9 14 BC FF FF                                        	jmp	mmx_nomem_imm8
                                                                avx512_insert_64x4_instruction:
000130C3: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_insert_32x8_instruction:
000130CA: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
000130D1: B1 20                                                 	mov	cl,32
000130D3: EB 1B                                                 	jmp	avx_insertf_instruction
                                                                avx512_insert_64x2_instruction:
000130D5: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx512_insert_32x4_instruction:
000130DC: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
000130E3: B1 10                                                 	mov	cl,16
000130E5: EB 09                                                 	jmp	avx_insertf_instruction
                                                                avx_insertf128_instruction:
000130E7: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
000130EE: B1 10                                                 	mov	cl,16
                                                                      avx_insertf_instruction:
000130F0: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
000130F6: C6 05 AD A2 01 00 00                                  	mov	[broadcast_size],0
000130FD: E8 43 C9 FF FF                                        	call	setup_66_0f_3a
00013102: E8 36 10 00 00                                        	call	take_avx_register
00013107: 3A 25 B5 A2 01 00                                     	cmp	ah,[mmx_size]
0001310D: 0F 86 2B D8 FE FF                                     	jbe	invalid_operand
00013113: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00013118: E8 BF E9 FF FF                                        	call	take_avx512_mask
0001311D: AC                                                    	lods	byte [esi]
0001311E: 3C 2C                                                 	cmp	al,','
00013120: 0F 85 18 D8 FE FF                                     	jne	invalid_operand
00013126: E8 12 10 00 00                                        	call	take_avx_register
0001312B: A2 AA A2 01 00                                        	mov	[vex_register],al
00013130: A0 B5 A2 01 00                                        	mov	al,[mmx_size]
00013135: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
0001313B: 50                                                    	push	eax
0001313C: AC                                                    	lods	byte [esi]
0001313D: 3C 2C                                                 	cmp	al,','
0001313F: 0F 85 F9 D7 FE FF                                     	jne	invalid_operand
00013145: AC                                                    	lods	byte [esi]
00013146: E8 E9 DB FF FF                                        	call	get_size_operator
0001314B: 3C 10                                                 	cmp	al,10h
0001314D: 74 18                                                 	je	avx_insertf_reg_reg_reg
0001314F: 3C 5B                                                 	cmp	al,'['
00013151: 0F 85 E7 D7 FE FF                                     	jne	invalid_operand
00013157: E8 34 DC FF FF                                        	call	get_address
0001315C: 58                                                    	pop	eax
0001315D: A2 A4 A2 01 00                                        	mov	[operand_size],al
00013162: E9 28 BB FF FF                                        	jmp	mmx_imm8
                                                                      avx_insertf_reg_reg_reg:
00013167: AC                                                    	lods	byte [esi]
00013168: E8 DF 0F 00 00                                        	call	convert_avx_register
0001316D: 88 C3                                                 	mov	bl,al
0001316F: 58                                                    	pop	eax
00013170: A2 A4 A2 01 00                                        	mov	[operand_size],al
00013175: E9 5D BB FF FF                                        	jmp	mmx_nomem_imm8
                                                                avx_extract_b_instruction:
0001317A: B1 01                                                 	mov	cl,1
0001317C: EB 11                                                 	jmp	avx_extract_instruction
                                                                avx_extract_w_instruction:
0001317E: B1 02                                                 	mov	cl,2
00013180: EB 0D                                                 	jmp	avx_extract_instruction
                                                                avx_extract_q_instruction:
00013182: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
00013189: B1 08                                                 	mov	cl,8
0001318B: EB 02                                                 	jmp	avx_extract_instruction
                                                                avx_extract_d_instruction:
0001318D: B1 04                                                 	mov	cl,4
                                                                      avx_extract_instruction:
0001318F: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
00013195: E8 AB C8 FF FF                                        	call	setup_66_0f_3a
0001319A: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
000131A1: AC                                                    	lods	byte [esi]
000131A2: E8 8D DB FF FF                                        	call	get_size_operator
000131A7: 3C 10                                                 	cmp	al,10h
000131A9: 74 50                                                 	je	avx_extractps_reg
000131AB: 3C 5B                                                 	cmp	al,'['
000131AD: 0F 85 8B D7 FE FF                                     	jne	invalid_operand
000131B3: E8 D8 DB FF FF                                        	call	get_address
000131B8: A0 B5 A2 01 00                                        	mov	al,[mmx_size]
000131BD: F6 D0                                                 	not	al
000131BF: 20 05 A4 A2 01 00                                     	and	[operand_size],al
000131C5: 0F 85 7D D7 FE FF                                     	jnz	invalid_operand_size
000131CB: AC                                                    	lods	byte [esi]
000131CC: 3C 2C                                                 	cmp	al,','
000131CE: 0F 85 6A D7 FE FF                                     	jne	invalid_operand
000131D4: AC                                                    	lods	byte [esi]
000131D5: E8 5A DB FF FF                                        	call	get_size_operator
000131DA: 3C 10                                                 	cmp	al,10h
000131DC: 0F 85 5C D7 FE FF                                     	jne	invalid_operand
000131E2: AC                                                    	lods	byte [esi]
000131E3: E8 64 0F 00 00                                        	call	convert_avx_register
000131E8: 80 FC 10                                              	cmp	ah,16
000131EB: 0F 85 57 D7 FE FF                                     	jne	invalid_operand_size
000131F1: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000131F6: E9 94 BA FF FF                                        	jmp	mmx_imm8
                                                                      avx_extractps_reg:
000131FB: AC                                                    	lods	byte [esi]
000131FC: E8 8C DA FF FF                                        	call	convert_register
00013201: 88 C3                                                 	mov	bl,al
00013203: A0 B5 A2 01 00                                        	mov	al,[mmx_size]
00013208: 38 C4                                                 	cmp	ah,al
0001320A: 0F 82 38 D7 FE FF                                     	jb	invalid_operand_size
00013210: 80 FC 04                                              	cmp	ah,4
00013213: 74 21                                                 	je	avx_extractps_reg_size_ok
00013215: 80 FC 08                                              	cmp	ah,8
00013218: 0F 85 2A D7 FE FF                                     	jne	invalid_operand_size
0001321E: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00013225: 0F 85 13 D7 FE FF                                     	jne	invalid_operand
0001322B: 3C 04                                                 	cmp	al,4
0001322D: 73 07                                                 	jae	avx_extractps_reg_size_ok
0001322F: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                      avx_extractps_reg_size_ok:
00013236: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
0001323D: AC                                                    	lods	byte [esi]
0001323E: 3C 2C                                                 	cmp	al,','
00013240: 0F 85 F8 D6 FE FF                                     	jne	invalid_operand
00013246: AC                                                    	lods	byte [esi]
00013247: E8 E8 DA FF FF                                        	call	get_size_operator
0001324C: 3C 10                                                 	cmp	al,10h
0001324E: 0F 85 EA D6 FE FF                                     	jne	invalid_operand
00013254: AC                                                    	lods	byte [esi]
00013255: E8 F2 0E 00 00                                        	call	convert_avx_register
0001325A: 80 FC 10                                              	cmp	ah,16
0001325D: 0F 85 E5 D6 FE FF                                     	jne	invalid_operand_size
00013263: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00013268: 80 3D B1 A2 01 00 15                                  	cmp	[supplemental_code],15h
0001326F: 0F 85 62 BA FF FF                                     	jne	mmx_nomem_imm8
00013275: C6 05 B0 A2 01 00 C5                                  	mov	[extended_code],0C5h
0001327C: 86 1D B2 A2 01 00                                     	xchg	bl,[postbyte_register]
00013282: E9 50 BA FF FF                                        	jmp	mmx_nomem_imm8
                                                                avx_insertps_instruction:
00013287: C6 05 AB A2 01 00 01                                  	mov	[immediate_size],1
0001328E: 80 0D A5 A2 01 00 10                                  	or	[operand_flags],10h
00013295: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
0001329C: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
000132A1: B0 3A                                                 	mov	al,3Ah
000132A3: B1 04                                                 	mov	cl,4
000132A5: E9 3D E5 FF FF                                        	jmp	avx_instruction
                                                                avx_pinsrb_instruction:
000132AA: B1 01                                                 	mov	cl,1
000132AC: EB 1E                                                 	jmp	avx_pinsr_instruction_3a
                                                                avx_pinsrw_instruction:
000132AE: B1 02                                                 	mov	cl,2
000132B0: EB 21                                                 	jmp	avx_pinsr_instruction
                                                                avx_pinsrd_instruction:
000132B2: B1 04                                                 	mov	cl,4
000132B4: EB 16                                                 	jmp	avx_pinsr_instruction_3a
                                                                avx_pinsrq_instruction:
000132B6: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
000132BD: 0F 85 71 D6 FE FF                                     	jne	illegal_instruction
000132C3: B1 08                                                 	mov	cl,8
000132C5: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                      avx_pinsr_instruction_3a:
000132CC: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
000132D1: B0 3A                                                 	mov	al,3Ah
                                                                      avx_pinsr_instruction:
000132D3: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
000132DA: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
000132E1: A2 B0 A2 01 00                                        	mov	[extended_code],al
000132E6: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
000132EC: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
000132F3: E8 45 0E 00 00                                        	call	take_avx_register
000132F8: 80 FC 10                                              	cmp	ah,16
000132FB: 0F 85 47 D6 FE FF                                     	jne	invalid_operand_size
00013301: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00013306: AC                                                    	lods	byte [esi]
00013307: 3C 2C                                                 	cmp	al,','
00013309: 0F 85 2F D6 FE FF                                     	jne	invalid_operand
0001330F: E8 29 0E 00 00                                        	call	take_avx_register
00013314: A2 AA A2 01 00                                        	mov	[vex_register],al
00013319: E9 15 C9 FF FF                                        	jmp	pinsr_xmmreg
                                                                
                                                                avx_cvtudq2pd_instruction:
0001331E: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
                                                                avx_cvtdq2pd_instruction:
00013325: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
0001332C: B1 04                                                 	mov	cl,4
0001332E: EB 29                                                 	jmp	avx_cvt_d_instruction
                                                                avx_cvtps2qq_instruction:
00013330: 80 0D A5 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_cvttps2qq_instruction:
00013337: 80 0D A5 A2 01 00 04                                  	or	[operand_flags],4
0001333E: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00013345: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
0001334C: B1 04                                                 	mov	cl,4
0001334E: EB 09                                                 	jmp	avx_cvt_d_instruction
                                                                avx_cvtps2pd_instruction:
00013350: 80 0D A5 A2 01 00 04                                  	or	[operand_flags],4
00013357: B1 04                                                 	mov	cl,4
                                                                      avx_cvt_d_instruction:
00013359: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00013360: A2 B0 A2 01 00                                        	mov	[extended_code],al
00013365: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
0001336C: 88 0D AD A2 01 00                                     	mov	[broadcast_size],cl
00013372: E8 C6 0D 00 00                                        	call	take_avx_register
00013377: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0001337C: E8 5B E7 FF FF                                        	call	take_avx512_mask
00013381: AC                                                    	lods	byte [esi]
00013382: 3C 2C                                                 	cmp	al,','
00013384: 0F 85 B4 D5 FE FF                                     	jne	invalid_operand
0001338A: 31 C9                                                 	xor	ecx,ecx
0001338C: 86 0D A4 A2 01 00                                     	xchg	cl,[operand_size]
00013392: 88 C8                                                 	mov	al,cl
00013394: D0 E8                                                 	shr	al,1
00013396: A2 B5 A2 01 00                                        	mov	[mmx_size],al
0001339B: AC                                                    	lods	byte [esi]
0001339C: E8 93 D9 FF FF                                        	call	get_size_operator
000133A1: 3C 5B                                                 	cmp	al,'['
000133A3: 74 3E                                                 	je	avx_cvt_d_reg_mem
000133A5: 3C 10                                                 	cmp	al,10h
000133A7: 0F 85 91 D5 FE FF                                     	jne	invalid_operand
000133AD: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
000133B4: AC                                                    	lods	byte [esi]
000133B5: E8 92 0D 00 00                                        	call	convert_avx_register
000133BA: 3A 25 B5 A2 01 00                                     	cmp	ah,[mmx_size]
000133C0: 74 0F                                                 	je	avx_cvt_d_reg_reg_size_ok
000133C2: 0F 82 80 D5 FE FF                                     	jb	invalid_operand_size
000133C8: 80 FC 10                                              	cmp	ah,16
000133CB: 0F 85 77 D5 FE FF                                     	jne	invalid_operand_size
                                                                      avx_cvt_d_reg_reg_size_ok:
000133D1: 88 C3                                                 	mov	bl,al
000133D3: 88 0D A4 A2 01 00                                     	mov	[operand_size],cl
000133D9: E8 7E E7 FF FF                                        	call	take_avx512_rounding
000133DE: E9 1C 83 FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_cvt_d_reg_mem:
000133E3: E8 D2 E5 FF FF                                        	call	take_avx_mem
000133E8: E9 37 81 FF FF                                        	jmp	instruction_ready
                                                                avx_cvtpd2dq_instruction:
000133ED: 80 0D A5 A2 01 00 0C                                  	or	[operand_flags],4+8
000133F4: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
000133FB: EB 33                                                 	jmp	avx_cvt_q_instruction
                                                                avx_cvtuqq2ps_instruction:
000133FD: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
                                                                avx_cvtpd2udq_instruction:
00013404: 80 0D A5 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_cvttpd2udq_instruction:
0001340B: 80 0D A5 A2 01 00 04                                  	or	[operand_flags],4
00013412: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
00013419: EB 15                                                 	jmp	avx_cvt_q_instruction
                                                                avx_cvtpd2ps_instruction:
0001341B: 80 0D A5 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_cvttpd2dq_instruction:
00013422: 80 0D A5 A2 01 00 04                                  	or	[operand_flags],4
00013429: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                      avx_cvt_q_instruction:
00013430: C6 05 AD A2 01 00 08                                  	mov	[broadcast_size],8
00013437: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0001343E: A2 B0 A2 01 00                                        	mov	[extended_code],al
00013443: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
0001344A: 80 0D A7 A2 01 00 80                                  	or	[rex_prefix],80h
00013451: E8 E7 0C 00 00                                        	call	take_avx_register
00013456: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0001345B: 50                                                    	push	eax
0001345C: E8 7B E6 FF FF                                        	call	take_avx512_mask
00013461: AC                                                    	lods	byte [esi]
00013462: 3C 2C                                                 	cmp	al,','
00013464: 0F 85 D4 D4 FE FF                                     	jne	invalid_operand
0001346A: 30 C0                                                 	xor	al,al
0001346C: A2 A4 A2 01 00                                        	mov	[operand_size],al
00013471: A2 B5 A2 01 00                                        	mov	[mmx_size],al
00013476: E8 F8 E4 FF FF                                        	call	take_avx_rm
0001347B: 73 12                                                 	jnc	avx_cvt_q_reg_mem
0001347D: 88 C3                                                 	mov	bl,al
0001347F: 58                                                    	pop	eax
00013480: E8 15 00 00 00                                        	call	avx_cvt_q_check_size
00013485: E8 D2 E6 FF FF                                        	call	take_avx512_rounding
0001348A: E9 70 82 FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_cvt_q_reg_mem:
0001348F: 58                                                    	pop	eax
00013490: E8 05 00 00 00                                        	call	avx_cvt_q_check_size
00013495: E9 8A 80 FF FF                                        	jmp	instruction_ready
                                                                      avx_cvt_q_check_size:
0001349A: A0 A4 A2 01 00                                        	mov	al,[operand_size]
0001349F: 08 C0                                                 	or	al,al
000134A1: 74 1E                                                 	jz	avx_cvt_q_size_not_specified
000134A3: 3C 40                                                 	cmp	al,64
000134A5: 0F 87 9D D4 FE FF                                     	ja	invalid_operand_size
000134AB: D0 E8                                                 	shr	al,1
000134AD: 38 E0                                                 	cmp	al,ah
000134AF: 74 0F                                                 	je	avx_cvt_q_size_ok
000134B1: 0F 87 91 D4 FE FF                                     	ja	invalid_operand_size
000134B7: 80 FC 10                                              	cmp	ah,16
000134BA: 0F 85 88 D4 FE FF                                     	jne	invalid_operand_size
                                                                      avx_cvt_q_size_ok:
000134C0: C3                                                    	ret
                                                                      avx_cvt_q_size_not_specified:
000134C1: 80 FC 20                                              	cmp	ah,64 shr 1
000134C4: 0F 85 A4 83 FF FF                                     	jne	recoverable_unknown_size
000134CA: C6 05 A4 A2 01 00 40                                  	mov	[operand_size],64
000134D1: C3                                                    	ret
                                                                avx_cvttps2udq_instruction:
000134D2: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
000134D9: 80 0D A5 A2 01 00 06                                  	or	[operand_flags],2+4
000134E0: 66 B9 00 04                                           	mov	cx,0400h
000134E4: E9 00 E3 FF FF                                        	jmp	avx_instruction_with_broadcast
                                                                avx_cvttps2dq_instruction:
000134E9: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
000134F0: 80 0D A5 A2 01 00 06                                  	or	[operand_flags],2+4
000134F7: 66 B9 00 04                                           	mov	cx,0400h
000134FB: E9 E9 E2 FF FF                                        	jmp	avx_instruction_with_broadcast
                                                                avx_cvtph2ps_instruction:
00013500: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00013507: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
0001350C: 80 0D A5 A2 01 00 04                                  	or	[operand_flags],4
00013513: B0 38                                                 	mov	al,38h
00013515: 30 C9                                                 	xor	cl,cl
00013517: E9 3D FE FF FF                                        	jmp	avx_cvt_d_instruction
                                                                avx_cvtps2ph_instruction:
0001351C: E8 24 C5 FF FF                                        	call	setup_66_0f_3a
00013521: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
00013528: 80 0D A5 A2 01 00 04                                  	or	[operand_flags],4
0001352F: AC                                                    	lods	byte [esi]
00013530: E8 FF D7 FF FF                                        	call	get_size_operator
00013535: 3C 10                                                 	cmp	al,10h
00013537: 74 38                                                 	je	vcvtps2ph_reg
00013539: 3C 5B                                                 	cmp	al,'['
0001353B: 0F 85 FD D3 FE FF                                     	jne	invalid_operand
00013541: E8 4A D8 FF FF                                        	call	get_address
00013546: E8 91 E5 FF FF                                        	call	take_avx512_mask
0001354B: AC                                                    	lods	byte [esi]
0001354C: 3C 2C                                                 	cmp	al,','
0001354E: 0F 85 EA D3 FE FF                                     	jne	invalid_operand
00013554: D0 25 A4 A2 01 00                                     	shl	[operand_size],1
0001355A: E8 DE 0B 00 00                                        	call	take_avx_register
0001355F: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00013564: D0 EC                                                 	shr	ah,1
00013566: 88 25 B5 A2 01 00                                     	mov	[mmx_size],ah
0001356C: E9 1E B7 FF FF                                        	jmp	mmx_imm8
                                                                      vcvtps2ph_reg:
00013571: AC                                                    	lods	byte [esi]
00013572: E8 D5 0B 00 00                                        	call	convert_avx_register
00013577: 88 C3                                                 	mov	bl,al
00013579: E8 5E E5 FF FF                                        	call	take_avx512_mask
0001357E: 30 C9                                                 	xor	cl,cl
00013580: 86 0D A4 A2 01 00                                     	xchg	cl,[operand_size]
00013586: D0 E1                                                 	shl	cl,1
00013588: AC                                                    	lods	byte [esi]
00013589: 3C 2C                                                 	cmp	al,','
0001358B: 0F 85 AD D3 FE FF                                     	jne	invalid_operand
00013591: E8 A7 0B 00 00                                        	call	take_avx_register
00013596: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0001359B: 08 C9                                                 	or	cl,cl
0001359D: 74 13                                                 	jz	vcvtps2ph_reg_size_ok
0001359F: 38 E1                                                 	cmp	cl,ah
000135A1: 74 0F                                                 	je	vcvtps2ph_reg_size_ok
000135A3: 0F 82 9F D3 FE FF                                     	jb	invalid_operand_size
000135A9: 80 FC 10                                              	cmp	ah,16
000135AC: 0F 85 96 D3 FE FF                                     	jne	invalid_operand_size
                                                                      vcvtps2ph_reg_size_ok:
000135B2: E8 A5 E5 FF FF                                        	call	take_avx512_rounding
000135B7: E9 1B B7 FF FF                                        	jmp	mmx_nomem_imm8
                                                                
                                                                avx_cvtsd2usi_instruction:
000135BC: 80 0D A5 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_cvttsd2usi_instruction:
000135C3: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
000135CA: EB 07                                                 	jmp	avx_cvttsd2si_instruction
                                                                avx_cvtsd2si_instruction:
000135CC: 80 0D A5 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_cvttsd2si_instruction:
000135D3: B4 F2                                                 	mov	ah,0F2h
000135D5: B1 08                                                 	mov	cl,8
000135D7: EB 1B                                                 	jmp	avx_cvt_2si_instruction
                                                                avx_cvtss2usi_instruction:
000135D9: 80 0D A5 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_cvttss2usi_instruction:
000135E0: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
000135E7: EB 07                                                 	jmp	avx_cvttss2si_instruction
                                                                avx_cvtss2si_instruction:
000135E9: 80 0D A5 A2 01 00 08                                  	or	[operand_flags],8
                                                                avx_cvttss2si_instruction:
000135F0: B4 F3                                                 	mov	ah,0F3h
000135F2: B1 04                                                 	mov	cl,4
                                                                      avx_cvt_2si_instruction:
000135F4: 80 0D A5 A2 01 00 06                                  	or	[operand_flags],2+4
000135FB: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
00013601: C6 05 AD A2 01 00 00                                  	mov	[broadcast_size],0
00013608: 88 25 A8 A2 01 00                                     	mov	[opcode_prefix],ah
0001360E: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00013615: A2 B0 A2 01 00                                        	mov	[extended_code],al
0001361A: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
00013621: AC                                                    	lods	byte [esi]
00013622: E8 0D D7 FF FF                                        	call	get_size_operator
00013627: 3C 10                                                 	cmp	al,10h
00013629: 0F 85 0F D3 FE FF                                     	jne	invalid_operand
0001362F: AC                                                    	lods	byte [esi]
00013630: E8 58 D6 FF FF                                        	call	convert_register
00013635: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0001363A: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
00013641: 80 FC 04                                              	cmp	ah,4
00013644: 74 0E                                                 	je	avx_cvt_2si_reg
00013646: 80 FC 08                                              	cmp	ah,8
00013649: 0F 85 F9 D2 FE FF                                     	jne	invalid_operand_size
0001364F: E8 54 D8 FF FF                                        	call	operand_64bit
                                                                      avx_cvt_2si_reg:
00013654: AC                                                    	lods	byte [esi]
00013655: 3C 2C                                                 	cmp	al,','
00013657: 0F 85 E1 D2 FE FF                                     	jne	invalid_operand
0001365D: E8 11 E3 FF FF                                        	call	take_avx_rm
00013662: 0F 83 BC 7E FF FF                                     	jnc	instruction_ready
00013668: 88 C3                                                 	mov	bl,al
0001366A: E8 ED E4 FF FF                                        	call	take_avx512_rounding
0001366F: E9 8B 80 FF FF                                        	jmp	nomem_instruction_ready
                                                                avx_cvtusi2sd_instruction:
00013674: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
                                                                avx_cvtsi2sd_instruction:
0001367B: B4 F2                                                 	mov	ah,0F2h
0001367D: B1 08                                                 	mov	cl,8
0001367F: EB 0B                                                 	jmp	avx_cvtsi_instruction
                                                                avx_cvtusi2ss_instruction:
00013681: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
                                                                avx_cvtsi2ss_instruction:
00013688: B4 F3                                                 	mov	ah,0F3h
0001368A: B1 04                                                 	mov	cl,4
                                                                      avx_cvtsi_instruction:
0001368C: 80 0D A5 A2 01 00 0E                                  	or	[operand_flags],2+4+8
00013693: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
00013699: 88 25 A8 A2 01 00                                     	mov	[opcode_prefix],ah
0001369F: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
000136A6: A2 B0 A2 01 00                                        	mov	[extended_code],al
000136AB: 80 0D A9 A2 01 00 01                                  	or	[vex_required],1
000136B2: E8 86 0A 00 00                                        	call	take_avx_register
000136B7: 80 FC 10                                              	cmp	ah,16
000136BA: 0F 85 88 D2 FE FF                                     	jne	invalid_operand_size
000136C0: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000136C5: AC                                                    	lods	byte [esi]
000136C6: 3C 2C                                                 	cmp	al,','
000136C8: 0F 85 70 D2 FE FF                                     	jne	invalid_operand
000136CE: E8 6A 0A 00 00                                        	call	take_avx_register
000136D3: A2 AA A2 01 00                                        	mov	[vex_register],al
000136D8: AC                                                    	lods	byte [esi]
000136D9: 3C 2C                                                 	cmp	al,','
000136DB: 0F 85 5D D2 FE FF                                     	jne	invalid_operand
000136E1: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
000136E8: AC                                                    	lods	byte [esi]
000136E9: E8 46 D6 FF FF                                        	call	get_size_operator
000136EE: 3C 5B                                                 	cmp	al,'['
000136F0: 74 3B                                                 	je	avx_cvtsi_reg_reg_mem
000136F2: 3C 10                                                 	cmp	al,10h
000136F4: 0F 85 44 D2 FE FF                                     	jne	invalid_operand
000136FA: AC                                                    	lods	byte [esi]
000136FB: E8 8D D5 FF FF                                        	call	convert_register
00013700: 88 C3                                                 	mov	bl,al
00013702: 80 FC 04                                              	cmp	ah,4
00013705: 74 18                                                 	je	avx_cvtsi_reg_reg_reg32
00013707: 80 FC 08                                              	cmp	ah,8
0001370A: 0F 85 38 D2 FE FF                                     	jne	invalid_operand_size
00013710: E8 93 D7 FF FF                                        	call	operand_64bit
                                                                      avx_cvtsi_rounding:
00013715: E8 42 E4 FF FF                                        	call	take_avx512_rounding
0001371A: E9 E0 7F FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_cvtsi_reg_reg_reg32:
0001371F: 80 3D B5 A2 01 00 08                                  	cmp	[mmx_size],8
00013726: 75 ED                                                 	jne	avx_cvtsi_rounding
00013728: E9 D2 7F FF FF                                        	jmp	nomem_instruction_ready
                                                                      avx_cvtsi_reg_reg_mem:
0001372D: E8 5E D6 FF FF                                        	call	get_address
00013732: A0 A4 A2 01 00                                        	mov	al,[operand_size]
00013737: A2 B5 A2 01 00                                        	mov	[mmx_size],al
0001373C: 08 C0                                                 	or	al,al
0001373E: 0F 84 88 81 FF FF                                     	jz	single_mem_nosize
00013744: 3C 04                                                 	cmp	al,4
00013746: 0F 84 D8 7D FF FF                                     	je	instruction_ready
0001374C: 3C 08                                                 	cmp	al,8
0001374E: 0F 85 F4 D1 FE FF                                     	jne	invalid_operand_size
00013754: E8 4F D7 FF FF                                        	call	operand_64bit
00013759: E9 C6 7D FF FF                                        	jmp	instruction_ready
                                                                
                                                                avx_maskmov_w1_instruction:
0001375E: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                avx_maskmov_instruction:
00013765: E8 E9 C5 FF FF                                        	call	setup_66_0f_38
0001376A: C6 05 B5 A2 01 00 00                                  	mov	[mmx_size],0
00013771: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00013778: AC                                                    	lods	byte [esi]
00013779: E8 B6 D5 FF FF                                        	call	get_size_operator
0001377E: 3C 10                                                 	cmp	al,10h
00013780: 75 3F                                                 	jne	avx_maskmov_mem
00013782: AC                                                    	lods	byte [esi]
00013783: E8 C4 09 00 00                                        	call	convert_avx_register
00013788: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
0001378D: AC                                                    	lods	byte [esi]
0001378E: 3C 2C                                                 	cmp	al,','
00013790: 0F 85 A8 D1 FE FF                                     	jne	invalid_operand
00013796: E8 A2 09 00 00                                        	call	take_avx_register
0001379B: A2 AA A2 01 00                                        	mov	[vex_register],al
000137A0: AC                                                    	lods	byte [esi]
000137A1: 3C 2C                                                 	cmp	al,','
000137A3: 0F 85 95 D1 FE FF                                     	jne	invalid_operand
000137A9: AC                                                    	lods	byte [esi]
000137AA: E8 85 D5 FF FF                                        	call	get_size_operator
000137AF: 3C 5B                                                 	cmp	al,'['
000137B1: 0F 85 87 D1 FE FF                                     	jne	invalid_operand
000137B7: E8 D4 D5 FF FF                                        	call	get_address
000137BC: E9 63 7D FF FF                                        	jmp	instruction_ready
                                                                      avx_maskmov_mem:
000137C1: 3C 5B                                                 	cmp	al,'['
000137C3: 0F 85 75 D1 FE FF                                     	jne	invalid_operand
000137C9: E8 C2 D5 FF FF                                        	call	get_address
000137CE: AC                                                    	lods	byte [esi]
000137CF: 3C 2C                                                 	cmp	al,','
000137D1: 0F 85 67 D1 FE FF                                     	jne	invalid_operand
000137D7: E8 61 09 00 00                                        	call	take_avx_register
000137DC: A2 AA A2 01 00                                        	mov	[vex_register],al
000137E1: AC                                                    	lods	byte [esi]
000137E2: 3C 2C                                                 	cmp	al,','
000137E4: 0F 85 54 D1 FE FF                                     	jne	invalid_operand
000137EA: E8 4E 09 00 00                                        	call	take_avx_register
000137EF: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000137F4: 80 05 B1 A2 01 00 02                                  	add	[supplemental_code],2
000137FB: E9 24 7D FF FF                                        	jmp	instruction_ready
                                                                avx_movmskpd_instruction:
00013800: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                avx_movmskps_instruction:
00013807: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0001380E: C6 05 B0 A2 01 00 50                                  	mov	[extended_code],50h
00013815: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
0001381C: AC                                                    	lods	byte [esi]
0001381D: E8 12 D5 FF FF                                        	call	get_size_operator
00013822: 3C 10                                                 	cmp	al,10h
00013824: 0F 85 14 D1 FE FF                                     	jne	invalid_operand
0001382A: AC                                                    	lods	byte [esi]
0001382B: E8 5D D4 FF FF                                        	call	convert_register
00013830: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00013835: 80 FC 04                                              	cmp	ah,4
00013838: 74 16                                                 	je	avx_movmskps_reg_ok
0001383A: 80 FC 08                                              	cmp	ah,8
0001383D: 0F 85 05 D1 FE FF                                     	jne	invalid_operand_size
00013843: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0001384A: 0F 85 EE D0 FE FF                                     	jne	invalid_operand
                                                                      avx_movmskps_reg_ok:
00013850: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
00013857: AC                                                    	lods	byte [esi]
00013858: 3C 2C                                                 	cmp	al,','
0001385A: 0F 85 DE D0 FE FF                                     	jne	invalid_operand
00013860: E8 D8 08 00 00                                        	call	take_avx_register
00013865: 88 C3                                                 	mov	bl,al
00013867: E9 93 7E FF FF                                        	jmp	nomem_instruction_ready
                                                                avx_maskmovdqu_instruction:
0001386C: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00013873: E9 1D BD FF FF                                        	jmp	maskmovdqu_instruction
                                                                avx_pmovmskb_instruction:
00013878: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
0001387F: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
00013886: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
0001388D: A2 B0 A2 01 00                                        	mov	[extended_code],al
00013892: AC                                                    	lods	byte [esi]
00013893: E8 9C D4 FF FF                                        	call	get_size_operator
00013898: 3C 10                                                 	cmp	al,10h
0001389A: 0F 85 9E D0 FE FF                                     	jne	invalid_operand
000138A0: AC                                                    	lods	byte [esi]
000138A1: E8 E7 D3 FF FF                                        	call	convert_register
000138A6: 80 FC 04                                              	cmp	ah,4
000138A9: 74 16                                                 	je	avx_pmovmskb_reg_size_ok
000138AB: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
000138B2: 0F 85 90 D0 FE FF                                     	jne	invalid_operand_size
000138B8: 80 FC 08                                              	cmp	ah,8
000138BB: 0F 85 87 D0 FE FF                                     	jnz	invalid_operand_size
                                                                      avx_pmovmskb_reg_size_ok:
000138C1: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000138C6: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
000138CD: AC                                                    	lods	byte [esi]
000138CE: 3C 2C                                                 	cmp	al,','
000138D0: 0F 85 68 D0 FE FF                                     	jne	invalid_operand
000138D6: E8 62 08 00 00                                        	call	take_avx_register
000138DB: 88 C3                                                 	mov	bl,al
000138DD: E9 1D 7E FF FF                                        	jmp	nomem_instruction_ready
                                                                
                                                                gather_pd_instruction:
000138E2: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                gather_ps_instruction:
000138E9: E8 65 C4 FF FF                                        	call	setup_66_0f_38
000138EE: 80 0D A9 A2 01 00 04                                  	or	[vex_required],4
000138F5: 80 0D A5 A2 01 00 20                                  	or	[operand_flags],20h
000138FC: E8 3C 08 00 00                                        	call	take_avx_register
00013901: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00013906: E8 D1 E1 FF FF                                        	call	take_avx512_mask
0001390B: AC                                                    	lods	byte [esi]
0001390C: 3C 2C                                                 	cmp	al,','
0001390E: 0F 85 2A D0 FE FF                                     	jne	invalid_operand
00013914: 30 C9                                                 	xor	cl,cl
00013916: 86 0D A4 A2 01 00                                     	xchg	cl,[operand_size]
0001391C: 51                                                    	push	ecx
0001391D: AC                                                    	lods	byte [esi]
0001391E: E8 11 D4 FF FF                                        	call	get_size_operator
00013923: 3C 5B                                                 	cmp	al,'['
00013925: 0F 85 FF CF FE FF                                     	jne	invalid_argument
0001392B: E8 60 D4 FF FF                                        	call	get_address
00013930: 58                                                    	pop	eax
00013931: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
                                                                      gather_mem_size_check:
00013937: B4 04                                                 	mov	ah,4
00013939: F6 05 A7 A2 01 00 08                                  	test	[rex_prefix],8
00013940: 74 02                                                 	jz	gather_elements_size_ok
00013942: 00 E4                                                 	add	ah,ah
                                                                      gather_elements_size_ok:
00013944: 88 25 B5 A2 01 00                                     	mov	[mmx_size],ah
0001394A: 84 C0                                                 	test	al,al
0001394C: 74 08                                                 	jz	gather_mem_size_ok
0001394E: 38 E0                                                 	cmp	al,ah
00013950: 0F 85 F2 CF FE FF                                     	jne	invalid_operand_size
                                                                      gather_mem_size_ok:
00013956: 80 3E 2C                                              	cmp	byte [esi],','
00013959: 74 17                                                 	je	gather_reg_mem_reg
0001395B: F6 05 A9 A2 01 00 20                                  	test	[vex_required],20h
00013962: 0F 84 D6 CF FE FF                                     	jz	invalid_operand
00013968: 8A 25 A4 A2 01 00                                     	mov	ah,[operand_size]
0001396E: B0 80                                                 	mov	al,80h
00013970: EB 0D                                                 	jmp	gather_arguments_ok
                                                                      gather_reg_mem_reg:
00013972: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00013979: 46                                                    	inc	esi
0001397A: E8 BE 07 00 00                                        	call	take_avx_register
                                                                      gather_arguments_ok:
0001397F: A2 AA A2 01 00                                        	mov	[vex_register],al
00013984: 3A 05 B2 A2 01 00                                     	cmp	al,[postbyte_register]
0001398A: 0F 84 EA CF FE FF                                     	je	disallowed_combination_of_registers
00013990: 88 D8                                                 	mov	al,bl
00013992: 24 1F                                                 	and	al,11111b
00013994: 3A 05 B2 A2 01 00                                     	cmp	al,[postbyte_register]
0001399A: 0F 84 DA CF FE FF                                     	je	disallowed_combination_of_registers
000139A0: 3A 05 AA A2 01 00                                     	cmp	al,[vex_register]
000139A6: 0F 84 CE CF FE FF                                     	je	disallowed_combination_of_registers
000139AC: 88 D8                                                 	mov	al,bl
000139AE: C0 E8 05                                              	shr	al,5
000139B1: 3C 06                                                 	cmp	al,0Ch shr 1
000139B3: 74 4D                                                 	je	gather_vr128
000139B5: B4 20                                                 	mov	ah,32
000139B7: 3C 03                                                 	cmp	al,6 shr 1
000139B9: 75 02                                                 	jne	gather_regular
000139BB: 00 E4                                                 	add	ah,ah
                                                                      gather_regular:
000139BD: A0 A7 A2 01 00                                        	mov	al,[rex_prefix]
000139C2: C0 E8 03                                              	shr	al,3
000139C5: 32 05 B1 A2 01 00                                     	xor	al,[supplemental_code]
000139CB: A8 01                                                 	test	al,1
000139CD: 74 22                                                 	jz	gather_uniform
000139CF: F6 05 B1 A2 01 00 01                                  	test	[supplemental_code],1
000139D6: 74 17                                                 	jz	gather_double
000139D8: 88 E0                                                 	mov	al,ah
000139DA: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
000139E0: 00 C0                                                 	add	al,al
000139E2: 38 E0                                                 	cmp	al,ah
000139E4: 0F 85 5E CF FE FF                                     	jne	invalid_operand_size
000139EA: E9 35 7B FF FF                                        	jmp	instruction_ready
                                                                      gather_double:
000139EF: 00 E4                                                 	add	ah,ah
                                                                      gather_uniform:
000139F1: 3A 25 A4 A2 01 00                                     	cmp	ah,[operand_size]
000139F7: 0F 85 4B CF FE FF                                     	jne	invalid_operand_size
000139FD: E9 22 7B FF FF                                        	jmp	instruction_ready
                                                                      gather_vr128:
00013A02: 80 FC 10                                              	cmp	ah,16
00013A05: 0F 84 19 7B FF FF                                     	je	instruction_ready
00013A0B: 80 FC 20                                              	cmp	ah,32
00013A0E: 0F 85 34 CF FE FF                                     	jne	invalid_operand_size
00013A14: F6 05 B1 A2 01 00 01                                  	test	[supplemental_code],1
00013A1B: 0F 85 27 CF FE FF                                     	jnz	invalid_operand_size
00013A21: F6 05 A7 A2 01 00 08                                  	test	[rex_prefix],8
00013A28: 0F 84 1A CF FE FF                                     	jz	invalid_operand_size
00013A2E: E9 F1 7A FF FF                                        	jmp	instruction_ready
                                                                scatter_pd_instruction:
00013A33: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                scatter_ps_instruction:
00013A3A: E8 14 C3 FF FF                                        	call	setup_66_0f_38
00013A3F: 80 0D A9 A2 01 00 0C                                  	or	[vex_required],4+8
00013A46: 80 0D A5 A2 01 00 20                                  	or	[operand_flags],20h
00013A4D: AC                                                    	lods	byte [esi]
00013A4E: E8 E1 D2 FF FF                                        	call	get_size_operator
00013A53: 3C 5B                                                 	cmp	al,'['
00013A55: 0F 85 CF CE FE FF                                     	jne	invalid_argument
00013A5B: E8 30 D3 FF FF                                        	call	get_address
00013A60: E8 77 E0 FF FF                                        	call	take_avx512_mask
00013A65: AC                                                    	lods	byte [esi]
00013A66: 3C 2C                                                 	cmp	al,','
00013A68: 0F 85 D0 CE FE FF                                     	jne	invalid_operand
00013A6E: 30 C0                                                 	xor	al,al
00013A70: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
00013A76: 50                                                    	push	eax
00013A77: E8 C1 06 00 00                                        	call	take_avx_register
00013A7C: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00013A81: 58                                                    	pop	eax
00013A82: E9 B0 FE FF FF                                        	jmp	gather_mem_size_check
                                                                gatherpf_qpd_instruction:
00013A87: B4 C7                                                 	mov	ah,0C7h
00013A89: EB 02                                                 	jmp	gatherpf_pd_instruction
                                                                gatherpf_dpd_instruction:
00013A8B: B4 C6                                                 	mov	ah,0C6h
                                                                      gatherpf_pd_instruction:
00013A8D: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
00013A94: B1 08                                                 	mov	cl,8
00013A96: EB 08                                                 	jmp	gatherpf_instruction
                                                                gatherpf_qps_instruction:
00013A98: B4 C7                                                 	mov	ah,0C7h
00013A9A: EB 02                                                 	jmp	gatherpf_ps_instruction
                                                                gatherpf_dps_instruction:
00013A9C: B4 C6                                                 	mov	ah,0C6h
                                                                      gatherpf_ps_instruction:
00013A9E: B1 04                                                 	mov	cl,4
                                                                      gatherpf_instruction:
00013AA0: 88 0D B5 A2 01 00                                     	mov	[mmx_size],cl
00013AA6: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00013AAB: 88 E0                                                 	mov	al,ah
00013AAD: E8 A1 C2 FF FF                                        	call	setup_66_0f_38
00013AB2: 80 0D A9 A2 01 00 0C                                  	or	[vex_required],4+8
00013AB9: 80 0D A5 A2 01 00 20                                  	or	[operand_flags],20h
00013AC0: AC                                                    	lods	byte [esi]
00013AC1: E8 6E D2 FF FF                                        	call	get_size_operator
00013AC6: 3C 5B                                                 	cmp	al,'['
00013AC8: 0F 85 5C CE FE FF                                     	jne	invalid_argument
00013ACE: E8 BD D2 FF FF                                        	call	get_address
00013AD3: E8 04 E0 FF FF                                        	call	take_avx512_mask
00013AD8: 8A 25 B5 A2 01 00                                     	mov	ah,[mmx_size]
00013ADE: A0 A4 A2 01 00                                        	mov	al,[operand_size]
00013AE3: 08 C0                                                 	or	al,al
00013AE5: 74 08                                                 	jz	gatherpf_mem_size_ok
00013AE7: 38 E0                                                 	cmp	al,ah
00013AE9: 0F 85 59 CE FE FF                                     	jne	invalid_operand_size
                                                                      gatherpf_mem_size_ok:
00013AEF: C6 05 A4 A2 01 00 40                                  	mov	[operand_size],64
00013AF6: B0 03                                                 	mov	al,6 shr 1
00013AF8: 80 FC 04                                              	cmp	ah,4
00013AFB: 74 0B                                                 	je	gatherpf_check_vsib
00013AFD: 80 3D B1 A2 01 00 C6                                  	cmp	[supplemental_code],0C6h
00013B04: 75 02                                                 	jne	gatherpf_check_vsib
00013B06: B0 07                                                 	mov	al,0Eh shr 1
                                                                      gatherpf_check_vsib:
00013B08: 88 DC                                                 	mov	ah,bl
00013B0A: C0 EC 05                                              	shr	ah,5
00013B0D: 38 E0                                                 	cmp	al,ah
00013B0F: 0F 85 29 CE FE FF                                     	jne	invalid_operand
00013B15: E9 0A 7A FF FF                                        	jmp	instruction_ready
                                                                
                                                                bmi_instruction:
00013B1A: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00013B21: C6 05 B0 A2 01 00 38                                  	mov	[extended_code],38h
00013B28: C6 05 B1 A2 01 00 F3                                  	mov	[supplemental_code],0F3h
00013B2F: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
                                                                      bmi_reg:
00013B34: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00013B3B: AC                                                    	lods	byte [esi]
00013B3C: E8 F3 D1 FF FF                                        	call	get_size_operator
00013B41: 3C 10                                                 	cmp	al,10h
00013B43: 0F 85 F5 CD FE FF                                     	jne	invalid_operand
00013B49: AC                                                    	lods	byte [esi]
00013B4A: E8 3E D1 FF FF                                        	call	convert_register
00013B4F: A2 AA A2 01 00                                        	mov	[vex_register],al
00013B54: AC                                                    	lods	byte [esi]
00013B55: 3C 2C                                                 	cmp	al,','
00013B57: 0F 85 E1 CD FE FF                                     	jne	invalid_operand
00013B5D: AC                                                    	lods	byte [esi]
00013B5E: E8 D1 D1 FF FF                                        	call	get_size_operator
00013B63: 3C 10                                                 	cmp	al,10h
00013B65: 74 17                                                 	je	bmi_reg_reg
00013B67: 3C 5B                                                 	cmp	al,'['
00013B69: 0F 85 BB CD FE FF                                     	jne	invalid_argument
00013B6F: E8 1C D2 FF FF                                        	call	get_address
00013B74: E8 17 00 00 00                                        	call	operand_32or64
00013B79: E9 A6 79 FF FF                                        	jmp	instruction_ready
                                                                      bmi_reg_reg:
00013B7E: AC                                                    	lods	byte [esi]
00013B7F: E8 09 D1 FF FF                                        	call	convert_register
00013B84: 88 C3                                                 	mov	bl,al
00013B86: E8 05 00 00 00                                        	call	operand_32or64
00013B8B: E9 6F 7B FF FF                                        	jmp	nomem_instruction_ready
                                                                      operand_32or64:
00013B90: A0 A4 A2 01 00                                        	mov	al,[operand_size]
00013B95: 3C 04                                                 	cmp	al,4
00013B97: 74 1C                                                 	je	operand_32or64_ok
00013B99: 3C 08                                                 	cmp	al,8
00013B9B: 0F 85 A7 CD FE FF                                     	jne	invalid_operand_size
00013BA1: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00013BA8: 0F 85 90 CD FE FF                                     	jne	invalid_operand
00013BAE: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
                                                                      operand_32or64_ok:
00013BB5: C3                                                    	ret
                                                                pdep_instruction:
00013BB6: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
00013BBD: EB 07                                                 	jmp	andn_instruction
                                                                pext_instruction:
00013BBF: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
                                                                andn_instruction:
00013BC6: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00013BCD: C6 05 B0 A2 01 00 38                                  	mov	[extended_code],38h
00013BD4: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00013BD9: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00013BE0: AC                                                    	lods	byte [esi]
00013BE1: E8 4E D1 FF FF                                        	call	get_size_operator
00013BE6: 3C 10                                                 	cmp	al,10h
00013BE8: 0F 85 50 CD FE FF                                     	jne	invalid_operand
00013BEE: AC                                                    	lods	byte [esi]
00013BEF: E8 99 D0 FF FF                                        	call	convert_register
00013BF4: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00013BF9: AC                                                    	lods	byte [esi]
00013BFA: 3C 2C                                                 	cmp	al,','
00013BFC: 0F 85 3C CD FE FF                                     	jne	invalid_operand
00013C02: E9 2D FF FF FF                                        	jmp	bmi_reg
                                                                sarx_instruction:
00013C07: C6 05 A8 A2 01 00 F3                                  	mov	[opcode_prefix],0F3h
00013C0E: EB 10                                                 	jmp	bzhi_instruction
                                                                shrx_instruction:
00013C10: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
00013C17: EB 07                                                 	jmp	bzhi_instruction
                                                                shlx_instruction:
00013C19: C6 05 A8 A2 01 00 66                                  	mov	[opcode_prefix],66h
                                                                bzhi_instruction:
00013C20: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00013C27: C6 05 B0 A2 01 00 38                                  	mov	[extended_code],38h
00013C2E: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00013C33: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00013C3A: E8 0A 97 FF FF                                        	call	get_reg_mem
00013C3F: 72 15                                                 	jc	bzhi_reg_reg
00013C41: E8 25 00 00 00                                        	call	get_vex_source_register
00013C46: 0F 82 F2 CC FE FF                                     	jc	invalid_operand
00013C4C: E8 3F FF FF FF                                        	call	operand_32or64
00013C51: E9 CE 78 FF FF                                        	jmp	instruction_ready
                                                                      bzhi_reg_reg:
00013C56: E8 10 00 00 00                                        	call	get_vex_source_register
00013C5B: 0F 82 DD CC FE FF                                     	jc	invalid_operand
00013C61: E8 2A FF FF FF                                        	call	operand_32or64
00013C66: E9 94 7A FF FF                                        	jmp	nomem_instruction_ready
                                                                      get_vex_source_register:
00013C6B: AC                                                    	lods	byte [esi]
00013C6C: 3C 2C                                                 	cmp	al,','
00013C6E: 0F 85 CA CC FE FF                                     	jne	invalid_operand
00013C74: AC                                                    	lods	byte [esi]
00013C75: E8 BA D0 FF FF                                        	call	get_size_operator
00013C7A: 3C 10                                                 	cmp	al,10h
00013C7C: 75 0D                                                 	jne	no_vex_source_register
00013C7E: AC                                                    	lods	byte [esi]
00013C7F: E8 09 D0 FF FF                                        	call	convert_register
00013C84: A2 AA A2 01 00                                        	mov	[vex_register],al
00013C89: F8                                                    	clc
00013C8A: C3                                                    	ret
                                                                      no_vex_source_register:
00013C8B: F9                                                    	stc
00013C8C: C3                                                    	ret
                                                                bextr_instruction:
00013C8D: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00013C94: C6 05 B0 A2 01 00 38                                  	mov	[extended_code],38h
00013C9B: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00013CA0: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00013CA7: E8 9D 96 FF FF                                        	call	get_reg_mem
00013CAC: 72 11                                                 	jc	bextr_reg_reg
00013CAE: E8 B8 FF FF FF                                        	call	get_vex_source_register
00013CB3: 72 2F                                                 	jc	bextr_reg_mem_imm32
00013CB5: E8 D6 FE FF FF                                        	call	operand_32or64
00013CBA: E9 65 78 FF FF                                        	jmp	instruction_ready
                                                                      bextr_reg_reg:
00013CBF: E8 A7 FF FF FF                                        	call	get_vex_source_register
00013CC4: 72 2D                                                 	jc	bextr_reg_reg_imm32
00013CC6: E8 C5 FE FF FF                                        	call	operand_32or64
00013CCB: E9 2F 7A FF FF                                        	jmp	nomem_instruction_ready
                                                                      setup_bextr_imm_opcode:
00013CD0: C6 05 B4 A2 01 00 0A                                  	mov	[xop_opcode_map],0Ah
00013CD7: C6 05 AF A2 01 00 10                                  	mov	[base_code],10h
00013CDE: E8 AD FE FF FF                                        	call	operand_32or64
00013CE3: C3                                                    	ret
                                                                      bextr_reg_mem_imm32:
00013CE4: E8 29 00 00 00                                        	call	get_imm32
00013CE9: E8 E2 FF FF FF                                        	call	setup_bextr_imm_opcode
00013CEE: E9 AD D8 FF FF                                        	jmp	store_instruction_with_imm32
                                                                      bextr_reg_reg_imm32:
00013CF3: E8 1A 00 00 00                                        	call	get_imm32
00013CF8: E8 D3 FF FF FF                                        	call	setup_bextr_imm_opcode
                                                                      store_nomem_instruction_with_imm32:
00013CFD: E8 8E D2 FF FF                                        	call	store_nomem_instruction
00013D02: A1 00 A2 01 00                                        	mov	eax,dword [value]
00013D07: E8 E0 46 FF FF                                        	call	mark_relocation
00013D0C: AB                                                    	stos	dword [edi]
00013D0D: E9 68 12 FF FF                                        	jmp	instruction_assembled
                                                                      get_imm32:
00013D12: 3C 28                                                 	cmp	al,'('
00013D14: 0F 85 24 CC FE FF                                     	jne	invalid_operand
00013D1A: 52 53 51                                              	push	edx ebx ecx
00013D1D: E8 68 36 FF FF                                        	call	get_dword_value
00013D22: A3 00 A2 01 00                                        	mov	dword [value],eax
00013D27: 59 5B 5A                                              	pop	ecx ebx edx
00013D2A: C3                                                    	ret
                                                                rorx_instruction:
00013D2B: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
00013D32: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
00013D39: C6 05 B0 A2 01 00 3A                                  	mov	[extended_code],3Ah
00013D40: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
00013D45: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00013D4C: E8 F8 95 FF FF                                        	call	get_reg_mem
00013D51: 72 0A                                                 	jc	rorx_reg_reg
00013D53: E8 38 FE FF FF                                        	call	operand_32or64
00013D58: E9 32 AF FF FF                                        	jmp	mmx_imm8
                                                                      rorx_reg_reg:
00013D5D: E8 2E FE FF FF                                        	call	operand_32or64
00013D62: E9 70 AF FF FF                                        	jmp	mmx_nomem_imm8
                                                                
                                                                tbm_instruction:
00013D67: C6 05 B4 A2 01 00 09                                  	mov	[xop_opcode_map],9
00013D6E: 88 C4                                                 	mov	ah,al
00013D70: C0 EC 04                                              	shr	ah,4
00013D73: 24 07                                                 	and	al,111b
00013D75: 88 25 AF A2 01 00                                     	mov	[base_code],ah
00013D7B: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00013D80: E9 AF FD FF FF                                        	jmp	bmi_reg
                                                                
                                                                llwpcb_instruction:
00013D85: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00013D8C: C6 05 B4 A2 01 00 09                                  	mov	[xop_opcode_map],9
00013D93: C6 05 AF A2 01 00 12                                  	mov	[base_code],12h
00013D9A: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00013D9F: AC                                                    	lods	byte [esi]
00013DA0: E8 8F CF FF FF                                        	call	get_size_operator
00013DA5: 3C 10                                                 	cmp	al,10h
00013DA7: 0F 85 91 CB FE FF                                     	jne	invalid_operand
00013DAD: AC                                                    	lods	byte [esi]
00013DAE: E8 DA CE FF FF                                        	call	convert_register
00013DB3: 88 C3                                                 	mov	bl,al
00013DB5: E8 D6 FD FF FF                                        	call	operand_32or64
00013DBA: E9 40 79 FF FF                                        	jmp	nomem_instruction_ready
                                                                lwpins_instruction:
00013DBF: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00013DC6: C6 05 B4 A2 01 00 0A                                  	mov	[xop_opcode_map],0Ah
00013DCD: C6 05 AF A2 01 00 12                                  	mov	[base_code],12h
00013DD4: A2 AA A2 01 00                                        	mov	[vex_register],al
00013DD9: AC                                                    	lods	byte [esi]
00013DDA: E8 55 CF FF FF                                        	call	get_size_operator
00013DDF: 3C 10                                                 	cmp	al,10h
00013DE1: 0F 85 57 CB FE FF                                     	jne	invalid_operand
00013DE7: AC                                                    	lods	byte [esi]
00013DE8: E8 A0 CE FF FF                                        	call	convert_register
00013DED: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00013DF2: AC                                                    	lods	byte [esi]
00013DF3: 3C 2C                                                 	cmp	al,','
00013DF5: 0F 85 43 CB FE FF                                     	jne	invalid_operand
00013DFB: 30 C9                                                 	xor	cl,cl
00013DFD: 86 0D A4 A2 01 00                                     	xchg	cl,[operand_size]
00013E03: AC                                                    	lods	byte [esi]
00013E04: E8 2B CF FF FF                                        	call	get_size_operator
00013E09: 3C 10                                                 	cmp	al,10h
00013E0B: 74 2B                                                 	je	lwpins_reg_reg
00013E0D: 3C 5B                                                 	cmp	al,'['
00013E0F: 0F 85 15 CB FE FF                                     	jne	invalid_argument
00013E15: 51                                                    	push	ecx
00013E16: E8 75 CF FF FF                                        	call	get_address
00013E1B: 58                                                    	pop	eax
00013E1C: 86 05 A4 A2 01 00                                     	xchg	al,[operand_size]
00013E22: 84 C0                                                 	test	al,al
00013E24: 74 08                                                 	jz	lwpins_reg_mem_size_ok
00013E26: 3C 04                                                 	cmp	al,4
00013E28: 0F 85 1A CB FE FF                                     	jne	invalid_operand_size
                                                                      lwpins_reg_mem_size_ok:
00013E2E: E8 26 00 00 00                                        	call	prepare_lwpins
00013E33: E9 68 D7 FF FF                                        	jmp	store_instruction_with_imm32
                                                                      lwpins_reg_reg:
00013E38: AC                                                    	lods	byte [esi]
00013E39: E8 4F CE FF FF                                        	call	convert_register
00013E3E: 80 FC 04                                              	cmp	ah,4
00013E41: 0F 85 01 CB FE FF                                     	jne	invalid_operand_size
00013E47: 88 0D A4 A2 01 00                                     	mov	[operand_size],cl
00013E4D: 88 C3                                                 	mov	bl,al
00013E4F: E8 05 00 00 00                                        	call	prepare_lwpins
00013E54: E9 A4 FE FF FF                                        	jmp	store_nomem_instruction_with_imm32
                                                                      prepare_lwpins:
00013E59: AC                                                    	lods	byte [esi]
00013E5A: 3C 2C                                                 	cmp	al,','
00013E5C: 0F 85 DC CA FE FF                                     	jne	invalid_operand
00013E62: AC                                                    	lods	byte [esi]
00013E63: E8 AA FE FF FF                                        	call	get_imm32
00013E68: E8 23 FD FF FF                                        	call	operand_32or64
00013E6D: A0 AA A2 01 00                                        	mov	al,[vex_register]
00013E72: 86 05 B2 A2 01 00                                     	xchg	al,[postbyte_register]
00013E78: A2 AA A2 01 00                                        	mov	[vex_register],al
00013E7D: C3                                                    	ret
                                                                
                                                                xop_single_source_sd_instruction:
00013E7E: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
00013E85: C6 05 B5 A2 01 00 08                                  	mov	[mmx_size],8
00013E8C: EB 1E                                                 	jmp	xop_instruction_9
                                                                xop_single_source_ss_instruction:
00013E8E: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
00013E95: C6 05 B5 A2 01 00 04                                  	mov	[mmx_size],4
00013E9C: EB 0E                                                 	jmp	xop_instruction_9
                                                                xop_single_source_instruction:
00013E9E: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
00013EA5: C6 05 B5 A2 01 00 00                                  	mov	[mmx_size],0
                                                                      xop_instruction_9:
00013EAC: A2 AF A2 01 00                                        	mov	[base_code],al
00013EB1: C6 05 B4 A2 01 00 09                                  	mov	[xop_opcode_map],9
00013EB8: E9 44 D9 FF FF                                        	jmp	avx_xop_common
                                                                xop_single_source_128bit_instruction:
00013EBD: 80 0D A5 A2 01 00 02                                  	or	[operand_flags],2
00013EC4: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
00013ECB: EB DF                                                 	jmp	xop_instruction_9
                                                                xop_triple_source_128bit_instruction:
00013ECD: C6 05 AB A2 01 00 FF                                  	mov	[immediate_size],-1
00013ED4: C6 05 00 A2 01 00 00                                  	mov	byte [value],0
00013EDB: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
00013EE2: EB 15                                                 	jmp	xop_instruction_8
                                                                xop_128bit_instruction:
00013EE4: C6 05 AB A2 01 00 FE                                  	mov	[immediate_size],-2
00013EEB: C6 05 00 A2 01 00 00                                  	mov	byte [value],0
00013EF2: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
                                                                      xop_instruction_8:
00013EF9: A2 AF A2 01 00                                        	mov	[base_code],al
00013EFE: C6 05 B4 A2 01 00 08                                  	mov	[xop_opcode_map],8
00013F05: E9 F7 D8 FF FF                                        	jmp	avx_xop_common
                                                                xop_pcom_b_instruction:
00013F0A: B4 CC                                                 	mov	ah,0CCh
00013F0C: EB 1A                                                 	jmp	xop_pcom_instruction
                                                                xop_pcom_d_instruction:
00013F0E: B4 CE                                                 	mov	ah,0CEh
00013F10: EB 16                                                 	jmp	xop_pcom_instruction
                                                                xop_pcom_q_instruction:
00013F12: B4 CF                                                 	mov	ah,0CFh
00013F14: EB 12                                                 	jmp	xop_pcom_instruction
                                                                xop_pcom_w_instruction:
00013F16: B4 CD                                                 	mov	ah,0CDh
00013F18: EB 0E                                                 	jmp	xop_pcom_instruction
                                                                xop_pcom_ub_instruction:
00013F1A: B4 EC                                                 	mov	ah,0ECh
00013F1C: EB 0A                                                 	jmp	xop_pcom_instruction
                                                                xop_pcom_ud_instruction:
00013F1E: B4 EE                                                 	mov	ah,0EEh
00013F20: EB 06                                                 	jmp	xop_pcom_instruction
                                                                xop_pcom_uq_instruction:
00013F22: B4 EF                                                 	mov	ah,0EFh
00013F24: EB 02                                                 	jmp	xop_pcom_instruction
                                                                xop_pcom_uw_instruction:
00013F26: B4 ED                                                 	mov	ah,0EDh
                                                                      xop_pcom_instruction:
00013F28: A2 00 A2 01 00                                        	mov	byte [value],al
00013F2D: C6 05 AB A2 01 00 FC                                  	mov	[immediate_size],-4
00013F34: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
00013F3B: 88 25 AF A2 01 00                                     	mov	[base_code],ah
00013F41: C6 05 B4 A2 01 00 08                                  	mov	[xop_opcode_map],8
00013F48: E9 B4 D8 FF FF                                        	jmp	avx_xop_common
                                                                vpcmov_instruction:
00013F4D: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00013F54: C6 05 AB A2 01 00 FE                                  	mov	[immediate_size],-2
00013F5B: C6 05 00 A2 01 00 00                                  	mov	byte [value],0
00013F62: C6 05 B5 A2 01 00 00                                  	mov	[mmx_size],0
00013F69: A2 AF A2 01 00                                        	mov	[base_code],al
00013F6E: C6 05 B4 A2 01 00 08                                  	mov	[xop_opcode_map],8
00013F75: E9 87 D8 FF FF                                        	jmp	avx_xop_common
                                                                xop_shift_instruction:
00013F7A: A2 AF A2 01 00                                        	mov	[base_code],al
00013F7F: 80 0D A9 A2 01 00 02                                  	or	[vex_required],2
00013F86: C6 05 B4 A2 01 00 09                                  	mov	[xop_opcode_map],9
00013F8D: E8 AB 01 00 00                                        	call	take_avx_register
00013F92: 80 FC 10                                              	cmp	ah,16
00013F95: 0F 85 A3 C9 FE FF                                     	jne	invalid_operand
00013F9B: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
00013FA0: AC                                                    	lods	byte [esi]
00013FA1: 3C 2C                                                 	cmp	al,','
00013FA3: 0F 85 95 C9 FE FF                                     	jne	invalid_operand
00013FA9: AC                                                    	lods	byte [esi]
00013FAA: E8 85 CD FF FF                                        	call	get_size_operator
00013FAF: 3C 5B                                                 	cmp	al,'['
00013FB1: 0F 84 8C 00 00 00                                     	je	xop_shift_reg_mem
00013FB7: 3C 10                                                 	cmp	al,10h
00013FB9: 0F 85 7F C9 FE FF                                     	jne	invalid_operand
00013FBF: AC                                                    	lods	byte [esi]
00013FC0: E8 60 CD FF FF                                        	call	convert_xmm_register
00013FC5: A2 AA A2 01 00                                        	mov	[vex_register],al
00013FCA: AC                                                    	lods	byte [esi]
00013FCB: 3C 2C                                                 	cmp	al,','
00013FCD: 0F 85 6B C9 FE FF                                     	jne	invalid_operand
00013FD3: 56                                                    	push	esi
00013FD4: 30 C9                                                 	xor	cl,cl
00013FD6: 86 0D A4 A2 01 00                                     	xchg	cl,[operand_size]
00013FDC: AC                                                    	lods	byte [esi]
00013FDD: E8 52 CD FF FF                                        	call	get_size_operator
00013FE2: 5E                                                    	pop	esi
00013FE3: 86 0D A4 A2 01 00                                     	xchg	cl,[operand_size]
00013FE9: 3C 5B                                                 	cmp	al,'['
00013FEB: 74 16                                                 	je	xop_shift_reg_reg_mem
00013FED: 3C 10                                                 	cmp	al,10h
00013FEF: 75 29                                                 	jne	xop_shift_reg_reg_imm
00013FF1: E8 47 01 00 00                                        	call	take_avx_register
00013FF6: 88 C3                                                 	mov	bl,al
00013FF8: 86 1D AA A2 01 00                                     	xchg	bl,[vex_register]
00013FFE: E9 FC 76 FF FF                                        	jmp	nomem_instruction_ready
                                                                      xop_shift_reg_reg_mem:
00014003: 80 0D A7 A2 01 00 08                                  	or	[rex_prefix],8
0001400A: AC                                                    	lods	byte [esi]
0001400B: E8 24 CD FF FF                                        	call	get_size_operator
00014010: E8 7B CD FF FF                                        	call	get_address
00014015: E9 0A 75 FF FF                                        	jmp	instruction_ready
                                                                      xop_shift_reg_reg_imm:
0001401A: 30 DB                                                 	xor	bl,bl
0001401C: 86 1D AA A2 01 00                                     	xchg	bl,[vex_register]
00014022: 80 3D AF A2 01 00 94                                  	cmp	[base_code],94h
00014029: 0F 83 0F C9 FE FF                                     	jae	invalid_operand
0001402F: 80 05 AF A2 01 00 30                                  	add	[base_code],30h
00014036: C6 05 B4 A2 01 00 08                                  	mov	[xop_opcode_map],8
0001403D: 4E                                                    	dec	esi
0001403E: E9 94 AC FF FF                                        	jmp	mmx_nomem_imm8
                                                                      xop_shift_reg_mem:
00014043: E8 48 CD FF FF                                        	call	get_address
00014048: AC                                                    	lods	byte [esi]
00014049: 3C 2C                                                 	cmp	al,','
0001404B: 0F 85 ED C8 FE FF                                     	jne	invalid_operand
00014051: 56                                                    	push	esi
00014052: 30 C9                                                 	xor	cl,cl
00014054: 86 0D A4 A2 01 00                                     	xchg	cl,[operand_size]
0001405A: AC                                                    	lods	byte [esi]
0001405B: E8 D4 CC FF FF                                        	call	get_size_operator
00014060: 5E                                                    	pop	esi
00014061: 86 0D A4 A2 01 00                                     	xchg	cl,[operand_size]
00014067: 3C 10                                                 	cmp	al,10h
00014069: 75 0F                                                 	jne	xop_shift_reg_mem_imm
0001406B: E8 CD 00 00 00                                        	call	take_avx_register
00014070: A2 AA A2 01 00                                        	mov	[vex_register],al
00014075: E9 AA 74 FF FF                                        	jmp	instruction_ready
                                                                      xop_shift_reg_mem_imm:
0001407A: 80 3D AF A2 01 00 94                                  	cmp	[base_code],94h
00014081: 0F 83 B7 C8 FE FF                                     	jae	invalid_operand
00014087: 80 05 AF A2 01 00 30                                  	add	[base_code],30h
0001408E: C6 05 B4 A2 01 00 08                                  	mov	[xop_opcode_map],8
00014095: 4E                                                    	dec	esi
00014096: E9 F4 AB FF FF                                        	jmp	mmx_imm8
                                                                
                                                                avx512_4vnniw_instruction:
0001409B: C6 05 A8 A2 01 00 F2                                  	mov	[opcode_prefix],0F2h
000140A2: C6 05 AF A2 01 00 0F                                  	mov	[base_code],0Fh
000140A9: C6 05 B0 A2 01 00 38                                  	mov	[extended_code],38h
000140B0: A2 B1 A2 01 00                                        	mov	[supplemental_code],al
000140B5: C6 05 B5 A2 01 00 10                                  	mov	[mmx_size],16
000140BC: C6 05 AD A2 01 00 00                                  	mov	[broadcast_size],0
000140C3: 80 0D A9 A2 01 00 08                                  	or	[vex_required],8
000140CA: E8 6E 00 00 00                                        	call	take_avx_register
000140CF: A2 B2 A2 01 00                                        	mov	[postbyte_register],al
000140D4: E8 03 DA FF FF                                        	call	take_avx512_mask
000140D9: AC                                                    	lods	byte [esi]
000140DA: 3C 2C                                                 	cmp	al,','
000140DC: 0F 85 5C C8 FE FF                                     	jne	invalid_operand
000140E2: E8 56 00 00 00                                        	call	take_avx_register
000140E7: A2 AA A2 01 00                                        	mov	[vex_register],al
000140EC: 80 3E 2B                                              	cmp	byte [esi],'+'
000140EF: 75 0E                                                 	jne	reg4_ok
000140F1: 46                                                    	inc	esi
000140F2: 81 3E 28 01 03 29                                     	cmp	dword [esi],29030128h
000140F8: 0F 85 40 C8 FE FF                                     	jne	invalid_operand
000140FE: AD                                                    	lods	dword [esi]
                                                                      reg4_ok:
000140FF: 80 3D A4 A2 01 00 40                                  	cmp	[operand_size],64
00014106: 0F 85 3C C8 FE FF                                     	jne	invalid_operand_size
0001410C: C6 05 A4 A2 01 00 00                                  	mov	[operand_size],0
00014113: AC                                                    	lods	byte [esi]
00014114: 3C 2C                                                 	cmp	al,','
00014116: 0F 85 22 C8 FE FF                                     	jne	invalid_operand
0001411C: E8 52 D8 FF FF                                        	call	take_avx_rm
00014121: 0F 82 17 C8 FE FF                                     	jc	invalid_operand
00014127: C6 05 A4 A2 01 00 40                                  	mov	[operand_size],64
0001412E: E9 F1 73 FF FF                                        	jmp	instruction_ready
                                                                
                                                                set_evex_mode:
00014133: A2 CC A2 01 00                                        	mov	[evex_mode],al
00014138: E9 3D 0E FF FF                                        	jmp	instruction_assembled
                                                                
                                                                take_avx_register:
0001413D: AC                                                    	lods	byte [esi]
0001413E: E8 F1 CB FF FF                                        	call	get_size_operator
00014143: 3C 10                                                 	cmp	al,10h
00014145: 0F 85 F3 C7 FE FF                                     	jne	invalid_operand
0001414B: AC                                                    	lods	byte [esi]
                                                                convert_avx_register:
0001414C: 88 C4                                                 	mov	ah,al
0001414E: 24 1F                                                 	and	al,1Fh
00014150: 80 E4 E0                                              	and	ah,0E0h
00014153: 80 EC 60                                              	sub	ah,60h
00014156: 0F 82 E2 C7 FE FF                                     	jb	invalid_operand
0001415C: 74 0F                                                 	jz	avx512_register_size
0001415E: 80 EC 60                                              	sub	ah,60h
00014161: 0F 82 D7 C7 FE FF                                     	jb	invalid_operand
00014167: 75 06                                                 	jnz	avx_register_size_ok
00014169: B4 10                                                 	mov	ah,16
0001416B: EB 02                                                 	jmp	avx_register_size_ok
                                                                      avx512_register_size:
0001416D: B4 40                                                 	mov	ah,64
                                                                      avx_register_size_ok:
0001416F: 3C 08                                                 	cmp	al,8
00014171: 0F 82 3F CB FF FF                                     	jb	match_register_size
00014177: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
0001417E: 0F 85 BA C7 FE FF                                     	jne	invalid_operand
00014184: E9 2D CB FF FF                                        	jmp	match_register_size
                                                                store_vex_instruction_code:
00014189: F6 05 A7 A2 01 00 10                                  	test	[rex_prefix],10h
00014190: 0F 85 A8 C7 FE FF                                     	jnz	invalid_operand
00014196: F6 05 A9 A2 01 00 F8                                  	test	[vex_required],0F8h
0001419D: 0F 85 B9 01 00 00                                     	jnz	store_evex_instruction_code
000141A3: F6 05 AA A2 01 00 10                                  	test	[vex_register],10000b
000141AA: 0F 85 AC 01 00 00                                     	jnz	store_evex_instruction_code
000141B0: 80 3D A4 A2 01 00 40                                  	cmp	[operand_size],64
000141B7: 0F 84 9F 01 00 00                                     	je	store_evex_instruction_code
000141BD: A0 AF A2 01 00                                        	mov	al,[base_code]
000141C2: 3C 0F                                                 	cmp	al,0Fh
000141C4: 0F 85 41 01 00 00                                     	jne	store_xop_instruction_code
000141CA: F6 05 A9 A2 01 00 02                                  	test	[vex_required],2
000141D1: 75 4A                                                 	jnz	prepare_vex
000141D3: 80 3D CC A2 01 00 00                                  	cmp	[evex_mode],0
000141DA: 74 41                                                 	je	prepare_vex
000141DC: 80 3D BD A2 01 00 01                                  	cmp	[displacement_compression],1
000141E3: 75 38                                                 	jne	prepare_vex
000141E5: 81 FA 80 00 00 00                                     	cmp	edx,80h
000141EB: 72 30                                                 	jb	prepare_vex
000141ED: 83 FA 80                                              	cmp	edx,-80h
000141F0: 73 2B                                                 	jae	prepare_vex
000141F2: 88 D8                                                 	mov	al,bl
000141F4: 08 F8                                                 	or	al,bh
000141F6: C0 E8 04                                              	shr	al,4
000141F9: 3C 02                                                 	cmp	al,2
000141FB: 74 20                                                 	je	prepare_vex
000141FD: E8 53 02 00 00                                        	call	compress_displacement
00014202: 80 3D BD A2 01 00 02                                  	cmp	[displacement_compression],2
00014209: 0F 87 75 01 00 00                                     	ja	prepare_evex
0001420F: 72 0C                                                 	jb	prepare_vex
00014211: FE 0D BD A2 01 00                                     	dec	[displacement_compression]
00014217: 8B 15 3C A2 01 00                                     	mov	edx,[uncompressed_displacement]
                                                                      prepare_vex:
0001421D: 8A 25 B0 A2 01 00                                     	mov	ah,[extended_code]
00014223: 80 FC 38                                              	cmp	ah,38h
00014226: 74 6F                                                 	je	store_vex_0f38_instruction_code
00014228: 80 FC 3A                                              	cmp	ah,3Ah
0001422B: 74 74                                                 	je	store_vex_0f3a_instruction_code
0001422D: F6 05 A7 A2 01 00 0B                                  	test	[rex_prefix],1011b
00014234: 75 75                                                 	jnz	store_vex_0f_instruction_code
00014236: 88 67 02                                              	mov	[edi+2],ah
00014239: C6 07 C5                                              	mov	byte [edi],0C5h
0001423C: A0 AA A2 01 00                                        	mov	al,[vex_register]
00014241: F6 D0                                                 	not	al
00014243: C0 E0 03                                              	shl	al,3
00014246: 8A 25 A7 A2 01 00                                     	mov	ah,[rex_prefix]
0001424C: C0 E4 05                                              	shl	ah,5
0001424F: 80 E4 80                                              	and	ah,80h
00014252: 30 E0                                                 	xor	al,ah
00014254: E8 0C 00 00 00                                        	call	get_vex_lpp_bits
00014259: 88 47 01                                              	mov	[edi+1],al
0001425C: E8 89 00 00 00                                        	call	check_vex
00014261: 83 C7 03                                              	add	edi,3
00014264: C3                                                    	ret
                                                                      get_vex_lpp_bits:
00014265: 80 3D A4 A2 01 00 20                                  	cmp	[operand_size],32
0001426C: 75 02                                                 	jne	get_vex_pp_bits
0001426E: 0C 04                                                 	or	al,100b
                                                                      get_vex_pp_bits:
00014270: 8A 25 A8 A2 01 00                                     	mov	ah,[opcode_prefix]
00014276: 80 FC 66                                              	cmp	ah,66h
00014279: 74 19                                                 	je	vex_66
0001427B: 80 FC F3                                              	cmp	ah,0F3h
0001427E: 74 11                                                 	je	vex_f3
00014280: 80 FC F2                                              	cmp	ah,0F2h
00014283: 74 09                                                 	je	vex_f2
00014285: 84 E4                                                 	test	ah,ah
00014287: 0F 85 ED C6 FE FF                                     	jnz	disallowed_combination_of_registers
0001428D: C3                                                    	ret
                                                                      vex_f2:
0001428E: 0C 03                                                 	or	al,11b
00014290: C3                                                    	ret
                                                                      vex_f3:
00014291: 0C 02                                                 	or	al,10b
00014293: C3                                                    	ret
                                                                      vex_66:
00014294: 0C 01                                                 	or	al,1
00014296: C3                                                    	ret
                                                                      store_vex_0f38_instruction_code:
00014297: B0 E2                                                 	mov	al,11100010b
00014299: 8A 25 B1 A2 01 00                                     	mov	ah,[supplemental_code]
0001429F: EB 0C                                                 	jmp	make_c4_vex
                                                                      store_vex_0f3a_instruction_code:
000142A1: B0 E3                                                 	mov	al,11100011b
000142A3: 8A 25 B1 A2 01 00                                     	mov	ah,[supplemental_code]
000142A9: EB 02                                                 	jmp	make_c4_vex
                                                                      store_vex_0f_instruction_code:
000142AB: B0 E1                                                 	mov	al,11100001b
                                                                      make_c4_vex:
000142AD: 88 67 03                                              	mov	[edi+3],ah
000142B0: C6 07 C4                                              	mov	byte [edi],0C4h
000142B3: 8A 25 A7 A2 01 00                                     	mov	ah,[rex_prefix]
000142B9: C0 E4 05                                              	shl	ah,5
000142BC: 30 E0                                                 	xor	al,ah
000142BE: 88 47 01                                              	mov	[edi+1],al
000142C1: E8 24 00 00 00                                        	call	check_vex
000142C6: A0 AA A2 01 00                                        	mov	al,[vex_register]
000142CB: 34 0F                                                 	xor	al,1111b
000142CD: C0 E0 03                                              	shl	al,3
000142D0: 8A 25 A7 A2 01 00                                     	mov	ah,[rex_prefix]
000142D6: C0 E4 04                                              	shl	ah,4
000142D9: 80 E4 80                                              	and	ah,80h
000142DC: 08 E0                                                 	or	al,ah
000142DE: E8 82 FF FF FF                                        	call	get_vex_lpp_bits
000142E3: 88 47 02                                              	mov	[edi+2],al
000142E6: 83 C7 04                                              	add	edi,4
000142E9: C3                                                    	ret
                                                                      check_vex:
000142EA: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
000142F1: 74 17                                                 	je	vex_ok
000142F3: F6 D0                                                 	not	al
000142F5: A8 C0                                                 	test	al,11000000b
000142F7: 0F 85 41 C6 FE FF                                     	jnz	invalid_operand
000142FD: F6 05 A7 A2 01 00 40                                  	test	[rex_prefix],40h
00014304: 0F 85 34 C6 FE FF                                     	jnz	invalid_operand
                                                                      vex_ok:
0001430A: C3                                                    	ret
                                                                store_xop_instruction_code:
0001430B: 88 47 03                                              	mov	[edi+3],al
0001430E: C6 07 8F                                              	mov	byte [edi],8Fh
00014311: A0 B4 A2 01 00                                        	mov	al,[xop_opcode_map]
00014316: 8A 25 A7 A2 01 00                                     	mov	ah,[rex_prefix]
0001431C: F6 C4 40                                              	test	ah,40h
0001431F: 74 0D                                                 	jz	xop_ok
00014321: 80 3D CA A2 01 00 40                                  	cmp	[code_type],64
00014328: 0F 85 10 C6 FE FF                                     	jne	invalid_operand
                                                                      xop_ok:
0001432E: F6 D4                                                 	not	ah
00014330: C0 E4 05                                              	shl	ah,5
00014333: 30 E0                                                 	xor	al,ah
00014335: 88 47 01                                              	mov	[edi+1],al
00014338: A0 AA A2 01 00                                        	mov	al,[vex_register]
0001433D: 34 0F                                                 	xor	al,1111b
0001433F: C0 E0 03                                              	shl	al,3
00014342: 8A 25 A7 A2 01 00                                     	mov	ah,[rex_prefix]
00014348: C0 E4 04                                              	shl	ah,4
0001434B: 80 E4 80                                              	and	ah,80h
0001434E: 08 E0                                                 	or	al,ah
00014350: E8 10 FF FF FF                                        	call	get_vex_lpp_bits
00014355: 88 47 02                                              	mov	[edi+2],al
00014358: 83 C7 04                                              	add	edi,4
0001435B: C3                                                    	ret
                                                                store_evex_instruction_code:
0001435C: F6 05 A9 A2 01 00 02                                  	test	[vex_required],2
00014363: 0F 85 D5 C5 FE FF                                     	jnz	invalid_operand
00014369: 80 3D AF A2 01 00 0F                                  	cmp	[base_code],0Fh
00014370: 0F 85 C8 C5 FE FF                                     	jne	invalid_operand
00014376: 80 3D BD A2 01 00 01                                  	cmp	[displacement_compression],1
0001437D: 75 05                                                 	jne	prepare_evex
0001437F: E8 D1 00 00 00                                        	call	compress_displacement
                                                                      prepare_evex:
00014384: 8A 25 B0 A2 01 00                                     	mov	ah,[extended_code]
0001438A: 80 FC 38                                              	cmp	ah,38h
0001438D: 0F 84 A8 00 00 00                                     	je	store_evex_0f38_instruction_code
00014393: 80 FC 3A                                              	cmp	ah,3Ah
00014396: 0F 84 AC 00 00 00                                     	je	store_evex_0f3a_instruction_code
0001439C: B0 F1                                                 	mov	al,11110001b
                                                                      make_evex:
0001439E: 88 67 04                                              	mov	[edi+4],ah
000143A1: C6 07 62                                              	mov	byte [edi],62h
000143A4: 8A 25 A7 A2 01 00                                     	mov	ah,[rex_prefix]
000143AA: C0 E4 05                                              	shl	ah,5
000143AD: 30 E0                                                 	xor	al,ah
000143AF: 8A 25 A9 A2 01 00                                     	mov	ah,[vex_required]
000143B5: 80 E4 10                                              	and	ah,10h
000143B8: 30 E0                                                 	xor	al,ah
000143BA: 88 47 01                                              	mov	[edi+1],al
000143BD: E8 28 FF FF FF                                        	call	check_vex
000143C2: A0 AA A2 01 00                                        	mov	al,[vex_register]
000143C7: F6 D0                                                 	not	al
000143C9: 24 0F                                                 	and	al,1111b
000143CB: C0 E0 03                                              	shl	al,3
000143CE: 8A 25 A7 A2 01 00                                     	mov	ah,[rex_prefix]
000143D4: C0 E4 04                                              	shl	ah,4
000143D7: 0A 25 A7 A2 01 00                                     	or	ah,[rex_prefix]
000143DD: 80 E4 80                                              	and	ah,80h
000143E0: 08 E0                                                 	or	al,ah
000143E2: 0C 04                                                 	or	al,100b
000143E4: E8 87 FE FF FF                                        	call	get_vex_pp_bits
000143E9: 88 47 02                                              	mov	[edi+2],al
000143EC: A0 AA A2 01 00                                        	mov	al,[vex_register]
000143F1: F6 D0                                                 	not	al
000143F3: D0 E8                                                 	shr	al,1
000143F5: 24 08                                                 	and	al,1000b
000143F7: F6 05 A9 A2 01 00 80                                  	test	[vex_required],80h
000143FE: 75 0F                                                 	jne	evex_rounding
00014400: 8A 25 A4 A2 01 00                                     	mov	ah,[operand_size]
00014406: 80 FC 10                                              	cmp	ah,16
00014409: 76 0F                                                 	jbe	evex_l_ok
0001440B: 08 E0                                                 	or	al,ah
0001440D: EB 0B                                                 	jmp	evex_l_ok
                                                                      evex_rounding:
0001440F: 8A 25 AE A2 01 00                                     	mov	ah,[rounding_mode]
00014415: C0 E4 05                                              	shl	ah,5
00014418: 08 E0                                                 	or	al,ah
                                                                      evex_l_ok:
0001441A: F6 05 A9 A2 01 00 20                                  	test	[vex_required],20h
00014421: 74 06                                                 	jz	evex_zaaa_ok
00014423: 0A 05 AC A2 01 00                                     	or	al,[mask_register]
                                                                      evex_zaaa_ok:
00014429: F6 05 A9 A2 01 00 40                                  	test	[vex_required],40h
00014430: 74 02                                                 	jz	evex_b_ok
00014432: 0C 10                                                 	or	al,10h
                                                                      evex_b_ok:
00014434: 88 47 03                                              	mov	[edi+3],al
00014437: 83 C7 05                                              	add	edi,5
0001443A: C3                                                    	ret
                                                                      store_evex_0f38_instruction_code:
0001443B: B0 F2                                                 	mov	al,11110010b
0001443D: 8A 25 B1 A2 01 00                                     	mov	ah,[supplemental_code]
00014443: E9 56 FF FF FF                                        	jmp	make_evex
                                                                      store_evex_0f3a_instruction_code:
00014448: B0 F3                                                 	mov	al,11110011b
0001444A: 8A 25 B1 A2 01 00                                     	mov	ah,[supplemental_code]
00014450: E9 49 FF FF FF                                        	jmp	make_evex
                                                                compress_displacement:
00014455: 89 CD                                                 	mov	ebp,ecx
00014457: 89 15 3C A2 01 00                                     	mov	[uncompressed_displacement],edx
0001445D: 09 D2                                                 	or	edx,edx
0001445F: 74 37                                                 	jz	displacement_compressed
00014461: 31 C9                                                 	xor	ecx,ecx
00014463: 8A 0D B5 A2 01 00                                     	mov	cl,[mmx_size]
00014469: 84 C9                                                 	test	cl,cl
0001446B: 75 06                                                 	jnz	calculate_displacement_scale
0001446D: 8A 0D A4 A2 01 00                                     	mov	cl,[operand_size]
                                                                      calculate_displacement_scale:
00014473: 0F BC C9                                              	bsf	ecx,ecx
00014476: 74 27                                                 	jz	displacement_compression_ok
00014478: 31 C0                                                 	xor	eax,eax
0001447A: 0F AD D0                                              	shrd	eax,edx,cl
0001447D: 75 11                                                 	jnz	displacement_not_compressed
0001447F: D3 FA                                                 	sar	edx,cl
00014481: 81 FA 80 00 00 00                                     	cmp	edx,80h
00014487: 72 0F                                                 	jb	displacement_compressed
00014489: 83 FA 80                                              	cmp	edx,-80h
0001448C: 73 0A                                                 	jnb	displacement_compressed
0001448E: D3 E2                                                 	shl	edx,cl
                                                                      displacement_not_compressed:
00014490: FE 05 BD A2 01 00                                     	inc	[displacement_compression]
00014496: EB 07                                                 	jmp	displacement_compression_ok
                                                                      displacement_compressed:
00014498: 80 05 BD A2 01 00 02                                  	add	[displacement_compression],2
                                                                      displacement_compression_ok:
0001449F: 89 E9                                                 	mov	ecx,ebp
000144A1: C3                                                    	ret
                                                                
                                                                
                                                                include '..\tables.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
000144A2: 49 4E 43 4C 55 44 45 00                               include_variable db 'INCLUDE',0
                                                                
000144AA: 1B                                                    symbol_characters db 27
000144AB: 09 0A 0D 1A 20 2B 2D 2F 2A 3D 3C 3E 28 29 5B 5D        db 9,0Ah,0Dh,1Ah,20h,'+-/*=<>()[]{}:,|&~#`;\'
          7B 7D 3A 2C 7C 26 7E 23 60 3B 5C                      
                                                                
                                                                preprocessor_directives:
000144C6: 06 64 65 66 69 6E 65                                   db 6,'define'
000144CD: 8E 04                                                  dw define_symbolic_constant-directive_handler
000144CF: 07 69 6E 63 6C 75 64 65                                db 7,'include'
000144D7: A6 17                                                  dw include_file-directive_handler
000144D9: 03 69 72 70                                            db 3,'irp'
000144DD: F0 06                                                  dw irp_directive-directive_handler
000144DF: 04 69 72 70 73                                         db 4,'irps'
000144E4: F9 06                                                  dw irps_directive-directive_handler
000144E6: 04 69 72 70 76                                         db 4,'irpv'
000144EB: 02 07                                                  dw irpv_directive-directive_handler
000144ED: 05 6D 61 63 72 6F                                      db 5,'macro'
000144F3: BB 04                                                  dw define_macro-directive_handler
000144F5: 05 6D 61 74 63 68                                      db 5,'match'
000144FB: 0B 07                                                  dw match_directive-directive_handler
000144FD: 08 70 6F 73 74 70 6F 6E 65                             db 8,'postpone'
00014506: A8 06                                                  dw postpone_directive-directive_handler
00014508: 05 70 75 72 67 65                                      db 5,'purge'
0001450E: BB 07                                                  dw purge_macro-directive_handler
00014510: 04 72 65 70 74                                         db 4,'rept'
00014515: E7 06                                                  dw rept_directive-directive_handler
00014517: 07 72 65 73 74 6F 72 65                                db 7,'restore'
0001451F: C3 07                                                  dw restore_equ_constant-directive_handler
00014521: 07 72 65 73 74 72 75 63                                db 7,'restruc'
00014529: BF 07                                                  dw purge_struc-directive_handler
0001452B: 05 73 74 72 75 63                                      db 5,'struc'
00014531: B7 04                                                  dw define_struc-directive_handler
00014533: 00                                                     db 0
                                                                
                                                                macro_directives:
00014534: 06 63 6F 6D 6D 6F 6E                                   db 6,'common'
0001453B: 23 16                                                  dw common_block-directive_handler
0001453D: 07 66 6F 72 77 61 72 64                                db 7,'forward'
00014545: 3A 16                                                  dw forward_block-directive_handler
00014547: 05 6C 6F 63 61 6C                                      db 5,'local'
0001454D: 51 15                                                  dw local_symbols-directive_handler
0001454F: 07 72 65 76 65 72 73 65                                db 7,'reverse'
00014557: 5A 16                                                  dw reverse_block-directive_handler
00014559: 00                                                     db 0
                                                                
                                                                preprocessor_special_symbols:
0001455A: 04 66 69 6C 65                                         db 4,'file'
0001455F: FC 08                                                  dw preprocessed_file_value-directive_handler
00014561: 04 6C 69 6E 65                                         db 4,'line'
00014566: 3A 09                                                  dw preprocessed_line_value-directive_handler
00014568: 00                                                     db 0
                                                                
                                                                operators:
00014569: 01 2B 80                                               db 1,'+',80h
0001456C: 01 2D 81                                               db 1,'-',81h
0001456F: 01 2A 90                                               db 1,'*',90h
00014572: 01 2F 91                                               db 1,'/',91h
00014575: 03 61 6E 64 B0                                         db 3,'and',0B0h
0001457A: 03 6D 6F 64 A0                                         db 3,'mod',0A0h
0001457F: 02 6F 72 B1                                            db 2,'or',0B1h
00014583: 03 73 68 6C C0                                         db 3,'shl',0C0h
00014588: 03 73 68 72 C1                                         db 3,'shr',0C1h
0001458D: 03 78 6F 72 B2                                         db 3,'xor',0B2h
00014592: 00                                                     db 0
                                                                
                                                                single_operand_operators:
00014593: 01 2B 82                                               db 1,'+',82h
00014596: 01 2D 83                                               db 1,'-',83h
00014599: 03 62 73 66 E0                                         db 3,'bsf',0E0h
0001459E: 03 62 73 72 E1                                         db 3,'bsr',0E1h
000145A3: 03 6E 6F 74 D0                                         db 3,'not',0D0h
000145A8: 03 70 6C 74 F1                                         db 3,'plt',0F1h
000145AD: 03 72 76 61 F0                                         db 3,'rva',0F0h
000145B2: 00                                                     db 0
                                                                
                                                                directive_operators:
000145B3: 05 61 6C 69 67 6E 8C                                   db 5,'align',8Ch
000145BA: 02 61 73 86                                            db 2,'as',86h
000145BE: 02 61 74 80                                            db 2,'at',80h
000145C2: 07 64 65 66 69 6E 65 64 88                             db 7,'defined',88h
000145CB: 08 64 65 66 69 6E 69 74 65 8A                          db 8,'definite',8Ah
000145D5: 03 64 75 70 81                                         db 3,'dup',81h
000145DA: 02 65 71 F0                                            db 2,'eq',0F0h
000145DE: 06 65 71 74 79 70 65 F7                                db 6,'eqtype',0F7h
000145E6: 04 66 72 6F 6D 82                                      db 4,'from',82h
000145EC: 02 69 6E F6                                            db 2,'in',0F6h
000145F0: 02 6F 6E 84                                            db 2,'on',84h
000145F4: 03 70 74 72 85                                         db 3,'ptr',85h
000145F9: 0A 72 65 6C 61 74 69 76 65 74 6F F8                    db 10,'relativeto',0F8h
00014605: 04 75 73 65 64 89                                      db 4,'used',89h
0001460B: 00                                                     db 0
                                                                
                                                                address_sizes:
0001460C: 04 62 79 74 65 01                                      db 4,'byte',1
00014612: 05 64 77 6F 72 64 04                                   db 5,'dword',4
00014619: 05 71 77 6F 72 64 08                                   db 5,'qword',8
00014620: 04 77 6F 72 64 02                                      db 4,'word',2
00014626: 00                                                     db 0
                                                                
                                                                symbols:
00014627: 2C 00 01 00                                            dw symbols_1-symbols,(symbols_2-symbols_1)/(1+2)
0001462B: 2F 00 29 00                                            dw symbols_2-symbols,(symbols_3-symbols_2)/(2+2)
0001462F: D3 00 57 00                                            dw symbols_3-symbols,(symbols_4-symbols_3)/(3+2)
00014633: 86 02 52 00                                            dw symbols_4-symbols,(symbols_5-symbols_4)/(4+2)
00014637: 72 04 52 00                                            dw symbols_5-symbols,(symbols_6-symbols_5)/(5+2)
0001463B: B0 06 08 00                                            dw symbols_6-symbols,(symbols_7-symbols_6)/(6+2)
0001463F: F0 06 04 00                                            dw symbols_7-symbols,(symbols_8-symbols_7)/(7+2)
00014643: 14 07 06 00                                            dw symbols_8-symbols,(symbols_9-symbols_8)/(8+2)
00014647: 50 07 02 00                                            dw symbols_9-symbols,(symbols_10-symbols_9)/(9+2)
0001464B: 66 07 04 00                                            dw symbols_10-symbols,(symbols_11-symbols_10)/(10+2)
0001464F: 96 07 03 00                                            dw symbols_11-symbols,(symbols_end-symbols_11)/(11+2)
                                                                
                                                                symbols_1:
00014653: 7A 1F 00                                               db 'z',1Fh,0
                                                                symbols_2:
00014656: 61 68 10 04                                            db 'ah',10h,04h
0001465A: 61 6C 10 10                                            db 'al',10h,10h
0001465E: 61 78 10 20                                            db 'ax',10h,20h
00014662: 62 68 10 07                                            db 'bh',10h,07h
00014666: 62 6C 10 13                                            db 'bl',10h,13h
0001466A: 62 70 10 25                                            db 'bp',10h,25h
0001466E: 62 78 10 23                                            db 'bx',10h,23h
00014672: 63 68 10 05                                            db 'ch',10h,05h
00014676: 63 6C 10 11                                            db 'cl',10h,11h
0001467A: 63 73 10 32                                            db 'cs',10h,32h
0001467E: 63 78 10 21                                            db 'cx',10h,21h
00014682: 64 68 10 06                                            db 'dh',10h,06h
00014686: 64 69 10 27                                            db 'di',10h,27h
0001468A: 64 6C 10 12                                            db 'dl',10h,12h
0001468E: 64 73 10 34                                            db 'ds',10h,34h
00014692: 64 78 10 22                                            db 'dx',10h,22h
00014696: 65 73 10 31                                            db 'es',10h,31h
0001469A: 66 73 10 35                                            db 'fs',10h,35h
0001469E: 67 73 10 36                                            db 'gs',10h,36h
000146A2: 6B 30 14 50                                            db 'k0',14h,50h
000146A6: 6B 31 14 51                                            db 'k1',14h,51h
000146AA: 6B 32 14 52                                            db 'k2',14h,52h
000146AE: 6B 33 14 53                                            db 'k3',14h,53h
000146B2: 6B 34 14 54                                            db 'k4',14h,54h
000146B6: 6B 35 14 55                                            db 'k5',14h,55h
000146BA: 6B 36 14 56                                            db 'k6',14h,56h
000146BE: 6B 37 14 57                                            db 'k7',14h,57h
000146C2: 6D 73 1C 41                                            db 'ms',1Ch,41h
000146C6: 6D 7A 18 20                                            db 'mz',18h,20h
000146CA: 6E 78 1B 83                                            db 'nx',1Bh,83h
000146CE: 70 65 18 30                                            db 'pe',18h,30h
000146D2: 72 38 10 88                                            db 'r8',10h,88h
000146D6: 72 39 10 89                                            db 'r9',10h,89h
000146DA: 72 64 1F 21                                            db 'rd',1Fh,21h
000146DE: 72 6E 1F 20                                            db 'rn',1Fh,20h
000146E2: 72 75 1F 22                                            db 'ru',1Fh,22h
000146E6: 72 7A 1F 23                                            db 'rz',1Fh,23h
000146EA: 73 69 10 26                                            db 'si',10h,26h
000146EE: 73 70 10 24                                            db 'sp',10h,24h
000146F2: 73 73 10 33                                            db 'ss',10h,33h
000146F6: 73 74 10 A0                                            db 'st',10h,0A0h
                                                                symbols_3:
000146FA: 62 70 6C 10 15                                         db 'bpl',10h,15h
000146FF: 63 72 30 14 00                                         db 'cr0',14h,00h
00014704: 63 72 31 14 01                                         db 'cr1',14h,01h
00014709: 63 72 32 14 02                                         db 'cr2',14h,02h
0001470E: 63 72 33 14 03                                         db 'cr3',14h,03h
00014713: 63 72 34 14 04                                         db 'cr4',14h,04h
00014718: 63 72 35 14 05                                         db 'cr5',14h,05h
0001471D: 63 72 36 14 06                                         db 'cr6',14h,06h
00014722: 63 72 37 14 07                                         db 'cr7',14h,07h
00014727: 63 72 38 14 08                                         db 'cr8',14h,08h
0001472C: 63 72 39 14 09                                         db 'cr9',14h,09h
00014731: 64 69 6C 10 17                                         db 'dil',10h,17h
00014736: 64 6C 6C 1B 80                                         db 'dll',1Bh,80h
0001473B: 64 72 30 14 10                                         db 'dr0',14h,10h
00014740: 64 72 31 14 11                                         db 'dr1',14h,11h
00014745: 64 72 32 14 12                                         db 'dr2',14h,12h
0001474A: 64 72 33 14 13                                         db 'dr3',14h,13h
0001474F: 64 72 34 14 14                                         db 'dr4',14h,14h
00014754: 64 72 35 14 15                                         db 'dr5',14h,15h
00014759: 64 72 36 14 16                                         db 'dr6',14h,16h
0001475E: 64 72 37 14 17                                         db 'dr7',14h,17h
00014763: 64 72 38 14 18                                         db 'dr8',14h,18h
00014768: 64 72 39 14 19                                         db 'dr9',14h,19h
0001476D: 65 61 78 10 40                                         db 'eax',10h,40h
00014772: 65 62 70 10 45                                         db 'ebp',10h,45h
00014777: 65 62 78 10 43                                         db 'ebx',10h,43h
0001477C: 65 63 78 10 41                                         db 'ecx',10h,41h
00014781: 65 64 69 10 47                                         db 'edi',10h,47h
00014786: 65 64 78 10 42                                         db 'edx',10h,42h
0001478B: 65 66 69 1B 0A                                         db 'efi',1Bh,10
00014790: 65 69 70 10 94                                         db 'eip',10h,94h
00014795: 65 6C 66 18 50                                         db 'elf',18h,50h
0001479A: 65 73 69 10 46                                         db 'esi',10h,46h
0001479F: 65 73 70 10 44                                         db 'esp',10h,44h
000147A4: 66 61 72 12 03                                         db 'far',12h,3
000147A9: 67 75 69 1B 02                                         db 'gui',1Bh,2
000147AE: 6D 6D 30 10 B0                                         db 'mm0',10h,0B0h
000147B3: 6D 6D 31 10 B1                                         db 'mm1',10h,0B1h
000147B8: 6D 6D 32 10 B2                                         db 'mm2',10h,0B2h
000147BD: 6D 6D 33 10 B3                                         db 'mm3',10h,0B3h
000147C2: 6D 6D 34 10 B4                                         db 'mm4',10h,0B4h
000147C7: 6D 6D 35 10 B5                                         db 'mm5',10h,0B5h
000147CC: 6D 6D 36 10 B6                                         db 'mm6',10h,0B6h
000147D1: 6D 6D 37 10 B7                                         db 'mm7',10h,0B7h
000147D6: 72 31 30 10 8A                                         db 'r10',10h,8Ah
000147DB: 72 31 31 10 8B                                         db 'r11',10h,8Bh
000147E0: 72 31 32 10 8C                                         db 'r12',10h,8Ch
000147E5: 72 31 33 10 8D                                         db 'r13',10h,8Dh
000147EA: 72 31 34 10 8E                                         db 'r14',10h,8Eh
000147EF: 72 31 35 10 8F                                         db 'r15',10h,8Fh
000147F4: 72 38 62 10 18                                         db 'r8b',10h,18h
000147F9: 72 38 64 10 48                                         db 'r8d',10h,48h
000147FE: 72 38 6C 10 18                                         db 'r8l',10h,18h
00014803: 72 38 77 10 28                                         db 'r8w',10h,28h
00014808: 72 39 62 10 19                                         db 'r9b',10h,19h
0001480D: 72 39 64 10 49                                         db 'r9d',10h,49h
00014812: 72 39 6C 10 19                                         db 'r9l',10h,19h
00014817: 72 39 77 10 29                                         db 'r9w',10h,29h
0001481C: 72 61 78 10 80                                         db 'rax',10h,80h
00014821: 72 62 70 10 85                                         db 'rbp',10h,85h
00014826: 72 62 78 10 83                                         db 'rbx',10h,83h
0001482B: 72 63 78 10 81                                         db 'rcx',10h,81h
00014830: 72 64 69 10 87                                         db 'rdi',10h,87h
00014835: 72 64 78 10 82                                         db 'rdx',10h,82h
0001483A: 72 69 70 10 98                                         db 'rip',10h,98h
0001483F: 72 73 69 10 86                                         db 'rsi',10h,86h
00014844: 72 73 70 10 84                                         db 'rsp',10h,84h
00014849: 73 61 65 1F 30                                         db 'sae',1Fh,30h
0001484E: 73 69 6C 10 16                                         db 'sil',10h,16h
00014853: 73 70 6C 10 14                                         db 'spl',10h,14h
00014858: 73 74 30 10 A0                                         db 'st0',10h,0A0h
0001485D: 73 74 31 10 A1                                         db 'st1',10h,0A1h
00014862: 73 74 32 10 A2                                         db 'st2',10h,0A2h
00014867: 73 74 33 10 A3                                         db 'st3',10h,0A3h
0001486C: 73 74 34 10 A4                                         db 'st4',10h,0A4h
00014871: 73 74 35 10 A5                                         db 'st5',10h,0A5h
00014876: 73 74 36 10 A6                                         db 'st6',10h,0A6h
0001487B: 73 74 37 10 A7                                         db 'st7',10h,0A7h
00014880: 74 72 30 14 40                                         db 'tr0',14h,40h
00014885: 74 72 31 14 41                                         db 'tr1',14h,41h
0001488A: 74 72 32 14 42                                         db 'tr2',14h,42h
0001488F: 74 72 33 14 43                                         db 'tr3',14h,43h
00014894: 74 72 34 14 44                                         db 'tr4',14h,44h
00014899: 74 72 35 14 45                                         db 'tr5',14h,45h
0001489E: 74 72 36 14 46                                         db 'tr6',14h,46h
000148A3: 74 72 37 14 47                                         db 'tr7',14h,47h
000148A8: 77 64 6D 1B 81                                         db 'wdm',1Bh,81h
                                                                symbols_4:
000148AD: 31 74 6F 32 1F 11                                      db '1to2',1Fh,11h
000148B3: 31 74 6F 34 1F 12                                      db '1to4',1Fh,12h
000148B9: 31 74 6F 38 1F 13                                      db '1to8',1Fh,13h
000148BF: 62 6E 64 30 14 60                                      db 'bnd0',14h,60h
000148C5: 62 6E 64 31 14 61                                      db 'bnd1',14h,61h
000148CB: 62 6E 64 32 14 62                                      db 'bnd2',14h,62h
000148D1: 62 6E 64 33 14 63                                      db 'bnd3',14h,63h
000148D7: 62 79 74 65 11 01                                      db 'byte',11h,1
000148DD: 63 6F 64 65 19 05                                      db 'code',19h,5
000148E3: 63 6F 66 66 18 40                                      db 'coff',18h,40h
000148E9: 63 72 31 30 14 0A                                      db 'cr10',14h,0Ah
000148EF: 63 72 31 31 14 0B                                      db 'cr11',14h,0Bh
000148F5: 63 72 31 32 14 0C                                      db 'cr12',14h,0Ch
000148FB: 63 72 31 33 14 0D                                      db 'cr13',14h,0Dh
00014901: 63 72 31 34 14 0E                                      db 'cr14',14h,0Eh
00014907: 63 72 31 35 14 0F                                      db 'cr15',14h,0Fh
0001490D: 64 61 74 61 19 06                                      db 'data',19h,6
00014913: 64 72 31 30 14 1A                                      db 'dr10',14h,1Ah
00014919: 64 72 31 31 14 1B                                      db 'dr11',14h,1Bh
0001491F: 64 72 31 32 14 1C                                      db 'dr12',14h,1Ch
00014925: 64 72 31 33 14 1D                                      db 'dr13',14h,1Dh
0001492B: 64 72 31 34 14 1E                                      db 'dr14',14h,1Eh
00014931: 64 72 31 35 14 1F                                      db 'dr15',14h,1Fh
00014937: 6D 73 36 34 1C 49                                      db 'ms64',1Ch,49h
0001493D: 6E 65 61 72 12 02                                      db 'near',12h,2
00014943: 6E 6F 74 65 1E 04                                      db 'note',1Eh,4
00014949: 70 65 36 34 18 3C                                      db 'pe64',18h,3Ch
0001494F: 72 31 30 62 10 1A                                      db 'r10b',10h,1Ah
00014955: 72 31 30 64 10 4A                                      db 'r10d',10h,4Ah
0001495B: 72 31 30 6C 10 1A                                      db 'r10l',10h,1Ah
00014961: 72 31 30 77 10 2A                                      db 'r10w',10h,2Ah
00014967: 72 31 31 62 10 1B                                      db 'r11b',10h,1Bh
0001496D: 72 31 31 64 10 4B                                      db 'r11d',10h,4Bh
00014973: 72 31 31 6C 10 1B                                      db 'r11l',10h,1Bh
00014979: 72 31 31 77 10 2B                                      db 'r11w',10h,2Bh
0001497F: 72 31 32 62 10 1C                                      db 'r12b',10h,1Ch
00014985: 72 31 32 64 10 4C                                      db 'r12d',10h,4Ch
0001498B: 72 31 32 6C 10 1C                                      db 'r12l',10h,1Ch
00014991: 72 31 32 77 10 2C                                      db 'r12w',10h,2Ch
00014997: 72 31 33 62 10 1D                                      db 'r13b',10h,1Dh
0001499D: 72 31 33 64 10 4D                                      db 'r13d',10h,4Dh
000149A3: 72 31 33 6C 10 1D                                      db 'r13l',10h,1Dh
000149A9: 72 31 33 77 10 2D                                      db 'r13w',10h,2Dh
000149AF: 72 31 34 62 10 1E                                      db 'r14b',10h,1Eh
000149B5: 72 31 34 64 10 4E                                      db 'r14d',10h,4Eh
000149BB: 72 31 34 6C 10 1E                                      db 'r14l',10h,1Eh
000149C1: 72 31 34 77 10 2E                                      db 'r14w',10h,2Eh
000149C7: 72 31 35 62 10 1F                                      db 'r15b',10h,1Fh
000149CD: 72 31 35 64 10 4F                                      db 'r15d',10h,4Fh
000149D3: 72 31 35 6C 10 1F                                      db 'r15l',10h,1Fh
000149D9: 72 31 35 77 10 2F                                      db 'r15w',10h,2Fh
000149DF: 77 6F 72 64 11 02                                      db 'word',11h,2
000149E5: 78 6D 6D 30 10 C0                                      db 'xmm0',10h,0C0h
000149EB: 78 6D 6D 31 10 C1                                      db 'xmm1',10h,0C1h
000149F1: 78 6D 6D 32 10 C2                                      db 'xmm2',10h,0C2h
000149F7: 78 6D 6D 33 10 C3                                      db 'xmm3',10h,0C3h
000149FD: 78 6D 6D 34 10 C4                                      db 'xmm4',10h,0C4h
00014A03: 78 6D 6D 35 10 C5                                      db 'xmm5',10h,0C5h
00014A09: 78 6D 6D 36 10 C6                                      db 'xmm6',10h,0C6h
00014A0F: 78 6D 6D 37 10 C7                                      db 'xmm7',10h,0C7h
00014A15: 78 6D 6D 38 10 C8                                      db 'xmm8',10h,0C8h
00014A1B: 78 6D 6D 39 10 C9                                      db 'xmm9',10h,0C9h
00014A21: 79 6D 6D 30 10 E0                                      db 'ymm0',10h,0E0h
00014A27: 79 6D 6D 31 10 E1                                      db 'ymm1',10h,0E1h
00014A2D: 79 6D 6D 32 10 E2                                      db 'ymm2',10h,0E2h
00014A33: 79 6D 6D 33 10 E3                                      db 'ymm3',10h,0E3h
00014A39: 79 6D 6D 34 10 E4                                      db 'ymm4',10h,0E4h
00014A3F: 79 6D 6D 35 10 E5                                      db 'ymm5',10h,0E5h
00014A45: 79 6D 6D 36 10 E6                                      db 'ymm6',10h,0E6h
00014A4B: 79 6D 6D 37 10 E7                                      db 'ymm7',10h,0E7h
00014A51: 79 6D 6D 38 10 E8                                      db 'ymm8',10h,0E8h
00014A57: 79 6D 6D 39 10 E9                                      db 'ymm9',10h,0E9h
00014A5D: 7A 6D 6D 30 10 60                                      db 'zmm0',10h,60h
00014A63: 7A 6D 6D 31 10 61                                      db 'zmm1',10h,61h
00014A69: 7A 6D 6D 32 10 62                                      db 'zmm2',10h,62h
00014A6F: 7A 6D 6D 33 10 63                                      db 'zmm3',10h,63h
00014A75: 7A 6D 6D 34 10 64                                      db 'zmm4',10h,64h
00014A7B: 7A 6D 6D 35 10 65                                      db 'zmm5',10h,65h
00014A81: 7A 6D 6D 36 10 66                                      db 'zmm6',10h,66h
00014A87: 7A 6D 6D 37 10 67                                      db 'zmm7',10h,67h
00014A8D: 7A 6D 6D 38 10 68                                      db 'zmm8',10h,68h
00014A93: 7A 6D 6D 39 10 69                                      db 'zmm9',10h,69h
                                                                symbols_5:
00014A99: 31 74 6F 31 36 1F 14                                   db '1to16',1Fh,14h
00014AA0: 64 77 6F 72 64 11 04                                   db 'dword',11h,4
00014AA7: 65 6C 66 36 34 18 58                                   db 'elf64',18h,58h
00014AAE: 66 77 6F 72 64 11 06                                   db 'fword',11h,6
00014AB5: 6C 61 72 67 65 1B 82                                   db 'large',1Bh,82h
00014ABC: 70 77 6F 72 64 11 06                                   db 'pword',11h,6
00014AC3: 71 77 6F 72 64 11 08                                   db 'qword',11h,8
00014ACA: 73 68 6F 72 74 12 01                                   db 'short',12h,1
00014AD1: 74 62 79 74 65 11 0A                                   db 'tbyte',11h,0Ah
00014AD8: 74 77 6F 72 64 11 0A                                   db 'tword',11h,0Ah
00014ADF: 75 73 65 31 36 13 10                                   db 'use16',13h,16
00014AE6: 75 73 65 33 32 13 20                                   db 'use32',13h,32
00014AED: 75 73 65 36 34 13 40                                   db 'use64',13h,64
00014AF4: 78 6D 6D 31 30 10 CA                                   db 'xmm10',10h,0CAh
00014AFB: 78 6D 6D 31 31 10 CB                                   db 'xmm11',10h,0CBh
00014B02: 78 6D 6D 31 32 10 CC                                   db 'xmm12',10h,0CCh
00014B09: 78 6D 6D 31 33 10 CD                                   db 'xmm13',10h,0CDh
00014B10: 78 6D 6D 31 34 10 CE                                   db 'xmm14',10h,0CEh
00014B17: 78 6D 6D 31 35 10 CF                                   db 'xmm15',10h,0CFh
00014B1E: 78 6D 6D 31 36 10 D0                                   db 'xmm16',10h,0D0h
00014B25: 78 6D 6D 31 37 10 D1                                   db 'xmm17',10h,0D1h
00014B2C: 78 6D 6D 31 38 10 D2                                   db 'xmm18',10h,0D2h
00014B33: 78 6D 6D 31 39 10 D3                                   db 'xmm19',10h,0D3h
00014B3A: 78 6D 6D 32 30 10 D4                                   db 'xmm20',10h,0D4h
00014B41: 78 6D 6D 32 31 10 D5                                   db 'xmm21',10h,0D5h
00014B48: 78 6D 6D 32 32 10 D6                                   db 'xmm22',10h,0D6h
00014B4F: 78 6D 6D 32 33 10 D7                                   db 'xmm23',10h,0D7h
00014B56: 78 6D 6D 32 34 10 D8                                   db 'xmm24',10h,0D8h
00014B5D: 78 6D 6D 32 35 10 D9                                   db 'xmm25',10h,0D9h
00014B64: 78 6D 6D 32 36 10 DA                                   db 'xmm26',10h,0DAh
00014B6B: 78 6D 6D 32 37 10 DB                                   db 'xmm27',10h,0DBh
00014B72: 78 6D 6D 32 38 10 DC                                   db 'xmm28',10h,0DCh
00014B79: 78 6D 6D 32 39 10 DD                                   db 'xmm29',10h,0DDh
00014B80: 78 6D 6D 33 30 10 DE                                   db 'xmm30',10h,0DEh
00014B87: 78 6D 6D 33 31 10 DF                                   db 'xmm31',10h,0DFh
00014B8E: 78 77 6F 72 64 11 10                                   db 'xword',11h,16
00014B95: 79 6D 6D 31 30 10 EA                                   db 'ymm10',10h,0EAh
00014B9C: 79 6D 6D 31 31 10 EB                                   db 'ymm11',10h,0EBh
00014BA3: 79 6D 6D 31 32 10 EC                                   db 'ymm12',10h,0ECh
00014BAA: 79 6D 6D 31 33 10 ED                                   db 'ymm13',10h,0EDh
00014BB1: 79 6D 6D 31 34 10 EE                                   db 'ymm14',10h,0EEh
00014BB8: 79 6D 6D 31 35 10 EF                                   db 'ymm15',10h,0EFh
00014BBF: 79 6D 6D 31 36 10 F0                                   db 'ymm16',10h,0F0h
00014BC6: 79 6D 6D 31 37 10 F1                                   db 'ymm17',10h,0F1h
00014BCD: 79 6D 6D 31 38 10 F2                                   db 'ymm18',10h,0F2h
00014BD4: 79 6D 6D 31 39 10 F3                                   db 'ymm19',10h,0F3h
00014BDB: 79 6D 6D 32 30 10 F4                                   db 'ymm20',10h,0F4h
00014BE2: 79 6D 6D 32 31 10 F5                                   db 'ymm21',10h,0F5h
00014BE9: 79 6D 6D 32 32 10 F6                                   db 'ymm22',10h,0F6h
00014BF0: 79 6D 6D 32 33 10 F7                                   db 'ymm23',10h,0F7h
00014BF7: 79 6D 6D 32 34 10 F8                                   db 'ymm24',10h,0F8h
00014BFE: 79 6D 6D 32 35 10 F9                                   db 'ymm25',10h,0F9h
00014C05: 79 6D 6D 32 36 10 FA                                   db 'ymm26',10h,0FAh
00014C0C: 79 6D 6D 32 37 10 FB                                   db 'ymm27',10h,0FBh
00014C13: 79 6D 6D 32 38 10 FC                                   db 'ymm28',10h,0FCh
00014C1A: 79 6D 6D 32 39 10 FD                                   db 'ymm29',10h,0FDh
00014C21: 79 6D 6D 33 30 10 FE                                   db 'ymm30',10h,0FEh
00014C28: 79 6D 6D 33 31 10 FF                                   db 'ymm31',10h,0FFh
00014C2F: 79 77 6F 72 64 11 20                                   db 'yword',11h,32
00014C36: 7A 6D 6D 31 30 10 6A                                   db 'zmm10',10h,6Ah
00014C3D: 7A 6D 6D 31 31 10 6B                                   db 'zmm11',10h,6Bh
00014C44: 7A 6D 6D 31 32 10 6C                                   db 'zmm12',10h,6Ch
00014C4B: 7A 6D 6D 31 33 10 6D                                   db 'zmm13',10h,6Dh
00014C52: 7A 6D 6D 31 34 10 6E                                   db 'zmm14',10h,6Eh
00014C59: 7A 6D 6D 31 35 10 6F                                   db 'zmm15',10h,6Fh
00014C60: 7A 6D 6D 31 36 10 70                                   db 'zmm16',10h,70h
00014C67: 7A 6D 6D 31 37 10 71                                   db 'zmm17',10h,71h
00014C6E: 7A 6D 6D 31 38 10 72                                   db 'zmm18',10h,72h
00014C75: 7A 6D 6D 31 39 10 73                                   db 'zmm19',10h,73h
00014C7C: 7A 6D 6D 32 30 10 74                                   db 'zmm20',10h,74h
00014C83: 7A 6D 6D 32 31 10 75                                   db 'zmm21',10h,75h
00014C8A: 7A 6D 6D 32 32 10 76                                   db 'zmm22',10h,76h
00014C91: 7A 6D 6D 32 33 10 77                                   db 'zmm23',10h,77h
00014C98: 7A 6D 6D 32 34 10 78                                   db 'zmm24',10h,78h
00014C9F: 7A 6D 6D 32 35 10 79                                   db 'zmm25',10h,79h
00014CA6: 7A 6D 6D 32 36 10 7A                                   db 'zmm26',10h,7Ah
00014CAD: 7A 6D 6D 32 37 10 7B                                   db 'zmm27',10h,7Bh
00014CB4: 7A 6D 6D 32 38 10 7C                                   db 'zmm28',10h,7Ch
00014CBB: 7A 6D 6D 32 39 10 7D                                   db 'zmm29',10h,7Dh
00014CC2: 7A 6D 6D 33 30 10 7E                                   db 'zmm30',10h,7Eh
00014CC9: 7A 6D 6D 33 31 10 7F                                   db 'zmm31',10h,7Fh
00014CD0: 7A 77 6F 72 64 11 40                                   db 'zword',11h,64
                                                                symbols_6:
00014CD7: 62 69 6E 61 72 79 18 10                                db 'binary',18h,10h
00014CDF: 64 71 77 6F 72 64 11 10                                db 'dqword',11h,16
00014CE7: 65 78 70 6F 72 74 1A 00                                db 'export',1Ah,0
00014CEF: 66 69 78 75 70 73 1A 05                                db 'fixups',1Ah,5
00014CF7: 69 6D 70 6F 72 74 1A 01                                db 'import',1Ah,1
00014CFF: 6E 61 74 69 76 65 1B 01                                db 'native',1Bh,1
00014D07: 71 71 77 6F 72 64 11 20                                db 'qqword',11h,32
00014D0F: 73 74 61 74 69 63 1D 01                                db 'static',1Dh,1
                                                                symbols_7:
00014D17: 63 6F 6E 73 6F 6C 65 1B 03                             db 'console',1Bh,3
00014D20: 64 71 71 77 6F 72 64 11 40                             db 'dqqword',11h,64
00014D29: 64 79 6E 61 6D 69 63 1E 02                             db 'dynamic',1Eh,2
00014D32: 65 66 69 62 6F 6F 74 1B 0B                             db 'efiboot',1Bh,11
                                                                symbols_8:
00014D3B: 67 6E 75 72 65 6C 72 6F 1E 52                          db 'gnurelro',1Eh,52h
00014D45: 67 6E 75 73 74 61 63 6B 1E 51                          db 'gnustack',1Eh,51h
00014D4F: 6C 69 6E 6B 69 6E 66 6F 19 09                          db 'linkinfo',19h,9
00014D59: 72 65 61 64 61 62 6C 65 19 1E                          db 'readable',19h,30
00014D63: 72 65 73 6F 75 72 63 65 1A 02                          db 'resource',1Ah,2
00014D6D: 77 72 69 74 61 62 6C 65 19 1F                          db 'writable',19h,31
                                                                symbols_9:
00014D77: 73 68 61 72 65 61 62 6C 65 19 1C                       db 'shareable',19h,28
00014D82: 77 72 69 74 65 61 62 6C 65 19 1F                       db 'writeable',19h,31
                                                                symbols_10:
00014D8D: 65 66 69 72 75 6E 74 69 6D 65 1B 0C                    db 'efiruntime',1Bh,12
00014D99: 65 78 65 63 75 74 61 62 6C 65 19 1D                    db 'executable',19h,29
00014DA5: 67 6E 75 65 68 66 72 61 6D 65 1E 50                    db 'gnuehframe',1Eh,50h
00014DB1: 6C 69 6E 6B 72 65 6D 6F 76 65 19 0B                    db 'linkremove',19h,11
                                                                symbols_11:
00014DBD: 64 69 73 63 61 72 64 61 62 6C 65 19 19                 db 'discardable',19h,25
00014DCA: 69 6E 74 65 72 70 72 65 74 65 72 1E 03                 db 'interpreter',1Eh,3
00014DD7: 6E 6F 74 70 61 67 65 61 62 6C 65 19 1B                 db 'notpageable',19h,27
                                                                symbols_end:
                                                                
                                                                instructions:
00014DE4: 40 00 0E 00                                            dw instructions_2-instructions,(instructions_3-instructions_2)/(2+3)
00014DE8: 86 00 5A 00                                            dw instructions_3-instructions,(instructions_4-instructions_3)/(3+3)
00014DEC: A2 02 82 00                                            dw instructions_4-instructions,(instructions_5-instructions_4)/(4+3)
00014DF0: 30 06 FE 00                                            dw instructions_5-instructions,(instructions_6-instructions_5)/(5+3)
00014DF4: 20 0E 31 01                                            dw instructions_6-instructions,(instructions_7-instructions_6)/(6+3)
00014DF8: D9 18 F8 00                                            dw instructions_7-instructions,(instructions_8-instructions_7)/(7+3)
00014DFC: 89 22 13 01                                            dw instructions_8-instructions,(instructions_9-instructions_8)/(8+3)
00014E00: 5A 2E DC 00                                            dw instructions_9-instructions,(instructions_10-instructions_9)/(9+3)
00014E04: AA 38 77 00                                            dw instructions_10-instructions,(instructions_11-instructions_10)/(10+3)
00014E08: B5 3E 7A 00                                            dw instructions_11-instructions,(instructions_12-instructions_11)/(11+3)
00014E0C: 61 45 55 00                                            dw instructions_12-instructions,(instructions_13-instructions_12)/(12+3)
00014E10: 5C 4A 1B 00                                            dw instructions_13-instructions,(instructions_14-instructions_13)/(13+3)
00014E14: 0C 4C 1C 00                                            dw instructions_14-instructions,(instructions_15-instructions_14)/(14+3)
00014E18: E8 4D 0D 00                                            dw instructions_15-instructions,(instructions_16-instructions_15)/(15+3)
00014E1C: D2 4E 02 00                                            dw instructions_16-instructions,(instructions_17-instructions_16)/(16+3)
00014E20: F8 4E 01 00                                            dw instructions_17-instructions,(instructions_end-instructions_17)/(17+3)
                                                                
                                                                instructions_2:
00014E24: 62 74 04                                               db 'bt',4
00014E27: 69 82                                                  dw bt_instruction-instruction_handler
00014E29: 69 66 00                                               db 'if',0
00014E2C: 51 0A                                                  dw if_directive-instruction_handler
00014E2E: 69 6E 00                                               db 'in',0
00014E31: 10 87                                                  dw in_instruction-instruction_handler
00014E33: 6A 61 77                                               db 'ja',77h
00014E36: E2 8C                                                  dw conditional_jump-instruction_handler
00014E38: 6A 62 72                                               db 'jb',72h
00014E3B: E2 8C                                                  dw conditional_jump-instruction_handler
00014E3D: 6A 63 72                                               db 'jc',72h
00014E40: E2 8C                                                  dw conditional_jump-instruction_handler
00014E42: 6A 65 74                                               db 'je',74h
00014E45: E2 8C                                                  dw conditional_jump-instruction_handler
00014E47: 6A 67 7F                                               db 'jg',7Fh
00014E4A: E2 8C                                                  dw conditional_jump-instruction_handler
00014E4C: 6A 6C 7C                                               db 'jl',7Ch
00014E4F: E2 8C                                                  dw conditional_jump-instruction_handler
00014E51: 6A 6F 70                                               db 'jo',70h
00014E54: E2 8C                                                  dw conditional_jump-instruction_handler
00014E56: 6A 70 7A                                               db 'jp',7Ah
00014E59: E2 8C                                                  dw conditional_jump-instruction_handler
00014E5B: 6A 73 78                                               db 'js',78h
00014E5E: E2 8C                                                  dw conditional_jump-instruction_handler
00014E60: 6A 7A 74                                               db 'jz',74h
00014E63: E2 8C                                                  dw conditional_jump-instruction_handler
00014E65: 6F 72 08                                               db 'or',08h
00014E68: 5A 65                                                  dw basic_instruction-instruction_handler
                                                                instructions_3:
00014E6A: 61 61 61 37                                            db 'aaa',37h
00014E6E: FE 63                                                  dw simple_instruction_except64-instruction_handler
00014E70: 61 61 64 D5                                            db 'aad',0D5h
00014E74: 16 65                                                  dw aa_instruction-instruction_handler
00014E76: 61 61 6D D4                                            db 'aam',0D4h
00014E7A: 16 65                                                  dw aa_instruction-instruction_handler
00014E7C: 61 61 73 3F                                            db 'aas',3Fh
00014E80: FE 63                                                  dw simple_instruction_except64-instruction_handler
00014E82: 61 64 63 10                                            db 'adc',10h
00014E86: 5A 65                                                  dw basic_instruction-instruction_handler
00014E88: 61 64 64 00                                            db 'add',00h
00014E8C: 5A 65                                                  dw basic_instruction-instruction_handler
00014E8E: 61 6E 64 20                                            db 'and',20h
00014E92: 5A 65                                                  dw basic_instruction-instruction_handler
00014E94: 62 6E 64 F2                                            db 'bnd',0F2h
00014E98: D9 64                                                  dw bnd_prefix_instruction-instruction_handler
00014E9A: 62 73 66 BC                                            db 'bsf',0BCh
00014E9E: AE 83                                                  dw bs_instruction-instruction_handler
00014EA0: 62 73 72 BD                                            db 'bsr',0BDh
00014EA4: AE 83                                                  dw bs_instruction-instruction_handler
00014EA6: 62 74 63 07                                            db 'btc',7
00014EAA: 69 82                                                  dw bt_instruction-instruction_handler
00014EAC: 62 74 72 06                                            db 'btr',6
00014EB0: 69 82                                                  dw bt_instruction-instruction_handler
00014EB2: 62 74 73 05                                            db 'bts',5
00014EB6: 69 82                                                  dw bt_instruction-instruction_handler
00014EB8: 63 62 77 98                                            db 'cbw',98h
00014EBC: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
00014EBE: 63 64 71 99                                            db 'cdq',99h
00014EC2: 54 64                                                  dw simple_instruction_32bit-instruction_handler
00014EC4: 63 6C 63 F8                                            db 'clc',0F8h
00014EC8: 0B 64                                                  dw simple_instruction-instruction_handler
00014ECA: 63 6C 64 FC                                            db 'cld',0FCh
00014ECE: 0B 64                                                  dw simple_instruction-instruction_handler
00014ED0: 63 6C 69 FA                                            db 'cli',0FAh
00014ED4: 0B 64                                                  dw simple_instruction-instruction_handler
00014ED6: 63 6D 63 F5                                            db 'cmc',0F5h
00014EDA: 0B 64                                                  dw simple_instruction-instruction_handler
00014EDC: 63 6D 70 38                                            db 'cmp',38h
00014EE0: 5A 65                                                  dw basic_instruction-instruction_handler
00014EE2: 63 71 6F 99                                            db 'cqo',99h
00014EE6: 6C 64                                                  dw simple_instruction_64bit-instruction_handler
00014EE8: 63 77 64 99                                            db 'cwd',99h
00014EEC: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
00014EEE: 64 61 61 27                                            db 'daa',27h
00014EF2: FE 63                                                  dw simple_instruction_except64-instruction_handler
00014EF4: 64 61 73 2F                                            db 'das',2Fh
00014EF8: FE 63                                                  dw simple_instruction_except64-instruction_handler
00014EFA: 64 65 63 01                                            db 'dec',1
00014EFE: 1C 7A                                                  dw inc_instruction-instruction_handler
00014F00: 64 69 76 06                                            db 'div',6
00014F04: 21 69                                                  dw single_operand_instruction-instruction_handler
00014F06: 65 6E 64 00                                            db 'end',0
00014F0A: 48 0C                                                  dw end_directive-instruction_handler
00014F0C: 65 72 72 00                                            db 'err',0
00014F10: 31 15                                                  dw err_directive-instruction_handler
00014F12: 66 6C 64 00                                            db 'fld',0
00014F16: 3E 98                                                  dw fld_instruction-instruction_handler
00014F18: 66 73 74 02                                            db 'fst',2
00014F1C: 3E 98                                                  dw fld_instruction-instruction_handler
00014F1E: 68 6C 74 F4                                            db 'hlt',0F4h
00014F22: 0B 64                                                  dw simple_instruction-instruction_handler
00014F24: 69 6E 63 00                                            db 'inc',0
00014F28: 1C 7A                                                  dw inc_instruction-instruction_handler
00014F2A: 69 6E 73 6C                                            db 'ins',6Ch
00014F2E: 11 92                                                  dw ins_instruction-instruction_handler
00014F30: 69 6E 74 CD                                            db 'int',0CDh
00014F34: E6 64                                                  dw int_instruction-instruction_handler
00014F36: 6A 61 65 73                                            db 'jae',73h
00014F3A: E2 8C                                                  dw conditional_jump-instruction_handler
00014F3C: 6A 62 65 76                                            db 'jbe',76h
00014F40: E2 8C                                                  dw conditional_jump-instruction_handler
00014F42: 6A 67 65 7D                                            db 'jge',7Dh
00014F46: E2 8C                                                  dw conditional_jump-instruction_handler
00014F48: 6A 6C 65 7E                                            db 'jle',7Eh
00014F4C: E2 8C                                                  dw conditional_jump-instruction_handler
00014F4E: 6A 6D 70 00                                            db 'jmp',0
00014F52: B2 88                                                  dw jmp_instruction-instruction_handler
00014F54: 6A 6E 61 76                                            db 'jna',76h
00014F58: E2 8C                                                  dw conditional_jump-instruction_handler
00014F5A: 6A 6E 62 73                                            db 'jnb',73h
00014F5E: E2 8C                                                  dw conditional_jump-instruction_handler
00014F60: 6A 6E 63 73                                            db 'jnc',73h
00014F64: E2 8C                                                  dw conditional_jump-instruction_handler
00014F66: 6A 6E 65 75                                            db 'jne',75h
00014F6A: E2 8C                                                  dw conditional_jump-instruction_handler
00014F6C: 6A 6E 67 7E                                            db 'jng',7Eh
00014F70: E2 8C                                                  dw conditional_jump-instruction_handler
00014F72: 6A 6E 6C 7D                                            db 'jnl',7Dh
00014F76: E2 8C                                                  dw conditional_jump-instruction_handler
00014F78: 6A 6E 6F 71                                            db 'jno',71h
00014F7C: E2 8C                                                  dw conditional_jump-instruction_handler
00014F7E: 6A 6E 70 7B                                            db 'jnp',7Bh
00014F82: E2 8C                                                  dw conditional_jump-instruction_handler
00014F84: 6A 6E 73 79                                            db 'jns',79h
00014F88: E2 8C                                                  dw conditional_jump-instruction_handler
00014F8A: 6A 6E 7A 75                                            db 'jnz',75h
00014F8E: E2 8C                                                  dw conditional_jump-instruction_handler
00014F90: 6A 70 65 7A                                            db 'jpe',7Ah
00014F94: E2 8C                                                  dw conditional_jump-instruction_handler
00014F96: 6A 70 6F 7B                                            db 'jpo',7Bh
00014F9A: E2 8C                                                  dw conditional_jump-instruction_handler
00014F9C: 6C 61 72 02                                            db 'lar',2
00014FA0: A8 94                                                  dw lar_instruction-instruction_handler
00014FA2: 6C 64 73 03                                            db 'lds',3
00014FA6: A4 7D                                                  dw ls_instruction-instruction_handler
00014FA8: 6C 65 61 00                                            db 'lea',0
00014FAC: 57 7D                                                  dw lea_instruction-instruction_handler
00014FAE: 6C 65 73 00                                            db 'les',0
00014FB2: A4 7D                                                  dw ls_instruction-instruction_handler
00014FB4: 6C 66 73 04                                            db 'lfs',4
00014FB8: A4 7D                                                  dw ls_instruction-instruction_handler
00014FBA: 6C 67 73 05                                            db 'lgs',5
00014FBE: A4 7D                                                  dw ls_instruction-instruction_handler
00014FC0: 6C 73 6C 03                                            db 'lsl',3
00014FC4: A8 94                                                  dw lar_instruction-instruction_handler
00014FC6: 6C 73 73 02                                            db 'lss',2
00014FCA: A4 7D                                                  dw ls_instruction-instruction_handler
00014FCC: 6C 74 72 03                                            db 'ltr',3
00014FD0: A9 93                                                  dw pm_word_instruction-instruction_handler
00014FD2: 6D 6F 76 00                                            db 'mov',0
00014FD6: 87 69                                                  dw mov_instruction-instruction_handler
00014FD8: 6D 75 6C 04                                            db 'mul',4
00014FDC: 21 69                                                  dw single_operand_instruction-instruction_handler
00014FDE: 6E 65 67 03                                            db 'neg',3
00014FE2: 21 69                                                  dw single_operand_instruction-instruction_handler
00014FE4: 6E 6F 70 90                                            db 'nop',90h
00014FE8: 8E 96                                                  dw nop_instruction-instruction_handler
00014FEA: 6E 6F 74 02                                            db 'not',2
00014FEE: 21 69                                                  dw single_operand_instruction-instruction_handler
00014FF0: 6F 72 67 00                                            db 'org',0
00014FF4: 2D 00                                                  dw org_directive-instruction_handler
00014FF6: 6F 75 74 00                                            db 'out',0
00014FFA: C8 87                                                  dw out_instruction-instruction_handler
00014FFC: 70 6F 70 00                                            db 'pop',0
00015000: C0 77                                                  dw pop_instruction-instruction_handler
00015002: 70 6F 72 EB                                            db 'por',0EBh
00015006: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00015008: 72 63 6C 02                                            db 'rcl',2
0001500C: 3A 7E                                                  dw sh_instruction-instruction_handler
0001500E: 72 63 72 03                                            db 'rcr',3
00015012: 3A 7E                                                  dw sh_instruction-instruction_handler
00015014: 72 65 70 F3                                            db 'rep',0F3h
00015018: A6 64                                                  dw prefix_instruction-instruction_handler
0001501A: 72 65 74 C2                                            db 'ret',0C2h
0001501E: A7 7C                                                  dw ret_instruction-instruction_handler
00015020: 72 6F 6C 00                                            db 'rol',0
00015024: 3A 7E                                                  dw sh_instruction-instruction_handler
00015026: 72 6F 72 01                                            db 'ror',1
0001502A: 3A 7E                                                  dw sh_instruction-instruction_handler
0001502C: 72 73 6D AA                                            db 'rsm',0AAh
00015030: 95 64                                                  dw simple_extended_instruction-instruction_handler
00015032: 73 61 6C 04                                            db 'sal',4
00015036: 3A 7E                                                  dw sh_instruction-instruction_handler
00015038: 73 61 72 07                                            db 'sar',7
0001503C: 3A 7E                                                  dw sh_instruction-instruction_handler
0001503E: 73 62 62 18                                            db 'sbb',18h
00015042: 5A 65                                                  dw basic_instruction-instruction_handler
00015044: 73 68 6C 04                                            db 'shl',4
00015048: 3A 7E                                                  dw sh_instruction-instruction_handler
0001504A: 73 68 72 05                                            db 'shr',5
0001504E: 3A 7E                                                  dw sh_instruction-instruction_handler
00015050: 73 74 63 F9                                            db 'stc',0F9h
00015054: 0B 64                                                  dw simple_instruction-instruction_handler
00015056: 73 74 64 FD                                            db 'std',0FDh
0001505A: 0B 64                                                  dw simple_instruction-instruction_handler
0001505C: 73 74 69 FB                                            db 'sti',0FBh
00015060: 0B 64                                                  dw simple_instruction-instruction_handler
00015062: 73 74 72 01                                            db 'str',1
00015066: 05 94                                                  dw pm_store_word_instruction-instruction_handler
00015068: 73 75 62 28                                            db 'sub',28h
0001506C: 5A 65                                                  dw basic_instruction-instruction_handler
0001506E: 75 64 30 FF                                            db 'ud0',0FFh
00015072: 12 84                                                  dw ud_instruction-instruction_handler
00015074: 75 64 31 B9                                            db 'ud1',0B9h
00015078: 12 84                                                  dw ud_instruction-instruction_handler
0001507A: 75 64 32 0B                                            db 'ud2',0Bh
0001507E: 95 64                                                  dw simple_extended_instruction-instruction_handler
00015080: 78 6F 72 30                                            db 'xor',30h
00015084: 5A 65                                                  dw basic_instruction-instruction_handler
                                                                instructions_4:
00015086: 61 64 63 78 66                                         db 'adcx',66h
0001508B: 08 B3                                                  dw adx_instruction-instruction_handler
0001508D: 61 64 6F 78 F3                                         db 'adox',0F3h
00015092: 08 B3                                                  dw adx_instruction-instruction_handler
00015094: 61 6E 64 6E F2                                         db 'andn',0F2h
00015099: 59 EC                                                  dw andn_instruction-instruction_handler
0001509B: 61 72 70 6C 00                                         db 'arpl',0
000150A0: 1B 7B                                                  dw arpl_instruction-instruction_handler
000150A2: 62 6C 63 69 26                                         db 'blci',26h
000150A7: FA ED                                                  dw tbm_instruction-instruction_handler
000150A9: 62 6C 63 73 13                                         db 'blcs',13h
000150AE: FA ED                                                  dw tbm_instruction-instruction_handler
000150B0: 62 6C 73 69 03                                         db 'blsi',3
000150B5: AD EB                                                  dw bmi_instruction-instruction_handler
000150B7: 62 6C 73 72 01                                         db 'blsr',1
000150BC: AD EB                                                  dw bmi_instruction-instruction_handler
000150BE: 62 7A 68 69 F5                                         db 'bzhi',0F5h
000150C3: B3 EC                                                  dw bzhi_instruction-instruction_handler
000150C5: 63 61 6C 6C 00                                         db 'call',0
000150CA: 9B 88                                                  dw call_instruction-instruction_handler
000150CC: 63 64 71 65 98                                         db 'cdqe',98h
000150D1: 6C 64                                                  dw simple_instruction_64bit-instruction_handler
000150D3: 63 6C 61 63 CA                                         db 'clac',0CAh
000150D8: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
000150DA: 63 6C 67 69 DD                                         db 'clgi',0DDh
000150DF: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
000150E1: 63 6C 74 73 06                                         db 'clts',6
000150E6: 95 64                                                  dw simple_extended_instruction-instruction_handler
000150E8: 63 6C 77 62 06                                         db 'clwb',6
000150ED: AC AE                                                  dw clflushopt_instruction-instruction_handler
000150EF: 63 6D 70 73 A6                                         db 'cmps',0A6h
000150F4: 3F 91                                                  dw cmps_instruction-instruction_handler
000150F6: 63 77 64 65 98                                         db 'cwde',98h
000150FB: 54 64                                                  dw simple_instruction_32bit-instruction_handler
000150FD: 64 61 74 61 00                                         db 'data',0
00015102: E4 40                                                  dw data_directive-instruction_handler
00015104: 64 70 70 64 41                                         db 'dppd',41h
00015109: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
0001510B: 64 70 70 73 40                                         db 'dpps',40h
00015110: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00015112: 65 6C 73 65 00                                         db 'else',0
00015117: C9 0A                                                  dw else_directive-instruction_handler
00015119: 65 6D 6D 73 77                                         db 'emms',77h
0001511E: 95 64                                                  dw simple_extended_instruction-instruction_handler
00015120: 66 61 62 73 21                                         db 'fabs',100001b
00015125: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015127: 66 61 64 64 00                                         db 'fadd',0
0001512C: F8 96                                                  dw basic_fpu_instruction-instruction_handler
0001512E: 66 62 6C 64 04                                         db 'fbld',4
00015133: 6B 99                                                  dw fbld_instruction-instruction_handler
00015135: 66 63 68 73 20                                         db 'fchs',100000b
0001513A: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001513C: 66 63 6F 6D 02                                         db 'fcom',2
00015141: F8 96                                                  dw basic_fpu_instruction-instruction_handler
00015143: 66 63 6F 73 3F                                         db 'fcos',111111b
00015148: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001514A: 66 64 69 76 06                                         db 'fdiv',6
0001514F: F8 96                                                  dw basic_fpu_instruction-instruction_handler
00015151: 66 65 6E 69 E0                                         db 'feni',0E0h
00015156: 5A 9B                                                  dw finit_instruction-instruction_handler
00015158: 66 69 6C 64 00                                         db 'fild',0
0001515D: E4 98                                                  dw fild_instruction-instruction_handler
0001515F: 66 69 73 74 02                                         db 'fist',2
00015164: E4 98                                                  dw fild_instruction-instruction_handler
00015166: 66 6C 64 31 28                                         db 'fld1',101000b
0001516B: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001516D: 66 6C 64 7A 2E                                         db 'fldz',101110b
00015172: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015174: 66 6D 75 6C 01                                         db 'fmul',1
00015179: F8 96                                                  dw basic_fpu_instruction-instruction_handler
0001517B: 66 6E 6F 70 10                                         db 'fnop',010000b
00015180: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015182: 66 73 69 6E 3E                                         db 'fsin',111110b
00015187: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015189: 66 73 74 70 03                                         db 'fstp',3
0001518E: 3E 98                                                  dw fld_instruction-instruction_handler
00015190: 66 73 75 62 04                                         db 'fsub',4
00015195: F8 96                                                  dw basic_fpu_instruction-instruction_handler
00015197: 66 74 73 74 24                                         db 'ftst',100100b
0001519C: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001519E: 66 78 61 6D 25                                         db 'fxam',100101b
000151A3: E6 97                                                  dw simple_fpu_instruction-instruction_handler
000151A5: 66 78 63 68 00                                         db 'fxch',0
000151AA: 0A 9A                                                  dw fxch_instruction-instruction_handler
000151AC: 68 65 61 70 00                                         db 'heap',0
000151B1: 99 32                                                  dw heap_directive-instruction_handler
000151B3: 69 64 69 76 07                                         db 'idiv',7
000151B8: 21 69                                                  dw single_operand_instruction-instruction_handler
000151BA: 69 6D 75 6C 00                                         db 'imul',0
000151BF: 45 84                                                  dw imul_instruction-instruction_handler
000151C1: 69 6E 73 62 6C                                         db 'insb',6Ch
000151C6: 0B 64                                                  dw simple_instruction-instruction_handler
000151C8: 69 6E 73 64 6D                                         db 'insd',6Dh
000151CD: 54 64                                                  dw simple_instruction_32bit-instruction_handler
000151CF: 69 6E 73 77 6D                                         db 'insw',6Dh
000151D4: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
000151D6: 69 6E 74 31 F1                                         db 'int1',0F1h
000151DB: 0B 64                                                  dw simple_instruction-instruction_handler
000151DD: 69 6E 74 33 CC                                         db 'int3',0CCh
000151E2: 0B 64                                                  dw simple_instruction-instruction_handler
000151E4: 69 6E 74 6F CE                                         db 'into',0CEh
000151E9: FE 63                                                  dw simple_instruction_except64-instruction_handler
000151EB: 69 6E 76 64 08                                         db 'invd',8
000151F0: 95 64                                                  dw simple_extended_instruction-instruction_handler
000151F2: 69 72 65 74 CF                                         db 'iret',0CFh
000151F7: 63 64                                                  dw iret_instruction-instruction_handler
000151F9: 6A 63 78 7A E3                                         db 'jcxz',0E3h
000151FE: 24 8E                                                  dw loop_instruction_16bit-instruction_handler
00015200: 6A 6E 61 65 72                                         db 'jnae',72h
00015205: E2 8C                                                  dw conditional_jump-instruction_handler
00015207: 6A 6E 62 65 77                                         db 'jnbe',77h
0001520C: E2 8C                                                  dw conditional_jump-instruction_handler
0001520E: 6A 6E 67 65 7C                                         db 'jnge',7Ch
00015213: E2 8C                                                  dw conditional_jump-instruction_handler
00015215: 6A 6E 6C 65 7F                                         db 'jnle',7Fh
0001521A: E2 8C                                                  dw conditional_jump-instruction_handler
0001521C: 6B 6F 72 62 45                                         db 'korb',45h
00015221: 29 D7                                                  dw mask_instruction_b-instruction_handler
00015223: 6B 6F 72 64 45                                         db 'kord',45h
00015228: 32 D7                                                  dw mask_instruction_d-instruction_handler
0001522A: 6B 6F 72 71 45                                         db 'korq',45h
0001522F: 39 D7                                                  dw mask_instruction_q-instruction_handler
00015231: 6B 6F 72 77 45                                         db 'korw',45h
00015236: 40 D7                                                  dw mask_instruction_w-instruction_handler
00015238: 6C 61 68 66 9F                                         db 'lahf',9Fh
0001523D: 0B 64                                                  dw simple_instruction-instruction_handler
0001523F: 6C 67 64 74 02                                         db 'lgdt',2
00015244: 3C 94                                                  dw lgdt_instruction-instruction_handler
00015246: 6C 69 64 74 03                                         db 'lidt',3
0001524B: 3C 94                                                  dw lgdt_instruction-instruction_handler
0001524D: 6C 6C 64 74 02                                         db 'lldt',2
00015252: A9 93                                                  dw pm_word_instruction-instruction_handler
00015254: 6C 6D 73 77 16                                         db 'lmsw',16h
00015259: A9 93                                                  dw pm_word_instruction-instruction_handler
0001525B: 6C 6F 61 64 00                                         db 'load',0
00015260: 8D 01                                                  dw load_directive-instruction_handler
00015262: 6C 6F 63 6B F0                                         db 'lock',0F0h
00015267: A6 64                                                  dw prefix_instruction-instruction_handler
00015269: 6C 6F 64 73 AC                                         db 'lods',0ACh
0001526E: 59 90                                                  dw lods_instruction-instruction_handler
00015270: 6C 6F 6F 70 E2                                         db 'loop',0E2h
00015275: 62 8E                                                  dw loop_instruction-instruction_handler
00015277: 6D 6F 76 64 00                                         db 'movd',0
0001527C: AC 9E                                                  dw movd_instruction-instruction_handler
0001527E: 6D 6F 76 71 00                                         db 'movq',0
00015283: A6 9F                                                  dw movq_instruction-instruction_handler
00015285: 6D 6F 76 73 A4                                         db 'movs',0A4h
0001528A: 5A 8F                                                  dw movs_instruction-instruction_handler
0001528C: 6D 75 6C 78 F6                                         db 'mulx',0F6h
00015291: 49 EC                                                  dw pdep_instruction-instruction_handler
00015293: 6F 72 70 64 56                                         db 'orpd',56h
00015298: 62 A2                                                  dw sse_pd_instruction-instruction_handler
0001529A: 6F 72 70 73 56                                         db 'orps',56h
0001529F: 4F A2                                                  dw sse_ps_instruction-instruction_handler
000152A1: 6F 75 74 73 6E                                         db 'outs',6Eh
000152A6: AB 92                                                  dw outs_instruction-instruction_handler
000152A8: 70 61 6E 64 DB                                         db 'pand',0DBh
000152AD: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000152AF: 70 64 65 70 F5                                         db 'pdep',0F5h
000152B4: 49 EC                                                  dw pdep_instruction-instruction_handler
000152B6: 70 65 78 74 F5                                         db 'pext',0F5h
000152BB: 52 EC                                                  dw pext_instruction-instruction_handler
000152BD: 70 6F 70 61 61                                         db 'popa',61h
000152C2: FE 63                                                  dw simple_instruction_except64-instruction_handler
000152C4: 70 6F 70 64 04                                         db 'popd',4
000152C9: C0 77                                                  dw pop_instruction-instruction_handler
000152CB: 70 6F 70 66 9D                                         db 'popf',9Dh
000152D0: 0B 64                                                  dw simple_instruction-instruction_handler
000152D2: 70 6F 70 71 08                                         db 'popq',8
000152D7: C0 77                                                  dw pop_instruction-instruction_handler
000152D9: 70 6F 70 77 02                                         db 'popw',2
000152DE: C0 77                                                  dw pop_instruction-instruction_handler
000152E0: 70 75 73 68 00                                         db 'push',0
000152E5: 2C 74                                                  dw push_instruction-instruction_handler
000152E7: 70 78 6F 72 EF                                         db 'pxor',0EFh
000152EC: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000152EE: 72 65 70 65 F3                                         db 'repe',0F3h
000152F3: A6 64                                                  dw prefix_instruction-instruction_handler
000152F5: 72 65 70 7A F3                                         db 'repz',0F3h
000152FA: A6 64                                                  dw prefix_instruction-instruction_handler
000152FC: 72 65 74 64 C2                                         db 'retd',0C2h
00015301: 87 7C                                                  dw ret_instruction_32bit_except64-instruction_handler
00015303: 72 65 74 66 CA                                         db 'retf',0CAh
00015308: 2C 7D                                                  dw retf_instruction-instruction_handler
0001530A: 72 65 74 6E C2                                         db 'retn',0C2h
0001530F: A7 7C                                                  dw ret_instruction-instruction_handler
00015311: 72 65 74 71 C2                                         db 'retq',0C2h
00015316: 78 7C                                                  dw ret_instruction_only64-instruction_handler
00015318: 72 65 74 77 C2                                         db 'retw',0C2h
0001531D: 9B 7C                                                  dw ret_instruction_16bit-instruction_handler
0001531F: 72 6F 72 78 F0                                         db 'rorx',0F0h
00015324: BE ED                                                  dw rorx_instruction-instruction_handler
00015326: 73 61 68 66 9E                                         db 'sahf',9Eh
0001532B: 0B 64                                                  dw simple_instruction-instruction_handler
0001532D: 73 61 6C 63 D6                                         db 'salc',0D6h
00015332: FE 63                                                  dw simple_instruction_except64-instruction_handler
00015334: 73 61 72 78 F7                                         db 'sarx',0F7h
00015339: 9A EC                                                  dw sarx_instruction-instruction_handler
0001533B: 73 63 61 73 AE                                         db 'scas',0AEh
00015340: C5 90                                                  dw stos_instruction-instruction_handler
00015342: 73 65 74 61 97                                         db 'seta',97h
00015347: C2 7A                                                  dw set_instruction-instruction_handler
00015349: 73 65 74 62 92                                         db 'setb',92h
0001534E: C2 7A                                                  dw set_instruction-instruction_handler
00015350: 73 65 74 63 92                                         db 'setc',92h
00015355: C2 7A                                                  dw set_instruction-instruction_handler
00015357: 73 65 74 65 94                                         db 'sete',94h
0001535C: C2 7A                                                  dw set_instruction-instruction_handler
0001535E: 73 65 74 67 9F                                         db 'setg',9Fh
00015363: C2 7A                                                  dw set_instruction-instruction_handler
00015365: 73 65 74 6C 9C                                         db 'setl',9Ch
0001536A: C2 7A                                                  dw set_instruction-instruction_handler
0001536C: 73 65 74 6F 90                                         db 'seto',90h
00015371: C2 7A                                                  dw set_instruction-instruction_handler
00015373: 73 65 74 70 9A                                         db 'setp',9Ah
00015378: C2 7A                                                  dw set_instruction-instruction_handler
0001537A: 73 65 74 73 98                                         db 'sets',98h
0001537F: C2 7A                                                  dw set_instruction-instruction_handler
00015381: 73 65 74 7A 94                                         db 'setz',94h
00015386: C2 7A                                                  dw set_instruction-instruction_handler
00015388: 73 67 64 74 00                                         db 'sgdt',0
0001538D: 3C 94                                                  dw lgdt_instruction-instruction_handler
0001538F: 73 68 6C 64 A4                                         db 'shld',0A4h
00015394: FB 7F                                                  dw shd_instruction-instruction_handler
00015396: 73 68 6C 78 F7                                         db 'shlx',0F7h
0001539B: AC EC                                                  dw shlx_instruction-instruction_handler
0001539D: 73 68 72 64 AC                                         db 'shrd',0ACh
000153A2: FB 7F                                                  dw shd_instruction-instruction_handler
000153A4: 73 68 72 78 F7                                         db 'shrx',0F7h
000153A9: A3 EC                                                  dw shrx_instruction-instruction_handler
000153AB: 73 69 64 74 01                                         db 'sidt',1
000153B0: 3C 94                                                  dw lgdt_instruction-instruction_handler
000153B2: 73 6C 64 74 00                                         db 'sldt',0
000153B7: 05 94                                                  dw pm_store_word_instruction-instruction_handler
000153B9: 73 6D 73 77 14                                         db 'smsw',14h
000153BE: 05 94                                                  dw pm_store_word_instruction-instruction_handler
000153C0: 73 74 61 63 CB                                         db 'stac',0CBh
000153C5: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
000153C7: 73 74 67 69 DC                                         db 'stgi',0DCh
000153CC: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
000153CE: 73 74 6F 73 AA                                         db 'stos',0AAh
000153D3: C5 90                                                  dw stos_instruction-instruction_handler
000153D5: 74 65 73 74 00                                         db 'test',0
000153DA: AA 70                                                  dw test_instruction-instruction_handler
000153DC: 76 65 72 72 04                                         db 'verr',4
000153E1: A9 93                                                  dw pm_word_instruction-instruction_handler
000153E3: 76 65 72 77 05                                         db 'verw',5
000153E8: A9 93                                                  dw pm_word_instruction-instruction_handler
000153EA: 76 70 6F 72 EB                                         db 'vpor',0EBh
000153EF: 56 C8                                                  dw avx_pd_instruction_noevex-instruction_handler
000153F1: 77 61 69 74 9B                                         db 'wait',9Bh
000153F6: 0B 64                                                  dw simple_instruction-instruction_handler
000153F8: 78 61 64 64 C0                                         db 'xadd',0C0h
000153FD: 6B 95                                                  dw basic_486_instruction-instruction_handler
000153FF: 78 63 68 67 00                                         db 'xchg',0
00015404: 64 73                                                  dw xchg_instruction-instruction_handler
00015406: 78 65 6E 64 D5                                         db 'xend',0D5h
0001540B: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
0001540D: 78 6C 61 74 D7                                         db 'xlat',0D7h
00015412: 32 93                                                  dw xlat_instruction-instruction_handler
                                                                instructions_5:
00015414: 61 64 64 70 64 58                                      db 'addpd',58h
0001541A: 62 A2                                                  dw sse_pd_instruction-instruction_handler
0001541C: 61 64 64 70 73 58                                      db 'addps',58h
00015422: 4F A2                                                  dw sse_ps_instruction-instruction_handler
00015424: 61 64 64 73 64 58                                      db 'addsd',58h
0001542A: 88 A2                                                  dw sse_sd_instruction-instruction_handler
0001542C: 61 64 64 73 73 58                                      db 'addss',58h
00015432: 75 A2                                                  dw sse_ss_instruction-instruction_handler
00015434: 61 6C 69 67 6E 00                                      db 'align',0
0001543A: 2E 14                                                  dw align_directive-instruction_handler
0001543C: 61 6E 64 70 64 54                                      db 'andpd',54h
00015442: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00015444: 61 6E 64 70 73 54                                      db 'andps',54h
0001544A: 4F A2                                                  dw sse_ps_instruction-instruction_handler
0001544C: 62 65 78 74 72 F7                                      db 'bextr',0F7h
00015452: 20 ED                                                  dw bextr_instruction-instruction_handler
00015454: 62 6C 63 69 63 15                                      db 'blcic',15h
0001545A: FA ED                                                  dw tbm_instruction-instruction_handler
0001545C: 62 6C 73 69 63 16                                      db 'blsic',16h
00015462: FA ED                                                  dw tbm_instruction-instruction_handler
00015464: 62 6E 64 63 6C 1A                                      db 'bndcl',1Ah
0001546A: C0 B7                                                  dw bndcl_instruction-instruction_handler
0001546C: 62 6E 64 63 6E 1B                                      db 'bndcn',1Bh
00015472: C4 B7                                                  dw bndcu_instruction-instruction_handler
00015474: 62 6E 64 63 75 1A                                      db 'bndcu',1Ah
0001547A: C4 B7                                                  dw bndcu_instruction-instruction_handler
0001547C: 62 6E 64 6D 6B 1B                                      db 'bndmk',1Bh
00015482: CA B8                                                  dw bndmk_instruction-instruction_handler
00015484: 62 6F 75 6E 64 00                                      db 'bound',0
0001548A: 90 7B                                                  dw bound_instruction-instruction_handler
0001548C: 62 72 65 61 6B 00                                      db 'break',0
00015492: 8B 0C                                                  dw break_directive-instruction_handler
00015494: 62 73 77 61 70 00                                      db 'bswap',0
0001549A: F4 95                                                  dw bswap_instruction-instruction_handler
0001549C: 63 6D 6F 76 61 47                                      db 'cmova',47h
000154A2: AE 83                                                  dw bs_instruction-instruction_handler
000154A4: 63 6D 6F 76 62 42                                      db 'cmovb',42h
000154AA: AE 83                                                  dw bs_instruction-instruction_handler
000154AC: 63 6D 6F 76 63 42                                      db 'cmovc',42h
000154B2: AE 83                                                  dw bs_instruction-instruction_handler
000154B4: 63 6D 6F 76 65 44                                      db 'cmove',44h
000154BA: AE 83                                                  dw bs_instruction-instruction_handler
000154BC: 63 6D 6F 76 67 4F                                      db 'cmovg',4Fh
000154C2: AE 83                                                  dw bs_instruction-instruction_handler
000154C4: 63 6D 6F 76 6C 4C                                      db 'cmovl',4Ch
000154CA: AE 83                                                  dw bs_instruction-instruction_handler
000154CC: 63 6D 6F 76 6F 40                                      db 'cmovo',40h
000154D2: AE 83                                                  dw bs_instruction-instruction_handler
000154D4: 63 6D 6F 76 70 4A                                      db 'cmovp',4Ah
000154DA: AE 83                                                  dw bs_instruction-instruction_handler
000154DC: 63 6D 6F 76 73 48                                      db 'cmovs',48h
000154E2: AE 83                                                  dw bs_instruction-instruction_handler
000154E4: 63 6D 6F 76 7A 44                                      db 'cmovz',44h
000154EA: AE 83                                                  dw bs_instruction-instruction_handler
000154EC: 63 6D 70 70 64 FF                                      db 'cmppd',-1
000154F2: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
000154F4: 63 6D 70 70 73 FF                                      db 'cmpps',-1
000154FA: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
000154FC: 63 6D 70 73 62 A6                                      db 'cmpsb',0A6h
00015502: 0B 64                                                  dw simple_instruction-instruction_handler
00015504: 63 6D 70 73 64 FF                                      db 'cmpsd',-1
0001550A: C5 A2                                                  dw cmpsd_instruction-instruction_handler
0001550C: 63 6D 70 73 71 A7                                      db 'cmpsq',0A7h
00015512: 6C 64                                                  dw simple_instruction_64bit-instruction_handler
00015514: 63 6D 70 73 73 FF                                      db 'cmpss',-1
0001551A: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
0001551C: 63 6D 70 73 77 A7                                      db 'cmpsw',0A7h
00015522: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
00015524: 63 70 75 69 64 A2                                      db 'cpuid',0A2h
0001552A: 95 64                                                  dw simple_extended_instruction-instruction_handler
0001552C: 63 72 63 33 32 00                                      db 'crc32',0
00015532: C4 B1                                                  dw crc32_instruction-instruction_handler
00015534: 64 69 76 70 64 5E                                      db 'divpd',5Eh
0001553A: 62 A2                                                  dw sse_pd_instruction-instruction_handler
0001553C: 64 69 76 70 73 5E                                      db 'divps',5Eh
00015542: 4F A2                                                  dw sse_ps_instruction-instruction_handler
00015544: 64 69 76 73 64 5E                                      db 'divsd',5Eh
0001554A: 88 A2                                                  dw sse_sd_instruction-instruction_handler
0001554C: 64 69 76 73 73 5E                                      db 'divss',5Eh
00015552: 75 A2                                                  dw sse_ss_instruction-instruction_handler
00015554: 65 6E 74 65 72 00                                      db 'enter',0
0001555A: E5 7B                                                  dw enter_instruction-instruction_handler
0001555C: 65 6E 74 72 79 00                                      db 'entry',0
00015562: 33 32                                                  dw entry_directive-instruction_handler
00015564: 65 78 74 72 6E 00                                      db 'extrn',0
0001556A: BA 33                                                  dw extrn_directive-instruction_handler
0001556C: 65 78 74 72 71 00                                      db 'extrq',0
00015572: C3 B0                                                  dw extrq_instruction-instruction_handler
00015574: 66 32 78 6D 31 30                                      db 'f2xm1',110000b
0001557A: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001557C: 66 61 64 64 70 00                                      db 'faddp',0
00015582: A1 99                                                  dw faddp_instruction-instruction_handler
00015584: 66 62 73 74 70 06                                      db 'fbstp',6
0001558A: 6B 99                                                  dw fbld_instruction-instruction_handler
0001558C: 66 63 6C 65 78 E2                                      db 'fclex',0E2h
00015592: 5A 9B                                                  dw finit_instruction-instruction_handler
00015594: 66 63 6F 6D 69 F0                                      db 'fcomi',0F0h
0001559A: 6D 9B                                                  dw fcomi_instruction-instruction_handler
0001559C: 66 63 6F 6D 70 03                                      db 'fcomp',3
000155A2: F8 96                                                  dw basic_fpu_instruction-instruction_handler
000155A4: 66 64 69 73 69 E1                                      db 'fdisi',0E1h
000155AA: 5A 9B                                                  dw finit_instruction-instruction_handler
000155AC: 66 64 69 76 70 07                                      db 'fdivp',7
000155B2: A1 99                                                  dw faddp_instruction-instruction_handler
000155B4: 66 64 69 76 72 07                                      db 'fdivr',7
000155BA: F8 96                                                  dw basic_fpu_instruction-instruction_handler
000155BC: 66 65 6D 6D 73 0E                                      db 'femms',0Eh
000155C2: 95 64                                                  dw simple_extended_instruction-instruction_handler
000155C4: 66 66 72 65 65 00                                      db 'ffree',0
000155CA: 16 9A                                                  dw ffree_instruction-instruction_handler
000155CC: 66 69 61 64 64 00                                      db 'fiadd',0
000155D2: F4 97                                                  dw fi_instruction-instruction_handler
000155D4: 66 69 63 6F 6D 02                                      db 'ficom',2
000155DA: F4 97                                                  dw fi_instruction-instruction_handler
000155DC: 66 69 64 69 76 06                                      db 'fidiv',6
000155E2: F4 97                                                  dw fi_instruction-instruction_handler
000155E4: 66 69 6D 75 6C 01                                      db 'fimul',1
000155EA: F4 97                                                  dw fi_instruction-instruction_handler
000155EC: 66 69 6E 69 74 E3                                      db 'finit',0E3h
000155F2: 5A 9B                                                  dw finit_instruction-instruction_handler
000155F4: 66 69 73 74 70 03                                      db 'fistp',3
000155FA: E4 98                                                  dw fild_instruction-instruction_handler
000155FC: 66 69 73 75 62 04                                      db 'fisub',4
00015602: F4 97                                                  dw fi_instruction-instruction_handler
00015604: 66 6C 64 63 77 05                                      db 'fldcw',5
0001560A: CA 9A                                                  dw fldcw_instruction-instruction_handler
0001560C: 66 6C 64 70 69 2B                                      db 'fldpi',101011b
00015612: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015614: 66 6D 75 6C 70 01                                      db 'fmulp',1
0001561A: A1 99                                                  dw faddp_instruction-instruction_handler
0001561C: 66 6E 65 6E 69 E0                                      db 'fneni',0E0h
00015622: 5E 9B                                                  dw fninit_instruction-instruction_handler
00015624: 66 70 72 65 6D 38                                      db 'fprem',111000b
0001562A: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001562C: 66 70 74 61 6E 32                                      db 'fptan',110010b
00015632: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015634: 66 73 61 76 65 06                                      db 'fsave',6
0001563A: 91 9A                                                  dw fsave_instruction-instruction_handler
0001563C: 66 73 71 72 74 3A                                      db 'fsqrt',111010b
00015642: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015644: 66 73 74 63 77 07                                      db 'fstcw',7
0001564A: C6 9A                                                  dw fstcw_instruction-instruction_handler
0001564C: 66 73 74 73 77 00                                      db 'fstsw',0
00015652: 00 9B                                                  dw fstsw_instruction-instruction_handler
00015654: 66 73 75 62 70 05                                      db 'fsubp',5
0001565A: A1 99                                                  dw faddp_instruction-instruction_handler
0001565C: 66 73 75 62 72 05                                      db 'fsubr',5
00015662: F8 96                                                  dw basic_fpu_instruction-instruction_handler
00015664: 66 75 63 6F 6D 04                                      db 'fucom',4
0001566A: 16 9A                                                  dw ffree_instruction-instruction_handler
0001566C: 66 77 61 69 74 9B                                      db 'fwait',9Bh
00015672: 0B 64                                                  dw simple_instruction-instruction_handler
00015674: 66 79 6C 32 78 31                                      db 'fyl2x',110001b
0001567A: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001567C: 69 63 65 62 70 F1                                      db 'icebp',0F1h
00015682: 0B 64                                                  dw simple_instruction-instruction_handler
00015684: 69 72 65 74 64 CF                                      db 'iretd',0CFh
0001568A: 54 64                                                  dw simple_instruction_32bit-instruction_handler
0001568C: 69 72 65 74 71 CF                                      db 'iretq',0CFh
00015692: 6C 64                                                  dw simple_instruction_64bit-instruction_handler
00015694: 69 72 65 74 77 CF                                      db 'iretw',0CFh
0001569A: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
0001569C: 6A 65 63 78 7A E3                                      db 'jecxz',0E3h
000156A2: 43 8E                                                  dw loop_instruction_32bit-instruction_handler
000156A4: 6A 72 63 78 7A E3                                      db 'jrcxz',0E3h
000156AA: 55 8E                                                  dw loop_instruction_64bit-instruction_handler
000156AC: 6B 61 64 64 62 4A                                      db 'kaddb',4Ah
000156B2: 29 D7                                                  dw mask_instruction_b-instruction_handler
000156B4: 6B 61 64 64 64 4A                                      db 'kaddd',4Ah
000156BA: 32 D7                                                  dw mask_instruction_d-instruction_handler
000156BC: 6B 61 64 64 71 4A                                      db 'kaddq',4Ah
000156C2: 39 D7                                                  dw mask_instruction_q-instruction_handler
000156C4: 6B 61 64 64 77 4A                                      db 'kaddw',4Ah
000156CA: 40 D7                                                  dw mask_instruction_w-instruction_handler
000156CC: 6B 61 6E 64 62 41                                      db 'kandb',41h
000156D2: 29 D7                                                  dw mask_instruction_b-instruction_handler
000156D4: 6B 61 6E 64 64 41                                      db 'kandd',41h
000156DA: 32 D7                                                  dw mask_instruction_d-instruction_handler
000156DC: 6B 61 6E 64 71 41                                      db 'kandq',41h
000156E2: 39 D7                                                  dw mask_instruction_q-instruction_handler
000156E4: 6B 61 6E 64 77 41                                      db 'kandw',41h
000156EA: 40 D7                                                  dw mask_instruction_w-instruction_handler
000156EC: 6B 6D 6F 76 62 01                                      db 'kmovb',1
000156F2: BD D7                                                  dw kmov_instruction-instruction_handler
000156F4: 6B 6D 6F 76 64 04                                      db 'kmovd',4
000156FA: BD D7                                                  dw kmov_instruction-instruction_handler
000156FC: 6B 6D 6F 76 71 08                                      db 'kmovq',8
00015702: BD D7                                                  dw kmov_instruction-instruction_handler
00015704: 6B 6D 6F 76 77 02                                      db 'kmovw',2
0001570A: BD D7                                                  dw kmov_instruction-instruction_handler
0001570C: 6B 6E 6F 74 62 44                                      db 'knotb',44h
00015712: 09 D7                                                  dw mask_instruction_single_source_b-instruction_handler
00015714: 6B 6E 6F 74 64 44                                      db 'knotd',44h
0001571A: 12 D7                                                  dw mask_instruction_single_source_d-instruction_handler
0001571C: 6B 6E 6F 74 71 44                                      db 'knotq',44h
00015722: 19 D7                                                  dw mask_instruction_single_source_q-instruction_handler
00015724: 6B 6E 6F 74 77 44                                      db 'knotw',44h
0001572A: 20 D7                                                  dw mask_instruction_single_source_w-instruction_handler
0001572C: 6B 78 6F 72 62 47                                      db 'kxorb',47h
00015732: 29 D7                                                  dw mask_instruction_b-instruction_handler
00015734: 6B 78 6F 72 64 47                                      db 'kxord',47h
0001573A: 32 D7                                                  dw mask_instruction_d-instruction_handler
0001573C: 6B 78 6F 72 71 47                                      db 'kxorq',47h
00015742: 39 D7                                                  dw mask_instruction_q-instruction_handler
00015744: 6B 78 6F 72 77 47                                      db 'kxorw',47h
0001574A: 40 D7                                                  dw mask_instruction_w-instruction_handler
0001574C: 6C 61 62 65 6C 00                                      db 'label',0
00015752: D0 00                                                  dw label_directive-instruction_handler
00015754: 6C 64 64 71 75 00                                      db 'lddqu',0
0001575A: 68 A1                                                  dw lddqu_instruction-instruction_handler
0001575C: 6C 65 61 76 65 C9                                      db 'leave',0C9h
00015762: 0B 64                                                  dw simple_instruction-instruction_handler
00015764: 6C 6F 64 73 62 AC                                      db 'lodsb',0ACh
0001576A: 0B 64                                                  dw simple_instruction-instruction_handler
0001576C: 6C 6F 64 73 64 AD                                      db 'lodsd',0ADh
00015772: 54 64                                                  dw simple_instruction_32bit-instruction_handler
00015774: 6C 6F 64 73 71 AD                                      db 'lodsq',0ADh
0001577A: 6C 64                                                  dw simple_instruction_64bit-instruction_handler
0001577C: 6C 6F 64 73 77 AD                                      db 'lodsw',0ADh
00015782: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
00015784: 6C 6F 6F 70 64 E2                                      db 'loopd',0E2h
0001578A: 43 8E                                                  dw loop_instruction_32bit-instruction_handler
0001578C: 6C 6F 6F 70 65 E1                                      db 'loope',0E1h
00015792: 62 8E                                                  dw loop_instruction-instruction_handler
00015794: 6C 6F 6F 70 71 E2                                      db 'loopq',0E2h
0001579A: 55 8E                                                  dw loop_instruction_64bit-instruction_handler
0001579C: 6C 6F 6F 70 77 E2                                      db 'loopw',0E2h
000157A2: 24 8E                                                  dw loop_instruction_16bit-instruction_handler
000157A4: 6C 6F 6F 70 7A E1                                      db 'loopz',0E1h
000157AA: 62 8E                                                  dw loop_instruction-instruction_handler
000157AC: 6C 7A 63 6E 74 BD                                      db 'lzcnt',0BDh
000157B2: 6E B2                                                  dw popcnt_instruction-instruction_handler
000157B4: 6D 61 78 70 64 5F                                      db 'maxpd',5Fh
000157BA: 62 A2                                                  dw sse_pd_instruction-instruction_handler
000157BC: 6D 61 78 70 73 5F                                      db 'maxps',5Fh
000157C2: 4F A2                                                  dw sse_ps_instruction-instruction_handler
000157C4: 6D 61 78 73 64 5F                                      db 'maxsd',5Fh
000157CA: 88 A2                                                  dw sse_sd_instruction-instruction_handler
000157CC: 6D 61 78 73 73 5F                                      db 'maxss',5Fh
000157D2: 75 A2                                                  dw sse_ss_instruction-instruction_handler
000157D4: 6D 69 6E 70 64 5D                                      db 'minpd',5Dh
000157DA: 62 A2                                                  dw sse_pd_instruction-instruction_handler
000157DC: 6D 69 6E 70 73 5D                                      db 'minps',5Dh
000157E2: 4F A2                                                  dw sse_ps_instruction-instruction_handler
000157E4: 6D 69 6E 73 64 5D                                      db 'minsd',5Dh
000157EA: 88 A2                                                  dw sse_sd_instruction-instruction_handler
000157EC: 6D 69 6E 73 73 5D                                      db 'minss',5Dh
000157F2: 75 A2                                                  dw sse_ss_instruction-instruction_handler
000157F4: 6D 6F 76 62 65 F0                                      db 'movbe',0F0h
000157FA: 7A B2                                                  dw movbe_instruction-instruction_handler
000157FC: 6D 6F 76 73 62 A4                                      db 'movsb',0A4h
00015802: 0B 64                                                  dw simple_instruction-instruction_handler
00015804: 6D 6F 76 73 64 00                                      db 'movsd',0
0001580A: F6 A4                                                  dw movsd_instruction-instruction_handler
0001580C: 6D 6F 76 73 71 A5                                      db 'movsq',0A5h
00015812: 6C 64                                                  dw simple_instruction_64bit-instruction_handler
00015814: 6D 6F 76 73 73 00                                      db 'movss',0
0001581A: E6 A4                                                  dw movss_instruction-instruction_handler
0001581C: 6D 6F 76 73 77 A5                                      db 'movsw',0A5h
00015822: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
00015824: 6D 6F 76 73 78 BE                                      db 'movsx',0BEh
0001582A: 39 81                                                  dw movx_instruction-instruction_handler
0001582C: 6D 6F 76 7A 78 B6                                      db 'movzx',0B6h
00015832: 39 81                                                  dw movx_instruction-instruction_handler
00015834: 6D 75 6C 70 64 59                                      db 'mulpd',59h
0001583A: 62 A2                                                  dw sse_pd_instruction-instruction_handler
0001583C: 6D 75 6C 70 73 59                                      db 'mulps',59h
00015842: 4F A2                                                  dw sse_ps_instruction-instruction_handler
00015844: 6D 75 6C 73 64 59                                      db 'mulsd',59h
0001584A: 88 A2                                                  dw sse_sd_instruction-instruction_handler
0001584C: 6D 75 6C 73 73 59                                      db 'mulss',59h
00015852: 75 A2                                                  dw sse_ss_instruction-instruction_handler
00015854: 6D 77 61 69 74 C9                                      db 'mwait',0C9h
0001585A: 15 B0                                                  dw monitor_instruction-instruction_handler
0001585C: 6F 75 74 73 62 6E                                      db 'outsb',6Eh
00015862: 0B 64                                                  dw simple_instruction-instruction_handler
00015864: 6F 75 74 73 64 6F                                      db 'outsd',6Fh
0001586A: 54 64                                                  dw simple_instruction_32bit-instruction_handler
0001586C: 6F 75 74 73 77 6F                                      db 'outsw',6Fh
00015872: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
00015874: 70 61 62 73 62 1C                                      db 'pabsb',1Ch
0001587A: A8 A8                                                  dw ssse3_instruction-instruction_handler
0001587C: 70 61 62 73 64 1E                                      db 'pabsd',1Eh
00015882: A8 A8                                                  dw ssse3_instruction-instruction_handler
00015884: 70 61 62 73 77 1D                                      db 'pabsw',1Dh
0001588A: A8 A8                                                  dw ssse3_instruction-instruction_handler
0001588C: 70 61 64 64 62 FC                                      db 'paddb',0FCh
00015892: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00015894: 70 61 64 64 64 FE                                      db 'paddd',0FEh
0001589A: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
0001589C: 70 61 64 64 71 D4                                      db 'paddq',0D4h
000158A2: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000158A4: 70 61 64 64 77 FD                                      db 'paddw',0FDh
000158AA: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000158AC: 70 61 6E 64 6E DF                                      db 'pandn',0DFh
000158B2: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000158B4: 70 61 75 73 65 00                                      db 'pause',0
000158BA: D0 AE                                                  dw pause_instruction-instruction_handler
000158BC: 70 61 76 67 62 E0                                      db 'pavgb',0E0h
000158C2: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000158C4: 70 61 76 67 77 E3                                      db 'pavgw',0E3h
000158CA: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000158CC: 70 66 32 69 64 1D                                      db 'pf2id',1Dh
000158D2: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
000158D4: 70 66 32 69 77 1C                                      db 'pf2iw',1Ch
000158DA: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
000158DC: 70 66 61 63 63 AE                                      db 'pfacc',0AEh
000158E2: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
000158E4: 70 66 61 64 64 9E                                      db 'pfadd',9Eh
000158EA: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
000158EC: 70 66 6D 61 78 A4                                      db 'pfmax',0A4h
000158F2: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
000158F4: 70 66 6D 69 6E 94                                      db 'pfmin',94h
000158FA: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
000158FC: 70 66 6D 75 6C B4                                      db 'pfmul',0B4h
00015902: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00015904: 70 66 72 63 70 96                                      db 'pfrcp',96h
0001590A: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
0001590C: 70 66 73 75 62 9A                                      db 'pfsub',9Ah
00015912: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00015914: 70 69 32 66 64 0D                                      db 'pi2fd',0Dh
0001591A: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
0001591C: 70 69 32 66 77 0C                                      db 'pi2fw',0Ch
00015922: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00015924: 70 6F 70 61 64 61                                      db 'popad',61h
0001592A: 47 64                                                  dw simple_instruction_32bit_except64-instruction_handler
0001592C: 70 6F 70 61 77 61                                      db 'popaw',61h
00015932: 20 64                                                  dw simple_instruction_16bit_except64-instruction_handler
00015934: 70 6F 70 66 64 9D                                      db 'popfd',9Dh
0001593A: 47 64                                                  dw simple_instruction_32bit_except64-instruction_handler
0001593C: 70 6F 70 66 71 9D                                      db 'popfq',9Dh
00015942: 11 64                                                  dw simple_instruction_only64-instruction_handler
00015944: 70 6F 70 66 77 9D                                      db 'popfw',9Dh
0001594A: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
0001594C: 70 73 6C 6C 64 F2                                      db 'pslld',0F2h
00015952: 21 9C                                                  dw mmx_bit_shift_instruction-instruction_handler
00015954: 70 73 6C 6C 71 F3                                      db 'psllq',0F3h
0001595A: 21 9C                                                  dw mmx_bit_shift_instruction-instruction_handler
0001595C: 70 73 6C 6C 77 F1                                      db 'psllw',0F1h
00015962: 21 9C                                                  dw mmx_bit_shift_instruction-instruction_handler
00015964: 70 73 72 61 64 E2                                      db 'psrad',0E2h
0001596A: 21 9C                                                  dw mmx_bit_shift_instruction-instruction_handler
0001596C: 70 73 72 61 77 E1                                      db 'psraw',0E1h
00015972: 21 9C                                                  dw mmx_bit_shift_instruction-instruction_handler
00015974: 70 73 72 6C 64 D2                                      db 'psrld',0D2h
0001597A: 21 9C                                                  dw mmx_bit_shift_instruction-instruction_handler
0001597C: 70 73 72 6C 71 D3                                      db 'psrlq',0D3h
00015982: 21 9C                                                  dw mmx_bit_shift_instruction-instruction_handler
00015984: 70 73 72 6C 77 D1                                      db 'psrlw',0D1h
0001598A: 21 9C                                                  dw mmx_bit_shift_instruction-instruction_handler
0001598C: 70 73 75 62 62 F8                                      db 'psubb',0F8h
00015992: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00015994: 70 73 75 62 64 FA                                      db 'psubd',0FAh
0001599A: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
0001599C: 70 73 75 62 71 FB                                      db 'psubq',0FBh
000159A2: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000159A4: 70 73 75 62 77 F9                                      db 'psubw',0F9h
000159AA: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000159AC: 70 74 65 73 74 17                                      db 'ptest',17h
000159B2: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000159B4: 70 75 73 68 61 60                                      db 'pusha',60h
000159BA: FE 63                                                  dw simple_instruction_except64-instruction_handler
000159BC: 70 75 73 68 64 04                                      db 'pushd',4
000159C2: 2C 74                                                  dw push_instruction-instruction_handler
000159C4: 70 75 73 68 66 9C                                      db 'pushf',9Ch
000159CA: 0B 64                                                  dw simple_instruction-instruction_handler
000159CC: 70 75 73 68 71 08                                      db 'pushq',8
000159D2: 2C 74                                                  dw push_instruction-instruction_handler
000159D4: 70 75 73 68 77 02                                      db 'pushw',2
000159DA: 2C 74                                                  dw push_instruction-instruction_handler
000159DC: 72 63 70 70 73 53                                      db 'rcpps',53h
000159E2: 4F A2                                                  dw sse_ps_instruction-instruction_handler
000159E4: 72 63 70 73 73 53                                      db 'rcpss',53h
000159EA: 75 A2                                                  dw sse_ss_instruction-instruction_handler
000159EC: 72 64 6D 73 72 32                                      db 'rdmsr',32h
000159F2: 95 64                                                  dw simple_extended_instruction-instruction_handler
000159F4: 72 64 70 69 64 07                                      db 'rdpid',7
000159FA: 64 B3                                                  dw rdpid_instruction-instruction_handler
000159FC: 72 64 70 6D 63 33                                      db 'rdpmc',33h
00015A02: 95 64                                                  dw simple_extended_instruction-instruction_handler
00015A04: 72 64 70 72 75 FD                                      db 'rdpru',0FDh
00015A0A: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
00015A0C: 72 64 74 73 63 31                                      db 'rdtsc',31h
00015A12: 95 64                                                  dw simple_extended_instruction-instruction_handler
00015A14: 72 65 70 6E 65 F2                                      db 'repne',0F2h
00015A1A: A6 64                                                  dw prefix_instruction-instruction_handler
00015A1C: 72 65 70 6E 7A F2                                      db 'repnz',0F2h
00015A22: A6 64                                                  dw prefix_instruction-instruction_handler
00015A24: 72 65 74 66 64 CA                                      db 'retfd',0CAh
00015A2A: 43 7D                                                  dw retf_instruction_32bit-instruction_handler
00015A2C: 72 65 74 66 71 CA                                      db 'retfq',0CAh
00015A32: 39 7D                                                  dw retf_instruction_64bit-instruction_handler
00015A34: 72 65 74 66 77 CA                                      db 'retfw',0CAh
00015A3A: 4D 7D                                                  dw retf_instruction_16bit-instruction_handler
00015A3C: 72 65 74 6E 64 C2                                      db 'retnd',0C2h
00015A42: 87 7C                                                  dw ret_instruction_32bit_except64-instruction_handler
00015A44: 72 65 74 6E 71 C2                                      db 'retnq',0C2h
00015A4A: 78 7C                                                  dw ret_instruction_only64-instruction_handler
00015A4C: 72 65 74 6E 77 C2                                      db 'retnw',0C2h
00015A52: 9B 7C                                                  dw ret_instruction_16bit-instruction_handler
00015A54: 73 63 61 73 62 AE                                      db 'scasb',0AEh
00015A5A: 0B 64                                                  dw simple_instruction-instruction_handler
00015A5C: 73 63 61 73 64 AF                                      db 'scasd',0AFh
00015A62: 54 64                                                  dw simple_instruction_32bit-instruction_handler
00015A64: 73 63 61 73 71 AF                                      db 'scasq',0AFh
00015A6A: 6C 64                                                  dw simple_instruction_64bit-instruction_handler
00015A6C: 73 63 61 73 77 AF                                      db 'scasw',0AFh
00015A72: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
00015A74: 73 65 74 61 65 93                                      db 'setae',93h
00015A7A: C2 7A                                                  dw set_instruction-instruction_handler
00015A7C: 73 65 74 62 65 96                                      db 'setbe',96h
00015A82: C2 7A                                                  dw set_instruction-instruction_handler
00015A84: 73 65 74 67 65 9D                                      db 'setge',9Dh
00015A8A: C2 7A                                                  dw set_instruction-instruction_handler
00015A8C: 73 65 74 6C 65 9E                                      db 'setle',9Eh
00015A92: C2 7A                                                  dw set_instruction-instruction_handler
00015A94: 73 65 74 6E 61 96                                      db 'setna',96h
00015A9A: C2 7A                                                  dw set_instruction-instruction_handler
00015A9C: 73 65 74 6E 62 93                                      db 'setnb',93h
00015AA2: C2 7A                                                  dw set_instruction-instruction_handler
00015AA4: 73 65 74 6E 63 93                                      db 'setnc',93h
00015AAA: C2 7A                                                  dw set_instruction-instruction_handler
00015AAC: 73 65 74 6E 65 95                                      db 'setne',95h
00015AB2: C2 7A                                                  dw set_instruction-instruction_handler
00015AB4: 73 65 74 6E 67 9E                                      db 'setng',9Eh
00015ABA: C2 7A                                                  dw set_instruction-instruction_handler
00015ABC: 73 65 74 6E 6C 9D                                      db 'setnl',9Dh
00015AC2: C2 7A                                                  dw set_instruction-instruction_handler
00015AC4: 73 65 74 6E 6F 91                                      db 'setno',91h
00015ACA: C2 7A                                                  dw set_instruction-instruction_handler
00015ACC: 73 65 74 6E 70 9B                                      db 'setnp',9Bh
00015AD2: C2 7A                                                  dw set_instruction-instruction_handler
00015AD4: 73 65 74 6E 73 99                                      db 'setns',99h
00015ADA: C2 7A                                                  dw set_instruction-instruction_handler
00015ADC: 73 65 74 6E 7A 95                                      db 'setnz',95h
00015AE2: C2 7A                                                  dw set_instruction-instruction_handler
00015AE4: 73 65 74 70 65 9A                                      db 'setpe',9Ah
00015AEA: C2 7A                                                  dw set_instruction-instruction_handler
00015AEC: 73 65 74 70 6F 9B                                      db 'setpo',9Bh
00015AF2: C2 7A                                                  dw set_instruction-instruction_handler
00015AF4: 73 74 61 63 6B 00                                      db 'stack',0
00015AFA: 71 32                                                  dw stack_directive-instruction_handler
00015AFC: 73 74 6F 72 65 00                                      db 'store',0
00015B02: 6A 03                                                  dw store_directive-instruction_handler
00015B04: 73 74 6F 73 62 AA                                      db 'stosb',0AAh
00015B0A: 0B 64                                                  dw simple_instruction-instruction_handler
00015B0C: 73 74 6F 73 64 AB                                      db 'stosd',0ABh
00015B12: 54 64                                                  dw simple_instruction_32bit-instruction_handler
00015B14: 73 74 6F 73 71 AB                                      db 'stosq',0ABh
00015B1A: 6C 64                                                  dw simple_instruction_64bit-instruction_handler
00015B1C: 73 74 6F 73 77 AB                                      db 'stosw',0ABh
00015B22: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
00015B24: 73 75 62 70 64 5C                                      db 'subpd',5Ch
00015B2A: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00015B2C: 73 75 62 70 73 5C                                      db 'subps',5Ch
00015B32: 4F A2                                                  dw sse_ps_instruction-instruction_handler
00015B34: 73 75 62 73 64 5C                                      db 'subsd',5Ch
00015B3A: 88 A2                                                  dw sse_sd_instruction-instruction_handler
00015B3C: 73 75 62 73 73 5C                                      db 'subss',5Ch
00015B42: 75 A2                                                  dw sse_ss_instruction-instruction_handler
00015B44: 74 69 6D 65 73 00                                      db 'times',0
00015B4A: 2D 05                                                  dw times_directive-instruction_handler
00015B4C: 74 7A 63 6E 74 BC                                      db 'tzcnt',0BCh
00015B52: 6E B2                                                  dw popcnt_instruction-instruction_handler
00015B54: 74 7A 6D 73 6B 14                                      db 'tzmsk',14h
00015B5A: FA ED                                                  dw tbm_instruction-instruction_handler
00015B5C: 76 64 70 70 64 41                                      db 'vdppd',41h
00015B62: 41 D3                                                  dw avx_128bit_instruction_3a_imm8_noevex-instruction_handler
00015B64: 76 64 70 70 73 40                                      db 'vdpps',40h
00015B6A: 5E D3                                                  dw avx_pi_instruction_3a_imm8_noevex-instruction_handler
00015B6C: 76 6D 6F 76 64 00                                      db 'vmovd',0
00015B72: 46 CE                                                  dw avx_movd_instruction-instruction_handler
00015B74: 76 6D 6F 76 71 00                                      db 'vmovq',0
00015B7A: 36 CE                                                  dw avx_movq_instruction-instruction_handler
00015B7C: 76 6D 72 75 6E D8                                      db 'vmrun',0D8h
00015B82: A9 B5                                                  dw simple_svm_instruction-instruction_handler
00015B84: 76 6D 78 6F 6E 06                                      db 'vmxon',6
00015B8A: 38 B4                                                  dw vmxon_instruction-instruction_handler
00015B8C: 76 6F 72 70 64 56                                      db 'vorpd',56h
00015B92: 82 C6                                                  dw avx_pd_instruction-instruction_handler
00015B94: 76 6F 72 70 73 56                                      db 'vorps',56h
00015B9A: F0 C6                                                  dw avx_ps_instruction-instruction_handler
00015B9C: 76 70 61 6E 64 DB                                      db 'vpand',0DBh
00015BA2: 56 C8                                                  dw avx_pd_instruction_noevex-instruction_handler
00015BA4: 76 70 6F 72 64 EB                                      db 'vpord',0EBh
00015BAA: 02 C8                                                  dw avx_d_instruction_evex-instruction_handler
00015BAC: 76 70 6F 72 71 EB                                      db 'vporq',0EBh
00015BB2: 9F C7                                                  dw avx_q_instruction_evex-instruction_handler
00015BB4: 76 70 78 6F 72 EF                                      db 'vpxor',0EFh
00015BBA: 56 C8                                                  dw avx_pd_instruction_noevex-instruction_handler
00015BBC: 77 68 69 6C 65 00                                      db 'while',0
00015BC2: A6 09                                                  dw while_directive-instruction_handler
00015BC4: 77 72 6D 73 72 30                                      db 'wrmsr',30h
00015BCA: 95 64                                                  dw simple_extended_instruction-instruction_handler
00015BCC: 77 72 73 73 64 F6                                      db 'wrssd',0F6h
00015BD2: 8B BC                                                  dw wrssd_instruction-instruction_handler
00015BD4: 77 72 73 73 71 F6                                      db 'wrssq',0F6h
00015BDA: 7B BC                                                  dw wrssq_instruction-instruction_handler
00015BDC: 78 6C 61 74 62 D7                                      db 'xlatb',0D7h
00015BE2: 0B 64                                                  dw simple_instruction-instruction_handler
00015BE4: 78 6F 72 70 64 57                                      db 'xorpd',57h
00015BEA: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00015BEC: 78 6F 72 70 73 57                                      db 'xorps',57h
00015BF2: 4F A2                                                  dw sse_ps_instruction-instruction_handler
00015BF4: 78 73 61 76 65 04                                      db 'xsave',100b
00015BFA: 0F AE                                                  dw fxsave_instruction-instruction_handler
00015BFC: 78 74 65 73 74 D6                                      db 'xtest',0D6h
00015C02: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
                                                                instructions_6:
00015C04: 61 65 73 64 65 63 DE                                   db 'aesdec',0DEh
00015C0B: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
00015C0D: 61 65 73 65 6E 63 DC                                   db 'aesenc',0DCh
00015C14: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
00015C16: 61 65 73 69 6D 63 DB                                   db 'aesimc',0DBh
00015C1D: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
00015C1F: 61 6E 64 6E 70 64 55                                   db 'andnpd',55h
00015C26: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00015C28: 61 6E 64 6E 70 73 55                                   db 'andnps',55h
00015C2F: 4F A2                                                  dw sse_ps_instruction-instruction_handler
00015C31: 61 73 73 65 72 74 00                                   db 'assert',0
00015C38: 48 15                                                  dw assert_directive-instruction_handler
00015C3A: 62 6C 63 6D 73 6B 21                                   db 'blcmsk',21h
00015C41: FA ED                                                  dw tbm_instruction-instruction_handler
00015C43: 62 6C 73 6D 73 6B 02                                   db 'blsmsk',2
00015C4A: AD EB                                                  dw bmi_instruction-instruction_handler
00015C4C: 62 6E 64 6C 64 78 1A                                   db 'bndldx',1Ah
00015C53: C5 B9                                                  dw bndldx_instruction-instruction_handler
00015C55: 62 6E 64 6D 6F 76 1A                                   db 'bndmov',1Ah
00015C5C: 1E B8                                                  dw bndmov_instruction-instruction_handler
00015C5E: 62 6E 64 73 74 78 1B                                   db 'bndstx',1Bh
00015C65: EE B9                                                  dw bndstx_instruction-instruction_handler
00015C67: 63 6C 7A 65 72 6F 00                                   db 'clzero',0
00015C6E: 24 B6                                                  dw clzero_instruction-instruction_handler
00015C70: 63 6D 6F 76 61 65 43                                   db 'cmovae',43h
00015C77: AE 83                                                  dw bs_instruction-instruction_handler
00015C79: 63 6D 6F 76 62 65 46                                   db 'cmovbe',46h
00015C80: AE 83                                                  dw bs_instruction-instruction_handler
00015C82: 63 6D 6F 76 67 65 4D                                   db 'cmovge',4Dh
00015C89: AE 83                                                  dw bs_instruction-instruction_handler
00015C8B: 63 6D 6F 76 6C 65 4E                                   db 'cmovle',4Eh
00015C92: AE 83                                                  dw bs_instruction-instruction_handler
00015C94: 63 6D 6F 76 6E 61 46                                   db 'cmovna',46h
00015C9B: AE 83                                                  dw bs_instruction-instruction_handler
00015C9D: 63 6D 6F 76 6E 62 43                                   db 'cmovnb',43h
00015CA4: AE 83                                                  dw bs_instruction-instruction_handler
00015CA6: 63 6D 6F 76 6E 63 43                                   db 'cmovnc',43h
00015CAD: AE 83                                                  dw bs_instruction-instruction_handler
00015CAF: 63 6D 6F 76 6E 65 45                                   db 'cmovne',45h
00015CB6: AE 83                                                  dw bs_instruction-instruction_handler
00015CB8: 63 6D 6F 76 6E 67 4E                                   db 'cmovng',4Eh
00015CBF: AE 83                                                  dw bs_instruction-instruction_handler
00015CC1: 63 6D 6F 76 6E 6C 4D                                   db 'cmovnl',4Dh
00015CC8: AE 83                                                  dw bs_instruction-instruction_handler
00015CCA: 63 6D 6F 76 6E 6F 41                                   db 'cmovno',41h
00015CD1: AE 83                                                  dw bs_instruction-instruction_handler
00015CD3: 63 6D 6F 76 6E 70 4B                                   db 'cmovnp',4Bh
00015CDA: AE 83                                                  dw bs_instruction-instruction_handler
00015CDC: 63 6D 6F 76 6E 73 49                                   db 'cmovns',49h
00015CE3: AE 83                                                  dw bs_instruction-instruction_handler
00015CE5: 63 6D 6F 76 6E 7A 45                                   db 'cmovnz',45h
00015CEC: AE 83                                                  dw bs_instruction-instruction_handler
00015CEE: 63 6D 6F 76 70 65 4A                                   db 'cmovpe',4Ah
00015CF5: AE 83                                                  dw bs_instruction-instruction_handler
00015CF7: 63 6D 6F 76 70 6F 4B                                   db 'cmovpo',4Bh
00015CFE: AE 83                                                  dw bs_instruction-instruction_handler
00015D00: 63 6F 6D 69 73 64 2F                                   db 'comisd',2Fh
00015D07: FC A2                                                  dw comisd_instruction-instruction_handler
00015D09: 63 6F 6D 69 73 73 2F                                   db 'comiss',2Fh
00015D10: F3 A2                                                  dw comiss_instruction-instruction_handler
00015D12: 66 63 6D 6F 76 62 C0                                   db 'fcmovb',0C0h
00015D19: 69 9B                                                  dw fcmov_instruction-instruction_handler
00015D1B: 66 63 6D 6F 76 65 C8                                   db 'fcmove',0C8h
00015D22: 69 9B                                                  dw fcmov_instruction-instruction_handler
00015D24: 66 63 6D 6F 76 75 D8                                   db 'fcmovu',0D8h
00015D2B: 69 9B                                                  dw fcmov_instruction-instruction_handler
00015D2D: 66 63 6F 6D 69 70 F0                                   db 'fcomip',0F0h
00015D34: 71 9B                                                  dw fcomip_instruction-instruction_handler
00015D36: 66 63 6F 6D 70 70 00                                   db 'fcompp',0
00015D3D: F4 99                                                  dw fcompp_instruction-instruction_handler
00015D3F: 66 64 69 76 72 70 06                                   db 'fdivrp',6
00015D46: A1 99                                                  dw faddp_instruction-instruction_handler
00015D48: 66 66 72 65 65 70 00                                   db 'ffreep',0
00015D4F: 10 9A                                                  dw ffreep_instruction-instruction_handler
00015D51: 66 69 63 6F 6D 70 03                                   db 'ficomp',3
00015D58: F4 97                                                  dw fi_instruction-instruction_handler
00015D5A: 66 69 64 69 76 72 07                                   db 'fidivr',7
00015D61: F4 97                                                  dw fi_instruction-instruction_handler
00015D63: 66 69 73 74 74 70 01                                   db 'fisttp',1
00015D6A: E4 98                                                  dw fild_instruction-instruction_handler
00015D6C: 66 69 73 75 62 72 05                                   db 'fisubr',5
00015D73: F4 97                                                  dw fi_instruction-instruction_handler
00015D75: 66 6C 64 65 6E 76 04                                   db 'fldenv',4
00015D7C: 5C 9A                                                  dw fldenv_instruction-instruction_handler
00015D7E: 66 6C 64 6C 32 65 2A                                   db 'fldl2e',101010b
00015D85: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015D87: 66 6C 64 6C 32 74 29                                   db 'fldl2t',101001b
00015D8E: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015D90: 66 6C 64 6C 67 32 2C                                   db 'fldlg2',101100b
00015D97: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015D99: 66 6C 64 6C 6E 32 2D                                   db 'fldln2',101101b
00015DA0: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015DA2: 66 6E 63 6C 65 78 E2                                   db 'fnclex',0E2h
00015DA9: 5E 9B                                                  dw fninit_instruction-instruction_handler
00015DAB: 66 6E 64 69 73 69 E1                                   db 'fndisi',0E1h
00015DB2: 5E 9B                                                  dw fninit_instruction-instruction_handler
00015DB4: 66 6E 69 6E 69 74 E3                                   db 'fninit',0E3h
00015DBB: 5E 9B                                                  dw fninit_instruction-instruction_handler
00015DBD: 66 6E 73 61 76 65 06                                   db 'fnsave',6
00015DC4: 95 9A                                                  dw fnsave_instruction-instruction_handler
00015DC6: 66 6E 73 74 63 77 07                                   db 'fnstcw',7
00015DCD: CA 9A                                                  dw fldcw_instruction-instruction_handler
00015DCF: 66 6E 73 74 73 77 00                                   db 'fnstsw',0
00015DD6: 03 9B                                                  dw fnstsw_instruction-instruction_handler
00015DD8: 66 6F 72 6D 61 74 00                                   db 'format',0
00015DDF: 7E 31                                                  dw format_directive-instruction_handler
00015DE1: 66 70 61 74 61 6E 33                                   db 'fpatan',110011b
00015DE8: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015DEA: 66 70 72 65 6D 31 35                                   db 'fprem1',110101b
00015DF1: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015DF3: 66 72 73 74 6F 72 04                                   db 'frstor',4
00015DFA: 95 9A                                                  dw fnsave_instruction-instruction_handler
00015DFC: 66 72 73 74 70 6D E5                                   db 'frstpm',0E5h
00015E03: 5E 9B                                                  dw fninit_instruction-instruction_handler
00015E05: 66 73 61 76 65 64 06                                   db 'fsaved',6
00015E0C: 7B 9A                                                  dw fsave_instruction_32bit-instruction_handler
00015E0E: 66 73 61 76 65 77 06                                   db 'fsavew',6
00015E15: 86 9A                                                  dw fsave_instruction_16bit-instruction_handler
00015E17: 66 73 63 61 6C 65 3D                                   db 'fscale',111101b
00015E1E: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00015E20: 66 73 65 74 70 6D E4                                   db 'fsetpm',0E4h
00015E27: 5E 9B                                                  dw fninit_instruction-instruction_handler
00015E29: 66 73 74 65 6E 76 06                                   db 'fstenv',6
00015E30: 58 9A                                                  dw fstenv_instruction-instruction_handler
00015E32: 66 73 75 62 72 70 04                                   db 'fsubrp',4
00015E39: A1 99                                                  dw faddp_instruction-instruction_handler
00015E3B: 66 75 63 6F 6D 69 E8                                   db 'fucomi',0E8h
00015E42: 6D 9B                                                  dw fcomi_instruction-instruction_handler
00015E44: 66 75 63 6F 6D 70 05                                   db 'fucomp',5
00015E4B: 16 9A                                                  dw ffree_instruction-instruction_handler
00015E4D: 66 78 73 61 76 65 00                                   db 'fxsave',0
00015E54: 0F AE                                                  dw fxsave_instruction-instruction_handler
00015E56: 67 65 74 73 65 63 37                                   db 'getsec',37h
00015E5D: 95 64                                                  dw simple_extended_instruction-instruction_handler
00015E5F: 68 61 64 64 70 64 7C                                   db 'haddpd',07Ch
00015E66: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00015E68: 68 61 64 64 70 73 7C                                   db 'haddps',07Ch
00015E6F: 1C A3                                                  dw cvtpd2dq_instruction-instruction_handler
00015E71: 68 73 75 62 70 64 7D                                   db 'hsubpd',07Dh
00015E78: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00015E7A: 68 73 75 62 70 73 7D                                   db 'hsubps',07Dh
00015E81: 1C A3                                                  dw cvtpd2dq_instruction-instruction_handler
00015E83: 69 6E 76 65 70 74 80                                   db 'invept',80h
00015E8A: 58 B5                                                  dw vmx_inv_instruction-instruction_handler
00015E8C: 69 6E 76 6C 70 67 00                                   db 'invlpg',0
00015E93: 17 95                                                  dw invlpg_instruction-instruction_handler
00015E95: 6B 61 6E 64 6E 62 42                                   db 'kandnb',42h
00015E9C: 29 D7                                                  dw mask_instruction_b-instruction_handler
00015E9E: 6B 61 6E 64 6E 64 42                                   db 'kandnd',42h
00015EA5: 32 D7                                                  dw mask_instruction_d-instruction_handler
00015EA7: 6B 61 6E 64 6E 71 42                                   db 'kandnq',42h
00015EAE: 39 D7                                                  dw mask_instruction_q-instruction_handler
00015EB0: 6B 61 6E 64 6E 77 42                                   db 'kandnw',42h
00015EB7: 40 D7                                                  dw mask_instruction_w-instruction_handler
00015EB9: 6B 74 65 73 74 62 99                                   db 'ktestb',99h
00015EC0: 09 D7                                                  dw mask_instruction_single_source_b-instruction_handler
00015EC2: 6B 74 65 73 74 64 99                                   db 'ktestd',99h
00015EC9: 12 D7                                                  dw mask_instruction_single_source_d-instruction_handler
00015ECB: 6B 74 65 73 74 71 99                                   db 'ktestq',99h
00015ED2: 19 D7                                                  dw mask_instruction_single_source_q-instruction_handler
00015ED4: 6B 74 65 73 74 77 99                                   db 'ktestw',99h
00015EDB: 20 D7                                                  dw mask_instruction_single_source_w-instruction_handler
00015EDD: 6B 78 6E 6F 72 62 46                                   db 'kxnorb',46h
00015EE4: 29 D7                                                  dw mask_instruction_b-instruction_handler
00015EE6: 6B 78 6E 6F 72 64 46                                   db 'kxnord',46h
00015EED: 32 D7                                                  dw mask_instruction_d-instruction_handler
00015EEF: 6B 78 6E 6F 72 71 46                                   db 'kxnorq',46h
00015EF6: 39 D7                                                  dw mask_instruction_q-instruction_handler
00015EF8: 6B 78 6E 6F 72 77 46                                   db 'kxnorw',46h
00015EFF: 40 D7                                                  dw mask_instruction_w-instruction_handler
00015F01: 6C 66 65 6E 63 65 E8                                   db 'lfence',0E8h
00015F08: C0 AE                                                  dw fence_instruction-instruction_handler
00015F0A: 6C 6C 77 70 63 62 00                                   db 'llwpcb',0
00015F11: 18 EE                                                  dw llwpcb_instruction-instruction_handler
00015F13: 6C 6F 6F 70 65 64 E1                                   db 'looped',0E1h
00015F1A: 43 8E                                                  dw loop_instruction_32bit-instruction_handler
00015F1C: 6C 6F 6F 70 65 71 E1                                   db 'loopeq',0E1h
00015F23: 55 8E                                                  dw loop_instruction_64bit-instruction_handler
00015F25: 6C 6F 6F 70 65 77 E1                                   db 'loopew',0E1h
00015F2C: 24 8E                                                  dw loop_instruction_16bit-instruction_handler
00015F2E: 6C 6F 6F 70 6E 65 E0                                   db 'loopne',0E0h
00015F35: 62 8E                                                  dw loop_instruction-instruction_handler
00015F37: 6C 6F 6F 70 6E 7A E0                                   db 'loopnz',0E0h
00015F3E: 62 8E                                                  dw loop_instruction-instruction_handler
00015F40: 6C 6F 6F 70 7A 64 E1                                   db 'loopzd',0E1h
00015F47: 43 8E                                                  dw loop_instruction_32bit-instruction_handler
00015F49: 6C 6F 6F 70 7A 71 E1                                   db 'loopzq',0E1h
00015F50: 55 8E                                                  dw loop_instruction_64bit-instruction_handler
00015F52: 6C 6F 6F 70 7A 77 E1                                   db 'loopzw',0E1h
00015F59: 24 8E                                                  dw loop_instruction_16bit-instruction_handler
00015F5B: 6C 77 70 69 6E 73 00                                   db 'lwpins',0
00015F62: 52 EE                                                  dw lwpins_instruction-instruction_handler
00015F64: 6C 77 70 76 61 6C 01                                   db 'lwpval',1
00015F6B: 52 EE                                                  dw lwpins_instruction-instruction_handler
00015F6D: 6D 66 65 6E 63 65 F0                                   db 'mfence',0F0h
00015F74: C0 AE                                                  dw fence_instruction-instruction_handler
00015F76: 6D 6F 76 61 70 64 28                                   db 'movapd',28h
00015F7D: CA A4                                                  dw movpd_instruction-instruction_handler
00015F7F: 6D 6F 76 61 70 73 28                                   db 'movaps',28h
00015F86: D1 A4                                                  dw movps_instruction-instruction_handler
00015F88: 6D 6F 76 64 71 61 66                                   db 'movdqa',66h
00015F8F: D3 A0                                                  dw movdq_instruction-instruction_handler
00015F91: 6D 6F 76 64 71 75 F3                                   db 'movdqu',0F3h
00015F98: D3 A0                                                  dw movdq_instruction-instruction_handler
00015F9A: 6D 6F 76 68 70 64 16                                   db 'movhpd',16h
00015FA1: 92 A5                                                  dw movlpd_instruction-instruction_handler
00015FA3: 6D 6F 76 68 70 73 16                                   db 'movhps',16h
00015FAA: 99 A5                                                  dw movlps_instruction-instruction_handler
00015FAC: 6D 6F 76 6C 70 64 12                                   db 'movlpd',12h
00015FB3: 92 A5                                                  dw movlpd_instruction-instruction_handler
00015FB5: 6D 6F 76 6C 70 73 12                                   db 'movlps',12h
00015FBC: 99 A5                                                  dw movlps_instruction-instruction_handler
00015FBE: 6D 6F 76 6E 74 69 C3                                   db 'movnti',0C3h
00015FC5: CB AF                                                  dw movnti_instruction-instruction_handler
00015FC7: 6D 6F 76 6E 74 71 E7                                   db 'movntq',0E7h
00015FCE: DB AE                                                  dw movntq_instruction-instruction_handler
00015FD0: 6D 6F 76 73 78 64 63                                   db 'movsxd',63h
00015FD7: EF 81                                                  dw movsxd_instruction-instruction_handler
00015FD9: 6D 6F 76 75 70 64 10                                   db 'movupd',10h
00015FE0: CA A4                                                  dw movpd_instruction-instruction_handler
00015FE2: 6D 6F 76 75 70 73 10                                   db 'movups',10h
00015FE9: D1 A4                                                  dw movps_instruction-instruction_handler
00015FEB: 6D 77 61 69 74 78 FB                                   db 'mwaitx',0FBh
00015FF2: 15 B0                                                  dw monitor_instruction-instruction_handler
00015FF4: 70 61 64 64 73 62 EC                                   db 'paddsb',0ECh
00015FFB: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00015FFD: 70 61 64 64 73 77 ED                                   db 'paddsw',0EDh
00016004: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016006: 70 65 78 74 72 62 14                                   db 'pextrb',14h
0001600D: 7B AB                                                  dw pextrb_instruction-instruction_handler
0001600F: 70 65 78 74 72 64 16                                   db 'pextrd',16h
00016016: 69 AB                                                  dw pextrd_instruction-instruction_handler
00016018: 70 65 78 74 72 71 16                                   db 'pextrq',16h
0001601F: 60 AB                                                  dw pextrq_instruction-instruction_handler
00016021: 70 65 78 74 72 77 15                                   db 'pextrw',15h
00016028: 72 AB                                                  dw pextrw_instruction-instruction_handler
0001602A: 70 66 6E 61 63 63 8A                                   db 'pfnacc',8Ah
00016031: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016033: 70 66 73 75 62 72 AA                                   db 'pfsubr',0AAh
0001603A: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
0001603C: 70 68 61 64 64 64 02                                   db 'phaddd',2
00016043: A8 A8                                                  dw ssse3_instruction-instruction_handler
00016045: 70 68 61 64 64 77 01                                   db 'phaddw',1
0001604C: A8 A8                                                  dw ssse3_instruction-instruction_handler
0001604E: 70 68 73 75 62 64 06                                   db 'phsubd',6
00016055: A8 A8                                                  dw ssse3_instruction-instruction_handler
00016057: 70 68 73 75 62 77 05                                   db 'phsubw',5
0001605E: A8 A8                                                  dw ssse3_instruction-instruction_handler
00016060: 70 69 6E 73 72 62 20                                   db 'pinsrb',20h
00016067: 8A AC                                                  dw pinsrb_instruction-instruction_handler
00016069: 70 69 6E 73 72 64 22                                   db 'pinsrd',22h
00016070: 93 AC                                                  dw pinsrd_instruction-instruction_handler
00016072: 70 69 6E 73 72 71 22                                   db 'pinsrq',22h
00016079: 9C AC                                                  dw pinsrq_instruction-instruction_handler
0001607B: 70 69 6E 73 72 77 C4                                   db 'pinsrw',0C4h
00016082: A7 9D                                                  dw pinsrw_instruction-instruction_handler
00016084: 70 6D 61 78 73 62 3C                                   db 'pmaxsb',3Ch
0001608B: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
0001608D: 70 6D 61 78 73 64 3D                                   db 'pmaxsd',3Dh
00016094: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
00016096: 70 6D 61 78 73 77 EE                                   db 'pmaxsw',0EEh
0001609D: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
0001609F: 70 6D 61 78 75 62 DE                                   db 'pmaxub',0DEh
000160A6: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000160A8: 70 6D 61 78 75 64 3F                                   db 'pmaxud',3Fh
000160AF: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000160B1: 70 6D 61 78 75 77 3E                                   db 'pmaxuw',3Eh
000160B8: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000160BA: 70 6D 69 6E 73 62 38                                   db 'pminsb',38h
000160C1: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000160C3: 70 6D 69 6E 73 64 39                                   db 'pminsd',39h
000160CA: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000160CC: 70 6D 69 6E 73 77 EA                                   db 'pminsw',0EAh
000160D3: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000160D5: 70 6D 69 6E 75 62 DA                                   db 'pminub',0DAh
000160DC: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000160DE: 70 6D 69 6E 75 64 3B                                   db 'pminud',3Bh
000160E5: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000160E7: 70 6D 69 6E 75 77 3A                                   db 'pminuw',3Ah
000160EE: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000160F0: 70 6D 75 6C 64 71 28                                   db 'pmuldq',28h
000160F7: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000160F9: 70 6D 75 6C 68 77 E5                                   db 'pmulhw',0E5h
00016100: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016102: 70 6D 75 6C 6C 64 40                                   db 'pmulld',40h
00016109: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
0001610B: 70 6D 75 6C 6C 77 D5                                   db 'pmullw',0D5h
00016112: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016114: 70 6F 70 63 6E 74 B8                                   db 'popcnt',0B8h
0001611B: 6E B2                                                  dw popcnt_instruction-instruction_handler
0001611D: 70 73 61 64 62 77 F6                                   db 'psadbw',0F6h
00016124: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016126: 70 73 68 75 66 62 00                                   db 'pshufb',0
0001612D: A8 A8                                                  dw ssse3_instruction-instruction_handler
0001612F: 70 73 68 75 66 64 66                                   db 'pshufd',66h
00016136: 3B 9E                                                  dw pshufd_instruction-instruction_handler
00016138: 70 73 68 75 66 77 00                                   db 'pshufw',0
0001613F: 2D 9E                                                  dw pshufw_instruction-instruction_handler
00016141: 70 73 69 67 6E 62 08                                   db 'psignb',8
00016148: A8 A8                                                  dw ssse3_instruction-instruction_handler
0001614A: 70 73 69 67 6E 64 0A                                   db 'psignd',0Ah
00016151: A8 A8                                                  dw ssse3_instruction-instruction_handler
00016153: 70 73 69 67 6E 77 09                                   db 'psignw',9
0001615A: A8 A8                                                  dw ssse3_instruction-instruction_handler
0001615C: 70 73 6C 6C 64 71 07                                   db 'pslldq',111b
00016163: 95 A4                                                  dw pslldq_instruction-instruction_handler
00016165: 70 73 6D 61 73 68 FF                                   db 'psmash',0FFh
0001616C: 4A 95                                                  dw simple_instruction_f3_0f_01-instruction_handler
0001616E: 70 73 72 6C 64 71 03                                   db 'psrldq',011b
00016175: 95 A4                                                  dw pslldq_instruction-instruction_handler
00016177: 70 73 75 62 73 62 E8                                   db 'psubsb',0E8h
0001617E: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016180: 70 73 75 62 73 77 E9                                   db 'psubsw',0E9h
00016187: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016189: 70 73 77 61 70 64 BB                                   db 'pswapd',0BBh
00016190: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016192: 70 75 62 6C 69 63 00                                   db 'public',0
00016199: FD 32                                                  dw public_directive-instruction_handler
0001619B: 70 75 73 68 61 64 60                                   db 'pushad',60h
000161A2: 47 64                                                  dw simple_instruction_32bit_except64-instruction_handler
000161A4: 70 75 73 68 61 77 60                                   db 'pushaw',60h
000161AB: 20 64                                                  dw simple_instruction_16bit_except64-instruction_handler
000161AD: 70 75 73 68 66 64 9C                                   db 'pushfd',9Ch
000161B4: 47 64                                                  dw simple_instruction_32bit_except64-instruction_handler
000161B6: 70 75 73 68 66 71 9C                                   db 'pushfq',9Ch
000161BD: 11 64                                                  dw simple_instruction_only64-instruction_handler
000161BF: 70 75 73 68 66 77 9C                                   db 'pushfw',9Ch
000161C6: 2D 64                                                  dw simple_instruction_16bit-instruction_handler
000161C8: 72 64 6D 73 72 71 32                                   db 'rdmsrq',32h
000161CF: 84 64                                                  dw simple_extended_instruction_64bit-instruction_handler
000161D1: 72 64 70 6B 72 75 EE                                   db 'rdpkru',0EEh
000161D8: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
000161DA: 72 64 72 61 6E 64 06                                   db 'rdrand',110b
000161E1: 9C B6                                                  dw rdrand_instruction-instruction_handler
000161E3: 72 64 73 65 65 64 07                                   db 'rdseed',111b
000161EA: 9C B6                                                  dw rdrand_instruction-instruction_handler
000161EC: 72 64 73 73 70 64 01                                   db 'rdsspd',1
000161F3: 0C BC                                                  dw rdsspd_instruction-instruction_handler
000161F5: 72 64 73 73 70 71 01                                   db 'rdsspq',1
000161FC: 05 BC                                                  dw rdsspq_instruction-instruction_handler
000161FE: 72 64 74 73 63 70 F9                                   db 'rdtscp',0F9h
00016205: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
00016207: 72 65 70 65 61 74 00                                   db 'repeat',0
0001620E: D3 08                                                  dw repeat_directive-instruction_handler
00016210: 73 65 74 61 6C 63 D6                                   db 'setalc',0D6h
00016217: FE 63                                                  dw simple_instruction_except64-instruction_handler
00016219: 73 65 74 6E 61 65 92                                   db 'setnae',92h
00016220: C2 7A                                                  dw set_instruction-instruction_handler
00016222: 73 65 74 6E 62 65 97                                   db 'setnbe',97h
00016229: C2 7A                                                  dw set_instruction-instruction_handler
0001622B: 73 65 74 6E 67 65 9C                                   db 'setnge',9Ch
00016232: C2 7A                                                  dw set_instruction-instruction_handler
00016234: 73 65 74 6E 6C 65 9F                                   db 'setnle',9Fh
0001623B: C2 7A                                                  dw set_instruction-instruction_handler
0001623D: 73 66 65 6E 63 65 F8                                   db 'sfence',0F8h
00016244: C0 AE                                                  dw fence_instruction-instruction_handler
00016246: 73 68 75 66 70 64 C6                                   db 'shufpd',0C6h
0001624D: 5B A2                                                  dw sse_pd_instruction_imm8-instruction_handler
0001624F: 73 68 75 66 70 73 C6                                   db 'shufps',0C6h
00016256: 48 A2                                                  dw sse_ps_instruction_imm8-instruction_handler
00016258: 73 6B 69 6E 69 74 00                                   db 'skinit',0
0001625F: 0E B6                                                  dw skinit_instruction-instruction_handler
00016261: 73 6C 77 70 63 62 01                                   db 'slwpcb',1
00016268: 18 EE                                                  dw llwpcb_instruction-instruction_handler
0001626A: 73 71 72 74 70 64 51                                   db 'sqrtpd',51h
00016271: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00016273: 73 71 72 74 70 73 51                                   db 'sqrtps',51h
0001627A: 4F A2                                                  dw sse_ps_instruction-instruction_handler
0001627C: 73 71 72 74 73 64 51                                   db 'sqrtsd',51h
00016283: 88 A2                                                  dw sse_sd_instruction-instruction_handler
00016285: 73 71 72 74 73 73 51                                   db 'sqrtss',51h
0001628C: 75 A2                                                  dw sse_ss_instruction-instruction_handler
0001628E: 73 77 61 70 67 73 F8                                   db 'swapgs',0F8h
00016295: 50 95                                                  dw swapgs_instruction-instruction_handler
00016297: 73 79 73 72 65 74 07                                   db 'sysret',07h
0001629E: 95 64                                                  dw simple_extended_instruction-instruction_handler
000162A0: 74 31 6D 73 6B 63 17                                   db 't1mskc',17h
000162A7: FA ED                                                  dw tbm_instruction-instruction_handler
000162A9: 74 70 61 75 73 65 66                                   db 'tpause',66h
000162B0: B3 BA                                                  dw tpause_instruction-instruction_handler
000162B2: 75 6D 77 61 69 74 F2                                   db 'umwait',0F2h
000162B9: B3 BA                                                  dw tpause_instruction-instruction_handler
000162BB: 76 61 64 64 70 64 58                                   db 'vaddpd',58h
000162C2: 74 C6                                                  dw avx_pd_instruction_er-instruction_handler
000162C4: 76 61 64 64 70 73 58                                   db 'vaddps',58h
000162CB: E2 C6                                                  dw avx_ps_instruction_er-instruction_handler
000162CD: 76 61 64 64 73 64 58                                   db 'vaddsd',58h
000162D4: 10 C7                                                  dw avx_sd_instruction_er-instruction_handler
000162D6: 76 61 64 64 73 73 58                                   db 'vaddss',58h
000162DD: 33 C7                                                  dw avx_ss_instruction_er-instruction_handler
000162DF: 76 61 6E 64 70 64 54                                   db 'vandpd',54h
000162E6: 82 C6                                                  dw avx_pd_instruction-instruction_handler
000162E8: 76 61 6E 64 70 73 54                                   db 'vandps',54h
000162EF: F0 C6                                                  dw avx_ps_instruction-instruction_handler
000162F1: 76 63 6D 70 70 64 FF                                   db 'vcmppd',-1
000162F8: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
000162FA: 76 63 6D 70 70 73 FF                                   db 'vcmpps',-1
00016301: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00016303: 76 63 6D 70 73 64 FF                                   db 'vcmpsd',-1
0001630A: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
0001630C: 76 63 6D 70 73 73 FF                                   db 'vcmpss',-1
00016313: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00016315: 76 64 69 76 70 64 5E                                   db 'vdivpd',5Eh
0001631C: 74 C6                                                  dw avx_pd_instruction_er-instruction_handler
0001631E: 76 64 69 76 70 73 5E                                   db 'vdivps',5Eh
00016325: E2 C6                                                  dw avx_ps_instruction_er-instruction_handler
00016327: 76 64 69 76 73 64 5E                                   db 'vdivsd',5Eh
0001632E: 10 C7                                                  dw avx_sd_instruction_er-instruction_handler
00016330: 76 64 69 76 73 73 5E                                   db 'vdivss',5Eh
00016337: 33 C7                                                  dw avx_ss_instruction_er-instruction_handler
00016339: 76 6C 64 64 71 75 F0                                   db 'vlddqu',0F0h
00016340: D7 CD                                                  dw avx_lddqu_instruction-instruction_handler
00016342: 76 6D 61 78 70 64 5F                                   db 'vmaxpd',5Fh
00016349: 7B C6                                                  dw avx_pd_instruction_sae-instruction_handler
0001634B: 76 6D 61 78 70 73 5F                                   db 'vmaxps',5Fh
00016352: E9 C6                                                  dw avx_ps_instruction_sae-instruction_handler
00016354: 76 6D 61 78 73 64 5F                                   db 'vmaxsd',5Fh
0001635B: 17 C7                                                  dw avx_sd_instruction_sae-instruction_handler
0001635D: 76 6D 61 78 73 73 5F                                   db 'vmaxss',5Fh
00016364: 3A C7                                                  dw avx_ss_instruction_sae-instruction_handler
00016366: 76 6D 63 61 6C 6C C1                                   db 'vmcall',0C1h
0001636D: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
0001636F: 76 6D 66 75 6E 63 D4                                   db 'vmfunc',0D4h
00016376: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
00016378: 76 6D 69 6E 70 64 5D                                   db 'vminpd',5Dh
0001637F: 7B C6                                                  dw avx_pd_instruction_sae-instruction_handler
00016381: 76 6D 69 6E 70 73 5D                                   db 'vminps',5Dh
00016388: E9 C6                                                  dw avx_ps_instruction_sae-instruction_handler
0001638A: 76 6D 69 6E 73 64 5D                                   db 'vminsd',5Dh
00016391: 17 C7                                                  dw avx_sd_instruction_sae-instruction_handler
00016393: 76 6D 69 6E 73 73 5D                                   db 'vminss',5Dh
0001639A: 3A C7                                                  dw avx_ss_instruction_sae-instruction_handler
0001639C: 76 6D 6C 6F 61 64 DA                                   db 'vmload',0DAh
000163A3: A9 B5                                                  dw simple_svm_instruction-instruction_handler
000163A5: 76 6D 6F 76 73 64 00                                   db 'vmovsd',0
000163AC: 8F D1                                                  dw avx_movsd_instruction-instruction_handler
000163AE: 76 6D 6F 76 73 73 00                                   db 'vmovss',0
000163B5: 9C D1                                                  dw avx_movss_instruction-instruction_handler
000163B7: 76 6D 72 65 61 64 00                                   db 'vmread',0
000163BE: 7B B4                                                  dw vmread_instruction-instruction_handler
000163C0: 76 6D 73 61 76 65 DB                                   db 'vmsave',0DBh
000163C7: A9 B5                                                  dw simple_svm_instruction-instruction_handler
000163C9: 76 6D 75 6C 70 64 59                                   db 'vmulpd',59h
000163D0: 74 C6                                                  dw avx_pd_instruction_er-instruction_handler
000163D2: 76 6D 75 6C 70 73 59                                   db 'vmulps',59h
000163D9: E2 C6                                                  dw avx_ps_instruction_er-instruction_handler
000163DB: 76 6D 75 6C 73 64 59                                   db 'vmulsd',59h
000163E2: 10 C7                                                  dw avx_sd_instruction_er-instruction_handler
000163E4: 76 6D 75 6C 73 73 59                                   db 'vmulss',59h
000163EB: 33 C7                                                  dw avx_ss_instruction_er-instruction_handler
000163ED: 76 6D 78 6F 66 66 C4                                   db 'vmxoff',0C4h
000163F4: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
000163F6: 76 70 61 62 73 62 1C                                   db 'vpabsb',1Ch
000163FD: 2B C8                                                  dw avx_single_source_bw_instruction_38-instruction_handler
000163FF: 76 70 61 62 73 64 1E                                   db 'vpabsd',1Eh
00016406: C2 C7                                                  dw avx_single_source_d_instruction_38-instruction_handler
00016408: 76 70 61 62 73 71 1F                                   db 'vpabsq',1Fh
0001640F: 58 C7                                                  dw avx_single_source_q_instruction_38_evex-instruction_handler
00016411: 76 70 61 62 73 77 1D                                   db 'vpabsw',1Dh
00016418: 2B C8                                                  dw avx_single_source_bw_instruction_38-instruction_handler
0001641A: 76 70 61 64 64 62 FC                                   db 'vpaddb',0FCh
00016421: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016423: 76 70 61 64 64 64 FE                                   db 'vpaddd',0FEh
0001642A: 09 C8                                                  dw avx_d_instruction-instruction_handler
0001642C: 76 70 61 64 64 71 D4                                   db 'vpaddq',0D4h
00016433: A6 C7                                                  dw avx_q_instruction-instruction_handler
00016435: 76 70 61 64 64 77 FD                                   db 'vpaddw',0FDh
0001643C: 39 C8                                                  dw avx_bw_instruction-instruction_handler
0001643E: 76 70 61 6E 64 64 DB                                   db 'vpandd',0DBh
00016445: 02 C8                                                  dw avx_d_instruction_evex-instruction_handler
00016447: 76 70 61 6E 64 6E DF                                   db 'vpandn',0DFh
0001644E: 56 C8                                                  dw avx_pd_instruction_noevex-instruction_handler
00016450: 76 70 61 6E 64 71 DB                                   db 'vpandq',0DBh
00016457: 9F C7                                                  dw avx_q_instruction_evex-instruction_handler
00016459: 76 70 61 76 67 62 E0                                   db 'vpavgb',0E0h
00016460: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016462: 76 70 61 76 67 77 E3                                   db 'vpavgw',0E3h
00016469: 39 C8                                                  dw avx_bw_instruction-instruction_handler
0001646B: 76 70 63 6D 6F 76 A2                                   db 'vpcmov',0A2h
00016472: E0 EF                                                  dw vpcmov_instruction-instruction_handler
00016474: 76 70 63 6D 70 62 FF                                   db 'vpcmpb',-1
0001647B: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
0001647D: 76 70 63 6D 70 64 FF                                   db 'vpcmpd',-1
00016484: 9E D5                                                  dw avx512_cmp_d_instruction-instruction_handler
00016486: 76 70 63 6D 70 71 FF                                   db 'vpcmpq',-1
0001648D: 91 D5                                                  dw avx512_cmp_q_instruction-instruction_handler
0001648F: 76 70 63 6D 70 77 FF                                   db 'vpcmpw',-1
00016496: B1 D5                                                  dw avx512_cmp_w_instruction-instruction_handler
00016498: 76 70 63 6F 6D 62 FF                                   db 'vpcomb',-1
0001649F: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
000164A1: 76 70 63 6F 6D 64 FF                                   db 'vpcomd',-1
000164A8: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
000164AA: 76 70 63 6F 6D 71 FF                                   db 'vpcomq',-1
000164B1: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
000164B3: 76 70 63 6F 6D 77 FF                                   db 'vpcomw',-1
000164BA: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
000164BC: 76 70 65 72 6D 62 8D                                   db 'vpermb',8Dh
000164C3: 4D C8                                                  dw avx_bw_instruction_38_evex-instruction_handler
000164C5: 76 70 65 72 6D 64 36                                   db 'vpermd',36h
000164CC: F6 D9                                                  dw avx_permd_instruction-instruction_handler
000164CE: 76 70 65 72 6D 71 00                                   db 'vpermq',0
000164D5: 4B DA                                                  dw avx_permq_instruction-instruction_handler
000164D7: 76 70 65 72 6D 77 8D                                   db 'vpermw',8Dh
000164DE: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
000164E0: 76 70 70 65 72 6D A3                                   db 'vpperm',0A3h
000164E7: 77 EF                                                  dw xop_128bit_instruction-instruction_handler
000164E9: 76 70 72 6F 6C 64 01                                   db 'vprold',1
000164F0: 02 DD                                                  dw avx512_rotate_d_instruction-instruction_handler
000164F2: 76 70 72 6F 6C 71 01                                   db 'vprolq',1
000164F9: F8 DC                                                  dw avx512_rotate_q_instruction-instruction_handler
000164FB: 76 70 72 6F 72 64 00                                   db 'vprord',0
00016502: 02 DD                                                  dw avx512_rotate_d_instruction-instruction_handler
00016504: 76 70 72 6F 72 71 00                                   db 'vprorq',0
0001650B: F8 DC                                                  dw avx512_rotate_q_instruction-instruction_handler
0001650D: 76 70 72 6F 74 62 90                                   db 'vprotb',90h
00016514: 0D F0                                                  dw xop_shift_instruction-instruction_handler
00016516: 76 70 72 6F 74 64 92                                   db 'vprotd',92h
0001651D: 0D F0                                                  dw xop_shift_instruction-instruction_handler
0001651F: 76 70 72 6F 74 71 93                                   db 'vprotq',93h
00016526: 0D F0                                                  dw xop_shift_instruction-instruction_handler
00016528: 76 70 72 6F 74 77 91                                   db 'vprotw',91h
0001652F: 0D F0                                                  dw xop_shift_instruction-instruction_handler
00016531: 76 70 73 68 61 62 98                                   db 'vpshab',98h
00016538: 0D F0                                                  dw xop_shift_instruction-instruction_handler
0001653A: 76 70 73 68 61 64 9A                                   db 'vpshad',9Ah
00016541: 0D F0                                                  dw xop_shift_instruction-instruction_handler
00016543: 76 70 73 68 61 71 9B                                   db 'vpshaq',9Bh
0001654A: 0D F0                                                  dw xop_shift_instruction-instruction_handler
0001654C: 76 70 73 68 61 77 99                                   db 'vpshaw',99h
00016553: 0D F0                                                  dw xop_shift_instruction-instruction_handler
00016555: 76 70 73 68 6C 62 94                                   db 'vpshlb',94h
0001655C: 0D F0                                                  dw xop_shift_instruction-instruction_handler
0001655E: 76 70 73 68 6C 64 96                                   db 'vpshld',96h
00016565: 0D F0                                                  dw xop_shift_instruction-instruction_handler
00016567: 76 70 73 68 6C 71 97                                   db 'vpshlq',97h
0001656E: 0D F0                                                  dw xop_shift_instruction-instruction_handler
00016570: 76 70 73 68 6C 77 95                                   db 'vpshlw',95h
00016577: 0D F0                                                  dw xop_shift_instruction-instruction_handler
00016579: 76 70 73 6C 6C 64 F2                                   db 'vpslld',0F2h
00016580: 5C DB                                                  dw avx_shift_d_instruction-instruction_handler
00016582: 76 70 73 6C 6C 71 F3                                   db 'vpsllq',0F3h
00016589: 51 DB                                                  dw avx_shift_q_instruction-instruction_handler
0001658B: 76 70 73 6C 6C 77 F1                                   db 'vpsllw',0F1h
00016592: 60 DB                                                  dw avx_shift_bw_instruction-instruction_handler
00016594: 76 70 73 72 61 64 E2                                   db 'vpsrad',0E2h
0001659B: 5C DB                                                  dw avx_shift_d_instruction-instruction_handler
0001659D: 76 70 73 72 61 71 E2                                   db 'vpsraq',0E2h
000165A4: 4A DB                                                  dw avx_shift_q_instruction_evex-instruction_handler
000165A6: 76 70 73 72 61 77 E1                                   db 'vpsraw',0E1h
000165AD: 60 DB                                                  dw avx_shift_bw_instruction-instruction_handler
000165AF: 76 70 73 72 6C 64 D2                                   db 'vpsrld',0D2h
000165B6: 5C DB                                                  dw avx_shift_d_instruction-instruction_handler
000165B8: 76 70 73 72 6C 71 D3                                   db 'vpsrlq',0D3h
000165BF: 51 DB                                                  dw avx_shift_q_instruction-instruction_handler
000165C1: 76 70 73 72 6C 77 D1                                   db 'vpsrlw',0D1h
000165C8: 60 DB                                                  dw avx_shift_bw_instruction-instruction_handler
000165CA: 76 70 73 75 62 62 F8                                   db 'vpsubb',0F8h
000165D1: 39 C8                                                  dw avx_bw_instruction-instruction_handler
000165D3: 76 70 73 75 62 64 FA                                   db 'vpsubd',0FAh
000165DA: 09 C8                                                  dw avx_d_instruction-instruction_handler
000165DC: 76 70 73 75 62 71 FB                                   db 'vpsubq',0FBh
000165E3: A6 C7                                                  dw avx_q_instruction-instruction_handler
000165E5: 76 70 73 75 62 77 F9                                   db 'vpsubw',0F9h
000165EC: 39 C8                                                  dw avx_bw_instruction-instruction_handler
000165EE: 76 70 74 65 73 74 17                                   db 'vptest',17h
000165F5: 0D D3                                                  dw avx_single_source_instruction_38_noevex-instruction_handler
000165F7: 76 70 78 6F 72 64 EF                                   db 'vpxord',0EFh
000165FE: 02 C8                                                  dw avx_d_instruction_evex-instruction_handler
00016600: 76 70 78 6F 72 71 EF                                   db 'vpxorq',0EFh
00016607: 9F C7                                                  dw avx_q_instruction_evex-instruction_handler
00016609: 76 72 63 70 70 73 53                                   db 'vrcpps',53h
00016610: C9 C6                                                  dw avx_single_source_ps_instruction_noevex-instruction_handler
00016612: 76 72 63 70 73 73 53                                   db 'vrcpss',53h
00016619: 4F C7                                                  dw avx_ss_instruction_noevex-instruction_handler
0001661B: 76 73 75 62 70 64 5C                                   db 'vsubpd',5Ch
00016622: 74 C6                                                  dw avx_pd_instruction_er-instruction_handler
00016624: 76 73 75 62 70 73 5C                                   db 'vsubps',5Ch
0001662B: E2 C6                                                  dw avx_ps_instruction_er-instruction_handler
0001662D: 76 73 75 62 73 64 5C                                   db 'vsubsd',5Ch
00016634: 10 C7                                                  dw avx_sd_instruction_er-instruction_handler
00016636: 76 73 75 62 73 73 5C                                   db 'vsubss',5Ch
0001663D: 33 C7                                                  dw avx_ss_instruction_er-instruction_handler
0001663F: 76 78 6F 72 70 64 57                                   db 'vxorpd',57h
00016646: 82 C6                                                  dw avx_pd_instruction-instruction_handler
00016648: 76 78 6F 72 70 73 57                                   db 'vxorps',57h
0001664F: F0 C6                                                  dw avx_ps_instruction-instruction_handler
00016651: 77 62 69 6E 76 64 09                                   db 'wbinvd',9
00016658: 95 64                                                  dw simple_extended_instruction-instruction_handler
0001665A: 77 72 6D 73 72 71 30                                   db 'wrmsrq',30h
00016661: 84 64                                                  dw simple_extended_instruction_64bit-instruction_handler
00016663: 77 72 70 6B 72 75 EF                                   db 'wrpkru',0EFh
0001666A: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
0001666C: 77 72 75 73 73 64 F5                                   db 'wrussd',0F5h
00016673: 84 BC                                                  dw wrussd_instruction-instruction_handler
00016675: 77 72 75 73 73 71 F5                                   db 'wrussq',0F5h
0001667C: 74 BC                                                  dw wrussq_instruction-instruction_handler
0001667E: 78 61 62 6F 72 74 00                                   db 'xabort',0
00016685: 05 B7                                                  dw xabort_instruction-instruction_handler
00016687: 78 62 65 67 69 6E 00                                   db 'xbegin',0
0001668E: 31 B7                                                  dw xbegin_instruction-instruction_handler
00016690: 78 67 65 74 62 76 D0                                   db 'xgetbv',0D0h
00016697: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
00016699: 78 72 73 74 6F 72 05                                   db 'xrstor',101b
000166A0: 0F AE                                                  dw fxsave_instruction-instruction_handler
000166A2: 78 73 61 76 65 63 04                                   db 'xsavec',4
000166A9: 06 AE                                                  dw xsaves_instruction-instruction_handler
000166AB: 78 73 61 76 65 73 05                                   db 'xsaves',5
000166B2: 06 AE                                                  dw xsaves_instruction-instruction_handler
000166B4: 78 73 65 74 62 76 D1                                   db 'xsetbv',0D1h
000166BB: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
                                                                instructions_7:
000166BD: 62 6C 63 66 69 6C 6C 11                                db 'blcfill',11h
000166C5: FA ED                                                  dw tbm_instruction-instruction_handler
000166C7: 62 6C 65 6E 64 70 64 0D                                db 'blendpd',0Dh
000166CF: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
000166D1: 62 6C 65 6E 64 70 73 0C                                db 'blendps',0Ch
000166D9: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
000166DB: 62 6C 73 66 69 6C 6C 12                                db 'blsfill',12h
000166E3: FA ED                                                  dw tbm_instruction-instruction_handler
000166E5: 63 6C 66 6C 75 73 68 07                                db 'clflush',111b
000166ED: 59 AE                                                  dw clflush_instruction-instruction_handler
000166EF: 63 6D 6F 76 6E 61 65 42                                db 'cmovnae',42h
000166F7: AE 83                                                  dw bs_instruction-instruction_handler
000166F9: 63 6D 6F 76 6E 62 65 47                                db 'cmovnbe',47h
00016701: AE 83                                                  dw bs_instruction-instruction_handler
00016703: 63 6D 6F 76 6E 67 65 4C                                db 'cmovnge',4Ch
0001670B: AE 83                                                  dw bs_instruction-instruction_handler
0001670D: 63 6D 6F 76 6E 6C 65 4F                                db 'cmovnle',4Fh
00016715: AE 83                                                  dw bs_instruction-instruction_handler
00016717: 63 6D 70 65 71 70 64 00                                db 'cmpeqpd',0
0001671F: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
00016721: 63 6D 70 65 71 70 73 00                                db 'cmpeqps',0
00016729: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
0001672B: 63 6D 70 65 71 73 64 00                                db 'cmpeqsd',0
00016733: DC A2                                                  dw cmp_sd_instruction-instruction_handler
00016735: 63 6D 70 65 71 73 73 00                                db 'cmpeqss',0
0001673D: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
0001673F: 63 6D 70 6C 65 70 64 02                                db 'cmplepd',2
00016747: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
00016749: 63 6D 70 6C 65 70 73 02                                db 'cmpleps',2
00016751: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
00016753: 63 6D 70 6C 65 73 64 02                                db 'cmplesd',2
0001675B: DC A2                                                  dw cmp_sd_instruction-instruction_handler
0001675D: 63 6D 70 6C 65 73 73 02                                db 'cmpless',2
00016765: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
00016767: 63 6D 70 6C 74 70 64 01                                db 'cmpltpd',1
0001676F: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
00016771: 63 6D 70 6C 74 70 73 01                                db 'cmpltps',1
00016779: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
0001677B: 63 6D 70 6C 74 73 64 01                                db 'cmpltsd',1
00016783: DC A2                                                  dw cmp_sd_instruction-instruction_handler
00016785: 63 6D 70 6C 74 73 73 01                                db 'cmpltss',1
0001678D: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
0001678F: 63 6D 70 78 63 68 67 B0                                db 'cmpxchg',0B0h
00016797: 6B 95                                                  dw basic_486_instruction-instruction_handler
00016799: 64 69 73 70 6C 61 79 00                                db 'display',0
000167A1: F4 03                                                  dw display_directive-instruction_handler
000167A3: 65 6E 64 62 72 33 32 FB                                db 'endbr32',0FBh
000167AB: 03 BD                                                  dw endbr_instruction-instruction_handler
000167AD: 65 6E 64 62 72 36 34 FA                                db 'endbr64',0FAh
000167B5: 03 BD                                                  dw endbr_instruction-instruction_handler
000167B7: 66 63 6D 6F 76 62 65 D0                                db 'fcmovbe',0D0h
000167BF: 69 9B                                                  dw fcmov_instruction-instruction_handler
000167C1: 66 63 6D 6F 76 6E 62 C0                                db 'fcmovnb',0C0h
000167C9: 6D 9B                                                  dw fcomi_instruction-instruction_handler
000167CB: 66 63 6D 6F 76 6E 65 C8                                db 'fcmovne',0C8h
000167D3: 6D 9B                                                  dw fcomi_instruction-instruction_handler
000167D5: 66 63 6D 6F 76 6E 75 D8                                db 'fcmovnu',0D8h
000167DD: 6D 9B                                                  dw fcomi_instruction-instruction_handler
000167DF: 66 64 65 63 73 74 70 36                                db 'fdecstp',110110b
000167E7: E6 97                                                  dw simple_fpu_instruction-instruction_handler
000167E9: 66 69 6E 63 73 74 70 37                                db 'fincstp',110111b
000167F1: E6 97                                                  dw simple_fpu_instruction-instruction_handler
000167F3: 66 6C 64 65 6E 76 64 04                                db 'fldenvd',4
000167FB: 74 9A                                                  dw fldenv_instruction_32bit-instruction_handler
000167FD: 66 6C 64 65 6E 76 77 04                                db 'fldenvw',4
00016805: 69 9A                                                  dw fldenv_instruction_16bit-instruction_handler
00016807: 66 6E 73 61 76 65 64 06                                db 'fnsaved',6
0001680F: 7F 9A                                                  dw fnsave_instruction_32bit-instruction_handler
00016811: 66 6E 73 61 76 65 77 06                                db 'fnsavew',6
00016819: 8A 9A                                                  dw fnsave_instruction_16bit-instruction_handler
0001681B: 66 6E 73 74 65 6E 76 06                                db 'fnstenv',6
00016823: 5C 9A                                                  dw fldenv_instruction-instruction_handler
00016825: 66 72 6E 64 69 6E 74 3C                                db 'frndint',111100b
0001682D: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001682F: 66 72 73 74 6F 72 64 04                                db 'frstord',4
00016837: 7F 9A                                                  dw fnsave_instruction_32bit-instruction_handler
00016839: 66 72 73 74 6F 72 77 04                                db 'frstorw',4
00016841: 8A 9A                                                  dw fnsave_instruction_16bit-instruction_handler
00016843: 66 73 69 6E 63 6F 73 3B                                db 'fsincos',111011b
0001684B: E6 97                                                  dw simple_fpu_instruction-instruction_handler
0001684D: 66 73 74 65 6E 76 64 06                                db 'fstenvd',6
00016855: 70 9A                                                  dw fstenv_instruction_32bit-instruction_handler
00016857: 66 73 74 65 6E 76 77 06                                db 'fstenvw',6
0001685F: 65 9A                                                  dw fstenv_instruction_16bit-instruction_handler
00016861: 66 75 63 6F 6D 69 70 E8                                db 'fucomip',0E8h
00016869: 71 9B                                                  dw fcomip_instruction-instruction_handler
0001686B: 66 75 63 6F 6D 70 70 00                                db 'fucompp',0
00016873: FF 99                                                  dw fucompp_instruction-instruction_handler
00016875: 66 78 72 73 74 6F 72 01                                db 'fxrstor',1
0001687D: 0F AE                                                  dw fxsave_instruction-instruction_handler
0001687F: 66 78 74 72 61 63 74 34                                db 'fxtract',110100b
00016887: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00016889: 66 79 6C 32 78 70 31 39                                db 'fyl2xp1',111001b
00016891: E6 97                                                  dw simple_fpu_instruction-instruction_handler
00016893: 69 6E 63 73 73 70 64 05                                db 'incsspd',5
0001689B: 17 BC                                                  dw incsspd_instruction-instruction_handler
0001689D: 69 6E 63 73 73 70 71 05                                db 'incsspq',5
000168A5: 10 BC                                                  dw incsspq_instruction-instruction_handler
000168A7: 69 6E 73 65 72 74 71 00                                db 'insertq',0
000168AF: 4C B1                                                  dw insertq_instruction-instruction_handler
000168B1: 69 6E 76 6C 70 67 61 DF                                db 'invlpga',0DFh
000168B9: 58 B6                                                  dw invlpga_instruction-instruction_handler
000168BB: 69 6E 76 6C 70 67 62 FE                                db 'invlpgb',0FEh
000168C3: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
000168C5: 69 6E 76 70 63 69 64 82                                db 'invpcid',82h
000168CD: 58 B5                                                  dw vmx_inv_instruction-instruction_handler
000168CF: 69 6E 76 76 70 69 64 81                                db 'invvpid',81h
000168D7: 58 B5                                                  dw vmx_inv_instruction-instruction_handler
000168D9: 6C 64 6D 78 63 73 72 02                                db 'ldmxcsr',10b
000168E1: 65 AE                                                  dw stmxcsr_instruction-instruction_handler
000168E3: 6C 6F 6F 70 6E 65 64 E0                                db 'loopned',0E0h
000168EB: 43 8E                                                  dw loop_instruction_32bit-instruction_handler
000168ED: 6C 6F 6F 70 6E 65 71 E0                                db 'loopneq',0E0h
000168F5: 55 8E                                                  dw loop_instruction_64bit-instruction_handler
000168F7: 6C 6F 6F 70 6E 65 77 E0                                db 'loopnew',0E0h
000168FF: 24 8E                                                  dw loop_instruction_16bit-instruction_handler
00016901: 6C 6F 6F 70 6E 7A 64 E0                                db 'loopnzd',0E0h
00016909: 43 8E                                                  dw loop_instruction_32bit-instruction_handler
0001690B: 6C 6F 6F 70 6E 7A 71 E0                                db 'loopnzq',0E0h
00016913: 55 8E                                                  dw loop_instruction_64bit-instruction_handler
00016915: 6C 6F 6F 70 6E 7A 77 E0                                db 'loopnzw',0E0h
0001691D: 24 8E                                                  dw loop_instruction_16bit-instruction_handler
0001691F: 6D 63 6F 6D 6D 69 74 FA                                db 'mcommit',0FAh
00016927: 4A 95                                                  dw simple_instruction_f3_0f_01-instruction_handler
00016929: 6D 6F 6E 69 74 6F 72 C8                                db 'monitor',0C8h
00016931: 15 B0                                                  dw monitor_instruction-instruction_handler
00016933: 6D 6F 76 64 64 75 70 12                                db 'movddup',12h
0001693B: 88 A2                                                  dw sse_sd_instruction-instruction_handler
0001693D: 6D 6F 76 64 69 72 69 F9                                db 'movdiri',0F9h
00016945: C4 AF                                                  dw movdiri_instruction-instruction_handler
00016947: 6D 6F 76 64 71 32 71 00                                db 'movdq2q',0
0001694F: B9 A1                                                  dw movdq2q_instruction-instruction_handler
00016951: 6D 6F 76 68 6C 70 73 12                                db 'movhlps',12h
00016959: DC A5                                                  dw movhlps_instruction-instruction_handler
0001695B: 6D 6F 76 6C 68 70 73 16                                db 'movlhps',16h
00016963: DC A5                                                  dw movhlps_instruction-instruction_handler
00016965: 6D 6F 76 6E 74 64 71 E7                                db 'movntdq',0E7h
0001696D: E4 AE                                                  dw movntpd_instruction-instruction_handler
0001696F: 6D 6F 76 6E 74 70 64 2B                                db 'movntpd',2Bh
00016977: E4 AE                                                  dw movntpd_instruction-instruction_handler
00016979: 6D 6F 76 6E 74 70 73 2B                                db 'movntps',2Bh
00016981: EB AE                                                  dw movntps_instruction-instruction_handler
00016983: 6D 6F 76 6E 74 73 64 2B                                db 'movntsd',2Bh
0001698B: 44 AF                                                  dw movntsd_instruction-instruction_handler
0001698D: 6D 6F 76 6E 74 73 73 2B                                db 'movntss',2Bh
00016995: 54 AF                                                  dw movntss_instruction-instruction_handler
00016997: 6D 6F 76 71 32 64 71 00                                db 'movq2dq',0
0001699F: C9 A1                                                  dw movq2dq_instruction-instruction_handler
000169A1: 6D 70 73 61 64 62 77 42                                db 'mpsadbw',42h
000169A9: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
000169AB: 70 61 64 64 75 73 62 DC                                db 'paddusb',0DCh
000169B3: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000169B5: 70 61 64 64 75 73 77 DD                                db 'paddusw',0DDh
000169BD: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000169BF: 70 61 6C 69 67 6E 72 00                                db 'palignr',0
000169C7: C0 A8                                                  dw palignr_instruction-instruction_handler
000169C9: 70 61 76 67 75 73 62 BF                                db 'pavgusb',0BFh
000169D1: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
000169D3: 70 62 6C 65 6E 64 77 0E                                db 'pblendw',0Eh
000169DB: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
000169DD: 70 63 6D 70 65 71 62 74                                db 'pcmpeqb',74h
000169E5: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000169E7: 70 63 6D 70 65 71 64 76                                db 'pcmpeqd',76h
000169EF: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
000169F1: 70 63 6D 70 65 71 71 29                                db 'pcmpeqq',29h
000169F9: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000169FB: 70 63 6D 70 65 71 77 75                                db 'pcmpeqw',75h
00016A03: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016A05: 70 63 6D 70 67 74 62 64                                db 'pcmpgtb',64h
00016A0D: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016A0F: 70 63 6D 70 67 74 64 66                                db 'pcmpgtd',66h
00016A17: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016A19: 70 63 6D 70 67 74 71 37                                db 'pcmpgtq',37h
00016A21: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
00016A23: 70 63 6D 70 67 74 77 65                                db 'pcmpgtw',65h
00016A2B: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016A2D: 70 63 6F 6D 6D 69 74 F8                                db 'pcommit',0F8h
00016A35: BC AE                                                  dw pcommit_instruction-instruction_handler
00016A37: 70 63 6F 6E 66 69 67 C5                                db 'pconfig',0C5h
00016A3F: 7D B0                                                  dw pconfig_instruction-instruction_handler
00016A41: 70 66 63 6D 70 65 71 B0                                db 'pfcmpeq',0B0h
00016A49: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016A4B: 70 66 63 6D 70 67 65 90                                db 'pfcmpge',90h
00016A53: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016A55: 70 66 63 6D 70 67 74 A0                                db 'pfcmpgt',0A0h
00016A5D: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016A5F: 70 66 70 6E 61 63 63 8E                                db 'pfpnacc',8Eh
00016A67: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016A69: 70 66 72 73 71 72 74 97                                db 'pfrsqrt',97h
00016A71: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016A73: 70 68 61 64 64 73 77 03                                db 'phaddsw',3
00016A7B: A8 A8                                                  dw ssse3_instruction-instruction_handler
00016A7D: 70 68 73 75 62 73 77 07                                db 'phsubsw',7
00016A85: A8 A8                                                  dw ssse3_instruction-instruction_handler
00016A87: 70 6D 61 64 64 77 64 F5                                db 'pmaddwd',0F5h
00016A8F: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016A91: 70 6D 75 6C 68 72 77 B7                                db 'pmulhrw',0B7h
00016A99: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00016A9B: 70 6D 75 6C 68 75 77 E4                                db 'pmulhuw',0E4h
00016AA3: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016AA5: 70 6D 75 6C 75 64 71 F4                                db 'pmuludq',0F4h
00016AAD: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016AAF: 70 73 68 75 66 68 77 F3                                db 'pshufhw',0F3h
00016AB7: 3B 9E                                                  dw pshufd_instruction-instruction_handler
00016AB9: 70 73 68 75 66 6C 77 F2                                db 'pshuflw',0F2h
00016AC1: 3B 9E                                                  dw pshufd_instruction-instruction_handler
00016AC3: 70 73 75 62 75 73 62 D8                                db 'psubusb',0D8h
00016ACB: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016ACD: 70 73 75 62 75 73 77 D9                                db 'psubusw',0D9h
00016AD5: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00016AD7: 70 74 77 72 69 74 65 04                                db 'ptwrite',4
00016ADF: AA B3                                                  dw ptwrite_instruction-instruction_handler
00016AE1: 72 6F 75 6E 64 70 64 09                                db 'roundpd',9
00016AE9: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00016AEB: 72 6F 75 6E 64 70 73 08                                db 'roundps',8
00016AF3: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00016AF5: 72 6F 75 6E 64 73 64 0B                                db 'roundsd',0Bh
00016AFD: DA A9                                                  dw sse4_sd_instruction_66_3a_imm8-instruction_handler
00016AFF: 72 6F 75 6E 64 73 73 0A                                db 'roundss',0Ah
00016B07: CF A9                                                  dw sse4_ss_instruction_66_3a_imm8-instruction_handler
00016B09: 72 73 71 72 74 70 73 52                                db 'rsqrtps',52h
00016B11: 4F A2                                                  dw sse_ps_instruction-instruction_handler
00016B13: 72 73 71 72 74 73 73 52                                db 'rsqrtss',52h
00016B1B: 75 A2                                                  dw sse_ss_instruction-instruction_handler
00016B1D: 73 65 63 74 69 6F 6E 00                                db 'section',0
00016B25: DB 32                                                  dw section_directive-instruction_handler
00016B27: 73 65 67 6D 65 6E 74 00                                db 'segment',0
00016B2F: C1 32                                                  dw segment_directive-instruction_handler
00016B31: 73 74 6D 78 63 73 72 03                                db 'stmxcsr',11b
00016B39: 65 AE                                                  dw stmxcsr_instruction-instruction_handler
00016B3B: 73 79 73 63 61 6C 6C 05                                db 'syscall',05h
00016B43: 95 64                                                  dw simple_extended_instruction-instruction_handler
00016B45: 73 79 73 65 78 69 74 35                                db 'sysexit',35h
00016B4D: 95 64                                                  dw simple_extended_instruction-instruction_handler
00016B4F: 73 79 73 72 65 74 71 07                                db 'sysretq',07h
00016B57: 84 64                                                  dw simple_extended_instruction_64bit-instruction_handler
00016B59: 74 6C 62 73 79 6E 63 FF                                db 'tlbsync',0FFh
00016B61: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
00016B63: 75 63 6F 6D 69 73 64 2E                                db 'ucomisd',2Eh
00016B6B: FC A2                                                  dw comisd_instruction-instruction_handler
00016B6D: 75 63 6F 6D 69 73 73 2E                                db 'ucomiss',2Eh
00016B75: F3 A2                                                  dw comiss_instruction-instruction_handler
00016B77: 76 61 65 73 64 65 63 DE                                db 'vaesdec',0DEh
00016B7F: A5 D3                                                  dw avx_instruction_38_nomask-instruction_handler
00016B81: 76 61 65 73 65 6E 63 DC                                db 'vaesenc',0DCh
00016B89: A5 D3                                                  dw avx_instruction_38_nomask-instruction_handler
00016B8B: 76 61 65 73 69 6D 63 DB                                db 'vaesimc',0DBh
00016B93: 02 D3                                                  dw avx_single_source_128bit_instruction_38_noevex-instruction_handler
00016B95: 76 61 6C 69 67 6E 64 03                                db 'valignd',3
00016B9D: DB C7                                                  dw avx_d_instruction_3a_imm8_evex-instruction_handler
00016B9F: 76 61 6C 69 67 6E 71 03                                db 'valignq',3
00016BA7: 88 C7                                                  dw avx_q_instruction_3a_imm8_evex-instruction_handler
00016BA9: 76 61 6E 64 6E 70 64 55                                db 'vandnpd',55h
00016BB1: 82 C6                                                  dw avx_pd_instruction-instruction_handler
00016BB3: 76 61 6E 64 6E 70 73 55                                db 'vandnps',55h
00016BBB: F0 C6                                                  dw avx_ps_instruction-instruction_handler
00016BBD: 76 63 6F 6D 69 73 64 2F                                db 'vcomisd',2Fh
00016BC5: 90 D2                                                  dw avx_comisd_instruction-instruction_handler
00016BC7: 76 63 6F 6D 69 73 73 2F                                db 'vcomiss',2Fh
00016BCF: 82 D2                                                  dw avx_comiss_instruction-instruction_handler
00016BD1: 76 65 78 70 32 70 64 C8                                db 'vexp2pd',0C8h
00016BD9: 95 D4                                                  dw avx512_exp2pd_instruction-instruction_handler
00016BDB: 76 65 78 70 32 70 73 C8                                db 'vexp2ps',0C8h
00016BE3: A9 D4                                                  dw avx512_exp2ps_instruction-instruction_handler
00016BE5: 76 66 72 63 7A 70 64 81                                db 'vfrczpd',81h
00016BED: 31 EF                                                  dw xop_single_source_instruction-instruction_handler
00016BEF: 76 66 72 63 7A 70 73 80                                db 'vfrczps',80h
00016BF7: 31 EF                                                  dw xop_single_source_instruction-instruction_handler
00016BF9: 76 66 72 63 7A 73 64 83                                db 'vfrczsd',83h
00016C01: 11 EF                                                  dw xop_single_source_sd_instruction-instruction_handler
00016C03: 76 66 72 63 7A 73 73 82                                db 'vfrczss',82h
00016C0B: 21 EF                                                  dw xop_single_source_ss_instruction-instruction_handler
00016C0D: 76 68 61 64 64 70 64 7C                                db 'vhaddpd',07Ch
00016C15: 56 C8                                                  dw avx_pd_instruction_noevex-instruction_handler
00016C17: 76 68 61 64 64 70 73 7C                                db 'vhaddps',07Ch
00016C1F: 68 C8                                                  dw avx_ps_instruction_noevex-instruction_handler
00016C21: 76 68 73 75 62 70 64 7D                                db 'vhsubpd',07Dh
00016C29: 56 C8                                                  dw avx_pd_instruction_noevex-instruction_handler
00016C2B: 76 68 73 75 62 70 73 7D                                db 'vhsubps',07Dh
00016C33: 68 C8                                                  dw avx_ps_instruction_noevex-instruction_handler
00016C35: 76 69 72 74 75 61 6C 00                                db 'virtual',0
00016C3D: BE 05                                                  dw virtual_directive-instruction_handler
00016C3F: 76 6D 63 6C 65 61 72 06                                db 'vmclear',6
00016C47: 2F B4                                                  dw vmclear_instruction-instruction_handler
00016C49: 76 6D 6D 63 61 6C 6C D9                                db 'vmmcall',0D9h
00016C51: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
00016C53: 76 6D 6F 76 61 70 64 28                                db 'vmovapd',28h
00016C5B: CA CC                                                  dw avx_movpd_instruction-instruction_handler
00016C5D: 76 6D 6F 76 61 70 73 28                                db 'vmovaps',28h
00016C65: D8 CC                                                  dw avx_movps_instruction-instruction_handler
00016C67: 76 6D 6F 76 64 71 61 6F                                db 'vmovdqa',6Fh
00016C6F: 8B CC                                                  dw avx_movdqa_instruction-instruction_handler
00016C71: 76 6D 6F 76 64 71 75 6F                                db 'vmovdqu',6Fh
00016C79: 87 CC                                                  dw avx_movdqu_instruction-instruction_handler
00016C7B: 76 6D 6F 76 68 70 64 16                                db 'vmovhpd',16h
00016C83: 6D D0                                                  dw avx_movlpd_instruction-instruction_handler
00016C85: 76 6D 6F 76 68 70 73 16                                db 'vmovhps',16h
00016C8D: 7B D0                                                  dw avx_movlps_instruction-instruction_handler
00016C8F: 76 6D 6F 76 6C 70 64 12                                db 'vmovlpd',12h
00016C97: 6D D0                                                  dw avx_movlpd_instruction-instruction_handler
00016C99: 76 6D 6F 76 6C 70 73 12                                db 'vmovlps',12h
00016CA1: 7B D0                                                  dw avx_movlps_instruction-instruction_handler
00016CA3: 76 6D 6F 76 75 70 64 10                                db 'vmovupd',10h
00016CAB: CA CC                                                  dw avx_movpd_instruction-instruction_handler
00016CAD: 76 6D 6F 76 75 70 73 10                                db 'vmovups',10h
00016CB5: D8 CC                                                  dw avx_movps_instruction-instruction_handler
00016CB7: 76 6D 70 74 72 6C 64 06                                db 'vmptrld',6
00016CBF: 3F B4                                                  dw vmx_instruction-instruction_handler
00016CC1: 76 6D 70 74 72 73 74 07                                db 'vmptrst',7
00016CC9: 3F B4                                                  dw vmx_instruction-instruction_handler
00016CCB: 76 6D 77 72 69 74 65 00                                db 'vmwrite',0
00016CD3: 09 B5                                                  dw vmwrite_instruction-instruction_handler
00016CD5: 76 70 61 64 64 73 62 EC                                db 'vpaddsb',0ECh
00016CDD: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016CDF: 76 70 61 64 64 73 77 ED                                db 'vpaddsw',0EDh
00016CE7: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016CE9: 76 70 61 6E 64 6E 64 DF                                db 'vpandnd',0DFh
00016CF1: 02 C8                                                  dw avx_d_instruction_evex-instruction_handler
00016CF3: 76 70 61 6E 64 6E 71 DF                                db 'vpandnq',0DFh
00016CFB: 9F C7                                                  dw avx_q_instruction_evex-instruction_handler
00016CFD: 76 70 63 6D 70 75 62 FF                                db 'vpcmpub',-1
00016D05: AB D5                                                  dw avx512_cmp_ub_instruction-instruction_handler
00016D07: 76 70 63 6D 70 75 64 FF                                db 'vpcmpud',-1
00016D0F: 8B D5                                                  dw avx512_cmp_ud_instruction-instruction_handler
00016D11: 76 70 63 6D 70 75 71 FF                                db 'vpcmpuq',-1
00016D19: 7E D5                                                  dw avx512_cmp_uq_instruction-instruction_handler
00016D1B: 76 70 63 6D 70 75 77 FF                                db 'vpcmpuw',-1
00016D23: A4 D5                                                  dw avx512_cmp_uw_instruction-instruction_handler
00016D25: 76 70 63 6F 6D 75 62 FF                                db 'vpcomub',-1
00016D2D: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
00016D2F: 76 70 63 6F 6D 75 64 FF                                db 'vpcomud',-1
00016D37: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
00016D39: 76 70 63 6F 6D 75 71 FF                                db 'vpcomuq',-1
00016D41: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
00016D43: 76 70 63 6F 6D 75 77 FF                                db 'vpcomuw',-1
00016D4B: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
00016D4D: 76 70 65 72 6D 70 64 01                                db 'vpermpd',1
00016D55: 4B DA                                                  dw avx_permq_instruction-instruction_handler
00016D57: 76 70 65 72 6D 70 73 16                                db 'vpermps',16h
00016D5F: F6 D9                                                  dw avx_permd_instruction-instruction_handler
00016D61: 76 70 65 78 74 72 62 14                                db 'vpextrb',14h
00016D69: 0D E2                                                  dw avx_extract_b_instruction-instruction_handler
00016D6B: 76 70 65 78 74 72 64 16                                db 'vpextrd',16h
00016D73: 20 E2                                                  dw avx_extract_d_instruction-instruction_handler
00016D75: 76 70 65 78 74 72 71 16                                db 'vpextrq',16h
00016D7D: 15 E2                                                  dw avx_extract_q_instruction-instruction_handler
00016D7F: 76 70 65 78 74 72 77 15                                db 'vpextrw',15h
00016D87: 11 E2                                                  dw avx_extract_w_instruction-instruction_handler
00016D89: 76 70 68 61 64 64 64 02                                db 'vphaddd',2
00016D91: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
00016D93: 76 70 68 61 64 64 77 01                                db 'vphaddw',1
00016D9B: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
00016D9D: 76 70 68 73 75 62 64 06                                db 'vphsubd',6
00016DA5: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
00016DA7: 76 70 68 73 75 62 77 05                                db 'vphsubw',5
00016DAF: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
00016DB1: 76 70 69 6E 73 72 62 20                                db 'vpinsrb',20h
00016DB9: 3D E3                                                  dw avx_pinsrb_instruction-instruction_handler
00016DBB: 76 70 69 6E 73 72 64 22                                db 'vpinsrd',22h
00016DC3: 45 E3                                                  dw avx_pinsrd_instruction-instruction_handler
00016DC5: 76 70 69 6E 73 72 71 22                                db 'vpinsrq',22h
00016DCD: 49 E3                                                  dw avx_pinsrq_instruction-instruction_handler
00016DCF: 76 70 69 6E 73 72 77 C4                                db 'vpinsrw',0C4h
00016DD7: 41 E3                                                  dw avx_pinsrw_instruction-instruction_handler
00016DD9: 76 70 6D 61 78 73 62 3C                                db 'vpmaxsb',3Ch
00016DE1: 32 C8                                                  dw avx_bw_instruction_38-instruction_handler
00016DE3: 76 70 6D 61 78 73 64 3D                                db 'vpmaxsd',3Dh
00016DEB: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00016DED: 76 70 6D 61 78 73 71 3D                                db 'vpmaxsq',3Dh
00016DF5: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00016DF7: 76 70 6D 61 78 73 77 EE                                db 'vpmaxsw',0EEh
00016DFF: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016E01: 76 70 6D 61 78 75 62 DE                                db 'vpmaxub',0DEh
00016E09: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016E0B: 76 70 6D 61 78 75 64 3F                                db 'vpmaxud',3Fh
00016E13: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00016E15: 76 70 6D 61 78 75 71 3F                                db 'vpmaxuq',3Fh
00016E1D: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00016E1F: 76 70 6D 61 78 75 77 3E                                db 'vpmaxuw',3Eh
00016E27: 32 C8                                                  dw avx_bw_instruction_38-instruction_handler
00016E29: 76 70 6D 69 6E 73 62 38                                db 'vpminsb',38h
00016E31: 32 C8                                                  dw avx_bw_instruction_38-instruction_handler
00016E33: 76 70 6D 69 6E 73 64 39                                db 'vpminsd',39h
00016E3B: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00016E3D: 76 70 6D 69 6E 73 71 39                                db 'vpminsq',39h
00016E45: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00016E47: 76 70 6D 69 6E 73 77 EA                                db 'vpminsw',0EAh
00016E4F: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016E51: 76 70 6D 69 6E 75 62 DA                                db 'vpminub',0DAh
00016E59: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016E5B: 76 70 6D 69 6E 75 64 3B                                db 'vpminud',3Bh
00016E63: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00016E65: 76 70 6D 69 6E 75 71 3B                                db 'vpminuq',3Bh
00016E6D: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00016E6F: 76 70 6D 69 6E 75 77 3A                                db 'vpminuw',3Ah
00016E77: 32 C8                                                  dw avx_bw_instruction_38-instruction_handler
00016E79: 76 70 6D 6F 76 64 62 31                                db 'vpmovdb',31h
00016E81: FB DD                                                  dw avx512_pmovdb_instruction-instruction_handler
00016E83: 76 70 6D 6F 76 64 77 33                                db 'vpmovdw',33h
00016E8B: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
00016E8D: 76 70 6D 6F 76 71 62 32                                db 'vpmovqb',32h
00016E95: F7 DD                                                  dw avx512_pmovqb_instruction-instruction_handler
00016E97: 76 70 6D 6F 76 71 64 35                                db 'vpmovqd',35h
00016E9F: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
00016EA1: 76 70 6D 6F 76 71 77 34                                db 'vpmovqw',34h
00016EA9: FB DD                                                  dw avx512_pmovdb_instruction-instruction_handler
00016EAB: 76 70 6D 6F 76 77 62 30                                db 'vpmovwb',30h
00016EB3: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
00016EB5: 76 70 6D 75 6C 64 71 28                                db 'vpmuldq',28h
00016EBD: 66 C7                                                  dw avx_q_instruction_38-instruction_handler
00016EBF: 76 70 6D 75 6C 68 77 E5                                db 'vpmulhw',0E5h
00016EC7: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016EC9: 76 70 6D 75 6C 6C 64 40                                db 'vpmulld',40h
00016ED1: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00016ED3: 76 70 6D 75 6C 6C 71 40                                db 'vpmullq',40h
00016EDB: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00016EDD: 76 70 6D 75 6C 6C 77 D5                                db 'vpmullw',0D5h
00016EE5: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016EE7: 76 70 72 6F 6C 76 64 15                                db 'vprolvd',15h
00016EEF: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
00016EF1: 76 70 72 6F 6C 76 71 15                                db 'vprolvq',15h
00016EF9: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00016EFB: 76 70 72 6F 72 76 64 14                                db 'vprorvd',14h
00016F03: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
00016F05: 76 70 72 6F 72 76 71 14                                db 'vprorvq',14h
00016F0D: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00016F0F: 76 70 73 61 64 62 77 F6                                db 'vpsadbw',0F6h
00016F17: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016F19: 76 70 73 68 6C 64 64 71                                db 'vpshldd',71h
00016F21: DB C7                                                  dw avx_d_instruction_3a_imm8_evex-instruction_handler
00016F23: 76 70 73 68 6C 64 71 71                                db 'vpshldq',71h
00016F2B: 88 C7                                                  dw avx_q_instruction_3a_imm8_evex-instruction_handler
00016F2D: 76 70 73 68 6C 64 77 70                                db 'vpshldw',70h
00016F35: 0D C8                                                  dw avx_bw_instruction_3a_imm8_w1_evex-instruction_handler
00016F37: 76 70 73 68 72 64 64 73                                db 'vpshrdd',73h
00016F3F: DB C7                                                  dw avx_d_instruction_3a_imm8_evex-instruction_handler
00016F41: 76 70 73 68 72 64 71 73                                db 'vpshrdq',73h
00016F49: 88 C7                                                  dw avx_q_instruction_3a_imm8_evex-instruction_handler
00016F4B: 76 70 73 68 72 64 77 72                                db 'vpshrdw',72h
00016F53: 0D C8                                                  dw avx_bw_instruction_3a_imm8_w1_evex-instruction_handler
00016F55: 76 70 73 68 75 66 62 00                                db 'vpshufb',0
00016F5D: 32 C8                                                  dw avx_bw_instruction_38-instruction_handler
00016F5F: 76 70 73 68 75 66 64 70                                db 'vpshufd',70h
00016F67: F2 C7                                                  dw avx_single_source_d_instruction_imm8-instruction_handler
00016F69: 76 70 73 69 67 6E 62 08                                db 'vpsignb',8
00016F71: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
00016F73: 76 70 73 69 67 6E 64 0A                                db 'vpsignd',0Ah
00016F7B: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
00016F7D: 76 70 73 69 67 6E 77 09                                db 'vpsignw',9
00016F85: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
00016F87: 76 70 73 6C 6C 64 71 07                                db 'vpslldq',111b
00016F8F: 8D DC                                                  dw avx_shift_dq_instruction-instruction_handler
00016F91: 76 70 73 6C 6C 76 64 47                                db 'vpsllvd',47h
00016F99: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00016F9B: 76 70 73 6C 6C 76 71 47                                db 'vpsllvq',47h
00016FA3: 76 C7                                                  dw avx_q_instruction_38_w1-instruction_handler
00016FA5: 76 70 73 6C 6C 76 77 12                                db 'vpsllvw',12h
00016FAD: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
00016FAF: 76 70 73 72 61 76 64 46                                db 'vpsravd',46h
00016FB7: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00016FB9: 76 70 73 72 61 76 71 46                                db 'vpsravq',46h
00016FC1: 6F C7                                                  dw avx_q_instruction_38_w1_evex-instruction_handler
00016FC3: 76 70 73 72 61 76 77 11                                db 'vpsravw',11h
00016FCB: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
00016FCD: 76 70 73 72 6C 64 71 03                                db 'vpsrldq',011b
00016FD5: 8D DC                                                  dw avx_shift_dq_instruction-instruction_handler
00016FD7: 76 70 73 72 6C 76 64 45                                db 'vpsrlvd',45h
00016FDF: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
00016FE1: 76 70 73 72 6C 76 71 45                                db 'vpsrlvq',45h
00016FE9: 76 C7                                                  dw avx_q_instruction_38_w1-instruction_handler
00016FEB: 76 70 73 72 6C 76 77 10                                db 'vpsrlvw',10h
00016FF3: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
00016FF5: 76 70 73 75 62 73 62 E8                                db 'vpsubsb',0E8h
00016FFD: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00016FFF: 76 70 73 75 62 73 77 E9                                db 'vpsubsw',0E9h
00017007: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00017009: 76 73 68 75 66 70 64 C6                                db 'vshufpd',0C6h
00017011: 6B C6                                                  dw avx_pd_instruction_imm8-instruction_handler
00017013: 76 73 68 75 66 70 73 C6                                db 'vshufps',0C6h
0001701B: D9 C6                                                  dw avx_ps_instruction_imm8-instruction_handler
0001701D: 76 73 71 72 74 70 64 51                                db 'vsqrtpd',51h
00017025: 52 C6                                                  dw avx_single_source_pd_instruction_er-instruction_handler
00017027: 76 73 71 72 74 70 73 51                                db 'vsqrtps',51h
0001702F: C0 C6                                                  dw avx_single_source_ps_instruction_er-instruction_handler
00017031: 76 73 71 72 74 73 64 51                                db 'vsqrtsd',51h
00017039: 10 C7                                                  dw avx_sd_instruction_er-instruction_handler
0001703B: 76 73 71 72 74 73 73 51                                db 'vsqrtss',51h
00017043: 33 C7                                                  dw avx_ss_instruction_er-instruction_handler
00017045: 76 74 65 73 74 70 64 0F                                db 'vtestpd',0Fh
0001704D: 0D D3                                                  dw avx_single_source_instruction_38_noevex-instruction_handler
0001704F: 76 74 65 73 74 70 73 0E                                db 'vtestps',0Eh
00017057: 0D D3                                                  dw avx_single_source_instruction_38_noevex-instruction_handler
00017059: 78 72 73 74 6F 72 73 03                                db 'xrstors',3
00017061: 06 AE                                                  dw xsaves_instruction-instruction_handler
00017063: 78 73 61 76 65 36 34 04                                db 'xsave64',100b
0001706B: 0A AE                                                  dw fxsave_instruction_64bit-instruction_handler
                                                                instructions_8:
0001706D: 61 64 64 73 75 62 70 64 D0                             db 'addsubpd',0D0h
00017076: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00017078: 61 64 64 73 75 62 70 73 D0                             db 'addsubps',0D0h
00017081: 1C A3                                                  dw cvtpd2dq_instruction-instruction_handler
00017083: 62 6C 65 6E 64 76 70 64 15                             db 'blendvpd',15h
0001708C: AE A9                                                  dw sse4_instruction_66_38_xmm0-instruction_handler
0001708E: 62 6C 65 6E 64 76 70 73 14                             db 'blendvps',14h
00017097: AE A9                                                  dw sse4_instruction_66_38_xmm0-instruction_handler
00017099: 63 6C 64 65 6D 6F 74 65 00                             db 'cldemote',0
000170A2: 5F AE                                                  dw cldemote_instruction-instruction_handler
000170A4: 63 6C 72 73 73 62 73 79 06                             db 'clrssbsy',6
000170AD: C5 BB                                                  dw clrssbsy_instruction-instruction_handler
000170AF: 63 6D 70 6E 65 71 70 64 04                             db 'cmpneqpd',4
000170B8: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
000170BA: 63 6D 70 6E 65 71 70 73 04                             db 'cmpneqps',4
000170C3: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
000170C5: 63 6D 70 6E 65 71 73 64 04                             db 'cmpneqsd',4
000170CE: DC A2                                                  dw cmp_sd_instruction-instruction_handler
000170D0: 63 6D 70 6E 65 71 73 73 04                             db 'cmpneqss',4
000170D9: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
000170DB: 63 6D 70 6E 6C 65 70 64 06                             db 'cmpnlepd',6
000170E4: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
000170E6: 63 6D 70 6E 6C 65 70 73 06                             db 'cmpnleps',6
000170EF: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
000170F1: 63 6D 70 6E 6C 65 73 64 06                             db 'cmpnlesd',6
000170FA: DC A2                                                  dw cmp_sd_instruction-instruction_handler
000170FC: 63 6D 70 6E 6C 65 73 73 06                             db 'cmpnless',6
00017105: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
00017107: 63 6D 70 6E 6C 74 70 64 05                             db 'cmpnltpd',5
00017110: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
00017112: 63 6D 70 6E 6C 74 70 73 05                             db 'cmpnltps',5
0001711B: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
0001711D: 63 6D 70 6E 6C 74 73 64 05                             db 'cmpnltsd',5
00017126: DC A2                                                  dw cmp_sd_instruction-instruction_handler
00017128: 63 6D 70 6E 6C 74 73 73 05                             db 'cmpnltss',5
00017131: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
00017133: 63 6D 70 6F 72 64 70 64 07                             db 'cmpordpd',7
0001713C: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
0001713E: 63 6D 70 6F 72 64 70 73 07                             db 'cmpordps',7
00017147: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
00017149: 63 6D 70 6F 72 64 73 64 07                             db 'cmpordsd',7
00017152: DC A2                                                  dw cmp_sd_instruction-instruction_handler
00017154: 63 6D 70 6F 72 64 73 73 07                             db 'cmpordss',7
0001715D: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
0001715F: 63 76 74 64 71 32 70 64 E6                             db 'cvtdq2pd',0E6h
00017168: 0C A3                                                  dw cvtdq2pd_instruction-instruction_handler
0001716A: 63 76 74 64 71 32 70 73 5B                             db 'cvtdq2ps',5Bh
00017173: 4F A2                                                  dw sse_ps_instruction-instruction_handler
00017175: 63 76 74 70 64 32 64 71 E6                             db 'cvtpd2dq',0E6h
0001717E: 1C A3                                                  dw cvtpd2dq_instruction-instruction_handler
00017180: 63 76 74 70 64 32 70 69 2D                             db 'cvtpd2pi',2Dh
00017189: 13 A8                                                  dw cvtpd2pi_instruction-instruction_handler
0001718B: 63 76 74 70 64 32 70 73 5A                             db 'cvtpd2ps',5Ah
00017194: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00017196: 63 76 74 70 69 32 70 64 2A                             db 'cvtpi2pd',2Ah
0001719F: E1 A6                                                  dw cvtpi2pd_instruction-instruction_handler
000171A1: 63 76 74 70 69 32 70 73 2A                             db 'cvtpi2ps',2Ah
000171AA: E8 A6                                                  dw cvtpi2ps_instruction-instruction_handler
000171AC: 63 76 74 70 73 32 64 71 5B                             db 'cvtps2dq',5Bh
000171B5: 62 A2                                                  dw sse_pd_instruction-instruction_handler
000171B7: 63 76 74 70 73 32 70 64 5A                             db 'cvtps2pd',5Ah
000171C0: 13 A3                                                  dw cvtps2pd_instruction-instruction_handler
000171C2: 63 76 74 70 73 32 70 69 2D                             db 'cvtps2pi',2Dh
000171CB: 0A A8                                                  dw cvtps2pi_instruction-instruction_handler
000171CD: 63 76 74 73 64 32 73 69 2D                             db 'cvtsd2si',2Dh
000171D6: 66 A8                                                  dw cvtsd2si_instruction-instruction_handler
000171D8: 63 76 74 73 64 32 73 73 5A                             db 'cvtsd2ss',5Ah
000171E1: 88 A2                                                  dw sse_sd_instruction-instruction_handler
000171E3: 63 76 74 73 69 32 73 64 2A                             db 'cvtsi2sd',2Ah
000171EC: 6E A7                                                  dw cvtsi2sd_instruction-instruction_handler
000171EE: 63 76 74 73 69 32 73 73 2A                             db 'cvtsi2ss',2Ah
000171F7: 65 A7                                                  dw cvtsi2ss_instruction-instruction_handler
000171F9: 63 76 74 73 73 32 73 64 5A                             db 'cvtss2sd',5Ah
00017202: 75 A2                                                  dw sse_ss_instruction-instruction_handler
00017204: 63 76 74 73 73 32 73 69 2D                             db 'cvtss2si',2Dh
0001720D: 56 A8                                                  dw cvtss2si_instruction-instruction_handler
0001720F: 66 63 6D 6F 76 6E 62 65 D0                             db 'fcmovnbe',0D0h
00017218: 6D 9B                                                  dw fcomi_instruction-instruction_handler
0001721A: 66 6E 73 74 65 6E 76 64 06                             db 'fnstenvd',6
00017223: 74 9A                                                  dw fldenv_instruction_32bit-instruction_handler
00017225: 66 6E 73 74 65 6E 76 77 06                             db 'fnstenvw',6
0001722E: 69 9A                                                  dw fldenv_instruction_16bit-instruction_handler
00017230: 66 78 73 61 76 65 36 34 00                             db 'fxsave64',0
00017239: 0A AE                                                  dw fxsave_instruction_64bit-instruction_handler
0001723B: 69 6E 73 65 72 74 70 73 21                             db 'insertps',21h
00017244: F3 AA                                                  dw insertps_instruction-instruction_handler
00017246: 6B 6F 72 74 65 73 74 62 98                             db 'kortestb',98h
0001724F: 09 D7                                                  dw mask_instruction_single_source_b-instruction_handler
00017251: 6B 6F 72 74 65 73 74 64 98                             db 'kortestd',98h
0001725A: 12 D7                                                  dw mask_instruction_single_source_d-instruction_handler
0001725C: 6B 6F 72 74 65 73 74 71 98                             db 'kortestq',98h
00017265: 19 D7                                                  dw mask_instruction_single_source_q-instruction_handler
00017267: 6B 6F 72 74 65 73 74 77 98                             db 'kortestw',98h
00017270: 20 D7                                                  dw mask_instruction_single_source_w-instruction_handler
00017272: 6B 73 68 69 66 74 6C 62 32                             db 'kshiftlb',32h
0001727B: EB D6                                                  dw mask_shift_instruction_d-instruction_handler
0001727D: 6B 73 68 69 66 74 6C 64 33                             db 'kshiftld',33h
00017286: EB D6                                                  dw mask_shift_instruction_d-instruction_handler
00017288: 6B 73 68 69 66 74 6C 71 33                             db 'kshiftlq',33h
00017291: E4 D6                                                  dw mask_shift_instruction_q-instruction_handler
00017293: 6B 73 68 69 66 74 6C 77 32                             db 'kshiftlw',32h
0001729C: E4 D6                                                  dw mask_shift_instruction_q-instruction_handler
0001729E: 6B 73 68 69 66 74 72 62 30                             db 'kshiftrb',30h
000172A7: EB D6                                                  dw mask_shift_instruction_d-instruction_handler
000172A9: 6B 73 68 69 66 74 72 64 31                             db 'kshiftrd',31h
000172B2: EB D6                                                  dw mask_shift_instruction_d-instruction_handler
000172B4: 6B 73 68 69 66 74 72 71 31                             db 'kshiftrq',31h
000172BD: E4 D6                                                  dw mask_shift_instruction_q-instruction_handler
000172BF: 6B 73 68 69 66 74 72 77 30                             db 'kshiftrw',30h
000172C8: E4 D6                                                  dw mask_shift_instruction_q-instruction_handler
000172CA: 6B 75 6E 70 63 6B 62 77 4B                             db 'kunpckbw',4Bh
000172D3: 29 D7                                                  dw mask_instruction_b-instruction_handler
000172D5: 6B 75 6E 70 63 6B 64 71 4B                             db 'kunpckdq',4Bh
000172DE: 39 D7                                                  dw mask_instruction_q-instruction_handler
000172E0: 6B 75 6E 70 63 6B 77 64 4B                             db 'kunpckwd',4Bh
000172E9: 40 D7                                                  dw mask_instruction_w-instruction_handler
000172EB: 6D 61 73 6B 6D 6F 76 71 00                             db 'maskmovq',0
000172F4: 24 A6                                                  dw maskmovq_instruction-instruction_handler
000172F6: 6D 6F 6E 69 74 6F 72 78 FA                             db 'monitorx',0FAh
000172FF: 15 B0                                                  dw monitor_instruction-instruction_handler
00017301: 6D 6F 76 6D 73 6B 70 64 00                             db 'movmskpd',0
0001730A: 84 A6                                                  dw movmskpd_instruction-instruction_handler
0001730C: 6D 6F 76 6D 73 6B 70 73 00                             db 'movmskps',0
00017315: 8B A6                                                  dw movmskps_instruction-instruction_handler
00017317: 6D 6F 76 6E 74 64 71 61 2A                             db 'movntdqa',2Ah
00017320: 84 B0                                                  dw movntdqa_instruction-instruction_handler
00017322: 6D 6F 76 73 68 64 75 70 16                             db 'movshdup',16h
0001732B: 2C A3                                                  dw movshdup_instruction-instruction_handler
0001732D: 6D 6F 76 73 6C 64 75 70 12                             db 'movsldup',12h
00017336: 2C A3                                                  dw movshdup_instruction-instruction_handler
00017338: 70 61 63 6B 73 73 64 77 6B                             db 'packssdw',6Bh
00017341: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00017343: 70 61 63 6B 73 73 77 62 63                             db 'packsswb',63h
0001734C: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
0001734E: 70 61 63 6B 75 73 64 77 2B                             db 'packusdw',2Bh
00017357: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
00017359: 70 61 63 6B 75 73 77 62 67                             db 'packuswb',67h
00017362: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00017364: 70 62 6C 65 6E 64 76 62 10                             db 'pblendvb',10h
0001736D: AE A9                                                  dw sse4_instruction_66_38_xmm0-instruction_handler
0001736F: 70 66 72 63 70 69 74 31 A6                             db 'pfrcpit1',0A6h
00017378: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
0001737A: 70 66 72 63 70 69 74 32 B6                             db 'pfrcpit2',0B6h
00017383: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00017385: 70 66 72 73 71 69 74 31 A7                             db 'pfrsqit1',0A7h
0001738E: 25 A9                                                  dw amd3dnow_instruction-instruction_handler
00017390: 70 6D 6F 76 6D 73 6B 62 D7                             db 'pmovmskb',0D7h
00017399: B8 9C                                                  dw pmovmskb_instruction-instruction_handler
0001739B: 70 6D 6F 76 73 78 62 64 21                             db 'pmovsxbd',21h
000173A4: 46 AD                                                  dw pmovsxbd_instruction-instruction_handler
000173A6: 70 6D 6F 76 73 78 62 71 22                             db 'pmovsxbq',22h
000173AF: 4F AD                                                  dw pmovsxbq_instruction-instruction_handler
000173B1: 70 6D 6F 76 73 78 62 77 20                             db 'pmovsxbw',20h
000173BA: 3D AD                                                  dw pmovsxbw_instruction-instruction_handler
000173BC: 70 6D 6F 76 73 78 64 71 25                             db 'pmovsxdq',25h
000173C5: 6A AD                                                  dw pmovsxdq_instruction-instruction_handler
000173C7: 70 6D 6F 76 73 78 77 64 23                             db 'pmovsxwd',23h
000173D0: 58 AD                                                  dw pmovsxwd_instruction-instruction_handler
000173D2: 70 6D 6F 76 73 78 77 71 24                             db 'pmovsxwq',24h
000173DB: 61 AD                                                  dw pmovsxwq_instruction-instruction_handler
000173DD: 70 6D 6F 76 7A 78 62 64 31                             db 'pmovzxbd',31h
000173E6: 46 AD                                                  dw pmovsxbd_instruction-instruction_handler
000173E8: 70 6D 6F 76 7A 78 62 71 32                             db 'pmovzxbq',32h
000173F1: 4F AD                                                  dw pmovsxbq_instruction-instruction_handler
000173F3: 70 6D 6F 76 7A 78 62 77 30                             db 'pmovzxbw',30h
000173FC: 3D AD                                                  dw pmovsxbw_instruction-instruction_handler
000173FE: 70 6D 6F 76 7A 78 64 71 35                             db 'pmovzxdq',35h
00017407: 6A AD                                                  dw pmovsxdq_instruction-instruction_handler
00017409: 70 6D 6F 76 7A 78 77 64 33                             db 'pmovzxwd',33h
00017412: 58 AD                                                  dw pmovsxwd_instruction-instruction_handler
00017414: 70 6D 6F 76 7A 78 77 71 34                             db 'pmovzxwq',34h
0001741D: 61 AD                                                  dw pmovsxwq_instruction-instruction_handler
0001741F: 70 6D 75 6C 68 72 73 77 0B                             db 'pmulhrsw',0Bh
00017428: A8 A8                                                  dw ssse3_instruction-instruction_handler
0001742A: 70 72 65 66 65 74 63 68 00                             db 'prefetch',0
00017433: A3 AE                                                  dw amd_prefetch_instruction-instruction_handler
00017435: 72 64 66 73 62 61 73 65 00                             db 'rdfsbase',0
0001743E: C2 B6                                                  dw rdfsbase_instruction-instruction_handler
00017440: 72 64 67 73 62 61 73 65 01                             db 'rdgsbase',1
00017449: C2 B6                                                  dw rdfsbase_instruction-instruction_handler
0001744B: 72 73 74 6F 72 73 73 70 05                             db 'rstorssp',5
00017454: C1 BB                                                  dw rstorssp_instruction-instruction_handler
00017456: 73 65 74 73 73 62 73 79 E8                             db 'setssbsy',0E8h
0001745F: B3 BB                                                  dw setssbsy_instruction-instruction_handler
00017461: 73 68 61 31 6D 73 67 31 C9                             db 'sha1msg1',0C9h
0001746A: BC A9                                                  dw sse4_instruction_38-instruction_handler
0001746C: 73 68 61 31 6D 73 67 32 CA                             db 'sha1msg2',0CAh
00017475: BC A9                                                  dw sse4_instruction_38-instruction_handler
00017477: 73 79 73 65 6E 74 65 72 34                             db 'sysenter',34h
00017480: 95 64                                                  dw simple_extended_instruction-instruction_handler
00017482: 73 79 73 65 78 69 74 71 35                             db 'sysexitq',35h
0001748B: 84 64                                                  dw simple_extended_instruction_64bit-instruction_handler
0001748D: 75 6D 6F 6E 69 74 6F 72 00                             db 'umonitor',0
00017496: 13 BB                                                  dw umonitor_instruction-instruction_handler
00017498: 75 6E 70 63 6B 68 70 64 15                             db 'unpckhpd',15h
000174A1: 62 A2                                                  dw sse_pd_instruction-instruction_handler
000174A3: 75 6E 70 63 6B 68 70 73 15                             db 'unpckhps',15h
000174AC: 4F A2                                                  dw sse_ps_instruction-instruction_handler
000174AE: 75 6E 70 63 6B 6C 70 64 14                             db 'unpcklpd',14h
000174B7: 62 A2                                                  dw sse_pd_instruction-instruction_handler
000174B9: 75 6E 70 63 6B 6C 70 73 14                             db 'unpcklps',14h
000174C2: 4F A2                                                  dw sse_ps_instruction-instruction_handler
000174C4: 76 62 6C 65 6E 64 70 64 0D                             db 'vblendpd',0Dh
000174CD: 5E D3                                                  dw avx_pi_instruction_3a_imm8_noevex-instruction_handler
000174CF: 76 62 6C 65 6E 64 70 73 0C                             db 'vblendps',0Ch
000174D8: 5E D3                                                  dw avx_pi_instruction_3a_imm8_noevex-instruction_handler
000174DA: 76 63 6D 70 65 71 70 64 00                             db 'vcmpeqpd',0
000174E3: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
000174E5: 76 63 6D 70 65 71 70 73 00                             db 'vcmpeqps',0
000174EE: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
000174F0: 76 63 6D 70 65 71 73 64 00                             db 'vcmpeqsd',0
000174F9: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
000174FB: 76 63 6D 70 65 71 73 73 00                             db 'vcmpeqss',0
00017504: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017506: 76 63 6D 70 67 65 70 64 0D                             db 'vcmpgepd',0Dh
0001750F: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017511: 76 63 6D 70 67 65 70 73 0D                             db 'vcmpgeps',0Dh
0001751A: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
0001751C: 76 63 6D 70 67 65 73 64 0D                             db 'vcmpgesd',0Dh
00017525: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00017527: 76 63 6D 70 67 65 73 73 0D                             db 'vcmpgess',0Dh
00017530: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017532: 76 63 6D 70 67 74 70 64 0E                             db 'vcmpgtpd',0Eh
0001753B: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
0001753D: 76 63 6D 70 67 74 70 73 0E                             db 'vcmpgtps',0Eh
00017546: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00017548: 76 63 6D 70 67 74 73 64 0E                             db 'vcmpgtsd',0Eh
00017551: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00017553: 76 63 6D 70 67 74 73 73 0E                             db 'vcmpgtss',0Eh
0001755C: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
0001755E: 76 63 6D 70 6C 65 70 64 02                             db 'vcmplepd',2
00017567: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017569: 76 63 6D 70 6C 65 70 73 02                             db 'vcmpleps',2
00017572: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00017574: 76 63 6D 70 6C 65 73 64 02                             db 'vcmplesd',2
0001757D: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
0001757F: 76 63 6D 70 6C 65 73 73 02                             db 'vcmpless',2
00017588: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
0001758A: 76 63 6D 70 6C 74 70 64 01                             db 'vcmpltpd',1
00017593: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017595: 76 63 6D 70 6C 74 70 73 01                             db 'vcmpltps',1
0001759E: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
000175A0: 76 63 6D 70 6C 74 73 64 01                             db 'vcmpltsd',1
000175A9: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
000175AB: 76 63 6D 70 6C 74 73 73 01                             db 'vcmpltss',1
000175B4: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
000175B6: 76 66 6D 61 64 64 70 64 69                             db 'vfmaddpd',69h
000175BF: F4 D4                                                  dw fma4_instruction_p-instruction_handler
000175C1: 76 66 6D 61 64 64 70 73 68                             db 'vfmaddps',68h
000175CA: F4 D4                                                  dw fma4_instruction_p-instruction_handler
000175CC: 76 66 6D 61 64 64 73 64 6B                             db 'vfmaddsd',6Bh
000175D5: F8 D4                                                  dw fma4_instruction_sd-instruction_handler
000175D7: 76 66 6D 61 64 64 73 73 6A                             db 'vfmaddss',6Ah
000175E0: FC D4                                                  dw fma4_instruction_ss-instruction_handler
000175E2: 76 66 6D 73 75 62 70 64 6D                             db 'vfmsubpd',6Dh
000175EB: F4 D4                                                  dw fma4_instruction_p-instruction_handler
000175ED: 76 66 6D 73 75 62 70 73 6C                             db 'vfmsubps',6Ch
000175F6: F4 D4                                                  dw fma4_instruction_p-instruction_handler
000175F8: 76 66 6D 73 75 62 73 64 6F                             db 'vfmsubsd',6Fh
00017601: F8 D4                                                  dw fma4_instruction_sd-instruction_handler
00017603: 76 66 6D 73 75 62 73 73 6E                             db 'vfmsubss',6Eh
0001760C: FC D4                                                  dw fma4_instruction_ss-instruction_handler
0001760E: 76 6C 64 6D 78 63 73 72 02                             db 'vldmxcsr',10b
00017617: B9 D9                                                  dw vstmxcsr_instruction-instruction_handler
00017619: 76 6D 6C 61 75 6E 63 68 C2                             db 'vmlaunch',0C2h
00017622: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
00017624: 76 6D 6F 76 64 64 75 70 12                             db 'vmovddup',12h
0001762D: 11 D0                                                  dw avx_movddup_instruction-instruction_handler
0001762F: 76 6D 6F 76 64 71 75 38 6F                             db 'vmovdqu8',6Fh
00017638: A3 CC                                                  dw avx512_movdqu8_instruction-instruction_handler
0001763A: 76 6D 6F 76 68 6C 70 73 12                             db 'vmovhlps',12h
00017643: 41 D1                                                  dw avx_movhlps_instruction-instruction_handler
00017645: 76 6D 6F 76 6C 68 70 73 16                             db 'vmovlhps',16h
0001764E: 41 D1                                                  dw avx_movhlps_instruction-instruction_handler
00017650: 76 6D 6F 76 6E 74 64 71 E7                             db 'vmovntdq',0E7h
00017659: 5A CD                                                  dw avx_movntdq_instruction-instruction_handler
0001765B: 76 6D 6F 76 6E 74 70 64 2B                             db 'vmovntpd',2Bh
00017664: 53 CD                                                  dw avx_movntpd_instruction-instruction_handler
00017666: 76 6D 6F 76 6E 74 70 73 2B                             db 'vmovntps',2Bh
0001766F: 61 CD                                                  dw avx_movntps_instruction-instruction_handler
00017671: 76 6D 70 73 61 64 62 77 42                             db 'vmpsadbw',42h
0001767A: 5E D3                                                  dw avx_pi_instruction_3a_imm8_noevex-instruction_handler
0001767C: 76 6D 72 65 73 75 6D 65 C3                             db 'vmresume',0C3h
00017685: 5D 95                                                  dw simple_instruction_0f_01-instruction_handler
00017687: 76 70 61 64 64 75 73 62 DC                             db 'vpaddusb',0DCh
00017690: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00017692: 76 70 61 64 64 75 73 77 DD                             db 'vpaddusw',0DDh
0001769B: 39 C8                                                  dw avx_bw_instruction-instruction_handler
0001769D: 76 70 61 6C 69 67 6E 72 0F                             db 'vpalignr',0Fh
000176A6: 81 D3                                                  dw avx_pi_instruction_3a_imm8-instruction_handler
000176A8: 76 70 62 6C 65 6E 64 64 02                             db 'vpblendd',2
000176B1: 5E D3                                                  dw avx_pi_instruction_3a_imm8_noevex-instruction_handler
000176B3: 76 70 62 6C 65 6E 64 77 0E                             db 'vpblendw',0Eh
000176BC: 5E D3                                                  dw avx_pi_instruction_3a_imm8_noevex-instruction_handler
000176BE: 76 70 63 6D 70 65 71 62 74                             db 'vpcmpeqb',74h
000176C7: 7A D5                                                  dw avx_cmpeqb_instruction-instruction_handler
000176C9: 76 70 63 6D 70 65 71 64 76                             db 'vpcmpeqd',76h
000176D2: 76 D5                                                  dw avx_cmpeqd_instruction-instruction_handler
000176D4: 76 70 63 6D 70 65 71 71 29                             db 'vpcmpeqq',29h
000176DD: 64 D5                                                  dw avx_cmpeqq_instruction-instruction_handler
000176DF: 76 70 63 6D 70 65 71 77 75                             db 'vpcmpeqw',75h
000176E8: 7A D5                                                  dw avx_cmpeqb_instruction-instruction_handler
000176EA: 76 70 63 6D 70 67 74 62 64                             db 'vpcmpgtb',64h
000176F3: 7A D5                                                  dw avx_cmpeqb_instruction-instruction_handler
000176F5: 76 70 63 6D 70 67 74 64 66                             db 'vpcmpgtd',66h
000176FE: 76 D5                                                  dw avx_cmpeqd_instruction-instruction_handler
00017700: 76 70 63 6D 70 67 74 71 37                             db 'vpcmpgtq',37h
00017709: 64 D5                                                  dw avx_cmpeqq_instruction-instruction_handler
0001770B: 76 70 63 6D 70 67 74 77 65                             db 'vpcmpgtw',65h
00017714: 7A D5                                                  dw avx_cmpeqb_instruction-instruction_handler
00017716: 76 70 63 6D 70 6C 65 62 02                             db 'vpcmpleb',2
0001771F: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
00017721: 76 70 63 6D 70 6C 65 64 02                             db 'vpcmpled',2
0001772A: 9E D5                                                  dw avx512_cmp_d_instruction-instruction_handler
0001772C: 76 70 63 6D 70 6C 65 71 02                             db 'vpcmpleq',2
00017735: 91 D5                                                  dw avx512_cmp_q_instruction-instruction_handler
00017737: 76 70 63 6D 70 6C 65 77 02                             db 'vpcmplew',2
00017740: B1 D5                                                  dw avx512_cmp_w_instruction-instruction_handler
00017742: 76 70 63 6D 70 6C 74 62 01                             db 'vpcmpltb',1
0001774B: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
0001774D: 76 70 63 6D 70 6C 74 64 01                             db 'vpcmpltd',1
00017756: 9E D5                                                  dw avx512_cmp_d_instruction-instruction_handler
00017758: 76 70 63 6D 70 6C 74 71 01                             db 'vpcmpltq',1
00017761: 91 D5                                                  dw avx512_cmp_q_instruction-instruction_handler
00017763: 76 70 63 6D 70 6C 74 77 01                             db 'vpcmpltw',1
0001776C: B1 D5                                                  dw avx512_cmp_w_instruction-instruction_handler
0001776E: 76 70 63 6F 6D 65 71 62 04                             db 'vpcomeqb',4
00017777: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
00017779: 76 70 63 6F 6D 65 71 64 04                             db 'vpcomeqd',4
00017782: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
00017784: 76 70 63 6F 6D 65 71 71 04                             db 'vpcomeqq',4
0001778D: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
0001778F: 76 70 63 6F 6D 65 71 77 04                             db 'vpcomeqw',4
00017798: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
0001779A: 76 70 63 6F 6D 67 65 62 03                             db 'vpcomgeb',3
000177A3: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
000177A5: 76 70 63 6F 6D 67 65 64 03                             db 'vpcomged',3
000177AE: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
000177B0: 76 70 63 6F 6D 67 65 71 03                             db 'vpcomgeq',3
000177B9: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
000177BB: 76 70 63 6F 6D 67 65 77 03                             db 'vpcomgew',3
000177C4: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
000177C6: 76 70 63 6F 6D 67 74 62 02                             db 'vpcomgtb',2
000177CF: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
000177D1: 76 70 63 6F 6D 67 74 64 02                             db 'vpcomgtd',2
000177DA: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
000177DC: 76 70 63 6F 6D 67 74 71 02                             db 'vpcomgtq',2
000177E5: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
000177E7: 76 70 63 6F 6D 67 74 77 02                             db 'vpcomgtw',2
000177F0: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
000177F2: 76 70 63 6F 6D 6C 65 62 01                             db 'vpcomleb',1
000177FB: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
000177FD: 76 70 63 6F 6D 6C 65 64 01                             db 'vpcomled',1
00017806: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
00017808: 76 70 63 6F 6D 6C 65 71 01                             db 'vpcomleq',1
00017811: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
00017813: 76 70 63 6F 6D 6C 65 77 01                             db 'vpcomlew',1
0001781C: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
0001781E: 76 70 63 6F 6D 6C 74 62 00                             db 'vpcomltb',0
00017827: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
00017829: 76 70 63 6F 6D 6C 74 64 00                             db 'vpcomltd',0
00017832: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
00017834: 76 70 63 6F 6D 6C 74 71 00                             db 'vpcomltq',0
0001783D: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
0001783F: 76 70 63 6F 6D 6C 74 77 00                             db 'vpcomltw',0
00017848: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
0001784A: 76 70 64 70 62 75 73 64 50                             db 'vpdpbusd',50h
00017853: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
00017855: 76 70 64 70 77 73 73 64 52                             db 'vpdpwssd',52h
0001785E: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
00017860: 76 70 65 72 6D 69 32 62 75                             db 'vpermi2b',75h
00017869: 4D C8                                                  dw avx_bw_instruction_38_evex-instruction_handler
0001786B: 76 70 65 72 6D 69 32 64 76                             db 'vpermi2d',76h
00017874: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
00017876: 76 70 65 72 6D 69 32 71 76                             db 'vpermi2q',76h
0001787F: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00017881: 76 70 65 72 6D 69 32 77 75                             db 'vpermi2w',75h
0001788A: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
0001788C: 76 70 65 72 6D 74 32 62 7D                             db 'vpermt2b',7Dh
00017895: 4D C8                                                  dw avx_bw_instruction_38_evex-instruction_handler
00017897: 76 70 65 72 6D 74 32 64 7E                             db 'vpermt2d',7Eh
000178A0: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
000178A2: 76 70 65 72 6D 74 32 71 7E                             db 'vpermt2q',7Eh
000178AB: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
000178AD: 76 70 65 72 6D 74 32 77 7D                             db 'vpermt2w',7Dh
000178B6: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
000178B8: 76 70 68 61 64 64 62 64 C2                             db 'vphaddbd',0C2h
000178C1: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
000178C3: 76 70 68 61 64 64 62 71 C3                             db 'vphaddbq',0C3h
000178CC: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
000178CE: 76 70 68 61 64 64 62 77 C1                             db 'vphaddbw',0C1h
000178D7: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
000178D9: 76 70 68 61 64 64 64 71 CB                             db 'vphadddq',0CBh
000178E2: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
000178E4: 76 70 68 61 64 64 73 77 03                             db 'vphaddsw',3
000178ED: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
000178EF: 76 70 68 61 64 64 77 64 C6                             db 'vphaddwd',0C6h
000178F8: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
000178FA: 76 70 68 61 64 64 77 71 C7                             db 'vphaddwq',0C7h
00017903: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
00017905: 76 70 68 73 75 62 62 77 E1                             db 'vphsubbw',0E1h
0001790E: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
00017910: 76 70 68 73 75 62 64 71 E3                             db 'vphsubdq',0E3h
00017919: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
0001791B: 76 70 68 73 75 62 73 77 07                             db 'vphsubsw',7
00017924: 16 D3                                                  dw avx_pi_instruction_38_noevex-instruction_handler
00017926: 76 70 68 73 75 62 77 64 E2                             db 'vphsubwd',0E2h
0001792F: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
00017931: 76 70 6C 7A 63 6E 74 64 44                             db 'vplzcntd',44h
0001793A: BB C7                                                  dw avx_single_source_d_instruction_38_evex-instruction_handler
0001793C: 76 70 6C 7A 63 6E 74 71 44                             db 'vplzcntq',44h
00017945: 58 C7                                                  dw avx_single_source_q_instruction_38_evex-instruction_handler
00017947: 76 70 6D 61 63 73 64 64 9E                             db 'vpmacsdd',9Eh
00017950: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
00017952: 76 70 6D 61 63 73 77 64 96                             db 'vpmacswd',96h
0001795B: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
0001795D: 76 70 6D 61 63 73 77 77 95                             db 'vpmacsww',95h
00017966: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
00017968: 76 70 6D 61 64 64 77 64 F5                             db 'vpmaddwd',0F5h
00017971: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00017973: 76 70 6D 6F 76 62 32 6D 29                             db 'vpmovb2m',29h
0001797C: 4F D9                                                  dw avx512_pmov_2m_instruction-instruction_handler
0001797E: 76 70 6D 6F 76 64 32 6D 39                             db 'vpmovd2m',39h
00017987: 4F D9                                                  dw avx512_pmov_2m_instruction-instruction_handler
00017989: 76 70 6D 6F 76 6D 32 62 28                             db 'vpmovm2b',28h
00017992: 1D D9                                                  dw avx512_pmov_m2_instruction-instruction_handler
00017994: 76 70 6D 6F 76 6D 32 64 38                             db 'vpmovm2d',38h
0001799D: 1D D9                                                  dw avx512_pmov_m2_instruction-instruction_handler
0001799F: 76 70 6D 6F 76 6D 32 71 38                             db 'vpmovm2q',38h
000179A8: 16 D9                                                  dw avx512_pmov_m2_instruction_w1-instruction_handler
000179AA: 76 70 6D 6F 76 6D 32 77 28                             db 'vpmovm2w',28h
000179B3: 16 D9                                                  dw avx512_pmov_m2_instruction_w1-instruction_handler
000179B5: 76 70 6D 6F 76 71 32 6D 39                             db 'vpmovq2m',39h
000179BE: 48 D9                                                  dw avx512_pmov_2m_instruction_w1-instruction_handler
000179C0: 76 70 6D 6F 76 73 64 62 21                             db 'vpmovsdb',21h
000179C9: FB DD                                                  dw avx512_pmovdb_instruction-instruction_handler
000179CB: 76 70 6D 6F 76 73 64 77 23                             db 'vpmovsdw',23h
000179D4: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
000179D6: 76 70 6D 6F 76 73 71 62 22                             db 'vpmovsqb',22h
000179DF: F7 DD                                                  dw avx512_pmovqb_instruction-instruction_handler
000179E1: 76 70 6D 6F 76 73 71 64 25                             db 'vpmovsqd',25h
000179EA: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
000179EC: 76 70 6D 6F 76 73 71 77 24                             db 'vpmovsqw',24h
000179F5: FB DD                                                  dw avx512_pmovdb_instruction-instruction_handler
000179F7: 76 70 6D 6F 76 73 77 62 20                             db 'vpmovswb',20h
00017A00: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
00017A02: 76 70 6D 6F 76 77 32 6D 29                             db 'vpmovw2m',29h
00017A0B: 48 D9                                                  dw avx512_pmov_2m_instruction_w1-instruction_handler
00017A0D: 76 70 6D 75 6C 68 75 77 E4                             db 'vpmulhuw',0E4h
00017A16: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00017A18: 76 70 6D 75 6C 75 64 71 F4                             db 'vpmuludq',0F4h
00017A21: A6 C7                                                  dw avx_q_instruction-instruction_handler
00017A23: 76 70 6F 70 63 6E 74 62 54                             db 'vpopcntb',54h
00017A2C: BB C7                                                  dw avx_single_source_d_instruction_38_evex-instruction_handler
00017A2E: 76 70 6F 70 63 6E 74 64 55                             db 'vpopcntd',55h
00017A37: 41 D4                                                  dw avx512_single_source_ps_instruction-instruction_handler
00017A39: 76 70 6F 70 63 6E 74 71 55                             db 'vpopcntq',55h
00017A42: 1D D4                                                  dw avx512_single_source_pd_instruction-instruction_handler
00017A44: 76 70 6F 70 63 6E 74 77 54                             db 'vpopcntw',54h
00017A4D: B4 C7                                                  dw avx_single_source_d_instruction_38_evex_w1-instruction_handler
00017A4F: 76 70 73 68 6C 64 76 64 71                             db 'vpshldvd',71h
00017A58: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
00017A5A: 76 70 73 68 6C 64 76 71 71                             db 'vpshldvq',71h
00017A63: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00017A65: 76 70 73 68 6C 64 76 77 70                             db 'vpshldvw',70h
00017A6E: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
00017A70: 76 70 73 68 72 64 76 64 73                             db 'vpshrdvd',73h
00017A79: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
00017A7B: 76 70 73 68 72 64 76 71 73                             db 'vpshrdvq',73h
00017A84: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00017A86: 76 70 73 68 72 64 76 77 48                             db 'vpshrdvw',72
00017A8F: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
00017A91: 76 70 73 68 75 66 68 77 F3                             db 'vpshufhw',0F3h
00017A9A: E6 D2                                                  dw avx_pshuf_w_instruction-instruction_handler
00017A9C: 76 70 73 68 75 66 6C 77 F2                             db 'vpshuflw',0F2h
00017AA5: E6 D2                                                  dw avx_pshuf_w_instruction-instruction_handler
00017AA7: 76 70 73 75 62 75 73 62 D8                             db 'vpsubusb',0D8h
00017AB0: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00017AB2: 76 70 73 75 62 75 73 77 D9                             db 'vpsubusw',0D9h
00017ABB: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00017ABD: 76 70 74 65 73 74 6D 62 26                             db 'vptestmb',26h
00017AC6: C5 D6                                                  dw avx512_ptestmb_instruction-instruction_handler
00017AC8: 76 70 74 65 73 74 6D 64 27                             db 'vptestmd',27h
00017AD1: AF D6                                                  dw avx512_ptestmd_instruction-instruction_handler
00017AD3: 76 70 74 65 73 74 6D 71 27                             db 'vptestmq',27h
00017ADC: B3 D6                                                  dw avx512_ptestmq_instruction-instruction_handler
00017ADE: 76 70 74 65 73 74 6D 77 26                             db 'vptestmw',26h
00017AE7: BE D6                                                  dw avx512_ptestmw_instruction-instruction_handler
00017AE9: 76 72 61 6E 67 65 70 64 50                             db 'vrangepd',50h
00017AF2: BA D3                                                  dw avx512_pd_instruction_sae_imm8-instruction_handler
00017AF4: 76 72 61 6E 67 65 70 73 50                             db 'vrangeps',50h
00017AFD: CE D3                                                  dw avx512_ps_instruction_sae_imm8-instruction_handler
00017AFF: 76 72 61 6E 67 65 73 64 51                             db 'vrangesd',51h
00017B08: D4 D3                                                  dw avx512_sd_instruction_sae_imm8-instruction_handler
00017B0A: 76 72 61 6E 67 65 73 73 51                             db 'vrangess',51h
00017B13: E1 D3                                                  dw avx512_ss_instruction_sae_imm8-instruction_handler
00017B15: 76 72 63 70 31 34 70 64 4C                             db 'vrcp14pd',4Ch
00017B1E: 1D D4                                                  dw avx512_single_source_pd_instruction-instruction_handler
00017B20: 76 72 63 70 31 34 70 73 4C                             db 'vrcp14ps',4Ch
00017B29: 41 D4                                                  dw avx512_single_source_ps_instruction-instruction_handler
00017B2B: 76 72 63 70 31 34 73 64 4D                             db 'vrcp14sd',4Dh
00017B34: 5C D4                                                  dw avx512_sd_instruction-instruction_handler
00017B36: 76 72 63 70 31 34 73 73 4D                             db 'vrcp14ss',4Dh
00017B3F: 77 D4                                                  dw avx512_ss_instruction-instruction_handler
00017B41: 76 72 63 70 32 38 70 64 CA                             db 'vrcp28pd',0CAh
00017B4A: 95 D4                                                  dw avx512_exp2pd_instruction-instruction_handler
00017B4C: 76 72 63 70 32 38 70 73 CA                             db 'vrcp28ps',0CAh
00017B55: A9 D4                                                  dw avx512_exp2ps_instruction-instruction_handler
00017B57: 76 72 63 70 32 38 73 64 CB                             db 'vrcp28sd',0CBh
00017B60: 55 D4                                                  dw avx512_sd_instruction_sae-instruction_handler
00017B62: 76 72 63 70 32 38 73 73 CB                             db 'vrcp28ss',0CBh
00017B6B: 70 D4                                                  dw avx512_ss_instruction_sae-instruction_handler
00017B6D: 76 72 6F 75 6E 64 70 64 09                             db 'vroundpd',9
00017B76: 57 D3                                                  dw avx_single_source_instruction_3a_imm8_noevex-instruction_handler
00017B78: 76 72 6F 75 6E 64 70 73 08                             db 'vroundps',8
00017B81: 57 D3                                                  dw avx_single_source_instruction_3a_imm8_noevex-instruction_handler
00017B83: 76 72 6F 75 6E 64 73 64 0B                             db 'vroundsd',0Bh
00017B8C: 36 D3                                                  dw avx_sd_instruction_3a_imm8_noevex-instruction_handler
00017B8E: 76 72 6F 75 6E 64 73 73 0A                             db 'vroundss',0Ah
00017B97: 32 D3                                                  dw avx_ss_instruction_3a_imm8_noevex-instruction_handler
00017B99: 76 72 73 71 72 74 70 73 52                             db 'vrsqrtps',52h
00017BA2: C9 C6                                                  dw avx_single_source_ps_instruction_noevex-instruction_handler
00017BA4: 76 72 73 71 72 74 73 73 52                             db 'vrsqrtss',52h
00017BAD: 4F C7                                                  dw avx_ss_instruction_noevex-instruction_handler
00017BAF: 76 73 74 6D 78 63 73 72 03                             db 'vstmxcsr',11b
00017BB8: B9 D9                                                  dw vstmxcsr_instruction-instruction_handler
00017BBA: 76 75 63 6F 6D 69 73 64 2E                             db 'vucomisd',2Eh
00017BC3: 90 D2                                                  dw avx_comisd_instruction-instruction_handler
00017BC5: 76 75 63 6F 6D 69 73 73 2E                             db 'vucomiss',2Eh
00017BCE: 82 D2                                                  dw avx_comiss_instruction-instruction_handler
00017BD0: 76 7A 65 72 6F 61 6C 6C 77                             db 'vzeroall',77h
00017BD9: 95 D9                                                  dw vzeroall_instruction-instruction_handler
00017BDB: 77 62 6E 6F 69 6E 76 64 09                             db 'wbnoinvd',9
00017BE4: A0 64                                                  dw simple_extended_instruction_f3-instruction_handler
00017BE6: 77 72 66 73 62 61 73 65 02                             db 'wrfsbase',2
00017BEF: C2 B6                                                  dw rdfsbase_instruction-instruction_handler
00017BF1: 77 72 67 73 62 61 73 65 03                             db 'wrgsbase',3
00017BFA: C2 B6                                                  dw rdfsbase_instruction-instruction_handler
00017BFC: 78 61 63 71 75 69 72 65 F2                             db 'xacquire',0F2h
00017C05: A6 64                                                  dw prefix_instruction-instruction_handler
00017C07: 78 72 65 6C 65 61 73 65 F3                             db 'xrelease',0F3h
00017C10: A6 64                                                  dw prefix_instruction-instruction_handler
00017C12: 78 72 73 74 6F 72 36 34 05                             db 'xrstor64',101b
00017C1B: 0A AE                                                  dw fxsave_instruction_64bit-instruction_handler
00017C1D: 78 73 61 76 65 63 36 34 04                             db 'xsavec64',4
00017C26: 01 AE                                                  dw xsaves_instruction_64bit-instruction_handler
00017C28: 78 73 61 76 65 6F 70 74 06                             db 'xsaveopt',110b
00017C31: 0F AE                                                  dw fxsave_instruction-instruction_handler
00017C33: 78 73 61 76 65 73 36 34 05                             db 'xsaves64',5
00017C3C: 01 AE                                                  dw xsaves_instruction_64bit-instruction_handler
                                                                instructions_9:
00017C3E: 63 6D 70 78 63 68 67 38 62 08                          db 'cmpxchg8b',8
00017C48: 40 96                                                  dw cmpxchgx_instruction-instruction_handler
00017C4A: 63 76 74 74 70 64 32 64 71 E6                          db 'cvttpd2dq',0E6h
00017C54: 62 A2                                                  dw sse_pd_instruction-instruction_handler
00017C56: 63 76 74 74 70 64 32 70 69 2C                          db 'cvttpd2pi',2Ch
00017C60: 13 A8                                                  dw cvtpd2pi_instruction-instruction_handler
00017C62: 63 76 74 74 70 73 32 64 71 5B                          db 'cvttps2dq',5Bh
00017C6C: 2C A3                                                  dw movshdup_instruction-instruction_handler
00017C6E: 63 76 74 74 70 73 32 70 69 2C                          db 'cvttps2pi',2Ch
00017C78: 0A A8                                                  dw cvtps2pi_instruction-instruction_handler
00017C7A: 63 76 74 74 73 64 32 73 69 2C                          db 'cvttsd2si',2Ch
00017C84: 66 A8                                                  dw cvtsd2si_instruction-instruction_handler
00017C86: 63 76 74 74 73 73 32 73 69 2C                          db 'cvttss2si',2Ch
00017C90: 56 A8                                                  dw cvtss2si_instruction-instruction_handler
00017C92: 65 78 74 72 61 63 74 70 73 17                          db 'extractps',17h
00017C9C: 1D AA                                                  dw extractps_instruction-instruction_handler
00017C9E: 66 78 72 73 74 6F 72 36 34 01                          db 'fxrstor64',1
00017CA8: 0A AE                                                  dw fxsave_instruction_64bit-instruction_handler
00017CAA: 67 66 32 70 38 6D 75 6C 62 CF                          db 'gf2p8mulb',0CFh
00017CB4: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
00017CB6: 6D 6F 76 64 69 72 36 34 62 F8                          db 'movdir64b',0F8h
00017CC0: 42 BB                                                  dw movdir64b_instruction-instruction_handler
00017CC2: 70 63 6C 6D 75 6C 71 64 71 FF                          db 'pclmulqdq',-1
00017CCC: 12 AA                                                  dw pclmulqdq_instruction-instruction_handler
00017CCE: 70 63 6D 70 65 73 74 72 69 61                          db 'pcmpestri',61h
00017CD8: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00017CDA: 70 63 6D 70 65 73 74 72 6D 60                          db 'pcmpestrm',60h
00017CE4: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00017CE6: 70 63 6D 70 69 73 74 72 69 63                          db 'pcmpistri',63h
00017CF0: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00017CF2: 70 63 6D 70 69 73 74 72 6D 62                          db 'pcmpistrm',62h
00017CFC: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00017CFE: 70 6D 61 64 64 75 62 73 77 04                          db 'pmaddubsw',4
00017D08: A8 A8                                                  dw ssse3_instruction-instruction_handler
00017D0A: 70 72 65 66 65 74 63 68 77 01                          db 'prefetchw',1
00017D14: A3 AE                                                  dw amd_prefetch_instruction-instruction_handler
00017D16: 70 75 6E 70 63 6B 68 62 77 68                          db 'punpckhbw',68h
00017D20: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00017D22: 70 75 6E 70 63 6B 68 64 71 6A                          db 'punpckhdq',6Ah
00017D2C: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00017D2E: 70 75 6E 70 63 6B 68 77 64 69                          db 'punpckhwd',69h
00017D38: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00017D3A: 70 75 6E 70 63 6B 6C 62 77 60                          db 'punpcklbw',60h
00017D44: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00017D46: 70 75 6E 70 63 6B 6C 64 71 62                          db 'punpckldq',62h
00017D50: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00017D52: 70 75 6E 70 63 6B 6C 77 64 61                          db 'punpcklwd',61h
00017D5C: C5 9B                                                  dw basic_mmx_instruction-instruction_handler
00017D5E: 70 76 61 6C 69 64 61 74 65 FF                          db 'pvalidate',0FFh
00017D68: 44 95                                                  dw simple_instruction_f2_0f_01-instruction_handler
00017D6A: 72 6D 70 61 64 6A 75 73 74 FE                          db 'rmpadjust',0FEh
00017D74: 4A 95                                                  dw simple_instruction_f3_0f_01-instruction_handler
00017D76: 72 6D 70 75 70 64 61 74 65 FE                          db 'rmpupdate',0FEh
00017D80: 44 95                                                  dw simple_instruction_f2_0f_01-instruction_handler
00017D82: 73 68 61 31 6E 65 78 74 65 C8                          db 'sha1nexte',0C8h
00017D8C: BC A9                                                  dw sse4_instruction_38-instruction_handler
00017D8E: 73 68 61 31 72 6E 64 73 34 CC                          db 'sha1rnds4',0CCh
00017D98: 07 AA                                                  dw sse4_instruction_3a_imm8-instruction_handler
00017D9A: 75 73 65 61 76 78 32 35 36 00                          db 'useavx256',0
00017DA4: C6 F1                                                  dw set_evex_mode-instruction_handler
00017DA6: 75 73 65 61 76 78 35 31 32 01                          db 'useavx512',1
00017DB0: C6 F1                                                  dw set_evex_mode-instruction_handler
00017DB2: 76 61 64 64 73 75 62 70 64 D0                          db 'vaddsubpd',0D0h
00017DBC: 56 C8                                                  dw avx_pd_instruction_noevex-instruction_handler
00017DBE: 76 61 64 64 73 75 62 70 73 D0                          db 'vaddsubps',0D0h
00017DC8: 68 C8                                                  dw avx_ps_instruction_noevex-instruction_handler
00017DCA: 76 62 6C 65 6E 64 6D 70 64 65                          db 'vblendmpd',65h
00017DD4: 99 C6                                                  dw avx_pd_instruction_38_evex-instruction_handler
00017DD6: 76 62 6C 65 6E 64 6D 70 73 65                          db 'vblendmps',65h
00017DE0: F9 C6                                                  dw avx_ps_instruction_66_38_evex-instruction_handler
00017DE2: 76 62 6C 65 6E 64 76 70 64 4B                          db 'vblendvpd',4Bh
00017DEC: 45 D3                                                  dw avx_triple_source_instruction_3a_noevex-instruction_handler
00017DEE: 76 62 6C 65 6E 64 76 70 73 4A                          db 'vblendvps',4Ah
00017DF8: 45 D3                                                  dw avx_triple_source_instruction_3a_noevex-instruction_handler
00017DFA: 76 63 6D 70 6E 65 71 70 64 04                          db 'vcmpneqpd',4
00017E04: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017E06: 76 63 6D 70 6E 65 71 70 73 04                          db 'vcmpneqps',4
00017E10: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00017E12: 76 63 6D 70 6E 65 71 73 64 04                          db 'vcmpneqsd',4
00017E1C: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00017E1E: 76 63 6D 70 6E 65 71 73 73 04                          db 'vcmpneqss',4
00017E28: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017E2A: 76 63 6D 70 6E 67 65 70 64 09                          db 'vcmpngepd',9
00017E34: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017E36: 76 63 6D 70 6E 67 65 70 73 09                          db 'vcmpngeps',9
00017E40: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00017E42: 76 63 6D 70 6E 67 65 73 64 09                          db 'vcmpngesd',9
00017E4C: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00017E4E: 76 63 6D 70 6E 67 65 73 73 09                          db 'vcmpngess',9
00017E58: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017E5A: 76 63 6D 70 6E 67 74 70 64 0A                          db 'vcmpngtpd',0Ah
00017E64: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017E66: 76 63 6D 70 6E 67 74 70 73 0A                          db 'vcmpngtps',0Ah
00017E70: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00017E72: 76 63 6D 70 6E 67 74 73 64 0A                          db 'vcmpngtsd',0Ah
00017E7C: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00017E7E: 76 63 6D 70 6E 67 74 73 73 0A                          db 'vcmpngtss',0Ah
00017E88: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017E8A: 76 63 6D 70 6E 6C 65 70 64 06                          db 'vcmpnlepd',6
00017E94: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017E96: 76 63 6D 70 6E 6C 65 70 73 06                          db 'vcmpnleps',6
00017EA0: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00017EA2: 76 63 6D 70 6E 6C 65 73 64 06                          db 'vcmpnlesd',6
00017EAC: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00017EAE: 76 63 6D 70 6E 6C 65 73 73 06                          db 'vcmpnless',6
00017EB8: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017EBA: 76 63 6D 70 6E 6C 74 70 64 05                          db 'vcmpnltpd',5
00017EC4: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017EC6: 76 63 6D 70 6E 6C 74 70 73 05                          db 'vcmpnltps',5
00017ED0: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00017ED2: 76 63 6D 70 6E 6C 74 73 64 05                          db 'vcmpnltsd',5
00017EDC: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00017EDE: 76 63 6D 70 6E 6C 74 73 73 05                          db 'vcmpnltss',5
00017EE8: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017EEA: 76 63 6D 70 6F 72 64 70 64 07                          db 'vcmpordpd',7
00017EF4: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00017EF6: 76 63 6D 70 6F 72 64 70 73 07                          db 'vcmpordps',7
00017F00: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00017F02: 76 63 6D 70 6F 72 64 73 64 07                          db 'vcmpordsd',7
00017F0C: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00017F0E: 76 63 6D 70 6F 72 64 73 73 07                          db 'vcmpordss',7
00017F18: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00017F1A: 76 63 76 74 64 71 32 70 64 E6                          db 'vcvtdq2pd',0E6h
00017F24: B8 E3                                                  dw avx_cvtdq2pd_instruction-instruction_handler
00017F26: 76 63 76 74 64 71 32 70 73 5B                          db 'vcvtdq2ps',5Bh
00017F30: C0 C6                                                  dw avx_single_source_ps_instruction_er-instruction_handler
00017F32: 76 63 76 74 70 64 32 64 71 E6                          db 'vcvtpd2dq',0E6h
00017F3C: 80 E4                                                  dw avx_cvtpd2dq_instruction-instruction_handler
00017F3E: 76 63 76 74 70 64 32 70 73 5A                          db 'vcvtpd2ps',5Ah
00017F48: AE E4                                                  dw avx_cvtpd2ps_instruction-instruction_handler
00017F4A: 76 63 76 74 70 64 32 71 71 7B                          db 'vcvtpd2qq',7Bh
00017F54: 4B C6                                                  dw avx_single_source_pd_instruction_er_evex-instruction_handler
00017F56: 76 63 76 74 70 68 32 70 73 13                          db 'vcvtph2ps',13h
00017F60: 93 E5                                                  dw avx_cvtph2ps_instruction-instruction_handler
00017F62: 76 63 76 74 70 73 32 64 71 5B                          db 'vcvtps2dq',5Bh
00017F6C: A9 C6                                                  dw avx_cvtps2dq_instruction-instruction_handler
00017F6E: 76 63 76 74 70 73 32 70 64 5A                          db 'vcvtps2pd',5Ah
00017F78: E3 E3                                                  dw avx_cvtps2pd_instruction-instruction_handler
00017F7A: 76 63 76 74 70 73 32 70 68 1D                          db 'vcvtps2ph',1Dh
00017F84: AF E5                                                  dw avx_cvtps2ph_instruction-instruction_handler
00017F86: 76 63 76 74 70 73 32 71 71 7B                          db 'vcvtps2qq',7Bh
00017F90: C3 E3                                                  dw avx_cvtps2qq_instruction-instruction_handler
00017F92: 76 63 76 74 71 71 32 70 64 E6                          db 'vcvtqq2pd',0E6h
00017F9C: C1 D2                                                  dw avx_cvtqq2pd_instruction-instruction_handler
00017F9E: 76 63 76 74 71 71 32 70 73 5B                          db 'vcvtqq2ps',5Bh
00017FA8: 97 E4                                                  dw avx_cvtpd2udq_instruction-instruction_handler
00017FAA: 76 63 76 74 73 64 32 73 69 2D                          db 'vcvtsd2si',2Dh
00017FB4: 5F E6                                                  dw avx_cvtsd2si_instruction-instruction_handler
00017FB6: 76 63 76 74 73 64 32 73 73 5A                          db 'vcvtsd2ss',5Ah
00017FC0: 10 C7                                                  dw avx_sd_instruction_er-instruction_handler
00017FC2: 76 63 76 74 73 69 32 73 64 2A                          db 'vcvtsi2sd',2Ah
00017FCC: 0E E7                                                  dw avx_cvtsi2sd_instruction-instruction_handler
00017FCE: 76 63 76 74 73 69 32 73 73 2A                          db 'vcvtsi2ss',2Ah
00017FD8: 1B E7                                                  dw avx_cvtsi2ss_instruction-instruction_handler
00017FDA: 76 63 76 74 73 73 32 73 64 5A                          db 'vcvtss2sd',5Ah
00017FE4: 3A C7                                                  dw avx_ss_instruction_sae-instruction_handler
00017FE6: 76 63 76 74 73 73 32 73 69 2D                          db 'vcvtss2si',2Dh
00017FF0: 7C E6                                                  dw avx_cvtss2si_instruction-instruction_handler
00017FF2: 76 64 62 70 73 61 64 62 77 42                          db 'vdbpsadbw',42h
00017FFC: 14 C8                                                  dw avx_bw_instruction_3a_imm8_evex-instruction_handler
00017FFE: 76 65 78 70 61 6E 64 70 64 88                          db 'vexpandpd',88h
00018008: 58 C7                                                  dw avx_single_source_q_instruction_38_evex-instruction_handler
0001800A: 76 65 78 70 61 6E 64 70 73 88                          db 'vexpandps',88h
00018014: BB C7                                                  dw avx_single_source_d_instruction_38_evex-instruction_handler
00018016: 76 66 6E 6D 61 64 64 70 64 79                          db 'vfnmaddpd',79h
00018020: F4 D4                                                  dw fma4_instruction_p-instruction_handler
00018022: 76 66 6E 6D 61 64 64 70 73 78                          db 'vfnmaddps',78h
0001802C: F4 D4                                                  dw fma4_instruction_p-instruction_handler
0001802E: 76 66 6E 6D 61 64 64 73 64 7B                          db 'vfnmaddsd',7Bh
00018038: F8 D4                                                  dw fma4_instruction_sd-instruction_handler
0001803A: 76 66 6E 6D 61 64 64 73 73 7A                          db 'vfnmaddss',7Ah
00018044: FC D4                                                  dw fma4_instruction_ss-instruction_handler
00018046: 76 66 6E 6D 73 75 62 70 64 7D                          db 'vfnmsubpd',7Dh
00018050: F4 D4                                                  dw fma4_instruction_p-instruction_handler
00018052: 76 66 6E 6D 73 75 62 70 73 7C                          db 'vfnmsubps',7Ch
0001805C: F4 D4                                                  dw fma4_instruction_p-instruction_handler
0001805E: 76 66 6E 6D 73 75 62 73 64 7F                          db 'vfnmsubsd',7Fh
00018068: F8 D4                                                  dw fma4_instruction_sd-instruction_handler
0001806A: 76 66 6E 6D 73 75 62 73 73 7E                          db 'vfnmsubss',7Eh
00018074: FC D4                                                  dw fma4_instruction_ss-instruction_handler
00018076: 76 67 65 74 65 78 70 70 64 42                          db 'vgetexppd',42h
00018080: 16 D4                                                  dw avx512_single_source_pd_instruction_sae-instruction_handler
00018082: 76 67 65 74 65 78 70 70 73 42                          db 'vgetexpps',42h
0001808C: 3A D4                                                  dw avx512_single_source_ps_instruction_sae-instruction_handler
0001808E: 76 67 65 74 65 78 70 73 64 43                          db 'vgetexpsd',43h
00018098: 55 D4                                                  dw avx512_sd_instruction_sae-instruction_handler
0001809A: 76 67 65 74 65 78 70 73 73 43                          db 'vgetexpss',43h
000180A4: 70 D4                                                  dw avx512_ss_instruction_sae-instruction_handler
000180A6: 76 69 6E 73 65 72 74 70 73 21                          db 'vinsertps',21h
000180B0: 1A E3                                                  dw avx_insertps_instruction-instruction_handler
000180B2: 76 6D 6F 76 64 71 61 33 32 6F                          db 'vmovdqa32',6Fh
000180BC: B9 CC                                                  dw avx512_movdqa32_instruction-instruction_handler
000180BE: 76 6D 6F 76 64 71 61 36 34 6F                          db 'vmovdqa64',6Fh
000180C8: B2 CC                                                  dw avx512_movdqa64_instruction-instruction_handler
000180CA: 76 6D 6F 76 64 71 75 31 36 6F                          db 'vmovdqu16',6Fh
000180D4: 9C CC                                                  dw avx512_movdqu16_instruction-instruction_handler
000180D6: 76 6D 6F 76 64 71 75 33 32 6F                          db 'vmovdqu32',6Fh
000180E0: AE CC                                                  dw avx512_movdqu32_instruction-instruction_handler
000180E2: 76 6D 6F 76 64 71 75 36 34 6F                          db 'vmovdqu64',6Fh
000180EC: A7 CC                                                  dw avx512_movdqu64_instruction-instruction_handler
000180EE: 76 6D 6F 76 6D 73 6B 70 64 00                          db 'vmovmskpd',0
000180F8: 93 E8                                                  dw avx_movmskpd_instruction-instruction_handler
000180FA: 76 6D 6F 76 6D 73 6B 70 73 00                          db 'vmovmskps',0
00018104: 9A E8                                                  dw avx_movmskps_instruction-instruction_handler
00018106: 76 6D 6F 76 6E 74 64 71 61 2A                          db 'vmovntdqa',2Ah
00018110: 2B CE                                                  dw avx_movntdqa_instruction-instruction_handler
00018112: 76 6D 6F 76 73 68 64 75 70 16                          db 'vmovshdup',16h
0001811C: AC D2                                                  dw avx_movshdup_instruction-instruction_handler
0001811E: 76 6D 6F 76 73 6C 64 75 70 12                          db 'vmovsldup',12h
00018128: AC D2                                                  dw avx_movshdup_instruction-instruction_handler
0001812A: 76 70 34 64 70 77 73 73 64 52                          db 'vp4dpwssd',52h
00018134: 2E F1                                                  dw avx512_4vnniw_instruction-instruction_handler
00018136: 76 70 61 63 6B 73 73 64 77 6B                          db 'vpackssdw',6Bh
00018140: 09 C8                                                  dw avx_d_instruction-instruction_handler
00018142: 76 70 61 63 6B 73 73 77 62 63                          db 'vpacksswb',63h
0001814C: 39 C8                                                  dw avx_bw_instruction-instruction_handler
0001814E: 76 70 61 63 6B 75 73 64 77 2B                          db 'vpackusdw',2Bh
00018158: D2 C7                                                  dw avx_d_instruction_38-instruction_handler
0001815A: 76 70 61 63 6B 75 73 77 62 67                          db 'vpackuswb',67h
00018164: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00018166: 76 70 62 6C 65 6E 64 6D 62 66                          db 'vpblendmb',66h
00018170: 4D C8                                                  dw avx_bw_instruction_38_evex-instruction_handler
00018172: 76 70 62 6C 65 6E 64 6D 64 64                          db 'vpblendmd',64h
0001817C: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
0001817E: 76 70 62 6C 65 6E 64 6D 71 64                          db 'vpblendmq',64h
00018188: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
0001818A: 76 70 62 6C 65 6E 64 6D 77 66                          db 'vpblendmw',66h
00018194: 46 C8                                                  dw avx_bw_instruction_38_w1_evex-instruction_handler
00018196: 76 70 62 6C 65 6E 64 76 62 4C                          db 'vpblendvb',4Ch
000181A0: 45 D3                                                  dw avx_triple_source_instruction_3a_noevex-instruction_handler
000181A2: 76 70 63 6D 70 6C 65 75 62 02                          db 'vpcmpleub',2
000181AC: AB D5                                                  dw avx512_cmp_ub_instruction-instruction_handler
000181AE: 76 70 63 6D 70 6C 65 75 64 02                          db 'vpcmpleud',2
000181B8: 8B D5                                                  dw avx512_cmp_ud_instruction-instruction_handler
000181BA: 76 70 63 6D 70 6C 65 75 71 02                          db 'vpcmpleuq',2
000181C4: 7E D5                                                  dw avx512_cmp_uq_instruction-instruction_handler
000181C6: 76 70 63 6D 70 6C 65 75 77 02                          db 'vpcmpleuw',2
000181D0: A4 D5                                                  dw avx512_cmp_uw_instruction-instruction_handler
000181D2: 76 70 63 6D 70 6C 74 75 62 01                          db 'vpcmpltub',1
000181DC: AB D5                                                  dw avx512_cmp_ub_instruction-instruction_handler
000181DE: 76 70 63 6D 70 6C 74 75 64 01                          db 'vpcmpltud',1
000181E8: 8B D5                                                  dw avx512_cmp_ud_instruction-instruction_handler
000181EA: 76 70 63 6D 70 6C 74 75 71 01                          db 'vpcmpltuq',1
000181F4: 7E D5                                                  dw avx512_cmp_uq_instruction-instruction_handler
000181F6: 76 70 63 6D 70 6C 74 75 77 01                          db 'vpcmpltuw',1
00018200: A4 D5                                                  dw avx512_cmp_uw_instruction-instruction_handler
00018202: 76 70 63 6D 70 6E 65 71 62 04                          db 'vpcmpneqb',4
0001820C: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
0001820E: 76 70 63 6D 70 6E 65 71 64 04                          db 'vpcmpneqd',4
00018218: 9E D5                                                  dw avx512_cmp_d_instruction-instruction_handler
0001821A: 76 70 63 6D 70 6E 65 71 71 04                          db 'vpcmpneqq',4
00018224: 91 D5                                                  dw avx512_cmp_q_instruction-instruction_handler
00018226: 76 70 63 6D 70 6E 65 71 77 04                          db 'vpcmpneqw',4
00018230: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
00018232: 76 70 63 6D 70 6E 6C 65 62 06                          db 'vpcmpnleb',6
0001823C: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
0001823E: 76 70 63 6D 70 6E 6C 65 64 06                          db 'vpcmpnled',6
00018248: 9E D5                                                  dw avx512_cmp_d_instruction-instruction_handler
0001824A: 76 70 63 6D 70 6E 6C 65 71 06                          db 'vpcmpnleq',6
00018254: 91 D5                                                  dw avx512_cmp_q_instruction-instruction_handler
00018256: 76 70 63 6D 70 6E 6C 65 77 06                          db 'vpcmpnlew',6
00018260: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
00018262: 76 70 63 6D 70 6E 6C 74 62 05                          db 'vpcmpnltb',5
0001826C: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
0001826E: 76 70 63 6D 70 6E 6C 74 64 05                          db 'vpcmpnltd',5
00018278: 9E D5                                                  dw avx512_cmp_d_instruction-instruction_handler
0001827A: 76 70 63 6D 70 6E 6C 74 71 05                          db 'vpcmpnltq',5
00018284: 91 D5                                                  dw avx512_cmp_q_instruction-instruction_handler
00018286: 76 70 63 6D 70 6E 6C 74 77 05                          db 'vpcmpnltw',5
00018290: B8 D5                                                  dw avx512_cmp_b_instruction-instruction_handler
00018292: 76 70 63 6F 6D 65 71 75 62 04                          db 'vpcomequb',4
0001829C: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
0001829E: 76 70 63 6F 6D 65 71 75 64 04                          db 'vpcomequd',4
000182A8: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
000182AA: 76 70 63 6F 6D 65 71 75 71 04                          db 'vpcomequq',4
000182B4: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
000182B6: 76 70 63 6F 6D 65 71 75 77 04                          db 'vpcomequw',4
000182C0: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
000182C2: 76 70 63 6F 6D 67 65 75 62 03                          db 'vpcomgeub',3
000182CC: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
000182CE: 76 70 63 6F 6D 67 65 75 64 03                          db 'vpcomgeud',3
000182D8: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
000182DA: 76 70 63 6F 6D 67 65 75 71 03                          db 'vpcomgeuq',3
000182E4: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
000182E6: 76 70 63 6F 6D 67 65 75 77 03                          db 'vpcomgeuw',3
000182F0: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
000182F2: 76 70 63 6F 6D 67 74 75 62 02                          db 'vpcomgtub',2
000182FC: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
000182FE: 76 70 63 6F 6D 67 74 75 64 02                          db 'vpcomgtud',2
00018308: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
0001830A: 76 70 63 6F 6D 67 74 75 71 02                          db 'vpcomgtuq',2
00018314: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
00018316: 76 70 63 6F 6D 67 74 75 77 02                          db 'vpcomgtuw',2
00018320: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
00018322: 76 70 63 6F 6D 6C 65 75 62 01                          db 'vpcomleub',1
0001832C: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
0001832E: 76 70 63 6F 6D 6C 65 75 64 01                          db 'vpcomleud',1
00018338: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
0001833A: 76 70 63 6F 6D 6C 65 75 71 01                          db 'vpcomleuq',1
00018344: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
00018346: 76 70 63 6F 6D 6C 65 75 77 01                          db 'vpcomleuw',1
00018350: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
00018352: 76 70 63 6F 6D 6C 74 75 62 00                          db 'vpcomltub',0
0001835C: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
0001835E: 76 70 63 6F 6D 6C 74 75 64 00                          db 'vpcomltud',0
00018368: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
0001836A: 76 70 63 6F 6D 6C 74 75 71 00                          db 'vpcomltuq',0
00018374: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
00018376: 76 70 63 6F 6D 6C 74 75 77 00                          db 'vpcomltuw',0
00018380: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
00018382: 76 70 63 6F 6D 6E 65 71 62 05                          db 'vpcomneqb',5
0001838C: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
0001838E: 76 70 63 6F 6D 6E 65 71 64 05                          db 'vpcomneqd',5
00018398: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
0001839A: 76 70 63 6F 6D 6E 65 71 71 05                          db 'vpcomneqq',5
000183A4: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
000183A6: 76 70 63 6F 6D 6E 65 71 77 05                          db 'vpcomneqw',5
000183B0: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
000183B2: 76 70 64 70 62 75 73 64 73 51                          db 'vpdpbusds',51h
000183BC: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
000183BE: 76 70 64 70 77 73 73 64 73 53                          db 'vpdpwssds',53h
000183C8: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
000183CA: 76 70 65 72 6D 69 32 70 64 77                          db 'vpermi2pd',77h
000183D4: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
000183D6: 76 70 65 72 6D 69 32 70 73 77                          db 'vpermi2ps',77h
000183E0: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
000183E2: 76 70 65 72 6D 69 6C 70 64 05                          db 'vpermilpd',5
000183EC: 56 DA                                                  dw avx_permilpd_instruction-instruction_handler
000183EE: 76 70 65 72 6D 69 6C 70 73 04                          db 'vpermilps',4
000183F8: 61 DA                                                  dw avx_permilps_instruction-instruction_handler
000183FA: 76 70 65 72 6D 74 32 70 64 7F                          db 'vpermt2pd',7Fh
00018404: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00018406: 76 70 65 72 6D 74 32 70 73 7F                          db 'vpermt2ps',7Fh
00018410: CB C7                                                  dw avx_d_instruction_38_evex-instruction_handler
00018412: 76 70 65 78 70 61 6E 64 62 62                          db 'vpexpandb',62h
0001841C: BB C7                                                  dw avx_single_source_d_instruction_38_evex-instruction_handler
0001841E: 76 70 65 78 70 61 6E 64 64 89                          db 'vpexpandd',89h
00018428: BB C7                                                  dw avx_single_source_d_instruction_38_evex-instruction_handler
0001842A: 76 70 65 78 70 61 6E 64 71 89                          db 'vpexpandq',89h
00018434: 58 C7                                                  dw avx_single_source_q_instruction_38_evex-instruction_handler
00018436: 76 70 65 78 70 61 6E 64 77 62                          db 'vpexpandw',62h
00018440: 58 C7                                                  dw avx_single_source_q_instruction_38_evex-instruction_handler
00018442: 76 70 68 61 64 64 75 62 64 D2                          db 'vphaddubd',0D2h
0001844C: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
0001844E: 76 70 68 61 64 64 75 62 71 D3                          db 'vphaddubq',0D3h
00018458: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
0001845A: 76 70 68 61 64 64 75 62 77 D1                          db 'vphaddubw',0D1h
00018464: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
00018466: 76 70 68 61 64 64 75 64 71 DB                          db 'vphaddudq',0DBh
00018470: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
00018472: 76 70 68 61 64 64 75 77 64 D6                          db 'vphadduwd',0D6h
0001847C: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
0001847E: 76 70 68 61 64 64 75 77 71 D7                          db 'vphadduwq',0D7h
00018488: 50 EF                                                  dw xop_single_source_128bit_instruction-instruction_handler
0001848A: 76 70 6D 61 63 73 64 71 68 9F                          db 'vpmacsdqh',9Fh
00018494: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
00018496: 76 70 6D 61 63 73 64 71 6C 97                          db 'vpmacsdql',97h
000184A0: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
000184A2: 76 70 6D 61 63 73 73 64 64 8E                          db 'vpmacssdd',8Eh
000184AC: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
000184AE: 76 70 6D 61 63 73 73 77 64 86                          db 'vpmacsswd',86h
000184B8: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
000184BA: 76 70 6D 61 63 73 73 77 77 85                          db 'vpmacssww',85h
000184C4: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
000184C6: 76 70 6D 61 64 63 73 77 64 B6                          db 'vpmadcswd',0B6h
000184D0: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
000184D2: 76 70 6D 6F 76 6D 73 6B 62 D7                          db 'vpmovmskb',0D7h
000184DC: 0B E9                                                  dw avx_pmovmskb_instruction-instruction_handler
000184DE: 76 70 6D 6F 76 73 78 62 64 21                          db 'vpmovsxbd',21h
000184E8: 51 DD                                                  dw avx_pmovsxbd_instruction-instruction_handler
000184EA: 76 70 6D 6F 76 73 78 62 71 22                          db 'vpmovsxbq',22h
000184F4: 4D DD                                                  dw avx_pmovsxbq_instruction-instruction_handler
000184F6: 76 70 6D 6F 76 73 78 62 77 20                          db 'vpmovsxbw',20h
00018500: 55 DD                                                  dw avx_pmovsxbw_instruction-instruction_handler
00018502: 76 70 6D 6F 76 73 78 64 71 25                          db 'vpmovsxdq',25h
0001850C: 55 DD                                                  dw avx_pmovsxbw_instruction-instruction_handler
0001850E: 76 70 6D 6F 76 73 78 77 64 23                          db 'vpmovsxwd',23h
00018518: 55 DD                                                  dw avx_pmovsxbw_instruction-instruction_handler
0001851A: 76 70 6D 6F 76 73 78 77 71 24                          db 'vpmovsxwq',24h
00018524: 51 DD                                                  dw avx_pmovsxbd_instruction-instruction_handler
00018526: 76 70 6D 6F 76 75 73 64 62 11                          db 'vpmovusdb',11h
00018530: FB DD                                                  dw avx512_pmovdb_instruction-instruction_handler
00018532: 76 70 6D 6F 76 75 73 64 77 13                          db 'vpmovusdw',13h
0001853C: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
0001853E: 76 70 6D 6F 76 75 73 71 62 12                          db 'vpmovusqb',12h
00018548: F7 DD                                                  dw avx512_pmovqb_instruction-instruction_handler
0001854A: 76 70 6D 6F 76 75 73 71 64 15                          db 'vpmovusqd',15h
00018554: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
00018556: 76 70 6D 6F 76 75 73 71 77 14                          db 'vpmovusqw',14h
00018560: FB DD                                                  dw avx512_pmovdb_instruction-instruction_handler
00018562: 76 70 6D 6F 76 75 73 77 62 10                          db 'vpmovuswb',10h
0001856C: FF DD                                                  dw avx512_pmovwb_instruction-instruction_handler
0001856E: 76 70 6D 6F 76 7A 78 62 64 31                          db 'vpmovzxbd',31h
00018578: 51 DD                                                  dw avx_pmovsxbd_instruction-instruction_handler
0001857A: 76 70 6D 6F 76 7A 78 62 71 32                          db 'vpmovzxbq',32h
00018584: 4D DD                                                  dw avx_pmovsxbq_instruction-instruction_handler
00018586: 76 70 6D 6F 76 7A 78 62 77 30                          db 'vpmovzxbw',30h
00018590: 55 DD                                                  dw avx_pmovsxbw_instruction-instruction_handler
00018592: 76 70 6D 6F 76 7A 78 64 71 35                          db 'vpmovzxdq',35h
0001859C: 55 DD                                                  dw avx_pmovsxbw_instruction-instruction_handler
0001859E: 76 70 6D 6F 76 7A 78 77 64 33                          db 'vpmovzxwd',33h
000185A8: 55 DD                                                  dw avx_pmovsxbw_instruction-instruction_handler
000185AA: 76 70 6D 6F 76 7A 78 77 71 34                          db 'vpmovzxwq',34h
000185B4: 51 DD                                                  dw avx_pmovsxbd_instruction-instruction_handler
000185B6: 76 70 6D 75 6C 68 72 73 77 0B                          db 'vpmulhrsw',0Bh
000185C0: 32 C8                                                  dw avx_bw_instruction_38-instruction_handler
000185C2: 76 70 74 65 73 74 6E 6D 62 26                          db 'vptestnmb',26h
000185CC: A9 D6                                                  dw avx512_ptestnmb_instruction-instruction_handler
000185CE: 76 70 74 65 73 74 6E 6D 64 27                          db 'vptestnmd',27h
000185D8: 93 D6                                                  dw avx512_ptestnmd_instruction-instruction_handler
000185DA: 76 70 74 65 73 74 6E 6D 71 27                          db 'vptestnmq',27h
000185E4: 97 D6                                                  dw avx512_ptestnmq_instruction-instruction_handler
000185E6: 76 70 74 65 73 74 6E 6D 77 26                          db 'vptestnmw',26h
000185F0: A2 D6                                                  dw avx512_ptestnmw_instruction-instruction_handler
000185F2: 76 72 65 64 75 63 65 70 64 56                          db 'vreducepd',56h
000185FC: B3 D3                                                  dw avx512_single_source_pd_instruction_sae_imm8-instruction_handler
000185FE: 76 72 65 64 75 63 65 70 73 56                          db 'vreduceps',56h
00018608: C7 D3                                                  dw avx512_single_source_ps_instruction_sae_imm8-instruction_handler
0001860A: 76 72 65 64 75 63 65 73 64 57                          db 'vreducesd',57h
00018614: D4 D3                                                  dw avx512_sd_instruction_sae_imm8-instruction_handler
00018616: 76 72 65 64 75 63 65 73 73 57                          db 'vreducess',57h
00018620: E1 D3                                                  dw avx512_ss_instruction_sae_imm8-instruction_handler
00018622: 76 73 63 61 6C 65 66 70 64 2C                          db 'vscalefpd',2Ch
0001862C: 0D D4                                                  dw avx512_pd_instruction_er-instruction_handler
0001862E: 76 73 63 61 6C 65 66 70 73 2C                          db 'vscalefps',2Ch
00018638: 31 D4                                                  dw avx512_ps_instruction_er-instruction_handler
0001863A: 76 73 63 61 6C 65 66 73 64 2D                          db 'vscalefsd',2Dh
00018644: 4E D4                                                  dw avx512_sd_instruction_er-instruction_handler
00018646: 76 73 63 61 6C 65 66 73 73 2D                          db 'vscalefss',2Dh
00018650: 69 D4                                                  dw avx512_ss_instruction_er-instruction_handler
00018652: 76 75 6E 70 63 6B 68 70 64 15                          db 'vunpckhpd',15h
0001865C: 82 C6                                                  dw avx_pd_instruction-instruction_handler
0001865E: 76 75 6E 70 63 6B 68 70 73 15                          db 'vunpckhps',15h
00018668: F0 C6                                                  dw avx_ps_instruction-instruction_handler
0001866A: 76 75 6E 70 63 6B 6C 70 64 14                          db 'vunpcklpd',14h
00018674: 82 C6                                                  dw avx_pd_instruction-instruction_handler
00018676: 76 75 6E 70 63 6B 6C 70 73 14                          db 'vunpcklps',14h
00018680: F0 C6                                                  dw avx_ps_instruction-instruction_handler
00018682: 78 72 73 74 6F 72 73 36 34 03                          db 'xrstors64',3
0001868C: 01 AE                                                  dw xsaves_instruction_64bit-instruction_handler
                                                                instructions_10:
0001868E: 61 65 73 64 65 63 6C 61 73 74 DF                       db 'aesdeclast',0DFh
00018699: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
0001869B: 61 65 73 65 6E 63 6C 61 73 74 DD                       db 'aesenclast',0DDh
000186A6: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
000186A8: 63 6C 66 6C 75 73 68 6F 70 74 07                       db 'clflushopt',7
000186B3: AC AE                                                  dw clflushopt_instruction-instruction_handler
000186B5: 63 6D 70 75 6E 6F 72 64 70 64 03                       db 'cmpunordpd',3
000186C0: 9B A2                                                  dw cmp_pd_instruction-instruction_handler
000186C2: 63 6D 70 75 6E 6F 72 64 70 73 03                       db 'cmpunordps',3
000186CD: A2 A2                                                  dw cmp_ps_instruction-instruction_handler
000186CF: 63 6D 70 75 6E 6F 72 64 73 64 03                       db 'cmpunordsd',3
000186DA: DC A2                                                  dw cmp_sd_instruction-instruction_handler
000186DC: 63 6D 70 75 6E 6F 72 64 73 73 03                       db 'cmpunordss',3
000186E7: B5 A2                                                  dw cmp_ss_instruction-instruction_handler
000186E9: 63 6D 70 78 63 68 67 31 36 62 10                       db 'cmpxchg16b',16
000186F4: 40 96                                                  dw cmpxchgx_instruction-instruction_handler
000186F6: 6C 6F 61 64 61 6C 6C 32 38 36 05                       db 'loadall286',5
00018701: 95 64                                                  dw simple_extended_instruction-instruction_handler
00018703: 6C 6F 61 64 61 6C 6C 33 38 36 07                       db 'loadall386',7
0001870E: 95 64                                                  dw simple_extended_instruction-instruction_handler
00018710: 6D 61 73 6B 6D 6F 76 64 71 75 00                       db 'maskmovdqu',0
0001871B: 28 A6                                                  dw maskmovdqu_instruction-instruction_handler
0001871D: 70 68 6D 69 6E 70 6F 73 75 77 41                       db 'phminposuw',41h
00018728: B5 A9                                                  dw sse4_instruction_66_38-instruction_handler
0001872A: 70 72 65 66 65 74 63 68 74 30 01                       db 'prefetcht0',1
00018735: 6B AE                                                  dw prefetch_instruction-instruction_handler
00018737: 70 72 65 66 65 74 63 68 74 31 02                       db 'prefetcht1',2
00018742: 6B AE                                                  dw prefetch_instruction-instruction_handler
00018744: 70 72 65 66 65 74 63 68 74 32 03                       db 'prefetcht2',3
0001874F: 6B AE                                                  dw prefetch_instruction-instruction_handler
00018751: 70 75 6E 70 63 6B 68 71 64 71 6D                       db 'punpckhqdq',6Dh
0001875C: 62 A2                                                  dw sse_pd_instruction-instruction_handler
0001875E: 70 75 6E 70 63 6B 6C 71 64 71 6C                       db 'punpcklqdq',6Ch
00018769: 62 A2                                                  dw sse_pd_instruction-instruction_handler
0001876B: 73 68 61 32 35 36 6D 73 67 31 CC                       db 'sha256msg1',0CCh
00018776: BC A9                                                  dw sse4_instruction_38-instruction_handler
00018778: 73 68 61 32 35 36 6D 73 67 32 CD                       db 'sha256msg2',0CDh
00018783: BC A9                                                  dw sse4_instruction_38-instruction_handler
00018785: 76 63 6D 70 74 72 75 65 70 64 0F                       db 'vcmptruepd',0Fh
00018790: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018792: 76 63 6D 70 74 72 75 65 70 73 0F                       db 'vcmptrueps',0Fh
0001879D: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
0001879F: 76 63 6D 70 74 72 75 65 73 64 0F                       db 'vcmptruesd',0Fh
000187AA: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
000187AC: 76 63 6D 70 74 72 75 65 73 73 0F                       db 'vcmptruess',0Fh
000187B7: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
000187B9: 76 63 76 74 70 64 32 75 64 71 79                       db 'vcvtpd2udq',79h
000187C4: 97 E4                                                  dw avx_cvtpd2udq_instruction-instruction_handler
000187C6: 76 63 76 74 70 64 32 75 71 71 79                       db 'vcvtpd2uqq',79h
000187D1: 4B C6                                                  dw avx_single_source_pd_instruction_er_evex-instruction_handler
000187D3: 76 63 76 74 70 73 32 75 64 71 79                       db 'vcvtps2udq',79h
000187DE: B9 C6                                                  dw avx_single_source_ps_instruction_er_evex-instruction_handler
000187E0: 76 63 76 74 70 73 32 75 71 71 79                       db 'vcvtps2uqq',79h
000187EB: C3 E3                                                  dw avx_cvtps2qq_instruction-instruction_handler
000187ED: 76 63 76 74 73 64 32 75 73 69 79                       db 'vcvtsd2usi',79h
000187F8: 4F E6                                                  dw avx_cvtsd2usi_instruction-instruction_handler
000187FA: 76 63 76 74 73 73 32 75 73 69 79                       db 'vcvtss2usi',79h
00018805: 6C E6                                                  dw avx_cvtss2usi_instruction-instruction_handler
00018807: 76 63 76 74 74 70 64 32 64 71 E6                       db 'vcvttpd2dq',0E6h
00018812: B5 E4                                                  dw avx_cvttpd2dq_instruction-instruction_handler
00018814: 76 63 76 74 74 70 64 32 71 71 7A                       db 'vcvttpd2qq',7Ah
0001881F: 5B C6                                                  dw avx_single_source_pd_instruction_sae_evex-instruction_handler
00018821: 76 63 76 74 74 70 73 32 64 71 5B                       db 'vcvttps2dq',5Bh
0001882C: 7C E5                                                  dw avx_cvttps2dq_instruction-instruction_handler
0001882E: 76 63 76 74 74 70 73 32 71 71 7A                       db 'vcvttps2qq',7Ah
00018839: CA E3                                                  dw avx_cvttps2qq_instruction-instruction_handler
0001883B: 76 63 76 74 74 73 64 32 73 69 2C                       db 'vcvttsd2si',2Ch
00018846: 66 E6                                                  dw avx_cvttsd2si_instruction-instruction_handler
00018848: 76 63 76 74 74 73 73 32 73 69 2C                       db 'vcvttss2si',2Ch
00018853: 83 E6                                                  dw avx_cvttss2si_instruction-instruction_handler
00018855: 76 63 76 74 75 64 71 32 70 64 7A                       db 'vcvtudq2pd',7Ah
00018860: B1 E3                                                  dw avx_cvtudq2pd_instruction-instruction_handler
00018862: 76 63 76 74 75 64 71 32 70 73 7A                       db 'vcvtudq2ps',7Ah
0001886D: B2 C6                                                  dw avx_cvtudq2ps_instruction-instruction_handler
0001886F: 76 63 76 74 75 71 71 32 70 64 7A                       db 'vcvtuqq2pd',7Ah
0001887A: C1 D2                                                  dw avx_cvtqq2pd_instruction-instruction_handler
0001887C: 76 63 76 74 75 71 71 32 70 73 7A                       db 'vcvtuqq2ps',7Ah
00018887: 90 E4                                                  dw avx_cvtuqq2ps_instruction-instruction_handler
00018889: 76 63 76 74 75 73 69 32 73 64 7B                       db 'vcvtusi2sd',7Bh
00018894: 07 E7                                                  dw avx_cvtusi2sd_instruction-instruction_handler
00018896: 76 63 76 74 75 73 69 32 73 73 7B                       db 'vcvtusi2ss',7Bh
000188A1: 14 E7                                                  dw avx_cvtusi2ss_instruction-instruction_handler
000188A3: 76 65 78 74 72 61 63 74 70 73 17                       db 'vextractps',17h
000188AE: 20 E2                                                  dw avx_extract_d_instruction-instruction_handler
000188B0: 76 66 70 63 6C 61 73 73 70 64 66                       db 'vfpclasspd',66h
000188BB: 46 D6                                                  dw avx512_fpclasspd_instruction-instruction_handler
000188BD: 76 66 70 63 6C 61 73 73 70 73 66                       db 'vfpclassps',66h
000188C8: 53 D6                                                  dw avx512_fpclassps_instruction-instruction_handler
000188CA: 76 66 70 63 6C 61 73 73 73 64 67                       db 'vfpclasssd',67h
000188D5: 59 D6                                                  dw avx512_fpclasssd_instruction-instruction_handler
000188D7: 76 66 70 63 6C 61 73 73 73 73 67                       db 'vfpclassss',67h
000188E2: 66 D6                                                  dw avx512_fpclassss_instruction-instruction_handler
000188E4: 76 67 61 74 68 65 72 64 70 64 92                       db 'vgatherdpd',92h
000188EF: 75 E9                                                  dw gather_pd_instruction-instruction_handler
000188F1: 76 67 61 74 68 65 72 64 70 73 92                       db 'vgatherdps',92h
000188FC: 7C E9                                                  dw gather_ps_instruction-instruction_handler
000188FE: 76 67 61 74 68 65 72 71 70 64 93                       db 'vgatherqpd',93h
00018909: 75 E9                                                  dw gather_pd_instruction-instruction_handler
0001890B: 76 67 61 74 68 65 72 71 70 73 93                       db 'vgatherqps',93h
00018916: 7C E9                                                  dw gather_ps_instruction-instruction_handler
00018918: 76 67 65 74 6D 61 6E 74 70 64 26                       db 'vgetmantpd',26h
00018923: B3 D3                                                  dw avx512_single_source_pd_instruction_sae_imm8-instruction_handler
00018925: 76 67 65 74 6D 61 6E 74 70 73 26                       db 'vgetmantps',26h
00018930: C7 D3                                                  dw avx512_single_source_ps_instruction_sae_imm8-instruction_handler
00018932: 76 67 65 74 6D 61 6E 74 73 64 27                       db 'vgetmantsd',27h
0001893D: D4 D3                                                  dw avx512_sd_instruction_sae_imm8-instruction_handler
0001893F: 76 67 65 74 6D 61 6E 74 73 73 27                       db 'vgetmantss',27h
0001894A: E1 D3                                                  dw avx512_ss_instruction_sae_imm8-instruction_handler
0001894C: 76 67 66 32 70 38 6D 75 6C 62 CF                       db 'vgf2p8mulb',0CFh
00018957: 32 C8                                                  dw avx_bw_instruction_38-instruction_handler
00018959: 76 6D 61 73 6B 6D 6F 76 70 64 2D                       db 'vmaskmovpd',2Dh
00018964: F8 E7                                                  dw avx_maskmov_instruction-instruction_handler
00018966: 76 6D 61 73 6B 6D 6F 76 70 73 2C                       db 'vmaskmovps',2Ch
00018971: F8 E7                                                  dw avx_maskmov_instruction-instruction_handler
00018973: 76 70 34 64 70 77 73 73 64 73 53                       db 'vp4dpwssds',53h
0001897E: 2E F1                                                  dw avx512_4vnniw_instruction-instruction_handler
00018980: 76 70 63 6C 6D 75 6C 71 64 71 FF                       db 'vpclmulqdq',-1
0001898B: 8C D3                                                  dw avx_pclmulqdq_instruction-instruction_handler
0001898D: 76 70 63 6D 70 65 73 74 72 69 61                       db 'vpcmpestri',61h
00018998: 3A D3                                                  dw avx_single_source_128bit_instruction_3a_imm8_noevex-instruction_handler
0001899A: 76 70 63 6D 70 65 73 74 72 6D 60                       db 'vpcmpestrm',60h
000189A5: 3A D3                                                  dw avx_single_source_128bit_instruction_3a_imm8_noevex-instruction_handler
000189A7: 76 70 63 6D 70 69 73 74 72 69 63                       db 'vpcmpistri',63h
000189B2: 3A D3                                                  dw avx_single_source_128bit_instruction_3a_imm8_noevex-instruction_handler
000189B4: 76 70 63 6D 70 69 73 74 72 6D 62                       db 'vpcmpistrm',62h
000189BF: 3A D3                                                  dw avx_single_source_128bit_instruction_3a_imm8_noevex-instruction_handler
000189C1: 76 70 63 6D 70 6E 65 71 75 62 04                       db 'vpcmpnequb',4
000189CC: AB D5                                                  dw avx512_cmp_ub_instruction-instruction_handler
000189CE: 76 70 63 6D 70 6E 65 71 75 64 04                       db 'vpcmpnequd',4
000189D9: 8B D5                                                  dw avx512_cmp_ud_instruction-instruction_handler
000189DB: 76 70 63 6D 70 6E 65 71 75 71 04                       db 'vpcmpnequq',4
000189E6: 7E D5                                                  dw avx512_cmp_uq_instruction-instruction_handler
000189E8: 76 70 63 6D 70 6E 65 71 75 77 04                       db 'vpcmpnequw',4
000189F3: A4 D5                                                  dw avx512_cmp_uw_instruction-instruction_handler
000189F5: 76 70 63 6D 70 6E 6C 65 75 62 06                       db 'vpcmpnleub',6
00018A00: AB D5                                                  dw avx512_cmp_ub_instruction-instruction_handler
00018A02: 76 70 63 6D 70 6E 6C 65 75 64 06                       db 'vpcmpnleud',6
00018A0D: 8B D5                                                  dw avx512_cmp_ud_instruction-instruction_handler
00018A0F: 76 70 63 6D 70 6E 6C 65 75 71 06                       db 'vpcmpnleuq',6
00018A1A: 7E D5                                                  dw avx512_cmp_uq_instruction-instruction_handler
00018A1C: 76 70 63 6D 70 6E 6C 65 75 77 06                       db 'vpcmpnleuw',6
00018A27: A4 D5                                                  dw avx512_cmp_uw_instruction-instruction_handler
00018A29: 76 70 63 6D 70 6E 6C 74 75 62 05                       db 'vpcmpnltub',5
00018A34: AB D5                                                  dw avx512_cmp_ub_instruction-instruction_handler
00018A36: 76 70 63 6D 70 6E 6C 74 75 64 05                       db 'vpcmpnltud',5
00018A41: 8B D5                                                  dw avx512_cmp_ud_instruction-instruction_handler
00018A43: 76 70 63 6D 70 6E 6C 74 75 71 05                       db 'vpcmpnltuq',5
00018A4E: 7E D5                                                  dw avx512_cmp_uq_instruction-instruction_handler
00018A50: 76 70 63 6D 70 6E 6C 74 75 77 05                       db 'vpcmpnltuw',5
00018A5B: A4 D5                                                  dw avx512_cmp_uw_instruction-instruction_handler
00018A5D: 76 70 63 6F 6D 6E 65 71 75 62 05                       db 'vpcomnequb',5
00018A68: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
00018A6A: 76 70 63 6F 6D 6E 65 71 75 64 05                       db 'vpcomnequd',5
00018A75: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
00018A77: 76 70 63 6F 6D 6E 65 71 75 71 05                       db 'vpcomnequq',5
00018A82: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
00018A84: 76 70 63 6F 6D 6E 65 71 75 77 05                       db 'vpcomnequw',5
00018A8F: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
00018A91: 76 70 63 6F 6D 74 72 75 65 62 07                       db 'vpcomtrueb',7
00018A9C: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
00018A9E: 76 70 63 6F 6D 74 72 75 65 64 07                       db 'vpcomtrued',7
00018AA9: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
00018AAB: 76 70 63 6F 6D 74 72 75 65 71 07                       db 'vpcomtrueq',7
00018AB6: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
00018AB8: 76 70 63 6F 6D 74 72 75 65 77 07                       db 'vpcomtruew',7
00018AC3: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
00018AC5: 76 70 65 72 6D 32 66 31 32 38 06                       db 'vperm2f128',6
00018AD0: C5 D9                                                  dw avx_perm2f128_instruction-instruction_handler
00018AD2: 76 70 65 72 6D 32 69 31 32 38 46                       db 'vperm2i128',46h
00018ADD: C5 D9                                                  dw avx_perm2f128_instruction-instruction_handler
00018ADF: 76 70 65 72 6D 69 6C 32 70 64 49                       db 'vpermil2pd',49h
00018AEA: 20 DB                                                  dw vpermil2_instruction-instruction_handler
00018AEC: 76 70 65 72 6D 69 6C 32 70 73 48                       db 'vpermil2ps',48h
00018AF7: 20 DB                                                  dw vpermil2_instruction-instruction_handler
00018AF9: 76 70 67 61 74 68 65 72 64 64 90                       db 'vpgatherdd',90h
00018B04: 7C E9                                                  dw gather_ps_instruction-instruction_handler
00018B06: 76 70 67 61 74 68 65 72 64 71 90                       db 'vpgatherdq',90h
00018B11: 75 E9                                                  dw gather_pd_instruction-instruction_handler
00018B13: 76 70 67 61 74 68 65 72 71 64 91                       db 'vpgatherqd',91h
00018B1E: 7C E9                                                  dw gather_ps_instruction-instruction_handler
00018B20: 76 70 67 61 74 68 65 72 71 71 91                       db 'vpgatherqq',91h
00018B2B: 75 E9                                                  dw gather_pd_instruction-instruction_handler
00018B2D: 76 70 6D 61 63 73 73 64 71 68 8F                       db 'vpmacssdqh',8Fh
00018B38: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
00018B3A: 76 70 6D 61 63 73 73 64 71 6C 87                       db 'vpmacssdql',87h
00018B45: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
00018B47: 76 70 6D 61 64 63 73 73 77 64 A6                       db 'vpmadcsswd',0A6h
00018B52: 60 EF                                                  dw xop_triple_source_128bit_instruction-instruction_handler
00018B54: 76 70 6D 61 64 64 75 62 73 77 04                       db 'vpmaddubsw',4
00018B5F: 32 C8                                                  dw avx_bw_instruction_38-instruction_handler
00018B61: 76 70 6D 61 73 6B 6D 6F 76 64 8C                       db 'vpmaskmovd',8Ch
00018B6C: F8 E7                                                  dw avx_maskmov_instruction-instruction_handler
00018B6E: 76 70 6D 61 73 6B 6D 6F 76 71 8C                       db 'vpmaskmovq',8Ch
00018B79: F1 E7                                                  dw avx_maskmov_w1_instruction-instruction_handler
00018B7B: 76 70 74 65 72 6E 6C 6F 67 64 25                       db 'vpternlogd',25h
00018B86: DB C7                                                  dw avx_d_instruction_3a_imm8_evex-instruction_handler
00018B88: 76 70 74 65 72 6E 6C 6F 67 71 25                       db 'vpternlogq',25h
00018B93: 88 C7                                                  dw avx_q_instruction_3a_imm8_evex-instruction_handler
00018B95: 76 70 75 6E 70 63 6B 68 62 77 68                       db 'vpunpckhbw',68h
00018BA0: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00018BA2: 76 70 75 6E 70 63 6B 68 64 71 6A                       db 'vpunpckhdq',6Ah
00018BAD: 09 C8                                                  dw avx_d_instruction-instruction_handler
00018BAF: 76 70 75 6E 70 63 6B 68 77 64 69                       db 'vpunpckhwd',69h
00018BBA: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00018BBC: 76 70 75 6E 70 63 6B 6C 62 77 60                       db 'vpunpcklbw',60h
00018BC7: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00018BC9: 76 70 75 6E 70 63 6B 6C 64 71 62                       db 'vpunpckldq',62h
00018BD4: 09 C8                                                  dw avx_d_instruction-instruction_handler
00018BD6: 76 70 75 6E 70 63 6B 6C 77 64 61                       db 'vpunpcklwd',61h
00018BE1: 39 C8                                                  dw avx_bw_instruction-instruction_handler
00018BE3: 76 72 73 71 72 74 31 34 70 64 4E                       db 'vrsqrt14pd',4Eh
00018BEE: 1D D4                                                  dw avx512_single_source_pd_instruction-instruction_handler
00018BF0: 76 72 73 71 72 74 31 34 70 73 4E                       db 'vrsqrt14ps',4Eh
00018BFB: 41 D4                                                  dw avx512_single_source_ps_instruction-instruction_handler
00018BFD: 76 72 73 71 72 74 31 34 73 64 4F                       db 'vrsqrt14sd',4Fh
00018C08: 5C D4                                                  dw avx512_sd_instruction-instruction_handler
00018C0A: 76 72 73 71 72 74 31 34 73 73 4F                       db 'vrsqrt14ss',4Fh
00018C15: 77 D4                                                  dw avx512_ss_instruction-instruction_handler
00018C17: 76 72 73 71 72 74 32 38 70 64 CC                       db 'vrsqrt28pd',0CCh
00018C22: 95 D4                                                  dw avx512_exp2pd_instruction-instruction_handler
00018C24: 76 72 73 71 72 74 32 38 70 73 CC                       db 'vrsqrt28ps',0CCh
00018C2F: A9 D4                                                  dw avx512_exp2ps_instruction-instruction_handler
00018C31: 76 72 73 71 72 74 32 38 73 64 CD                       db 'vrsqrt28sd',0CDh
00018C3C: 55 D4                                                  dw avx512_sd_instruction_sae-instruction_handler
00018C3E: 76 72 73 71 72 74 32 38 73 73 CD                       db 'vrsqrt28ss',0CDh
00018C49: 70 D4                                                  dw avx512_ss_instruction_sae-instruction_handler
00018C4B: 76 73 68 75 66 66 33 32 78 34 23                       db 'vshuff32x4',23h
00018C56: EB D9                                                  dw avx512_shuf_d_instruction-instruction_handler
00018C58: 76 73 68 75 66 66 36 34 78 32 23                       db 'vshuff64x2',23h
00018C63: D9 D9                                                  dw avx512_shuf_q_instruction-instruction_handler
00018C65: 76 73 68 75 66 69 33 32 78 34 43                       db 'vshufi32x4',43h
00018C70: EB D9                                                  dw avx512_shuf_d_instruction-instruction_handler
00018C72: 76 73 68 75 66 69 36 34 78 32 43                       db 'vshufi64x2',43h
00018C7D: D9 D9                                                  dw avx512_shuf_q_instruction-instruction_handler
00018C7F: 76 7A 65 72 6F 75 70 70 65 72 77                       db 'vzeroupper',77h
00018C8A: 9C D9                                                  dw vzeroupper_instruction-instruction_handler
00018C8C: 78 73 61 76 65 6F 70 74 36 34 06                       db 'xsaveopt64',110b
00018C97: 0A AE                                                  dw fxsave_instruction_64bit-instruction_handler
                                                                instructions_11:
00018C99: 70 63 6C 6D 75 6C 68 71 68 64 71 11                    db 'pclmulhqhdq',10001b
00018CA5: 12 AA                                                  dw pclmulqdq_instruction-instruction_handler
00018CA7: 70 63 6C 6D 75 6C 6C 71 68 64 71 10                    db 'pclmullqhdq',10000b
00018CB3: 12 AA                                                  dw pclmulqdq_instruction-instruction_handler
00018CB5: 70 72 65 66 65 74 63 68 6E 74 61 00                    db 'prefetchnta',0
00018CC1: 6B AE                                                  dw prefetch_instruction-instruction_handler
00018CC3: 70 72 65 66 65 74 63 68 77 74 31 02                    db 'prefetchwt1',2
00018CCF: A3 AE                                                  dw amd_prefetch_instruction-instruction_handler
00018CD1: 73 61 76 65 70 72 65 76 73 73 70 EA                    db 'saveprevssp',0EAh
00018CDD: B3 BB                                                  dw setssbsy_instruction-instruction_handler
00018CDF: 73 68 61 32 35 36 72 6E 64 73 32 CB                    db 'sha256rnds2',0CBh
00018CEB: A5 A9                                                  dw sse4_instruction_38_xmm0-instruction_handler
00018CED: 76 61 65 73 64 65 63 6C 61 73 74 DF                    db 'vaesdeclast',0DFh
00018CF9: A5 D3                                                  dw avx_instruction_38_nomask-instruction_handler
00018CFB: 76 61 65 73 65 6E 63 6C 61 73 74 DD                    db 'vaesenclast',0DDh
00018D07: A5 D3                                                  dw avx_instruction_38_nomask-instruction_handler
00018D09: 76 63 6D 70 65 71 5F 6F 73 70 64 10                    db 'vcmpeq_ospd',10h
00018D15: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018D17: 76 63 6D 70 65 71 5F 6F 73 70 73 10                    db 'vcmpeq_osps',10h
00018D23: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018D25: 76 63 6D 70 65 71 5F 6F 73 73 64 10                    db 'vcmpeq_ossd',10h
00018D31: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018D33: 76 63 6D 70 65 71 5F 6F 73 73 73 10                    db 'vcmpeq_osss',10h
00018D3F: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018D41: 76 63 6D 70 65 71 5F 75 71 70 64 08                    db 'vcmpeq_uqpd',8
00018D4D: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018D4F: 76 63 6D 70 65 71 5F 75 71 70 73 08                    db 'vcmpeq_uqps',8
00018D5B: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018D5D: 76 63 6D 70 65 71 5F 75 71 73 64 08                    db 'vcmpeq_uqsd',8
00018D69: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018D6B: 76 63 6D 70 65 71 5F 75 71 73 73 08                    db 'vcmpeq_uqss',8
00018D77: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018D79: 76 63 6D 70 65 71 5F 75 73 70 64 18                    db 'vcmpeq_uspd',18h
00018D85: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018D87: 76 63 6D 70 65 71 5F 75 73 70 73 18                    db 'vcmpeq_usps',18h
00018D93: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018D95: 76 63 6D 70 65 71 5F 75 73 73 64 18                    db 'vcmpeq_ussd',18h
00018DA1: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018DA3: 76 63 6D 70 65 71 5F 75 73 73 73 18                    db 'vcmpeq_usss',18h
00018DAF: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018DB1: 76 63 6D 70 66 61 6C 73 65 70 64 0B                    db 'vcmpfalsepd',0Bh
00018DBD: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018DBF: 76 63 6D 70 66 61 6C 73 65 70 73 0B                    db 'vcmpfalseps',0Bh
00018DCB: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018DCD: 76 63 6D 70 66 61 6C 73 65 73 64 0B                    db 'vcmpfalsesd',0Bh
00018DD9: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018DDB: 76 63 6D 70 66 61 6C 73 65 73 73 0B                    db 'vcmpfalsess',0Bh
00018DE7: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018DE9: 76 63 6D 70 67 65 5F 6F 71 70 64 1D                    db 'vcmpge_oqpd',1Dh
00018DF5: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018DF7: 76 63 6D 70 67 65 5F 6F 71 70 73 1D                    db 'vcmpge_oqps',1Dh
00018E03: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018E05: 76 63 6D 70 67 65 5F 6F 71 73 64 1D                    db 'vcmpge_oqsd',1Dh
00018E11: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018E13: 76 63 6D 70 67 65 5F 6F 71 73 73 1D                    db 'vcmpge_oqss',1Dh
00018E1F: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018E21: 76 63 6D 70 67 74 5F 6F 71 70 64 1E                    db 'vcmpgt_oqpd',1Eh
00018E2D: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018E2F: 76 63 6D 70 67 74 5F 6F 71 70 73 1E                    db 'vcmpgt_oqps',1Eh
00018E3B: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018E3D: 76 63 6D 70 67 74 5F 6F 71 73 64 1E                    db 'vcmpgt_oqsd',1Eh
00018E49: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018E4B: 76 63 6D 70 67 74 5F 6F 71 73 73 1E                    db 'vcmpgt_oqss',1Eh
00018E57: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018E59: 76 63 6D 70 6C 65 5F 6F 71 70 64 12                    db 'vcmple_oqpd',12h
00018E65: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018E67: 76 63 6D 70 6C 65 5F 6F 71 70 73 12                    db 'vcmple_oqps',12h
00018E73: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018E75: 76 63 6D 70 6C 65 5F 6F 71 73 64 12                    db 'vcmple_oqsd',12h
00018E81: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018E83: 76 63 6D 70 6C 65 5F 6F 71 73 73 12                    db 'vcmple_oqss',12h
00018E8F: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018E91: 76 63 6D 70 6C 74 5F 6F 71 70 64 11                    db 'vcmplt_oqpd',11h
00018E9D: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018E9F: 76 63 6D 70 6C 74 5F 6F 71 70 73 11                    db 'vcmplt_oqps',11h
00018EAB: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018EAD: 76 63 6D 70 6C 74 5F 6F 71 73 64 11                    db 'vcmplt_oqsd',11h
00018EB9: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018EBB: 76 63 6D 70 6C 74 5F 6F 71 73 73 11                    db 'vcmplt_oqss',11h
00018EC7: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018EC9: 76 63 6D 70 6F 72 64 5F 73 70 64 17                    db 'vcmpord_spd',17h
00018ED5: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018ED7: 76 63 6D 70 6F 72 64 5F 73 70 73 17                    db 'vcmpord_sps',17h
00018EE3: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018EE5: 76 63 6D 70 6F 72 64 5F 73 73 64 17                    db 'vcmpord_ssd',17h
00018EF1: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018EF3: 76 63 6D 70 6F 72 64 5F 73 73 73 17                    db 'vcmpord_sss',17h
00018EFF: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018F01: 76 63 6D 70 75 6E 6F 72 64 70 64 03                    db 'vcmpunordpd',3
00018F0D: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00018F0F: 76 63 6D 70 75 6E 6F 72 64 70 73 03                    db 'vcmpunordps',3
00018F1B: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00018F1D: 76 63 6D 70 75 6E 6F 72 64 73 64 03                    db 'vcmpunordsd',3
00018F29: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00018F2B: 76 63 6D 70 75 6E 6F 72 64 73 73 03                    db 'vcmpunordss',3
00018F37: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00018F39: 76 63 6F 6D 70 72 65 73 73 70 64 8A                    db 'vcompresspd',8Ah
00018F45: 8A CD                                                  dw avx_compress_q_instruction-instruction_handler
00018F47: 76 63 6F 6D 70 72 65 73 73 70 73 8A                    db 'vcompressps',8Ah
00018F53: 91 CD                                                  dw avx_compress_d_instruction-instruction_handler
00018F55: 76 63 76 74 74 70 64 32 75 64 71 78                    db 'vcvttpd2udq',78h
00018F61: 9E E4                                                  dw avx_cvttpd2udq_instruction-instruction_handler
00018F63: 76 63 76 74 74 70 64 32 75 71 71 78                    db 'vcvttpd2uqq',78h
00018F6F: 5B C6                                                  dw avx_single_source_pd_instruction_sae_evex-instruction_handler
00018F71: 76 63 76 74 74 70 73 32 75 64 71 78                    db 'vcvttps2udq',78h
00018F7D: 65 E5                                                  dw avx_cvttps2udq_instruction-instruction_handler
00018F7F: 76 63 76 74 74 70 73 32 75 71 71 78                    db 'vcvttps2uqq',78h
00018F8B: CA E3                                                  dw avx_cvttps2qq_instruction-instruction_handler
00018F8D: 76 63 76 74 74 73 64 32 75 73 69 78                    db 'vcvttsd2usi',78h
00018F99: 56 E6                                                  dw avx_cvttsd2usi_instruction-instruction_handler
00018F9B: 76 63 76 74 74 73 73 32 75 73 69 78                    db 'vcvttss2usi',78h
00018FA7: 73 E6                                                  dw avx_cvttss2usi_instruction-instruction_handler
00018FA9: 76 66 69 78 75 70 69 6D 6D 70 64 54                    db 'vfixupimmpd',54h
00018FB5: BA D3                                                  dw avx512_pd_instruction_sae_imm8-instruction_handler
00018FB7: 76 66 69 78 75 70 69 6D 6D 70 73 54                    db 'vfixupimmps',54h
00018FC3: CE D3                                                  dw avx512_ps_instruction_sae_imm8-instruction_handler
00018FC5: 76 66 69 78 75 70 69 6D 6D 73 64 55                    db 'vfixupimmsd',55h
00018FD1: D4 D3                                                  dw avx512_sd_instruction_sae_imm8-instruction_handler
00018FD3: 76 66 69 78 75 70 69 6D 6D 73 73 55                    db 'vfixupimmss',55h
00018FDF: E1 D3                                                  dw avx512_ss_instruction_sae_imm8-instruction_handler
00018FE1: 76 66 6D 61 64 64 31 33 32 70 64 98                    db 'vfmadd132pd',98h
00018FED: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00018FEF: 76 66 6D 61 64 64 31 33 32 70 73 98                    db 'vfmadd132ps',98h
00018FFB: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00018FFD: 76 66 6D 61 64 64 31 33 32 73 64 99                    db 'vfmadd132sd',99h
00019009: C9 D4                                                  dw fma_instruction_sd-instruction_handler
0001900B: 76 66 6D 61 64 64 31 33 32 73 73 99                    db 'vfmadd132ss',99h
00019017: D6 D4                                                  dw fma_instruction_ss-instruction_handler
00019019: 76 66 6D 61 64 64 32 31 33 70 64 A8                    db 'vfmadd213pd',0A8h
00019025: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019027: 76 66 6D 61 64 64 32 31 33 70 73 A8                    db 'vfmadd213ps',0A8h
00019033: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019035: 76 66 6D 61 64 64 32 31 33 73 64 A9                    db 'vfmadd213sd',0A9h
00019041: C9 D4                                                  dw fma_instruction_sd-instruction_handler
00019043: 76 66 6D 61 64 64 32 31 33 73 73 A9                    db 'vfmadd213ss',0A9h
0001904F: D6 D4                                                  dw fma_instruction_ss-instruction_handler
00019051: 76 66 6D 61 64 64 32 33 31 70 64 B8                    db 'vfmadd231pd',0B8h
0001905D: B6 D4                                                  dw fma_instruction_pd-instruction_handler
0001905F: 76 66 6D 61 64 64 32 33 31 70 73 B8                    db 'vfmadd231ps',0B8h
0001906B: C3 D4                                                  dw fma_instruction_ps-instruction_handler
0001906D: 76 66 6D 61 64 64 32 33 31 73 64 B9                    db 'vfmadd231sd',0B9h
00019079: C9 D4                                                  dw fma_instruction_sd-instruction_handler
0001907B: 76 66 6D 61 64 64 32 33 31 73 73 B9                    db 'vfmadd231ss',0B9h
00019087: D6 D4                                                  dw fma_instruction_ss-instruction_handler
00019089: 76 66 6D 61 64 64 73 75 62 70 64 5D                    db 'vfmaddsubpd',5Dh
00019095: F4 D4                                                  dw fma4_instruction_p-instruction_handler
00019097: 76 66 6D 61 64 64 73 75 62 70 73 5C                    db 'vfmaddsubps',5Ch
000190A3: F4 D4                                                  dw fma4_instruction_p-instruction_handler
000190A5: 76 66 6D 73 75 62 31 33 32 70 64 9A                    db 'vfmsub132pd',9Ah
000190B1: B6 D4                                                  dw fma_instruction_pd-instruction_handler
000190B3: 76 66 6D 73 75 62 31 33 32 70 73 9A                    db 'vfmsub132ps',9Ah
000190BF: C3 D4                                                  dw fma_instruction_ps-instruction_handler
000190C1: 76 66 6D 73 75 62 31 33 32 73 64 9B                    db 'vfmsub132sd',9Bh
000190CD: C9 D4                                                  dw fma_instruction_sd-instruction_handler
000190CF: 76 66 6D 73 75 62 31 33 32 73 73 9B                    db 'vfmsub132ss',9Bh
000190DB: D6 D4                                                  dw fma_instruction_ss-instruction_handler
000190DD: 76 66 6D 73 75 62 32 31 33 70 64 AA                    db 'vfmsub213pd',0AAh
000190E9: B6 D4                                                  dw fma_instruction_pd-instruction_handler
000190EB: 76 66 6D 73 75 62 32 31 33 70 73 AA                    db 'vfmsub213ps',0AAh
000190F7: C3 D4                                                  dw fma_instruction_ps-instruction_handler
000190F9: 76 66 6D 73 75 62 32 31 33 73 64 AB                    db 'vfmsub213sd',0ABh
00019105: C9 D4                                                  dw fma_instruction_sd-instruction_handler
00019107: 76 66 6D 73 75 62 32 31 33 73 73 AB                    db 'vfmsub213ss',0ABh
00019113: D6 D4                                                  dw fma_instruction_ss-instruction_handler
00019115: 76 66 6D 73 75 62 32 33 31 70 64 BA                    db 'vfmsub231pd',0BAh
00019121: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019123: 76 66 6D 73 75 62 32 33 31 70 73 BA                    db 'vfmsub231ps',0BAh
0001912F: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019131: 76 66 6D 73 75 62 32 33 31 73 64 BB                    db 'vfmsub231sd',0BBh
0001913D: C9 D4                                                  dw fma_instruction_sd-instruction_handler
0001913F: 76 66 6D 73 75 62 32 33 31 73 73 BB                    db 'vfmsub231ss',0BBh
0001914B: D6 D4                                                  dw fma_instruction_ss-instruction_handler
0001914D: 76 66 6D 73 75 62 61 64 64 70 64 5F                    db 'vfmsubaddpd',5Fh
00019159: F4 D4                                                  dw fma4_instruction_p-instruction_handler
0001915B: 76 66 6D 73 75 62 61 64 64 70 73 5E                    db 'vfmsubaddps',5Eh
00019167: F4 D4                                                  dw fma4_instruction_p-instruction_handler
00019169: 76 69 6E 73 65 72 74 66 31 32 38 18                    db 'vinsertf128',18h
00019175: 7A E1                                                  dw avx_insertf128_instruction-instruction_handler
00019177: 76 69 6E 73 65 72 74 69 31 32 38 38                    db 'vinserti128',38h
00019183: 7A E1                                                  dw avx_insertf128_instruction-instruction_handler
00019185: 76 6D 61 73 6B 6D 6F 76 64 71 75 00                    db 'vmaskmovdqu',0
00019191: FF E8                                                  dw avx_maskmovdqu_instruction-instruction_handler
00019193: 76 70 63 6F 6D 66 61 6C 73 65 62 06                    db 'vpcomfalseb',6
0001919F: 9D EF                                                  dw xop_pcom_b_instruction-instruction_handler
000191A1: 76 70 63 6F 6D 66 61 6C 73 65 64 06                    db 'vpcomfalsed',6
000191AD: A1 EF                                                  dw xop_pcom_d_instruction-instruction_handler
000191AF: 76 70 63 6F 6D 66 61 6C 73 65 71 06                    db 'vpcomfalseq',6
000191BB: A5 EF                                                  dw xop_pcom_q_instruction-instruction_handler
000191BD: 76 70 63 6F 6D 66 61 6C 73 65 77 06                    db 'vpcomfalsew',6
000191C9: A9 EF                                                  dw xop_pcom_w_instruction-instruction_handler
000191CB: 76 70 63 6F 6D 70 72 65 73 73 62 63                    db 'vpcompressb',63h
000191D7: 91 CD                                                  dw avx_compress_d_instruction-instruction_handler
000191D9: 76 70 63 6F 6D 70 72 65 73 73 64 8B                    db 'vpcompressd',8Bh
000191E5: 91 CD                                                  dw avx_compress_d_instruction-instruction_handler
000191E7: 76 70 63 6F 6D 70 72 65 73 73 71 8B                    db 'vpcompressq',8Bh
000191F3: 8A CD                                                  dw avx_compress_q_instruction-instruction_handler
000191F5: 76 70 63 6F 6D 70 72 65 73 73 77 63                    db 'vpcompressw',63h
00019201: 8A CD                                                  dw avx_compress_q_instruction-instruction_handler
00019203: 76 70 63 6F 6D 74 72 75 65 75 62 07                    db 'vpcomtrueub',7
0001920F: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
00019211: 76 70 63 6F 6D 74 72 75 65 75 64 07                    db 'vpcomtrueud',7
0001921D: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
0001921F: 76 70 63 6F 6D 74 72 75 65 75 71 07                    db 'vpcomtrueuq',7
0001922B: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
0001922D: 76 70 63 6F 6D 74 72 75 65 75 77 07                    db 'vpcomtrueuw',7
00019239: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
0001923B: 76 70 63 6F 6E 66 6C 69 63 74 64 C4                    db 'vpconflictd',0C4h
00019247: BB C7                                                  dw avx_single_source_d_instruction_38_evex-instruction_handler
00019249: 76 70 63 6F 6E 66 6C 69 63 74 71 C4                    db 'vpconflictq',0C4h
00019255: 58 C7                                                  dw avx_single_source_q_instruction_38_evex-instruction_handler
00019257: 76 70 68 6D 69 6E 70 6F 73 75 77 41                    db 'vphminposuw',41h
00019263: 0D D3                                                  dw avx_single_source_instruction_38_noevex-instruction_handler
00019265: 76 70 6D 61 64 64 35 32 68 75 71 B5                    db 'vpmadd52huq',0B5h
00019271: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00019273: 76 70 6D 61 64 64 35 32 6C 75 71 B4                    db 'vpmadd52luq',0B4h
0001927F: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00019281: 76 70 73 63 61 74 74 65 72 64 64 A0                    db 'vpscatterdd',0A0h
0001928D: CD EA                                                  dw scatter_ps_instruction-instruction_handler
0001928F: 76 70 73 63 61 74 74 65 72 64 71 A0                    db 'vpscatterdq',0A0h
0001929B: C6 EA                                                  dw scatter_pd_instruction-instruction_handler
0001929D: 76 70 73 63 61 74 74 65 72 71 64 A1                    db 'vpscatterqd',0A1h
000192A9: CD EA                                                  dw scatter_ps_instruction-instruction_handler
000192AB: 76 70 73 63 61 74 74 65 72 71 71 A1                    db 'vpscatterqq',0A1h
000192B7: C6 EA                                                  dw scatter_pd_instruction-instruction_handler
000192B9: 76 70 75 6E 70 63 6B 68 71 64 71 6D                    db 'vpunpckhqdq',6Dh
000192C5: A6 C7                                                  dw avx_q_instruction-instruction_handler
000192C7: 76 70 75 6E 70 63 6B 6C 71 64 71 6C                    db 'vpunpcklqdq',6Ch
000192D3: A6 C7                                                  dw avx_q_instruction-instruction_handler
000192D5: 76 72 6E 64 73 63 61 6C 65 70 64 09                    db 'vrndscalepd',9
000192E1: B3 D3                                                  dw avx512_single_source_pd_instruction_sae_imm8-instruction_handler
000192E3: 76 72 6E 64 73 63 61 6C 65 70 73 08                    db 'vrndscaleps',8
000192EF: C7 D3                                                  dw avx512_single_source_ps_instruction_sae_imm8-instruction_handler
000192F1: 76 72 6E 64 73 63 61 6C 65 73 64 0B                    db 'vrndscalesd',0Bh
000192FD: D4 D3                                                  dw avx512_sd_instruction_sae_imm8-instruction_handler
000192FF: 76 72 6E 64 73 63 61 6C 65 73 73 0A                    db 'vrndscaless',0Ah
0001930B: E1 D3                                                  dw avx512_ss_instruction_sae_imm8-instruction_handler
0001930D: 76 73 63 61 74 74 65 72 64 70 64 A2                    db 'vscatterdpd',0A2h
00019319: C6 EA                                                  dw scatter_pd_instruction-instruction_handler
0001931B: 76 73 63 61 74 74 65 72 64 70 73 A2                    db 'vscatterdps',0A2h
00019327: CD EA                                                  dw scatter_ps_instruction-instruction_handler
00019329: 76 73 63 61 74 74 65 72 71 70 64 A3                    db 'vscatterqpd',0A3h
00019335: C6 EA                                                  dw scatter_pd_instruction-instruction_handler
00019337: 76 73 63 61 74 74 65 72 71 70 73 A3                    db 'vscatterqps',0A3h
00019343: CD EA                                                  dw scatter_ps_instruction-instruction_handler
                                                                instructions_12:
00019345: 70 63 6C 6D 75 6C 68 71 68 71 64 71 11                 db 'pclmulhqhqdq',10001b
00019352: 12 AA                                                  dw pclmulqdq_instruction-instruction_handler
00019354: 70 63 6C 6D 75 6C 68 71 6C 71 64 71 01                 db 'pclmulhqlqdq',1
00019361: 12 AA                                                  dw pclmulqdq_instruction-instruction_handler
00019363: 70 63 6C 6D 75 6C 6C 71 68 71 64 71 10                 db 'pclmullqhqdq',10000b
00019370: 12 AA                                                  dw pclmulqdq_instruction-instruction_handler
00019372: 70 63 6C 6D 75 6C 6C 71 6C 71 64 71 00                 db 'pclmullqlqdq',0
0001937F: 12 AA                                                  dw pclmulqdq_instruction-instruction_handler
00019381: 76 62 72 6F 61 64 63 61 73 74 73 64 19                 db 'vbroadcastsd',19h
0001938E: F6 DE                                                  dw avx_broadcastsd_instruction-instruction_handler
00019390: 76 62 72 6F 61 64 63 61 73 74 73 73 18                 db 'vbroadcastss',18h
0001939D: F2 DE                                                  dw avx_broadcastss_instruction-instruction_handler
0001939F: 76 63 6D 70 6E 65 71 5F 6F 71 70 64 0C                 db 'vcmpneq_oqpd',0Ch
000193AC: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
000193AE: 76 63 6D 70 6E 65 71 5F 6F 71 70 73 0C                 db 'vcmpneq_oqps',0Ch
000193BB: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
000193BD: 76 63 6D 70 6E 65 71 5F 6F 71 73 64 0C                 db 'vcmpneq_oqsd',0Ch
000193CA: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
000193CC: 76 63 6D 70 6E 65 71 5F 6F 71 73 73 0C                 db 'vcmpneq_oqss',0Ch
000193D9: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
000193DB: 76 63 6D 70 6E 65 71 5F 6F 73 70 64 1C                 db 'vcmpneq_ospd',1Ch
000193E8: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
000193EA: 76 63 6D 70 6E 65 71 5F 6F 73 70 73 1C                 db 'vcmpneq_osps',1Ch
000193F7: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
000193F9: 76 63 6D 70 6E 65 71 5F 6F 73 73 64 1C                 db 'vcmpneq_ossd',1Ch
00019406: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00019408: 76 63 6D 70 6E 65 71 5F 6F 73 73 73 1C                 db 'vcmpneq_osss',1Ch
00019415: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00019417: 76 63 6D 70 6E 65 71 5F 75 73 70 64 14                 db 'vcmpneq_uspd',14h
00019424: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00019426: 76 63 6D 70 6E 65 71 5F 75 73 70 73 14                 db 'vcmpneq_usps',14h
00019433: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00019435: 76 63 6D 70 6E 65 71 5F 75 73 73 64 14                 db 'vcmpneq_ussd',14h
00019442: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00019444: 76 63 6D 70 6E 65 71 5F 75 73 73 73 14                 db 'vcmpneq_usss',14h
00019451: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00019453: 76 63 6D 70 6E 67 65 5F 75 71 70 64 19                 db 'vcmpnge_uqpd',19h
00019460: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00019462: 76 63 6D 70 6E 67 65 5F 75 71 70 73 19                 db 'vcmpnge_uqps',19h
0001946F: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00019471: 76 63 6D 70 6E 67 65 5F 75 71 73 64 19                 db 'vcmpnge_uqsd',19h
0001947E: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00019480: 76 63 6D 70 6E 67 65 5F 75 71 73 73 19                 db 'vcmpnge_uqss',19h
0001948D: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
0001948F: 76 63 6D 70 6E 67 74 5F 75 71 70 64 1A                 db 'vcmpngt_uqpd',1Ah
0001949C: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
0001949E: 76 63 6D 70 6E 67 74 5F 75 71 70 73 1A                 db 'vcmpngt_uqps',1Ah
000194AB: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
000194AD: 76 63 6D 70 6E 67 74 5F 75 71 73 64 1A                 db 'vcmpngt_uqsd',1Ah
000194BA: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
000194BC: 76 63 6D 70 6E 67 74 5F 75 71 73 73 1A                 db 'vcmpngt_uqss',1Ah
000194C9: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
000194CB: 76 63 6D 70 6E 6C 65 5F 75 71 70 64 16                 db 'vcmpnle_uqpd',16h
000194D8: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
000194DA: 76 63 6D 70 6E 6C 65 5F 75 71 70 73 16                 db 'vcmpnle_uqps',16h
000194E7: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
000194E9: 76 63 6D 70 6E 6C 65 5F 75 71 73 64 16                 db 'vcmpnle_uqsd',16h
000194F6: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
000194F8: 76 63 6D 70 6E 6C 65 5F 75 71 73 73 16                 db 'vcmpnle_uqss',16h
00019505: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00019507: 76 63 6D 70 6E 6C 74 5F 75 71 70 64 15                 db 'vcmpnlt_uqpd',15h
00019514: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00019516: 76 63 6D 70 6E 6C 74 5F 75 71 70 73 15                 db 'vcmpnlt_uqps',15h
00019523: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00019525: 76 63 6D 70 6E 6C 74 5F 75 71 73 64 15                 db 'vcmpnlt_uqsd',15h
00019532: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00019534: 76 63 6D 70 6E 6C 74 5F 75 71 73 73 15                 db 'vcmpnlt_uqss',15h
00019541: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00019543: 76 65 78 74 72 61 63 74 66 31 32 38 19                 db 'vextractf128',19h
00019550: A6 E0                                                  dw avx_extractf128_instruction-instruction_handler
00019552: 76 65 78 74 72 61 63 74 69 31 32 38 39                 db 'vextracti128',39h
0001955F: A6 E0                                                  dw avx_extractf128_instruction-instruction_handler
00019561: 76 66 6E 6D 61 64 64 31 33 32 70 64 9C                 db 'vfnmadd132pd',9Ch
0001956E: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019570: 76 66 6E 6D 61 64 64 31 33 32 70 73 9C                 db 'vfnmadd132ps',9Ch
0001957D: C3 D4                                                  dw fma_instruction_ps-instruction_handler
0001957F: 76 66 6E 6D 61 64 64 31 33 32 73 64 9D                 db 'vfnmadd132sd',9Dh
0001958C: C9 D4                                                  dw fma_instruction_sd-instruction_handler
0001958E: 76 66 6E 6D 61 64 64 31 33 32 73 73 9D                 db 'vfnmadd132ss',9Dh
0001959B: D6 D4                                                  dw fma_instruction_ss-instruction_handler
0001959D: 76 66 6E 6D 61 64 64 32 31 33 70 64 AC                 db 'vfnmadd213pd',0ACh
000195AA: B6 D4                                                  dw fma_instruction_pd-instruction_handler
000195AC: 76 66 6E 6D 61 64 64 32 31 33 70 73 AC                 db 'vfnmadd213ps',0ACh
000195B9: C3 D4                                                  dw fma_instruction_ps-instruction_handler
000195BB: 76 66 6E 6D 61 64 64 32 31 33 73 64 AD                 db 'vfnmadd213sd',0ADh
000195C8: C9 D4                                                  dw fma_instruction_sd-instruction_handler
000195CA: 76 66 6E 6D 61 64 64 32 31 33 73 73 AD                 db 'vfnmadd213ss',0ADh
000195D7: D6 D4                                                  dw fma_instruction_ss-instruction_handler
000195D9: 76 66 6E 6D 61 64 64 32 33 31 70 64 BC                 db 'vfnmadd231pd',0BCh
000195E6: B6 D4                                                  dw fma_instruction_pd-instruction_handler
000195E8: 76 66 6E 6D 61 64 64 32 33 31 70 73 BC                 db 'vfnmadd231ps',0BCh
000195F5: C3 D4                                                  dw fma_instruction_ps-instruction_handler
000195F7: 76 66 6E 6D 61 64 64 32 33 31 73 64 BD                 db 'vfnmadd231sd',0BDh
00019604: C9 D4                                                  dw fma_instruction_sd-instruction_handler
00019606: 76 66 6E 6D 61 64 64 32 33 31 73 73 BD                 db 'vfnmadd231ss',0BDh
00019613: D6 D4                                                  dw fma_instruction_ss-instruction_handler
00019615: 76 66 6E 6D 73 75 62 31 33 32 70 64 9E                 db 'vfnmsub132pd',9Eh
00019622: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019624: 76 66 6E 6D 73 75 62 31 33 32 70 73 9E                 db 'vfnmsub132ps',9Eh
00019631: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019633: 76 66 6E 6D 73 75 62 31 33 32 73 64 9F                 db 'vfnmsub132sd',9Fh
00019640: C9 D4                                                  dw fma_instruction_sd-instruction_handler
00019642: 76 66 6E 6D 73 75 62 31 33 32 73 73 9F                 db 'vfnmsub132ss',9Fh
0001964F: D6 D4                                                  dw fma_instruction_ss-instruction_handler
00019651: 76 66 6E 6D 73 75 62 32 31 33 70 64 AE                 db 'vfnmsub213pd',0AEh
0001965E: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019660: 76 66 6E 6D 73 75 62 32 31 33 70 73 AE                 db 'vfnmsub213ps',0AEh
0001966D: C3 D4                                                  dw fma_instruction_ps-instruction_handler
0001966F: 76 66 6E 6D 73 75 62 32 31 33 73 64 AF                 db 'vfnmsub213sd',0AFh
0001967C: C9 D4                                                  dw fma_instruction_sd-instruction_handler
0001967E: 76 66 6E 6D 73 75 62 32 31 33 73 73 AF                 db 'vfnmsub213ss',0AFh
0001968B: D6 D4                                                  dw fma_instruction_ss-instruction_handler
0001968D: 76 66 6E 6D 73 75 62 32 33 31 70 64 BE                 db 'vfnmsub231pd',0BEh
0001969A: B6 D4                                                  dw fma_instruction_pd-instruction_handler
0001969C: 76 66 6E 6D 73 75 62 32 33 31 70 73 BE                 db 'vfnmsub231ps',0BEh
000196A9: C3 D4                                                  dw fma_instruction_ps-instruction_handler
000196AB: 76 66 6E 6D 73 75 62 32 33 31 73 64 BF                 db 'vfnmsub231sd',0BFh
000196B8: C9 D4                                                  dw fma_instruction_sd-instruction_handler
000196BA: 76 66 6E 6D 73 75 62 32 33 31 73 73 BF                 db 'vfnmsub231ss',0BFh
000196C7: D6 D4                                                  dw fma_instruction_ss-instruction_handler
000196C9: 76 69 6E 73 65 72 74 66 33 32 78 34 18                 db 'vinsertf32x4',18h
000196D6: 6F E1                                                  dw avx512_insert_32x4_instruction-instruction_handler
000196D8: 76 69 6E 73 65 72 74 66 33 32 78 38 1A                 db 'vinsertf32x8',1Ah
000196E5: 5D E1                                                  dw avx512_insert_32x8_instruction-instruction_handler
000196E7: 76 69 6E 73 65 72 74 66 36 34 78 32 18                 db 'vinsertf64x2',18h
000196F4: 68 E1                                                  dw avx512_insert_64x2_instruction-instruction_handler
000196F6: 76 69 6E 73 65 72 74 66 36 34 78 34 1A                 db 'vinsertf64x4',1Ah
00019703: 56 E1                                                  dw avx512_insert_64x4_instruction-instruction_handler
00019705: 76 69 6E 73 65 72 74 69 33 32 78 34 38                 db 'vinserti32x4',38h
00019712: 6F E1                                                  dw avx512_insert_32x4_instruction-instruction_handler
00019714: 76 69 6E 73 65 72 74 69 33 32 78 38 3A                 db 'vinserti32x8',3Ah
00019721: 5D E1                                                  dw avx512_insert_32x8_instruction-instruction_handler
00019723: 76 69 6E 73 65 72 74 69 36 34 78 32 38                 db 'vinserti64x2',38h
00019730: 68 E1                                                  dw avx512_insert_64x2_instruction-instruction_handler
00019732: 76 69 6E 73 65 72 74 69 36 34 78 34 3A                 db 'vinserti64x4',3Ah
0001973F: 56 E1                                                  dw avx512_insert_64x4_instruction-instruction_handler
00019741: 76 70 62 72 6F 61 64 63 61 73 74 62 78                 db 'vpbroadcastb',78h
0001974E: 01 DF                                                  dw avx_pbroadcastb_instruction-instruction_handler
00019750: 76 70 62 72 6F 61 64 63 61 73 74 64 58                 db 'vpbroadcastd',58h
0001975D: 09 DF                                                  dw avx_pbroadcastd_instruction-instruction_handler
0001975F: 76 70 62 72 6F 61 64 63 61 73 74 71 59                 db 'vpbroadcastq',59h
0001976C: 0D DF                                                  dw avx_pbroadcastq_instruction-instruction_handler
0001976E: 76 70 62 72 6F 61 64 63 61 73 74 77 79                 db 'vpbroadcastw',79h
0001977B: 05 DF                                                  dw avx_pbroadcastw_instruction-instruction_handler
0001977D: 76 70 63 6C 6D 75 6C 68 71 68 64 71 11                 db 'vpclmulhqhdq',10001b
0001978A: 8C D3                                                  dw avx_pclmulqdq_instruction-instruction_handler
0001978C: 76 70 63 6C 6D 75 6C 6C 71 68 64 71 10                 db 'vpclmullqhdq',10000b
00019799: 8C D3                                                  dw avx_pclmulqdq_instruction-instruction_handler
0001979B: 76 70 63 6F 6D 66 61 6C 73 65 75 62 06                 db 'vpcomfalseub',6
000197A8: AD EF                                                  dw xop_pcom_ub_instruction-instruction_handler
000197AA: 76 70 63 6F 6D 66 61 6C 73 65 75 64 06                 db 'vpcomfalseud',6
000197B7: B1 EF                                                  dw xop_pcom_ud_instruction-instruction_handler
000197B9: 76 70 63 6F 6D 66 61 6C 73 65 75 71 06                 db 'vpcomfalseuq',6
000197C6: B5 EF                                                  dw xop_pcom_uq_instruction-instruction_handler
000197C8: 76 70 63 6F 6D 66 61 6C 73 65 75 77 06                 db 'vpcomfalseuw',6
000197D5: B9 EF                                                  dw xop_pcom_uw_instruction-instruction_handler
000197D7: 76 70 65 72 6D 69 6C 6D 6F 32 70 64 02                 db 'vpermilmo2pd',10b
000197E4: 00 DB                                                  dw vpermil_2pd_instruction-instruction_handler
000197E6: 76 70 65 72 6D 69 6C 6D 6F 32 70 73 02                 db 'vpermilmo2ps',10b
000197F3: 10 DB                                                  dw vpermil_2ps_instruction-instruction_handler
000197F5: 76 70 65 72 6D 69 6C 6D 7A 32 70 64 03                 db 'vpermilmz2pd',11b
00019802: 00 DB                                                  dw vpermil_2pd_instruction-instruction_handler
00019804: 76 70 65 72 6D 69 6C 6D 7A 32 70 73 03                 db 'vpermilmz2ps',11b
00019811: 10 DB                                                  dw vpermil_2ps_instruction-instruction_handler
00019813: 76 70 65 72 6D 69 6C 74 64 32 70 64 00                 db 'vpermiltd2pd',0
00019820: 00 DB                                                  dw vpermil_2pd_instruction-instruction_handler
00019822: 76 70 65 72 6D 69 6C 74 64 32 70 73 00                 db 'vpermiltd2ps',0
0001982F: 10 DB                                                  dw vpermil_2ps_instruction-instruction_handler
00019831: 76 70 73 68 75 66 62 69 74 71 6D 62 8F                 db 'vpshufbitqmb',8Fh
0001983E: C5 D6                                                  dw avx512_ptestmb_instruction-instruction_handler
                                                                instructions_13:
00019840: 67 66 32 70 38 61 66 66 69 6E 65 71 62 CE              db 'gf2p8affineqb',0CEh
0001984E: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00019850: 76 63 6D 70 74 72 75 65 5F 75 73 70 64 1F              db 'vcmptrue_uspd',1Fh
0001985E: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00019860: 76 63 6D 70 74 72 75 65 5F 75 73 70 73 1F              db 'vcmptrue_usps',1Fh
0001986E: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00019870: 76 63 6D 70 74 72 75 65 5F 75 73 73 64 1F              db 'vcmptrue_ussd',1Fh
0001987E: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00019880: 76 63 6D 70 74 72 75 65 5F 75 73 73 73 1F              db 'vcmptrue_usss',1Fh
0001988E: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00019890: 76 63 6D 70 75 6E 6F 72 64 5F 73 70 64 13              db 'vcmpunord_spd',13h
0001989E: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
000198A0: 76 63 6D 70 75 6E 6F 72 64 5F 73 70 73 13              db 'vcmpunord_sps',13h
000198AE: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
000198B0: 76 63 6D 70 75 6E 6F 72 64 5F 73 73 64 13              db 'vcmpunord_ssd',13h
000198BE: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
000198C0: 76 63 6D 70 75 6E 6F 72 64 5F 73 73 73 13              db 'vcmpunord_sss',13h
000198CE: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
000198D0: 76 65 78 74 72 61 63 74 66 33 32 78 34 19              db 'vextractf32x4',19h
000198DE: 9B E0                                                  dw avx512_extract_32x4_instruction-instruction_handler
000198E0: 76 65 78 74 72 61 63 74 66 33 32 78 38 1B              db 'vextractf32x8',1Bh
000198EE: 89 E0                                                  dw avx512_extract_32x8_instruction-instruction_handler
000198F0: 76 65 78 74 72 61 63 74 66 36 34 78 32 19              db 'vextractf64x2',19h
000198FE: 94 E0                                                  dw avx512_extract_64x2_instruction-instruction_handler
00019900: 76 65 78 74 72 61 63 74 66 36 34 78 34 1B              db 'vextractf64x4',1Bh
0001990E: 82 E0                                                  dw avx512_extract_64x4_instruction-instruction_handler
00019910: 76 65 78 74 72 61 63 74 69 33 32 78 34 39              db 'vextracti32x4',39h
0001991E: 9B E0                                                  dw avx512_extract_32x4_instruction-instruction_handler
00019920: 76 65 78 74 72 61 63 74 69 33 32 78 38 3B              db 'vextracti32x8',3Bh
0001992E: 89 E0                                                  dw avx512_extract_32x8_instruction-instruction_handler
00019930: 76 65 78 74 72 61 63 74 69 36 34 78 32 39              db 'vextracti64x2',39h
0001993E: 94 E0                                                  dw avx512_extract_64x2_instruction-instruction_handler
00019940: 76 65 78 74 72 61 63 74 69 36 34 78 34 3B              db 'vextracti64x4',3Bh
0001994E: 82 E0                                                  dw avx512_extract_64x4_instruction-instruction_handler
00019950: 76 67 61 74 68 65 72 70 66 30 64 70 64 01              db 'vgatherpf0dpd',1
0001995E: 1E EB                                                  dw gatherpf_dpd_instruction-instruction_handler
00019960: 76 67 61 74 68 65 72 70 66 30 64 70 73 01              db 'vgatherpf0dps',1
0001996E: 2F EB                                                  dw gatherpf_dps_instruction-instruction_handler
00019970: 76 67 61 74 68 65 72 70 66 30 71 70 64 01              db 'vgatherpf0qpd',1
0001997E: 1A EB                                                  dw gatherpf_qpd_instruction-instruction_handler
00019980: 76 67 61 74 68 65 72 70 66 30 71 70 73 01              db 'vgatherpf0qps',1
0001998E: 2B EB                                                  dw gatherpf_qps_instruction-instruction_handler
00019990: 76 67 61 74 68 65 72 70 66 31 64 70 64 02              db 'vgatherpf1dpd',2
0001999E: 1E EB                                                  dw gatherpf_dpd_instruction-instruction_handler
000199A0: 76 67 61 74 68 65 72 70 66 31 64 70 73 02              db 'vgatherpf1dps',2
000199AE: 2F EB                                                  dw gatherpf_dps_instruction-instruction_handler
000199B0: 76 67 61 74 68 65 72 70 66 31 71 70 64 02              db 'vgatherpf1qpd',2
000199BE: 1A EB                                                  dw gatherpf_qpd_instruction-instruction_handler
000199C0: 76 67 61 74 68 65 72 70 66 31 71 70 73 02              db 'vgatherpf1qps',2
000199CE: 2B EB                                                  dw gatherpf_qps_instruction-instruction_handler
000199D0: 76 70 63 6C 6D 75 6C 68 71 6C 71 64 71 01              db 'vpclmulhqlqdq',1
000199DE: 8C D3                                                  dw avx_pclmulqdq_instruction-instruction_handler
000199E0: 76 70 63 6C 6D 75 6C 6C 71 6C 71 64 71 00              db 'vpclmullqlqdq',0
000199EE: 8C D3                                                  dw avx_pclmulqdq_instruction-instruction_handler
                                                                instructions_14:
000199F0: 76 62 72 6F 61 64 63 61 73 74 66 31 32 38 1A           db 'vbroadcastf128',1Ah
000199FF: C5 DE                                                  dw avx_broadcast_128_instruction_noevex-instruction_handler
00019A01: 76 62 72 6F 61 64 63 61 73 74 69 31 32 38 5A           db 'vbroadcasti128',5Ah
00019A10: C5 DE                                                  dw avx_broadcast_128_instruction_noevex-instruction_handler
00019A12: 76 63 6D 70 66 61 6C 73 65 5F 6F 73 70 64 1B           db 'vcmpfalse_ospd',1Bh
00019A21: 11 D5                                                  dw avx_cmp_pd_instruction-instruction_handler
00019A23: 76 63 6D 70 66 61 6C 73 65 5F 6F 73 70 73 1B           db 'vcmpfalse_osps',1Bh
00019A32: 25 D5                                                  dw avx_cmp_ps_instruction-instruction_handler
00019A34: 76 63 6D 70 66 61 6C 73 65 5F 6F 73 73 64 1B           db 'vcmpfalse_ossd',1Bh
00019A43: 2B D5                                                  dw avx_cmp_sd_instruction-instruction_handler
00019A45: 76 63 6D 70 66 61 6C 73 65 5F 6F 73 73 73 1B           db 'vcmpfalse_osss',1Bh
00019A54: 3F D5                                                  dw avx_cmp_ss_instruction-instruction_handler
00019A56: 76 66 6D 61 64 64 73 75 62 31 33 32 70 64 96           db 'vfmaddsub132pd',96h
00019A65: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019A67: 76 66 6D 61 64 64 73 75 62 31 33 32 70 73 96           db 'vfmaddsub132ps',96h
00019A76: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019A78: 76 66 6D 61 64 64 73 75 62 32 31 33 70 64 A6           db 'vfmaddsub213pd',0A6h
00019A87: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019A89: 76 66 6D 61 64 64 73 75 62 32 31 33 70 73 A6           db 'vfmaddsub213ps',0A6h
00019A98: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019A9A: 76 66 6D 61 64 64 73 75 62 32 33 31 70 64 B6           db 'vfmaddsub231pd',0B6h
00019AA9: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019AAB: 76 66 6D 61 64 64 73 75 62 32 33 31 70 73 B6           db 'vfmaddsub231ps',0B6h
00019ABA: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019ABC: 76 66 6D 73 75 62 61 64 64 31 33 32 70 64 97           db 'vfmsubadd132pd',97h
00019ACB: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019ACD: 76 66 6D 73 75 62 61 64 64 31 33 32 70 73 97           db 'vfmsubadd132ps',97h
00019ADC: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019ADE: 76 66 6D 73 75 62 61 64 64 32 31 33 70 64 A7           db 'vfmsubadd213pd',0A7h
00019AED: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019AEF: 76 66 6D 73 75 62 61 64 64 32 31 33 70 73 A7           db 'vfmsubadd213ps',0A7h
00019AFE: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019B00: 76 66 6D 73 75 62 61 64 64 32 33 31 70 64 B7           db 'vfmsubadd231pd',0B7h
00019B0F: B6 D4                                                  dw fma_instruction_pd-instruction_handler
00019B11: 76 66 6D 73 75 62 61 64 64 32 33 31 70 73 B7           db 'vfmsubadd231ps',0B7h
00019B20: C3 D4                                                  dw fma_instruction_ps-instruction_handler
00019B22: 76 67 66 32 70 38 61 66 66 69 6E 65 71 62 CE           db 'vgf2p8affineqb',0CEh
00019B31: 7F C7                                                  dw avx_q_instruction_3a_imm8_w1-instruction_handler
00019B33: 76 70 6D 75 6C 74 69 73 68 69 66 74 71 62 83           db 'vpmultishiftqb',83h
00019B42: 5F C7                                                  dw avx_q_instruction_38_evex-instruction_handler
00019B44: 76 73 63 61 74 74 65 72 70 66 30 64 70 64 05           db 'vscatterpf0dpd',5
00019B53: 1E EB                                                  dw gatherpf_dpd_instruction-instruction_handler
00019B55: 76 73 63 61 74 74 65 72 70 66 30 64 70 73 05           db 'vscatterpf0dps',5
00019B64: 2F EB                                                  dw gatherpf_dps_instruction-instruction_handler
00019B66: 76 73 63 61 74 74 65 72 70 66 30 71 70 64 05           db 'vscatterpf0qpd',5
00019B75: 1A EB                                                  dw gatherpf_qpd_instruction-instruction_handler
00019B77: 76 73 63 61 74 74 65 72 70 66 30 71 70 73 05           db 'vscatterpf0qps',5
00019B86: 2B EB                                                  dw gatherpf_qps_instruction-instruction_handler
00019B88: 76 73 63 61 74 74 65 72 70 66 31 64 70 64 06           db 'vscatterpf1dpd',6
00019B97: 1E EB                                                  dw gatherpf_dpd_instruction-instruction_handler
00019B99: 76 73 63 61 74 74 65 72 70 66 31 64 70 73 06           db 'vscatterpf1dps',6
00019BA8: 2F EB                                                  dw gatherpf_dps_instruction-instruction_handler
00019BAA: 76 73 63 61 74 74 65 72 70 66 31 71 70 64 06           db 'vscatterpf1qpd',6
00019BB9: 1A EB                                                  dw gatherpf_qpd_instruction-instruction_handler
00019BBB: 76 73 63 61 74 74 65 72 70 66 31 71 70 73 06           db 'vscatterpf1qps',6
00019BCA: 2B EB                                                  dw gatherpf_qps_instruction-instruction_handler
                                                                instructions_15:
00019BCC: 61 65 73 6B 65 79 67 65 6E 61 73 73 69 73 74 DF        db 'aeskeygenassist',0DFh
00019BDC: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00019BDE: 76 62 72 6F 61 64 63 61 73 74 66 33 32 78 32 19        db 'vbroadcastf32x2',19h
00019BEE: D0 DE                                                  dw avx512_broadcast_32x2_instruction-instruction_handler
00019BF0: 76 62 72 6F 61 64 63 61 73 74 66 33 32 78 34 1A        db 'vbroadcastf32x4',1Ah
00019C00: D4 DE                                                  dw avx512_broadcast_32x4_instruction-instruction_handler
00019C02: 76 62 72 6F 61 64 63 61 73 74 66 33 32 78 38 1B        db 'vbroadcastf32x8',1Bh
00019C12: D8 DE                                                  dw avx512_broadcast_32x8_instruction-instruction_handler
00019C14: 76 62 72 6F 61 64 63 61 73 74 66 36 34 78 32 1A        db 'vbroadcastf64x2',1Ah
00019C24: DC DE                                                  dw avx512_broadcast_64x2_instruction-instruction_handler
00019C26: 76 62 72 6F 61 64 63 61 73 74 66 36 34 78 34 1B        db 'vbroadcastf64x4',1Bh
00019C36: E0 DE                                                  dw avx512_broadcast_64x4_instruction-instruction_handler
00019C38: 76 62 72 6F 61 64 63 61 73 74 69 33 32 78 32 59        db 'vbroadcasti32x2',59h
00019C48: D0 DE                                                  dw avx512_broadcast_32x2_instruction-instruction_handler
00019C4A: 76 62 72 6F 61 64 63 61 73 74 69 33 32 78 34 5A        db 'vbroadcasti32x4',5Ah
00019C5A: D4 DE                                                  dw avx512_broadcast_32x4_instruction-instruction_handler
00019C5C: 76 62 72 6F 61 64 63 61 73 74 69 33 32 78 38 5B        db 'vbroadcasti32x8',5Bh
00019C6C: D8 DE                                                  dw avx512_broadcast_32x8_instruction-instruction_handler
00019C6E: 76 62 72 6F 61 64 63 61 73 74 69 36 34 78 32 5A        db 'vbroadcasti64x2',5Ah
00019C7E: DC DE                                                  dw avx512_broadcast_64x2_instruction-instruction_handler
00019C80: 76 62 72 6F 61 64 63 61 73 74 69 36 34 78 34 5B        db 'vbroadcasti64x4',5Bh
00019C90: E0 DE                                                  dw avx512_broadcast_64x4_instruction-instruction_handler
00019C92: 76 70 62 72 6F 61 64 63 61 73 74 6D 62 32 71 2A        db 'vpbroadcastmb2q',2Ah
00019CA2: 16 D9                                                  dw avx512_pmov_m2_instruction_w1-instruction_handler
00019CA4: 76 70 62 72 6F 61 64 63 61 73 74 6D 77 32 64 3A        db 'vpbroadcastmw2d',3Ah
00019CB4: 1D D9                                                  dw avx512_pmov_m2_instruction-instruction_handler
                                                                instructions_16:
00019CB6: 67 66 32 70 38 61 66 66 69 6E 65 69 6E 76 71 62        db 'gf2p8affineinvqb',0CFh
          CF                                                    
00019CC7: E5 A9                                                  dw sse4_instruction_66_3a_imm8-instruction_handler
00019CC9: 76 61 65 73 6B 65 79 67 65 6E 61 73 73 69 73 74        db 'vaeskeygenassist',0DFh
          DF                                                    
00019CDA: 3A D3                                                  dw avx_single_source_128bit_instruction_3a_imm8_noevex-instruction_handler
                                                                instructions_17:
00019CDC: 76 67 66 32 70 38 61 66 66 69 6E 65 69 6E 76 71        db 'vgf2p8affineinvqb',0CFh
          62 CF                                                 
00019CEE: 7F C7                                                  dw avx_q_instruction_3a_imm8_w1-instruction_handler
                                                                instructions_end:
                                                                
                                                                data_directives:
00019CF0: 0C 00 0F 00                                            dw data_directives_2-data_directives,(data_directives_3-data_directives_2)/(2+3)
00019CF4: 57 00 00 00                                            dw data_directives_3-data_directives,(data_directives_4-data_directives_3)/(3+3)
00019CF8: 57 00 01 00                                            dw data_directives_4-data_directives,(data_directives_end-data_directives_4)/(4+3)
                                                                
                                                                data_directives_2:
00019CFC: 64 62 01                                               db 'db',1
00019CFF: B3 0D                                                  dw data_bytes-instruction_handler
00019D01: 64 64 04                                               db 'dd',4
00019D04: 84 0E                                                  dw data_dwords-instruction_handler
00019D06: 64 66 06                                               db 'df',6
00019D09: FF 0E                                                  dw data_pwords-instruction_handler
00019D0B: 64 70 06                                               db 'dp',6
00019D0E: FF 0E                                                  dw data_pwords-instruction_handler
00019D10: 64 71 08                                               db 'dq',8
00019D13: 84 0F                                                  dw data_qwords-instruction_handler
00019D15: 64 74 0A                                               db 'dt',10
00019D18: BA 0F                                                  dw data_twords-instruction_handler
00019D1A: 64 75 02                                               db 'du',2
00019D1D: 18 0E                                                  dw data_unicode-instruction_handler
00019D1F: 64 77 02                                               db 'dw',2
00019D22: 21 0E                                                  dw data_words-instruction_handler
00019D24: 72 62 01                                               db 'rb',1
00019D27: 1F 12                                                  dw reserve_bytes-instruction_handler
00019D29: 72 64 04                                               db 'rd',4
00019D2C: C8 12                                                  dw reserve_dwords-instruction_handler
00019D2E: 72 66 06                                               db 'rf',6
00019D31: 22 13                                                  dw reserve_pwords-instruction_handler
00019D33: 72 70 06                                               db 'rp',6
00019D36: 22 13                                                  dw reserve_pwords-instruction_handler
00019D38: 72 71 08                                               db 'rq',8
00019D3B: 79 13                                                  dw reserve_qwords-instruction_handler
00019D3D: 72 74 0A                                               db 'rt',10
00019D40: D6 13                                                  dw reserve_twords-instruction_handler
00019D42: 72 77 02                                               db 'rw',2
00019D45: 76 12                                                  dw reserve_words-instruction_handler
                                                                data_directives_3:
                                                                data_directives_4:
00019D47: 66 69 6C 65 01                                         db 'file',1
00019D4C: D4 10                                                  dw data_file-instruction_handler
                                                                data_directives_end:
                                                                
                                                                include '..\messages.inc'
                                                                
                                                                ; flat assembler core
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
00019D4E: 6F 75 74 20 6F 66 20 6D 65 6D 6F 72 79 00             _out_of_memory db 'out of memory',0
00019D5C: 6F 75 74 20 6F 66 20 73 74 61 63 6B 20 73 70 61       _stack_overflow db 'out of stack space',0
          63 65 00                                              
00019D6F: 73 6F 75 72 63 65 20 66 69 6C 65 20 6E 6F 74 20       _main_file_not_found db 'source file not found',0
          66 6F 75 6E 64 00                                     
00019D85: 63 6F 64 65 20 63 61 6E 6E 6F 74 20 62 65 20 67       _code_cannot_be_generated db 'code cannot be generated',0
          65 6E 65 72 61 74 65 64 00                            
00019D9E: 66 6F 72 6D 61 74 20 6C 69 6D 69 74 61 74 69 6F       _format_limitations_exceeded db 'format limitations exceeded',0
          6E 73 20 65 78 63 65 65 64 65 64 00                   
00019DBA: 69 6E 76 61 6C 69 64 20 64 65 66 69 6E 69 74 69       _invalid_definition db 'invalid definition provided',0
          6F 6E 20 70 72 6F 76 69 64 65 64 00                   
00019DD6: 77 72 69 74 65 20 66 61 69 6C 65 64 00                _write_failed db 'write failed',0
00019DE3: 66 69 6C 65 20 6E 6F 74 20 66 6F 75 6E 64 00          _file_not_found db 'file not found',0
00019DF2: 65 72 72 6F 72 20 72 65 61 64 69 6E 67 20 66 69       _error_reading_file db 'error reading file',0
          6C 65 00                                              
00019E05: 69 6E 76 61 6C 69 64 20 66 69 6C 65 20 66 6F 72       _invalid_file_format db 'invalid file format',0
          6D 61 74 00                                           
00019E19: 69 6E 76 61 6C 69 64 20 6D 61 63 72 6F 20 61 72       _invalid_macro_arguments db 'invalid macro arguments',0
          67 75 6D 65 6E 74 73 00                               
00019E31: 69 6E 63 6F 6D 70 6C 65 74 65 20 6D 61 63 72 6F       _incomplete_macro db 'incomplete macro',0
          00                                                    
00019E42: 75 6E 65 78 70 65 63 74 65 64 20 63 68 61 72 61       _unexpected_characters db 'unexpected characters',0
          63 74 65 72 73 00                                     
00019E58: 69 6E 76 61 6C 69 64 20 61 72 67 75 6D 65 6E 74       _invalid_argument db 'invalid argument',0
          00                                                    
00019E69: 69 6C 6C 65 67 61 6C 20 69 6E 73 74 72 75 63 74       _illegal_instruction db 'illegal instruction',0
          69 6F 6E 00                                           
00019E7D: 69 6E 76 61 6C 69 64 20 6F 70 65 72 61 6E 64 00       _invalid_operand db 'invalid operand',0
00019E8D: 69 6E 76 61 6C 69 64 20 73 69 7A 65 20 6F 66 20       _invalid_operand_size db 'invalid size of operand',0
          6F 70 65 72 61 6E 64 00                               
00019EA5: 6F 70 65 72 61 6E 64 20 73 69 7A 65 20 6E 6F 74       _operand_size_not_specified db 'operand size not specified',0
          20 73 70 65 63 69 66 69 65 64 00                      
00019EC0: 6F 70 65 72 61 6E 64 20 73 69 7A 65 73 20 64 6F       _operand_sizes_do_not_match db 'operand sizes do not match',0
          20 6E 6F 74 20 6D 61 74 63 68 00                      
00019EDB: 69 6E 76 61 6C 69 64 20 73 69 7A 65 20 6F 66 20       _invalid_address_size db 'invalid size of address value',0
          61 64 64 72 65 73 73 20 76 61 6C 75 65 00             
00019EF9: 61 64 64 72 65 73 73 20 73 69 7A 65 73 20 64 6F       _address_sizes_do_not_agree db 'address sizes do not agree',0
          20 6E 6F 74 20 61 67 72 65 65 00                      
00019F14: 64 69 73 61 6C 6C 6F 77 65 64 20 63 6F 6D 62 69       _disallowed_combination_of_registers db 'disallowed combination of registers',0
          6E 61 74 69 6F 6E 20 6F 66 20 72 65 67 69 73 74       
          65 72 73 00                                           
00019F38: 6E 6F 74 20 65 6E 63 6F 64 61 62 6C 65 20 77 69       _long_immediate_not_encodable db 'not encodable with long immediate',0
          74 68 20 6C 6F 6E 67 20 69 6D 6D 65 64 69 61 74       
          65 00                                                 
00019F5A: 72 65 6C 61 74 69 76 65 20 6A 75 6D 70 20 6F 75       _relative_jump_out_of_range db 'relative jump out of range',0
          74 20 6F 66 20 72 61 6E 67 65 00                      
00019F75: 69 6E 76 61 6C 69 64 20 65 78 70 72 65 73 73 69       _invalid_expression db 'invalid expression',0
          6F 6E 00                                              
00019F88: 69 6E 76 61 6C 69 64 20 61 64 64 72 65 73 73 00       _invalid_address db 'invalid address',0
00019F98: 69 6E 76 61 6C 69 64 20 76 61 6C 75 65 00             _invalid_value db 'invalid value',0
00019FA6: 76 61 6C 75 65 20 6F 75 74 20 6F 66 20 72 61 6E       _value_out_of_range db 'value out of range',0
          67 65 00                                              
00019FB9: 75 6E 64 65 66 69 6E 65 64 20 73 79 6D 62 6F 6C       _undefined_symbol db 'undefined symbol',0
          00                                                    
00019FCA: 73 79 6D 62 6F 6C 00                                  _symbol_out_of_scope_1 db 'symbol',0
00019FD1: 6F 75 74 20 6F 66 20 73 63 6F 70 65 00                _symbol_out_of_scope_2 db 'out of scope',0
00019FDE: 69 6E 76 61 6C 69 64 20 75 73 65 20 6F 66 20 73       _invalid_use_of_symbol db 'invalid use of symbol',0
          79 6D 62 6F 6C 00                                     
00019FF4: 6E 61 6D 65 20 74 6F 6F 20 6C 6F 6E 67 00             _name_too_long db 'name too long',0
0001A002: 69 6E 76 61 6C 69 64 20 6E 61 6D 65 00                _invalid_name db 'invalid name',0
0001A00F: 72 65 73 65 72 76 65 64 20 77 6F 72 64 20 75 73       _reserved_word_used_as_symbol db 'reserved word used as symbol',0
          65 64 20 61 73 20 73 79 6D 62 6F 6C 00                
0001A02C: 73 79 6D 62 6F 6C 20 61 6C 72 65 61 64 79 20 64       _symbol_already_defined db 'symbol already defined',0
          65 66 69 6E 65 64 00                                  
0001A043: 6D 69 73 73 69 6E 67 20 65 6E 64 20 71 75 6F 74       _missing_end_quote db 'missing end quote',0
          65 00                                                 
0001A055: 6D 69 73 73 69 6E 67 20 65 6E 64 20 64 69 72 65       _missing_end_directive db 'missing end directive',0
          63 74 69 76 65 00                                     
0001A06B: 75 6E 65 78 70 65 63 74 65 64 20 69 6E 73 74 72       _unexpected_instruction db 'unexpected instruction',0
          75 63 74 69 6F 6E 00                                  
0001A082: 65 78 74 72 61 20 63 68 61 72 61 63 74 65 72 73       _extra_characters_on_line db 'extra characters on line',0
          20 6F 6E 20 6C 69 6E 65 00                            
0001A09B: 73 65 63 74 69 6F 6E 20 69 73 20 6E 6F 74 20 61       _section_not_aligned_enough db 'section is not aligned enough',0
          6C 69 67 6E 65 64 20 65 6E 6F 75 67 68 00             
0001A0B9: 73 65 74 74 69 6E 67 20 61 6C 72 65 61 64 79 20       _setting_already_specified db 'setting already specified',0
          73 70 65 63 69 66 69 65 64 00                         
0001A0D3: 64 61 74 61 20 61 6C 72 65 61 64 79 20 64 65 66       _data_already_defined db 'data already defined',0
          69 6E 65 64 00                                        
0001A0E8: 74 6F 6F 20 6D 61 6E 79 20 72 65 70 65 61 74 73       _too_many_repeats db 'too many repeats',0
          00                                                    
0001A0F9: 65 72 72 6F 72 20 64 69 72 65 63 74 69 76 65 20       _invoked_error db 'error directive encountered in source file',0
          65 6E 63 6F 75 6E 74 65 72 65 64 20 69 6E 20 73       
          6F 75 72 63 65 20 66 69 6C 65 00                      
0001A124: 61 73 73 65 72 74 69 6F 6E 20 66 61 69 6C 65 64       _assertion_failed db 'assertion failed',0
          00                                                    
                                                                
                                                                
                                                                ;segment readable writeable
                                                                
0001A135: 90 90 90                                              align 4
                                                                
                                                                include '..\variable.inc'
                                                                
                                                                ; flat assembler core variables
                                                                ; Copyright (c) 1999-2022, Tomasz Grysztar.
                                                                ; All rights reserved.
                                                                
                                                                ; Variables which have to be set up by interface:
                                                                
0001A138: 00 00 00 00                                           memory_start dd ?
0001A13C: 00 00 00 00                                           memory_end dd ?
                                                                
0001A140: 00 00 00 00                                           additional_memory dd ?
0001A144: 00 00 00 00                                           additional_memory_end dd ?
                                                                
0001A148: 00 00 00 00                                           stack_limit dd ?
                                                                
0001A14C: 00 00 00 00                                           initial_definitions dd ?
0001A150: 00 00 00 00                                           input_file dd ?
0001A154: 00 00 00 00                                           output_file dd ?
0001A158: 00 00 00 00                                           symbols_file dd ?
                                                                
0001A15C: 00 00                                                 passes_limit dw ?
                                                                
                                                                ; Internal core variables:
                                                                
0001A15E: 00 00                                                 current_pass dw ?
                                                                
0001A160: 00 00 00 00                                           include_paths dd ?
0001A164: 00 00 00 00                                           free_additional_memory dd ?
0001A168: 00 00 00 00                                           source_start dd ?
0001A16C: 00 00 00 00                                           code_start dd ?
0001A170: 00 00 00 00                                           code_size dd ?
0001A174: 00 00 00 00                                           real_code_size dd ?
0001A178: 00 00 00 00                                           written_size dd ?
0001A17C: 00 00 00 00                                           headers_size dd ?
                                                                
0001A180: 00 00 00 00                                           current_line dd ?
0001A184: 00 00 00 00                                           macro_line dd ?
0001A188: 00 00 00 00                                           macro_block dd ?
0001A18C: 00 00 00 00                                           macro_block_line dd ?
0001A190: 00 00 00 00                                           macro_block_line_number dd ?
0001A194: 00 00 00 00                                           macro_symbols dd ?
0001A198: 00 00 00 00                                           struc_name dd ?
0001A19C: 00 00 00 00                                           struc_label dd ?
0001A1A0: 00 00 00 00                                           instant_macro_start dd ?
0001A1A4: 00 00 00 00                                           parameters_end dd ?
0001A1A8: 00 00 00 00                                           default_argument_value dd ?
0001A1AC: 00 00 00 00 00 00 00 00                               locals_counter rb 8
0001A1B4: 00 00 00 00                                           current_locals_prefix dd ?
0001A1B8: 00 00 00 00                                           anonymous_reverse dd ?
0001A1BC: 00 00 00 00                                           anonymous_forward dd ?
0001A1C0: 00 00 00 00                                           labels_list dd ?
0001A1C4: 00 00 00 00                                           label_hash dd ?
0001A1C8: 00 00 00 00                                           label_leaf dd ?
0001A1CC: 00 00 00 00                                           hash_tree dd ?
0001A1D0: 00 00 00 00                                           addressing_space dd ?
0001A1D4: 00 00 00 00                                           undefined_data_start dd ?
0001A1D8: 00 00 00 00                                           undefined_data_end dd ?
0001A1DC: 00 00 00 00                                           counter dd ?
0001A1E0: 00 00 00 00                                           counter_limit dd ?
0001A1E4: 00 00 00 00                                           error_info dd ?
0001A1E8: 00 00 00 00                                           error_line dd ?
0001A1EC: 00 00 00 00                                           error dd ?
0001A1F0: 00 00 00 00                                           tagged_blocks dd ?
0001A1F4: 00 00 00 00                                           structures_buffer dd ?
0001A1F8: 00 00 00 00                                           number_start dd ?
0001A1FC: 00 00 00 00                                           current_offset dd ?
0001A200: 00 00 00 00 00 00 00 00                               value dq ?
0001A208: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       fp_value rd 8
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
0001A228: 00 00 00 00 00 00 00 00                               adjustment dq ?
0001A230: 00 00 00 00                                           symbol_identifier dd ?
0001A234: 00 00 00 00                                           address_symbol dd ?
0001A238: 00 00 00 00                                           address_high dd ?
0001A23C: 00 00 00 00                                           uncompressed_displacement dd ?
0001A240: 00 00 00 00                                           format_flags dd ?
0001A244: 00 00 00 00                                           resolver_flags dd ?
0001A248: 00 00 00 00                                           symbols_stream dd ?
0001A24C: 00 00 00 00                                           number_of_relocations dd ?
0001A250: 00 00 00 00                                           number_of_sections dd ?
0001A254: 00 00 00 00                                           stub_size dd ?
0001A258: 00 00 00 00                                           stub_file dd ?
0001A25C: 00 00 00 00                                           current_section dd ?
0001A260: 00 00                                                 machine dw ?
0001A262: 00 00                                                 subsystem dw ?
0001A264: 00 00 00 00                                           subsystem_version dd ?
0001A268: 00 00 00 00                                           image_base dd ?
0001A26C: 00 00 00 00                                           image_base_high dd ?
0001A270: 00 00 00 00                                           merge_segment dd ?
0001A274: 00 00 00 00                                           resource_data dd ?
0001A278: 00 00 00 00                                           resource_size dd ?
0001A27C: 00 00 00 00                                           actual_fixups_size dd ?
0001A280: 00 00 00 00                                           reserved_fixups dd ?
0001A284: 00 00 00 00                                           reserved_fixups_size dd ?
0001A288: 00 00 00 00                                           last_fixup_base dd ?
0001A28C: 00 00 00 00                                           last_fixup_header dd ?
0001A290: 00 00 00 00                                           parenthesis_stack dd ?
0001A294: 00 00 00 00                                           blocks_stack dd ?
0001A298: 00 00 00 00                                           parsed_lines dd ?
0001A29C: 00 00 00 00                                           logical_value_parentheses dd ?
0001A2A0: 00 00 00 00                                           file_extension dd ?
                                                                
0001A2A4: 00                                                    operand_size db ?
0001A2A5: 00                                                    operand_flags db ?
0001A2A6: 00                                                    operand_prefix db ?
0001A2A7: 00                                                    rex_prefix db ?
0001A2A8: 00                                                    opcode_prefix db ?
0001A2A9: 00                                                    vex_required db ?
0001A2AA: 00                                                    vex_register db ?
0001A2AB: 00                                                    immediate_size db ?
0001A2AC: 00                                                    mask_register db ?
0001A2AD: 00                                                    broadcast_size db ?
0001A2AE: 00                                                    rounding_mode db ?
                                                                
0001A2AF: 00                                                    base_code db ?
0001A2B0: 00                                                    extended_code db ?
0001A2B1: 00                                                    supplemental_code db ?
0001A2B2: 00                                                    postbyte_register db ?
0001A2B3: 00                                                    segment_register db ?
0001A2B4: 00                                                    xop_opcode_map db ?
                                                                
0001A2B5: 00                                                    mmx_size db ?
0001A2B6: 00                                                    jump_type db ?
0001A2B7: 00                                                    push_size db ?
0001A2B8: 00                                                    value_size db ?
0001A2B9: 00                                                    address_size db ?
0001A2BA: 00                                                    label_size db ?
0001A2BB: 00                                                    size_declared db ?
0001A2BC: 00                                                    address_size_declared db ?
0001A2BD: 00                                                    displacement_compression db ?
                                                                
0001A2BE: 00                                                    value_undefined db ?
0001A2BF: 00                                                    value_constant db ?
0001A2C0: 00                                                    value_type db ?
0001A2C1: 00                                                    value_sign db ?
0001A2C2: 00                                                    fp_sign db ?
0001A2C3: 00                                                    fp_format db ?
0001A2C4: 00                                                    address_sign db ?
0001A2C5: 00                                                    address_register db ?
0001A2C6: 00                                                    compare_type db ?
0001A2C7: 00                                                    logical_value_wrapping db ?
0001A2C8: 00                                                    next_pass_needed db ?
0001A2C9: 00                                                    output_format db ?
0001A2CA: 00                                                    code_type db ?
0001A2CB: 00                                                    adjustment_sign db ?
0001A2CC: 00                                                    evex_mode db ?
                                                                
0001A2CD: 00                                                    macro_status db ?
0001A2CE: 00                                                    skip_default_argument_value db ?
0001A2CF: 00                                                    prefix_flags db ?
0001A2D0: 00                                                    formatter_symbols_allowed db ?
0001A2D1: 00                                                    decorator_symbols_allowed db ?
0001A2D2: 00                                                    free_address_range db ?
                                                                
0001A2D3: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       characters rb 100h
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
0001A3D3: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       converted rb 100h
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
0001A4D3: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       message rb 180h
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00       
                                                                
                                                                
0001A653: 00 00 00 00                                           command_line dd ?
0001A657: 00 00 00 00                                           memory_setting dd ?
0001A65B: 00 00 00 00                                           definitions_pointer dd ?
0001A65F: 00 00 00 00                                           environment dd ?
0001A663: 00 00 00 00 00 00 00 00                               timestamp dq ?
0001A66B: 00 00 00 00                                           start_time dd ?
                                                                ; TRDOS 386
                                                                ;con_handle dd ?
0001A66F: 00 00 00 00                                           displayed_count dd ?
0001A673: 00                                                    last_displayed db ?
0001A674: 00                                                    character db ?
0001A675: 00                                                    preprocessing_done db ?
                                                                
0001A676: 0D 0A                                                 program db 0Dh,0Ah
0001A678: 46 6C 61 74 20 41 73 73 73 65 6D 62 6C 65 72 20       	db "Flat Asssembler for TRDOS 386 v2"
          66 6F 72 20 54 52 44 4F 53 20 33 38 36 20 76 32       
0001A698: 0D 0A                                                 	db 0Dh,0Ah
0001A69A: 45 72 64 6F 67 61 6E 20 54 61 6E 20 2D 20 4F 63       	db "Erdogan Tan - October 2024"
          74 6F 62 65 72 20 32 30 32 34                         
0001A6B4: 0D 0A 00                                              	db 0Dh,0Ah,0
                                                                
                                                                align 4
                                                                
                                                                predefinitions rb 1000h
                                                                buffer rb 1000h
                                                                
                                                                bss_end: ; 08/10/2024	
