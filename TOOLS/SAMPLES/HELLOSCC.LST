                                                                ; -----------------------------------------------------------
                                                                ; Small C Compiler for TRDOS 386 (v2.0.9 and later)
                                                                ; Erdogan Tan - 2024
                                                                ; Beginning: 05/09/2024
                                                                ; Last Update: 22/09/2024
                                                                ; -----------------------------------------------------------
                                                                ; Derived from 'scc.asm' file of KolibriOS SCC source code
                                                                ; 2024
                                                                
                                                                ;B+ System header
                                                                use32
                                                                org 0x0
00000000: E9 E1 18 00 00                                          jmp START	; TRDOS 386 PRG file doesn't contain header
                                                                
00000005: 00 00 00 00                                             dd  0
                                                                
                                                                ;B+ Include C files
                                                                  ; Compiler tools
                                                                  include "INTRINS.ASM"
                                                                ;
                                                                ; Small-C Run Time Library for Win NT
                                                                ;
                                                                ; Nasm version  17/Nov/98  H T Walheim
                                                                ; Revised:	20/Nov/98  HTW [Bugs in switch]
                                                                ;
                                                                
                                                                _CCARGC:
                                                                ;B+ Ellipses arguments ( ,...)
                                                                  ;cl - argument count
                                                                
00000009: 31 C0                                                   xor  eax,eax
0000000B: 0F B6 C1                                                movzx eax,cl  ; No sign-extension
0000000E: C3                                                      ret
                                                                ;E:.
                                                                
                                                                ;B+ Compare
                                                                
                                                                __ult:
                                                                ;B+ ???
0000000F: 39 D8                                                   cmp  eax,ebx
00000011: 77 46                                                   ja   true
00000013: 31 C0                                                   xor  eax,eax
00000015: C3                                                      ret
                                                                ;E:.
                                                                
                                                                __ugt:
                                                                ;B+ ???
00000016: 39 D8                                                   cmp  eax,ebx
00000018: 72 3F                                                   jb   true
0000001A: 31 C0                                                   xor  eax,eax
0000001C: C3                                                      ret
                                                                ;E:.
                                                                
                                                                __ule:
                                                                ;B+ ???
0000001D: 39 D8                                                   cmp  eax,ebx
0000001F: 73 38                                                   jae  true
00000021: 31 C0                                                   xor  eax,eax
00000023: C3                                                      ret
                                                                ;E:.
                                                                
                                                                __uge:
                                                                ;B+ ???
00000024: 39 D8                                                   cmp  eax,ebx
00000026: 76 31                                                   jbe  true
00000028: 31 C0                                                   xor  eax,eax
0000002A: C3                                                      ret
                                                                ;E:.
                                                                
                                                                __eq:
                                                                ;B+ ???
0000002B: 39 D8                                                   cmp  eax,ebx
0000002D: 74 2A                                                   je   true
0000002F: 31 C0                                                   xor  eax,eax
00000031: C3                                                      ret
                                                                ;E:.
                                                                
                                                                __ne:
                                                                ;B+ ???
00000032: 39 D8                                                   cmp  eax,ebx
00000034: 75 23                                                   jne  true
00000036: 31 C0                                                   xor  eax,eax
00000038: C3                                                      ret
                                                                ;E:.
                                                                
                                                                __lt:
                                                                ;B+ ???
00000039: 39 D8                                                   cmp  eax,ebx
0000003B: 7F 1C                                                   jg   true
0000003D: 31 C0                                                   xor  eax,eax
0000003F: C3                                                      ret
                                                                ;E:.
                                                                
                                                                __gt:
                                                                ;B+ ???
00000040: 39 D8                                                   cmp  eax,ebx
00000042: 7C 15                                                   jl   true
00000044: 31 C0                                                   xor  eax,eax
00000046: C3                                                      ret
                                                                ;E:.
                                                                
                                                                __le:
                                                                ;B+ ???
00000047: 39 D8                                                   cmp  eax,ebx
00000049: 7D 0E                                                   jge  true
0000004B: 31 C0                                                   xor  eax,eax
0000004D: C3                                                      ret
                                                                ;E:.
                                                                
                                                                __ge:
                                                                ;B+ ???
0000004E: 39 D8                                                   cmp  eax,ebx
00000050: 7E 07                                                   jle  true
00000052: 31 C0                                                   xor  eax,eax
00000054: C3                                                      ret
                                                                ;E:.
                                                                
                                                                ;E:.
                                                                
                                                                __lneg:
                                                                ;B+ Logical Negate of Primary
00000055: 09 C0                                                   or   eax,eax
00000057: 75 06                                                   jnz  false
                                                                true:
00000059: B8 01 00 00 00                                          mov  eax,1
0000005E: C3                                                      ret
                                                                
                                                                false:
0000005F: 31 C0                                                   xor  eax,eax
00000061: C3                                                      ret
                                                                ;E:.
                                                                
                                                                __switch:
                                                                ;B+ Execute "switch" statement
                                                                
                                                                 ;eax   - switch value
                                                                 ;[esp] - pointer to switch table
                                                                 ;   dd addr1,value1
                                                                 ;         ...
                                                                 ;   dd 0
                                                                 ;   [jmp default]
                                                                 ;   continuation
                                                                 ;
                                                                 ; Revised: 20/Nov/98 [JECXZ needed]
                                                                
00000062: 5B                                                     pop  ebx
00000063: EB 03                                                   jmp  skip
                                                                back:
00000065: 83 C3 08                                                add  ebx,8        ;next case-pair
                                                                skip:
00000068: 8B 0B                                                   mov  ecx,[ebx]    ;case-label location (adress)
0000006A: E3 07                                                   jecxz default
0000006C: 3B 43 04                                                cmp  eax,[ebx+4]  ;test case-value
0000006F: 75 F4                                                   jnz  back
00000071: FF E1                                                   jmp  ecx          ;match -- jump to case
                                                                default:
00000073: 83 C3 04                                                add  ebx,4
00000076: FF E3                                                   jmp  ebx          ;jump to default/continuation
                                                                ;E:.
                                                                
                                                                
                                                                  ; C Library ("stdio.asm")
                                                                  include "LIBSTD.ASM"
                                                                ; -----------------------------------------------------------
                                                                ; Small C Compiler for TRDOS 386 (v2.0.9 and later)
                                                                ; Erdogan Tan - 2024
                                                                ; Beginning: 05/09/2024
                                                                ; Last Update: 26/09/2024
                                                                ; -----------------------------------------------------------
                                                                ; Derived from 'libstd.asm' file of KolibriOS SCC source code
                                                                ; 2024
                                                                
                                                                ;NOTE: The assembly source code will be more optimized later.
                                                                ;  For now (current version), semi-optimized source code
                                                                ;  will be preserved for comparison with existing C code.
                                                                ;Erdogan Tan - 11/09/2024 
                                                                
                                                                ; TRDOS 386 v2 modification
                                                                ; Write string to standard output.
                                                                ;
                                                                ;puts(string) char *string;
                                                                ;{while(*string)
                                                                ;     OS_putc(*string++);
                                                                ; OS_putc('\n');
                                                                
                                                                _puts:
00000078: 55                                                    PUSH EBP
00000079: 89 E5                                                 MOV  EBP, ESP
                                                                _puts_1:
0000007B: 8D 45 08                                              LEA  EAX, [EBP+8]
0000007E: 50                                                    PUSH EAX	; (*string)
0000007F: 8B 18                                                 MOV  EBX, [EAX] ; string's itself
00000081: 0F BE 03                                              MOVSX EAX, BYTE [EBX] ; char in string
00000084: 5B                                                    POP  EBX
00000085: 09 C0                                                 OR   EAX, EAX
00000087: 74 0D                                                 JZ   short _puts_2
00000089: FF 03                                                 INC  DWORD [EBX] ; (*string++);
0000008B: 50                                                    PUSH EAX
0000008C: B1 01                                                 MOV  CL, 1 ; 1 argument
0000008E: E8 A7 16 00 00                                        CALL _OS_putc
                                                                ;ADD ESP, 4
00000093: 58                                                    POP  EAX
00000094: EB E5                                                 JMP  short _puts_1
                                                                _puts_2:
00000096: 5D                                                    POP  EBP
00000097: C3                                                    RETN
                                                                
                                                                _reverse:
00000098: 55                                                    PUSH EBP
00000099: 89 E5                                                 MOV  EBP, ESP
0000009B: 83 C4 F8                                              ADD  ESP, -8
0000009E: 8D 45 FC                                              LEA  EAX, [EBP-4]
000000A1: 50                                                    PUSH EAX
000000A2: 8D 45 08                                              LEA  EAX, [EBP+8]
000000A5: 89 C3                                                 MOV  EBX, EAX
000000A7: 8B 03                                                 MOV  EAX, [EBX]
000000A9: 50                                                    PUSH EAX
000000AA: 8D 45 08                                              LEA  EAX, [EBP+8]
000000AD: 89 C3                                                 MOV  EBX, EAX
000000AF: 8B 03                                                 MOV  EAX, [EBX]
000000B1: 50                                                    PUSH EAX
000000B2: B1 01                                                 MOV  CL, 1
000000B4: E8 AA 00 00 00                                        CALL _strlen
000000B9: 83 C4 04                                              ADD  ESP, 4
000000BC: 5B                                                    POP  EBX
000000BD: 01 D8                                                 ADD  EAX, EBX
000000BF: 89 C3                                                 MOV  EBX, EAX
000000C1: B8 01 00 00 00                                        MOV  EAX, 1
000000C6: 93                                                    XCHG EAX, EBX
000000C7: 29 D8                                                 SUB  EAX, EBX
000000C9: 5B                                                    POP  EBX
000000CA: 89 03                                                 MOV  [EBX], EAX
                                                                _lib_3:
000000CC: 8D 45 08                                              LEA  EAX, [EBP+8]
000000CF: 89 C3                                                 MOV  EBX, EAX
000000D1: 8B 03                                                 MOV  EAX, [EBX]
000000D3: 50                                                    PUSH EAX
000000D4: 8D 45 FC                                              LEA  EAX, [EBP-4]
000000D7: 89 C3                                                 MOV  EBX, EAX
000000D9: 8B 03                                                 MOV  EAX, [EBX]
000000DB: 5B                                                    POP  EBX
000000DC: E8 2E FF FF FF                                        CALL __ult
000000E1: 09 C0                                                 OR   EAX, EAX
000000E3: 75 02                                                 JNE  short _lib_5
000000E5: EB 46                                                 JMP  short _lib_4
                                                                _lib_5:
000000E7: 8D 45 F8                                              LEA  EAX, [EBP-8]
000000EA: 50                                                    PUSH EAX
000000EB: 8D 45 08                                              LEA  EAX, [EBP+8]
000000EE: 89 C3                                                 MOV  EBX, EAX
000000F0: 8B 03                                                 MOV  EAX, [EBX]
000000F2: 89 C3                                                 MOV  EBX, EAX
000000F4: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
000000F7: 5B                                                    POP  EBX
000000F8: 89 03                                                 MOV  [EBX], EAX
000000FA: 8D 45 08                                              LEA  EAX, [EBP+8]
000000FD: 89 C3                                                 MOV  EBX, EAX
000000FF: 8B 03                                                 MOV  EAX, [EBX]
00000101: 40                                                    INC  EAX
00000102: 89 03                                                 MOV  [EBX], EAX
00000104: 48                                                    DEC  EAX
00000105: 50                                                    PUSH EAX
00000106: 8D 45 FC                                              LEA  EAX, [EBP-4]
00000109: 89 C3                                                 MOV  EBX, EAX
0000010B: 8B 03                                                 MOV  EAX, [EBX]
0000010D: 89 C3                                                 MOV  EBX, EAX
0000010F: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
00000112: 5B                                                    POP  EBX
00000113: 88 03                                                 MOV  [EBX], AL
00000115: 8D 45 FC                                              LEA  EAX, [EBP-4]
00000118: 89 C3                                                 MOV  EBX, EAX
0000011A: 8B 03                                                 MOV  EAX, [EBX]
0000011C: 48                                                    DEC  EAX
0000011D: 89 03                                                 MOV  [EBX], EAX
0000011F: 40                                                    INC  EAX
00000120: 50                                                    PUSH EAX
00000121: 8D 45 F8                                              LEA  EAX, [EBP-8]
00000124: 89 C3                                                 MOV  EBX, EAX
00000126: 8B 03                                                 MOV  EAX, [EBX]
00000128: 5B                                                    POP  EBX
00000129: 88 03                                                 MOV  [EBX], AL
0000012B: EB 9F                                                 JMP  short _lib_3
                                                                _lib_4:
0000012D: 89 EC                                                 MOV  ESP, EBP
0000012F: 5D                                                    POP  EBP
00000130: C3                                                    RETN
                                                                
                                                                _strcpy:		; strcpy(s,t) char *s,*t;
00000131: 55                                                    PUSH EBP
00000132: 89 E5                                                 MOV  EBP, ESP
00000134: 83 C4 FC                                              ADD  ESP, -4		; char *d;
00000137: 8D 5D 0C                                              LEA  EBX, [EBP+12]
0000013A: 8B 03                                                 MOV  EAX, [EBX]		; char *s
0000013C: 8D 5D FC                                              LEA  EBX, [EBP-4]
0000013F: 89 03                                                 MOV  [EBX], EAX		; d=s;
                                                                _strcpy_1:		; while(*s++ =*t++);
00000141: 8D 5D 0C                                              LEA  EBX, [EBP+12] 	; *s
00000144: 8B 03                                                 MOV  EAX, [EBX]
00000146: FF 03                                                 INC  DWORD [EBX] 	; *s++
00000148: 50                                                    PUSH EAX
00000149: 8D 45 08                                              LEA  EAX, [EBP+8] 	; *t
0000014C: 8B 18                                                 MOV  EBX, [EAX]
0000014E: FF 00                                                 INC  DWORD [EAX] 	; *t++
00000150: 0F BE 03                                              MOVSX EAX, BYTE [EBX]
00000153: 5B                                                    POP  EBX
00000154: 88 03                                                 MOV  [EBX], AL		; *s++ =*t++
00000156: 09 C0                                                 OR   EAX, EAX
00000158: 75 E7                                                 JNZ  short _strcpy_1
0000015A: 8D 5D FC                                              LEA  EBX, [EBP-4] 	; pointer to d
0000015D: 8B 03                                                 MOV  EAX, [EBX] 	; return (d);
0000015F: 89 EC                                                 MOV  ESP, EBP
00000161: 5D                                                    POP  EBP
00000162: C3                                                    RETN
                                                                
                                                                _strlen:		; strlen(s)
00000163: 55                                                    PUSH EBP
00000164: 89 E5                                                 MOV  EBP, ESP
00000166: 83 C4 FC                                              ADD  ESP, -4		; char *ptr;
00000169: 8D 5D 08                                              LEA  EBX, [EBP+8]
0000016C: 8B 03                                                 MOV  EAX, [EBX]
0000016E: 8D 5D FC                                              LEA  EBX, [EBP-4]
00000171: 89 03                                                 MOV  [EBX], EAX		; ptr=s;
                                                                _strlen_1:
                                                                ;LEA EBX, [EBP-4]	; while(*ptr)	
                                                                ;MOV EAX, [EBX]
00000173: 89 C3                                                 MOV  EBX, EAX
00000175: 0F BE 03                                              MOVSX EAX, BYTE [EBX]
00000178: 09 C0                                                 OR   EAX, EAX
0000017A: 74 0A                                                 JZ  short _strlen_2
                                                                ;_lib_13:
0000017C: 8D 5D FC                                              LEA  EBX, [EBP-4]
0000017F: 8B 03                                                 MOV  EAX, [EBX]
00000181: 40                                                    INC  EAX
00000182: 89 03                                                 MOV  [EBX], EAX		; ++ptr;
00000184: EB ED                                                 JMP  short _strlen_1
                                                                _strlen_2:
00000186: 8D 5D FC                                              LEA  EBX, [EBP-4]
00000189: 8B 03                                                 MOV  EAX, [EBX]
0000018B: 50                                                    PUSH EAX
0000018C: 8D 45 08                                              LEA  EAX, [EBP+8]
0000018F: 8B 18                                                 MOV  EBX, [EAX]		; s
00000191: 58                                                    POP  EAX		; ptr
00000192: 29 D8                                                 SUB  EAX, EBX		; return (ptr-s);
00000194: 89 EC                                                 MOV  ESP, EBP
00000196: 5D                                                    POP  EBP
00000197: C3                                                    RETN
                                                                
                                                                _toupper:		; toupper(c)
00000198: 55                                                    PUSH EBP
00000199: 89 E5                                                 MOV  EBP, ESP
0000019B: 8D 45 08                                              LEA  EAX, [EBP+8]	; if(c<='z' && c>='a')
0000019E: 8B 18                                                 MOV  EBX, [EAX]		; int c;
000001A0: B8 7A 00 00 00                                        MOV  EAX, 122		; 'z'
000001A5: E8 9D FE FF FF                                        CALL __le
000001AA: 09 C0                                                 OR   EAX, EAX
                                                                ;;JZ short _lib_16
                                                                ;JZ short _lib_15
000001AC: 74 18                                                 JZ short _toupper_ok	; condition 1 = false
                                                                ;_lib_18:
                                                                ;LEA EAX, [EBP+8]
                                                                ;MOV EBX, [EAX]
000001AE: B8 61 00 00 00                                        MOV  EAX, 97		; 'a'
000001B3: E8 96 FE FF FF                                        CALL __ge
000001B8: 09 C0                                                 OR   EAX, EAX
                                                                ;;JZ short _lib_16
                                                                ;JZ short _lib_15
000001BA: 74 0A                                                 JZ short _toupper_ok	; condition 2 = false
                                                                ;_lib_19:
                                                                ;MOV EAX, 1
                                                                ;eax = 1
                                                                ;;JMP  short _lib_17
                                                                ;JMP short _lib_20
                                                                ;_lib_16:
                                                                ;XOR EAX, EAX
                                                                ;_lib_17:
                                                                ;OR  EAX, EAX
                                                                ;JZ  short _lib_15
                                                                ;_lib_20:
                                                                ;LEA EAX, [EBP+8]	; condition 1 & 2 = true
                                                                ;MOV EBX, [EAX]		; int c
000001BC: B8 20 00 00 00                                        MOV  EAX, 32
000001C1: 93                                                    XCHG EAX, EBX
000001C2: 29 D8                                                 SUB  EAX, EBX		; return (c-32);
000001C4: 5D                                                    POP  EBP
000001C5: C3                                                    RETN
                                                                ;_lib_15:
                                                                _toupper_ok:
                                                                ;LEA EBX, [EBP+8]
                                                                ;MOV EAX, [EBX]
                                                                ;ebx = int c
000001C6: 93                                                    XCHG EAX, EBX		; return (c);
000001C7: 5D                                                    POP  EBP
000001C8: C3                                                    RETN
                                                                
                                                                _atoi:
000001C9: 55                                                    PUSH EBP
000001CA: 89 E5                                                 MOV  EBP, ESP
000001CC: 83 C4 F8                                              ADD  ESP, -8
                                                                _lib_22:
000001CF: 8D 45 08                                              LEA  EAX, [EBP+8]
000001D2: 89 C3                                                 MOV  EBX, EAX
000001D4: 8B 03                                                 MOV  EAX, [EBX]
000001D6: 89 C3                                                 MOV  EBX, EAX
000001D8: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
000001DB: 50                                                    PUSH EAX
000001DC: B1 01                                                 MOV  CL, 1
000001DE: E8 CF 0C 00 00                                        CALL _isspace
000001E3: 83 C4 04                                              ADD  ESP, 4
000001E6: 09 C0                                                 OR   EAX, EAX
000001E8: 75 02                                                 JNE  short _lib_24
000001EA: EB 0C                                                 JMP  short _lib_23
                                                                _lib_24:
000001EC: 8D 45 08                                              LEA  EAX, [EBP+8]
000001EF: 89 C3                                                 MOV  EBX, EAX
000001F1: 8B 03                                                 MOV  EAX, [EBX]
000001F3: 40                                                    INC  EAX
000001F4: 89 03                                                 MOV  [EBX], EAX
000001F6: EB D7                                                 JMP  short _lib_22
                                                                _lib_23:
000001F8: 8D 45 FC                                              LEA  EAX, [EBP-4]
000001FB: 89 C3                                                 MOV  EBX, EAX
000001FD: B8 01 00 00 00                                        MOV  EAX, 1
00000202: 89 03                                                 MOV  [EBX], EAX
00000204: 8D 45 08                                              LEA  EAX, [EBP+8]
00000207: 89 C3                                                 MOV  EBX, EAX
00000209: 8B 03                                                 MOV  EAX, [EBX]
0000020B: 89 C3                                                 MOV  EBX, EAX
0000020D: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
00000210: EB 18                                                 JMP  short _lib_27
                                                                _lib_28:
00000212: 8D 45 FC                                              LEA  EAX, [EBP-4]
00000215: 89 C3                                                 MOV  EBX, EAX
00000217: B8 FF FF FF FF                                        MOV  EAX, -1
0000021C: 89 03                                                 MOV  [EBX], EAX
                                                                _lib_29:
0000021E: 8D 45 08                                              LEA  EAX, [EBP+8]
00000221: 89 C3                                                 MOV  EBX, EAX
00000223: 8B 03                                                 MOV  EAX, [EBX]
00000225: 40                                                    INC  EAX
00000226: 89 03                                                 MOV  [EBX], EAX
00000228: EB 19                                                 JMP  short _lib_26
                                                                _lib_27:
0000022A: E8 33 FE FF FF                                        CALL __switch
0000022F: 12 02 00 00                                            DD _lib_28
00000233: 2D 00 00 00                                            DD 45
00000237: 1E 02 00 00                                            DD _lib_29
0000023B: 2B 00 00 00                                            DD 43
0000023F: 00 00 00 00                                            DD 0
                                                                _lib_26:
00000243: 8D 45 F8                                              LEA  EAX, [EBP-8]
00000246: 89 C3                                                 MOV  EBX, EAX
00000248: 31 C0                                                 XOR  EAX, EAX
0000024A: 89 03                                                 MOV  [EBX], EAX
                                                                _lib_30:
0000024C: 8D 45 08                                              LEA  EAX, [EBP+8]
0000024F: 89 C3                                                 MOV  EBX, EAX
00000251: 8B 03                                                 MOV  EAX, [EBX]
00000253: 89 C3                                                 MOV  EBX, EAX
00000255: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
00000258: 50                                                    PUSH EAX
00000259: B1 01                                                 MOV  CL, 1
0000025B: E8 BC 0B 00 00                                        CALL _isdigit
00000260: 83 C4 04                                              ADD  ESP, 4
00000263: 09 C0                                                 OR   EAX, EAX
00000265: 75 02                                                 JNE  short _lib_32
00000267: EB 35                                                 JMP  short _lib_31
                                                                _lib_32:
00000269: 8D 45 F8                                              LEA  EAX, [EBP-8]
0000026C: 50                                                    PUSH EAX
0000026D: 8D 45 F8                                              LEA  EAX, [EBP-8]
00000270: 89 C3                                                 MOV  EBX, EAX
00000272: 8B 03                                                 MOV  EAX, [EBX]
00000274: BB 0A 00 00 00                                        MOV  EBX, 10
00000279: F7 EB                                                 IMUL EBX
0000027B: 50                                                    PUSH EAX
0000027C: 8D 45 08                                              LEA  EAX, [EBP+8]
0000027F: 89 C3                                                 MOV  EBX, EAX
00000281: 8B 03                                                 MOV  EAX, [EBX]
00000283: 40                                                    INC  EAX
00000284: 89 03                                                 MOV  [EBX], EAX
00000286: 48                                                    DEC  EAX
00000287: 89 C3                                                 MOV  EBX, EAX
00000289: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
0000028C: 5B                                                    POP  EBX
0000028D: 01 D8                                                 ADD  EAX, EBX
0000028F: 89 C3                                                 MOV  EBX, EAX
00000291: B8 30 00 00 00                                        MOV  EAX, 48
00000296: 93                                                    XCHG EAX, EBX
00000297: 29 D8                                                 SUB  EAX, EBX
00000299: 5B                                                    POP  EBX
0000029A: 89 03                                                 MOV  [EBX], EAX
0000029C: EB AE                                                 JMP  short _lib_30
                                                                _lib_31:
0000029E: 8D 45 FC                                              LEA  EAX, [EBP-4]
000002A1: 89 C3                                                 MOV  EBX, EAX
000002A3: 8B 03                                                 MOV  EAX, [EBX]
000002A5: 50                                                    PUSH EAX
000002A6: 8D 45 F8                                              LEA  EAX, [EBP-8]
000002A9: 89 C3                                                 MOV  EBX, EAX
000002AB: 8B 03                                                 MOV  EAX, [EBX]
000002AD: 5B                                                    POP  EBX
000002AE: F7 EB                                                 IMUL EBX
000002B0: 89 EC                                                 MOV  ESP, EBP
000002B2: 5D                                                    POP  EBP
000002B3: C3                                                    RETN
                                                                
                                                                _atoib:
000002B4: 55                                                    PUSH EBP
000002B5: 89 E5                                                 MOV  EBP, ESP
000002B7: 83 C4 F8                                              ADD  ESP, -8
000002BA: 8D 45 FC                                              LEA  EAX, [EBP-4]
000002BD: 89 C3                                                 MOV  EBX, EAX
000002BF: 31 C0                                                 XOR  EAX, EAX
000002C1: 89 03                                                 MOV  [EBX], EAX
                                                                _lib_34:
000002C3: 8D 45 0C                                              LEA  EAX, [EBP+12]
000002C6: 89 C3                                                 MOV  EBX, EAX
000002C8: 8B 03                                                 MOV  EAX, [EBX]
000002CA: 89 C3                                                 MOV  EBX, EAX
000002CC: 0F BE 03                                              MOVSX EAX, BYTE [EBX]
000002CF: 50                                                    PUSH EAX
000002D0: B1 01                                                 MOV  CL, 1
000002D2: E8 DB 0B 00 00                                        CALL _isspace
000002D7: 83 C4 04                                              ADD  ESP, 4
000002DA: 09 C0                                                 OR   EAX, EAX
000002DC: 75 02                                                 JNE  short _lib_36
000002DE: EB 0C                                                 JMP  short _lib_35
                                                                _lib_36:
000002E0: 8D 45 0C                                              LEA  EAX, [EBP+12]
000002E3: 89 C3                                                 MOV  EBX, EAX
000002E5: 8B 03                                                 MOV  EAX, [EBX]
000002E7: 40                                                    INC  EAX
000002E8: 89 03                                                 MOV  [EBX], EAX
000002EA: EB D7                                                 JMP  short _lib_34
                                                                _lib_35:
                                                                _lib_37:
000002EC: 8D 45 F8                                              LEA  EAX, [EBP-8]
000002EF: 50                                                    PUSH EAX
000002F0: 8D 45 0C                                              LEA  EAX, [EBP+12]
000002F3: 89 C3                                                 MOV  EBX, EAX
000002F5: 8B 03                                                 MOV  EAX, [EBX]
000002F7: 40                                                    INC  EAX
000002F8: 89 03                                                 MOV  [EBX], EAX
000002FA: 48                                                    DEC  EAX
000002FB: 89 C3                                                 MOV  EBX, EAX
000002FD: 0F BE 03                                              MOVSX EAX, BYTE [EBX]
00000300: BB 7F 00 00 00                                        MOV  EBX, 127
00000305: 21 D8                                                 AND  EAX, EBX
00000307: 5B                                                    POP  EBX
00000308: 89 03                                                 MOV  [EBX], EAX
0000030A: 89 C3                                                 MOV  EBX, EAX
0000030C: B8 30 00 00 00                                        MOV  EAX, 48
00000311: E8 38 FD FF FF                                        CALL __ge
00000316: 09 C0                                                 OR   EAX, EAX
00000318: 75 05                                                 JNE  short _lib_39
0000031A: E9 BB 00 00 00                                        JMP  _lib_38
                                                                _lib_39:
0000031F: 8D 45 F8                                              LEA  EAX, [EBP-8]
00000322: 89 C3                                                 MOV  EBX, EAX
00000324: 8B 03                                                 MOV  EAX, [EBX]
00000326: 89 C3                                                 MOV  EBX, EAX
00000328: B8 61 00 00 00                                        MOV  EAX, 97
0000032D: E8 1C FD FF FF                                        CALL __ge
00000332: 09 C0                                                 OR   EAX, EAX
00000334: 75 02                                                 JNE  short _lib_41
00000336: EB 17                                                 JMP  short _lib_40
                                                                _lib_41:
00000338: 8D 45 F8                                              LEA  EAX, [EBP-8]
0000033B: 50                                                    PUSH EAX
0000033C: 89 C3                                                 MOV  EBX, EAX
0000033E: 8B 03                                                 MOV  EAX, [EBX]
00000340: 89 C3                                                 MOV  EBX, EAX
00000342: B8 57 00 00 00                                        MOV  EAX, 87
00000347: 93                                                    XCHG EAX, EBX
00000348: 29 D8                                                 SUB  EAX, EBX
0000034A: 5B                                                    POP  EBX
0000034B: 89 03                                                 MOV  [EBX], EAX
0000034D: EB 45                                                 JMP  short _lib_42
                                                                _lib_40:
0000034F: 8D 45 F8                                              LEA  EAX, [EBP-8]
00000352: 89 C3                                                 MOV  EBX, EAX
00000354: 8B 03                                                 MOV  EAX, [EBX]
00000356: 89 C3                                                 MOV  EBX, EAX
00000358: B8 41 00 00 00                                        MOV  EAX, 65
0000035D: E8 EC FC FF FF                                        CALL __ge
00000362: 09 C0                                                 OR   EAX, EAX
00000364: 75 02                                                 JNE  short _lib_44
00000366: EB 17                                                 JMP  short _lib_43
                                                                _lib_44:
00000368: 8D 45 F8                                              LEA  EAX, [EBP-8]
0000036B: 50                                                    PUSH EAX
0000036C: 89 C3                                                 MOV  EBX, EAX
0000036E: 8B 03                                                 MOV  EAX, [EBX]
00000370: 89 C3                                                 MOV  EBX, EAX
00000372: B8 37 00 00 00                                        MOV  EAX, 55
00000377: 93                                                    XCHG EAX, EBX
00000378: 29 D8                                                 SUB  EAX, EBX
0000037A: 5B                                                    POP  EBX
0000037B: 89 03                                                 MOV  [EBX], EAX
0000037D: EB 15                                                 JMP  short _lib_45
                                                                _lib_43:
0000037F: 8D 45 F8                                              LEA  EAX, [EBP-8]
00000382: 50                                                    PUSH EAX
00000383: 89 C3                                                 MOV  EBX, EAX
00000385: 8B 03                                                 MOV  EAX, [EBX]
00000387: 89 C3                                                 MOV  EBX, EAX
00000389: B8 30 00 00 00                                        MOV  EAX, 48
0000038E: 93                                                    XCHG EAX, EBX
0000038F: 29 D8                                                 SUB  EAX, EBX
00000391: 5B                                                    POP  EBX
00000392: 89 03                                                 MOV  [EBX], EAX
                                                                _lib_45:
                                                                _lib_42:
00000394: 8D 45 F8                                              LEA  EAX, [EBP-8]
00000397: 89 C3                                                 MOV  EBX, EAX
00000399: 8B 03                                                 MOV  EAX, [EBX]
0000039B: 50                                                    PUSH EAX
0000039C: 8D 45 08                                              LEA  EAX, [EBP+8]
0000039F: 89 C3                                                 MOV  EBX, EAX
000003A1: 8B 03                                                 MOV  EAX, [EBX]
000003A3: 5B                                                    POP  EBX
000003A4: E8 A5 FC FF FF                                        CALL __ge
000003A9: 09 C0                                                 OR   EAX, EAX
000003AB: 75 02                                                 JNE  short _lib_47
000003AD: EB 02                                                 JMP  short _lib_46
                                                                _lib_47:
000003AF: EB 29                                                 JMP  short _lib_38
                                                                _lib_46:
000003B1: 8D 45 FC                                              LEA  EAX, [EBP-4]
000003B4: 50                                                    PUSH EAX
000003B5: 8D 45 08                                              LEA  EAX, [EBP+8]
000003B8: 89 C3                                                 MOV  EBX, EAX
000003BA: 8B 03                                                 MOV  EAX, [EBX]
000003BC: 50                                                    PUSH EAX
000003BD: 8D 45 FC                                              LEA  EAX, [EBP-4]
000003C0: 89 C3                                                 MOV  EBX, EAX
000003C2: 8B 03                                                 MOV  EAX, [EBX]
000003C4: 5B                                                    POP  EBX
000003C5: F7 EB                                                 IMUL EBX
000003C7: 50                                                    PUSH EAX
000003C8: 8D 45 F8                                              LEA  EAX, [EBP-8]
000003CB: 89 C3                                                 MOV  EBX, EAX
000003CD: 8B 03                                                 MOV  EAX, [EBX]
000003CF: 5B                                                    POP  EBX
000003D0: 01 D8                                                 ADD  EAX, EBX
000003D2: 5B                                                    POP  EBX
000003D3: 89 03                                                 MOV  [EBX], EAX
000003D5: E9 12 FF FF FF                                        JMP  _lib_37
                                                                _lib_38:
000003DA: 8D 45 FC                                              LEA  EAX, [EBP-4]
000003DD: 89 C3                                                 MOV  EBX, EAX
000003DF: 8B 03                                                 MOV  EAX, [EBX]
000003E1: 89 EC                                                 MOV  ESP, EBP
000003E3: 5D                                                    POP  EBP
000003E4: C3                                                    RETN
                                                                
                                                                _fgets:			; fgets(str,size,fd)
000003E5: 55                                                    PUSH EBP
000003E6: 89 E5                                                 MOV  EBP, ESP		; return (_gets(str,size,fd,1));
000003E8: 8D 5D 10                                              LEA  EBX, [EBP+16]
000003EB: 8B 03                                                 MOV  EAX, [EBX]
000003ED: 50                                                    PUSH EAX
000003EE: 8D 5D 0C                                              LEA  EBX, [EBP+12]
000003F1: 8B 03                                                 MOV  EAX, [EBX]
000003F3: 50                                                    PUSH EAX
000003F4: 8D 5D 08                                              LEA  EBX, [EBP+8]
000003F7: 8B 03                                                 MOV  EAX, [EBX]
000003F9: 50                                                    PUSH EAX
000003FA: B8 01 00 00 00                                        MOV  EAX, 1
000003FF: 50                                                    PUSH EAX
00000400: B1 04                                                 MOV  CL, 4
00000402: E8 1B 01 00 00                                        CALL __gets
00000407: 83 C4 10                                              ADD  ESP, 16
0000040A: 5D                                                    POP  EBP
0000040B: C3                                                    RETN
                                                                
                                                                _gets:			; gets(str)
0000040C: 55                                                    PUSH EBP
0000040D: 89 E5                                                 MOV  EBP, ESP
0000040F: 83 C4 F4                                              ADD  ESP, -12		; size,backup,*next
00000412: C7 45 FC FF 7F 00 00                                  MOV  DWORD [EBP-4], 32767 ; size
00000419: 8D 45 F4                                              LEA  EAX, [EBP-12]
0000041C: 50                                                    PUSH EAX		; *next
0000041D: 8D 5D 08                                              LEA  EBX, [EBP+8]	; *str
00000420: 8B 03                                                 MOV  EAX, [EBX]		; str
00000422: 5B                                                    POP  EBX
00000423: 89 03                                                 MOV [EBX], EAX		; next=str;
                                                                _gets_1:
00000425: 8D 5D FC                                              LEA  EBX, [EBP-4]	; *size
00000428: 8B 03                                                 MOV  EAX, [EBX]		; ebx = *size, eax = size
0000042A: 48                                                    DEC  EAX
0000042B: 89 03                                                 MOV  [EBX], EAX
0000042D: 09 C0                                                 OR   EAX,EAX
0000042F: 75 05                                                 JNZ  short _gets_2	; while(--size>0)
00000431: E9 D6 00 00 00                                        JMP  _gets_13
                                                                _gets_2:
00000436: 8D 5D F4                                              LEA  EBX, [EBP-12]	; (*next=OS_getc())
00000439: 8B 03                                                 MOV  EAX, [EBX]
0000043B: 50                                                    PUSH EAX		; *next
0000043C: B1 00                                                 MOV  CL,0		; no arguments
0000043E: E8 C2 12 00 00                                        CALL _OS_getc
00000443: 5B                                                    POP  EBX		; *next = *str
00000444: 88 03                                                 MOV  [EBX], AL		; *str=OS_getc()
00000446: E9 96 00 00 00                                        JMP  _gets_12		; {switch (*next=OS_getc())
                                                                _gets_3:
0000044B: 8D 45 F4                                              LEA  EAX, [EBP-12]	; **next
0000044E: 8B 18                                                 MOV  EBX, [EAX]		; *next (address)
00000450: 31 C0                                                 XOR  EAX, EAX		; NULL
00000452: 88 03                                                 MOV  [EBX], AL		; *next = NULL (value)
00000454: 53                                                    PUSH  EBX
00000455: 8D 45 08                                              LEA  EAX, [EBP+8]	; *str
00000458: 8B 18                                                 MOV  EBX, [EAX]		; eax = *str, ebx = str
0000045A: 58                                                    POP  EAX		; next
0000045B: E8 CB FB FF FF                                        CALL __eq		; if(next==str) return (NULL);
00000460: 09 C0                                                 OR   EAX, EAX
00000462: 74 02                                                 JZ  short _gets_4	; false (eax = 0)
                                                                			; true (eax = 1)
                                                                			; return (NULL);
00000464: 31 DB                                                 XOR  EBX, EBX ; NULL
                                                                _gets_4:		; return (str);
00000466: 89 D8                                                 MOV  EAX, EBX
00000468: 89 EC                                                 MOV  ESP, EBP
0000046A: 5D                                                    POP  EBP
0000046B: C3                                                    RETN
                                                                
                                                                _gets_5:		; case '\n' 	
0000046C: 8D 45 F4                                              LEA  EAX, [EBP-12]	; **next
0000046F: 8B 18                                                 MOV  EBX, [EAX]		; *next (address)
00000471: 31 C0                                                 XOR  EAX, EAX		; NULL
00000473: 89 03                                                 MOV  [EBX],EAX		; *next=NULL; (value)
                                                                
00000475: 8D 5D 08                                              LEA  EBX, [EBP+8]	; *str (ebx = str address)
00000478: 8B 03                                                 MOV  EAX, [EBX]		; return (str);
0000047A: 89 EC                                                 MOV  ESP, EBP
0000047C: 5D                                                    POP  EBP
0000047D: C3                                                    RETN
                                                                
                                                                _gets_6:		; case '\b'
0000047E: 8D 5D F4                                              LEA  EBX, [EBP-12]	; *next
00000481: 8B 03                                                 MOV  EAX, [EBX]		; ebx = *next, eax = next
00000483: 50                                                    PUSH EAX
00000484: 8D 5D 08                                              LEA  EBX, [EBP+8]	; *str
00000487: 8B 03                                                 MOV  EAX, [EBX]		; ebx = *str, eax = str
00000489: 5B                                                    POP  EBX		; next (*next, string address/pos)
0000048A: E8 87 FB FF FF                                        CALL __ugt		; if(next>str) backup=1;
                                                                ;OR  EAX,EAX
                                                                ;JNZ short _lib_63	; true (eax=1)
                                                                ;JMP short _lib_62	; false (eax=0)
                                                                ;_lib_63:		; backup=1;
                                                                ;LEA EBX, [EBP-8]	; *backup
                                                                ;MOV EAX, 1		; ebx = *backup (pointer to backup val)	
                                                                ;MOV [EBX], EAX		; backup=1
                                                                ;;JMP short _lib_64
                                                                ;JMP short _gets_8
                                                                ;_lib_62:		; else backup=0;
0000048F: 8D 5D F8                                              LEA EBX, [EBP-8]	; ebx = *backup
                                                                ;XOR EAX, EAX ; 0
00000492: 89 03                                                 MOV  [EBX], EAX		; backup = 1 or backup = 0
                                                                ;_lib_64:
00000494: EB 14                                                 JMP  short _gets_8	; goto backout;
                                                                _gets_7:		; case '\r' ; WIPE
00000496: 8D 45 F8                                              LEA  EAX, [EBP-8]	; *backup ; backup=next-str;
00000499: 50                                                    PUSH EAX
0000049A: 8D 5D F4                                              LEA  EBX, [EBP-12]	; *next
                                                                ;MOV EAX, [EBX]		; ebx = *next, eax = next
                                                                ;PUSH EAX
0000049D: FF 33                                                 PUSH DWORD [EBX]
0000049F: 8D 45 08                                              LEA  EAX, [EBP+8]	; *str
000004A2: 8B 18                                                 MOV  EBX, [EAX]		; eax = *str, ebx = str 
000004A4: 58                                                    POP  EAX		; next
000004A5: 29 D8                                                 SUB  EAX, EBX		; next-str
000004A7: 5B                                                    POP  EBX		; *backup
000004A8: 89 03                                                 MOV  [EBX], EAX		; ebx = *backup, eax = backup (value)
                                                                			; backup=next-str;
                                                                _gets_8:		; backout:
                                                                ;JMP short _lib_67	; if(0/*iscons(fd)*/)
000004AA: 8D 5D FC                                              LEA  EBX, [EBP-4]	; *size
                                                                ;MOV EAX, [EBX]
                                                                ;INC EAX
                                                                ;MOV [EBX], EAX
000004AD: FF 03                                                 INC  DWORD [EBX]	; ++size;	
                                                                _gets_9:		; while(backup--)
000004AF: 8D 5D F8                                              LEA  EBX, [EBP-8]	; *backup
000004B2: 8B 03                                                 MOV  EAX, [EBX]
000004B4: 48                                                    DEC  EAX
000004B5: 89 03                                                 MOV  [EBX], EAX
000004B7: 40                                                    INC  EAX
                                                                ;OR  EAX, EAX
000004B8: 75 05                                                 JNZ  short _gets_10
                                                                ;JMP short _lib_69
000004BA: E9 66 FF FF FF                                        JMP  _gets_1
                                                                _gets_10:		; puts("\b \b");
000004BF: B8 1E 05 00 00                                        MOV  EAX, _gets_14	; "\b \b"
000004C4: 50                                                    PUSH EAX
000004C5: E8 AE FB FF FF                                        CALL _puts
000004CA: 58                                                    POP  EAX		; add esp, 4
000004CB: 8D 5D F4                                              LEA  EBX, [EBP-12]	; *next
                                                                ;MOV EAX, [EBX]		; ebx = *next (address)
                                                                ;DEC EAX
                                                                ;MOV [EBX], EAX
000004CE: FF 0B                                                 DEC  DWORD [EBX]	; --next	
000004D0: 8D 5D FC                                              LEA  EBX, [EBP-4]	; *size
                                                                ;MOV EAX, [EBX]		; ebx = *size
                                                                ;INC EAX
                                                                ;MOV [EBX], EAX
000004D3: FF 03                                                 INC  DWORD [EBX]	; ++size
000004D5: EB D8                                                 JMP  short _gets_9
                                                                ;_lib_69:
                                                                ;JMP _gets_1
                                                                ;_lib_67:
                                                                _gets_11:		; default:
000004D7: 8D 5D F4                                              LEA  EBX, [EBP-12]	; **next
                                                                ;MOV EAX, [EBX]		; ebx = *next
                                                                ;INC EAX		; ++next
                                                                ;MOV [EBX], EAX
000004DA: FF 03                                                 INC  DWORD [EBX]
                                                                ;JMP short _lib_55
000004DC: E9 44 FF FF FF                                        jmp  _gets_1	
                                                                _gets_12:		; {switch (*next=OS_getc())
000004E1: E8 7C FB FF FF                                        CALL __switch
000004E6: 4B 04 00 00                                            DD  _gets_3		; case EOF
000004EA: FF FF FF FF                                            DD  -1
000004EE: 6C 04 00 00                                            DD  _gets_5		; case '\n' 
000004F2: 0A 00 00 00                                            DD  10
000004F6: 7E 04 00 00                                            DD  _gets_6		; case '\b' ; case RUB
000004FA: 08 00 00 00                                            DD  8
000004FE: 96 04 00 00                                            DD  _gets_7		; case '\r' ; case WIPE
00000502: 18 00 00 00                                            DD  24
00000506: 00 00 00 00                                            DD  0			; case default
0000050A: EB CB                                                 JMP short _gets_11	; default: ++next;
                                                                ;_lib_55:
                                                                ;JMP _gets_1
                                                                _gets_13:
0000050C: 8D 45 F4                                              LEA  EAX, [EBP-12]	; **next
0000050F: 8B 18                                                 MOV  EBX, [EAX]		; ebx = *next, eax = **next
00000511: 31 C0                                                 XOR  EAX, EAX		; NULL
00000513: 88 03                                                 MOV  [EBX], AL		; *next = NULL;
00000515: 8D 5D 08                                              LEA  EBX, [EBP+8]	; **str
00000518: 8B 03                                                 MOV  EAX, [EBX]		; ebx = *str, eax = str
0000051A: 89 EC                                                 MOV  ESP, EBP		; return (str);
0000051C: 5D                                                    POP  EBP
0000051D: C3                                                    RETN
                                                                
0000051E: 08 20 08 00                                           _gets_14: DB 8,32,8,0	; "\b \b"
                                                                
                                                                __gets:			; _gets(str,size,fd,nl)
00000522: 55                                                    PUSH EBP
00000523: 89 E5                                                 MOV  EBP, ESP
00000525: 83 C4 F8                                              ADD  ESP, -8		; int backup; char *next;
00000528: 8D 5D 14                                              LEA  EBX, [EBP+20]
0000052B: 8B 03                                                 MOV  EAX, [EBX]
0000052D: 8D 5D F8                                              LEA  EBX, [EBP-8]
00000530: 89 03                                                 MOV  [EBX], EAX		; next=str;
                                                                _lib_51:		; while(--size>0)
00000532: 8D 5D 10                                              LEA  EBX, [EBP+16]
00000535: 8B 03                                                 MOV  EAX, [EBX]
00000537: 48                                                    DEC  EAX
00000538: 89 03                                                 MOV  [EBX], EAX
0000053A: 09 C0                                                 OR   EAX, EAX
0000053C: 75 12                                                 JNZ  short _lib_53
                                                                _lib_52:
0000053E: 8D 45 F8                                              LEA  EAX, [EBP-8]
00000541: 8B 18                                                 MOV  EBX, [EAX]
00000543: 31 C0                                                 XOR  EAX, EAX		; 0
00000545: 88 03                                                 MOV  [EBX], AL		; *next = NULL;
00000547: 8D 5D 14                                              LEA  EBX, [EBP+20]
0000054A: 8B 03                                                 MOV  EAX, [EBX]		; return (str);
0000054C: 89 EC                                                 MOV  ESP, EBP
0000054E: 5D                                                    POP  EBP
0000054F: C3                                                    RETN
                                                                _lib_53:
00000550: 8D 5D F8                                              LEA  EBX, [EBP-8]
00000553: 8B 03                                                 MOV  EAX, [EBX]
00000555: 50                                                    PUSH EAX		; next
00000556: 8D 5D 0C                                              LEA  EBX, [EBP+12]	; fd
00000559: 8B 03                                                 MOV  EAX, [EBX]
0000055B: 50                                                    PUSH EAX
0000055C: B1 01                                                 MOV  CL,1
0000055E: E8 71 11 00 00                                        CALL _OS_fgetc
00000563: 83 C4 04                                              ADD  ESP, 4
00000566: 5B                                                    POP  EBX
00000567: 88 03                                                 MOV  [EBX], AL		; *next=fgetc(fd)
00000569: EB 77                                                 JMP  short _lib_56	; jump to {switch (*next=fgetc(fd)) 
                                                                _lib_57:		; {case EOF:
0000056B: 8D 45 F8                                              LEA  EAX, [EBP-8]
0000056E: 8B 18                                                 MOV  EBX, [EAX]
00000570: 31 C0                                                 XOR  EAX, EAX
00000572: 88 03                                                 MOV  [EBX], AL		; *next=NULL;
                                                                ;LEA EAX, [EBP-8]
                                                                ;MOV EBX, [EAX]
00000574: 53                                                    PUSH EBX
00000575: 8D 5D 14                                              LEA  EBX, [EBP+20]
00000578: 8B 03                                                 MOV  EAX, [EBX]
0000057A: 5B                                                    POP  EBX
0000057B: E8 AB FA FF FF                                        CALL __eq		; if(next==str) return (NULL);
00000580: 09 C0                                                 OR   EAX, EAX
00000582: 74 04                                                 JZ   short _lib_58
                                                                ;_lib_59:
00000584: 31 C0                                                 XOR  EAX, EAX		; return (NULL);
                                                                ;MOV ESP, EBP
                                                                ;POP EBP
                                                                ;RETN
00000586: EB 05                                                 JMP  short _lib_59
                                                                _lib_58:
00000588: 8D 5D 14                                              LEA  EBX, [EBP+20]
0000058B: 8B 03                                                 MOV  EAX, [EBX]		; return (str);
                                                                _lib_59:
0000058D: 89 EC                                                 MOV  ESP, EBP
0000058F: 5D                                                    POP  EBP
00000590: C3                                                    RETN
                                                                _lib_60:		; case '\n':
00000591: 8D 5D F8                                              LEA  EBX, [EBP-8]
00000594: 8B 03                                                 MOV  EAX, [EBX]
00000596: 50                                                    PUSH EAX
00000597: 8D 5D 08                                              LEA  EBX, [EBP+8]	; nl
0000059A: 8B 03                                                 MOV  EAX, [EBX]
0000059C: 5B                                                    POP  EBX
0000059D: 01 C3                                                 ADD  EBX, EAX
0000059F: 31 C0                                                 XOR  EAX, EAX		; 0
000005A1: 89 03                                                 MOV  [EBX], EAX		; *(next+nl)=NULL;
000005A3: 8D 5D 14                                              LEA  EBX, [EBP+20]
000005A6: 8B 03                                                 MOV  EAX, [EBX]		; return (str);
                                                                ;MOV ESP, EBP
                                                                ;POP EBP
                                                                ;RETN
000005A8: EB E3                                                 JMP  short _lib_59
                                                                _lib_61:		; case RUB:
000005AA: 8D 5D F8                                              LEA  EBX, [EBP-8]
000005AD: 8B 03                                                 MOV  EAX, [EBX]
000005AF: 50                                                    PUSH EAX
000005B0: 8D 5D 14                                              LEA  EBX, [EBP+20]
000005B3: 8B 03                                                 MOV  EAX, [EBX]		; str
000005B5: 5B                                                    POP  EBX
000005B6: E8 5B FA FF FF                                        CALL __ugt		; if(next>str) backup=1;
                                                                ;OR  EAX, EAX
                                                                ;JZ  short _lib_62	; else
                                                                ;_lib_63:
000005BB: 8D 5D FC                                              LEA  EBX, [EBP-4]
                                                                ;MOV EAX, 1
                                                                ;eax = 1
                                                                ;MOV [EBX], EAX
                                                                ;JMP short _lib_64
                                                                ;_lib_62:		; else backup=0;
                                                                ;LEA EBX,[EBP-4]
                                                                ;XOR EAX,EAX
                                                                ;eax = 0
000005BE: 89 03                                                 MOV  [EBX],EAX
                                                                ;_lib_64:
000005C0: EB 13                                                 JMP  short _lib_65	; goto backout;
                                                                _lib_66:		; case WIPE: /* \r */
000005C2: 8D 5D F8                                              LEA  EBX, [EBP-8]
000005C5: 8B 03                                                 MOV  EAX, [EBX]
000005C7: 50                                                    PUSH EAX		; next
000005C8: 8D 45 14                                              LEA  EAX, [EBP+20]
000005CB: 8B 18                                                 MOV  EBX, [EAX]		; str
000005CD: 58                                                    POP  EAX
000005CE: 29 D8                                                 SUB  EAX, EBX		; next-str;
000005D0: 8D 5D FC                                              LEA  EBX, [EBP-4]
000005D3: 89 03                                                 MOV  [EBX], EAX		; backup=next-str;
                                                                _lib_64:
                                                                _lib_65:
                                                                			; backout: (if (0))
                                                                _lib_67:		; continue;
                                                                _lib_71:		; ++next;	
000005D5: 8D 5D F8                                              LEA  EBX, [EBP-8]
000005D8: 8B 03                                                 MOV  EAX, [EBX]
000005DA: 40                                                    INC  EAX
000005DB: 89 03                                                 MOV  [EBX], EAX
                                                                ;JMP _lib_55
000005DD: E9 50 FF FF FF                                        JMP  _lib_51
                                                                _lib_56:		; {switch (*next=fgetc(fd)) 
000005E2: E8 7B FA FF FF                                        CALL __switch
000005E7: 6B 05 00 00                                            DD  _lib_57		; {case EOF:
000005EB: FF FF FF FF                                            DD  -1
000005EF: 91 05 00 00                                            DD  _lib_60		; case '\n':
000005F3: 0A 00 00 00                                            DD  10
000005F7: AA 05 00 00                                            DD  _lib_61		; case RUB:
000005FB: 08 00 00 00                                            DD  8
000005FF: C2 05 00 00                                            DD  _lib_66		; case WIPE: /* \r */
00000603: 18 00 00 00                                            DD  24
00000607: 00 00 00 00                                            DD  0
0000060B: EB C8                                                 JMP  short _lib_71 	; default: 
                                                                ;_lib_55:
                                                                ;JMP _lib_51
                                                                
                                                                _fprintf:
0000060D: 55                                                    PUSH EBP
0000060E: 89 E5                                                 MOV  EBP, ESP
00000610: 83 C4 FC                                              ADD  ESP, -4
00000613: 8D 45 FC                                              LEA  EAX, [EBP-4]
00000616: 50                                                    PUSH EAX
00000617: E8 ED F9 FF FF                                        CALL _CCARGC
0000061C: 50                                                    PUSH EAX
0000061D: 8D 45 08                                              LEA  EAX, [EBP+8]
00000620: 5B                                                    POP  EBX
00000621: D1 E3                                                 SHL  EBX, 1
00000623: D1 E3                                                 SHL  EBX, 1
00000625: 01 D8                                                 ADD  EAX, EBX
00000627: 5B                                                    POP  EBX
00000628: 89 03                                                 MOV  [EBX], EAX
0000062A: 8D 45 FC                                              LEA  EAX, [EBP-4]
0000062D: 89 C3                                                 MOV  EBX, EAX
0000062F: 8B 03                                                 MOV  EAX, [EBX]
00000631: 48                                                    DEC  EAX
00000632: 48                                                    DEC  EAX
00000633: 48                                                    DEC  EAX
00000634: 48                                                    DEC  EAX
00000635: 89 03                                                 MOV  [EBX], EAX
00000637: 89 C3                                                 MOV  EBX, EAX
00000639: 8B 03                                                 MOV  EAX, [EBX]
0000063B: 50                                                    PUSH EAX
0000063C: 8D 45 FC                                              LEA  EAX, [EBP-4]
0000063F: 89 C3                                                 MOV  EBX, EAX
00000641: 8B 03                                                 MOV  EAX, [EBX]
00000643: 48                                                    DEC  EAX
00000644: 48                                                    DEC  EAX
00000645: 48                                                    DEC  EAX
00000646: 48                                                    DEC  EAX
00000647: 89 03                                                 MOV  [EBX], EAX
00000649: 50                                                    PUSH EAX
0000064A: B1 02                                                 MOV  CL, 2
0000064C: E8 07 00 00 00                                        CALL __print
00000651: 83 C4 08                                              ADD  ESP, 8
00000654: 89 EC                                                 MOV  ESP, EBP
00000656: 5D                                                    POP  EBP
00000657: C3                                                    RETN
                                                                
                                                                __print:
00000658: 55                                                    PUSH EBP
00000659: 89 E5                                                 MOV EBP,ESP
0000065B: 83 C4 C8                                              ADD ESP,-56
0000065E: 8D 45 F0                                              LEA EAX,[EBP-16]
00000661: 89 C3                                                 MOV EBX,EAX
00000663: 31 C0                                                 XOR EAX,EAX
00000665: 89 03                                                 MOV [EBX],EAX
00000667: 8D 45 E0                                              LEA EAX,[EBP-32]
0000066A: 50                                                    PUSH EAX
0000066B: 8D 45 08                                              LEA EAX,[EBP+8]
0000066E: 89 C3                                                 MOV EBX,EAX
00000670: 8B 03                                                 MOV EAX, [EBX]
00000672: 48                                                    DEC EAX
00000673: 48                                                    DEC EAX
00000674: 48                                                    DEC EAX
00000675: 48                                                    DEC EAX
00000676: 89 03                                                 MOV [EBX],EAX
00000678: 40                                                    INC EAX
00000679: 40                                                    INC EAX
0000067A: 40                                                    INC EAX
0000067B: 40                                                    INC EAX
0000067C: 89 C3                                                 MOV EBX,EAX
0000067E: 8B 03                                                 MOV EAX, [EBX]
00000680: 5B                                                    POP EBX
00000681: 89 03                                                 MOV [EBX],EAX
                                                                _lib_75:
00000683: 8D 45 E0                                              LEA EAX,[EBP-32]
00000686: 89 C3                                                 MOV EBX,EAX
00000688: 8B 03                                                 MOV EAX, [EBX]
0000068A: 89 C3                                                 MOV EBX,EAX
0000068C: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
0000068F: 09 C0                                                 OR EAX,EAX
00000691: 75 05                                                 JNE _lib_77
00000693: E9 C6 04 00 00                                        JMP _lib_76
                                                                _lib_77:
00000698: 8D 45 E0                                              LEA EAX,[EBP-32]
0000069B: 89 C3                                                 MOV EBX,EAX
0000069D: 8B 03                                                 MOV EAX, [EBX]
0000069F: 89 C3                                                 MOV EBX,EAX
000006A1: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
000006A4: 89 C3                                                 MOV EBX,EAX
000006A6: B8 25 00 00 00                                        MOV EAX,37
000006AB: E8 82 F9 FF FF                                        CALL __ne
000006B0: 09 C0                                                 OR EAX,EAX
000006B2: 75 02                                                 JNE _lib_79
000006B4: EB 31                                                 JMP _lib_78
                                                                _lib_79:
000006B6: 8D 45 E0                                              LEA EAX,[EBP-32]
000006B9: 89 C3                                                 MOV EBX,EAX
000006BB: 8B 03                                                 MOV EAX, [EBX]
000006BD: 40                                                    INC EAX
000006BE: 89 03                                                 MOV [EBX],EAX
000006C0: 48                                                    DEC EAX
000006C1: 89 C3                                                 MOV EBX,EAX
000006C3: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
000006C6: 50                                                    PUSH EAX
000006C7: 8D 45 0C                                              LEA EAX,[EBP+12]
000006CA: 89 C3                                                 MOV EBX,EAX
000006CC: 8B 03                                                 MOV EAX, [EBX]
000006CE: 50                                                    PUSH EAX
000006CF: B1 02                                                 MOV CL,2
000006D1: E8 3D 10 00 00                                        CALL _OS_fputc
000006D6: 83 C4 08                                              ADD ESP,8
000006D9: 8D 45 F0                                              LEA EAX,[EBP-16]
000006DC: 89 C3                                                 MOV EBX,EAX
000006DE: 8B 03                                                 MOV EAX, [EBX]
000006E0: 40                                                    INC EAX
000006E1: 89 03                                                 MOV [EBX],EAX
000006E3: EB 9E                                                 JMP _lib_75
000006E5: EB 0A                                                 JMP _lib_80
                                                                _lib_78:
000006E7: 8D 45 E0                                              LEA EAX,[EBP-32]
000006EA: 89 C3                                                 MOV EBX,EAX
000006EC: 8B 03                                                 MOV EAX, [EBX]
000006EE: 40                                                    INC EAX
000006EF: 89 03                                                 MOV [EBX],EAX
                                                                _lib_80:
000006F1: 8D 45 E0                                              LEA EAX,[EBP-32]
000006F4: 89 C3                                                 MOV EBX,EAX
000006F6: 8B 03                                                 MOV EAX, [EBX]
000006F8: 89 C3                                                 MOV EBX,EAX
000006FA: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
000006FD: 89 C3                                                 MOV EBX,EAX
000006FF: B8 25 00 00 00                                        MOV EAX,37
00000704: E8 22 F9 FF FF                                        CALL __eq
00000709: 09 C0                                                 OR EAX,EAX
0000070B: 75 02                                                 JNE _lib_82
0000070D: EB 32                                                 JMP _lib_81
                                                                _lib_82:
0000070F: 8D 45 E0                                              LEA EAX,[EBP-32]
00000712: 89 C3                                                 MOV EBX,EAX
00000714: 8B 03                                                 MOV EAX, [EBX]
00000716: 40                                                    INC EAX
00000717: 89 03                                                 MOV [EBX],EAX
00000719: 48                                                    DEC EAX
0000071A: 89 C3                                                 MOV EBX,EAX
0000071C: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
0000071F: 50                                                    PUSH EAX
00000720: 8D 45 0C                                              LEA EAX,[EBP+12]
00000723: 89 C3                                                 MOV EBX,EAX
00000725: 8B 03                                                 MOV EAX, [EBX]
00000727: 50                                                    PUSH EAX
00000728: B1 02                                                 MOV CL,2
0000072A: E8 E4 0F 00 00                                        CALL _OS_fputc
0000072F: 83 C4 08                                              ADD ESP,8
00000732: 8D 45 F0                                              LEA EAX,[EBP-16]
00000735: 89 C3                                                 MOV EBX,EAX
00000737: 8B 03                                                 MOV EAX, [EBX]
00000739: 40                                                    INC EAX
0000073A: 89 03                                                 MOV [EBX],EAX
0000073C: E9 42 FF FF FF                                        JMP _lib_75
                                                                _lib_81:
00000741: 8D 45 E0                                              LEA EAX,[EBP-32]
00000744: 89 C3                                                 MOV EBX,EAX
00000746: 8B 03                                                 MOV EAX, [EBX]
00000748: 89 C3                                                 MOV EBX,EAX
0000074A: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
0000074D: 89 C3                                                 MOV EBX,EAX
0000074F: B8 2D 00 00 00                                        MOV EAX,45
00000754: E8 D2 F8 FF FF                                        CALL __eq
00000759: 09 C0                                                 OR EAX,EAX
0000075B: 75 02                                                 JNE _lib_84
0000075D: EB 18                                                 JMP _lib_83
                                                                _lib_84:
0000075F: 8D 45 F8                                              LEA EAX,[EBP-8]
00000762: 89 C3                                                 MOV EBX,EAX
00000764: B8 01 00 00 00                                        MOV EAX,1
00000769: 89 03                                                 MOV [EBX],EAX
0000076B: 8D 45 E0                                              LEA EAX,[EBP-32]
0000076E: 89 C3                                                 MOV EBX,EAX
00000770: 8B 03                                                 MOV EAX, [EBX]
00000772: 40                                                    INC EAX
00000773: 89 03                                                 MOV [EBX],EAX
00000775: EB 09                                                 JMP _lib_85
                                                                _lib_83:
00000777: 8D 45 F8                                              LEA EAX,[EBP-8]
0000077A: 89 C3                                                 MOV EBX,EAX
0000077C: 31 C0                                                 XOR EAX,EAX
0000077E: 89 03                                                 MOV [EBX],EAX
                                                                _lib_85:
00000780: 8D 45 E0                                              LEA EAX,[EBP-32]
00000783: 89 C3                                                 MOV EBX,EAX
00000785: 8B 03                                                 MOV EAX, [EBX]
00000787: 89 C3                                                 MOV EBX,EAX
00000789: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
0000078C: 89 C3                                                 MOV EBX,EAX
0000078E: B8 30 00 00 00                                        MOV EAX,48
00000793: E8 93 F8 FF FF                                        CALL __eq
00000798: 09 C0                                                 OR EAX,EAX
0000079A: 75 02                                                 JNE _lib_87
0000079C: EB 0E                                                 JMP _lib_86
                                                                _lib_87:
0000079E: 8D 45 F4                                              LEA EAX,[EBP-12]
000007A1: 89 C3                                                 MOV EBX,EAX
000007A3: B8 30 00 00 00                                        MOV EAX,48
000007A8: 89 03                                                 MOV [EBX],EAX
000007AA: EB 0C                                                 JMP _lib_88
                                                                _lib_86:
000007AC: 8D 45 F4                                              LEA EAX,[EBP-12]
000007AF: 89 C3                                                 MOV EBX,EAX
000007B1: B8 20 00 00 00                                        MOV EAX,32
000007B6: 89 03                                                 MOV [EBX],EAX
                                                                _lib_88:
000007B8: 8D 45 E0                                              LEA EAX,[EBP-32]
000007BB: 89 C3                                                 MOV EBX,EAX
000007BD: 8B 03                                                 MOV EAX, [EBX]
000007BF: 89 C3                                                 MOV EBX,EAX
000007C1: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
000007C4: 50                                                    PUSH EAX
000007C5: B1 01                                                 MOV CL,1
000007C7: E8 50 06 00 00                                        CALL _isdigit
000007CC: 83 C4 04                                              ADD ESP,4
000007CF: 09 C0                                                 OR EAX,EAX
000007D1: 75 02                                                 JNE _lib_90
000007D3: EB 48                                                 JMP _lib_89
                                                                _lib_90:
000007D5: 8D 45 E4                                              LEA EAX,[EBP-28]
000007D8: 50                                                    PUSH EAX
000007D9: 8D 45 E0                                              LEA EAX,[EBP-32]
000007DC: 89 C3                                                 MOV EBX,EAX
000007DE: 8B 03                                                 MOV EAX, [EBX]
000007E0: 40                                                    INC EAX
000007E1: 89 03                                                 MOV [EBX],EAX
000007E3: 48                                                    DEC EAX
000007E4: 50                                                    PUSH EAX
000007E5: B1 01                                                 MOV CL,1
000007E7: E8 DD F9 FF FF                                        CALL _atoi
000007EC: 83 C4 04                                              ADD ESP,4
000007EF: 5B                                                    POP EBX
000007F0: 89 03                                                 MOV [EBX],EAX
                                                                _lib_91:
000007F2: 8D 45 E0                                              LEA EAX,[EBP-32]
000007F5: 89 C3                                                 MOV EBX,EAX
000007F7: 8B 03                                                 MOV EAX, [EBX]
000007F9: 89 C3                                                 MOV EBX,EAX
000007FB: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
000007FE: 50                                                    PUSH EAX
000007FF: B1 01                                                 MOV CL,1
00000801: E8 16 06 00 00                                        CALL _isdigit
00000806: 83 C4 04                                              ADD ESP,4
00000809: 09 C0                                                 OR EAX,EAX
0000080B: 75 02                                                 JNE _lib_93
0000080D: EB 0C                                                 JMP _lib_92
                                                                _lib_93:
0000080F: 8D 45 E0                                              LEA EAX,[EBP-32]
00000812: 89 C3                                                 MOV EBX,EAX
00000814: 8B 03                                                 MOV EAX, [EBX]
00000816: 40                                                    INC EAX
00000817: 89 03                                                 MOV [EBX],EAX
00000819: EB D7                                                 JMP _lib_91
                                                                _lib_92:
0000081B: EB 09                                                 JMP _lib_94
                                                                _lib_89:
0000081D: 8D 45 E4                                              LEA EAX,[EBP-28]
00000820: 89 C3                                                 MOV EBX,EAX
00000822: 31 C0                                                 XOR EAX,EAX
00000824: 89 03                                                 MOV [EBX],EAX
                                                                _lib_94:
00000826: 8D 45 E0                                              LEA EAX,[EBP-32]
00000829: 89 C3                                                 MOV EBX,EAX
0000082B: 8B 03                                                 MOV EAX, [EBX]
0000082D: 89 C3                                                 MOV EBX,EAX
0000082F: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
00000832: 89 C3                                                 MOV EBX,EAX
00000834: B8 2E 00 00 00                                        MOV EAX,46
00000839: E8 ED F7 FF FF                                        CALL __eq
0000083E: 09 C0                                                 OR EAX,EAX
00000840: 75 02                                                 JNE _lib_96
00000842: EB 47                                                 JMP _lib_95
                                                                _lib_96:
00000844: 8D 45 E8                                              LEA EAX,[EBP-24]
00000847: 50                                                    PUSH EAX
00000848: 8D 45 E0                                              LEA EAX,[EBP-32]
0000084B: 89 C3                                                 MOV EBX,EAX
0000084D: 8B 03                                                 MOV EAX, [EBX]
0000084F: 40                                                    INC EAX
00000850: 89 03                                                 MOV [EBX],EAX
00000852: 50                                                    PUSH EAX
00000853: B1 01                                                 MOV CL,1
00000855: E8 6F F9 FF FF                                        CALL _atoi
0000085A: 83 C4 04                                              ADD ESP,4
0000085D: 5B                                                    POP EBX
0000085E: 89 03                                                 MOV [EBX],EAX
                                                                _lib_97:
00000860: 8D 45 E0                                              LEA EAX,[EBP-32]
00000863: 89 C3                                                 MOV EBX,EAX
00000865: 8B 03                                                 MOV EAX, [EBX]
00000867: 89 C3                                                 MOV EBX,EAX
00000869: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
0000086C: 50                                                    PUSH EAX
0000086D: B1 01                                                 MOV CL,1
0000086F: E8 A8 05 00 00                                        CALL _isdigit
00000874: 83 C4 04                                              ADD ESP,4
00000877: 09 C0                                                 OR EAX,EAX
00000879: 75 02                                                 JNE _lib_99
0000087B: EB 0C                                                 JMP _lib_98
                                                                _lib_99:
0000087D: 8D 45 E0                                              LEA EAX,[EBP-32]
00000880: 89 C3                                                 MOV EBX,EAX
00000882: 8B 03                                                 MOV EAX, [EBX]
00000884: 40                                                    INC EAX
00000885: 89 03                                                 MOV [EBX],EAX
00000887: EB D7                                                 JMP _lib_97
                                                                _lib_98:
00000889: EB 09                                                 JMP _lib_100
                                                                _lib_95:
0000088B: 8D 45 E8                                              LEA EAX,[EBP-24]
0000088E: 89 C3                                                 MOV EBX,EAX
00000890: 31 C0                                                 XOR EAX,EAX
00000892: 89 03                                                 MOV [EBX],EAX
                                                                _lib_100:
00000894: 8D 45 FC                                              LEA EAX,[EBP-4]
00000897: 50                                                    PUSH EAX
00000898: 8D 45 08                                              LEA EAX,[EBP+8]
0000089B: 89 C3                                                 MOV EBX,EAX
0000089D: 8B 03                                                 MOV EAX, [EBX]
0000089F: 48                                                    DEC EAX
000008A0: 48                                                    DEC EAX
000008A1: 48                                                    DEC EAX
000008A2: 48                                                    DEC EAX
000008A3: 89 03                                                 MOV [EBX],EAX
000008A5: 40                                                    INC EAX
000008A6: 40                                                    INC EAX
000008A7: 40                                                    INC EAX
000008A8: 40                                                    INC EAX
000008A9: 89 C3                                                 MOV EBX,EAX
000008AB: 8B 03                                                 MOV EAX, [EBX]
000008AD: 5B                                                    POP EBX
000008AE: 89 03                                                 MOV [EBX],EAX
000008B0: 8D 45 DC                                              LEA EAX,[EBP-36]
000008B3: 50                                                    PUSH EAX
000008B4: 8D 45 C8                                              LEA EAX,[EBP-56]
000008B7: 5B                                                    POP EBX
000008B8: 89 03                                                 MOV [EBX],EAX
000008BA: 8D 45 E0                                              LEA EAX,[EBP-32]
000008BD: 89 C3                                                 MOV EBX,EAX
000008BF: 8B 03                                                 MOV EAX, [EBX]
000008C1: 40                                                    INC EAX
000008C2: 89 03                                                 MOV [EBX],EAX
000008C4: 48                                                    DEC EAX
000008C5: 89 C3                                                 MOV EBX,EAX
000008C7: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
000008CA: E9 DC 00 00 00                                        JMP _lib_103
                                                                _lib_104:
000008CF: 8D 45 C8                                              LEA EAX,[EBP-56]
000008D2: 50                                                    PUSH EAX
000008D3: 8D 45 FC                                              LEA EAX,[EBP-4]
000008D6: 89 C3                                                 MOV EBX,EAX
000008D8: 8B 03                                                 MOV EAX, [EBX]
000008DA: 5B                                                    POP EBX
000008DB: 88 03                                                 MOV [EBX],AL
000008DD: 8D 45 C8                                              LEA EAX,[EBP-56]
000008E0: BB 01 00 00 00                                        MOV EBX,1
000008E5: 01 D8                                                 ADD EAX,EBX
000008E7: 89 C3                                                 MOV EBX,EAX
000008E9: 31 C0                                                 XOR EAX,EAX
000008EB: 88 03                                                 MOV [EBX],AL
000008ED: E9 FC 00 00 00                                        JMP _lib_102
                                                                _lib_105:
000008F2: 8D 45 DC                                              LEA EAX,[EBP-36]
000008F5: 50                                                    PUSH EAX
000008F6: 8D 45 FC                                              LEA EAX,[EBP-4]
000008F9: 89 C3                                                 MOV EBX,EAX
000008FB: 8B 03                                                 MOV EAX, [EBX]
000008FD: 5B                                                    POP EBX
000008FE: 89 03                                                 MOV [EBX],EAX
00000900: E9 E9 00 00 00                                        JMP _lib_102
                                                                _lib_106:
00000905: 8D 45 FC                                              LEA EAX,[EBP-4]
00000908: 89 C3                                                 MOV EBX,EAX
0000090A: 8B 03                                                 MOV EAX, [EBX]
0000090C: 50                                                    PUSH EAX
0000090D: 8D 45 C8                                              LEA EAX,[EBP-56]
00000910: 50                                                    PUSH EAX
00000911: B1 02                                                 MOV CL,2
00000913: E8 F4 05 00 00                                        CALL _itoa
00000918: 83 C4 08                                              ADD ESP,8
0000091B: E9 CE 00 00 00                                        JMP _lib_102
                                                                _lib_107:
00000920: 8D 45 FC                                              LEA EAX,[EBP-4]
00000923: 89 C3                                                 MOV EBX,EAX
00000925: 8B 03                                                 MOV EAX, [EBX]
00000927: 50                                                    PUSH EAX
00000928: 8D 45 C8                                              LEA EAX,[EBP-56]
0000092B: 50                                                    PUSH EAX
0000092C: B8 02 00 00 00                                        MOV EAX,2
00000931: 50                                                    PUSH EAX
00000932: B1 03                                                 MOV CL,3
00000934: E8 9A 06 00 00                                        CALL _itoab
00000939: 83 C4 0C                                              ADD ESP,12
0000093C: E9 AD 00 00 00                                        JMP _lib_102
                                                                _lib_108:
00000941: 8D 45 FC                                              LEA EAX,[EBP-4]
00000944: 89 C3                                                 MOV EBX,EAX
00000946: 8B 03                                                 MOV EAX, [EBX]
00000948: 50                                                    PUSH EAX
00000949: 8D 45 C8                                              LEA EAX,[EBP-56]
0000094C: 50                                                    PUSH EAX
0000094D: B8 08 00 00 00                                        MOV EAX,8
00000952: 50                                                    PUSH EAX
00000953: B1 03                                                 MOV CL,3
00000955: E8 79 06 00 00                                        CALL _itoab
0000095A: 83 C4 0C                                              ADD ESP,12
0000095D: E9 8C 00 00 00                                        JMP _lib_102
                                                                _lib_109:
00000962: 8D 45 FC                                              LEA EAX,[EBP-4]
00000965: 89 C3                                                 MOV EBX,EAX
00000967: 8B 03                                                 MOV EAX, [EBX]
00000969: 50                                                    PUSH EAX
0000096A: 8D 45 C8                                              LEA EAX,[EBP-56]
0000096D: 50                                                    PUSH EAX
0000096E: B8 0A 00 00 00                                        MOV EAX,10
00000973: 50                                                    PUSH EAX
00000974: B1 03                                                 MOV CL,3
00000976: E8 58 06 00 00                                        CALL _itoab
0000097B: 83 C4 0C                                              ADD ESP,12
0000097E: EB 6E                                                 JMP _lib_102
                                                                _lib_110:
00000980: 8D 45 FC                                              LEA EAX,[EBP-4]
00000983: 89 C3                                                 MOV EBX,EAX
00000985: 8B 03                                                 MOV EAX, [EBX]
00000987: 50                                                    PUSH EAX
00000988: 8D 45 C8                                              LEA EAX,[EBP-56]
0000098B: 50                                                    PUSH EAX
0000098C: B8 10 00 00 00                                        MOV EAX,16
00000991: 50                                                    PUSH EAX
00000992: B1 03                                                 MOV CL,3
00000994: E8 3A 06 00 00                                        CALL _itoab
00000999: 83 C4 0C                                              ADD ESP,12
0000099C: EB 50                                                 JMP _lib_102
                                                                _lib_111:
0000099E: 8D 45 F0                                              LEA EAX,[EBP-16]
000009A1: 89 C3                                                 MOV EBX,EAX
000009A3: 8B 03                                                 MOV EAX, [EBX]
000009A5: 89 EC                                                 MOV ESP,EBP
000009A7: 5D                                                    POP EBP
000009A8: C3                                                    RET
000009A9: EB 43                                                 JMP _lib_102
                                                                _lib_103:
000009AB: E8 B2 F6 FF FF                                        CALL __switch
000009B0: CF 08 00 00                                            DD _lib_104
000009B4: 63 00 00 00                                            DD 99
000009B8: F2 08 00 00                                            DD _lib_105
000009BC: 73 00 00 00                                            DD 115
000009C0: 05 09 00 00                                            DD _lib_106
000009C4: 64 00 00 00                                            DD 100
000009C8: 20 09 00 00                                            DD _lib_107
000009CC: 62 00 00 00                                            DD 98
000009D0: 41 09 00 00                                            DD _lib_108
000009D4: 6F 00 00 00                                            DD 111
000009D8: 62 09 00 00                                            DD _lib_109
000009DC: 75 00 00 00                                            DD 117
000009E0: 80 09 00 00                                            DD _lib_110
000009E4: 78 00 00 00                                            DD 120
000009E8: 00 00 00 00                                            DD 0
000009EC: EB B0                                                 JMP _lib_111
                                                                _lib_102:
000009EE: 8D 45 EC                                              LEA EAX,[EBP-20]
000009F1: 50                                                    PUSH EAX
000009F2: 8D 45 DC                                              LEA EAX,[EBP-36]
000009F5: 89 C3                                                 MOV EBX,EAX
000009F7: 8B 03                                                 MOV EAX, [EBX]
000009F9: 50                                                    PUSH EAX
000009FA: B1 01                                                 MOV CL,1
000009FC: E8 62 F7 FF FF                                        CALL _strlen
00000A01: 83 C4 04                                              ADD ESP,4
00000A04: 5B                                                    POP EBX
00000A05: 89 03                                                 MOV [EBX],EAX
00000A07: 8D 45 E8                                              LEA EAX,[EBP-24]
00000A0A: 89 C3                                                 MOV EBX,EAX
00000A0C: 8B 03                                                 MOV EAX, [EBX]
00000A0E: 09 C0                                                 OR EAX,EAX
00000A10: 75 02                                                 JNE _lib_115
00000A12: EB 22                                                 JMP _lib_113
                                                                _lib_115:
00000A14: 8D 45 E8                                              LEA EAX,[EBP-24]
00000A17: 89 C3                                                 MOV EBX,EAX
00000A19: 8B 03                                                 MOV EAX, [EBX]
00000A1B: 50                                                    PUSH EAX
00000A1C: 8D 45 EC                                              LEA EAX,[EBP-20]
00000A1F: 89 C3                                                 MOV EBX,EAX
00000A21: 8B 03                                                 MOV EAX, [EBX]
00000A23: 5B                                                    POP EBX
00000A24: E8 10 F6 FF FF                                        CALL __lt
00000A29: 09 C0                                                 OR EAX,EAX
00000A2B: 75 02                                                 JNE _lib_116
00000A2D: EB 07                                                 JMP _lib_113
                                                                _lib_116:
00000A2F: B8 01 00 00 00                                        MOV EAX,1
00000A34: EB 02                                                 JMP _lib_114
                                                                _lib_113:
00000A36: 31 C0                                                 XOR EAX,EAX
                                                                _lib_114:
00000A38: 09 C0                                                 OR EAX,EAX
00000A3A: 75 02                                                 JNE _lib_117
00000A3C: EB 0E                                                 JMP _lib_112
                                                                _lib_117:
00000A3E: 8D 45 EC                                              LEA EAX,[EBP-20]
00000A41: 50                                                    PUSH EAX
00000A42: 8D 45 E8                                              LEA EAX,[EBP-24]
00000A45: 89 C3                                                 MOV EBX,EAX
00000A47: 8B 03                                                 MOV EAX, [EBX]
00000A49: 5B                                                    POP EBX
00000A4A: 89 03                                                 MOV [EBX],EAX
                                                                _lib_112:
00000A4C: 8D 45 E4                                              LEA EAX,[EBP-28]
00000A4F: 89 C3                                                 MOV EBX,EAX
00000A51: 8B 03                                                 MOV EAX, [EBX]
00000A53: 50                                                    PUSH EAX
00000A54: 8D 45 EC                                              LEA EAX,[EBP-20]
00000A57: 89 C3                                                 MOV EBX,EAX
00000A59: 8B 03                                                 MOV EAX, [EBX]
00000A5B: 5B                                                    POP EBX
00000A5C: E8 DF F5 FF FF                                        CALL __gt
00000A61: 09 C0                                                 OR EAX,EAX
00000A63: 75 02                                                 JNE _lib_119
00000A65: EB 1C                                                 JMP _lib_118
                                                                _lib_119:
00000A67: 8D 45 E4                                              LEA EAX,[EBP-28]
00000A6A: 50                                                    PUSH EAX
00000A6B: 8D 45 E4                                              LEA EAX,[EBP-28]
00000A6E: 89 C3                                                 MOV EBX,EAX
00000A70: 8B 03                                                 MOV EAX, [EBX]
00000A72: 50                                                    PUSH EAX
00000A73: 8D 45 EC                                              LEA EAX,[EBP-20]
00000A76: 89 C3                                                 MOV EBX,EAX
00000A78: 8B 03                                                 MOV EAX, [EBX]
00000A7A: 5B                                                    POP EBX
00000A7B: 93                                                    XCHG EAX,EBX
00000A7C: 29 D8                                                 SUB EAX,EBX
00000A7E: 5B                                                    POP EBX
00000A7F: 89 03                                                 MOV [EBX],EAX
00000A81: EB 09                                                 JMP _lib_120
                                                                _lib_118:
00000A83: 8D 45 E4                                              LEA EAX,[EBP-28]
00000A86: 89 C3                                                 MOV EBX,EAX
00000A88: 31 C0                                                 XOR EAX,EAX
00000A8A: 89 03                                                 MOV [EBX],EAX
                                                                _lib_120:
00000A8C: 8D 45 F8                                              LEA EAX,[EBP-8]
00000A8F: 89 C3                                                 MOV EBX,EAX
00000A91: 8B 03                                                 MOV EAX, [EBX]
00000A93: E8 BD F5 FF FF                                        CALL __lneg
00000A98: 09 C0                                                 OR EAX,EAX
00000A9A: 75 02                                                 JNE _lib_122
00000A9C: EB 37                                                 JMP _lib_121
                                                                _lib_122:
                                                                _lib_123:
00000A9E: 8D 45 E4                                              LEA EAX,[EBP-28]
00000AA1: 89 C3                                                 MOV EBX,EAX
00000AA3: 8B 03                                                 MOV EAX, [EBX]
00000AA5: 48                                                    DEC EAX
00000AA6: 89 03                                                 MOV [EBX],EAX
00000AA8: 40                                                    INC EAX
00000AA9: 09 C0                                                 OR EAX,EAX
00000AAB: 75 02                                                 JNE _lib_125
00000AAD: EB 26                                                 JMP _lib_124
                                                                _lib_125:
00000AAF: 8D 45 F4                                              LEA EAX,[EBP-12]
00000AB2: 89 C3                                                 MOV EBX,EAX
00000AB4: 8B 03                                                 MOV EAX, [EBX]
00000AB6: 50                                                    PUSH EAX
00000AB7: 8D 45 0C                                              LEA EAX,[EBP+12]
00000ABA: 89 C3                                                 MOV EBX,EAX
00000ABC: 8B 03                                                 MOV EAX, [EBX]
00000ABE: 50                                                    PUSH EAX
00000ABF: B1 02                                                 MOV CL,2
00000AC1: E8 4D 0C 00 00                                        CALL _OS_fputc
00000AC6: 83 C4 08                                              ADD ESP,8
00000AC9: 8D 45 F0                                              LEA EAX,[EBP-16]
00000ACC: 89 C3                                                 MOV EBX,EAX
00000ACE: 8B 03                                                 MOV EAX, [EBX]
00000AD0: 40                                                    INC EAX
00000AD1: 89 03                                                 MOV [EBX],EAX
00000AD3: EB C9                                                 JMP _lib_123
                                                                _lib_124:
                                                                _lib_121:
                                                                _lib_126:
00000AD5: 8D 45 EC                                              LEA EAX,[EBP-20]
00000AD8: 89 C3                                                 MOV EBX,EAX
00000ADA: 8B 03                                                 MOV EAX, [EBX]
00000ADC: 48                                                    DEC EAX
00000ADD: 89 03                                                 MOV [EBX],EAX
00000ADF: 40                                                    INC EAX
00000AE0: 09 C0                                                 OR EAX,EAX
00000AE2: 75 02                                                 JNE _lib_128
00000AE4: EB 2F                                                 JMP _lib_127
                                                                _lib_128:
00000AE6: 8D 45 DC                                              LEA EAX,[EBP-36]
00000AE9: 89 C3                                                 MOV EBX,EAX
00000AEB: 8B 03                                                 MOV EAX, [EBX]
00000AED: 40                                                    INC EAX
00000AEE: 89 03                                                 MOV [EBX],EAX
00000AF0: 48                                                    DEC EAX
00000AF1: 89 C3                                                 MOV EBX,EAX
00000AF3: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
00000AF6: 50                                                    PUSH EAX
00000AF7: 8D 45 0C                                              LEA EAX,[EBP+12]
00000AFA: 89 C3                                                 MOV EBX,EAX
00000AFC: 8B 03                                                 MOV EAX, [EBX]
00000AFE: 50                                                    PUSH EAX
00000AFF: B1 02                                                 MOV CL,2
00000B01: E8 0D 0C 00 00                                        CALL _OS_fputc
00000B06: 83 C4 08                                              ADD ESP,8
00000B09: 8D 45 F0                                              LEA EAX,[EBP-16]
00000B0C: 89 C3                                                 MOV EBX,EAX
00000B0E: 8B 03                                                 MOV EAX, [EBX]
00000B10: 40                                                    INC EAX
00000B11: 89 03                                                 MOV [EBX],EAX
00000B13: EB C0                                                 JMP _lib_126
                                                                _lib_127:
00000B15: 8D 45 F8                                              LEA EAX,[EBP-8]
00000B18: 89 C3                                                 MOV EBX,EAX
00000B1A: 8B 03                                                 MOV EAX, [EBX]
00000B1C: 09 C0                                                 OR EAX,EAX
00000B1E: 75 02                                                 JNE _lib_130
00000B20: EB 37                                                 JMP _lib_129
                                                                _lib_130:
                                                                _lib_131:
00000B22: 8D 45 E4                                              LEA EAX,[EBP-28]
00000B25: 89 C3                                                 MOV EBX,EAX
00000B27: 8B 03                                                 MOV EAX, [EBX]
00000B29: 48                                                    DEC EAX
00000B2A: 89 03                                                 MOV [EBX],EAX
00000B2C: 40                                                    INC EAX
00000B2D: 09 C0                                                 OR EAX,EAX
00000B2F: 75 02                                                 JNE _lib_133
00000B31: EB 26                                                 JMP _lib_132
                                                                _lib_133:
00000B33: 8D 45 F4                                              LEA EAX,[EBP-12]
00000B36: 89 C3                                                 MOV EBX,EAX
00000B38: 8B 03                                                 MOV EAX, [EBX]
00000B3A: 50                                                    PUSH EAX
00000B3B: 8D 45 0C                                              LEA EAX,[EBP+12]
00000B3E: 89 C3                                                 MOV EBX,EAX
00000B40: 8B 03                                                 MOV EAX, [EBX]
00000B42: 50                                                    PUSH EAX
00000B43: B1 02                                                 MOV CL,2
00000B45: E8 C9 0B 00 00                                        CALL _OS_fputc
00000B4A: 83 C4 08                                              ADD ESP,8
00000B4D: 8D 45 F0                                              LEA EAX,[EBP-16]
00000B50: 89 C3                                                 MOV EBX,EAX
00000B52: 8B 03                                                 MOV EAX, [EBX]
00000B54: 40                                                    INC EAX
00000B55: 89 03                                                 MOV [EBX],EAX
00000B57: EB C9                                                 JMP _lib_131
                                                                _lib_132:
                                                                _lib_129:
00000B59: E9 25 FB FF FF                                        JMP _lib_75
                                                                _lib_76:
00000B5E: 8D 45 F0                                              LEA EAX,[EBP-16]
00000B61: 89 C3                                                 MOV EBX,EAX
00000B63: 8B 03                                                 MOV EAX, [EBX]
00000B65: 89 EC                                                 MOV ESP,EBP
00000B67: 5D                                                    POP EBP
00000B68: C3                                                    RET
                                                                
                                                                _printf:
00000B69: 55                                                    PUSH EBP
00000B6A: 89 E5                                                 MOV EBP,ESP
00000B6C: B8 FF FF FF FF                                        MOV EAX,-1  ; TRDOS 386 STDOUT/STDERR 
00000B71: 50                                                    PUSH EAX
00000B72: E8 92 F4 FF FF                                        CALL _CCARGC
00000B77: 50                                                    PUSH EAX
00000B78: 8D 45 08                                              LEA EAX,[EBP+8]
00000B7B: 5B                                                    POP EBX
00000B7C: D1 E3                                                 SHL EBX,1
00000B7E: D1 E3                                                 SHL EBX,1
00000B80: 01 D8                                                 ADD EAX,EBX
00000B82: 89 C3                                                 MOV EBX,EAX
00000B84: B8 04 00 00 00                                        MOV EAX,4
00000B89: 93                                                    XCHG EAX,EBX
00000B8A: 29 D8                                                 SUB EAX,EBX
00000B8C: 50                                                    PUSH EAX
00000B8D: B1 02                                                 MOV CL,2
00000B8F: E8 C4 FA FF FF                                        CALL __print
00000B94: 83 C4 08                                              ADD ESP,8
00000B97: 5D                                                    POP EBP
00000B98: C3                                                    RET
                                                                
                                                                _fputs:			; fputs(string,fd)
00000B99: 55                                                    PUSH EBP
00000B9A: 89 E5                                                 MOV  EBP, ESP
                                                                _fputs_1:
00000B9C: 8D 45 0C                                              LEA  EAX, [EBP+12]	; while(*string)
00000B9F: 8B 18                                                 MOV  EBX, [EAX]
00000BA1: 0F BE 03                                              MOVSX EAX, BYTE [EBX]	; *string (char)
00000BA4: 09 C0                                                 OR   EAX, EAX
00000BA6: 74 18                                                 JZ   short _fputs_2	; char = 0 (ASCIIZ string)
                                                                ;_lib_137:
00000BA8: 50                                                    PUSH EAX
00000BA9: 8D 45 0C                                              LEA  EAX, [EBP+12]	; OS_fputc(*string++,fd);
                                                                ;MOV EBX, [EAX]
                                                                ;INC EBX
                                                                ;MOV [EAX], EBX
                                                                ;DEC EBX
00000BAC: FF 00                                                 INC  DWORD [EAX]	; *string++
                                                                			; (points to the next char)
                                                                ;MOVSX EAX, BYTE [EBX]	; char (> 0)
                                                                ;PUSH EAX
00000BAE: 8D 5D 08                                              LEA  EBX, [EBP+8]
00000BB1: 8B 03                                                 MOV  EAX, [EBX]		; fd (-1 -> STDOUT/STDERR)
00000BB3: 50                                                    PUSH EAX
00000BB4: B1 02                                                 MOV  CL, 2
00000BB6: E8 58 0B 00 00                                        CALL _OS_fputc
00000BBB: 83 C4 08                                              ADD  ESP, 8
00000BBE: EB DC                                                 JMP  short _fputs_1	; jump to while(*string)
                                                                _fputs_2:
00000BC0: 5D                                                    POP  EBP
00000BC1: C3                                                    RETN
                                                                
                                                                ;#define ALNUM     1
                                                                ;#define ALPHA     2
                                                                ;#define CNTRL     4
                                                                ;#define DIGIT     8
                                                                ;#define GRAPH    16
                                                                ;#define LOWER    32
                                                                ;#define PRINT    64
                                                                ;#define PUNCT   128
                                                                ;#define BLANK   256
                                                                ;#define UPPER   512
                                                                ;#define XDIGIT 1024
                                                                
                                                                __is: ; int _is[128] =
00000BC2: 04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00        DD 4,4,4,4,4,4,4,4,4,260
          04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00       
          04 00 00 00 04 01 00 00                               
00000BEA: 04 01 00 00 04 01 00 00 04 01 00 00 04 01 00 00        DD 260,260,260,260,4,4,4,4,4,4
          04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00       
          04 00 00 00 04 00 00 00                               
00000C12: 04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00        DD 4,4,4,4,4,4,4,4,4,4
          04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00       
          04 00 00 00 04 00 00 00                               
00000C3A: 04 00 00 00 04 00 00 00 40 01 00 00 D0 00 00 00        DD 4,4, 320,208,208,208,208,208,208,208
          D0 00 00 00 D0 00 00 00 D0 00 00 00 D0 00 00 00       
          D0 00 00 00 D0 00 00 00                               
00000C62: D0 00 00 00 D0 00 00 00 D0 00 00 00 D0 00 00 00        DD 208,208,208,208,208,208,208,208,1113,1113
          D0 00 00 00 D0 00 00 00 D0 00 00 00 D0 00 00 00       
          59 04 00 00 59 04 00 00                               
00000C8A: 59 04 00 00 59 04 00 00 59 04 00 00 59 04 00 00        DD 1113,1113,1113,1113,1113,1113,1113,1113,208,208
          59 04 00 00 59 04 00 00 59 04 00 00 59 04 00 00       
          D0 00 00 00 D0 00 00 00                               
00000CB2: D0 00 00 00 D0 00 00 00 D0 00 00 00 D0 00 00 00        DD 208,208,208,208,208,1619,1619,1619,1619,1619
          D0 00 00 00 53 06 00 00 53 06 00 00 53 06 00 00       
          53 06 00 00 53 06 00 00                               
00000CDA: 53 06 00 00 53 02 00 00 53 02 00 00 53 02 00 00        DD 1619,595,595,595,595,595,595,595,595,595
          53 02 00 00 53 02 00 00 53 02 00 00 53 02 00 00       
          53 02 00 00 53 02 00 00                               
00000D02: 53 02 00 00 53 02 00 00 53 02 00 00 53 02 00 00        DD 595,595,595,595,595,595,595,595,595,595
          53 02 00 00 53 02 00 00 53 02 00 00 53 02 00 00       
          53 02 00 00 53 02 00 00                               
00000D2A: 53 02 00 00 D0 00 00 00 D0 00 00 00 D0 00 00 00        DD 595,208,208,208,208,208,208,1139,1139,1139
          D0 00 00 00 D0 00 00 00 D0 00 00 00 73 04 00 00       
          73 04 00 00 73 04 00 00                               
00000D52: 73 04 00 00 73 04 00 00 73 04 00 00 73 00 00 00        DD 1139,1139,1139,115,115,115,115,115,115,115
          73 00 00 00 73 00 00 00 73 00 00 00 73 00 00 00       
          73 00 00 00 73 00 00 00                               
00000D7A: 73 00 00 00 73 00 00 00 73 00 00 00 73 00 00 00        DD 115,115,115,115,115,115,115,115,115,115
          73 00 00 00 73 00 00 00 73 00 00 00 73 00 00 00       
          73 00 00 00 73 00 00 00                               
00000DA2: 73 00 00 00 73 00 00 00 73 00 00 00 D0 00 00 00        DD 115,115,115,208,208,208,208,4
          D0 00 00 00 D0 00 00 00 D0 00 00 00 04 00 00 00       
                                                                
                                                                ; isalnum (c) int c; {return (_is[c] & ALNUM);}
                                                                ; /* 'a'-'z', 'A'-'Z', '0'-'9' */
                                                                
                                                                _isalnum:
00000DC2: 55                                                    PUSH EBP
00000DC3: 89 E5                                                 MOV  EBP, ESP
00000DC5: 8D 5D 08                                              LEA  EBX, [EBP+8]
00000DC8: 8B 03                                                 MOV  EAX, [EBX]	; int c;
00000DCA: BB C2 0B 00 00                                        MOV  EBX, __is
00000DCF: D1 E0                                                 SHL  EAX, 1
00000DD1: D1 E0                                                 SHL  EAX, 1
00000DD3: 01 C3                                                 ADD  EBX, EAX
00000DD5: 8B 03                                                 MOV  EAX, [EBX]
00000DD7: BB 01 00 00 00                                        MOV  EBX, 1	; ALNUM
00000DDC: 21 D8                                                 AND  EAX, EBX	; return (_is[c] & ALNUM);
00000DDE: 5D                                                    POP  EBP
00000DDF: C3                                                    RETN
                                                                
                                                                ;isalpha (c) int c; {return (_is[c] & ALPHA);}
                                                                ; /* 'a'-'z', 'A'-'Z' */
                                                                
                                                                _isalpha:
00000DE0: 55                                                    PUSH EBP
00000DE1: 89 E5                                                 MOV  EBP, ESP
00000DE3: 8D 5D 08                                              LEA  EBX, [EBP+8]
00000DE6: 8B 03                                                 MOV  EAX, [EBX] ; int c;
00000DE8: BB C2 0B 00 00                                        MOV  EBX, __is
00000DED: D1 E0                                                 SHL  EAX, 1
00000DEF: D1 E0                                                 SHL  EAX, 1
00000DF1: 01 C3                                                 ADD  EBX, EAX
00000DF3: 8B 03                                                 MOV  EAX, [EBX]
00000DF5: BB 02 00 00 00                                        MOV  EBX, 2	; ALPHA
00000DFA: 21 D8                                                 AND  EAX, EBX	; return (_is[c] & ALPHA);
00000DFC: 5D                                                    POP  EBP
00000DFD: C3                                                    RETN
                                                                
                                                                ; iscntrl (c) int c; {return (_is[c] & CNTRL);}
                                                                ; /* 0-31, 127 */
                                                                
                                                                _iscntrl:
00000DFE: 55                                                    PUSH EBP
00000DFF: 89 E5                                                 MOV  EBP, ESP
00000E01: 8D 5D 08                                              LEA  EBX, [EBP+8]
00000E04: 8B 03                                                 MOV  EAX, [EBX] ; int c;
00000E06: BB C2 0B 00 00                                        MOV  EBX, __is
00000E0B: D1 E0                                                 SHL  EAX, 1
00000E0D: D1 E0                                                 SHL  EAX, 1
00000E0F: 01 C3                                                 ADD  EBX, EAX
00000E11: 8B 03                                                 MOV  EAX, [EBX]
00000E13: BB 04 00 00 00                                        MOV  EBX, 4	; CNTRL
00000E18: 21 D8                                                 AND  EAX, EBX	; return (_is[c] & CNTRL);
00000E1A: 5D                                                    POP  EBP
00000E1B: C3                                                    RETN
                                                                
                                                                ;isdigit (c) int c; {return (_is[c] & DIGIT );}
                                                                ; /* '0'-'9' */
                                                                
                                                                _isdigit:
00000E1C: 55                                                    PUSH EBP
00000E1D: 89 E5                                                 MOV  EBP, ESP
00000E1F: 8D 5D 08                                              LEA  EBX, [EBP+8]
00000E22: 8B 03                                                 MOV  EAX, [EBX] ; int c;
00000E24: BB C2 0B 00 00                                        MOV  EBX, __is
00000E29: D1 E0                                                 SHL  EAX, 1
00000E2B: D1 E0                                                 SHL  EAX, 1
00000E2D: 01 C3                                                 ADD  EBX, EAX
00000E2F: 8B 03                                                 MOV  EAX, [EBX]
00000E31: BB 08 00 00 00                                        MOV  EBX, 8	; DIGIT
00000E36: 21 D8                                                 AND  EAX, EBX	; return (_is[c] & DIGIT);
00000E38: 5D                                                    POP  EBP
00000E39: C3                                                    RETN
                                                                
                                                                ;isgraph (c) int c; {return (_is[c] & GRAPH);}
                                                                ; /* '!'-'~' */
                                                                
                                                                _isgraph:
00000E3A: 55                                                    PUSH EBP
00000E3B: 89 E5                                                 MOV  EBP, ESP
00000E3D: 8D 5D 08                                              LEA  EBX, [EBP+8]
00000E40: 8B 03                                                 MOV  EAX, [EBX] ; int c;
00000E42: BB C2 0B 00 00                                        MOV  EBX, __is
00000E47: D1 E0                                                 SHL  EAX, 1
00000E49: D1 E0                                                 SHL  EAX, 1
00000E4B: 01 C3                                                 ADD  EBX, EAX
00000E4D: 8B 03                                                 MOV  EAX, [EBX]
00000E4F: BB 10 00 00 00                                        MOV  EBX, 16	; GRAPH
00000E54: 21 D8                                                 AND  EAX, EBX	; return (_is[c] & GRAPH);
00000E56: 5D                                                    POP  EBP
00000E57: C3                                                    RETN
                                                                
                                                                ;islower (c) int c; {return (_is[c] & LOWER);}
                                                                ; /* 'a'-'z' */
                                                                
                                                                _islower:
00000E58: 55                                                    PUSH EBP
00000E59: 89 E5                                                 MOV  EBP, ESP
00000E5B: 8D 5D 08                                              LEA  EBX, [EBP+8]
00000E5E: 8B 03                                                 MOV  EAX, [EBX] ; int c;
00000E60: BB C2 0B 00 00                                        MOV  EBX, __is
00000E65: D1 E0                                                 SHL  EAX, 1
00000E67: D1 E0                                                 SHL  EAX, 1
00000E69: 01 C3                                                 ADD  EBX, EAX
00000E6B: 8B 03                                                 MOV  EAX, [EBX]
00000E6D: BB 20 00 00 00                                        MOV  EBX, 32	; LOWER
00000E72: 21 D8                                                 AND  EAX, EBX	; return (_is[c] & LOWER);
00000E74: 5D                                                    POP  EBP
00000E75: C3                                                    RETN
                                                                
                                                                ;isprint (c) int c; {return (_is[c] & PRINT);}
                                                                ; /* ' '-'~' */
                                                                
                                                                _isprint:
00000E76: 55                                                    PUSH EBP
00000E77: 89 E5                                                 MOV  EBP, ESP
00000E79: 8D 5D 08                                              LEA  EBX, [EBP+8]
00000E7C: 8B 03                                                 MOV  EAX, [EBX] ; int c;
00000E7E: BB C2 0B 00 00                                        MOV  EBX, __is
00000E83: D1 E0                                                 SHL  EAX, 1
00000E85: D1 E0                                                 SHL  EAX, 1
00000E87: 01 C3                                                 ADD  EBX, EAX
00000E89: 8B 03                                                 MOV  EAX, [EBX]
00000E8B: BB 40 00 00 00                                        MOV  EBX, 64	; PRINT
00000E90: 21 D8                                                 AND  EAX, EBX	; return (_is[c] & PRINT);
00000E92: 5D                                                    POP  EBP
00000E93: C3                                                    RETN
                                                                
                                                                ;ispunct (c) int c; {return (_is[c] & PUNCT);}
                                                                ; /* !alnum && !cntrl && !space */
                                                                
                                                                _ispunct:
00000E94: 55                                                    PUSH EBP
00000E95: 89 E5                                                 MOV  EBP, ESP
00000E97: 8D 5D 08                                              LEA  EBX, [EBP+8]
00000E9A: 8B 03                                                 MOV  EAX, [EBX] ; int c;
00000E9C: BB C2 0B 00 00                                        MOV  EBX, __is
00000EA1: D1 E0                                                 SHL  EAX, 1
00000EA3: D1 E0                                                 SHL  EAX, 1
00000EA5: 01 C3                                                 ADD  EBX, EAX
00000EA7: 8B 03                                                 MOV  EAX, [EBX]
00000EA9: BB 80 00 00 00                                        MOV  EBX, 128	; PUNCT
00000EAE: 21 D8                                                 AND  EAX, EBX	; return (_is[c] & PUNCT);
00000EB0: 5D                                                    POP  EBP
00000EB1: C3                                                    RETN
                                                                
                                                                ;isspace (c) int c; {return (_is[c] & BLANK);}
                                                                ; /* HT, LF, VT, FF, CR, ' ' */
                                                                
                                                                _isspace:
00000EB2: 55                                                    PUSH EBP
00000EB3: 89 E5                                                 MOV  EBP, ESP
00000EB5: 8D 5D 08                                              LEA  EBX, [EBP+8]
00000EB8: 8B 03                                                 MOV  EAX, [EBX] ; int c;
00000EBA: BB C2 0B 00 00                                        MOV  EBX, __is
00000EBF: D1 E0                                                 SHL  EAX, 1
00000EC1: D1 E0                                                 SHL  EAX, 1
00000EC3: 01 C3                                                 ADD  EBX, EAX
00000EC5: 8B 03                                                 MOV  EAX, [EBX]
00000EC7: BB 00 01 00 00                                        MOV  EBX, 256	; BLANK
00000ECC: 21 D8                                                 AND  EAX, EBX	; return (_is[c] & BLANK);
00000ECE: 5D                                                    POP  EBP
00000ECF: C3                                                    RETN
                                                                
                                                                ;isupper (c) int c; {return (_is[c] & UPPER);}
                                                                ; /* 'A'-'Z' */
                                                                
                                                                _isupper:
00000ED0: 55                                                    PUSH EBP
00000ED1: 89 E5                                                 MOV  EBP, ESP
00000ED3: 8D 5D 08                                              LEA  EBX, [EBP+8]
00000ED6: 8B 03                                                 MOV  EAX, [EBX] ; int c;
00000ED8: BB C2 0B 00 00                                        MOV  EBX, __is
00000EDD: D1 E0                                                 SHL  EAX, 1
00000EDF: D1 E0                                                 SHL  EAX, 1
00000EE1: 01 C3                                                 ADD  EBX, EAX
00000EE3: 8B 03                                                 MOV  EAX, [EBX]
00000EE5: BB 00 02 00 00                                        MOV  EBX, 512	; UPPER
00000EEA: 21 D8                                                 AND  EAX, EBX	; return (_is[c] & UPPER);
00000EEC: 5D                                                    POP  EBP
00000EED: C3                                                    RETN
                                                                
                                                                ;isxdigit(c) int c; {return (_is[c] & XDIGIT);}
                                                                ; /* '0'-'9', 'a'-'f', 'A'-'F' */
                                                                
                                                                _isxdigit:
00000EEE: 55                                                    PUSH EBP
00000EEF: 89 E5                                                 MOV  EBP, ESP
00000EF1: 8D 5D 08                                              LEA  EBX, [EBP+8]
00000EF4: 8B 03                                                 MOV  EAX, [EBX] ; int c;
00000EF6: BB C2 0B 00 00                                        MOV  EBX, __is
00000EFB: D1 E0                                                 SHL  EAX, 1
00000EFD: D1 E0                                                 SHL  EAX, 1
00000EFF: 01 C3                                                 ADD  EBX, EAX
00000F01: 8B 03                                                 MOV  EAX, [EBX]
00000F03: BB 00 04 00 00                                        MOV  EBX, 1024	; XDIGIT
00000F08: 21 D8                                                 AND  EAX, EBX	; return (_is[c] & XDIGIT);
00000F0A: 5D                                                    POP  EBP
00000F0B: C3                                                    RETN
                                                                
                                                                _itoa:
00000F0C: 55                                                    PUSH EBP
00000F0D: 89 E5                                                 MOV  EBP, ESP
00000F0F: 83 C4 F8                                              ADD  ESP, -8
00000F12: 8D 45 F8                                              LEA  EAX, [EBP-8]
00000F15: 50                                                    PUSH EAX
00000F16: 8D 45 08                                              LEA  EAX, [EBP+8]
00000F19: 89 C3                                                 MOV  EBX, EAX
00000F1B: 8B 03                                                 MOV  EAX, [EBX]
00000F1D: 5B                                                    POP  EBX
00000F1E: 89 03                                                 MOV  [EBX], EAX
00000F20: 8D 45 FC                                              LEA  EAX, [EBP-4]
00000F23: 50                                                    PUSH EAX
00000F24: 8D 45 0C                                              LEA  EAX, [EBP+12]
00000F27: 89 C3                                                 MOV  EBX, EAX
00000F29: 8B 03                                                 MOV  EAX, [EBX]
00000F2B: 5B                                                    POP  EBX
00000F2C: 89 03                                                 MOV  [EBX], EAX
00000F2E: 09 C0                                                 OR   EAX, EAX
00000F30: 7C 02                                                 JL   short _lib_151
00000F32: EB 10                                                 JMP  short _lib_150
                                                                _lib_151:
00000F34: 8D 45 0C                                              LEA  EAX, [EBP+12]
00000F37: 50                                                    PUSH EAX
00000F38: 8D 45 0C                                              LEA  EAX, [EBP+12]
00000F3B: 89 C3                                                 MOV  EBX, EAX
00000F3D: 8B 03                                                 MOV  EAX, [EBX]
00000F3F: F7 D8                                                 NEG EAX
00000F41: 5B                                                    POP  EBX
00000F42: 89 03                                                 MOV  [EBX], EAX
                                                                _lib_150:
                                                                _lib_152:
00000F44: 8D 45 F8                                              LEA  EAX, [EBP-8]
00000F47: 89 C3                                                 MOV  EBX, EAX
00000F49: 8B 03                                                 MOV  EAX, [EBX]
00000F4B: 40                                                    INC  EAX
00000F4C: 89 03                                                 MOV  [EBX], EAX
00000F4E: 48                                                    DEC  EAX
00000F4F: 50                                                    PUSH EAX
00000F50: 8D 45 0C                                              LEA  EAX, [EBP+12]
00000F53: 89 C3                                                 MOV  EBX, EAX
00000F55: 8B 03                                                 MOV  EAX, [EBX]
00000F57: 89 C3                                                 MOV  EBX, EAX
00000F59: B8 0A 00 00 00                                        MOV  EAX, 10
00000F5E: 93                                                    XCHG EAX, EBX
00000F5F: 99                                                    CDQ
00000F60: F7 FB                                                 IDIV EBX
00000F62: 89 D0                                                 MOV  EAX, EDX
00000F64: BB 30 00 00 00                                        MOV  EBX, 48
00000F69: 01 D8                                                 ADD  EAX, EBX
00000F6B: 5B                                                    POP  EBX
00000F6C: 88 03                                                 MOV  [EBX], AL
00000F6E: 8D 45 0C                                              LEA  EAX, [EBP+12]
00000F71: 50                                                    PUSH EAX
00000F72: 8D 45 0C                                              LEA  EAX, [EBP+12]
00000F75: 89 C3                                                 MOV  EBX, EAX
00000F77: 8B 03                                                 MOV  EAX, [EBX]
00000F79: 89 C3                                                 MOV  EBX, EAX
00000F7B: B8 0A 00 00 00                                        MOV  EAX, 10
00000F80: 93                                                    XCHG EAX, EBX
00000F81: 99                                                    CDQ
00000F82: F7 FB                                                 IDIV EBX
00000F84: 5B                                                    POP  EBX
00000F85: 89 03                                                 MOV  [EBX], EAX
00000F87: 09 C0                                                 OR   EAX, EAX
00000F89: 7F 02                                                 JG   short _lib_154
00000F8B: EB 02                                                 JMP  short _lib_153
                                                                _lib_154:
00000F8D: EB B5                                                 JMP  short _lib_152
                                                                _lib_153:
00000F8F: 8D 45 FC                                              LEA  EAX, [EBP-4]
00000F92: 89 C3                                                 MOV  EBX, EAX
00000F94: 8B 03                                                 MOV  EAX, [EBX]
00000F96: 09 C0                                                 OR   EAX, EAX
00000F98: 7C 02                                                 JL   short _lib_156
00000F9A: EB 14                                                 JMP  short _lib_155
                                                                _lib_156:
00000F9C: 8D 45 F8                                              LEA  EAX, [EBP-8]
00000F9F: 89 C3                                                 MOV  EBX, EAX
00000FA1: 8B 03                                                 MOV  EAX, [EBX]
00000FA3: 40                                                    INC  EAX
00000FA4: 89 03                                                 MOV  [EBX], EAX
00000FA6: 48                                                    DEC  EAX
00000FA7: 89 C3                                                 MOV  EBX, EAX
00000FA9: B8 2D 00 00 00                                        MOV  EAX, 45
00000FAE: 88 03                                                 MOV  [EBX], AL
                                                                _lib_155:
00000FB0: 8D 45 F8                                              LEA  EAX, [EBP-8]
00000FB3: 89 C3                                                 MOV  EBX, EAX
00000FB5: 8B 03                                                 MOV  EAX, [EBX]
00000FB7: 89 C3                                                 MOV  EBX, EAX
00000FB9: 31 C0                                                 XOR  EAX, EAX
00000FBB: 88 03                                                 MOV  [EBX], AL
00000FBD: 8D 45 08                                              LEA  EAX, [EBP+8]
00000FC0: 89 C3                                                 MOV  EBX, EAX
00000FC2: 8B 03                                                 MOV  EAX, [EBX]
00000FC4: 50                                                    PUSH EAX
00000FC5: B1 01                                                 MOV  CL, 1
00000FC7: E8 CC F0 FF FF                                        CALL _reverse
00000FCC: 83 C4 04                                              ADD  ESP, 4
00000FCF: 89 EC                                                 MOV  ESP, EBP
00000FD1: 5D                                                    POP  EBP
00000FD2: C3                                                    RETN
                                                                
                                                                _itoab:
00000FD3: 55                                                    PUSH EBP
00000FD4: 89 E5                                                 MOV  EBP, ESP
00000FD6: 83 C4 F8                                              ADD  ESP, -8
00000FD9: 8D 45 FC                                              LEA  EAX, [EBP-4]
00000FDC: 50                                                    PUSH EAX
00000FDD: 8D 45 0C                                              LEA  EAX, [EBP+12]
00000FE0: 89 C3                                                 MOV  EBX, EAX
00000FE2: 8B 03                                                 MOV  EAX, [EBX]
00000FE4: 5B                                                    POP  EBX
00000FE5: 89 03                                                 MOV  [EBX], EAX
00000FE7: 8D 45 08                                              LEA  EAX, [EBP+8]
00000FEA: 50                                                    PUSH EAX
00000FEB: 89 C3                                                 MOV  EBX, EAX
00000FED: 8B 03                                                 MOV  EAX, [EBX]
00000FEF: 89 C3                                                 MOV  EBX, EAX
00000FF1: B8 01 00 00 00                                        MOV  EAX, 1
00000FF6: 89 C1                                                 MOV  ECX, EAX
00000FF8: 89 D8                                                 MOV  EAX, EBX
00000FFA: D3 F8                                                 SAR  EAX, CL
00000FFC: 5B                                                    POP  EBX
00000FFD: 89 03                                                 MOV  [EBX], EAX
                                                                _lib_158:
00000FFF: 8D 45 F8                                              LEA  EAX, [EBP-8]
00001002: 50                                                    PUSH EAX
00001003: 8D 45 10                                              LEA  EAX, [EBP+16]
00001006: 89 C3                                                 MOV  EBX, EAX
00001008: 8B 03                                                 MOV  EAX, [EBX]
0000100A: 89 C3                                                 MOV  EBX, EAX
0000100C: B8 01 00 00 00                                        MOV  EAX, 1
00001011: 21 D8                                                 AND  EAX, EBX
00001013: 5B                                                    POP  EBX
00001014: 89 03                                                 MOV  [EBX], EAX
00001016: 8D 45 10                                              LEA  EAX, [EBP+16]
00001019: 50                                                    PUSH EAX
0000101A: 8D 45 10                                              LEA  EAX, [EBP+16]
0000101D: 89 C3                                                 MOV  EBX, EAX
0000101F: 8B 03                                                 MOV  EAX, [EBX]
00001021: 89 C3                                                 MOV  EBX, EAX
00001023: B8 01 00 00 00                                        MOV  EAX, 1
00001028: 89 C1                                                 MOV  ECX, EAX
0000102A: 89 D8                                                 MOV  EAX, EBX
0000102C: D3 F8                                                 SAR  EAX, CL
0000102E: 89 C3                                                 MOV  EBX, EAX
00001030: B8 FF 7F 00 00                                        MOV  EAX, 32767
00001035: 21 D8                                                 AND  EAX, EBX
00001037: 5B                                                    POP  EBX
00001038: 89 03                                                 MOV  [EBX], EAX
0000103A: 8D 45 FC                                              LEA  EAX, [EBP-4]
0000103D: 89 C3                                                 MOV  EBX, EAX
0000103F: 8B 03                                                 MOV  EAX, [EBX]
00001041: 50                                                    PUSH EAX
00001042: 8D 45 10                                              LEA  EAX, [EBP+16]
00001045: 89 C3                                                 MOV  EBX, EAX
00001047: 8B 03                                                 MOV  EAX, [EBX]
00001049: 50                                                    PUSH EAX
0000104A: 8D 45 08                                              LEA  EAX, [EBP+8]
0000104D: 89 C3                                                 MOV  EBX, EAX
0000104F: 8B 03                                                 MOV  EAX, [EBX]
00001051: 5B                                                    POP  EBX
00001052: 93                                                    XCHG EAX, EBX
00001053: 99                                                    CDQ
00001054: F7 FB                                                 IDIV EBX
00001056: 89 D0                                                 MOV  EAX, EDX
00001058: 89 C3                                                 MOV  EBX, EAX
0000105A: B8 01 00 00 00                                        MOV  EAX, 1
0000105F: 89 C1                                                 MOV  ECX, EAX
00001061: 89 D8                                                 MOV  EAX, EBX
00001063: D3 E0                                                 SAL  EAX, CL
00001065: 50                                                    PUSH EAX
00001066: 8D 45 F8                                              LEA  EAX, [EBP-8]
00001069: 89 C3                                                 MOV  EBX, EAX
0000106B: 8B 03                                                 MOV  EAX, [EBX]
0000106D: 5B                                                    POP  EBX
0000106E: 01 D8                                                 ADD  EAX, EBX
00001070: 5B                                                    POP  EBX
00001071: 88 03                                                 MOV  [EBX], AL
00001073: 8D 45 FC                                              LEA  EAX, [EBP-4]
00001076: 89 C3                                                 MOV  EBX, EAX
00001078: 8B 03                                                 MOV  EAX, [EBX]
0000107A: 89 C3                                                 MOV  EBX, EAX
0000107C: 0F BE 03                                              MOVSX EAX, BYTE [EBX]
0000107F: 89 C3                                                 MOV  EBX, EAX
00001081: B8 0A 00 00 00                                        MOV  EAX, 10
00001086: E8 AE EF FF FF                                        CALL __lt
0000108B: 09 C0                                                 OR   EAX, EAX
0000108D: 75 02                                                 JNE  short _lib_161
0000108F: EB 19                                                 JMP  short _lib_160
                                                                _lib_161:
00001091: 8D 45 FC                                              LEA  EAX, [EBP-4]
00001094: 89 C3                                                 MOV  EBX, EAX
00001096: 8B 03                                                 MOV  EAX, [EBX]
00001098: 50                                                    PUSH EAX
00001099: 89 C3                                                 MOV  EBX, EAX
0000109B: 0F BE 03                                              MOVSX EAX, BYTE [EBX]
0000109E: BB 30 00 00 00                                        MOV  EBX, 48
000010A3: 01 D8                                                 ADD  EAX, EBX
000010A5: 5B                                                    POP  EBX
000010A6: 88 03                                                 MOV  [EBX], AL
000010A8: EB 17                                                 JMP  short _lib_162
                                                                _lib_160:
000010AA: 8D 45 FC                                              LEA  EAX, [EBP-4]
000010AD: 89 C3                                                 MOV  EBX, EAX
000010AF: 8B 03                                                 MOV  EAX, [EBX]
000010B1: 50                                                    PUSH EAX
000010B2: 89 C3                                                 MOV  EBX, EAX
000010B4: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
000010B7: BB 37 00 00 00                                        MOV  EBX, 55
000010BC: 01 D8                                                 ADD  EAX, EBX
000010BE: 5B                                                    POP  EBX
000010BF: 88 03                                                 MOV  [EBX], AL
                                                                _lib_162:
000010C1: 8D 45 FC                                              LEA  EAX, [EBP-4]
000010C4: 89 C3                                                 MOV  EBX, EAX
000010C6: 8B 03                                                 MOV  EAX, [EBX]
000010C8: 40                                                    INC  EAX
000010C9: 89 03                                                 MOV  [EBX], EAX
000010CB: 8D 45 10                                              LEA  EAX, [EBP+16]
000010CE: 50                                                    PUSH EAX
000010CF: 89 C3                                                 MOV  EBX, EAX
000010D1: 8B 03                                                 MOV  EAX, [EBX]
000010D3: 50                                                    PUSH EAX
000010D4: 8D 45 08                                              LEA  EAX, [EBP+8]
000010D7: 89 C3                                                 MOV  EBX, EAX
000010D9: 8B 03                                                 MOV  EAX, [EBX]
000010DB: 5B                                                    POP  EBX
000010DC: 93                                                    XCHG EAX, EBX
000010DD: 99                                                    CDQ
000010DE: F7 FB                                                 IDIV EBX
000010E0: 5B                                                    POP  EBX
000010E1: 89 03                                                 MOV  [EBX], EAX
000010E3: 09 C0                                                 OR   EAX, EAX
000010E5: 75 02                                                 JNE  short _lib_163
000010E7: EB 05                                                 JMP  short _lib_159
                                                                _lib_163:
000010E9: E9 11 FF FF FF                                        JMP  _lib_158
                                                                _lib_159:
000010EE: 8D 45 FC                                              LEA  EAX, [EBP-4]
000010F1: 89 C3                                                 MOV  EBX, EAX
000010F3: 8B 03                                                 MOV  EAX, [EBX]
000010F5: 89 C3                                                 MOV  EBX, EAX
000010F7: 31 C0                                                 XOR  EAX, EAX
000010F9: 88 03                                                 MOV  [EBX], AL
000010FB: 8D 45 0C                                              LEA  EAX, [EBP+12]
000010FE: 89 C3                                                 MOV  EBX, EAX
00001100: 8B 03                                                 MOV  EAX, [EBX]
00001102: 50                                                    PUSH EAX
00001103: B1 01                                                 MOV  CL, 1
00001105: E8 8E EF FF FF                                        CALL _reverse
0000110A: 83 C4 04                                              ADD  ESP, 4
0000110D: 89 EC                                                 MOV  ESP, EBP
0000110F: 5D                                                    POP  EBP
00001110: C3                                                    RETN
                                                                
                                                                _itod:
00001111: 55                                                    PUSH EBP
00001112: 89 E5                                                 MOV  EBP, ESP
00001114: 83 C4 FC                                              ADD  ESP, -4
00001117: 8D 45 10                                              LEA  EAX, [EBP+16]
0000111A: 89 C3                                                 MOV  EBX, EAX
0000111C: 8B 03                                                 MOV  EAX, [EBX]
0000111E: 09 C0                                                 OR   EAX, EAX
00001120: 7C 02                                                 JL   short _lib_166
00001122: EB 1E                                                 JMP  short _lib_165
                                                                _lib_166:
00001124: 8D 45 10                                              LEA  EAX, [EBP+16]
00001127: 50                                                    PUSH EAX
00001128: 8D 45 10                                              LEA  EAX, [EBP+16]
0000112B: 89 C3                                                 MOV  EBX, EAX
0000112D: 8B 03                                                 MOV  EAX, [EBX]
0000112F: F7 D8                                                 NEG  EAX
00001131: 5B                                                    POP  EBX
00001132: 89 03                                                 MOV  [EBX], EAX
00001134: 8D 45 FC                                              LEA  EAX, [EBP-4]
00001137: 89 C3                                                 MOV  EBX, EAX
00001139: B8 2D 00 00 00                                        MOV  EAX, 45
0000113E: 88 03                                                 MOV  [EBX], AL
00001140: EB 0C                                                 JMP  short _lib_167
                                                                _lib_165:
00001142: 8D 45 FC                                              LEA  EAX, [EBP-4]
00001145: 89 C3                                                 MOV  EBX, EAX
00001147: B8 20 00 00 00                                        MOV  EAX, 32
0000114C: 88 03                                                 MOV  [EBX], AL
                                                                _lib_167:
0000114E: 8D 45 08                                              LEA  EAX, [EBP+8]
00001151: 89 C3                                                 MOV  EBX, EAX
00001153: 8B 03                                                 MOV  EAX, [EBX]
00001155: 09 C0                                                 OR   EAX, EAX
00001157: 7F 02                                                 JG   short _lib_169
00001159: EB 1D                                                 JMP  short _lib_168
                                                                _lib_169:
0000115B: 8D 45 0C                                              LEA  EAX, [EBP+12]
0000115E: 89 C3                                                 MOV  EBX, EAX
00001160: 8B 03                                                 MOV  EAX, [EBX]
00001162: 50                                                    PUSH EAX
00001163: 8D 45 08                                              LEA  EAX, [EBP+8]
00001166: 89 C3                                                 MOV  EBX, EAX
00001168: 8B 03                                                 MOV  EAX, [EBX]
0000116A: 48                                                    DEC  EAX
0000116B: 89 03                                                 MOV  [EBX], EAX
0000116D: 5B                                                    POP  EBX
0000116E: 01 D8                                                 ADD  EAX, EBX
00001170: 89 C3                                                 MOV  EBX, EAX
00001172: 31 C0                                                 XOR  EAX, EAX
00001174: 88 03                                                 MOV  [EBX], AL
00001176: EB 48                                                 JMP  short _lib_170
                                                                _lib_168:
00001178: 8D 45 08                                              LEA  EAX, [EBP+8]
0000117B: 89 C3                                                 MOV  EBX, EAX
0000117D: 8B 03                                                 MOV  EAX, [EBX]
0000117F: 09 C0                                                 OR   EAX, EAX
00001181: 7C 02                                                 JL   short _lib_172
00001183: EB 12                                                 JMP  short _lib_171
                                                                _lib_172:
00001185: 8D 45 08                                              LEA  EAX, [EBP+8]
00001188: 50                                                    PUSH EAX
00001189: 8D 45 08                                              LEA  EAX, [EBP+8]
0000118C: 89 C3                                                 MOV  EBX, EAX
0000118E: 8B 03                                                 MOV  EAX, [EBX]
00001190: F7 D8                                                 NEG  EAX
00001192: 5B                                                    POP  EBX
00001193: 89 03                                                 MOV  [EBX], EAX
00001195: EB 29                                                 JMP  short _lib_173
                                                                _lib_171:
                                                                _lib_174:
00001197: 8D 45 0C                                              LEA  EAX, [EBP+12]
0000119A: 89 C3                                                 MOV  EBX, EAX
0000119C: 8B 03                                                 MOV  EAX, [EBX]
0000119E: 50                                                    PUSH EAX
0000119F: 8D 45 08                                              LEA  EAX, [EBP+8]
000011A2: 89 C3                                                 MOV  EBX, EAX
000011A4: 8B 03                                                 MOV  EAX, [EBX]
000011A6: 5B                                                    POP  EBX
000011A7: 01 D8                                                 ADD  EAX, EBX
000011A9: 89 C3                                                 MOV  EBX, EAX
000011AB: 0F BE 03                                              MOVSX EAX, BYTE [EBX]
000011AE: 09 C0                                                 OR   EAX, EAX
000011B0: 75 02                                                 JNE  short _lib_176
000011B2: EB 0C                                                 JMP  short _lib_175
                                                                _lib_176:
000011B4: 8D 45 08                                              LEA  EAX, [EBP+8]
000011B7: 89 C3                                                 MOV  EBX, EAX
000011B9: 8B 03                                                 MOV  EAX, [EBX]
000011BB: 40                                                    INC  EAX
000011BC: 89 03                                                 MOV  [EBX], EAX
000011BE: EB D7                                                 JMP  short _lib_174
                                                                _lib_175:
                                                                _lib_173:
                                                                _lib_170:
                                                                _lib_177:
000011C0: 8D 45 08                                              LEA  EAX, [EBP+8]
000011C3: 89 C3                                                 MOV  EBX, EAX
000011C5: 8B 03                                                 MOV  EAX, [EBX]
000011C7: 09 C0                                                 OR   EAX, EAX
000011C9: 75 02                                                 JNE  short _lib_179
000011CB: EB 57                                                 JMP  short _lib_178
                                                                _lib_179:
000011CD: 8D 45 0C                                              LEA  EAX, [EBP+12]
000011D0: 89 C3                                                 MOV  EBX, EAX
000011D2: 8B 03                                                 MOV  EAX, [EBX]
000011D4: 50                                                    PUSH EAX
000011D5: 8D 45 08                                              LEA  EAX, [EBP+8]
000011D8: 89 C3                                                 MOV  EBX, EAX
000011DA: 8B 03                                                 MOV  EAX, [EBX]
000011DC: 48                                                    DEC  EAX
000011DD: 89 03                                                 MOV  [EBX], EAX
000011DF: 5B                                                    POP  EBX
000011E0: 01 D8                                                 ADD  EAX, EBX
000011E2: 50                                                    PUSH EAX
000011E3: 8D 45 10                                              LEA  EAX, [EBP+16]
000011E6: 89 C3                                                 MOV  EBX, EAX
000011E8: 8B 03                                                 MOV  EAX, [EBX]
000011EA: 89 C3                                                 MOV  EBX, EAX
000011EC: B8 0A 00 00 00                                        MOV  EAX, 10
000011F1: 93                                                    XCHG EAX, EBX
000011F2: 99                                                    CDQ
000011F3: F7 FB                                                 IDIV EBX
000011F5: 89 D0                                                 MOV  EAX, EDX
000011F7: BB 30 00 00 00                                        MOV  EBX, 48
000011FC: 01 D8                                                 ADD  EAX, EBX
000011FE: 5B                                                    POP  EBX
000011FF: 88 03                                                 MOV  [EBX], AL
00001201: 8D 45 10                                              LEA  EAX, [EBP+16]
00001204: 50                                                    PUSH EAX
00001205: 8D 45 10                                              LEA  EAX, [EBP+16]
00001208: 89 C3                                                 MOV  EBX, EAX
0000120A: 8B 03                                                 MOV  EAX, [EBX]
0000120C: 89 C3                                                 MOV  EBX, EAX
0000120E: B8 0A 00 00 00                                        MOV  EAX, 10
00001213: 93                                                    XCHG EAX, EBX
00001214: 99                                                    CDQ
00001215: F7 FB                                                 IDIV EBX
00001217: 5B                                                    POP  EBX
00001218: 89 03                                                 MOV  [EBX], EAX
0000121A: 09 C0                                                 OR   EAX, EAX
0000121C: 74 02                                                 JE   short _lib_181
0000121E: EB 02                                                 JMP  short _lib_180
                                                                _lib_181:
00001220: EB 02                                                 JMP  short _lib_178
                                                                _lib_180:
00001222: EB 9C                                                 JMP  short _lib_177
                                                                _lib_178:
00001224: 8D 45 08                                              LEA  EAX, [EBP+8]
00001227: 89 C3                                                 MOV  EBX, EAX
00001229: 8B 03                                                 MOV  EAX, [EBX]
0000122B: 09 C0                                                 OR   EAX, EAX
0000122D: 75 02                                                 JNE  short _lib_183
0000122F: EB 21                                                 JMP  short _lib_182
                                                                _lib_183:
00001231: 8D 45 0C                                              LEA  EAX, [EBP+12]
00001234: 89 C3                                                 MOV  EBX, EAX
00001236: 8B 03                                                 MOV  EAX, [EBX]
00001238: 50                                                    PUSH EAX
00001239: 8D 45 08                                              LEA  EAX, [EBP+8]
0000123C: 89 C3                                                 MOV  EBX, EAX
0000123E: 8B 03                                                 MOV  EAX, [EBX]
00001240: 48                                                    DEC  EAX
00001241: 89 03                                                 MOV  [EBX], EAX
00001243: 5B                                                    POP  EBX
00001244: 01 D8                                                 ADD  EAX, EBX
00001246: 50                                                    PUSH EAX
00001247: 8D 45 FC                                              LEA  EAX, [EBP-4]
0000124A: 89 C3                                                 MOV  EBX, EAX
0000124C: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
0000124F: 5B                                                    POP  EBX
00001250: 88 03                                                 MOV  [EBX], AL
                                                                _lib_182:
                                                                _lib_184:
00001252: 8D 45 08                                              LEA  EAX, [EBP+8]
00001255: 89 C3                                                 MOV  EBX, EAX
00001257: 8B 03                                                 MOV  EAX, [EBX]
00001259: 09 C0                                                 OR   EAX, EAX
0000125B: 7F 02                                                 JG   short _lib_186
0000125D: EB 20                                                 JMP  short _lib_185
                                                                _lib_186:
0000125F: 8D 45 0C                                              LEA  EAX, [EBP+12]
00001262: 89 C3                                                 MOV  EBX, EAX
00001264: 8B 03                                                 MOV  EAX, [EBX]
00001266: 50                                                    PUSH EAX
00001267: 8D 45 08                                              LEA  EAX, [EBP+8]
0000126A: 89 C3                                                 MOV  EBX, EAX
0000126C: 8B 03                                                 MOV  EAX, [EBX]
0000126E: 48                                                    DEC  EAX
0000126F: 89 03                                                 MOV  [EBX], EAX
00001271: 5B                                                    POP  EBX
00001272: 01 D8                                                 ADD  EAX, EBX
00001274: 89 C3                                                 MOV  EBX, EAX
00001276: B8 20 00 00 00                                        MOV  EAX, 32
0000127B: 88 03                                                 MOV  [EBX], AL
0000127D: EB D3                                                 JMP  short _lib_184
                                                                _lib_185:
0000127F: 8D 45 0C                                              LEA  EAX, [EBP+12]
00001282: 89 C3                                                 MOV  EBX, EAX
00001284: 8B 03                                                 MOV  EAX, [EBX]
00001286: 89 EC                                                 MOV  ESP, EBP
00001288: 5D                                                    POP  EBP
00001289: C3                                                    RETN
                                                                
                                                                _itoo:
0000128A: 55                                                    PUSH EBP
0000128B: 89 E5                                                 MOV  EBP, ESP
0000128D: 83 C4 FC                                              ADD  ESP, -4
00001290: 8D 45 08                                              LEA  EAX, [EBP+8]
00001293: 89 C3                                                 MOV  EBX, EAX
00001295: 8B 03                                                 MOV  EAX, [EBX]
00001297: 09 C0                                                 OR   EAX, EAX
00001299: 7F 02                                                 JG   short _lib_189
0000129B: EB 1D                                                 JMP  short _lib_188
                                                                _lib_189:
0000129D: 8D 45 0C                                              LEA  EAX, [EBP+12]
000012A0: 89 C3                                                 MOV  EBX, EAX
000012A2: 8B 03                                                 MOV  EAX, [EBX]
000012A4: 50                                                    PUSH EAX
000012A5: 8D 45 08                                              LEA  EAX, [EBP+8]
000012A8: 89 C3                                                 MOV  EBX, EAX
000012AA: 8B 03                                                 MOV  EAX, [EBX]
000012AC: 48                                                    DEC  EAX
000012AD: 89 03                                                 MOV  [EBX], EAX
000012AF: 5B                                                    POP  EBX
000012B0: 01 D8                                                 ADD  EAX, EBX
000012B2: 89 C3                                                 MOV  EBX, EAX
000012B4: 31 C0                                                 XOR  EAX, EAX
000012B6: 88 03                                                 MOV  [EBX], AL
000012B8: EB 48                                                 JMP  short _lib_190
                                                                _lib_188:
000012BA: 8D 45 08                                              LEA  EAX, [EBP+8]
000012BD: 89 C3                                                 MOV  EBX, EAX
000012BF: 8B 03                                                 MOV  EAX, [EBX]
000012C1: 09 C0                                                 OR   EAX, EAX
000012C3: 7C 02                                                 JL   short _lib_192
000012C5: EB 12                                                 JMP  short _lib_191
                                                                _lib_192:
000012C7: 8D 45 08                                              LEA  EAX, [EBP+8]
000012CA: 50                                                    PUSH EAX
000012CB: 8D 45 08                                              LEA  EAX, [EBP+8]
000012CE: 89 C3                                                 MOV  EBX, EAX
000012D0: 8B 03                                                 MOV  EAX, [EBX]
000012D2: F7 D8                                                 NEG EAX
000012D4: 5B                                                    POP  EBX
000012D5: 89 03                                                 MOV  [EBX], EAX
000012D7: EB 29                                                 JMP  short _lib_193
                                                                _lib_191:
                                                                _lib_194:
000012D9: 8D 45 0C                                              LEA  EAX, [EBP+12]
000012DC: 89 C3                                                 MOV  EBX, EAX
000012DE: 8B 03                                                 MOV  EAX, [EBX]
000012E0: 50                                                    PUSH EAX
000012E1: 8D 45 08                                              LEA  EAX, [EBP+8]
000012E4: 89 C3                                                 MOV  EBX, EAX
000012E6: 8B 03                                                 MOV  EAX, [EBX]
000012E8: 5B                                                    POP  EBX
000012E9: 01 D8                                                 ADD  EAX, EBX
000012EB: 89 C3                                                 MOV  EBX, EAX
000012ED: 0F BE 03                                              MOVSX EAX, BYTE [EBX]
000012F0: 09 C0                                                 OR   EAX, EAX
000012F2: 75 02                                                 JNE  short _lib_196
000012F4: EB 0C                                                 JMP  short _lib_195
                                                                _lib_196:
000012F6: 8D 45 08                                              LEA  EAX, [EBP+8]
000012F9: 89 C3                                                 MOV  EBX, EAX
000012FB: 8B 03                                                 MOV  EAX, [EBX]
000012FD: 40                                                    INC  EAX
000012FE: 89 03                                                 MOV  [EBX], EAX
00001300: EB D7                                                 JMP  short _lib_194
                                                                _lib_195:
                                                                _lib_193:
                                                                _lib_190:
                                                                _lib_197:
00001302: 8D 45 08                                              LEA  EAX, [EBP+8]
00001305: 89 C3                                                 MOV  EBX, EAX
00001307: 8B 03                                                 MOV  EAX, [EBX]
00001309: 09 C0                                                 OR   EAX, EAX
0000130B: 75 02                                                 JNE  short _lib_199
0000130D: EB 73                                                 JMP  short _lib_198
                                                                _lib_199:
0000130F: 8D 45 FC                                              LEA  EAX, [EBP-4]
00001312: 50                                                    PUSH EAX
00001313: 8D 45 10                                              LEA  EAX, [EBP+16]
00001316: 89 C3                                                 MOV  EBX, EAX
00001318: 8B 03                                                 MOV  EAX, [EBX]
0000131A: 89 C3                                                 MOV  EBX, EAX
0000131C: B8 07 00 00 00                                        MOV  EAX, 7
00001321: 21 D8                                                 AND  EAX, EBX
00001323: 5B                                                    POP  EBX
00001324: 89 03                                                 MOV  [EBX], EAX
00001326: 8D 45 10                                              LEA  EAX, [EBP+16]
00001329: 50                                                    PUSH EAX
0000132A: 8D 45 10                                              LEA  EAX, [EBP+16]
0000132D: 89 C3                                                 MOV  EBX, EAX
0000132F: 8B 03                                                 MOV  EAX, [EBX]
00001331: 89 C3                                                 MOV  EBX, EAX
00001333: B8 03 00 00 00                                        MOV  EAX, 3
00001338: 89 C1                                                 MOV  ECX, EAX
0000133A: 89 D8                                                 MOV  EAX, EBX
0000133C: D3 F8                                                 SAR  EAX, CL
0000133E: 89 C3                                                 MOV  EBX, EAX
00001340: B8 FF 1F 00 00                                        MOV  EAX, 8191
00001345: 21 D8                                                 AND  EAX, EBX
00001347: 5B                                                    POP  EBX
00001348: 89 03                                                 MOV  [EBX], EAX
0000134A: 8D 45 0C                                              LEA  EAX, [EBP+12]
0000134D: 89 C3                                                 MOV  EBX, EAX
0000134F: 8B 03                                                 MOV  EAX, [EBX]
00001351: 50                                                    PUSH EAX
00001352: 8D 45 08                                              LEA  EAX, [EBP+8]
00001355: 89 C3                                                 MOV  EBX, EAX
00001357: 8B 03                                                 MOV  EAX, [EBX]
00001359: 48                                                    DEC  EAX
0000135A: 89 03                                                 MOV  [EBX], EAX
0000135C: 5B                                                    POP  EBX
0000135D: 01 D8                                                 ADD  EAX, EBX
0000135F: 50                                                    PUSH EAX
00001360: 8D 45 FC                                              LEA  EAX, [EBP-4]
00001363: 89 C3                                                 MOV  EBX, EAX
00001365: 8B 03                                                 MOV  EAX, [EBX]
00001367: BB 30 00 00 00                                        MOV  EBX, 48
0000136C: 01 D8                                                 ADD  EAX, EBX
0000136E: 5B                                                    POP  EBX
0000136F: 88 03                                                 MOV  [EBX], AL
00001371: 8D 45 10                                              LEA  EAX, [EBP+16]
00001374: 89 C3                                                 MOV  EBX, EAX
00001376: 8B 03                                                 MOV  EAX, [EBX]
00001378: 09 C0                                                 OR   EAX, EAX
0000137A: 74 02                                                 JE   short _lib_201
0000137C: EB 02                                                 JMP  short _lib_200
                                                                _lib_201:
0000137E: EB 02                                                 JMP  short _lib_198
                                                                _lib_200:
00001380: EB 80                                                 JMP  short _lib_197
                                                                _lib_198:
                                                                _lib_202:
00001382: 8D 45 08                                              LEA  EAX, [EBP+8]
00001385: 89 C3                                                 MOV  EBX, EAX
00001387: 8B 03                                                 MOV  EAX, [EBX]
00001389: 09 C0                                                 OR   EAX, EAX
0000138B: 75 02                                                 JNE  short _lib_204
0000138D: EB 20                                                 JMP  short _lib_203
                                                                _lib_204:
0000138F: 8D 45 0C                                              LEA  EAX, [EBP+12]
00001392: 89 C3                                                 MOV  EBX, EAX
00001394: 8B 03                                                 MOV  EAX, [EBX]
00001396: 50                                                    PUSH EAX
00001397: 8D 45 08                                              LEA  EAX, [EBP+8]
0000139A: 89 C3                                                 MOV  EBX, EAX
0000139C: 8B 03                                                 MOV  EAX, [EBX]
0000139E: 48                                                    DEC  EAX
0000139F: 89 03                                                 MOV  [EBX], EAX
000013A1: 5B                                                    POP  EBX
000013A2: 01 D8                                                 ADD  EAX, EBX
000013A4: 89 C3                                                 MOV  EBX, EAX
000013A6: B8 20 00 00 00                                        MOV  EAX, 32
000013AB: 88 03                                                 MOV  [EBX], AL
000013AD: EB D3                                                 JMP  short _lib_202
                                                                _lib_203:
000013AF: 8D 45 0C                                              LEA  EAX, [EBP+12]
000013B2: 89 C3                                                 MOV  EBX, EAX
000013B4: 8B 03                                                 MOV  EAX, [EBX]
000013B6: 89 EC                                                 MOV  ESP, EBP
000013B8: 5D                                                    POP  EBP
000013B9: C3                                                    RETN
                                                                
                                                                _itou:
000013BA: 55                                                    PUSH EBP
000013BB: 89 E5                                                 MOV  EBP, ESP
000013BD: 83 C4 FC                                              ADD  ESP, -4
000013C0: 8D 45 08                                              LEA  EAX, [EBP+8]
000013C3: 89 C3                                                 MOV  EBX, EAX
000013C5: 8B 03                                                 MOV  EAX, [EBX]
000013C7: 09 C0                                                 OR   EAX, EAX
000013C9: 7F 02                                                 JG   short _lib_207
000013CB: EB 1D                                                 JMP  short _lib_206
                                                                _lib_207:
000013CD: 8D 45 0C                                              LEA  EAX, [EBP+12]
000013D0: 89 C3                                                 MOV  EBX, EAX
000013D2: 8B 03                                                 MOV  EAX, [EBX]
000013D4: 50                                                    PUSH EAX
000013D5: 8D 45 08                                              LEA  EAX, [EBP+8]
000013D8: 89 C3                                                 MOV  EBX, EAX
000013DA: 8B 03                                                 MOV  EAX, [EBX]
000013DC: 48                                                    DEC  EAX
000013DD: 89 03                                                 MOV  [EBX], EAX
000013DF: 5B                                                    POP  EBX
000013E0: 01 D8                                                 ADD  EAX, EBX
000013E2: 89 C3                                                 MOV  EBX, EAX
000013E4: 31 C0                                                 XOR  EAX, EAX
000013E6: 88 03                                                 MOV  [EBX], AL
000013E8: EB 48                                                 JMP  short _lib_208
                                                                _lib_206:
000013EA: 8D 45 08                                              LEA  EAX, [EBP+8]
000013ED: 89 C3                                                 MOV  EBX, EAX
000013EF: 8B 03                                                 MOV  EAX, [EBX]
000013F1: 09 C0                                                 OR   EAX, EAX
000013F3: 7C 02                                                 JL _lib_210
000013F5: EB 12                                                 JMP  short _lib_209
                                                                _lib_210:
000013F7: 8D 45 08                                              LEA  EAX, [EBP+8]
000013FA: 50                                                    PUSH EAX
000013FB: 8D 45 08                                              LEA  EAX, [EBP+8]
000013FE: 89 C3                                                 MOV  EBX, EAX
00001400: 8B 03                                                 MOV  EAX, [EBX]
00001402: F7 D8                                                 NEG EAX
00001404: 5B                                                    POP  EBX
00001405: 89 03                                                 MOV  [EBX], EAX
00001407: EB 29                                                 JMP  short _lib_211
                                                                _lib_209:
                                                                _lib_212:
00001409: 8D 45 0C                                              LEA  EAX, [EBP+12]
0000140C: 89 C3                                                 MOV  EBX, EAX
0000140E: 8B 03                                                 MOV  EAX, [EBX]
00001410: 50                                                    PUSH EAX
00001411: 8D 45 08                                              LEA  EAX, [EBP+8]
00001414: 89 C3                                                 MOV  EBX, EAX
00001416: 8B 03                                                 MOV  EAX, [EBX]
00001418: 5B                                                    POP  EBX
00001419: 01 D8                                                 ADD  EAX, EBX
0000141B: 89 C3                                                 MOV  EBX, EAX
0000141D: 0F BE 03                                              MOVSX EAX, BYTE [EBX]
00001420: 09 C0                                                 OR   EAX, EAX
00001422: 75 02                                                 JNE  short _lib_214
00001424: EB 0C                                                 JMP  short _lib_213
                                                                _lib_214:
00001426: 8D 45 08                                              LEA  EAX, [EBP+8]
00001429: 89 C3                                                 MOV  EBX, EAX
0000142B: 8B 03                                                 MOV  EAX, [EBX]
0000142D: 40                                                    INC  EAX
0000142E: 89 03                                                 MOV  [EBX], EAX
00001430: EB D7                                                 JMP  short _lib_212
                                                                _lib_213:
                                                                _lib_211:
                                                                _lib_208:
                                                                _lib_215:
00001432: 8D 45 08                                              LEA  EAX, [EBP+8]
00001435: 89 C3                                                 MOV  EBX, EAX
00001437: 8B 03                                                 MOV  EAX, [EBX]
00001439: 09 C0                                                 OR   EAX, EAX
0000143B: 75 05                                                 JNE  short _lib_217
0000143D: E9 AD 00 00 00                                        JMP  _lib_216
                                                                _lib_217:
00001442: 8D 45 FC                                              LEA  EAX, [EBP-4]
00001445: 50                                                    PUSH EAX
00001446: 8D 45 10                                              LEA  EAX, [EBP+16]
00001449: 89 C3                                                 MOV  EBX, EAX
0000144B: 8B 03                                                 MOV  EAX, [EBX]
0000144D: 89 C3                                                 MOV  EBX, EAX
0000144F: B8 01 00 00 00                                        MOV  EAX, 1
00001454: 21 D8                                                 AND  EAX, EBX
00001456: 5B                                                    POP  EBX
00001457: 89 03                                                 MOV  [EBX], EAX
00001459: 8D 45 10                                              LEA  EAX, [EBP+16]
0000145C: 50                                                    PUSH EAX
0000145D: 8D 45 10                                              LEA  EAX, [EBP+16]
00001460: 89 C3                                                 MOV  EBX, EAX
00001462: 8B 03                                                 MOV  EAX, [EBX]
00001464: 89 C3                                                 MOV  EBX, EAX
00001466: B8 01 00 00 00                                        MOV  EAX, 1
0000146B: 89 C1                                                 MOV  ECX, EAX
0000146D: 89 D8                                                 MOV  EAX, EBX
0000146F: D3 F8                                                 SAR  EAX, CL
00001471: 89 C3                                                 MOV  EBX, EAX
00001473: B8 FF 7F 00 00                                        MOV  EAX, 32767
00001478: 21 D8                                                 AND  EAX, EBX
0000147A: 5B                                                    POP  EBX
0000147B: 89 03                                                 MOV  [EBX], EAX
0000147D: 8D 45 0C                                              LEA  EAX, [EBP+12]
00001480: 89 C3                                                 MOV  EBX, EAX
00001482: 8B 03                                                 MOV  EAX, [EBX]
00001484: 50                                                    PUSH EAX
00001485: 8D 45 08                                              LEA  EAX, [EBP+8]
00001488: 89 C3                                                 MOV  EBX, EAX
0000148A: 8B 03                                                 MOV  EAX, [EBX]
0000148C: 48                                                    DEC  EAX
0000148D: 89 03                                                 MOV  [EBX], EAX
0000148F: 5B                                                    POP  EBX
00001490: 01 D8                                                 ADD  EAX, EBX
00001492: 50                                                    PUSH EAX
00001493: 8D 45 10                                              LEA  EAX, [EBP+16]
00001496: 89 C3                                                 MOV  EBX, EAX
00001498: 8B 03                                                 MOV  EAX, [EBX]
0000149A: 89 C3                                                 MOV  EBX, EAX
0000149C: B8 05 00 00 00                                        MOV  EAX, 5
000014A1: 93                                                    XCHG EAX, EBX
000014A2: 99                                                    CDQ
000014A3: F7 FB                                                 IDIV EBX
000014A5: 89 D0                                                 MOV  EAX, EDX
000014A7: 89 C3                                                 MOV  EBX, EAX
000014A9: B8 01 00 00 00                                        MOV  EAX, 1
000014AE: 89 C1                                                 MOV  ECX, EAX
000014B0: 89 D8                                                 MOV  EAX, EBX
000014B2: D3 E0                                                 SAL  EAX,CL
000014B4: 50                                                    PUSH EAX
000014B5: 8D 45 FC                                              LEA  EAX, [EBP-4]
000014B8: 89 C3                                                 MOV  EBX, EAX
000014BA: 8B 03                                                 MOV  EAX, [EBX]
000014BC: 5B                                                    POP  EBX
000014BD: 01 D8                                                 ADD  EAX, EBX
000014BF: BB 30 00 00 00                                        MOV  EBX, 48
000014C4: 01 D8                                                 ADD  EAX, EBX
000014C6: 5B                                                    POP  EBX
000014C7: 88 03                                                 MOV  [EBX], AL
000014C9: 8D 45 10                                              LEA  EAX, [EBP+16]
000014CC: 50                                                    PUSH EAX
000014CD: 8D 45 10                                              LEA  EAX, [EBP+16]
000014D0: 89 C3                                                 MOV  EBX, EAX
000014D2: 8B 03                                                 MOV  EAX, [EBX]
000014D4: 89 C3                                                 MOV  EBX, EAX
000014D6: B8 05 00 00 00                                        MOV  EAX, 5
000014DB: 93                                                    XCHG EAX, EBX
000014DC: 99                                                    CDQ
000014DD: F7 FB                                                 IDIV EBX
000014DF: 5B                                                    POP  EBX
000014E0: 89 03                                                 MOV  [EBX], EAX
000014E2: 09 C0                                                 OR   EAX, EAX
000014E4: 74 02                                                 JE   short _lib_219
000014E6: EB 02                                                 JMP  short _lib_218
                                                                _lib_219:
000014E8: EB 05                                                 JMP  short _lib_216
                                                                _lib_218:
000014EA: E9 43 FF FF FF                                        JMP  _lib_215
                                                                _lib_216:
                                                                _lib_220:
000014EF: 8D 45 08                                              LEA  EAX, [EBP+8]
000014F2: 89 C3                                                 MOV  EBX, EAX
000014F4: 8B 03                                                 MOV  EAX, [EBX]
000014F6: 09 C0                                                 OR   EAX, EAX
000014F8: 75 02                                                 JNE  short _lib_222
000014FA: EB 20                                                 JMP  short _lib_221
                                                                _lib_222:
000014FC: 8D 45 0C                                              LEA  EAX, [EBP+12]
000014FF: 89 C3                                                 MOV  EBX, EAX
00001501: 8B 03                                                 MOV  EAX, [EBX]
00001503: 50                                                    PUSH EAX
00001504: 8D 45 08                                              LEA  EAX, [EBP+8]
00001507: 89 C3                                                 MOV  EBX, EAX
00001509: 8B 03                                                 MOV  EAX, [EBX]
0000150B: 48                                                    DEC  EAX
0000150C: 89 03                                                 MOV  [EBX], EAX
0000150E: 5B                                                    POP  EBX
0000150F: 01 D8                                                 ADD  EAX, EBX
00001511: 89 C3                                                 MOV  EBX, EAX
00001513: B8 20 00 00 00                                        MOV  EAX, 32
00001518: 88 03                                                 MOV  [EBX], AL
0000151A: EB D3                                                 JMP  short _lib_220
                                                                _lib_221:
0000151C: 8D 45 0C                                              LEA  EAX, [EBP+12]
0000151F: 89 C3                                                 MOV  EBX, EAX
00001521: 8B 03                                                 MOV  EAX, [EBX]
00001523: 89 EC                                                 MOV  ESP, EBP
00001525: 5D                                                    POP  EBP
00001526: C3                                                    RETN
                                                                
                                                                _itox:
00001527: 55                                                    PUSH EBP
00001528: 89 E5                                                 MOV  EBP, ESP
0000152A: 83 C4 F8                                              ADD  ESP,-8
0000152D: 8D 45 08                                              LEA  EAX, [EBP+8]
00001530: 89 C3                                                 MOV  EBX, EAX
00001532: 8B 03                                                 MOV  EAX, [EBX]
00001534: 09 C0                                                 OR   EAX, EAX
00001536: 7F 02                                                 JG _lib_225
00001538: EB 1D                                                 JMP  short _lib_224
                                                                _lib_225:
0000153A: 8D 45 0C                                              LEA  EAX, [EBP+12]
0000153D: 89 C3                                                 MOV  EBX, EAX
0000153F: 8B 03                                                 MOV  EAX, [EBX]
00001541: 50                                                    PUSH EAX
00001542: 8D 45 08                                              LEA  EAX, [EBP+8]
00001545: 89 C3                                                 MOV  EBX, EAX
00001547: 8B 03                                                 MOV  EAX, [EBX]
00001549: 48                                                    DEC  EAX
0000154A: 89 03                                                 MOV  [EBX], EAX
0000154C: 5B                                                    POP  EBX
0000154D: 01 D8                                                 ADD  EAX, EBX
0000154F: 89 C3                                                 MOV  EBX, EAX
00001551: 31 C0                                                 XOR  EAX, EAX
00001553: 88 03                                                 MOV  [EBX], AL
00001555: EB 48                                                 JMP  short _lib_226
                                                                _lib_224:
00001557: 8D 45 08                                              LEA  EAX, [EBP+8]
0000155A: 89 C3                                                 MOV  EBX, EAX
0000155C: 8B 03                                                 MOV  EAX, [EBX]
0000155E: 09 C0                                                 OR   EAX, EAX
00001560: 7C 02                                                 JL   short _lib_228
00001562: EB 12                                                 JMP  short _lib_227
                                                                _lib_228:
00001564: 8D 45 08                                              LEA  EAX, [EBP+8]
00001567: 50                                                    PUSH EAX
00001568: 8D 45 08                                              LEA  EAX, [EBP+8]
0000156B: 89 C3                                                 MOV  EBX, EAX
0000156D: 8B 03                                                 MOV  EAX, [EBX]
0000156F: F7 D8                                                 NEG EAX
00001571: 5B                                                    POP  EBX
00001572: 89 03                                                 MOV  [EBX], EAX
00001574: EB 29                                                 JMP  short _lib_229
                                                                _lib_227:
                                                                _lib_230:
00001576: 8D 45 0C                                              LEA  EAX, [EBP+12]
00001579: 89 C3                                                 MOV  EBX, EAX
0000157B: 8B 03                                                 MOV  EAX, [EBX]
0000157D: 50                                                    PUSH EAX
0000157E: 8D 45 08                                              LEA  EAX, [EBP+8]
00001581: 89 C3                                                 MOV  EBX, EAX
00001583: 8B 03                                                 MOV  EAX, [EBX]
00001585: 5B                                                    POP  EBX
00001586: 01 D8                                                 ADD  EAX, EBX
00001588: 89 C3                                                 MOV  EBX, EAX
0000158A: 0F BE 03                                              MOVSX EAX,BYTE [EBX]
0000158D: 09 C0                                                 OR   EAX, EAX
0000158F: 75 02                                                 JNE  short _lib_232
00001591: EB 0C                                                 JMP  short _lib_231
                                                                _lib_232:
00001593: 8D 45 08                                              LEA  EAX, [EBP+8]
00001596: 89 C3                                                 MOV  EBX, EAX
00001598: 8B 03                                                 MOV  EAX, [EBX]
0000159A: 40                                                    INC  EAX
0000159B: 89 03                                                 MOV  [EBX], EAX
0000159D: EB D7                                                 JMP  short _lib_230
                                                                _lib_231:
                                                                _lib_229:
                                                                _lib_226:
                                                                _lib_233:
0000159F: 8D 45 08                                              LEA  EAX, [EBP+8]
000015A2: 89 C3                                                 MOV  EBX, EAX
000015A4: 8B 03                                                 MOV  EAX, [EBX]
000015A6: 09 C0                                                 OR   EAX, EAX
000015A8: 75 05                                                 JNE  short _lib_235
000015AA: E9 A2 00 00 00                                        JMP  _lib_234
                                                                _lib_235:
000015AF: 8D 45 FC                                              LEA  EAX, [EBP-4]
000015B2: 50                                                    PUSH EAX
000015B3: 8D 45 10                                              LEA  EAX, [EBP+16]
000015B6: 89 C3                                                 MOV  EBX, EAX
000015B8: 8B 03                                                 MOV  EAX, [EBX]
000015BA: 89 C3                                                 MOV  EBX, EAX
000015BC: B8 0F 00 00 00                                        MOV  EAX, 15
000015C1: 21 D8                                                 AND  EAX, EBX
000015C3: 5B                                                    POP  EBX
000015C4: 89 03                                                 MOV  [EBX], EAX
000015C6: 8D 45 10                                              LEA  EAX, [EBP+16]
000015C9: 50                                                    PUSH EAX
000015CA: 8D 45 10                                              LEA  EAX, [EBP+16]
000015CD: 89 C3                                                 MOV  EBX, EAX
000015CF: 8B 03                                                 MOV  EAX, [EBX]
000015D1: 89 C3                                                 MOV  EBX, EAX
000015D3: B8 10 00 00 00                                        MOV  EAX, 16
000015D8: 93                                                    XCHG EAX, EBX
000015D9: 99                                                    CDQ
000015DA: F7 FB                                                 IDIV EBX
000015DC: 5B                                                    POP  EBX
000015DD: 89 03                                                 MOV  [EBX], EAX
000015DF: 8D 45 FC                                              LEA  EAX, [EBP-4]
000015E2: 89 C3                                                 MOV  EBX, EAX
000015E4: 8B 03                                                 MOV  EAX, [EBX]
000015E6: 89 C3                                                 MOV  EBX, EAX
000015E8: B8 0A 00 00 00                                        MOV  EAX, 10
000015ED: E8 47 EA FF FF                                        CALL __lt
000015F2: 09 C0                                                 OR   EAX, EAX
000015F4: 75 02                                                 JNE  short _lib_237
000015F6: EB 0E                                                 JMP  short _lib_236
                                                                _lib_237:
000015F8: 8D 45 F8                                              LEA  EAX, [EBP-8]
000015FB: 89 C3                                                 MOV  EBX, EAX
000015FD: B8 30 00 00 00                                        MOV  EAX, 48
00001602: 89 03                                                 MOV  [EBX], EAX
00001604: EB 0C                                                 JMP  short _lib_238
                                                                _lib_236:
00001606: 8D 45 F8                                              LEA  EAX, [EBP-8]
00001609: 89 C3                                                 MOV  EBX, EAX
0000160B: B8 37 00 00 00                                        MOV  EAX, 55
00001610: 89 03                                                 MOV  [EBX], EAX
                                                                _lib_238:
00001612: 8D 45 0C                                              LEA  EAX, [EBP+12]
00001615: 89 C3                                                 MOV  EBX, EAX
00001617: 8B 03                                                 MOV  EAX, [EBX]
00001619: 50                                                    PUSH EAX
0000161A: 8D 45 08                                              LEA  EAX, [EBP+8]
0000161D: 89 C3                                                 MOV  EBX, EAX
0000161F: 8B 03                                                 MOV  EAX, [EBX]
00001621: 48                                                    DEC  EAX
00001622: 89 03                                                 MOV  [EBX], EAX
00001624: 5B                                                    POP  EBX
00001625: 01 D8                                                 ADD  EAX, EBX
00001627: 50                                                    PUSH EAX
00001628: 8D 45 FC                                              LEA  EAX, [EBP-4]
0000162B: 89 C3                                                 MOV  EBX, EAX
0000162D: 8B 03                                                 MOV  EAX, [EBX]
0000162F: 50                                                    PUSH EAX
00001630: 8D 45 F8                                              LEA  EAX, [EBP-8]
00001633: 89 C3                                                 MOV  EBX, EAX
00001635: 8B 03                                                 MOV  EAX, [EBX]
00001637: 5B                                                    POP  EBX
00001638: 01 D8                                                 ADD  EAX, EBX
0000163A: 5B                                                    POP  EBX
0000163B: 88 03                                                 MOV  [EBX], AL
0000163D: 8D 45 10                                              LEA  EAX, [EBP+16]
00001640: 89 C3                                                 MOV  EBX, EAX
00001642: 8B 03                                                 MOV  EAX, [EBX]
00001644: 09 C0                                                 OR   EAX, EAX
00001646: 74 02                                                 JE   short _lib_240
00001648: EB 02                                                 JMP  short _lib_239
                                                                _lib_240:
0000164A: EB 05                                                 JMP  short _lib_234
                                                                _lib_239:
0000164C: E9 4E FF FF FF                                        JMP  _lib_233
                                                                _lib_234:
                                                                _lib_241:
00001651: 8D 45 08                                              LEA  EAX, [EBP+8]
00001654: 89 C3                                                 MOV  EBX, EAX
00001656: 8B 03                                                 MOV  EAX, [EBX]
00001658: 09 C0                                                 OR   EAX, EAX
0000165A: 75 02                                                 JNE  short _lib_243
0000165C: EB 20                                                 JMP  short _lib_242
                                                                _lib_243:
0000165E: 8D 45 0C                                              LEA  EAX, [EBP+12]
00001661: 89 C3                                                 MOV  EBX, EAX
00001663: 8B 03                                                 MOV  EAX, [EBX]
00001665: 50                                                    PUSH EAX
00001666: 8D 45 08                                              LEA  EAX, [EBP+8]
00001669: 89 C3                                                 MOV  EBX, EAX
0000166B: 8B 03                                                 MOV  EAX, [EBX]
0000166D: 48                                                    DEC  EAX
0000166E: 89 03                                                 MOV  [EBX], EAX
00001670: 5B                                                    POP  EBX
00001671: 01 D8                                                 ADD  EAX, EBX
00001673: 89 C3                                                 MOV  EBX, EAX
00001675: B8 20 00 00 00                                        MOV  EAX, 32
0000167A: 88 03                                                 MOV  [EBX], AL
0000167C: EB D3                                                 JMP  short _lib_241
                                                                _lib_242:
0000167E: 8D 45 0C                                              LEA  EAX, [EBP+12]
00001681: 89 C3                                                 MOV  EBX, EAX
00001683: 8B 03                                                 MOV  EAX, [EBX]
00001685: 89 EC                                                 MOV  ESP, EBP
00001687: 5D                                                    POP  EBP
00001688: C3                                                    RETN
                                                                
                                                                ;__iob:
                                                                ;times 3*32 db 0x0
                                                                
                                                                
                                                                  ; MenuetOS implement
                                                                  include "OSFUNC.ASM"
                                                                ; -----------------------------------------------------------
                                                                ; Small C Compiler for TRDOS 386 (v2.0.9 and later)
                                                                ; Erdogan Tan - 2024
                                                                ; Beginning: 05/09/2024
                                                                ; Last Update: 23/09/2024
                                                                ; -----------------------------------------------------------
                                                                ; Derived from 'osfunc.asm' file of KolibriOS SCC source code
                                                                ; 2024
                                                                
                                                                ; 20/08/2024 ; TRDOS 386 v2.0.9
                                                                ; 29/04/2016
                                                                _ver 	equ 0
                                                                _exit 	equ 1
                                                                _fork 	equ 2
                                                                _read 	equ 3
                                                                _write	equ 4
                                                                _open	equ 5
                                                                _close 	equ 6
                                                                _wait 	equ 7
                                                                _creat 	equ 8
                                                                _link 	equ 9
                                                                _unlink	equ 10
                                                                _exec	equ 11
                                                                _chdir	equ 12
                                                                _time 	equ 13
                                                                _mkdir 	equ 14
                                                                _chmod	equ 15
                                                                _chown	equ 16
                                                                _break	equ 17
                                                                _stat	equ 18
                                                                _seek	equ 19
                                                                _tell 	equ 20
                                                                _mount	equ 21
                                                                _umount	equ 22
                                                                _setuid	equ 23
                                                                _getuid	equ 24
                                                                _stime	equ 25
                                                                _quit	equ 26
                                                                _intr	equ 27
                                                                _fstat	equ 28
                                                                _emt 	equ 29
                                                                _mdate 	equ 30
                                                                _video 	equ 31
                                                                _audio	equ 32
                                                                _timer	equ 33
                                                                _sleep	equ 34
                                                                _msg    equ 35
                                                                _geterr	equ 36
                                                                _fpsave	equ 37
                                                                _pri	equ 38
                                                                _rele	equ 39
                                                                _fff	equ 40
                                                                _fnf	equ 41
                                                                _alloc	equ 42
                                                                _dalloc equ 43
                                                                _calbac equ 44
                                                                _dma	equ 45
                                                                _stdio  equ 46
                                                                
                                                                    ; 12/09/2024 ('sys' macro in FASM format)
                                                                
                                                                macro sys op1,op2,op3,op4
                                                                {
                                                                    if op4 eq
                                                                    else
                                                                        mov edx, op4
                                                                    end if
                                                                    if op3 eq
                                                                    else
                                                                        mov ecx, op3
                                                                    end if
                                                                    if op2 eq
                                                                    else
                                                                        mov ebx, op2
                                                                    end if
                                                                    mov eax, op1
                                                                    int 40h
                                                                }
                                                                
                                                                ; -----------------------------
                                                                
                                                                ;
                                                                ; OS function implementation
                                                                ; SmallC for KolibriOS
                                                                ;
                                                                
                                                                init_osfunc:
                                                                ; 05/09/2024 - TRDOS 386 v2.0.9
                                                                ; nothing to do for now
00001689: C3                                                    retn
                                                                
                                                                ;Main OS functions
                                                                
                                                                _OS_fopen:
                                                                ;Implement "fopen"
                                                                  ;esp+4 - mode
                                                                  ;esp+8 - file name
                                                                
0000168A: 8B 44 24 04                                             mov  eax, [esp+4] ; file open mode
0000168E: 8B 5C 24 08                                             mov  ebx, [esp+8] ; file name
                                                                 
00001692: 31 C9                                                   xor  ecx, ecx ; 0 ; open for read
00001694: 80 38 72                                                cmp  byte [eax], 'r'
00001697: 74 09                                                   je   short open_read
00001699: 41                                                      inc  ecx ; 1 ; open for write
0000169A: 80 38 77                                                cmp  byte [eax], 'w'
0000169D: 74 03                                                   je   short open_write
                                                                  ;bad mode
                                                                file_notfound:
                                                                access_error:
0000169F: 31 C0                                                   xor  eax, eax ; 0 ; invalid open mode
000016A1: C3                                                      retn
                                                                
                                                                open_read:
                                                                ;Open for read
                                                                open_write:
                                                                ;Open for write
000016A2: B8 05 00 00 00 CD 40                                    sys  _open
                                                                  ;jc  short file_notfound ; return 0
000016A9: 73 13                                                   jnc  short open_create_ok ; 18/09/2024
                                                                
                                                                  ; 18/09/2024	
                                                                open_create:
000016AB: 09 C9                                                   or   ecx, ecx
000016AD: 74 F0                                                   jz   short file_notfound ; return 0
                                                                  ; ecx = 1 -> open for write
000016AF: 83 F8 02                                                cmp  eax, 2 ; file not found ?
000016B2: 75 EB                                                   jne  short access_error
000016B4: 49                                                      dec  ecx ; ecx = 0 -> ordinary file
                                                                  ; ebx = file name
000016B5: B8 08 00 00 00 CD 40                                    sys  _creat	  
000016BC: 72 E1                                                   jc   short access_error ; create_err
                                                                
                                                                open_create_ok:
                                                                  ; eax = file handle
                                                                  ; 15/09/2024
000016BE: 40                                                      inc  eax ; file handle (1 based)
                                                                .close_ok:
                                                                close_ok: ; 12/09/2024
000016BF: C3                                                      retn
                                                                
                                                                _OS_fclose:
                                                                ;Close file
                                                                 ;esp+4 - file handle
                                                                
000016C0: 8B 5C 24 04                                             mov  ebx, [esp+4] ; file handle (1 based)
000016C4: 4B                                                      dec  ebx ; 0 based
                                                                
000016C5: B8 06 00 00 00 CD 40                                    sys  _close
000016CC: 73 F1                                                   jnc   short close_ok ; eax = 0
                                                                
                                                                .close_err:
                                                                read_err:  ; 12/09/2024
000016CE: B8 FF FF FF FF                                          mov  eax, -1 ; BAD
000016D3: C3                                                      retn
                                                                
                                                                _OS_fgetc:
                                                                ;Load char from file
                                                                 ;esp+4 - input file
                                                                
000016D4: 8B 44 24 04                                             mov  eax, [esp+4] ; file handle, 1 based
                                                                  ; -1 -> STDIN
000016D8: 40                                                      inc  eax ; -1 -> 0
000016D9: 74 2A                                                   jz   short _OS_getc ; 16/09/2024
                                                                
000016DB: 48                                                      dec  eax ; 1 based
000016DC: 48                                                      dec  eax ; 0 based file handle
                                                                
000016DD: C6 05 12 17 00 00 00                                    mov  byte [character], 0
                                                                
000016E4: BA 01 00 00 00 B9 12 17 00 00 89 C3 B8 03 00 00         sys  _read, eax, character, 1
          00 CD 40                                              
000016F7: 72 D5                                                   jc   short read_err
                                                                
000016F9: 21 C0                                                   and 	eax,eax	
000016FB: 75 02                                                   jnz	short _OS_fgetc_ok	
000016FD: 48                                                      dec	eax
                                                                  ; eax = -1 ; EOF	
000016FE: C3                                                      retn
                                                                
                                                                _OS_fgetc_ok:	
000016FF: A0 12 17 00 00                                          mov  al, [character]
00001704: C3                                                      retn
                                                                
                                                                _OS_getc:
00001705: BB 00 00 00 00 B8 2E 00 00 00 CD 40                     sys  _stdio, 0 ; read STDIN (wait keypress)
                                                                  ; eax (al) = character (ascii) code
00001711: C3                                                      retn
                                                                
00001712: 00                                                    character: db 0
                                                                
                                                                _OS_fputc:
                                                                ;Save char to file
                                                                 ;esp+4 - output file
                                                                 ;esp+8 - char to write
                                                                
00001713: 8B 4C 24 08                                             mov  ecx, [esp+8]
00001717: 88 0D 12 17 00 00                                       mov  [character], cl
                                                                
0000171D: 8B 44 24 04                                             mov  eax, [esp+4] ; file handle, 1 based
                                                                  ; -1 -> STDOUT/STDERR
00001721: 40                                                      inc  eax ; -1 -> 0
00001722: 74 1A                                                   jz   short _OS_putc_@ ; 16/09/2024
                                                                  	
00001724: 48                                                      dec  eax ; 1 based
00001725: 48                                                      dec  eax ; 0 based file handle
                                                                  
00001726: BA 01 00 00 00 B9 12 17 00 00 89 C3 B8 04 00 00         sys  _write, eax, character, 1
          00 CD 40                                              
00001739: C3                                                      retn
                                                                
                                                                _OS_putc:
                                                                ;Save char to file
                                                                 ;esp+4 - char to write
                                                                
0000173A: 8B 4C 24 04                                             mov  ecx, [esp+4]
                                                                _OS_putc_@:
                                                                  ; cl = character to be written
0000173E: BB 02 00 00 00 B8 2E 00 00 00 CD 40                     sys  _stdio, 2 ; write to STDOUT (display char)
                                                                calloc_ok: ; 13/09/2024
0000174A: C3                                                      retn
                                                                
                                                                _OS_calloc:
                                                                ;Alloc memory
                                                                
                                                                  ; TRDOS 386 v2 feature
                                                                  ; default u.break (bss) address is file size for PRG files
                                                                
                                                                  ; temporary - 23/09/2024
                                                                  ;mov  eax,[ubreak]
                                                                  ;and  eax,eax
                                                                  ;jnz  short ubreak_ready
                                                                
0000174B: BB FF FF FF FF B8 11 00 00 00 CD 40                     sys  _break, -1  ; get u.break address
00001757: 72 1F                                                   jc   short calloc_err
                                                                
                                                                ubreak_ready:	; temporary - 23/09/2024
                                                                  ; eax = [u.break]
00001759: 83 C0 03                                                add  eax, 3
0000175C: 24 FC                                                   and  al, not 3 ; dword aligned allocation (malloc) address
                                                                
0000175E: 50                                                      push eax ; *	
0000175F: 8B 44 24 08                                             mov  eax, [esp+8] ; element size (integer=4)
00001763: 8B 5C 24 0C                                             mov  ebx, [esp+12] ; structure/area length (element count)
00001767: F7 E3                                                   mul  ebx
                                                                  ;;;
                                                                  ; temporary - 23/09/2024
                                                                  ;mov ecx, eax
                                                                  ;mov edi,[esp] 
                                                                  ;;;
00001769: 03 04 24                                                add  eax, [esp] ; *
                                                                
                                                                  ; new break point - old break point = allocation size
                                                                
                                                                  ; temporary - 23/09/2024
                                                                  ;mov  [ubreak],eax
                                                                  ;;;
                                                                  ; temporary - 23/09/2024
                                                                  ;xor eax, eax
                                                                  ;rep stosb
                                                                  ;;;			
                                                                  ;pop  eax ; *
                                                                  ;retn		
                                                                	
0000176C: 89 C3 B8 11 00 00 00 CD 40                              sys  _break, eax ; set new u.break address
00001775: 58                                                      pop  eax ; * ; 13/09/2024
                                                                  ;jc  short .calloc_err
                                                                
                                                                  ; return value
                                                                  ; eax = start/beginning address
                                                                  ;retn
                                                                  ; 13/09/2024
00001776: 73 D2                                                   jnc	short calloc_ok
                                                                
                                                                calloc_err:
                                                                  ; write "malloc error" message to STDERR
00001778: BE 9F 17 00 00                                          mov  esi, .malloc_err_msg
                                                                .calloc_err_p:
0000177D: AC                                                      lodsb
0000177E: 08 C0                                                   or   al, al
00001780: 74 10                                                   jz   short .calloc_err_x
00001782: 89 C1 BB 03 00 00 00 B8 2E 00 00 00 CD 40               sys  _stdio, 3, eax
00001790: EB EB                                                   jmp  short .calloc_err_p
                                                                
                                                                .calloc_err_x:
00001792: BB FF FF FF FF B8 01 00 00 00 CD 40                     sys  _exit, -1 
0000179E: C3                                                      retn ; normally cpu must not come here !
                                                                
                                                                .malloc_err_msg:
0000179F: 0D 0A                                                   db 0Dh, 0Ah
000017A1: 07                                                      db 07h  ; beep !
000017A2: 4D 65 6D 6F 72 79 20 41 6C 6C 6F 63 61 74 69 6F         db "Memory Allocation Error!"
          6E 20 45 72 72 6F 72 21                               
000017BA: 0D 0A 00                                                db 0Dh, 0Ah, 0
                                                                
                                                                ; temporary - 23/09/2024
                                                                ;ubreak: dd 0
                                                                
                                                                _OS_exit:
000017BD: 8B 5C 24 04                                             mov	ebx, [esp+4]  ; exit code ; 13/09/2024
000017C1: B8 01 00 00 00 CD 40                                    sys  _exit
000017C8: C3                                                      retn ; normally cpu must not come here !
                                                                
                                                                
                                                                _fopen	equ _OS_fopen
                                                                _fputc	equ _OS_fputc
                                                                _fgetc	equ _OS_fgetc
                                                                _fclose equ _OS_fclos
                                                                
                                                                  ; Main program (compiled from C)
                                                                  include "GETARG.ASM"
                                                                ; -----------------------------------------------------------
                                                                ; Small C Compiler for TRDOS 386 (v2.0.9 and later)
                                                                ; Erdogan Tan - 2024
                                                                ; Beginning: 05/09/2024
                                                                ; Last Update: 14/09/2024
                                                                ; -----------------------------------------------------------
                                                                ; Derived from 'getarg.asm' file of KolibriOS SCC source code
                                                                ; 2024
                                                                
                                                                ; Get command line argument. 
                                                                ; Entry: n    = Number of the argument.
                                                                ;        s    = Destination string pointer.
                                                                ;        size = Size of destination string.
                                                                ;        argc = Argument count from main().
                                                                ;        argv = Argument vector(s) from main().
                                                                ; Returns number of characters moved on success,
                                                                ; else EOF.
                                                                
                                                                _getarg:	; int n; char *s; int size,argc,argv[];
000017C9: 55                                                    PUSH EBP
000017CA: 89 E5                                                 MOV EBP,ESP
000017CC: 83 C4 F8                                              ADD ESP,-8	; char *str; int i;
000017CF: 8D 45 18                                              LEA EAX,[EBP+24] ; n
000017D2: 8B 18                                                 MOV EBX,[EAX]	; if(n<0 | n>=argc)
000017D4: 31 C0                                                 XOR EAX,EAX	; 0
000017D6: E8 5E E8 FF FF                                        CALL __lt	; if(n<0
000017DB: 50                                                    PUSH EAX	; 0 (false) or 1 (true)
                                                                ;LEA EBX,[EBP+24]
                                                                ;MOV EAX,[EBX]
                                                                ;PUSH EAX
000017DC: 53                                                    PUSH EBX	; n
000017DD: 8D 5D 0C                                              LEA EBX,[EBP+12] ; argc
000017E0: 8B 03                                                 MOV EAX,[EBX]
000017E2: 5B                                                    POP EBX
000017E3: E8 66 E8 FF FF                                        CALL __ge	; | n>=argc)
000017E8: 5B                                                    POP EBX
000017E9: 09 D8                                                 OR EAX,EBX	; (condition 1 or condition 2)
                                                                ;OR EAX,EAX
                                                                ;JNZ short _0_3
000017EB: 74 12                                                 JZ short _0_2	; }
                                                                _0_3:		; {*s=NULL;
000017ED: 8D 45 14                                              LEA EAX,[EBP+20] ; pointer to *s address
000017F0: 8B 18                                                 MOV EBX,[EAX]	; (ebx = address of *s)
000017F2: 31 C0                                                 XOR EAX,EAX	; NULL
000017F4: 88 03                                                 MOV [EBX],AL	; *s=NULL;  ; ([ebx] = s value)
000017F6: B8 FF FF FF FF                                        MOV EAX,-1	; return EOF;
000017FB: 89 EC                                                 MOV ESP,EBP
000017FD: 5D                                                    POP EBP
000017FE: C3                                                    RETN
                                                                _0_2:		; }
000017FF: 8D 5D F8                                              LEA EBX,[EBP-8]
                                                                ;XOR EAX,EAX
                                                                ;eax = 0
00001802: 89 03                                                 MOV [EBX],EAX	; i=0;
00001804: 8D 45 FC                                              LEA EAX,[EBP-4]
00001807: 50                                                    PUSH EAX	; str
00001808: 8D 5D 08                                              LEA EBX,[EBP+8] ; pointer to argv[]
0000180B: 8B 03                                                 MOV EAX,[EBX]
0000180D: 50                                                    PUSH EAX	; argv[] (address)
0000180E: 8D 5D 18                                              LEA EBX,[EBP+24] ; n
00001811: 8B 03                                                 MOV EAX,[EBX]
00001813: 5B                                                    POP EBX
00001814: D1 E0                                                 SHL EAX,1
00001816: D1 E0                                                 SHL EAX,1	; n*4
00001818: 01 C3                                                 ADD EBX,EAX	; argv[0]+4*n
0000181A: 8B 03                                                 MOV EAX,[EBX]	; argv[n]
0000181C: 5B                                                    POP EBX		; str (address)
0000181D: 89 03                                                 MOV [EBX],EAX	; str = argv[n]
                                                                _0_4:		; while(i<size)
0000181F: 8D 5D F8                                              LEA EBX,[EBP-8]
00001822: 8B 03                                                 MOV EAX,[EBX]
00001824: 50                                                    PUSH EAX	; i
00001825: 8D 5D 10                                              LEA EBX,[EBP+16] ; pointer to size
00001828: 8B 03                                                 MOV EAX,[EBX]
0000182A: 5B                                                    POP EBX
0000182B: E8 09 E8 FF FF                                        CALL __lt	; is i<size ?
00001830: 09 C0                                                 OR EAX,EAX
00001832: 74 2E                                                 JZ short _0_5	; false, jump to s[i]=NULL;
                                                                _0_6:		; true, if((s[i]=str[i])==NULL) break;
00001834: 8D 5D 14                                              LEA EBX,[EBP+20]
00001837: 8B 03                                                 MOV EAX,[EBX]
00001839: 50                                                    PUSH EAX	; s (address)
0000183A: 8D 5D F8                                              LEA EBX,[EBP-8]
0000183D: 8B 03                                                 MOV EAX,[EBX]	; i (value)
0000183F: 5B                                                    POP EBX
00001840: 01 D8                                                 ADD EAX,EBX	; (i offset from start of s)
00001842: 50                                                    PUSH EAX	; s[i]
00001843: 8D 5D FC                                              LEA EBX,[EBP-4]	; pointer to of *str address
00001846: 8B 03                                                 MOV EAX,[EBX]	; str
00001848: 50                                                    PUSH EAX
00001849: 8D 5D F8                                              LEA EBX,[EBP-8]
0000184C: 8B 03                                                 MOV EAX,[EBX]
0000184E: 5B                                                    POP EBX		; str (address)
0000184F: 01 C3                                                 ADD EBX,EAX	; (i offset from start of str)
00001851: 0F BE 03                                              MOVSX EAX,BYTE [EBX] ; char str[i]
00001854: 5B                                                    POP EBX		; s[i]
00001855: 88 03                                                 MOV [EBX],AL	; s[i] = str[i]
00001857: 09 C0                                                 OR EAX,EAX	; if((s[i]=str[i])==NULL
00001859: 74 07                                                 JZ short _0_5	; break;
                                                                _0_7:		; else, ++i;
0000185B: 8D 5D F8                                              LEA EBX,[EBP-8]
                                                                ;MOV EAX,[EBX]
                                                                ;INC EAX
                                                                ;MOV [EBX],EAX
0000185E: FF 03                                                 INC DWORD [EBX] ; ++i
00001860: EB BD                                                 JMP short _0_4  ; jump to while(i<size)
                                                                _0_5:
00001862: 8D 5D 14                                              LEA EBX,[EBP+20]
00001865: 8B 03                                                 MOV EAX,[EBX]
00001867: 50                                                    PUSH EAX	; s
00001868: 8D 5D F8                                              LEA EBX,[EBP-8] 
0000186B: 8B 03                                                 MOV EAX,[EBX]	; i
0000186D: 5B                                                    POP EBX
0000186E: 01 C3                                                 ADD EBX,EAX	; start of s + i = s[i]
                                                                ;PUSH EAX	; i
                                                                ;XOR EAX,EAX	; NULL
                                                                ;MOV [EBX],AL	; s[i]=NULL;
00001870: C6 03 00                                              MOV BYTE [EBX],0
                                                                ;;LEA EBX,[EBP-8]
                                                                ;;MOV EAX,[EBX]
                                                                ;POP EAX	; return i;
00001873: 89 EC                                                 MOV ESP,EBP
00001875: 5D                                                    POP EBP
00001876: C3                                                    RETN
                                                                
                                                                  include "HELLO.ASM"
                                                                
                                                                _main:
00001877: 55                                                    PUSH EBP
00001878: 89 E5                                                 MOV EBP,ESP
0000187A: 83 C4 F0                                              ADD ESP,-16
0000187D: 8D 45 FC                                              LEA EAX,[EBP-4]
00001880: 89 C3                                                 MOV EBX,EAX
00001882: B8 FF FF FF FF                                        MOV EAX,-1
00001887: 89 03                                                 MOV [EBX],EAX
00001889: 8D 45 F8                                              LEA EAX,[EBP-8]
0000188C: 89 C3                                                 MOV EBX,EAX
0000188E: 31 C0                                                 XOR EAX,EAX
00001890: 89 03                                                 MOV [EBX],EAX
00001892: 8D 45 F4                                              LEA EAX,[EBP-12]
00001895: 89 C3                                                 MOV EBX,EAX
00001897: B8 00 00 01 00                                        MOV EAX,65536
0000189C: 89 03                                                 MOV [EBX],EAX
0000189E: 8D 45 F0                                              LEA EAX,[EBP-16]
000018A1: 89 C3                                                 MOV EBX,EAX
000018A3: B8 40 42 0F 00                                        MOV EAX,1000000
000018A8: 89 03                                                 MOV [EBX],EAX
000018AA: 8D 45 F8                                              LEA EAX,[EBP-8]
000018AD: 50                                                    PUSH EAX
000018AE: 8D 45 FC                                              LEA EAX,[EBP-4]
000018B1: 89 C3                                                 MOV EBX,EAX
000018B3: 8B 03                                                 MOV EAX,[EBX]
000018B5: 50                                                    PUSH EAX
000018B6: 8D 45 F4                                              LEA EAX,[EBP-12]
000018B9: 89 C3                                                 MOV EBX,EAX
000018BB: 8B 03                                                 MOV EAX,[EBX]
000018BD: 5B                                                    POP EBX
000018BE: F7 EB                                                 IMUL EBX
000018C0: 5B                                                    POP EBX
000018C1: 89 03                                                 MOV [EBX],EAX
000018C3: B8 D7 18 00 00                                        MOV EAX,_1+0
000018C8: 50                                                    PUSH EAX
000018C9: B1 01                                                 MOV CL,1
000018CB: E8 99 F2 FF FF                                        CALL _printf
000018D0: 83 C4 04                                              ADD ESP,4
000018D3: 89 EC                                                 MOV ESP,EBP
000018D5: 5D                                                    POP EBP
000018D6: C3                                                    RET
000018D7: 48 65 6C 6C 6F 2C 20 57 6F 72                         _1 DB 72,101,108,108,111,44,32,87,111,114
000018E1: 6C 64 21 0A 00                                         DB 108,100,33,10,0
                                                                
                                                                ;E:.
                                                                
                                                                START:
                                                                   ; esp = argc
                                                                   ; esp+4 = argv[0] address
000018E6: 58                                                       pop  eax	; argc (value)
000018E7: 89 E3                                                    mov  ebx,esp	; argv[0] address (not value)
000018E9: 50                                                       push	eax	; argc
000018EA: 53                                                       push	ebx
000018EB: E8 87 FF FF FF                                           call _main
                                                                   ;add esp,8
000018F0: 5B                                                       pop	ebx
                                                                   ;
000018F1: 31 DB                                                    xor  ebx,ebx	; exit code = 0
000018F3: B8 01 00 00 00                                           mov	eax,1	; sysexit
000018F8: CD 40                                                    int  40h
                                                                
000018FA: 00                                                      db 0	
000018FB: 53 6D 61 6C 6C 20 43 20 43 6F 6D 70 69 6C 65 72         db "Small C Compiler v1.0 for TRDOS 386"
          20 76 31 2E 30 20 66 6F 72 20 54 52 44 4F 53 20       
          33 38 36                                              
0000191E: 00                                                      db 0
0000191F: 45 72 64 6F 67 61 6E 20 54 61 6E 20 2D 20 32 30         db "Erdogan Tan - 2024"
          32 34                                                 
00001931: 00                                                      db 0	
